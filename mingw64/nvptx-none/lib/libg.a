!<arch>
//                                              2240      `
lib_a-__adjust.o/
lib_a-__atexit.o/
lib_a-__call_atexit.o/
lib_a-__dprintf.o/
lib_a-__ten_mu.o/
lib_a-aligned_alloc.o/
lib_a-arc4random.o/
lib_a-arc4random_uniform.o/
lib_a-asctime_r.o/
lib_a-clearerr.o/
lib_a-cxa_atexit.o/
lib_a-cxa_finalize.o/
lib_a-difftime.o/
lib_a-dtoastub.o/
lib_a-explicit_bzero.o/
lib_a-fiprintf.o/
lib_a-gdtoa-gethex.o/
lib_a-gdtoa-hexnan.o/
lib_a-getchar_u.o/
lib_a-getdelim.o/
lib_a-getenv_r.o/
lib_a-getreent.o/
lib_a-gettimeofdayr.o/
lib_a-gettzinfo.o/
lib_a-gmtime_r.o/
lib_a-isxdigit.o/
lib_a-lcltime_r.o/
lib_a-localeconv.o/
lib_a-mallinfor.o/
lib_a-mallstatsr.o/
lib_a-mbstowcs.o/
lib_a-mbstowcs_r.o/
lib_a-mbtowc_r.o/
lib_a-month_lengths.o/
lib_a-on_exit_args.o/
lib_a-putchar_u.o/
lib_a-quick_exit.o/
lib_a-reallocarray.o/
lib_a-reallocf.o/
lib_a-reallocr.o/
lib_a-s_copysign.o/
lib_a-s_finite.o/
lib_a-s_fpclassify.o/
lib_a-s_isinfd.o/
lib_a-s_isnand.o/
lib_a-s_scalbn.o/
lib_a-sb_charsets.o/
lib_a-setbuffer.o/
lib_a-setlinebuf.o/
lib_a-sf_copysign.o/
lib_a-sf_finite.o/
lib_a-sf_fpclassify.o/
lib_a-sf_frexp.o/
lib_a-sf_isinf.o/
lib_a-sf_isinff.o/
lib_a-sf_isnan.o/
lib_a-sf_isnanf.o/
lib_a-sf_ldexp.o/
lib_a-sf_scalbn.o/
lib_a-siprintf.o/
lib_a-sniprintf.o/
lib_a-snprintf.o/
lib_a-strcasecmp.o/
lib_a-strdup_r.o/
lib_a-strerror.o/
lib_a-strerror_r.o/
lib_a-strftime.o/
lib_a-strncasecmp.o/
lib_a-strptime.o/
lib_a-strsignal.o/
lib_a-strtoimax.o/
lib_a-strtok_r.o/
lib_a-strtoll_r.o/
lib_a-strtoull.o/
lib_a-strtoull_r.o/
lib_a-strtoumax.o/
lib_a-svfiprintf.o/
lib_a-svfiscanf.o/
lib_a-svfiwprintf.o/
lib_a-svfiwscanf.o/
lib_a-svfprintf.o/
lib_a-svfscanf.o/
lib_a-svfwprintf.o/
lib_a-svfwscanf.o/
lib_a-timingsafe_bcmp.o/
lib_a-timingsafe_memcmp.o/
lib_a-tzcalc_limits.o/
lib_a-u_strerr.o/
lib_a-vdiprintf.o/
lib_a-vdprintf.o/
lib_a-vfiprintf.o/
lib_a-vfiscanf.o/
lib_a-vfiwprintf.o/
lib_a-vfiwscanf.o/
lib_a-vfprintf.o/
lib_a-vfwprintf.o/
lib_a-vfwscanf.o/
lib_a-viprintf.o/
lib_a-vsiprintf.o/
lib_a-vsiscanf.o/
lib_a-vsniprintf.o/
lib_a-vsnprintf.o/
lib_a-vsprintf.o/
lib_a-wcsftime.o/
lib_a-wcstoimax.o/
lib_a-wcstoll_r.o/
lib_a-wcstombs.o/
lib_a-wcstombs_r.o/
lib_a-wcstoull.o/
lib_a-wcstoull_r.o/
lib_a-wcstoumax.o/
lib_a-wcswidth.o/
lib_a-wctomb_r.o/
lib_a-wmemmove.o/
lib_a-xpg_strerror_r.o/

lib_a-_Exit.o/  1612277261  0     0     100666  616       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _Exit
.visible .func _Exit (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/_Exit.c"
// BEGIN GLOBAL FUNCTION DECL: _exit
.extern .func _exit (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _Exit
.visible .func _Exit (.param .u32 %in_ar0)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r22;
mov.u32 %r22,%ar0;
.loc 1 39 3
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r22;
call _exit,(%out_arg1);
trap;
// (noreturn)
exit;
// (noreturn)
}
}
/0              1612277261  0     0     100666  2372      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __adjust
.visible .func (.param .f64 %value_out) __adjust (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/__adjust.c"
// BEGIN GLOBAL FUNCTION DECL: __exp10
.extern .func (.param .f64 %value_out) __exp10 (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __adjust
.visible .func (.param .f64 %value_out) __adjust (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .f64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .pred %r37;
.reg .pred %r38;
.reg .pred %r39;
.reg .u32 %r41;
.reg .f64 %r42;
.reg .f64 %r44;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u32 %r30,%ar2;
mov.u32 %r31,%ar3;
.loc 1 22 6
setp.le.s32 %r32,%r30,308;
@ %r32 bra $L2;
.loc 1 24 19
mov.u32 %r33,34;
st.u32 [%r28],%r33;
.loc 1 25 33
setp.ne.u32 %r34,%r31,0;
selp.f64 %r27,0dfff0000000000000,0d7ff0000000000000,%r34;
bra $L1;
$L2:
.loc 1 27 11
setp.ge.s32 %r35,%r30,-308;
@ %r35 bra $L4;
.loc 1 29 19
mov.u32 %r36,34;
st.u32 [%r28],%r36;
.loc 1 30 14
mov.f64 %r27,0d0000000000000000;
bra $L1;
$L4:
.loc 1 33 5
ld.f64 %r27,[%r29];
.loc 1 34 6
setp.eq.u32 %r37,%r31,0;
@ %r37 bra $L5;
.loc 1 35 7
neg.f64 %r27,%r27;
$L5:
.loc 1 36 6
setp.eq.u32 %r38,%r30,0;
@ %r38 bra $L1;
.loc 1 39 6
setp.ge.s32 %r39,%r30,0;
@ %r39 bra $L6;
.loc 1 40 25
neg.s32 %r41,%r30;
.loc 1 40 16
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r41;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r42,[%value_in];
}
.loc 1 40 14
div.rn.f64 %r27,%r27,%r42;
bra $L1;
$L6:
.loc 1 42 16
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r30;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r44,[%value_in];
}
.loc 1 42 14
mul.f64 %r27,%r27,%r44;
$L1:
.loc 1 43 1
mov.f64 %value,%r27;
st.param.f64 [%value_out],%value;
ret;
}
/18             1612277261  0     0     100666  3349      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __register_exitproc
.visible .func (.param .u32 %value_out) __register_exitproc (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/__atexit.c"
// BEGIN GLOBAL VAR DECL: _global_impure_ptr
.extern .const .align 8 .u64 _global_impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.extern .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __register_exitproc
.visible .func (.param .u32 %value_out) __register_exitproc (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u32 %r28;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .pred %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u64 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .pred %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u64 %r62;
.reg .u64 %r64;
mov.u32 %r37,%ar0;
mov.u64 %r38,%ar1;
mov.u64 %r39,%ar2;
mov.u64 %r40,%ar3;
.loc 1 80 7
ld.const.u64 %r22,[_global_impure_ptr];
.loc 1 80 5
ld.u64 %r34,[%r22+504];
.loc 1 81 6
setp.ne.u64 %r41,%r34,0;
@ %r41 bra $L2;
.loc 1 83 26
add.u64 %r34,%r22,512;
.loc 1 83 22
st.u64 [%r22+504],%r34;
$L2:
.loc 1 90 8
ld.u32 %r23,[%r34+8];
.loc 1 90 6
setp.gt.s32 %r42,%r23,31;
@ %r42 bra $L3;
.loc 1 154 18
add.u32 %r35,%r23,1;
bra $L4;
$L3:
.loc 1 98 30
mov.u64 %r43,792;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r43;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r44,[%value_in];
}
mov.u64 %r34,%r44;
.loc 1 99 10
setp.eq.u64 %r46,%r34,0;
@ %r46 bra $L9;
.loc 1 106 15
mov.u32 %r47,0;
st.u32 [%r34+8],%r47;
.loc 1 107 16
ld.u64 %r48,[%r22+504];
st.u64 [%r34],%r48;
.loc 1 108 22
st.u64 [%r22+504],%r34;
.loc 1 110 33
mov.u64 %r49,0;
st.u64 [%r34+784],%r49;
mov.u32 %r35,1;
cvt.u32.u64 %r23,%r49;
$L4:
.loc 1 118 6
setp.ne.u32 %r50,%r37,0;
@ %r50 bra $L6;
cvt.s64.s32 %r64,%r23;
bra $L7;
$L6:
cvt.s64.s32 %r64,%r23;
shl.b64 %r52,%r64,3;
add.u64 %r33,%r34,%r52;
.loc 1 148 30
st.u64 [%r33+272],%r39;
.loc 1 149 28
mov.u32 %r53,1;
shl.b32 %r28,%r53,%r23;
.loc 1 149 22
ld.u32 %r55,[%r34+784];
or.b32 %r54,%r55,%r28;
st.u32 [%r34+784],%r54;
.loc 1 150 34
st.u64 [%r33+528],%r40;
.loc 1 151 10
setp.ne.u32 %r56,%r37,2;
@ %r56 bra $L7;
.loc 1 152 16
ld.u32 %r58,[%r34+788];
or.b32 %r57,%r58,%r28;
st.u32 [%r34+788],%r57;
$L7:
.loc 1 154 18
st.u32 [%r34+8],%r35;
.loc 1 154 22
add.u64 %r60,%r64,2;
shl.b64 %r61,%r60,3;
add.u64 %r62,%r34,%r61;
st.u64 [%r62],%r38;
.loc 1 158 10
mov.u32 %r36,0;
bra $L1;
$L9:
.loc 1 104 11
mov.u32 %r36,-1;
$L1:
.loc 1 159 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}

/36             1612277261  0     0     100666  4008      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __call_exitprocs
.visible .func __call_exitprocs (.param .u32 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/__call_atexit.c"
// BEGIN GLOBAL VAR DECL: _global_impure_ptr
.extern .const .align 8 .u64 _global_impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __nvptx_free
.extern .func __nvptx_free (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __call_exitprocs
.visible .func __call_exitprocs (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r25;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .u64 %r36;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u32 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .pred %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .pred %r59;
.reg .u64 %r60;
.reg .pred %r61;
.reg .u32 %r62;
.reg .u32 %r63;
.reg .u32 %r64;
.reg .pred %r65;
.reg .u32 %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .u32 %r72;
.reg .pred %r73;
.reg .u64 %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .pred %r77;
.reg .pred %r78;
.reg .pred %r80;
.reg .pred %r83;
mov.u32 %r48,%ar0;
mov.u64 %r49,%ar1;
.loc 1 86 7
ld.const.u64 %r43,[_global_impure_ptr];
.loc 1 87 9
add.u64 %r44,%r43,504;
setp.eq.u64 %r83,%r49,0;
$L24:
.loc 1 86 5
ld.u64 %r32,[%r43+504];
.loc 1 88 9
setp.ne.u64 %r50,%r32,0;
@ ! %r50 bra $L1;
.loc 1 87 9
mov.u64 %r31,%r44;
$L2:
.loc 1 95 17
ld.u32 %r45,[%r32+8];
.loc 1 95 14
add.u32 %r35,%r45,-1;
.loc 1 95 7
setp.lt.s32 %r51,%r35,0;
@ %r51 bra $L3;
cvt.s64.s32 %r52,%r45;
add.u64 %r53,%r52,1;
shl.b64 %r54,%r53,3;
add.u64 %r36,%r32,%r54;
$L12:
.loc 1 102 7
@ %r83 bra $L4;
.loc 1 102 20
ld.u64 %r56,[%r36+512];
setp.ne.u64 %r57,%r56,%r49;
@ %r57 bra $L5;
$L4:
.loc 1 107 7
ld.u64 %r34,[%r36];
.loc 1 108 21
add.u32 %r58,%r45,-1;
.loc 1 108 7
setp.ne.u32 %r59,%r58,%r35;
@ %r59 bra $L6;
.loc 1 109 13
st.u32 [%r32+8],%r35;
mov.u32 %r45,%r35;
bra $L7;
$L6:
.loc 1 111 17
mov.u64 %r60,0;
st.u64 [%r36],%r60;
$L7:
.loc 1 114 7
setp.eq.u64 %r61,%r34,0;
@ %r61 bra $L5;
.loc 1 99 6
mov.u32 %r62,1;
shl.b32 %r25,%r62,%r35;
.loc 1 120 33
ld.u32 %r64,[%r32+784];
and.b32 %r63,%r25,%r64;
.loc 1 120 14
setp.ne.u32 %r65,%r63,0;
@ %r65 bra $L8;
.loc 1 121 6
{
$LCT0:
.callprototype _;
call %r34,$LCT0;
}
bra $L9;
$L8:
.loc 1 123 7
ld.u64 %r46,[%r36+256];
.loc 1 122 28
ld.u32 %r67,[%r32+788];
and.b32 %r66,%r25,%r67;
.loc 1 122 12
setp.ne.u32 %r68,%r66,0;
@ %r68 bra $L10;
.loc 1 123 7
{
$LCT1:
.callprototype _ ( .param .u32 %in_ar0,.param .u64 %in_ar1);
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r48;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r46;
call %r34,(%out_arg1,%out_arg2),$LCT1;
}
bra $L9;
$L10:
.loc 1 125 7
{
$LCT2:
.callprototype _ ( .param .u64 %in_ar0);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
call %r34,(%out_arg1),$LCT2;
}
$L9:
.loc 1 130 7
ld.u32 %r72,[%r32+8];
setp.ne.u32 %r73,%r72,%r45;
@ %r73 bra $L24;
.loc 1 130 23
ld.u64 %r74,[%r31];
setp.ne.u64 %r75,%r74,%r32;
@ %r75 bra $L24;
$L5:
.loc 1 95 38
add.u32 %r35,%r35,-1;
.loc 1 95 7
add.u64 %r36,%r36,-8;
setp.ne.u32 %r76,%r35,-1;
@ %r76 bra $L12;
$L3:
.loc 1 139 28
ld.u64 %r47,[%r32];
.loc 1 139 10
setp.ne.u32 %r77,%r45,0;
@ %r77 bra $L13;
.loc 1 139 24
setp.eq.u64 %r78,%r47,0;
@ %r78 bra $L13;
.loc 1 142 11
st.u64 [%r31],%r47;
.loc 1 147 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
call __nvptx_free,(%out_arg1);
}
.loc 1 148 6
ld.u64 %r32,[%r31];
bra $L14;
$L13:
.loc 1 152 10
mov.u64 %r31,%r32;
.loc 1 139 28
mov.u64 %r32,%r47;
$L14:
.loc 1 88 9
setp.ne.u64 %r80,%r32,0;
@ %r80 bra $L2;
$L1:
.loc 1 161 1
ret;
}
/59             1612277261  0     0     100666  15643     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: print_number
.func print_number (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/misc/__dprintf.c"
// BEGIN GLOBAL FUNCTION DECL: __dprintf
.visible .func __dprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __unctrl
.extern .const .align 8 .u64 __unctrl[256];
// BEGIN GLOBAL FUNCTION DECL: _write_r
.extern .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN VAR DEF: chars$0
.const .align 1 .u8 chars$0[16] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102 };
// BEGIN VAR DEF: big_endian_p
.global .align 4 .u32 big_endian_p[1];
// BEGIN FUNCTION DEF: print_number
.func print_number (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u64 %r38;
.reg .u32 %r39;
.reg .u16 %r42;
.reg .u64 %r44;
.reg .u16 %r47;
.reg .u16 %r49;
.reg .u32 %r50;
.reg .u16 %r51;
.reg .pred %r52;
.reg .u32 %r53;
.reg .u32 %r55;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r60;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .pred %r66;
.reg .u64 %r68;
.reg .u32 %r70;
.reg .u64 %r73;
.reg .u64 %r74;
.reg .u64 %r75;
mov.u32 %r36,%ar0;
mov.u32 %r37,%ar1;
mov.u64 %r38,%ar2;
.loc 1 230 7
xor.b32 %r39,%r37,1;
cvt.u16.u32 %r42,%r39;
.loc 1 230 24
shr.u64 %r44,%r38,63;
.loc 1 230 19
cvt.u16.u64 %r49,%r44;
and.b16 %r47,%r42,%r49;
.loc 1 230 6
cvt.u32.u16 %r50,%r47;
cvt.u16.u8 %r51,%r50;
setp.eq.u16 %r52,%r51,0;
@ %r52 bra $L2;
mov.u32 %r53,45;
st.u8 [%frame],%r53;
.loc 1 257 3
ld.global.u64 %r58,[_impure_ptr];
mov.u64 %r57,1;
mov.u32 %r55,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r58;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r55;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r57;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r59,[%value_in];
}
.loc 1 233 11
neg.s64 %r29,%r38;
bra $L3;
$L2:
.loc 1 236 7
mov.u64 %r29,%r38;
$L3:
.loc 1 239 8
mov.u32 %r60,0;
st.u8 [%frame+31],%r60;
.loc 1 242 22
cvt.s64.s32 %r35,%r36;
.loc 1 239 8
add.u64 %r28,%frame,31;
cvta.const.u64 %r75,chars$0;
$L4:
.loc 1 242 12
add.u64 %r28,%r28,-1;
.loc 1 242 22
rem.u64 %r63,%r29,%r35;
.loc 1 242 19
add.u64 %r64,%r75,%r63;
.loc 1 242 12
ld.u8 %r65,[%r64];
st.u8 [%r28],%r65;
mov.u64 %r34,%r29;
.loc 1 243 9
div.u64 %r29,%r29,%r35;
.loc 1 245 3
setp.ge.u64 %r66,%r34,%r35;
@ %r66 bra $L4;
.loc 1 267 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r68,[%value_in];
}
ld.global.u64 %r73,[_impure_ptr];
mov.u32 %r70,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r73;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r70;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r68;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r74,[%value_in];
}
.loc 1 248 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __dprintf
.visible .func __dprintf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar1];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r26;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r34;
.reg .u32 %r36;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u32 %r43;
.reg .u64 %r44;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r65;
.reg .u32 %r75;
.reg .u64 %r77;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u32 %r89;
.reg .u64 %r91;
.reg .u32 %r92;
.reg .pred %r94;
.reg .u16 %r95;
.reg .pred %r96;
.reg .u16 %r97;
.reg .pred %r98;
.reg .u32 %r99;
.reg .u32 %r101;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .pred %r107;
.reg .pred %r108;
.reg .u16 %r109;
.reg .pred %r110;
.reg .u64 %r125;
.reg .u64 %r128;
.reg .u64 %r129;
.reg .u64 %r130;
.reg .u64 %r132;
.reg .u32 %r134;
.reg .u64 %r137;
.reg .u64 %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u64 %r141;
.reg .u32 %r146;
.reg .pred %r147;
.reg .u64 %r148;
.reg .u64 %r149;
.reg .u32 %r150;
.reg .u64 %r151;
.reg .u64 %r152;
.reg .u64 %r153;
.reg .u32 %r154;
.reg .u64 %r155;
.reg .u64 %r157;
.reg .u64 %r158;
.reg .u64 %r159;
.reg .u64 %r160;
.reg .u64 %r161;
.reg .u64 %r162;
.reg .u64 %r164;
.reg .u64 %r165;
.reg .u32 %r166;
.reg .u64 %r175;
.reg .u32 %r177;
.reg .u64 %r180;
.reg .u64 %r181;
.reg .pred %r183;
.reg .pred %r185;
.reg .pred %r187;
.reg .pred %r189;
.reg .pred %r191;
.reg .pred %r193;
.reg .pred %r195;
.reg .pred %r197;
.reg .u64 %r198;
.reg .u64 %r203;
.reg .u64 %r204;
.reg .u64 %r205;
.reg .u64 %r207;
.reg .u32 %r209;
.reg .u64 %r212;
.reg .u64 %r213;
.reg .u32 %r214;
.reg .u32 %r215;
.reg .u64 %r216;
.reg .u64 %r221;
.reg .u32 %r223;
.reg .u64 %r226;
.reg .u64 %r227;
.reg .pred %r228;
.reg .u16 %r230;
.reg .u32 %r231;
.reg .u32 %r233;
.reg .u32 %r235;
.reg .u64 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .pred %r240;
.reg .pred %r241;
.reg .u32 %r242;
.reg .pred %r243;
.reg .pred %r244;
.reg .u32 %r245;
.reg .pred %r246;
.reg .pred %r247;
.reg .pred %r248;
.reg .pred %r249;
.reg .pred %r250;
mov.u64 %r91,%ar0;
.loc 1 70 18
mov.u32 %r92,0;
st.global.u32 [big_endian_p],%r92;
.loc 1 74 3
mov.u64 %r50,%args;
.loc 1 79 10
ld.s8 %r36,[%r91];
.loc 1 79 9
setp.ne.u32 %r94,%r36,0;
@ ! %r94 bra $L6;
$L7:
.loc 1 85 23
add.u64 %r39,%r91,1;
.loc 1 85 10
cvt.u16.u32 %r95,%r36;
setp.eq.u16 %r96,%r95,37;
@ %r96 bra $L8;
.loc 1 87 4
ld.s8 %r29,[%r91];
mov.u64 %r91,%r39;
bra $L9;
$L8:
.loc 1 85 26
ld.s8 %r29,[%r91+1];
.loc 1 85 23
cvt.u16.u32 %r97,%r29;
setp.ne.u16 %r98,%r97,37;
@ %r98 bra $L10;
.loc 1 87 20
add.u64 %r91,%r91,2;
$L9:
cvt.u32.u32 %r99,%r29;
st.u8 [%frame],%r99;
.loc 1 257 3
ld.global.u64 %r104,[_impure_ptr];
mov.u64 %r103,1;
mov.u32 %r101,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r104;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r101;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r103;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r105,[%value_in];
}
.loc 1 88 4
bra $L11;
$L10:
.loc 1 91 10
setp.ne.u16 %r107,%r97,78;
@ %r107 bra $L12;
.loc 1 93 10
ld.u32 %r47,[%r50];
.loc 1 94 6
add.u64 %r57,%r50,11;
and.b64 %r58,%r57,-8;
add.u64 %r50,%r58,8;
ld.u64 %r52,[%r58];
.loc 1 96 12
add.u64 %r48,%r91,3;
.loc 1 96 6
ld.s8 %r49,[%r91+2];
.loc 1 98 10
add.u32 %r89,%r47,-1;
setp.lt.s32 %r108,%r89,0;
@ %r108 bra $L33;
.loc 1 100 8
cvt.u16.u32 %r109,%r49;
setp.eq.u16 %r110,%r109,112;
setp.gt.s16 %r241,%r109,112;
.loc 1 112 5
set.u32.ne.u16 %r242,%r109,100;
.loc 1 207 10
setp.ne.u16 %r243,%r109,100;
.loc 1 112 5
setp.eq.u16 %r244,%r109,120;
selp.u32 %r245,16,10,%r244;
.loc 1 100 8
setp.eq.u16 %r246,%r109,115;
setp.le.s16 %r247,%r109,114;
setp.eq.u16 %r248,%r109,117;
setp.eq.u16 %r249,%r109,99;
setp.eq.u16 %r250,%r109,100;
$L31:
@ %r110 bra $L13;
@ %r241 bra $L14;
@ %r249 bra $L15;
@ %r250 bra $L16;
bra $L17;
$L14:
@ %r246 bra $L18;
@ %r247 bra $L17;
@ %r248 bra $L16;
@ %r244 bra $L16;
bra $L17;
$L15:
.loc 1 103 19
add.u64 %r51,%r52,1;
.loc 1 103 5
cvta.const.u64 %r125,__unctrl;
ld.u8 %r128,[%r52];
shl.b64 %r129,%r128,3;
add.u64 %r130,%r125,%r129;
ld.u64 %r26,[%r130];
.loc 1 267 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r132,[%value_in];
}
ld.global.u64 %r137,[_impure_ptr];
mov.u32 %r134,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r137;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r134;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r132;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r138,[%value_in];
}
.loc 1 103 19
mov.u64 %r52,%r51;
.loc 1 268 1
bra $L17;
$L13:
.loc 1 106 5
mov.u64 %r141,0;
mov.u32 %r140,1;
mov.u32 %r139,16;
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r139;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r140;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r141;
call print_number,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 107 7
add.u64 %r52,%r52,8;
.loc 1 108 5
bra $L17;
$L16:
.loc 1 112 5
neg.s32 %r28,%r242;
.loc 1 204 63
ld.u8 %r80,[%r52+3];
.loc 1 204 50
ld.u8 %r43,[%r52+2];
.loc 1 204 35
ld.u8 %r38,[%r52+1];
.loc 1 204 7
ld.u8 %r22,[%r52];
.loc 1 203 10
ld.global.u32 %r146,[big_endian_p];
setp.eq.u32 %r147,%r146,0;
@ %r147 bra $L19;
.loc 1 204 18
shl.b64 %r148,%r22,24;
.loc 1 204 28
cvt.u32.u32 %r150,%r38;
cvt.u64.u8 %r149,%r150;
.loc 1 204 39
shl.b64 %r151,%r149,16;
.loc 1 204 25
or.b64 %r152,%r148,%r151;
.loc 1 204 4
or.b64 %r153,%r152,%r80;
.loc 1 204 54
shl.b32 %r154,%r43,8;
cvt.s64.s32 %r155,%r154;
.loc 1 204 4
or.b64 %r60,%r153,%r155;
bra $L20;
$L19:
.loc 1 206 4
ld.u8 %r157,[%r52+1];
shl.b64 %r158,%r157,8;
or.b64 %r159,%r158,%r22;
ld.u8 %r160,[%r52+2];
shl.b64 %r161,%r160,16;
or.b64 %r162,%r161,%r159;
shl.b64 %r164,%r80,24;
or.b64 %r165,%r164,%r162;
cvt.u32.u64 %r166,%r165;
cvt.u64.u32 %r60,%r166;
$L20:
.loc 1 207 10
@ %r243 bra $L21;
.loc 1 208 9
xor.b64 %r81,%r60,2147483648;
.loc 1 208 4
add.u64 %r60,%r81,-2147483648;
.loc 1 112 5
mov.u32 %r40,10;
bra $L22;
$L21:
mov.u32 %r40,%r245;
$L22:
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r40;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r60;
call print_number,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 114 7
add.u64 %r52,%r52,4;
.loc 1 115 5
bra $L17;
$L18:
.loc 1 117 5
ld.u64 %r30,[%r52];
.loc 1 267 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r175,[%value_in];
}
ld.global.u64 %r180,[_impure_ptr];
mov.u32 %r177,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r180;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r177;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r175;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r181,[%value_in];
}
.loc 1 118 7
add.u64 %r52,%r52,8;
.loc 1 119 5
bra $L17;
$L12:
.loc 1 127 20
add.u64 %r91,%r91,2;
.loc 1 127 4
setp.eq.u16 %r183,%r97,112;
@ %r183 bra $L23;
setp.gt.s16 %r185,%r97,112;
@ %r185 bra $L24;
setp.eq.u16 %r187,%r97,99;
@ %r187 bra $L25;
setp.eq.u16 %r189,%r97,100;
@ %r189 bra $L26;
bra $L11;
$L24:
setp.eq.u16 %r191,%r97,115;
@ %r191 bra $L27;
setp.le.s16 %r193,%r97,114;
@ %r193 bra $L11;
setp.eq.u16 %r195,%r97,117;
@ %r195 bra $L26;
setp.eq.u16 %r197,%r97,120;
@ %r197 bra $L28;
bra $L11;
$L25:
.loc 1 130 12
mov.u64 %r63,%r50;
add.u64 %r50,%r50,4;
.loc 1 131 8
cvta.const.u64 %r198,__unctrl;
ld.u8 %r203,[%r63];
shl.b64 %r204,%r203,3;
add.u64 %r205,%r198,%r204;
ld.u64 %r34,[%r205];
.loc 1 267 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r207,[%value_in];
}
ld.global.u64 %r212,[_impure_ptr];
mov.u32 %r209,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r212;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r209;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r34;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r207;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r213,[%value_in];
}
.loc 1 268 1
bra $L11;
$L23:
.loc 1 134 27
add.u64 %r59,%r50,7;
and.b64 %r62,%r59,-8;
add.u64 %r50,%r62,8;
.loc 1 135 8
ld.u64 %r216,[%r62];
mov.u32 %r215,1;
mov.u32 %r214,16;
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r214;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r215;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r216;
call print_number,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 136 8
bra $L11;
$L30:
.loc 1 141 8
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r41;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r75;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r77;
call print_number,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 142 8
bra $L11;
$L27:
.loc 1 144 10
add.u64 %r61,%r50,7;
and.b64 %r65,%r61,-8;
add.u64 %r50,%r65,8;
ld.u64 %r44,[%r65];
.loc 1 267 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r221,[%value_in];
}
ld.global.u64 %r226,[_impure_ptr];
mov.u32 %r223,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r226;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r223;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r44;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r221;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r227,[%value_in];
}
.loc 1 268 1
bra $L11;
$L33:
.loc 1 96 12
mov.u64 %r91,%r48;
$L11:
.loc 1 79 10
ld.s8 %r36,[%r91];
.loc 1 79 9
setp.ne.u32 %r228,%r36,0;
@ %r228 bra $L7;
bra $L6;
$L26:
.loc 1 140 12
mov.u64 %r37,%r50;
add.u64 %r50,%r50,4;
.loc 1 140 10
ld.s32 %r77,[%r37];
.loc 1 141 8
cvt.u16.u32 %r230,%r29;
set.u32.ne.u16 %r231,%r230,100;
neg.s32 %r75,%r231;
mov.u32 %r41,10;
bra $L30;
$L28:
.loc 1 140 12
mov.u64 %r79,%r50;
add.u64 %r50,%r50,4;
.loc 1 140 10
ld.s32 %r77,[%r79];
.loc 1 141 8
mov.u32 %r75,1;
mov.u32 %r41,16;
bra $L30;
$L32:
mov.u32 %r233,32;
st.u8 [%frame],%r233;
.loc 1 257 3
ld.global.u64 %r238,[_impure_ptr];
mov.u64 %r237,1;
mov.u32 %r235,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r235;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r237;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r239,[%value_in];
}
.loc 1 98 10
add.u32 %r89,%r89,-1;
bra $L31;
$L17:
.loc 1 121 11
setp.ne.u32 %r240,%r89,0;
@ %r240 bra $L32;
.loc 1 96 12
mov.u64 %r91,%r48;
bra $L11;
$L6:
.loc 1 152 1
ret;
}

lib_a-__exp10.o/1612277261  0     0     100666  6101      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __exp10
.visible .func (.param .f64 %value_out) __exp10 (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/__exp10.c"
// BEGIN VAR DEF: powtab$0
.const .align 8 .u64 powtab$0[5] =
{4607182418800017408,4621819117588971520,4636737291354636288,4652007308841189376,4666723172467343360 };
// BEGIN GLOBAL FUNCTION DEF: __exp10
.visible .func (.param .f64 %value_out) __exp10 (.param .u32 %in_ar0)
{
.reg .f64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r26;
.reg .f64 %r32;
.reg .f64 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .f64 %r42;
.reg .f64 %r43;
.reg .f64 %r44;
.reg .f64 %r52;
.reg .f64 %r58;
.reg .u32 %r59;
.reg .pred %r60;
.reg .u64 %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .pred %r66;
.reg .pred %r67;
.reg .u32 %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .u32 %r72;
.reg .f64 %r73;
.reg .f64 %r74;
.reg .f64 %r75;
.reg .pred %r76;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u32 %r81;
.reg .pred %r82;
.reg .u32 %r84;
.reg .f64 %r85;
.reg .u32 %r87;
.reg .f64 %r88;
.reg .f64 %r89;
.reg .pred %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u32 %r95;
.reg .pred %r96;
.reg .pred %r97;
.reg .u32 %r98;
.reg .pred %r99;
.reg .u32 %r101;
.reg .f64 %r102;
.reg .f64 %r103;
.reg .u32 %r105;
.reg .f64 %r106;
.reg .f64 %r107;
.reg .pred %r108;
.reg .u64 %r109;
.reg .u64 %r110;
.reg .u64 %r111;
.reg .u64 %r112;
.reg .u32 %r113;
.reg .pred %r114;
.reg .u32 %r116;
.reg .f64 %r117;
.reg .u32 %r119;
.reg .f64 %r120;
mov.u32 %r59,%ar0;
.loc 1 18 6
setp.gt.u32 %r60,%r59,4;
@ %r60 bra $L2;
.loc 1 19 20
cvta.const.u64 %r61,powtab$0;
cvt.u64.u32 %r62,%r59;
shl.b64 %r63,%r62,3;
add.u64 %r64,%r61,%r63;
ld.f64 %r58,[%r64];
bra $L1;
$L2:
.loc 1 20 14
and.b32 %r65,%r59,1;
.loc 1 20 11
setp.eq.u32 %r66,%r65,0;
@ %r66 bra $L4;
.loc 1 22 21
add.u32 %r23,%r59,-1;
.loc 1 18 6
setp.eq.u32 %r67,%r59,5;
@ %r67 bra $L19;
.loc 1 20 14
and.b32 %r68,%r23,1;
.loc 1 20 11
setp.eq.u32 %r69,%r68,0;
@ %r69 bra $L6;
.loc 1 18 6
setp.eq.u32 %r70,%r59,6;
@ %r70 bra $L20;
.loc 1 22 21
add.u32 %r72,%r59,-3;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r72;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r73,[%value_in];
}
.loc 1 22 19
mul.f64 %r74,%r73,0d4024000000000000;
mul.f64 %r75,%r74,0d4024000000000000;
mul.f64 %r58,%r75,0d4024000000000000;
bra $L1;
$L20:
mov.f64 %r58,0d412e848000000000;
bra $L1;
$L6:
.loc 1 26 18
shr.u32 %r26,%r23,1;
.loc 1 18 6
setp.gt.u32 %r76,%r23,9;
@ %r76 bra $L8;
.loc 1 19 20
cvta.const.u64 %r77,powtab$0;
cvt.u64.u32 %r78,%r26;
shl.b64 %r79,%r78,3;
add.u64 %r80,%r77,%r79;
ld.f64 %r32,[%r80];
bra $L9;
$L8:
.loc 1 20 14
and.b32 %r81,%r26,1;
.loc 1 20 11
setp.eq.u32 %r82,%r81,0;
@ %r82 bra $L10;
.loc 1 22 21
add.u32 %r84,%r26,-1;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r84;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r85,[%value_in];
}
.loc 1 22 19
mul.f64 %r32,%r85,0d4024000000000000;
bra $L9;
$L10:
.loc 1 26 18
shr.u32 %r87,%r23,2;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r87;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r88,[%value_in];
}
.loc 1 27 16
mul.f64 %r32,%r88,%r88;
$L9:
mul.f64 %r89,%r32,%r32;
.loc 1 22 19
mul.f64 %r58,%r89,0d4024000000000000;
.loc 1 27 16
bra $L1;
$L19:
mov.f64 %r58,0d40f86a0000000000;
.loc 1 22 19
bra $L1;
$L4:
.loc 1 26 18
shr.u32 %r24,%r59,1;
.loc 1 18 6
setp.gt.u32 %r90,%r59,9;
@ %r90 bra $L11;
.loc 1 19 20
cvta.const.u64 %r91,powtab$0;
cvt.u64.u32 %r92,%r24;
shl.b64 %r93,%r92,3;
add.u64 %r94,%r91,%r93;
ld.f64 %r38,[%r94];
.loc 1 27 16
mul.f64 %r58,%r38,%r38;
.loc 1 19 20
bra $L1;
$L11:
.loc 1 20 14
and.b32 %r95,%r24,1;
.loc 1 20 11
setp.eq.u32 %r96,%r95,0;
@ %r96 bra $L13;
.loc 1 22 21
add.u32 %r40,%r24,-1;
.loc 1 18 6
setp.eq.u32 %r97,%r24,5;
@ %r97 bra $L21;
.loc 1 20 14
and.b32 %r98,%r40,1;
.loc 1 20 11
setp.eq.u32 %r99,%r98,0;
@ %r99 bra $L15;
.loc 1 22 21
add.u32 %r101,%r24,-2;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r101;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r102,[%value_in];
}
.loc 1 22 19
mul.f64 %r103,%r102,0d4024000000000000;
mul.f64 %r42,%r103,0d4024000000000000;
.loc 1 27 16
mul.f64 %r58,%r42,%r42;
.loc 1 22 19
bra $L1;
$L15:
.loc 1 26 18
shr.u32 %r105,%r40,1;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r105;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r106,[%value_in];
}
.loc 1 27 16
mul.f64 %r107,%r106,%r106;
.loc 1 22 19
mul.f64 %r44,%r107,0d4024000000000000;
.loc 1 27 16
mul.f64 %r58,%r44,%r44;
bra $L1;
$L21:
mov.f64 %r58,0d4202a05f20000000;
.loc 1 22 19
bra $L1;
$L13:
.loc 1 26 18
shr.u32 %r41,%r59,2;
.loc 1 18 6
setp.gt.u32 %r108,%r59,19;
@ %r108 bra $L16;
.loc 1 19 20
cvta.const.u64 %r109,powtab$0;
cvt.u64.u32 %r110,%r41;
shl.b64 %r111,%r110,3;
add.u64 %r112,%r109,%r111;
ld.f64 %r52,[%r112];
bra $L17;
$L16:
.loc 1 20 14
and.b32 %r113,%r41,1;
.loc 1 20 11
setp.eq.u32 %r114,%r113,0;
@ %r114 bra $L18;
.loc 1 22 21
add.u32 %r116,%r41,-1;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r116;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r117,[%value_in];
}
.loc 1 22 19
mul.f64 %r52,%r117,0d4024000000000000;
bra $L17;
$L18:
.loc 1 26 18
shr.u32 %r119,%r59,3;
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r119;
call (%value_in),__exp10,(%out_arg1);
ld.param.f64 %r120,[%value_in];
}
.loc 1 27 16
mul.f64 %r52,%r120,%r120;
$L17:
mul.f64 %r43,%r52,%r52;
mul.f64 %r58,%r43,%r43;
$L1:
.loc 1 29 1
mov.f64 %value,%r58;
st.param.f64 [%value_out],%value;
ret;
}

/78             1612277261  0     0     100666  871       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __ten_mul
.visible .func (.param .u32 %value_out) __ten_mul (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/__ten_mu.c"
// BEGIN GLOBAL FUNCTION DEF: __ten_mul
.visible .func (.param .u32 %value_out) __ten_mul (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .f64 %r24;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .f64 %r28;
.reg .f64 %r29;
mov.u64 %r26,%ar0;
mov.u32 %r27,%ar1;
.loc 1 20 8
cvt.rn.f64.s32 %r28,%r27;
ld.f64 %r29,[%r26];
fma.rn.f64 %r24,%r29,0d4024000000000000,%r28;
st.f64 [%r26],%r24;
.loc 1 22 10
mov.u32 %value,0;
.loc 1 23 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-abort.o/  1612277261  0     0     100666  299       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: abort
.visible .func abort;
.file 1 "../../../../../../newlib/libc/machine/nvptx/abort.c"
// BEGIN GLOBAL FUNCTION DEF: abort
.visible .func abort
{
.loc 1 22 5
trap;
exit;
}

lib_a-abs.o/    1612277261  0     0     100666  539       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: abs
.visible .func (.param .u32 %value_out) abs (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/abs.c"
// BEGIN GLOBAL FUNCTION DEF: abs
.visible .func (.param .u32 %value_out) abs (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r23;
mov.u32 %r23,%ar0;
.loc 1 37 23
abs.s32 %value,%r23;
.loc 1 38 1
st.param.u32 [%value_out],%value;
ret;
}

/96             1612277261  0     0     100666  1328      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: aligned_alloc
.visible .func (.param .u64 %value_out) aligned_alloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/aligned_alloc.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _memalign_r
.extern .func (.param .u32 %value_out) _memalign_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: aligned_alloc
.visible .func (.param .u64 %value_out) aligned_alloc (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 35 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
call (%value_in),_memalign_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r32,[%value_in];
}
cvt.s64.s32 %value,%r32;
.loc 1 36 1
st.param.u64 [%value_out],%value;
ret;
}
/119            1612277261  0     0     100666  34321     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: chacha_encrypt_bytes$constprop$0
.func chacha_encrypt_bytes$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/chacha_private.h"
// BEGIN FUNCTION DECL: chacha_keysetup$constprop$0
.func chacha_keysetup$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DECL: _rs_stir
.func _rs_stir;
.file 2 "../../../../../newlib/libc/stdlib/arc4random.c"
.file 3 "../../../../../newlib/libc/stdlib/arc4random.h"
// BEGIN GLOBAL FUNCTION DECL: arc4random
.visible .func (.param .u32 %value_out) arc4random;
// BEGIN GLOBAL FUNCTION DECL: arc4random_buf
.visible .func arc4random_buf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: getentropy
.extern .func (.param .u32 %value_out) getentropy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: raise
.extern .func (.param .u32 %value_out) raise (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: explicit_bzero
.extern .func explicit_bzero (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN VAR DEF: rs
.global .align 8 .u64 rs[1];
// BEGIN VAR DEF: rsx
.global .align 8 .u64 rsx[1];
// BEGIN VAR DEF: _arc4random_data
.global .align 8 .u64 _arc4random_data[138];
// BEGIN FUNCTION DEF: chacha_encrypt_bytes$constprop$0
.func chacha_encrypt_bytes$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[64];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u32 %r49;
.reg .u32 %r50;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u32 %r59;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .u32 %r63;
.reg .u32 %r64;
.reg .u32 %r65;
.reg .u32 %r66;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .u32 %r83;
.reg .u32 %r84;
.reg .u32 %r85;
.reg .u32 %r86;
.reg .u32 %r87;
.reg .u32 %r88;
.reg .u32 %r89;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u32 %r94;
.reg .u32 %r95;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .u32 %r98;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .u32 %r101;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .u32 %r106;
.reg .u32 %r107;
.reg .u32 %r108;
.reg .u32 %r109;
.reg .u32 %r110;
.reg .u32 %r111;
.reg .u32 %r112;
.reg .u32 %r113;
.reg .u32 %r114;
.reg .u32 %r115;
.reg .u32 %r116;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u32 %r119;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u32 %r122;
.reg .u32 %r123;
.reg .u32 %r124;
.reg .u32 %r125;
.reg .u32 %r126;
.reg .u32 %r127;
.reg .u32 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u32 %r135;
.reg .u32 %r136;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .u32 %r147;
.reg .u32 %r148;
.reg .u32 %r149;
.reg .u32 %r150;
.reg .u32 %r151;
.reg .u32 %r264;
.reg .u64 %r266;
.reg .u64 %r268;
.reg .u32 %r269;
.reg .u32 %r270;
.reg .u32 %r271;
.reg .u32 %r272;
.reg .u32 %r273;
.reg .u32 %r274;
.reg .u32 %r275;
.reg .u32 %r276;
.reg .u32 %r277;
.reg .u32 %r278;
.reg .u32 %r279;
.reg .u32 %r280;
.reg .u32 %r281;
.reg .u32 %r282;
.reg .u32 %r283;
.reg .u32 %r284;
.reg .u32 %r285;
.reg .u32 %r286;
.reg .u32 %r287;
.reg .u32 %r288;
.reg .u32 %r289;
.reg .u32 %r290;
.reg .u32 %r291;
.reg .u32 %r292;
.reg .u32 %r293;
.reg .u32 %r294;
.reg .u32 %r295;
.reg .u32 %r296;
.reg .u32 %r297;
.reg .u32 %r298;
.reg .u32 %r299;
.reg .u32 %r300;
.reg .pred %r301;
.reg .pred %r302;
.reg .u32 %r303;
.reg .u32 %r304;
.reg .u32 %r305;
.reg .u32 %r306;
.reg .u32 %r307;
.reg .u32 %r308;
.reg .u32 %r309;
.reg .u32 %r310;
.reg .u32 %r311;
.reg .u32 %r312;
.reg .u32 %r313;
.reg .u32 %r314;
.reg .u32 %r315;
.reg .u32 %r316;
.reg .u32 %r317;
.reg .u32 %r318;
.reg .u32 %r319;
.reg .u32 %r320;
.reg .u32 %r321;
.reg .u32 %r322;
.reg .u32 %r323;
.reg .u32 %r324;
.reg .u32 %r325;
.reg .u32 %r326;
.reg .u32 %r327;
.reg .u32 %r328;
.reg .u32 %r329;
.reg .u32 %r330;
.reg .u32 %r331;
.reg .u32 %r332;
.reg .u32 %r333;
.reg .u32 %r334;
.reg .u32 %r335;
.reg .u32 %r336;
.reg .u32 %r337;
.reg .u32 %r338;
.reg .u32 %r339;
.reg .u32 %r340;
.reg .u32 %r341;
.reg .u32 %r342;
.reg .u32 %r343;
.reg .u32 %r344;
.reg .u32 %r345;
.reg .u32 %r346;
.reg .u32 %r347;
.reg .u32 %r348;
.reg .u32 %r349;
.reg .u32 %r350;
.reg .pred %r351;
.reg .u32 %r352;
.reg .pred %r353;
mov.u64 %r266,%ar0;
mov.u64 %r268,%ar2;
.loc 1 98 6
ld.u32 %r22,[%r266];
.loc 1 99 6
ld.u32 %r23,[%r266+4];
.loc 1 100 6
ld.u32 %r24,[%r266+8];
.loc 1 101 6
ld.u32 %r25,[%r266+12];
.loc 1 102 6
ld.u32 %r26,[%r266+16];
.loc 1 103 6
ld.u32 %r27,[%r266+20];
.loc 1 104 6
ld.u32 %r28,[%r266+24];
.loc 1 105 6
ld.u32 %r29,[%r266+28];
.loc 1 106 6
ld.u32 %r30,[%r266+32];
.loc 1 107 6
ld.u32 %r31,[%r266+36];
.loc 1 108 7
ld.u32 %r32,[%r266+40];
.loc 1 109 7
ld.u32 %r33,[%r266+44];
.loc 1 110 7
ld.u32 %r34,[%r266+48];
.loc 1 111 7
ld.u32 %r146,[%r266+52];
.loc 1 112 7
ld.u32 %r35,[%r266+56];
.loc 1 113 7
ld.u32 %r36,[%r266+60];
.loc 1 110 7
mov.u32 %r144,%r34;
.loc 1 113 7
mov.u32 %r142,1024;
$L2:
.loc 1 133 9
mov.u32 %r106,%r33;
.loc 1 137 9
mov.u32 %r93,%r36;
.loc 1 129 8
mov.u32 %r120,%r29;
.loc 1 125 8
mov.u32 %r127,%r25;
.loc 1 132 9
mov.u32 %r94,%r32;
.loc 1 136 9
mov.u32 %r129,%r35;
.loc 1 128 8
mov.u32 %r108,%r28;
.loc 1 124 8
mov.u32 %r115,%r24;
.loc 1 131 8
mov.u32 %r130,%r31;
mov.u32 %r117,%r146;
.loc 1 127 8
mov.u32 %r96,%r27;
.loc 1 123 8
mov.u32 %r103,%r23;
.loc 1 130 8
mov.u32 %r118,%r30;
mov.u32 %r105,%r144;
.loc 1 126 8
mov.u32 %r132,%r26;
.loc 1 122 8
mov.u32 %r91,%r22;
mov.u32 %r264,10;
$L3:
.loc 1 139 7
add.u32 %r37,%r91,%r132;
xor.b32 %r38,%r37,%r105;
shl.b32 %r269,%r38,16;
shr.u32 %r39,%r38,16;
or.b32 %r39,%r39,%r269;
add.u32 %r40,%r39,%r118;
xor.b32 %r41,%r40,%r132;
shl.b32 %r270,%r41,12;
shr.u32 %r42,%r41,20;
or.b32 %r42,%r42,%r270;
add.u32 %r43,%r37,%r42;
xor.b32 %r44,%r39,%r43;
shl.b32 %r271,%r44,8;
shr.u32 %r45,%r44,24;
or.b32 %r45,%r45,%r271;
add.u32 %r46,%r40,%r45;
xor.b32 %r47,%r42,%r46;
shl.b32 %r272,%r47,7;
shr.u32 %r48,%r47,25;
or.b32 %r48,%r48,%r272;
.loc 1 140 7
add.u32 %r49,%r103,%r96;
xor.b32 %r50,%r49,%r117;
shl.b32 %r273,%r50,16;
shr.u32 %r51,%r50,16;
or.b32 %r51,%r51,%r273;
add.u32 %r52,%r51,%r130;
xor.b32 %r53,%r52,%r96;
shl.b32 %r274,%r53,12;
shr.u32 %r54,%r53,20;
or.b32 %r54,%r54,%r274;
add.u32 %r55,%r49,%r54;
xor.b32 %r56,%r51,%r55;
shl.b32 %r275,%r56,8;
shr.u32 %r57,%r56,24;
or.b32 %r57,%r57,%r275;
add.u32 %r58,%r52,%r57;
xor.b32 %r59,%r54,%r58;
shl.b32 %r276,%r59,7;
shr.u32 %r60,%r59,25;
or.b32 %r60,%r60,%r276;
.loc 1 141 7
add.u32 %r61,%r115,%r108;
xor.b32 %r62,%r61,%r129;
shl.b32 %r277,%r62,16;
shr.u32 %r63,%r62,16;
or.b32 %r63,%r63,%r277;
add.u32 %r64,%r63,%r94;
xor.b32 %r65,%r64,%r108;
shl.b32 %r278,%r65,12;
shr.u32 %r66,%r65,20;
or.b32 %r66,%r66,%r278;
add.u32 %r67,%r61,%r66;
xor.b32 %r68,%r63,%r67;
shl.b32 %r279,%r68,8;
shr.u32 %r69,%r68,24;
or.b32 %r69,%r69,%r279;
add.u32 %r70,%r64,%r69;
xor.b32 %r71,%r66,%r70;
shl.b32 %r280,%r71,7;
shr.u32 %r72,%r71,25;
or.b32 %r72,%r72,%r280;
.loc 1 142 7
add.u32 %r73,%r127,%r120;
xor.b32 %r74,%r73,%r93;
shl.b32 %r281,%r74,16;
shr.u32 %r75,%r74,16;
or.b32 %r75,%r75,%r281;
add.u32 %r76,%r75,%r106;
xor.b32 %r77,%r76,%r120;
shl.b32 %r282,%r77,12;
shr.u32 %r78,%r77,20;
or.b32 %r78,%r78,%r282;
add.u32 %r79,%r73,%r78;
xor.b32 %r80,%r75,%r79;
shl.b32 %r283,%r80,8;
shr.u32 %r81,%r80,24;
or.b32 %r81,%r81,%r283;
add.u32 %r82,%r76,%r81;
xor.b32 %r83,%r78,%r82;
shl.b32 %r284,%r83,7;
shr.u32 %r84,%r83,25;
or.b32 %r84,%r84,%r284;
.loc 1 143 7
add.u32 %r85,%r43,%r60;
xor.b32 %r86,%r81,%r85;
shl.b32 %r285,%r86,16;
shr.u32 %r87,%r86,16;
or.b32 %r87,%r87,%r285;
add.u32 %r88,%r70,%r87;
xor.b32 %r89,%r60,%r88;
shl.b32 %r286,%r89,12;
shr.u32 %r90,%r89,20;
or.b32 %r90,%r90,%r286;
add.u32 %r91,%r85,%r90;
xor.b32 %r92,%r87,%r91;
shl.b32 %r287,%r92,8;
shr.u32 %r93,%r92,24;
or.b32 %r93,%r93,%r287;
add.u32 %r94,%r88,%r93;
xor.b32 %r95,%r90,%r94;
shl.b32 %r288,%r95,7;
shr.u32 %r96,%r95,25;
or.b32 %r96,%r96,%r288;
.loc 1 144 7
add.u32 %r97,%r55,%r72;
xor.b32 %r98,%r45,%r97;
shl.b32 %r289,%r98,16;
shr.u32 %r99,%r98,16;
or.b32 %r99,%r99,%r289;
add.u32 %r100,%r82,%r99;
xor.b32 %r101,%r72,%r100;
shl.b32 %r290,%r101,12;
shr.u32 %r102,%r101,20;
or.b32 %r102,%r102,%r290;
add.u32 %r103,%r97,%r102;
xor.b32 %r104,%r99,%r103;
shl.b32 %r291,%r104,8;
shr.u32 %r105,%r104,24;
or.b32 %r105,%r105,%r291;
add.u32 %r106,%r100,%r105;
xor.b32 %r107,%r102,%r106;
shl.b32 %r292,%r107,7;
shr.u32 %r108,%r107,25;
or.b32 %r108,%r108,%r292;
.loc 1 145 7
add.u32 %r109,%r67,%r84;
xor.b32 %r110,%r57,%r109;
shl.b32 %r293,%r110,16;
shr.u32 %r111,%r110,16;
or.b32 %r111,%r111,%r293;
add.u32 %r112,%r46,%r111;
xor.b32 %r113,%r84,%r112;
shl.b32 %r294,%r113,12;
shr.u32 %r114,%r113,20;
or.b32 %r114,%r114,%r294;
add.u32 %r115,%r109,%r114;
xor.b32 %r116,%r111,%r115;
shl.b32 %r295,%r116,8;
shr.u32 %r117,%r116,24;
or.b32 %r117,%r117,%r295;
add.u32 %r118,%r112,%r117;
xor.b32 %r119,%r114,%r118;
shl.b32 %r296,%r119,7;
shr.u32 %r120,%r119,25;
or.b32 %r120,%r120,%r296;
.loc 1 146 7
add.u32 %r121,%r48,%r79;
xor.b32 %r122,%r69,%r121;
shl.b32 %r297,%r122,16;
shr.u32 %r123,%r122,16;
or.b32 %r123,%r123,%r297;
add.u32 %r124,%r58,%r123;
xor.b32 %r125,%r48,%r124;
shl.b32 %r298,%r125,12;
shr.u32 %r126,%r125,20;
or.b32 %r126,%r126,%r298;
add.u32 %r127,%r121,%r126;
xor.b32 %r128,%r123,%r127;
shl.b32 %r299,%r128,8;
shr.u32 %r129,%r128,24;
or.b32 %r129,%r129,%r299;
add.u32 %r130,%r124,%r129;
xor.b32 %r131,%r126,%r130;
shl.b32 %r300,%r131,7;
shr.u32 %r132,%r131,25;
or.b32 %r132,%r132,%r300;
.loc 1 138 5
add.u32 %r264,%r264,-1;
setp.ne.u32 %r301,%r264,0;
@ %r301 bra $L3;
.loc 1 148 8
add.u32 %r133,%r22,%r91;
.loc 1 149 8
add.u32 %r134,%r23,%r103;
.loc 1 150 8
add.u32 %r135,%r24,%r115;
.loc 1 151 8
add.u32 %r136,%r25,%r127;
.loc 1 152 8
add.u32 %r137,%r26,%r132;
.loc 1 153 8
add.u32 %r138,%r27,%r96;
.loc 1 154 8
add.u32 %r139,%r28,%r108;
.loc 1 155 8
add.u32 %r140,%r29,%r120;
.loc 1 156 8
add.u32 %r141,%r30,%r118;
.loc 1 157 8
add.u32 %r143,%r31,%r130;
.loc 1 158 9
add.u32 %r145,%r32,%r94;
.loc 1 159 9
add.u32 %r147,%r33,%r106;
.loc 1 160 9
add.u32 %r148,%r105,%r144;
.loc 1 161 9
add.u32 %r149,%r117,%r146;
.loc 1 162 9
add.u32 %r150,%r35,%r129;
.loc 1 163 9
add.u32 %r151,%r36,%r93;
.loc 1 184 9
add.u32 %r144,%r144,1;
.loc 1 185 8
setp.ne.u32 %r302,%r144,0;
@ %r302 bra $L4;
.loc 1 186 11
add.u32 %r146,%r146,1;
$L4:
.loc 1 190 5
st.u8 [%r268],%r133;
shr.u32 %r303,%r133,8;
st.u8 [%r268+1],%r303;
shr.u32 %r304,%r133,16;
st.u8 [%r268+2],%r304;
shr.u32 %r305,%r133,24;
st.u8 [%r268+3],%r305;
.loc 1 191 5
st.u8 [%r268+4],%r134;
shr.u32 %r306,%r134,8;
st.u8 [%r268+5],%r306;
shr.u32 %r307,%r134,16;
st.u8 [%r268+6],%r307;
shr.u32 %r308,%r134,24;
st.u8 [%r268+7],%r308;
.loc 1 192 5
st.u8 [%r268+8],%r135;
shr.u32 %r309,%r135,8;
st.u8 [%r268+9],%r309;
shr.u32 %r310,%r135,16;
st.u8 [%r268+10],%r310;
shr.u32 %r311,%r135,24;
st.u8 [%r268+11],%r311;
.loc 1 193 5
st.u8 [%r268+12],%r136;
shr.u32 %r312,%r136,8;
st.u8 [%r268+13],%r312;
shr.u32 %r313,%r136,16;
st.u8 [%r268+14],%r313;
shr.u32 %r314,%r136,24;
st.u8 [%r268+15],%r314;
.loc 1 194 5
st.u8 [%r268+16],%r137;
shr.u32 %r315,%r137,8;
st.u8 [%r268+17],%r315;
shr.u32 %r316,%r137,16;
st.u8 [%r268+18],%r316;
shr.u32 %r317,%r137,24;
st.u8 [%r268+19],%r317;
.loc 1 195 5
st.u8 [%r268+20],%r138;
shr.u32 %r318,%r138,8;
st.u8 [%r268+21],%r318;
shr.u32 %r319,%r138,16;
st.u8 [%r268+22],%r319;
shr.u32 %r320,%r138,24;
st.u8 [%r268+23],%r320;
.loc 1 196 5
st.u8 [%r268+24],%r139;
shr.u32 %r321,%r139,8;
st.u8 [%r268+25],%r321;
shr.u32 %r322,%r139,16;
st.u8 [%r268+26],%r322;
shr.u32 %r323,%r139,24;
st.u8 [%r268+27],%r323;
.loc 1 197 5
st.u8 [%r268+28],%r140;
shr.u32 %r324,%r140,8;
st.u8 [%r268+29],%r324;
shr.u32 %r325,%r140,16;
st.u8 [%r268+30],%r325;
shr.u32 %r326,%r140,24;
st.u8 [%r268+31],%r326;
.loc 1 198 5
st.u8 [%r268+32],%r141;
shr.u32 %r327,%r141,8;
st.u8 [%r268+33],%r327;
shr.u32 %r328,%r141,16;
st.u8 [%r268+34],%r328;
shr.u32 %r329,%r141,24;
st.u8 [%r268+35],%r329;
.loc 1 199 5
st.u8 [%r268+36],%r143;
shr.u32 %r330,%r143,8;
st.u8 [%r268+37],%r330;
shr.u32 %r331,%r143,16;
st.u8 [%r268+38],%r331;
shr.u32 %r332,%r143,24;
st.u8 [%r268+39],%r332;
.loc 1 200 5
st.u8 [%r268+40],%r145;
shr.u32 %r333,%r145,8;
st.u8 [%r268+41],%r333;
shr.u32 %r334,%r145,16;
st.u8 [%r268+42],%r334;
shr.u32 %r335,%r145,24;
st.u8 [%r268+43],%r335;
.loc 1 201 5
st.u8 [%r268+44],%r147;
shr.u32 %r336,%r147,8;
st.u8 [%r268+45],%r336;
shr.u32 %r337,%r147,16;
st.u8 [%r268+46],%r337;
shr.u32 %r338,%r147,24;
st.u8 [%r268+47],%r338;
.loc 1 202 5
st.u8 [%r268+48],%r148;
shr.u32 %r339,%r148,8;
st.u8 [%r268+49],%r339;
shr.u32 %r340,%r148,16;
st.u8 [%r268+50],%r340;
shr.u32 %r341,%r148,24;
st.u8 [%r268+51],%r341;
.loc 1 203 5
st.u8 [%r268+52],%r149;
shr.u32 %r342,%r149,8;
st.u8 [%r268+53],%r342;
shr.u32 %r343,%r149,16;
st.u8 [%r268+54],%r343;
shr.u32 %r344,%r149,24;
st.u8 [%r268+55],%r344;
.loc 1 204 5
st.u8 [%r268+56],%r150;
shr.u32 %r345,%r150,8;
st.u8 [%r268+57],%r345;
shr.u32 %r346,%r150,16;
st.u8 [%r268+58],%r346;
shr.u32 %r347,%r150,24;
st.u8 [%r268+59],%r347;
.loc 1 205 5
st.u8 [%r268+60],%r151;
shr.u32 %r348,%r151,8;
st.u8 [%r268+61],%r348;
shr.u32 %r349,%r151,16;
st.u8 [%r268+62],%r349;
shr.u32 %r350,%r151,24;
st.u8 [%r268+63],%r350;
.loc 1 207 8
setp.ne.u32 %r351,%r142,64;
@ %r351 bra $L5;
.loc 1 184 9
add.u32 %r352,%r34,16;
.loc 1 211 20
st.u32 [%r266+48],%r352;
.loc 1 212 20
st.u32 [%r266+52],%r146;
bra $L9;
$L5:
.loc 1 215 11
add.u32 %r142,%r142,-64;
.loc 1 216 7
add.u64 %r268,%r268,64;
.loc 1 116 8
setp.le.u32 %r353,%r142,63;
.loc 1 120 9
selp.u64 %r268,%frame,%r268,%r353;
bra $L2;
$L9:
.loc 1 221 1
ret;
}
// BEGIN FUNCTION DEF: chacha_keysetup$constprop$0
.func chacha_keysetup$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u64 %r72;
.reg .u64 %r73;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u64 %r86;
.reg .u64 %r87;
.reg .u64 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u64 %r96;
.reg .u64 %r97;
.reg .u64 %r98;
.reg .u64 %r99;
.reg .u64 %r100;
.reg .u64 %r101;
.reg .u64 %r102;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u64 %r110;
.reg .u64 %r111;
.reg .u32 %r112;
.reg .u32 %r113;
.reg .u32 %r114;
.reg .u32 %r115;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 58 17
ld.u8 %r32,[%r31];
ld.u8 %r33,[%r31+1];
shl.b64 %r34,%r33,8;
or.b64 %r35,%r34,%r32;
ld.u8 %r36,[%r31+2];
shl.b64 %r37,%r36,16;
or.b64 %r38,%r37,%r35;
ld.u8 %r39,[%r31+3];
shl.b64 %r40,%r39,24;
or.b64 %r41,%r40,%r38;
cvt.u32.u64 %r22,%r41;
.loc 1 58 15
st.u32 [%r30+16],%r22;
.loc 1 59 17
ld.u8 %r42,[%r31+4];
ld.u8 %r43,[%r31+5];
shl.b64 %r44,%r43,8;
or.b64 %r45,%r44,%r42;
ld.u8 %r46,[%r31+6];
shl.b64 %r47,%r46,16;
or.b64 %r48,%r47,%r45;
ld.u8 %r49,[%r31+7];
shl.b64 %r50,%r49,24;
or.b64 %r51,%r50,%r48;
cvt.u32.u64 %r23,%r51;
.loc 1 59 15
st.u32 [%r30+20],%r23;
.loc 1 60 17
ld.u8 %r52,[%r31+8];
ld.u8 %r53,[%r31+9];
shl.b64 %r54,%r53,8;
or.b64 %r55,%r54,%r52;
ld.u8 %r56,[%r31+10];
shl.b64 %r57,%r56,16;
or.b64 %r58,%r57,%r55;
ld.u8 %r59,[%r31+11];
shl.b64 %r60,%r59,24;
or.b64 %r61,%r60,%r58;
cvt.u32.u64 %r24,%r61;
.loc 1 60 15
st.u32 [%r30+24],%r24;
.loc 1 61 17
ld.u8 %r62,[%r31+12];
ld.u8 %r63,[%r31+13];
shl.b64 %r64,%r63,8;
or.b64 %r65,%r64,%r62;
ld.u8 %r66,[%r31+14];
shl.b64 %r67,%r66,16;
or.b64 %r68,%r67,%r65;
ld.u8 %r69,[%r31+15];
shl.b64 %r70,%r69,24;
or.b64 %r71,%r70,%r68;
cvt.u32.u64 %r25,%r71;
.loc 1 61 15
st.u32 [%r30+28],%r25;
.loc 1 68 17
ld.u8 %r72,[%r31+16];
ld.u8 %r73,[%r31+17];
shl.b64 %r74,%r73,8;
or.b64 %r75,%r74,%r72;
ld.u8 %r76,[%r31+18];
shl.b64 %r77,%r76,16;
or.b64 %r78,%r77,%r75;
ld.u8 %r79,[%r31+19];
shl.b64 %r80,%r79,24;
or.b64 %r81,%r80,%r78;
cvt.u32.u64 %r26,%r81;
.loc 1 68 15
st.u32 [%r30+32],%r26;
.loc 1 69 17
ld.u8 %r82,[%r31+20];
ld.u8 %r83,[%r31+21];
shl.b64 %r84,%r83,8;
or.b64 %r85,%r84,%r82;
ld.u8 %r86,[%r31+22];
shl.b64 %r87,%r86,16;
or.b64 %r88,%r87,%r85;
ld.u8 %r89,[%r31+23];
shl.b64 %r90,%r89,24;
or.b64 %r91,%r90,%r88;
cvt.u32.u64 %r27,%r91;
.loc 1 69 15
st.u32 [%r30+36],%r27;
.loc 1 70 18
ld.u8 %r92,[%r31+24];
ld.u8 %r93,[%r31+25];
shl.b64 %r94,%r93,8;
or.b64 %r95,%r94,%r92;
ld.u8 %r96,[%r31+26];
shl.b64 %r97,%r96,16;
or.b64 %r98,%r97,%r95;
ld.u8 %r99,[%r31+27];
shl.b64 %r100,%r99,24;
or.b64 %r101,%r100,%r98;
cvt.u32.u64 %r28,%r101;
.loc 1 70 16
st.u32 [%r30+40],%r28;
.loc 1 71 18
ld.u8 %r102,[%r31+28];
ld.u8 %r103,[%r31+29];
shl.b64 %r104,%r103,8;
or.b64 %r105,%r104,%r102;
ld.u8 %r106,[%r31+30];
shl.b64 %r107,%r106,16;
or.b64 %r108,%r107,%r105;
ld.u8 %r109,[%r31+31];
shl.b64 %r110,%r109,24;
or.b64 %r111,%r110,%r108;
cvt.u32.u64 %r29,%r111;
.loc 1 71 16
st.u32 [%r30+44],%r29;
.loc 1 72 15
mov.u32 %r112,1634760805;
st.u32 [%r30],%r112;
.loc 1 73 15
mov.u32 %r113,857760878;
st.u32 [%r30+4],%r113;
.loc 1 74 15
mov.u32 %r114,2036477234;
st.u32 [%r30+8],%r114;
.loc 1 75 15
mov.u32 %r115,1797285236;
st.u32 [%r30+12],%r115;
.loc 1 76 1
ret;
}
// BEGIN FUNCTION DEF: _rs_stir
.func _rs_stir
{
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .u64 %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .pred %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u32 %r61;
.reg .u32 %r63;
.reg .u16 %r69;
.reg .u16 %r70;
.reg .u16 %r71;
.reg .u32 %r72;
.reg .pred %r73;
.reg .u32 %r76;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u64 %r86;
.reg .u64 %r87;
.reg .u32 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u64 %r96;
.reg .u64 %r97;
.reg .u64 %r98;
.reg .u32 %r99;
.reg .u64 %r102;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u32 %r111;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .u64 %r117;
.reg .u16 %r118;
.loc 2 89 6
mov.u64 %r46,40;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r46;
call (%value_in),getentropy,(%out_arg1,%out_arg2);
ld.param.u32 %r47,[%value_in];
}
.loc 2 89 5
setp.ne.u32 %r48,%r47,-1;
@ %r48 bra $L12;
.loc 3 69 2
mov.u32 %r49,9;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r49;
call (%value_in),raise,(%out_arg1);
ld.param.u32 %r50,[%value_in];
}
$L12:
.loc 2 92 5
ld.global.u64 %r51,[rs];
setp.ne.u64 %r52,%r51,0;
@ %r52 bra $L13;
.loc 3 79 7
cvta.global.u64 %r53,_arc4random_data;
st.global.u64 [rs],%r53;
.loc 3 80 8
add.u64 %r54,%r53,16;
st.global.u64 [rsx],%r54;
.loc 2 80 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call chacha_keysetup$constprop$0,(%out_arg1,%out_arg2);
}
.loc 1 81 16
st.u64 [%r53+64],%r51;
.loc 1 83 16
ld.u32 %r61,[%frame+32];
st.u32 [%r53+72],%r61;
.loc 1 84 16
ld.u32 %r63,[%frame+36];
st.u32 [%r53+76],%r63;
.loc 1 85 1
bra $L14;
$L13:
.loc 2 126 9
ld.global.u64 %r36,[rsx];
add.u64 %r37,%r36,64;
.loc 2 125 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r37;
call chacha_encrypt_bytes$constprop$0,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u64 %r28,%r37;
mov.u64 %r30,%frame;
add.u64 %r34,%frame,40;
$L15:
.loc 2 133 19
ld.u8 %r118,[%r28];
mov.u16 %r70,%r118;
ld.u8 %r118,[%r30];
mov.u16 %r71,%r118;
xor.b16 %r69,%r70,%r71;
cvt.u32.u16 %r72,%r69;
st.u8 [%r28],%r72;
.loc 2 132 3
add.u64 %r28,%r28,1;
add.u64 %r30,%r30,1;
setp.ne.u64 %r73,%r30,%r34;
@ %r73 bra $L15;
.loc 2 80 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
call chacha_keysetup$constprop$0,(%out_arg1,%out_arg2);
}
.loc 1 81 16
mov.u32 %r76,0;
st.u32 [%r36+48],%r76;
.loc 1 82 16
st.u32 [%r36+52],%r76;
.loc 1 83 18
ld.u8 %r78,[%r36+96];
ld.u8 %r79,[%r36+97];
shl.b64 %r80,%r79,8;
or.b64 %r81,%r80,%r78;
ld.u8 %r82,[%r36+98];
shl.b64 %r83,%r82,16;
or.b64 %r84,%r83,%r81;
ld.u8 %r85,[%r36+99];
shl.b64 %r86,%r85,24;
or.b64 %r87,%r86,%r84;
.loc 1 83 16
cvt.u32.u64 %r88,%r87;
st.u32 [%r36+56],%r88;
.loc 1 84 18
ld.u8 %r89,[%r36+100];
ld.u8 %r90,[%r36+101];
shl.b64 %r91,%r90,8;
or.b64 %r92,%r91,%r89;
ld.u8 %r93,[%r36+102];
shl.b64 %r94,%r93,16;
or.b64 %r95,%r94,%r92;
ld.u8 %r96,[%r36+103];
shl.b64 %r97,%r96,24;
or.b64 %r98,%r97,%r95;
.loc 1 84 16
cvt.u32.u64 %r99,%r98;
st.u32 [%r36+60],%r99;
.loc 2 137 2
mov.u64 %r102,40;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r76;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r102;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r103,[%value_in];
}
.loc 2 138 14
ld.global.u64 %r104,[rs];
mov.u64 %r105,984;
st.u64 [%r104],%r105;
$L14:
.loc 2 96 2
mov.u64 %r107,40;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r107;
call explicit_bzero,(%out_arg1,%out_arg2);
}
.loc 2 99 14
ld.global.u64 %r108,[rs];
mov.u64 %r109,0;
st.u64 [%r108],%r109;
.loc 2 100 12
ld.global.u64 %r114,[rsx];
add.u64 %r113,%r114,64;
.loc 2 100 2
mov.u64 %r112,1024;
cvt.u32.u64 %r111,%r109;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r113;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r111;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r112;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r115,[%value_in];
}
.loc 2 102 15
ld.global.u64 %r116,[rs];
mov.u64 %r117,1600000;
st.u64 [%r116+8],%r117;
.loc 2 104 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: arc4random
.visible .func (.param .u32 %value_out) arc4random
{
.reg .u32 %value;
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u64 %r35;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .u64 %r45;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u32 %r52;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u32 %r63;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u64 %r72;
.reg .u64 %r73;
.reg .u64 %r74;
.reg .u32 %r75;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u32 %r86;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .pred %r95;
.reg .u64 %r96;
.loc 2 110 6
ld.global.u64 %r96,[rs];
.loc 2 110 5
setp.eq.u64 %r41,%r96,0;
@ %r41 bra $L18;
.loc 2 110 15
ld.u64 %r27,[%r96+8];
.loc 2 110 10
setp.gt.u64 %r42,%r27,4;
@ %r42 bra $L19;
$L18:
.loc 2 111 3
{
call _rs_stir;
}
.loc 2 112 8
ld.global.u64 %r96,[rs];
ld.u64 %r27,[%r96+8];
.loc 2 112 5
setp.le.u64 %r43,%r27,4;
@ %r43 bra $L24;
$L19:
.loc 2 115 16
add.u64 %r29,%r27,-4;
bra $L20;
$L29:
.loc 2 173 48
mov.u64 %r45,1024;
sub.u64 %r22,%r45,%r94;
$L21:
.loc 2 173 12
add.u64 %r23,%r39,%r22;
.loc 2 174 2
mov.u64 %r49,4;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r49;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r50,[%value_in];
}
.loc 2 175 2
mov.u32 %r52,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r52;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r49;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r54,[%value_in];
}
.loc 2 176 14
ld.global.u64 %r24,[rs];
ld.u64 %r56,[%r24];
add.u64 %r55,%r56,-4;
st.u64 [%r24],%r55;
.loc 2 191 9
ld.u32 %r40,[%frame];
bra $L28;
$L22:
.loc 2 125 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r39;
call chacha_encrypt_bytes$constprop$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 2 80 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call chacha_keysetup$constprop$0,(%out_arg1,%out_arg2);
}
.loc 1 81 16
mov.u32 %r63,0;
st.u32 [%r35+48],%r63;
.loc 1 82 16
st.u32 [%r35+52],%r63;
.loc 1 83 18
ld.u8 %r65,[%r35+96];
ld.u8 %r66,[%r35+97];
shl.b64 %r67,%r66,8;
or.b64 %r68,%r67,%r65;
ld.u8 %r69,[%r35+98];
shl.b64 %r70,%r69,16;
or.b64 %r71,%r70,%r68;
ld.u8 %r72,[%r35+99];
shl.b64 %r73,%r72,24;
or.b64 %r74,%r73,%r71;
.loc 1 83 16
cvt.u32.u64 %r75,%r74;
st.u32 [%r35+56],%r75;
.loc 1 84 18
ld.u8 %r76,[%r35+100];
ld.u8 %r77,[%r35+101];
shl.b64 %r78,%r77,8;
or.b64 %r79,%r78,%r76;
ld.u8 %r80,[%r35+102];
shl.b64 %r81,%r80,16;
or.b64 %r82,%r81,%r79;
ld.u8 %r83,[%r35+103];
shl.b64 %r84,%r83,24;
or.b64 %r85,%r84,%r82;
.loc 1 84 16
cvt.u32.u64 %r86,%r85;
st.u32 [%r35+60],%r86;
.loc 2 137 2
mov.u64 %r89,40;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r39;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r63;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r89;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r90,[%value_in];
}
.loc 2 138 14
ld.global.u64 %r91,[rs];
mov.u64 %r92,984;
st.u64 [%r91],%r92;
.loc 2 173 14
ld.global.u64 %r93,[rsx];
add.u64 %r39,%r93,64;
.loc 2 139 1
mov.u64 %r22,%r89;
bra $L21;
$L24:
.loc 2 113 16
mov.u64 %r29,0;
$L20:
st.u64 [%r96+8],%r29;
.loc 2 126 9
ld.global.u64 %r35,[rsx];
add.u64 %r39,%r35,64;
.loc 2 171 5
ld.u64 %r94,[%r96];
setp.le.u64 %r95,%r94,3;
@ ! %r95 bra $L29;
bra $L22;
$L28:
.loc 2 192 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: arc4random_buf
.visible .func arc4random_buf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .pred %r46;
.reg .u64 %r47;
.reg .u64 %r52;
.reg .u32 %r54;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .pred %r58;
.reg .u32 %r65;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u64 %r72;
.reg .u64 %r73;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u32 %r77;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u64 %r86;
.reg .u64 %r87;
.reg .u32 %r88;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .pred %r96;
mov.u64 %r39,%ar0;
mov.u64 %r40,%ar1;
.loc 2 110 6
ld.global.u64 %r95,[rs];
.loc 2 110 5
setp.eq.u64 %r41,%r95,0;
@ %r41 bra $L31;
.loc 2 110 15
ld.u64 %r30,[%r95+8];
.loc 2 110 10
setp.lt.u64 %r42,%r40,%r30;
@ %r42 bra $L32;
$L31:
.loc 2 111 3
{
call _rs_stir;
}
.loc 2 112 8
ld.global.u64 %r95,[rs];
ld.u64 %r30,[%r95+8];
.loc 2 112 5
setp.lt.u64 %r43,%r40,%r30;
@ %r43 bra $L32;
.loc 2 113 16
mov.u64 %r32,0;
$L34:
st.u64 [%r95+8],%r32;
.loc 2 149 8
setp.ne.u64 %r96,%r40,0;
@ %r96 bra $L33;
bra $L30;
$L32:
.loc 2 115 16
sub.u64 %r32,%r30,%r40;
bra $L34;
$L33:
.loc 2 150 9
ld.u64 %r23,[%r95];
.loc 2 152 19
ld.global.u64 %r33,[rsx];
.loc 2 152 16
add.u64 %r34,%r33,64;
.loc 2 150 6
setp.eq.u64 %r46,%r23,0;
@ %r46 bra $L35;
.loc 2 151 6
min.u64 %r24,%r23,%r40;
.loc 2 153 8
sub.u64 %r47,%r34,%r23;
.loc 2 152 14
add.u64 %r26,%r47,1024;
.loc 2 154 4
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r39;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r52,[%value_in];
}
.loc 2 155 4
mov.u32 %r54,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r54;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r56,[%value_in];
}
.loc 2 156 8
add.u64 %r39,%r39,%r24;
.loc 2 157 6
sub.u64 %r40,%r40,%r24;
.loc 2 158 16
ld.global.u64 %r95,[rs];
ld.u64 %r57,[%r95];
sub.u64 %r29,%r57,%r24;
st.u64 [%r95],%r29;
.loc 2 160 6
setp.ne.u64 %r58,%r29,0;
@ ! %r58 bra $L47;
setp.ne.u64 %r96,%r40,0;
bra $L36;
$L47:
.loc 2 126 9
ld.global.u64 %r33,[rsx];
add.u64 %r34,%r33,64;
setp.ne.u64 %r96,%r40,0;
bra $L35;
$L36:
.loc 2 149 8
@ %r96 bra $L33;
bra $L30;
$L35:
.loc 2 125 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r34;
call chacha_encrypt_bytes$constprop$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 2 80 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call chacha_keysetup$constprop$0,(%out_arg1,%out_arg2);
}
.loc 1 81 16
mov.u32 %r65,0;
st.u32 [%r33+48],%r65;
.loc 1 82 16
st.u32 [%r33+52],%r65;
.loc 1 83 18
ld.u8 %r67,[%r33+96];
ld.u8 %r68,[%r33+97];
shl.b64 %r69,%r68,8;
or.b64 %r70,%r69,%r67;
ld.u8 %r71,[%r33+98];
shl.b64 %r72,%r71,16;
or.b64 %r73,%r72,%r70;
ld.u8 %r74,[%r33+99];
shl.b64 %r75,%r74,24;
or.b64 %r76,%r75,%r73;
.loc 1 83 16
cvt.u32.u64 %r77,%r76;
st.u32 [%r33+56],%r77;
.loc 1 84 18
ld.u8 %r78,[%r33+100];
ld.u8 %r79,[%r33+101];
shl.b64 %r80,%r79,8;
or.b64 %r81,%r80,%r78;
ld.u8 %r82,[%r33+102];
shl.b64 %r83,%r82,16;
or.b64 %r84,%r83,%r81;
ld.u8 %r85,[%r33+103];
shl.b64 %r86,%r85,24;
or.b64 %r87,%r86,%r84;
.loc 1 84 16
cvt.u32.u64 %r88,%r87;
st.u32 [%r33+60],%r88;
.loc 2 137 2
mov.u64 %r91,40;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r65;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r91;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r92,[%value_in];
}
.loc 2 138 14
ld.global.u64 %r95,[rs];
mov.u64 %r94,984;
st.u64 [%r95],%r94;
.loc 2 139 1
bra $L36;
$L30:
.loc 2 204 1
ret;
}

/139            1612277261  0     0     100666  1188      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: arc4random_uniform
.visible .func (.param .u32 %value_out) arc4random_uniform (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/arc4random_uniform.c"
// BEGIN GLOBAL FUNCTION DECL: arc4random
.extern .func (.param .u32 %value_out) arc4random;
// BEGIN GLOBAL FUNCTION DEF: arc4random_uniform
.visible .func (.param .u32 %value_out) arc4random_uniform (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .pred %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .pred %r30;
mov.u32 %r26,%ar0;
.loc 1 37 5
setp.le.u32 %r27,%r26,1;
@ %r27 bra $L4;
.loc 1 41 8
neg.s32 %r28,%r26;
.loc 1 41 6
rem.u32 %r23,%r28,%r26;
$L3:
.loc 1 50 7
{
.param .u32 %value_in;
call (%value_in),arc4random;
ld.param.u32 %r29,[%value_in];
}
.loc 1 51 6
setp.gt.u32 %r30,%r23,%r29;
@ %r30 bra $L3;
.loc 1 55 11
rem.u32 %r25,%r29,%r26;
bra $L1;
$L4:
.loc 1 38 10
mov.u32 %r25,0;
$L1:
.loc 1 56 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-asctime.o/1612277261  0     0     100666  1128      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: asctime
.visible .func (.param .u64 %value_out) asctime (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/asctime.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: asctime_r
.extern .func (.param .u64 %value_out) asctime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: asctime
.visible .func (.param .u64 %value_out) asctime (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r25,%ar0;
.loc 1 56 28
ld.global.u64 %r29,[_impure_ptr];
add.u64 %r28,%r29,160;
.loc 1 56 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call (%value_in),asctime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r30,[%value_in];
}
.loc 1 57 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
/167            1612277261  0     0     100666  2708      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: asctime_r
.visible .func (.param .u64 %value_out) asctime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/time/asctime_r.c"
// BEGIN GLOBAL FUNCTION DECL: siprintf
.extern .func (.param .u32 %value_out) siprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN VAR DEF: day_name$0
.const .align 1 .u8 day_name$0[21] =
{83,117,110,77,111,110,84,117,101,87,101,100,84,104,117,70,114,105,83,97,116 };
// BEGIN VAR DEF: mon_name$1
.const .align 1 .u8 mon_name$1[36] =
{74,97,110,70,101,98,77,97,114,65,112,114,77,97,121,74,117,110,74,117,108,65,117,103,83,101,112,79,99,116,78,111,118,68,101,99 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[32] =
{37,46,51,115,32,37,46,51,115,37,51,100,32,37,46,50,100,58,37,46,50,100,58,37,46,50,100,32,37,100,10,0 };
// BEGIN GLOBAL FUNCTION DEF: asctime_r
.visible .func (.param .u64 %value_out) asctime_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 8 .b8 %stack_ar[48];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u64 %r47;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
mov.u64 %r37,%ar0;
mov.u64 %r38,%ar1;
.loc 1 20 3
ld.u32 %r42,[%r37+20];
add.u32 %r41,%r42,1900;
st.u32 [%stack+32],%r41;
ld.u32 %r43,[%r37];
st.u32 [%stack+28],%r43;
ld.u32 %r44,[%r37+4];
st.u32 [%stack+24],%r44;
ld.u32 %r45,[%r37+8];
st.u32 [%stack+20],%r45;
ld.u32 %r46,[%r37+12];
st.u32 [%stack+16],%r46;
.loc 1 22 14
ld.s32 %r47,[%r37+16];
add.u64 %r49,%r47,%r47;
add.u64 %r50,%r49,%r47;
cvta.const.u64 %r52,mon_name$1;
add.u64 %r51,%r50,%r52;
.loc 1 20 3
st.u64 [%stack+8],%r51;
.loc 1 21 14
ld.s32 %r53,[%r37+24];
add.u64 %r55,%r53,%r53;
add.u64 %r56,%r55,%r53;
cvta.const.u64 %r58,day_name$0;
add.u64 %r57,%r56,%r58;
.loc 1 20 3
st.u64 [%stack],%r57;
cvta.const.u64 %r40,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r40;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r59,[%value_in];
}
.loc 1 26 1
mov.u64 %value,%r38;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-assert.o/ 1612277261  0     0     100666  1282      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __assert_func
.visible .func __assert_func (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../../newlib/libc/machine/nvptx/assert.c"
// BEGIN GLOBAL FUNCTION DECL: __assert
.visible .func __assert (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: abort
.extern .func abort;
// BEGIN GLOBAL FUNCTION DEF: __assert_func
.visible .func __assert_func (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.loc 1 28 3
{
call abort;
trap;
// (noreturn)
exit;
// (noreturn)
}
}
// BEGIN GLOBAL FUNCTION DEF: __assert
.visible .func __assert (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.loc 1 28 3
{
call abort;
trap;
// (noreturn)
exit;
// (noreturn)
}
}
lib_a-atexit.o/ 1612277261  0     0     100666  1211      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: atexit
.visible .func (.param .u32 %value_out) atexit (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/atexit.c"
// BEGIN GLOBAL FUNCTION DECL: __register_exitproc
.extern .func (.param .u32 %value_out) __register_exitproc (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: atexit
.visible .func (.param .u32 %value_out) atexit (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u64 %r27;
.reg .u32 %r28;
mov.u64 %r23,%ar0;
.loc 1 58 10
mov.u64 %r27,0;
cvt.u32.u64 %r24,%r27;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__register_exitproc,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r28,[%value_in];
}
.loc 1 59 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-atof.o/   1612277261  0     0     100666  947       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: atof
.visible .func (.param .f64 %value_out) atof (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/atof.c"
// BEGIN GLOBAL FUNCTION DECL: strtod
.extern .func (.param .f64 %value_out) strtod (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: atof
.visible .func (.param .f64 %value_out) atof (.param .u64 %in_ar0)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .f64 %r26;
mov.u64 %r23,%ar0;
.loc 1 62 10
mov.u64 %r25,0;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call (%value_in),strtod,(%out_arg1,%out_arg2);
ld.param.f64 %r26,[%value_in];
}
.loc 1 63 1
mov.f64 %value,%r26;
st.param.f64 [%value_out],%value;
ret;
}

lib_a-atoff.o/  1612277261  0     0     100666  950       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: atoff
.visible .func (.param .f32 %value_out) atoff (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/atoff.c"
// BEGIN GLOBAL FUNCTION DECL: strtof
.extern .func (.param .f32 %value_out) strtof (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: atoff
.visible .func (.param .f32 %value_out) atoff (.param .u64 %in_ar0)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .f32 %r26;
mov.u64 %r23,%ar0;
.loc 1 7 10
mov.u64 %r25,0;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call (%value_in),strtof,(%out_arg1,%out_arg2);
ld.param.f32 %r26,[%value_in];
}
.loc 1 8 1
mov.f32 %value,%r26;
st.param.f32 [%value_out],%value;
ret;
}
lib_a-atoi.o/   1612277261  0     0     100666  2245      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: atoi
.visible .func (.param .u32 %value_out) atoi (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/atoi.c"
// BEGIN GLOBAL FUNCTION DECL: _atoi_r
.visible .func (.param .u32 %value_out) _atoi_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strtol
.extern .func (.param .u64 %value_out) strtol (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.extern .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: atoi
.visible .func (.param .u32 %value_out) atoi (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
mov.u64 %r24,%ar0;
.loc 1 52 16
mov.u32 %r27,10;
mov.u64 %r26,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r27;
call (%value_in),strtol,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r28,[%value_in];
}
.loc 1 53 1
cvt.u32.u64 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _atoi_r
.visible .func (.param .u32 %value_out) _atoi_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 60 16
mov.u32 %r29,10;
mov.u64 %r28,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r29;
call (%value_in),_strtol_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r30,[%value_in];
}
.loc 1 61 1
cvt.u32.u64 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-atol.o/   1612277261  0     0     100666  2237      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: atol
.visible .func (.param .u64 %value_out) atol (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/atol.c"
// BEGIN GLOBAL FUNCTION DECL: _atol_r
.visible .func (.param .u64 %value_out) _atol_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strtol
.extern .func (.param .u64 %value_out) strtol (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.extern .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: atol
.visible .func (.param .u64 %value_out) atol (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
mov.u64 %r23,%ar0;
.loc 1 12 10
mov.u32 %r26,10;
mov.u64 %r25,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r26;
call (%value_in),strtol,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r27,[%value_in];
}
.loc 1 13 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _atol_r
.visible .func (.param .u64 %value_out) _atol_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 19 10
mov.u32 %r28,10;
mov.u64 %r27,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r28;
call (%value_in),_strtol_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r29,[%value_in];
}
.loc 1 20 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-atoll.o/  1612277261  0     0     100666  2250      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: atoll
.visible .func (.param .u64 %value_out) atoll (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/atoll.c"
// BEGIN GLOBAL FUNCTION DECL: _atoll_r
.visible .func (.param .u64 %value_out) _atoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strtoll
.extern .func (.param .u64 %value_out) strtoll (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtoll_r
.extern .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: atoll
.visible .func (.param .u64 %value_out) atoll (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
mov.u64 %r23,%ar0;
.loc 1 70 9
mov.u32 %r26,10;
mov.u64 %r25,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r26;
call (%value_in),strtoll,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r27,[%value_in];
}
.loc 1 71 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _atoll_r
.visible .func (.param .u64 %value_out) _atoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 78 9
mov.u32 %r28,10;
mov.u64 %r27,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r28;
call (%value_in),_strtoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r29,[%value_in];
}
.loc 1 79 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-bcopy.o/  1612277261  0     0     100666  1133      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: bcopy
.visible .func bcopy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/bcopy.c"
// BEGIN GLOBAL FUNCTION DECL: memmove
.extern .func (.param .u64 %value_out) memmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: bcopy
.visible .func bcopy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r28;
mov.u64 %r22,%ar0;
mov.u64 %r23,%ar1;
mov.u64 %r24,%ar2;
.loc 1 31 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r28,[%value_in];
}
.loc 1 32 1
ret;
}

lib_a-bsearch.o/1612277261  0     0     100666  2477      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: bsearch
.visible .func (.param .u64 %value_out) bsearch (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/search/bsearch.c"
// BEGIN GLOBAL FUNCTION DEF: bsearch
.visible .func (.param .u64 %value_out) bsearch (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u32 %r45;
.reg .u16 %r46;
.reg .pred %r47;
.reg .u64 %r48;
.reg .u32 %r52;
.reg .pred %r53;
.reg .pred %r54;
.reg .pred %r55;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
mov.u64 %r34,%ar3;
mov.u64 %r35,%ar4;
.loc 1 71 13
set.u32.eq.u64 %r37,%r33,0;
neg.s32 %r38,%r37;
.loc 1 71 26
set.u32.eq.u64 %r40,%r34,0;
neg.s32 %r41,%r40;
.loc 1 71 18
cvt.u16.u32 %r43,%r38;
cvt.u16.u32 %r44,%r41;
or.b16 %r42,%r43,%r44;
.loc 1 71 6
cvt.u32.u16 %r45,%r42;
cvt.u16.u8 %r46,%r45;
setp.ne.u16 %r47,%r46,0;
@ %r47 bra $L2;
.loc 1 66 10
mov.u64 %r27,0;
$L5:
.loc 1 76 22
add.u64 %r48,%r27,%r33;
.loc 1 76 13
shr.u64 %r28,%r48,1;
.loc 1 77 15
mad.lo.u64 %r30,%r34,%r28,%r32;
.loc 1 79 16
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),%r35,(%out_arg1,%out_arg2),$LCT0;
ld.param.u32 %r52,[%value_in];
}
.loc 1 81 10
setp.lt.s32 %r53,%r52,0;
@ %r53 bra $L6;
.loc 1 83 15
setp.eq.u32 %r54,%r52,0;
@ %r54 bra $L1;
.loc 1 84 15
add.u64 %r27,%r28,1;
bra $L3;
$L6:
.loc 1 82 15
mov.u64 %r33,%r28;
$L3:
.loc 1 74 9
setp.lt.u64 %r55,%r27,%r33;
@ %r55 bra $L5;
$L2:
.loc 1 72 12
mov.u64 %r30,0;
$L1:
.loc 1 90 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-bzero.o/  1612277261  0     0     100666  1038      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: bzero
.visible .func bzero (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/bzero.c"
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: bzero
.visible .func bzero (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r27;
mov.u64 %r22,%ar0;
mov.u64 %r23,%ar1;
.loc 1 33 2
mov.u32 %r25,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r23;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r27,[%value_in];
}
.loc 1 34 1
ret;
}
lib_a-calloc.o/ 1612277261  0     0     100666  1682      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: calloc
.visible .func (.param .u64 %value_out) calloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../../newlib/libc/machine/nvptx/calloc.c"
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.extern .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: calloc
.visible .func (.param .u64 %value_out) calloc (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r30;
.reg .u32 %r32;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 22 13
mul.lo.u64 %r27,%r24,%r25;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r28,[%value_in];
}
mov.u64 %r23,%r28;
.loc 1 23 6
setp.eq.u64 %r30,%r23,0;
@ %r30 bra $L1;
.loc 1 25 10
mov.u32 %r32,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r34,[%value_in];
}
mov.u64 %r23,%r34;
$L1:
.loc 1 26 1
mov.u64 %value,%r23;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-callocr.o/1612277261  0     0     100666  1161      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _calloc_r
.visible .func (.param .u64 %value_out) _calloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../../newlib/libc/machine/nvptx/callocr.c"
// BEGIN GLOBAL FUNCTION DECL: calloc
.extern .func (.param .u64 %value_out) calloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _calloc_r
.visible .func (.param .u64 %value_out) _calloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 21 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call (%value_in),calloc,(%out_arg1,%out_arg2);
ld.param.u64 %r28,[%value_in];
}
.loc 1 22 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-cfreer.o/ 1612277261  0     0     100666  183       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_mallocr
.visible .global .align 4 .u32 _dummy_mallocr[1] =
{1 };

/186            1612277261  0     0     100666  1037      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: clearerr
.visible .func clearerr (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/clearerr.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: clearerr
.visible .func clearerr (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .u32 %r28;
.reg .pred %r29;
.reg .u16 %r31;
.reg .u16 %r32;
mov.u64 %r26,%ar0;
.loc 1 77 3
ld.global.u64 %r25,[_impure_ptr];
setp.eq.u64 %r27,%r25,0;
@ %r27 bra $L2;
ld.u32 %r28,[%r25+80];
setp.ne.u32 %r29,%r28,0;
@ %r29 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 79 3
ld.u16 %r32,[%r26+16];
and.b16 %r31,%r32,-97;
st.u16 [%r26+16],%r31;
.loc 1 81 1
ret;
}

lib_a-clock.o/  1612277261  0     0     100666  1460      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: clock
.visible .func (.param .u64 %value_out) clock;
.file 1 "../../../../../newlib/libc/time/clock.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _times_r
.extern .func (.param .u64 %value_out) _times_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: clock
.visible .func (.param .u64 %value_out) clock
{
.reg .u64 %value;
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r29;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.loc 1 58 14
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call (%value_in),_times_r,(%out_arg1,%out_arg2);
ld.param.u64 %r33,[%value_in];
}
mov.u64 %r29,%r33;
.loc 1 58 6
setp.eq.u64 %r34,%r29,-1;
@ %r34 bra $L1;
.loc 1 59 38
ld.u64 %r36,[%frame];
ld.u64 %r37,[%frame+8];
add.u64 %r35,%r36,%r37;
.loc 1 59 56
ld.u64 %r39,[%frame+16];
add.u64 %r38,%r35,%r39;
.loc 1 59 9
ld.u64 %r40,[%frame+24];
add.u64 %r29,%r38,%r40;
$L1:
.loc 1 63 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-closer.o/ 1612277261  0     0     100666  1367      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _close_r
.visible .func (.param .u32 %value_out) _close_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/reent/closer.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: close
.extern .func (.param .u32 %value_out) close (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _close_r
.visible .func (.param .u32 %value_out) _close_r (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r28;
.reg .pred %r29;
.reg .pred %r30;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
.loc 1 46 9
mov.u32 %r26,0;
st.global.u32 [errno],%r26;
.loc 1 47 14
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
call (%value_in),close,(%out_arg1);
ld.param.u32 %r28,[%value_in];
}
.loc 1 47 6
setp.ne.u32 %r29,%r28,-1;
@ %r29 bra $L1;
.loc 1 47 42
ld.global.u32 %r22,[errno];
.loc 1 47 33
setp.eq.u32 %r30,%r22,0;
@ %r30 bra $L1;
.loc 1 48 17
st.u32 [%r24],%r22;
$L1:
.loc 1 50 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-ctime.o/  1612277261  0     0     100666  1137      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ctime
.visible .func (.param .u64 %value_out) ctime (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/ctime.c"
// BEGIN GLOBAL FUNCTION DECL: localtime
.extern .func (.param .u64 %value_out) localtime (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: asctime
.extern .func (.param .u64 %value_out) asctime (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: ctime
.visible .func (.param .u64 %value_out) ctime (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u64 %r28;
mov.u64 %r24,%ar0;
.loc 1 42 19
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call (%value_in),localtime,(%out_arg1);
ld.param.u64 %r26,[%value_in];
}
.loc 1 42 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),asctime,(%out_arg1);
ld.param.u64 %r28,[%value_in];
}
.loc 1 43 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-ctime_r.o/1612277261  0     0     100666  1551      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ctime_r
.visible .func (.param .u64 %value_out) ctime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/time/ctime_r.c"
// BEGIN GLOBAL FUNCTION DECL: localtime_r
.extern .func (.param .u64 %value_out) localtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: asctime_r
.extern .func (.param .u64 %value_out) asctime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: ctime_r
.visible .func (.param .u64 %value_out) ctime_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r31;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 13 21
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call (%value_in),localtime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r28,[%value_in];
}
.loc 1 13 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call (%value_in),asctime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r31,[%value_in];
}
.loc 1 14 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-ctype_.o/ 1612277261  0     0     100666  1693      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL VAR DEF: _ctype_b
.visible .const .align 1 .u8 _ctype_b[384] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,40,40,40,40,40,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,136,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,4,4,4,4,4,4,4,4,4,4,16,16,16,16,16,16,16,65,65,65,65,65,65,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,16,16,16,16,16,66,66,66,66,66,66,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _ctype_
.visible .const .align 1 .u8 _ctype_[257] =
{0,32,32,32,32,32,32,32,32,32,40,40,40,40,40,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,136,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,4,4,4,4,4,4,4,4,4,4,16,16,16,16,16,16,16,65,65,65,65,65,65,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,16,16,16,16,16,66,66,66,66,66,66,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

/204            1612277261  0     0     100666  1450      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __cxa_atexit
.visible .func (.param .u32 %value_out) __cxa_atexit (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/cxa_atexit.c"
// BEGIN GLOBAL FUNCTION DECL: __register_exitproc
.extern .func (.param .u32 %value_out) __register_exitproc (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: __cxa_atexit
.visible .func (.param .u32 %value_out) __cxa_atexit (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u32 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 38 12
mov.u32 %r26,2;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r25;
call (%value_in),__register_exitproc,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r30,[%value_in];
}
.loc 1 39 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
/224            1612277261  0     0     100666  788       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __cxa_finalize
.visible .func __cxa_finalize (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/cxa_finalize.c"
// BEGIN GLOBAL FUNCTION DECL: __call_exitprocs
.extern .func __call_exitprocs (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __cxa_finalize
.visible .func __cxa_finalize (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u32 %r23;
mov.u64 %r22,%ar0;
.loc 1 18 3
mov.u32 %r23,0;
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
call __call_exitprocs,(%out_arg1,%out_arg2);
}
.loc 1 19 1
ret;
}
/246            1612277261  0     0     100666  751       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: difftime
.visible .func (.param .f64 %value_out) difftime (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/time/difftime.c"
// BEGIN GLOBAL FUNCTION DEF: difftime
.visible .func (.param .f64 %value_out) difftime (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r27;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 36 24
sub.u64 %r27,%r24,%r25;
.loc 1 36 10
cvt.rn.f64.s64 %value,%r27;
.loc 1 37 1
st.param.f64 [%value_out],%value;
ret;
}

lib_a-div.o/    1612277261  0     0     100666  1222      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: div
.visible .func div (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/div.c"
// BEGIN GLOBAL FUNCTION DEF: div
.visible .func div (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .pred %r27;
.reg .pred %r28;
.reg .pred %r29;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 85 15
div.s32 %r22,%r25,%r26;
.loc 1 86 14
rem.s32 %r23,%r25,%r26;
.loc 1 113 5
setp.lt.s32 %r27,%r25,0;
@ %r27 bra $L2;
.loc 1 113 15
setp.ge.s32 %r28,%r23,0;
@ %r28 bra $L3;
.loc 1 114 3
add.u32 %r22,%r22,1;
.loc 1 115 9
sub.u32 %r23,%r23,%r26;
bra $L3;
$L2:
.loc 1 117 19
setp.le.s32 %r29,%r23,0;
@ %r29 bra $L3;
.loc 1 118 3
add.u32 %r22,%r22,-1;
.loc 1 119 9
add.u32 %r23,%r23,%r26;
$L3:
.loc 1 121 9
st.u32 [%r24],%r22;
st.u32 [%r24+4],%r23;
.loc 1 122 1
ret;
}
lib_a-drand48.o/1612277261  0     0     100666  1750      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _drand48_r
.visible .func (.param .f64 %value_out) _drand48_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/drand48.c"
// BEGIN GLOBAL FUNCTION DECL: drand48
.visible .func (.param .f64 %value_out) drand48;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _erand48_r
.extern .func (.param .f64 %value_out) _erand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _drand48_r
.visible .func (.param .f64 %value_out) _drand48_r (.param .u64 %in_ar0)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .f64 %r28;
mov.u64 %r24,%ar0;
.loc 1 20 24
add.u64 %r27,%r24,240;
.loc 1 20 10
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_erand48_r,(%out_arg1,%out_arg2);
ld.param.f64 %r28,[%value_in];
}
.loc 1 21 1
mov.f64 %value,%r28;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: drand48
.visible .func (.param .f64 %value_out) drand48
{
.reg .f64 %value;
.reg .u64 %r22;
.reg .u64 %r27;
.reg .f64 %r28;
.loc 1 27 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 20 24
add.u64 %r27,%r22,240;
.loc 1 20 10
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_erand48_r,(%out_arg1,%out_arg2);
ld.param.f64 %r28,[%value_in];
}
.loc 1 28 1
mov.f64 %value,%r28;
st.param.f64 [%value_out],%value;
ret;
}
lib_a-dtoa.o/   1612277261  0     0     100666  65949     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: quorem
.func (.param .u32 %value_out) quorem (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/dtoa.c"
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.visible .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL VAR DECL: __mprec_bigtens
.extern .const .align 8 .u64 __mprec_bigtens[];
// BEGIN GLOBAL VAR DECL: __mprec_tens
.extern .const .align 8 .u64 __mprec_tens[];
// BEGIN GLOBAL FUNCTION DECL: __mcmp
.extern .func (.param .u32 %value_out) __mcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _Bfree
.extern .func _Bfree (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __d2b
.extern .func (.param .u64 %value_out) __d2b (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _Balloc
.extern .func (.param .u64 %value_out) _Balloc (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __assert_func
.extern .func __assert_func (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __i2b
.extern .func (.param .u64 %value_out) __i2b (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __pow5mult
.extern .func (.param .u64 %value_out) __pow5mult (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __multiply
.extern .func (.param .u64 %value_out) __multiply (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __hi0bits
.extern .func (.param .u32 %value_out) __hi0bits (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __lshift
.extern .func (.param .u64 %value_out) __lshift (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __multadd
.extern .func (.param .u64 %value_out) __multadd (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __mdiff
.extern .func (.param .u64 %value_out) __mdiff (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[9] =
{73,110,102,105,110,105,116,121,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[4] =
{78,97,78,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[17] =
{66,97,108,108,111,99,32,115,117,99,99,101,101,100,101,100,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[41] =
{46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,110,101,119,108,105,98,47,108,105,98,99,47,115,116,100,108,105,98,47,100,116,111,97,46,99,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[2] =
{48,0 };
// BEGIN FUNCTION DEF: quorem
.func (.param .u32 %value_out) quorem (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r27;
.reg .u32 %r33;
.reg .u32 %r52;
.reg .u32 %r68;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r75;
.reg .u64 %r77;
.reg .u64 %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .u32 %r83;
.reg .u32 %r85;
.reg .u64 %r86;
.reg .u32 %r87;
.reg .u32 %r88;
.reg .u32 %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r97;
.reg .u64 %r99;
.reg .u64 %r104;
.reg .u64 %r106;
.reg .u32 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u32 %r110;
.reg .pred %r111;
.reg .u64 %r112;
.reg .u32 %r114;
.reg .pred %r115;
.reg .u32 %r116;
.reg .u32 %r118;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u32 %r122;
.reg .u32 %r123;
.reg .u32 %r124;
.reg .u32 %r125;
.reg .u32 %r126;
.reg .u32 %r127;
.reg .u32 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .pred %r131;
.reg .u32 %r132;
.reg .pred %r133;
.reg .pred %r134;
.reg .pred %r135;
.reg .u32 %r136;
.reg .pred %r137;
.reg .u32 %r140;
.reg .pred %r141;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .u32 %r147;
.reg .u32 %r148;
.reg .u32 %r149;
.reg .u32 %r150;
.reg .u32 %r151;
.reg .pred %r152;
.reg .u64 %r153;
.reg .u64 %r154;
.reg .u32 %r155;
.reg .pred %r156;
.reg .pred %r157;
.reg .pred %r158;
.reg .u32 %r159;
.reg .pred %r160;
.reg .u64 %r162;
.reg .u64 %r163;
mov.u64 %r108,%ar0;
mov.u64 %r109,%ar1;
.loc 1 47 5
ld.u32 %r75,[%r109+20];
.loc 1 52 6
ld.u32 %r110,[%r108+20];
setp.lt.s32 %r111,%r110,%r75;
@ %r111 bra $L13;
.loc 1 55 7
add.u32 %r68,%r75,-1;
.loc 1 55 14
cvt.s64.s32 %r112,%r68;
.loc 1 55 12
shl.b64 %r24,%r112,2;
.loc 1 54 6
add.u64 %r163,%r109,24;
.loc 1 55 7
add.u64 %r77,%r163,%r24;
.loc 1 56 6
add.u64 %r162,%r108,24;
.loc 1 57 7
add.u64 %r79,%r162,%r24;
.loc 1 58 7
ld.u32 %r25,[%r79];
.loc 1 58 20
ld.u32 %r114,[%r77];
add.u32 %r27,%r114,1;
.loc 1 58 5
div.u32 %r73,%r25,%r27;
.loc 1 63 6
setp.lt.u32 %r115,%r25,%r27;
@ %r115 bra $L3;
mov.u64 %r99,%r162;
mov.u64 %r97,%r163;
.loc 1 66 13
mov.u32 %r72,0;
.loc 1 65 14
mov.u32 %r70,%r72;
$L4:
.loc 1 70 7
ld.u32 %r80,[%r97];
.loc 1 71 13
and.b32 %r116,%r80,65535;
.loc 1 71 7
mad.lo.u32 %r81,%r116,%r73,%r72;
.loc 1 72 13
shr.u32 %r118,%r80,16;
.loc 1 72 30
shr.u32 %r120,%r81,16;
.loc 1 72 7
mad.lo.u32 %r82,%r118,%r73,%r120;
.loc 1 73 10
shr.u32 %r72,%r82,16;
.loc 1 74 9
ld.u32 %r33,[%r99];
.loc 1 74 13
and.b32 %r121,%r33,65535;
.loc 1 74 39
add.u32 %r122,%r121,%r70;
.loc 1 74 29
and.b32 %r123,%r81,65535;
.loc 1 74 39
sub.u32 %r83,%r122,%r123;
.loc 1 77 13
shr.u32 %r124,%r33,16;
.loc 1 77 26
and.b32 %r125,%r82,65535;
.loc 1 77 20
sub.u32 %r126,%r124,%r125;
.loc 1 75 11
shr.s32 %r127,%r83,16;
.loc 1 77 36
add.u32 %r85,%r126,%r127;
.loc 1 78 11
shr.s32 %r70,%r85,16;
.loc 1 80 4
shl.b32 %r128,%r85,16;
and.b32 %r129,%r83,65535;
or.b32 %r130,%r128,%r129;
st.u32 [%r99],%r130;
.loc 1 90 7
add.u64 %r99,%r99,4;
add.u64 %r97,%r97,4;
setp.ge.u64 %r131,%r77,%r97;
@ %r131 bra $L4;
.loc 1 91 10
ld.u32 %r132,[%r79];
setp.ne.u32 %r133,%r132,0;
@ %r133 bra $L3;
.loc 1 94 10
add.u64 %r86,%r79,-4;
setp.gt.u64 %r134,%r86,%r162;
@ %r134 bra $L5;
bra $L6;
$L7:
.loc 1 95 6
add.u32 %r68,%r68,-1;
.loc 1 94 10
add.u64 %r86,%r86,-4;
setp.le.u64 %r135,%r86,%r162;
@ %r135 bra $L6;
$L5:
.loc 1 94 22
ld.u32 %r136,[%r86];
setp.eq.u32 %r137,%r136,0;
@ %r137 bra $L7;
$L6:
.loc 1 96 12
st.u32 [%r108+20],%r68;
$L3:
.loc 1 99 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r108;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r109;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r140,[%value_in];
}
.loc 1 99 6
setp.lt.s32 %r141,%r140,0;
@ %r141 bra $L8;
.loc 1 101 8
add.u32 %r73,%r73,1;
mov.u64 %r106,%r162;
mov.u64 %r104,%r163;
.loc 1 102 14
mov.u32 %r71,0;
$L9:
.loc 1 109 7
ld.u32 %r87,[%r104];
.loc 1 113 9
ld.u32 %r52,[%r106];
.loc 1 113 13
and.b32 %r142,%r52,65535;
.loc 1 113 39
add.u32 %r143,%r142,%r71;
.loc 1 110 13
and.b32 %r144,%r87,65535;
.loc 1 113 39
sub.u32 %r88,%r143,%r144;
.loc 1 116 13
shr.u32 %r145,%r52,16;
.loc 1 111 13
shr.u32 %r146,%r87,16;
.loc 1 116 20
sub.u32 %r147,%r145,%r146;
.loc 1 114 11
shr.s32 %r148,%r88,16;
.loc 1 116 36
add.u32 %r90,%r147,%r148;
.loc 1 117 11
shr.s32 %r71,%r90,16;
.loc 1 119 4
shl.b32 %r149,%r90,16;
and.b32 %r150,%r88,65535;
or.b32 %r151,%r149,%r150;
st.u32 [%r106],%r151;
.loc 1 129 7
add.u64 %r106,%r106,4;
add.u64 %r104,%r104,4;
setp.ge.u64 %r152,%r77,%r104;
@ %r152 bra $L9;
.loc 1 131 16
cvt.s64.s32 %r153,%r68;
shl.b64 %r154,%r153,2;
.loc 1 131 11
add.u64 %r91,%r162,%r154;
.loc 1 132 10
ld.u32 %r155,[%r91];
setp.ne.u32 %r156,%r155,0;
@ %r156 bra $L8;
.loc 1 134 10
add.u64 %r92,%r91,-4;
setp.gt.u64 %r157,%r92,%r162;
@ %r157 bra $L10;
bra $L11;
$L12:
.loc 1 135 6
add.u32 %r68,%r68,-1;
.loc 1 134 10
add.u64 %r92,%r92,-4;
setp.le.u64 %r158,%r92,%r162;
@ %r158 bra $L11;
$L10:
.loc 1 134 22
ld.u32 %r159,[%r92];
setp.eq.u32 %r160,%r159,0;
@ %r160 bra $L12;
$L11:
.loc 1 136 12
st.u32 [%r108+20],%r68;
$L8:
.loc 1 139 10
mov.u32 %r107,%r73;
bra $L1;
$L13:
.loc 1 53 12
mov.u32 %r107,0;
$L1:
.loc 1 140 1
mov.u32 %value,%r107;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _dtoa_r
.visible .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.reg .u64 %ar6;
ld.param.u64 %ar6,[%in_ar6];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .f64 %r32;
.reg .u32 %r34;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .f64 %r45;
.reg .f64 %r49;
.reg .u64 %r51;
.reg .u32 %r56;
.reg .u32 %r59;
.reg .u32 %r62;
.reg .f64 %r66;
.reg .f64 %r71;
.reg .f64 %r75;
.reg .f64 %r77;
.reg .f64 %r78;
.reg .u64 %r81;
.reg .f64 %r87;
.reg .f64 %r88;
.reg .f64 %r89;
.reg .f64 %r92;
.reg .f64 %r98;
.reg .f64 %r102;
.reg .u32 %r103;
.reg .f64 %r111;
.reg .f64 %r116;
.reg .u32 %r118;
.reg .f64 %r119;
.reg .u64 %r149;
.reg .u32 %r155;
.reg .u64 %r157;
.reg .u32 %r174;
.reg .u32 %r175;
.reg .u32 %r176;
.reg .u32 %r177;
.reg .u32 %r178;
.reg .u32 %r179;
.reg .u32 %r180;
.reg .u32 %r181;
.reg .u32 %r182;
.reg .u32 %r185;
.reg .u32 %r186;
.reg .u32 %r187;
.reg .u32 %r188;
.reg .u32 %r189;
.reg .u64 %r190;
.reg .u32 %r191;
.reg .u64 %r192;
.reg .u64 %r193;
.reg .u64 %r194;
.reg .u64 %r195;
.reg .f64 %r196;
.reg .u64 %r197;
.reg .u64 %r200;
.reg .u64 %r201;
.reg .u32 %r202;
.reg .u32 %r203;
.reg .u32 %r204;
.reg .u64 %r206;
.reg .u32 %r209;
.reg .f64 %r210;
.reg .u64 %r211;
.reg .u32 %r213;
.reg .u32 %r215;
.reg .u32 %r216;
.reg .u32 %r218;
.reg .u32 %r219;
.reg .u32 %r220;
.reg .f64 %r221;
.reg .u32 %r222;
.reg .u32 %r223;
.reg .u32 %r225;
.reg .u32 %r226;
.reg .u32 %r227;
.reg .u32 %r229;
.reg .u32 %r230;
.reg .u32 %r231;
.reg .u32 %r232;
.reg .u32 %r233;
.reg .u32 %r237;
.reg .u32 %r242;
.reg .u32 %r244;
.reg .u32 %r245;
.reg .u64 %r250;
.reg .u32 %r251;
.reg .u64 %r252;
.reg .f64 %r254;
.reg .u64 %r258;
.reg .u64 %r261;
.reg .u64 %r262;
.reg .u64 %r265;
.reg .u64 %r270;
.reg .u32 %r271;
.reg .u32 %r279;
.reg .u32 %r280;
.reg .u32 %r284;
.reg .u32 %r285;
.reg .f64 %r293;
.reg .f64 %r297;
.reg .u32 %r300;
.reg .f64 %r303;
.reg .f64 %r305;
.reg .u64 %r306;
.reg .u32 %r310;
.reg .u32 %r312;
.reg .u32 %r314;
.reg .u32 %r317;
.reg .u32 %r318;
.reg .u32 %r319;
.reg .u32 %r320;
.reg .u64 %r327;
.reg .u64 %r328;
.reg .u64 %r329;
.reg .u64 %r330;
.reg .u64 %r331;
.reg .f64 %r332;
.reg .u32 %r333;
.reg .u32 %r334;
.reg .u64 %r335;
.reg .u64 %r336;
.reg .u64 %r337;
.reg .pred %r338;
.reg .u32 %r339;
.reg .u32 %r340;
.reg .u64 %r343;
.reg .u64 %r344;
.reg .u64 %r345;
.reg .pred %r346;
.reg .u32 %r347;
.reg .u64 %r348;
.reg .u64 %r349;
.reg .u64 %r350;
.reg .u32 %r352;
.reg .u32 %r353;
.reg .pred %r354;
.reg .u32 %r355;
.reg .u64 %r356;
.reg .u64 %r357;
.reg .pred %r358;
.reg .pred %r359;
.reg .u32 %r360;
.reg .pred %r361;
.reg .u64 %r362;
.reg .u64 %r367;
.reg .u64 %r368;
.reg .pred %r369;
.reg .u64 %r371;
.reg .u32 %r372;
.reg .u32 %r373;
.reg .u32 %r374;
.reg .u64 %r375;
.reg .u64 %r376;
.reg .u64 %r377;
.reg .u32 %r379;
.reg .u64 %r380;
.reg .pred %r381;
.reg .u32 %r382;
.reg .u32 %r383;
.reg .u32 %r384;
.reg .u32 %r385;
.reg .u32 %r386;
.reg .u32 %r387;
.reg .u32 %r388;
.reg .u64 %r390;
.reg .u32 %r391;
.reg .u32 %r392;
.reg .u64 %r393;
.reg .u64 %r394;
.reg .u64 %r395;
.reg .f64 %r397;
.reg .f64 %r398;
.reg .f64 %r399;
.reg .f64 %r400;
.reg .pred %r401;
.reg .f64 %r402;
.reg .pred %r403;
.reg .pred %r404;
.reg .u64 %r405;
.reg .u64 %r406;
.reg .u64 %r407;
.reg .u64 %r408;
.reg .f64 %r409;
.reg .pred %r410;
.reg .pred %r411;
.reg .u32 %r412;
.reg .pred %r413;
.reg .pred %r414;
.reg .pred %r415;
.reg .pred %r416;
.reg .u32 %r417;
.reg .pred %r418;
.reg .u64 %r420;
.reg .u64 %r421;
.reg .pred %r422;
.reg .u64 %r425;
.reg .pred %r426;
.reg .u64 %r427;
.reg .u32 %r428;
.reg .u64 %r429;
.reg .u64 %r430;
.reg .u32 %r432;
.reg .u32 %r433;
.reg .u16 %r436;
.reg .u16 %r438;
.reg .u16 %r439;
.reg .u32 %r441;
.reg .pred %r442;
.reg .pred %r443;
.reg .u64 %r444;
.reg .u32 %r445;
.reg .u64 %r446;
.reg .u64 %r447;
.reg .u64 %r448;
.reg .u32 %r449;
.reg .pred %r450;
.reg .u64 %r451;
.reg .f64 %r452;
.reg .pred %r453;
.reg .u32 %r454;
.reg .pred %r455;
.reg .f64 %r456;
.reg .pred %r457;
.reg .pred %r458;
.reg .u64 %r459;
.reg .u32 %r460;
.reg .u64 %r461;
.reg .u64 %r462;
.reg .u64 %r463;
.reg .f64 %r464;
.reg .pred %r465;
.reg .u32 %r466;
.reg .pred %r467;
.reg .f64 %r468;
.reg .pred %r469;
.reg .pred %r470;
.reg .pred %r471;
.reg .pred %r472;
.reg .pred %r473;
.reg .pred %r474;
.reg .u32 %r475;
.reg .f64 %r476;
.reg .u64 %r478;
.reg .u32 %r479;
.reg .u32 %r480;
.reg .u64 %r481;
.reg .u64 %r482;
.reg .u64 %r483;
.reg .f64 %r485;
.reg .u64 %r487;
.reg .u32 %r488;
.reg .u32 %r489;
.reg .u64 %r490;
.reg .u64 %r491;
.reg .u64 %r492;
.reg .pred %r494;
.reg .f64 %r495;
.reg .pred %r496;
.reg .f64 %r497;
.reg .pred %r498;
.reg .u16 %r500;
.reg .u16 %r501;
.reg .u32 %r502;
.reg .f64 %r503;
.reg .u64 %r504;
.reg .u64 %r506;
.reg .u64 %r507;
.reg .u64 %r508;
.reg .pred %r509;
.reg .f64 %r510;
.reg .f64 %r511;
.reg .pred %r513;
.reg .f64 %r514;
.reg .f64 %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .f64 %r518;
.reg .u16 %r520;
.reg .u16 %r521;
.reg .u32 %r522;
.reg .pred %r523;
.reg .pred %r525;
.reg .f64 %r526;
.reg .pred %r527;
.reg .f64 %r528;
.reg .f64 %r529;
.reg .pred %r530;
.reg .u16 %r531;
.reg .u32 %r532;
.reg .pred %r533;
.reg .u32 %r534;
.reg .u64 %r535;
.reg .u64 %r536;
.reg .f64 %r537;
.reg .u16 %r539;
.reg .u16 %r540;
.reg .u32 %r541;
.reg .pred %r542;
.reg .u64 %r544;
.reg .u32 %r546;
.reg .u32 %r547;
.reg .u32 %r549;
.reg .u32 %r550;
.reg .u16 %r552;
.reg .u16 %r553;
.reg .u16 %r554;
.reg .u32 %r555;
.reg .u16 %r556;
.reg .pred %r557;
.reg .u64 %r558;
.reg .u64 %r559;
.reg .u64 %r560;
.reg .u64 %r561;
.reg .u32 %r563;
.reg .u32 %r565;
.reg .u32 %r566;
.reg .u16 %r568;
.reg .u16 %r569;
.reg .u16 %r570;
.reg .u32 %r571;
.reg .u16 %r572;
.reg .pred %r573;
.reg .pred %r574;
.reg .f64 %r575;
.reg .f64 %r576;
.reg .pred %r577;
.reg .f64 %r578;
.reg .f64 %r579;
.reg .f64 %r580;
.reg .u16 %r582;
.reg .u16 %r583;
.reg .u32 %r584;
.reg .pred %r585;
.reg .pred %r586;
.reg .pred %r587;
.reg .u32 %r588;
.reg .pred %r589;
.reg .pred %r590;
.reg .u16 %r591;
.reg .pred %r592;
.reg .u16 %r594;
.reg .u32 %r596;
.reg .u32 %r597;
.reg .u32 %r598;
.reg .u64 %r599;
.reg .u64 %r600;
.reg .pred %r601;
.reg .f64 %r602;
.reg .f64 %r603;
.reg .f64 %r604;
.reg .u16 %r606;
.reg .u16 %r607;
.reg .u32 %r608;
.reg .pred %r609;
.reg .pred %r611;
.reg .pred %r612;
.reg .u32 %r613;
.reg .u32 %r614;
.reg .pred %r615;
.reg .u32 %r616;
.reg .pred %r617;
.reg .u32 %r619;
.reg .u64 %r620;
.reg .u32 %r622;
.reg .u32 %r623;
.reg .u32 %r625;
.reg .u32 %r626;
.reg .u16 %r627;
.reg .u16 %r628;
.reg .u16 %r629;
.reg .u32 %r630;
.reg .u16 %r631;
.reg .pred %r632;
.reg .pred %r633;
.reg .pred %r635;
.reg .u64 %r639;
.reg .u64 %r643;
.reg .pred %r646;
.reg .u64 %r650;
.reg .u64 %r654;
.reg .u32 %r656;
.reg .u64 %r657;
.reg .pred %r658;
.reg .u64 %r662;
.reg .pred %r663;
.reg .pred %r664;
.reg .u64 %r665;
.reg .pred %r666;
.reg .u64 %r667;
.reg .u32 %r668;
.reg .u32 %r669;
.reg .pred %r670;
.reg .pred %r671;
.reg .u32 %r672;
.reg .u32 %r673;
.reg .u32 %r674;
.reg .u64 %r675;
.reg .u64 %r676;
.reg .u64 %r677;
.reg .u64 %r678;
.reg .u32 %r680;
.reg .u32 %r681;
.reg .u32 %r682;
.reg .pred %r683;
.reg .u32 %r684;
.reg .pred %r685;
.reg .u32 %r686;
.reg .pred %r687;
.reg .u32 %r688;
.reg .pred %r689;
.reg .u64 %r693;
.reg .pred %r694;
.reg .u64 %r698;
.reg .u32 %r699;
.reg .u32 %r700;
.reg .u32 %r701;
.reg .pred %r702;
.reg .u32 %r705;
.reg .pred %r706;
.reg .u32 %r709;
.reg .u32 %r710;
.reg .u64 %r711;
.reg .u32 %r713;
.reg .u32 %r714;
.reg .u16 %r715;
.reg .u16 %r716;
.reg .u16 %r717;
.reg .u32 %r718;
.reg .u64 %r724;
.reg .pred %r725;
.reg .u32 %r727;
.reg .u32 %r728;
.reg .u16 %r729;
.reg .u16 %r730;
.reg .u16 %r731;
.reg .u32 %r732;
.reg .u16 %r733;
.reg .pred %r734;
.reg .pred %r735;
.reg .u32 %r738;
.reg .u64 %r740;
.reg .u32 %r743;
.reg .pred %r744;
.reg .u32 %r745;
.reg .pred %r747;
.reg .u64 %r751;
.reg .pred %r752;
.reg .u32 %r755;
.reg .u64 %r756;
.reg .pred %r757;
.reg .u64 %r758;
.reg .u32 %r759;
.reg .u64 %r761;
.reg .u64 %r765;
.reg .u64 %r766;
.reg .u64 %r767;
.reg .u64 %r768;
.reg .u64 %r769;
.reg .u64 %r770;
.reg .u32 %r773;
.reg .u64 %r774;
.reg .u32 %r775;
.reg .u64 %r776;
.reg .u32 %r779;
.reg .u32 %r782;
.reg .u64 %r786;
.reg .u32 %r787;
.reg .pred %r788;
.reg .u32 %r791;
.reg .u32 %r796;
.reg .u32 %r797;
.reg .pred %r798;
.reg .pred %r799;
.reg .pred %r800;
.reg .pred %r801;
.reg .u32 %r804;
.reg .u32 %r805;
.reg .pred %r806;
.reg .pred %r807;
.reg .u32 %r810;
.reg .u64 %r811;
.reg .u32 %r814;
.reg .pred %r815;
.reg .pred %r816;
.reg .u32 %r817;
.reg .pred %r818;
.reg .pred %r819;
.reg .pred %r820;
.reg .pred %r821;
.reg .u32 %r822;
.reg .u16 %r824;
.reg .u16 %r825;
.reg .u32 %r826;
.reg .pred %r827;
.reg .u32 %r830;
.reg .u32 %r831;
.reg .u64 %r832;
.reg .pred %r833;
.reg .u64 %r838;
.reg .u64 %r843;
.reg .u64 %r848;
.reg .u32 %r851;
.reg .u64 %r852;
.reg .u32 %r853;
.reg .pred %r854;
.reg .u64 %r855;
.reg .pred %r856;
.reg .u32 %r857;
.reg .u64 %r858;
.reg .u32 %r861;
.reg .u32 %r862;
.reg .u64 %r863;
.reg .u32 %r866;
.reg .u64 %r867;
.reg .u32 %r870;
.reg .pred %r871;
.reg .pred %r872;
.reg .u32 %r873;
.reg .pred %r874;
.reg .pred %r875;
.reg .u32 %r876;
.reg .u16 %r877;
.reg .pred %r878;
.reg .u16 %r880;
.reg .u32 %r882;
.reg .u16 %r883;
.reg .pred %r884;
.reg .pred %r887;
.reg .u32 %r889;
.reg .u32 %r890;
.reg .u32 %r892;
.reg .u32 %r893;
.reg .u16 %r894;
.reg .u16 %r895;
.reg .u16 %r896;
.reg .u32 %r897;
.reg .u16 %r898;
.reg .pred %r899;
.reg .u32 %r906;
.reg .pred %r907;
.reg .pred %r909;
.reg .pred %r910;
.reg .pred %r913;
.reg .pred %r914;
.reg .f64 %r915;
.reg .u64 %r917;
.reg .u32 %r918;
.reg .u32 %r919;
.reg .u64 %r920;
.reg .u64 %r921;
.reg .u64 %r922;
.reg .u32 %r926;
.reg .u32 %r927;
.reg .u64 %r930;
.reg .pred %r931;
.reg .pred %r932;
.reg .pred %r933;
.reg .pred %r934;
.reg .pred %r935;
.reg .pred %r936;
.reg .u64 %r937;
.reg .pred %r938;
.reg .u32 %r940;
.reg .u32 %r941;
.reg .u32 %r943;
.reg .u32 %r944;
.reg .u16 %r946;
.reg .u16 %r947;
.reg .u16 %r948;
.reg .u32 %r949;
.reg .u16 %r950;
.reg .pred %r951;
.reg .u64 %r952;
.reg .u32 %r953;
.reg .u32 %r954;
.reg .pred %r955;
.reg .u64 %r956;
.reg .u64 %r957;
.reg .u64 %r958;
.reg .u64 %r959;
.reg .u64 %r960;
.reg .pred %r961;
.reg .u32 %r962;
.reg .u32 %r965;
.reg .u32 %r966;
mov.u64 %r331,%ar0;
mov.f64 %r332,%ar1;
mov.u32 %r333,%ar2;
mov.u32 %r334,%ar3;
mov.u64 %r335,%ar4;
mov.u64 %r336,%ar5;
mov.u64 %r337,%ar6;
.loc 1 232 7
mov.b64 %r327,%r332;
.loc 1 235 7
ld.u64 %r22,[%r331+96];
.loc 1 235 6
setp.eq.u64 %r338,%r22,0;
@ %r338 bra $L19;
.loc 1 237 35
ld.u32 %r23,[%r331+104];
.loc 1 237 33
st.u32 [%r22+8],%r23;
.loc 1 238 42
mov.u32 %r340,1;
shl.b32 %r339,%r340,%r23;
.loc 1 238 38
st.u32 [%r22+12],%r339;
.loc 1 239 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 240 29
mov.u64 %r343,0;
st.u64 [%r331+96],%r343;
$L19:
mov.b64 %r344,%r332;
shr.u64 %r345,%r344,32;
cvt.u32.u64 %r155,%r345;
.loc 1 243 6
setp.ge.s32 %r346,%r155,0;
@ %r346 bra $L20;
.loc 1 246 13
mov.u32 %r347,1;
st.u32 [%r336],%r347;
.loc 1 247 17
and.b32 %r155,%r155,2147483647;
cvt.u64.u32 %r348,%r155;
shl.b64 %r349,%r348,32;
and.b64 %r350,%r327,4294967295;
or.b64 %r327,%r350,%r349;
.loc 1 263 13
mov.b64 %r254,%r327;
bra $L21;
$L20:
.loc 1 250 11
mov.u32 %r352,0;
st.u32 [%r336],%r352;
mov.f64 %r254,%r332;
$L21:
.loc 1 254 18
and.b32 %r353,%r155,2146435072;
.loc 1 254 6
setp.ne.u32 %r354,%r353,2146435072;
@ %r354 bra $L22;
.loc 1 260 14
mov.u32 %r355,9999;
st.u32 [%r335],%r355;
.loc 1 263 13
mov.b64 %r357,%r254;
and.b64 %r356,%r357,4503599627370495;
.loc 1 263 52
setp.eq.u64 %r358,%r356,0;
@ %r358 bra $L23;
bra $L260;
$L187:
cvta.const.u64 %r330,$LC0;
.loc 1 269 17
add.u64 %r201,%r330,8;
bra $L145;
$L188:
.loc 1 263 52
cvta.const.u64 %r330,$LC1;
.loc 1 269 17
add.u64 %r201,%r330,3;
$L145:
.loc 1 267 7
st.u64 [%r337],%r201;
bra $L18;
$L22:
.loc 1 278 6
setp.neu.f64 %r359,%r254,0d0000000000000000;
@ %r359 bra $L26;
.loc 1 280 14
mov.u32 %r360,1;
st.u32 [%r335],%r360;
.loc 1 282 10
setp.eq.u64 %r361,%r337,0;
@ %r361 bra $L158;
.loc 1 283 7
cvta.const.u64 %r362,$LC2+1;
st.u64 [%r337],%r362;
.loc 1 284 14
cvta.const.u64 %r330,$LC2;
bra $L18;
$L26:
.loc 1 287 7
add.u64 %r367,%frame,4;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r254;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r367;
call (%value_in),__d2b,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r368,[%value_in];
}
mov.u64 %r192,%r368;
.loc 1 291 29
shr.u32 %r34,%r155,20;
.loc 1 291 6
setp.eq.u32 %r369,%r34,0;
@ %r369 bra $L27;
.loc 1 294 12
mov.b64 %r328,%r254;
.loc 1 295 18
shr.u64 %r371,%r328,32;
cvt.u32.u64 %r373,%r371;
and.b32 %r372,%r373,1048575;
.loc 1 296 18
or.b32 %r374,%r372,1072693248;
cvt.u64.u32 %r375,%r374;
shl.b64 %r376,%r375,32;
and.b64 %r377,%r328,4294967295;
or.b64 %r328,%r377,%r376;
.loc 1 324 9
add.u32 %r177,%r34,-1023;
.loc 1 336 17
ld.u32 %r284,[%frame+4];
.loc 1 330 14
mov.u32 %r191,0;
bra $L28;
$L27:
.loc 1 336 17
ld.u32 %r284,[%frame+4];
ld.u32 %r379,[%frame];
add.u32 %r38,%r284,%r379;
.loc 1 336 9
add.u32 %r209,%r38,1074;
mov.b64 %r380,%r332;
cvt.u32.u64 %r285,%r380;
.loc 1 341 8
setp.le.s32 %r381,%r209,32;
@ %r381 bra $L29;
.loc 1 340 40
mov.u32 %r383,64;
sub.u32 %r382,%r383,%r209;
.loc 1 340 33
shl.b32 %r384,%r155,%r382;
.loc 1 340 65
add.u32 %r385,%r38,1042;
.loc 1 340 59
shr.u32 %r386,%r285,%r385;
.loc 1 341 8
or.b32 %r202,%r384,%r386;
bra $L30;
$L29:
.loc 1 341 28
mov.u32 %r388,32;
sub.u32 %r387,%r388,%r209;
.loc 1 341 8
shl.b32 %r202,%r285,%r387;
$L30:
.loc 1 343 12
cvt.rn.f64.u32 %r45,%r202;
mov.b64 %r328,%r45;
.loc 1 344 18
shr.u64 %r390,%r328,32;
cvt.u32.u64 %r392,%r390;
add.u32 %r391,%r392,-32505856;
cvt.u64.u32 %r393,%r391;
shl.b64 %r394,%r393,32;
and.b64 %r395,%r328,4294967295;
or.b64 %r328,%r395,%r394;
.loc 1 345 9
add.u32 %r177,%r38,-1;
.loc 1 346 14
mov.u32 %r191,1;
$L28:
.loc 1 352 14
mov.b64 %r398,%r328;
mov.f64 %r399,0d3ff8000000000000;
sub.f64 %r397,%r398,%r399;
.loc 1 352 41
fma.rn.f64 %r49,%r397,0d3fd287a7636f4361,0d3fc68a288b60c8b3;
.loc 1 352 63
cvt.rn.f64.s32 %r400,%r177;
.loc 1 352 6
fma.rn.f64 %r210,%r400,0d3fd34413509f79fb,%r49;
.loc 1 354 5
cvt.rzi.s32.f64 %r182,%r210;
.loc 1 355 6
setp.lt.f64 %r401,%r210,0d0000000000000000;
@ ! %r401 bra $L31;
.loc 1 355 21
cvt.rn.f64.s32 %r402,%r182;
.loc 1 355 15
setp.eq.f64 %r403,%r402,%r210;
@ %r403 bra $L31;
.loc 1 356 6
add.u32 %r182,%r182,-1;
$L31:
.loc 1 364 13
sub.u32 %r319,%r284,%r177;
.loc 1 364 5
add.u32 %r188,%r319,-1;
.loc 1 358 6
setp.gt.u32 %r404,%r182,22;
@ %r404 bra $L159;
.loc 1 360 21
cvta.const.u64 %r405,__mprec_tens;
cvt.s64.s32 %r406,%r182;
shl.b64 %r407,%r406,3;
add.u64 %r408,%r405,%r407;
.loc 1 360 10
ld.f64 %r409,[%r408];
setp.gt.f64 %r410,%r409,%r254;
@ ! %r410 bra $L261;
.loc 1 361 3
add.u32 %r182,%r182,-1;
.loc 1 362 15
mov.u32 %r185,0;
bra $L33;
$L159:
.loc 1 357 11
mov.u32 %r185,1;
$L33:
.loc 1 365 6
setp.ge.s32 %r411,%r188,0;
@ %r411 bra $L160;
$L154:
.loc 1 372 10
mov.u32 %r412,1;
sub.u32 %r174,%r412,%r319;
.loc 1 373 10
mov.u32 %r188,0;
bra $L36;
$L160:
.loc 1 367 10
mov.u32 %r174,0;
$L36:
.loc 1 375 6
setp.lt.s32 %r413,%r182,0;
@ ! %r413 bra $L153;
bra $L37;
$L194:
.loc 1 362 15
mov.u32 %r185,0;
.loc 1 367 10
mov.u32 %r174,%r185;
$L153:
.loc 1 379 10
add.u32 %r188,%r188,%r182;
mov.u32 %r318,%r182;
.loc 1 377 10
mov.u32 %r175,0;
bra $L38;
$L37:
.loc 1 383 10
sub.u32 %r174,%r174,%r182;
.loc 1 384 10
neg.s32 %r175,%r182;
mov.u32 %r318,%r182;
.loc 1 385 10
mov.u32 %r182,0;
$L38:
.loc 1 387 6
setp.gt.u32 %r414,%r333,9;
@ %r414 bra $L161;
.loc 1 390 6
setp.le.s32 %r415,%r333,5;
@ %r415 bra $L162;
.loc 1 392 12
add.u32 %r333,%r333,-4;
.loc 1 393 17
mov.u32 %r181,0;
bra $L40;
$L190:
.loc 1 397 3
mov.u32 %r251,1;
bra $L150;
$L192:
.loc 1 405 17
mov.u32 %r251,0;
$L150:
.loc 1 408 10
setp.le.s32 %r416,%r334,0;
@ %r416 bra $L163;
mov.u32 %r280,%r334;
mov.u32 %r279,%r334;
mov.u32 %r178,%r334;
bra $L41;
$L191:
.loc 1 397 3
mov.u32 %r251,1;
bra $L151;
$L193:
.loc 1 413 17
mov.u32 %r251,0;
$L151:
.loc 1 416 19
add.u32 %r280,%r334,%r318;
.loc 1 416 9
add.u32 %r279,%r280,1;
max.s32 %r178,%r279,1;
$L41:
.loc 1 423 32
mov.u32 %r417,0;
st.u32 [%r331+104],%r417;
.loc 1 423 77
cvt.s64.s32 %r39,%r178;
.loc 1 423 3
setp.le.s32 %r418,%r178,31;
@ %r418 bra $L164;
mov.u32 %r271,1;
.loc 1 422 5
mov.u32 %r244,4;
$L43:
.loc 1 425 28
mov.u32 %r56,%r271;
.loc 1 424 10
add.u32 %r244,%r244,%r244;
.loc 1 423 3
add.u32 %r271,%r56,1;
.loc 1 423 73
cvt.s64.s32 %r420,%r244;
add.u64 %r421,%r420,28;
.loc 1 423 3
setp.ge.u64 %r422,%r39,%r421;
@ %r422 bra $L43;
st.u32 [%r331+104],%r56;
bra $L42;
$L164:
mov.u32 %r56,%r417;
$L42:
.loc 1 426 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r56;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r425,[%value_in];
}
mov.u64 %r211,%r425;
setp.ne.u64 %r426,%r425,0;
@ %r426 bra $L44;
$L148:
cvta.const.u64 %r430,$LC3;
mov.u64 %r429,0;
mov.u32 %r428,426;
cvta.const.u64 %r427,$LC4;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r427;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r428;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r429;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r430;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L44:
.loc 1 426 25
st.u64 [%r331+96],%r425;
.loc 1 429 17
mov.u32 %r59,%r279;
set.u32.le.u32 %r432,%r279,14;
neg.s32 %r433,%r432;
.loc 1 429 38
cvt.u16.u32 %r436,%r181;
cvt.u16.u32 %r439,%r433;
and.b16 %r438,%r439,%r436;
cvt.u32.u16 %r441,%r438;
cvt.u32.u8 %r62,%r441;
.loc 1 429 6
setp.eq.u32 %r442,%r62,0;
@ %r442 bra $L45;
.loc 1 438 10
setp.le.s32 %r443,%r318,0;
@ %r443 bra $L46;
.loc 1 440 7
cvta.const.u64 %r444,__mprec_tens;
.loc 1 440 16
and.b32 %r445,%r318,15;
.loc 1 440 7
cvt.s64.s32 %r446,%r445;
shl.b64 %r447,%r446,3;
add.u64 %r448,%r444,%r447;
ld.f64 %r196,[%r448];
.loc 1 441 6
shr.s32 %r180,%r318,4;
.loc 1 442 10
and.b32 %r449,%r180,16;
.loc 1 442 7
setp.eq.u32 %r450,%r449,0;
@ %r450 bra $L165;
.loc 1 445 10
and.b32 %r180,%r180,15;
.loc 1 446 22
cvta.const.u64 %r451,__mprec_bigtens;
.loc 1 446 12
ld.f64 %r452,[%r451+32];
div.rn.f64 %r66,%r254,%r452;
.loc 1 447 12
mov.u32 %r179,3;
bra $L47;
$L165:
mov.f64 %r66,%r254;
.loc 1 437 12
mov.u32 %r179,2;
$L47:
.loc 1 449 4
setp.eq.u32 %r453,%r180,0;
@ %r453 bra $L48;
cvta.const.u64 %r157,__mprec_bigtens;
$L50:
.loc 1 450 12
and.b32 %r454,%r180,1;
.loc 1 450 9
setp.eq.u32 %r455,%r454,0;
@ %r455 bra $L49;
.loc 1 452 7
add.u32 %r179,%r179,1;
.loc 1 453 6
ld.f64 %r456,[%r157];
mul.f64 %r196,%r196,%r456;
$L49:
.loc 1 449 16
shr.s32 %r180,%r180,1;
.loc 1 449 4
add.u64 %r157,%r157,8;
setp.ne.u32 %r457,%r180,0;
@ %r457 bra $L50;
$L48:
.loc 1 455 8
div.rn.f64 %r98,%r66,%r196;
bra $L51;
$L46:
.loc 1 457 15
setp.eq.u32 %r458,%r318,0;
@ %r458 bra $L166;
.loc 1 457 20
neg.s32 %r213,%r318;
.loc 1 459 15
cvta.const.u64 %r459,__mprec_tens;
.loc 1 459 19
and.b32 %r460,%r213,15;
.loc 1 459 15
cvt.s64.s32 %r461,%r460;
shl.b64 %r462,%r461,3;
add.u64 %r463,%r459,%r462;
.loc 1 459 8
ld.f64 %r464,[%r463];
mul.f64 %r71,%r254,%r464;
.loc 1 460 11
shr.s32 %r215,%r213,4;
.loc 1 460 4
setp.eq.u32 %r465,%r215,0;
@ %r465 bra $L167;
cvta.const.u64 %r24,__mprec_bigtens;
mov.f64 %r98,%r71;
mov.u32 %r245,0;
.loc 1 437 12
mov.u32 %r179,2;
$L53:
.loc 1 461 12
and.b32 %r466,%r215,1;
.loc 1 461 9
setp.eq.u32 %r467,%r466,0;
@ %r467 bra $L52;
.loc 1 463 7
add.u32 %r179,%r179,1;
.loc 1 464 7
ld.f64 %r468,[%r24];
mul.f64 %r98,%r98,%r468;
mov.u32 %r245,%r62;
$L52:
.loc 1 460 27
shr.s32 %r215,%r215,1;
.loc 1 460 4
add.u64 %r24,%r24,8;
setp.ne.u32 %r469,%r215,0;
@ %r469 bra $L53;
setp.eq.u32 %r470,%r245,0;
selp.f64 %r98,%r71,%r98,%r470;
bra $L51;
$L166:
mov.f64 %r98,%r254;
.loc 1 437 12
mov.u32 %r179,2;
bra $L51;
$L167:
.loc 1 460 4
mov.f64 %r98,%r71;
.loc 1 437 12
mov.u32 %r179,2;
$L51:
.loc 1 467 10
setp.eq.u32 %r471,%r185,0;
@ %r471 bra $L55;
.loc 1 467 19
setp.lt.f64 %r472,%r98,0d3ff0000000000000;
@ ! %r472 bra $L55;
.loc 1 467 31
setp.eq.u32 %r473,%r279,0;
@ %r473 bra $L57;
.loc 1 469 7
setp.le.s32 %r474,%r280,0;
@ %r474 bra $L58;
.loc 1 472 5
add.u32 %r216,%r318,-1;
.loc 1 473 8
mul.f64 %r98,%r98,0d4024000000000000;
.loc 1 474 8
add.u32 %r475,%r179,1;
.loc 1 476 20
cvt.rn.f64.s32 %r476,%r475;
.loc 1 476 26
fma.rn.f64 %r297,%r98,%r476,0d401c000000000000;
.loc 1 476 13
mov.b64 %r329,%r297;
.loc 1 477 19
shr.u64 %r478,%r329,32;
cvt.u32.u64 %r480,%r478;
add.u32 %r479,%r480,-54525952;
cvt.u64.u32 %r481,%r479;
shl.b64 %r482,%r481,32;
and.b64 %r483,%r329,4294967295;
or.b64 %r329,%r483,%r482;
mov.u32 %r300,%r280;
bra $L59;
$L55:
.loc 1 476 20
cvt.rn.f64.s32 %r485,%r179;
.loc 1 476 26
fma.rn.f64 %r75,%r485,%r98,0d401c000000000000;
.loc 1 476 13
mov.b64 %r329,%r75;
.loc 1 477 19
shr.u64 %r487,%r329,32;
cvt.u32.u64 %r489,%r487;
add.u32 %r488,%r489,-54525952;
cvt.u64.u32 %r490,%r488;
shl.b64 %r491,%r490,32;
and.b64 %r492,%r329,4294967295;
or.b64 %r329,%r492,%r491;
.loc 1 478 10
setp.ne.u32 %r494,%r279,0;
@ %r494 bra $L169;
$L147:
.loc 1 481 8
mov.f64 %r495,0d4014000000000000;
sub.f64 %r77,%r98,%r495;
.loc 1 482 17
mov.b64 %r78,%r329;
.loc 1 482 7
setp.gt.f64 %r496,%r77,%r78;
@ %r496 bra $L170;
.loc 1 484 14
neg.f64 %r497,%r78;
.loc 1 484 7
setp.lt.f64 %r498,%r77,%r497;
@ %r498 bra $L171;
bra $L58;
$L169:
mov.u32 %r216,%r318;
mov.u32 %r300,%r279;
$L59:
.loc 1 499 10
add.u64 %r197,%r425,1;
.loc 1 497 10
cvt.rzi.s32.f64 %r203,%r98;
.loc 1 499 19
cvt.u16.u32 %r501,%r203;
add.u16 %r500,%r501,48;
cvt.u32.u16 %r502,%r500;
.loc 1 498 12
cvt.rn.f64.s32 %r503,%r203;
sub.f64 %r92,%r98,%r503;
.loc 1 494 38
mov.b64 %r303,%r329;
.loc 1 494 22
cvta.const.u64 %r504,__mprec_tens;
.loc 1 494 28
add.u32 %r962,%r300,-1;
.loc 1 494 22
cvt.s64.s32 %r506,%r962;
shl.b64 %r507,%r506,3;
add.u64 %r508,%r504,%r507;
ld.f64 %r305,[%r508];
.loc 1 489 10
setp.eq.u32 %r509,%r251,0;
@ %r509 bra $L62;
.loc 1 494 16
mov.f64 %r511,0d3fe0000000000000;
div.rn.f64 %r510,%r511,%r305;
.loc 1 494 33
sub.f64 %r87,%r510,%r303;
.loc 1 499 13
st.u8 [%r425],%r502;
.loc 1 500 11
setp.gt.f64 %r513,%r87,%r92;
@ ! %r513 bra $L262;
.loc 1 854 14
add.u32 %r318,%r216,1;
mov.u64 %r330,%r425;
.loc 1 499 10
mov.u64 %r211,%r197;
bra $L65;
$L262:
mov.u64 %r81,%r197;
.loc 1 495 11
mov.u32 %r220,0;
.loc 1 502 15
mov.f64 %r515,0d3ff0000000000000;
$L67:
mov.u64 %r197,%r81;
sub.f64 %r514,%r515,%r92;
.loc 1 502 11
setp.lt.f64 %r516,%r514,%r87;
@ %r516 bra $L66;
.loc 1 504 11
add.u32 %r220,%r220,1;
setp.ge.s32 %r517,%r220,%r300;
@ %r517 bra $L58;
.loc 1 506 14
mul.f64 %r87,%r87,0d4024000000000000;
.loc 1 507 12
mul.f64 %r88,%r92,0d4024000000000000;
.loc 1 497 10
cvt.rzi.s32.f64 %r219,%r88;
.loc 1 498 12
cvt.rn.f64.s32 %r518,%r219;
sub.f64 %r92,%r88,%r518;
add.u64 %r81,%r81,1;
.loc 1 499 19
cvt.u16.u32 %r521,%r219;
add.u16 %r520,%r521,48;
.loc 1 499 13
cvt.u32.u16 %r522,%r520;
st.u8 [%r197],%r522;
.loc 1 500 11
setp.lt.f64 %r523,%r92,%r87;
@ ! %r523 bra $L67;
.loc 1 854 14
add.u32 %r318,%r216,1;
mov.u64 %r330,%r425;
mov.u64 %r211,%r81;
bra $L65;
$L62:
.loc 1 514 10
mul.f64 %r89,%r303,%r305;
.loc 1 519 13
st.u8 [%r425],%r502;
.loc 1 520 11
setp.ne.u32 %r525,%r300,1;
@ %r525 bra $L69;
$L76:
.loc 1 522 19
add.f64 %r526,%r89,0d3fe0000000000000;
.loc 1 522 8
setp.lt.f64 %r527,%r526,%r92;
@ ! %r527 bra $L263;
.loc 1 578 5
add.u32 %r318,%r216,1;
mov.u64 %r330,%r425;
bra $L80;
$L263:
.loc 1 524 24
mov.f64 %r529,0d3fe0000000000000;
sub.f64 %r528,%r529,%r89;
.loc 1 524 13
setp.gt.f64 %r530,%r528,%r92;
@ ! %r530 bra $L58;
$L74:
mov.u64 %r51,%r197;
.loc 1 526 15
add.u64 %r197,%r197,-1;
ld.s8 %r532,[%r197];
cvt.u16.u32 %r531,%r532;
setp.eq.u16 %r533,%r531,48;
@ %r533 bra $L74;
.loc 1 854 14
add.u32 %r318,%r216,1;
mov.u64 %r330,%r425;
mov.u64 %r211,%r51;
bra $L65;
$L69:
mov.u64 %r306,%r197;
add.u32 %r534,%r300,-2;
cvt.u64.u32 %r535,%r534;
add.u64 %r536,%r425,2;
add.u64 %r149,%r535,%r536;
$L75:
.loc 1 515 26
mul.f64 %r102,%r92,0d4024000000000000;
.loc 1 517 10
cvt.rzi.s32.f64 %r218,%r102;
.loc 1 518 12
cvt.rn.f64.s32 %r537,%r218;
sub.f64 %r92,%r102,%r537;
.loc 1 519 19
cvt.u16.u32 %r540,%r218;
add.u16 %r539,%r540,48;
.loc 1 519 13
cvt.u32.u16 %r541,%r539;
st.u8 [%r306],%r541;
.loc 1 520 11
add.u64 %r306,%r306,1;
setp.ne.u64 %r542,%r149,%r306;
@ %r542 bra $L75;
.loc 1 519 10
cvt.u64.u32 %r544,%r962;
add.u64 %r197,%r197,%r544;
bra $L76;
$L58:
.loc 1 538 11
mov.b64 %r327,%r254;
$L45:
.loc 1 545 10
ld.u32 %r103,[%frame];
.loc 1 545 6
not.b32 %r546,%r103;
shr.u32 %r547,%r546,31;
.loc 1 545 15
set.u32.le.s32 %r549,%r318,14;
neg.s32 %r550,%r549;
cvt.u16.u32 %r553,%r547;
cvt.u16.u32 %r554,%r550;
and.b16 %r552,%r553,%r554;
cvt.u32.u16 %r555,%r552;
cvt.u16.u8 %r556,%r555;
setp.eq.u16 %r557,%r556,0;
@ %r557 bra $L77;
.loc 1 548 10
cvta.const.u64 %r558,__mprec_tens;
cvt.s64.s32 %r559,%r318;
shl.b64 %r560,%r559,3;
add.u64 %r561,%r558,%r560;
ld.f64 %r221,[%r561];
.loc 1 549 19
shr.u32 %r563,%r334,31;
.loc 1 549 31
set.u32.le.s32 %r565,%r279,0;
neg.s32 %r566,%r565;
.loc 1 549 23
cvt.u16.u32 %r569,%r563;
cvt.u16.u32 %r570,%r566;
and.b16 %r568,%r569,%r570;
.loc 1 549 10
cvt.u32.u16 %r571,%r568;
cvt.u16.u8 %r572,%r571;
setp.eq.u16 %r573,%r572,0;
@ %r573 bra $L78;
.loc 1 552 7
setp.ne.u32 %r574,%r279,0;
@ %r574 bra $L172;
.loc 1 552 29
mul.f64 %r575,%r221,0d4014000000000000;
.loc 1 552 17
mov.b64 %r576,%r327;
setp.ge.f64 %r577,%r575,%r576;
@ %r577 bra $L173;
.loc 1 551 6
mov.u64 %r265,0;
.loc 1 551 12
mov.u64 %r194,%r265;
bra $L60;
$L78:
.loc 1 558 9
mov.b64 %r32,%r327;
.loc 1 558 12
div.rn.f64 %r578,%r32,%r221;
.loc 1 558 6
cvt.rzi.s32.f64 %r222,%r578;
.loc 1 559 13
cvt.rn.f64.s32 %r579,%r222;
.loc 1 559 8
neg.f64 %r580,%r579;
fma.rn.f64 %r111,%r580,%r221,%r32;
.loc 1 568 6
add.u64 %r197,%r211,1;
.loc 1 568 15
cvt.u16.u32 %r583,%r222;
add.u16 %r582,%r583,48;
.loc 1 568 9
cvt.u32.u16 %r584,%r582;
st.u8 [%r211],%r584;
.loc 1 569 7
setp.ne.u32 %r585,%r279,1;
@ %r585 bra $L79;
$L84:
.loc 1 571 12
add.f64 %r116,%r111,%r111;
.loc 1 578 5
add.u32 %r318,%r318,1;
.loc 1 572 17
setp.gt.f64 %r586,%r116,%r221;
@ %r586 bra $L174;
.loc 1 572 29
setp.neu.f64 %r587,%r116,%r221;
@ %r587 bra $L175;
.loc 1 572 51
and.b32 %r588,%r222,1;
.loc 1 572 45
setp.ne.u32 %r589,%r588,0;
@ %r589 bra $L176;
mov.u64 %r330,%r211;
mov.u64 %r211,%r197;
bra $L65;
$L82:
.loc 1 576 10
setp.ne.u64 %r590,%r330,%r197;
@ %r590 bra $L80;
.loc 1 854 14
add.u32 %r318,%r318,1;
.loc 1 580 4
mov.u32 %r317,49;
bra $L81;
$L66:
.loc 1 578 5
add.u32 %r318,%r216,1;
mov.u64 %r330,%r425;
bra $L80;
$L174:
.loc 1 574 3
mov.u64 %r330,%r211;
bra $L80;
$L176:
mov.u64 %r330,%r211;
$L72:
$L80:
mov.u64 %r211,%r197;
.loc 1 575 11
add.u64 %r197,%r197,-1;
.loc 1 575 12
ld.s8 %r118,[%r197];
.loc 1 575 11
cvt.u16.u32 %r591,%r118;
setp.eq.u16 %r592,%r591,57;
@ %r592 bra $L82;
.loc 1 582 5
add.u16 %r594,%r591,1;
cvt.u32.u16 %r596,%r594;
cvt.s32.s8 %r317,%r596;
$L81:
cvt.u32.u32 %r597,%r317;
st.u8 [%r197],%r597;
bra $L65;
$L79:
mov.u64 %r270,%r197;
add.u32 %r598,%r59,-2;
cvt.u64.u32 %r599,%r598;
add.u64 %r600,%r211,2;
add.u64 %r262,%r599,%r600;
$L85:
mov.u64 %r252,%r270;
.loc 1 586 14
mul.f64 %r119,%r111,0d4024000000000000;
.loc 1 586 7
setp.neu.f64 %r601,%r119,0d0000000000000000;
@ %r601 bra $L83;
.loc 1 854 14
add.u32 %r318,%r318,1;
mov.u64 %r330,%r211;
mov.u64 %r211,%r270;
bra $L65;
$L83:
.loc 1 558 12
div.rn.f64 %r602,%r119,%r221;
.loc 1 558 6
cvt.rzi.s32.f64 %r222,%r602;
.loc 1 559 13
cvt.rn.f64.s32 %r603,%r222;
.loc 1 559 8
neg.f64 %r604,%r603;
fma.rn.f64 %r111,%r604,%r221,%r119;
add.u64 %r270,%r270,1;
mov.u64 %r197,%r270;
.loc 1 568 15
cvt.u16.u32 %r607,%r222;
add.u16 %r606,%r607,48;
.loc 1 568 9
cvt.u32.u16 %r608,%r606;
st.u8 [%r252],%r608;
.loc 1 569 7
setp.eq.u64 %r609,%r262,%r270;
@ ! %r609 bra $L85;
bra $L84;
$L77:
.loc 1 595 6
setp.eq.u32 %r961,%r251,0;
@ %r961 bra $L177;
$L266:
.loc 1 597 10
setp.gt.s32 %r611,%r333,1;
@ %r611 bra $L87;
.loc 1 601 45
setp.eq.u32 %r612,%r191,0;
@ %r612 bra $L88;
add.u32 %r226,%r103,1075;
.loc 1 627 10
add.u32 %r188,%r188,%r226;
mov.u32 %r187,%r175;
.loc 1 592 6
mov.u32 %r186,%r174;
add.u32 %r174,%r174,%r226;
bra $L89;
$L88:
.loc 1 601 45
mov.u32 %r613,54;
ld.u32 %r614,[%frame+4];
sub.u32 %r225,%r613,%r614;
.loc 1 627 10
add.u32 %r188,%r188,%r225;
mov.u32 %r187,%r175;
.loc 1 592 6
mov.u32 %r186,%r174;
.loc 1 627 10
add.u32 %r174,%r174,%r225;
bra $L89;
$L87:
.loc 1 611 6
add.u32 %r223,%r279,-1;
.loc 1 612 7
setp.lt.s32 %r615,%r175,%r223;
@ %r615 bra $L90;
.loc 1 613 9
sub.u32 %r187,%r175,%r223;
bra $L91;
$L90:
.loc 1 616 16
sub.u32 %r616,%r223,%r175;
.loc 1 616 11
add.u32 %r182,%r182,%r616;
mov.u32 %r175,%r223;
.loc 1 618 11
mov.u32 %r187,0;
$L91:
.loc 1 620 7
setp.lt.s32 %r617,%r279,0;
@ %r617 bra $L92;
.loc 1 627 10
add.u32 %r188,%r188,%r279;
.loc 1 592 6
mov.u32 %r186,%r174;
.loc 1 627 10
add.u32 %r174,%r174,%r279;
bra $L89;
$L92:
.loc 1 622 11
sub.u32 %r186,%r174,%r279;
$L89:
.loc 1 628 13
mov.u32 %r619,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r619;
call (%value_in),__i2b,(%out_arg1,%out_arg2);
ld.param.u64 %r620,[%value_in];
}
mov.u64 %r194,%r620;
bra $L86;
$L177:
mov.u32 %r187,%r175;
.loc 1 592 6
mov.u32 %r186,%r174;
.loc 1 594 7
mov.u64 %r194,0;
$L86:
.loc 1 630 10
set.u32.gt.s32 %r622,%r186,0;
neg.s32 %r623,%r622;
.loc 1 630 20
set.u32.gt.s32 %r625,%r188,0;
neg.s32 %r626,%r625;
.loc 1 630 14
cvt.u16.u32 %r628,%r623;
cvt.u16.u32 %r629,%r626;
and.b16 %r627,%r628,%r629;
.loc 1 630 6
cvt.u32.u16 %r630,%r627;
cvt.u16.u8 %r631,%r630;
setp.eq.u16 %r632,%r631,0;
@ %r632 bra $L93;
.loc 1 632 9
min.s32 %r227,%r186,%r188;
.loc 1 633 10
sub.u32 %r174,%r174,%r227;
.loc 1 634 10
sub.u32 %r186,%r186,%r227;
.loc 1 635 10
sub.u32 %r188,%r188,%r227;
$L93:
.loc 1 637 6
setp.eq.u32 %r633,%r175,0;
@ %r633 bra $L94;
.loc 1 639 10
@ %r961 bra $L95;
.loc 1 641 7
setp.le.s32 %r635,%r187,0;
@ %r635 bra $L96;
.loc 1 643 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r187;
call (%value_in),__pow5mult,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r639,[%value_in];
}
mov.u64 %r194,%r639;
.loc 1 644 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r368;
call (%value_in),__multiply,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r643,[%value_in];
}
.loc 1 645 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r368;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 646 10
mov.u64 %r192,%r643;
$L96:
.loc 1 648 17
sub.u32 %r229,%r175,%r187;
.loc 1 648 13
setp.eq.u32 %r646,%r175,%r187;
@ %r646 bra $L94;
.loc 1 649 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r229;
call (%value_in),__pow5mult,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r650,[%value_in];
}
mov.u64 %r192,%r650;
bra $L94;
$L95:
.loc 1 652 6
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r368;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r175;
call (%value_in),__pow5mult,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r654,[%value_in];
}
mov.u64 %r192,%r654;
$L94:
.loc 1 654 7
mov.u32 %r656,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r656;
call (%value_in),__i2b,(%out_arg1,%out_arg2);
ld.param.u64 %r657,[%value_in];
}
mov.u64 %r265,%r657;
.loc 1 655 6
setp.le.s32 %r658,%r182,0;
@ %r658 bra $L97;
.loc 1 656 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r182;
call (%value_in),__pow5mult,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r662,[%value_in];
}
mov.u64 %r265,%r662;
.loc 1 661 6
setp.le.s32 %r663,%r333,1;
@ %r663 bra $L98;
.loc 1 660 13
mov.u32 %r189,0;
bra $L99;
$L97:
.loc 1 661 6
setp.gt.s32 %r664,%r333,1;
@ %r664 bra $L178;
.loc 1 663 22
and.b64 %r665,%r327,4503599627370495;
.loc 1 663 10
setp.ne.u64 %r666,%r665,0;
@ %r666 bra $L179;
.loc 1 665 7
shr.u64 %r667,%r327,32;
.loc 1 665 17
cvt.u32.u64 %r669,%r667;
and.b32 %r668,%r669,2146435072;
.loc 1 665 4
setp.eq.u32 %r670,%r668,0;
@ %r670 bra $L180;
$L157:
.loc 1 670 7
add.u32 %r174,%r174,1;
.loc 1 671 7
add.u32 %r188,%r188,1;
.loc 1 672 14
mov.u32 %r189,1;
bra $L100;
$L178:
.loc 1 660 13
mov.u32 %r189,0;
bra $L100;
$L179:
mov.u32 %r189,0;
bra $L100;
$L180:
cvt.u32.u64 %r189,%r665;
$L100:
.loc 1 685 53
setp.eq.u32 %r671,%r182,0;
@ %r671 bra $L181;
$L99:
.loc 1 685 47
ld.u32 %r674,[%r265+20];
add.u32 %r673,%r674,-1;
.loc 1 685 24
cvt.s64.s32 %r675,%r673;
add.u64 %r676,%r675,4;
shl.b64 %r677,%r676,2;
add.u64 %r678,%r265,%r677;
ld.u32 %r672,[%r678+8];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r672;
call (%value_in),__hi0bits,(%out_arg1);
ld.param.u32 %r680,[%value_in];
}
.loc 1 685 53
mov.u32 %r681,32;
sub.u32 %r204,%r681,%r680;
bra $L101;
$L181:
mov.u32 %r204,1;
$L101:
.loc 1 685 58
add.u32 %r682,%r204,%r188;
.loc 1 685 10
and.b32 %r230,%r682,31;
.loc 1 685 6
setp.eq.u32 %r683,%r230,0;
@ %r683 bra $L182;
.loc 1 686 7
mov.u32 %r684,32;
sub.u32 %r231,%r684,%r230;
.loc 1 691 6
setp.le.s32 %r685,%r231,4;
@ %r685 bra $L103;
.loc 1 693 9
mov.u32 %r686,28;
sub.u32 %r232,%r686,%r230;
.loc 1 694 10
add.u32 %r174,%r174,%r232;
.loc 1 695 10
add.u32 %r186,%r186,%r232;
.loc 1 696 10
add.u32 %r188,%r188,%r232;
bra $L104;
$L103:
.loc 1 698 11
setp.eq.u32 %r687,%r231,4;
@ %r687 bra $L104;
.loc 1 700 9
mov.u32 %r688,60;
sub.u32 %r310,%r688,%r230;
bra $L102;
$L182:
mov.u32 %r310,28;
$L102:
.loc 1 701 10
add.u32 %r174,%r174,%r310;
.loc 1 702 10
add.u32 %r186,%r186,%r310;
.loc 1 703 10
add.u32 %r188,%r188,%r310;
$L104:
.loc 1 705 6
setp.le.s32 %r689,%r174,0;
@ %r689 bra $L105;
.loc 1 706 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r174;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r693,[%value_in];
}
mov.u64 %r192,%r693;
$L105:
.loc 1 707 6
setp.le.s32 %r694,%r188,0;
@ %r694 bra $L106;
.loc 1 708 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r188;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r698,[%value_in];
}
mov.u64 %r265,%r698;
$L106:
.loc 1 720 25
set.u32.gt.s32 %r700,%r333,2;
neg.s32 %r701,%r700;
cvt.u32.u32 %r699,%r701;
cvt.u32.u8 %r320,%r699;
.loc 1 709 6
setp.eq.u32 %r702,%r185,0;
@ %r702 bra $L107;
.loc 1 711 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r705,[%value_in];
}
.loc 1 711 10
setp.ge.s32 %r706,%r705,0;
@ %r706 bra $L107;
.loc 1 713 5
add.u32 %r233,%r318,-1;
.loc 1 714 8
mov.u32 %r710,0;
mov.u32 %r709,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r709;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r710;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r711,[%value_in];
}
mov.u64 %r192,%r711;
.loc 1 720 12
set.u32.le.s32 %r713,%r280,0;
neg.s32 %r714,%r713;
.loc 1 720 17
cvt.u16.u32 %r716,%r714;
cvt.u16.u32 %r717,%r320;
and.b16 %r715,%r716,%r717;
cvt.u32.u16 %r718,%r715;
cvt.u32.u8 %r312,%r718;
.loc 1 715 7
@ %r961 bra $L108;
.loc 1 716 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r709;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r710;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r724,[%value_in];
}
mov.u64 %r194,%r724;
.loc 1 720 6
setp.ne.u32 %r725,%r312,0;
@ %r725 bra $L183;
.loc 1 713 5
mov.u32 %r318,%r233;
.loc 1 720 6
mov.u32 %r279,%r280;
bra $L110;
$L107:
.loc 1 720 12
set.u32.le.s32 %r727,%r279,0;
neg.s32 %r728,%r727;
.loc 1 720 17
cvt.u16.u32 %r730,%r728;
cvt.u16.u32 %r731,%r320;
and.b16 %r729,%r730,%r731;
.loc 1 720 6
cvt.u32.u16 %r732,%r729;
cvt.u16.u8 %r733,%r732;
setp.eq.u16 %r734,%r733,0;
@ ! %r734 bra $L109;
bra $L111;
$L183:
.loc 1 713 5
mov.u32 %r318,%r233;
.loc 1 720 6
mov.u32 %r279,%r280;
bra $L109;
$L189:
.loc 1 713 5
mov.u32 %r318,%r233;
.loc 1 720 6
mov.u32 %r279,%r280;
$L109:
.loc 1 722 10
setp.ne.u32 %r735,%r279,0;
@ %r735 bra $L61;
.loc 1 722 35
mov.u32 %r738,5;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r738;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r279;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r740,[%value_in];
}
mov.u64 %r265,%r740;
.loc 1 722 23
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r743,[%value_in];
}
.loc 1 722 20
setp.gt.s32 %r744,%r743,0;
@ %r744 bra $L60;
bra $L61;
$L171:
.loc 1 480 6
mov.u64 %r265,0;
.loc 1 480 12
mov.u64 %r194,%r265;
bra $L61;
$L172:
.loc 1 551 6
mov.u64 %r265,0;
.loc 1 551 12
mov.u64 %r194,%r265;
bra $L61;
$L173:
.loc 1 551 6
mov.u64 %r265,0;
.loc 1 551 12
mov.u64 %r194,%r265;
$L61:
.loc 1 726 6
not.b32 %r242,%r334;
.loc 1 727 4
mov.u64 %r330,%r211;
bra $L112;
$L170:
.loc 1 480 6
mov.u64 %r265,0;
.loc 1 480 12
mov.u64 %r194,%r265;
$L60:
.loc 1 730 12
mov.u32 %r745,49;
st.u8 [%r211],%r745;
.loc 1 731 8
add.u32 %r242,%r318,1;
.loc 1 732 7
mov.u64 %r330,%r211;
.loc 1 730 9
add.u64 %r211,%r211,1;
.loc 1 732 7
bra $L112;
$L111:
.loc 1 734 6
@ %r961 bra $L113;
$L110:
.loc 1 736 10
setp.le.s32 %r747,%r186,0;
@ %r747 bra $L114;
.loc 1 737 8
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r186;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r751,[%value_in];
}
mov.u64 %r194,%r751;
$L114:
.loc 1 744 10
setp.eq.u32 %r752,%r189,0;
@ %r752 bra $L184;
.loc 1 746 10
ld.u32 %r755,[%r194+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r755;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r756,[%value_in];
}
setp.ne.u64 %r757,%r756,0;
@ %r757 bra $L116;
cvta.const.u64 %r761,$LC3;
mov.u32 %r759,746;
cvta.const.u64 %r758,$LC4;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r758;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r759;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r756;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r761;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L116:
.loc 1 747 4
ld.s32 %r765,[%r194+20];
add.u64 %r766,%r765,2;
shl.b64 %r767,%r766,2;
add.u64 %r768,%r194,16;
add.u64 %r769,%r756,16;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r769;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r768;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r767;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r770,[%value_in];
}
.loc 1 748 10
mov.u32 %r773,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r756;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r773;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r774,[%value_in];
}
mov.u64 %r195,%r774;
bra $L115;
$L184:
mov.u64 %r195,%r194;
$L115:
mov.u64 %r250,%r211;
add.u32 %r775,%r279,-1;
cvt.u64.u32 %r776,%r775;
add.u64 %r206,%r776,%r211;
.loc 1 762 40
cvt.u32.u64 %r965,%r327;
and.b32 %r966,%r965,1;
$L132:
.loc 1 753 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call (%value_in),quorem,(%out_arg1,%out_arg2);
ld.param.u32 %r779,[%value_in];
}
.loc 1 753 8
add.u32 %r176,%r779,48;
.loc 1 757 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r782,[%value_in];
}
.loc 1 758 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r195;
call (%value_in),__mdiff,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r786,[%value_in];
}
.loc 1 759 26
ld.u32 %r787,[%r786+16];
setp.ne.u32 %r788,%r787,0;
@ %r788 bra $L117;
.loc 1 759 28
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r786;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r791,[%value_in];
}
mov.u32 %r237,%r791;
.loc 1 760 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r786;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 762 16
or.b32 %r796,%r791,%r333;
.loc 1 762 25
or.b32 %r797,%r966,%r796;
setp.ne.u32 %r798,%r797,0;
@ %r798 bra $L118;
.loc 1 768 10
add.u64 %r200,%r250,1;
.loc 1 854 14
add.u32 %r318,%r318,1;
.loc 1 764 11
setp.eq.u32 %r799,%r176,57;
@ %r799 bra $L119;
.loc 1 766 11
setp.le.s32 %r800,%r782,0;
@ %r800 bra $L120;
.loc 1 767 6
add.u32 %r176,%r779,49;
$L120:
.loc 1 768 13
st.u8 [%r250],%r176;
.loc 1 769 8
mov.u64 %r193,%r194;
mov.u64 %r194,%r195;
bra $L121;
$L118:
add.u64 %r200,%r250,1;
.loc 1 772 13
setp.lt.s32 %r801,%r782,0;
@ %r801 bra $L122;
.loc 1 772 35
or.b32 %r804,%r782,%r333;
.loc 1 774 8
or.b32 %r805,%r966,%r804;
setp.ne.u32 %r806,%r805,0;
@ %r806 bra $L123;
$L122:
.loc 1 854 14
add.u32 %r318,%r318,1;
.loc 1 778 11
setp.le.s32 %r807,%r237,0;
@ %r807 bra $L124;
.loc 1 780 9
mov.u32 %r810,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r810;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r811,[%value_in];
}
mov.u64 %r192,%r811;
.loc 1 781 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r814,[%value_in];
}
.loc 1 782 21
setp.gt.s32 %r815,%r814,0;
@ %r815 bra $L125;
.loc 1 782 32
setp.ne.u32 %r816,%r814,0;
@ %r816 bra $L124;
.loc 1 782 54
and.b32 %r817,%r176,1;
.loc 1 782 46
setp.eq.u32 %r818,%r817,0;
@ %r818 bra $L124;
$L125:
.loc 1 783 9
setp.eq.u32 %r819,%r176,57;
@ %r819 bra $L119;
.loc 1 783 15
add.u32 %r176,%r779,49;
$L124:
.loc 1 786 13
st.u8 [%r250],%r176;
.loc 1 787 8
mov.u64 %r193,%r194;
mov.u64 %r194,%r195;
bra $L121;
$L123:
.loc 1 789 7
setp.le.s32 %r820,%r237,0;
@ %r820 bra $L126;
.loc 1 854 14
add.u32 %r318,%r318,1;
.loc 1 791 11
setp.ne.u32 %r821,%r176,57;
@ %r821 bra $L127;
$L119:
.loc 1 794 10
mov.u32 %r822,57;
st.u8 [%r250],%r822;
.loc 1 795 5
mov.u64 %r193,%r194;
mov.u64 %r194,%r195;
mov.u32 %r314,57;
bra $L128;
$L127:
.loc 1 797 19
cvt.u16.u32 %r825,%r176;
add.u16 %r824,%r825,1;
.loc 1 797 13
cvt.u32.u16 %r826,%r824;
st.u8 [%r250],%r826;
.loc 1 798 8
mov.u64 %r193,%r194;
mov.u64 %r194,%r195;
bra $L121;
$L126:
.loc 1 800 9
st.u8 [%r250],%r176;
.loc 1 801 7
setp.eq.u64 %r827,%r206,%r250;
@ %r827 bra $L129;
.loc 1 803 8
mov.u32 %r831,0;
mov.u32 %r830,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r830;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r831;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r832,[%value_in];
}
mov.u64 %r192,%r832;
.loc 1 804 7
setp.ne.u64 %r833,%r194,%r195;
@ %r833 bra $L130;
.loc 1 805 18
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r830;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r831;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r838,[%value_in];
}
mov.u64 %r194,%r838;
mov.u64 %r195,%r194;
bra $L131;
$L130:
.loc 1 808 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r830;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r831;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r843,[%value_in];
}
mov.u64 %r194,%r843;
.loc 1 809 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r195;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r830;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r831;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r848,[%value_in];
}
mov.u64 %r195,%r848;
$L131:
.loc 1 753 8
mov.u64 %r250,%r200;
bra $L132;
$L113:
.loc 1 854 14
add.u32 %r318,%r318,1;
$L146:
.loc 1 720 6
mov.u64 %r190,0;
$L137:
.loc 1 816 15
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call (%value_in),quorem,(%out_arg1,%out_arg2);
ld.param.u32 %r851,[%value_in];
}
.loc 1 816 13
add.u32 %r176,%r851,48;
.loc 1 816 7
add.u64 %r852,%r211,%r190;
st.u8 [%r852],%r176;
.loc 1 817 5
add.u64 %r190,%r190,1;
cvt.u32.u64 %r853,%r190;
setp.gt.s32 %r854,%r279,%r853;
@ %r854 bra $L133;
.loc 1 816 4
setp.le.s32 %r856,%r279,0;
@ %r856 bra $L134;
add.u32 %r857,%r279,-1;
cvt.u64.u32 %r858,%r857;
add.u64 %r855,%r858,1;
bra $L135;
$L134:
mov.u64 %r855,1;
$L135:
add.u64 %r200,%r211,%r855;
.loc 1 594 13
mov.u64 %r193,0;
bra $L136;
$L133:
.loc 1 819 6
mov.u32 %r862,0;
mov.u32 %r861,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r861;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r862;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r863,[%value_in];
}
mov.u64 %r192,%r863;
.loc 1 816 7
bra $L137;
$L129:
.loc 1 854 14
add.u32 %r318,%r318,1;
mov.u64 %r193,%r194;
mov.u64 %r194,%r195;
$L136:
.loc 1 824 7
mov.u32 %r866,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r866;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r867,[%value_in];
}
mov.u64 %r192,%r867;
.loc 1 825 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r870,[%value_in];
}
.loc 1 826 6
setp.gt.s32 %r871,%r870,0;
@ %r871 bra $L138;
.loc 1 840 14
ld.s8 %r314,[%r200+-1];
.loc 1 826 15
setp.ne.u32 %r872,%r870,0;
@ %r872 bra $L139;
.loc 1 826 36
and.b32 %r873,%r176,1;
.loc 1 826 28
setp.ne.u32 %r874,%r873,0;
@ %r874 bra $L128;
bra $L139;
$L142:
.loc 1 830 5
add.u64 %r261,%r261,-1;
setp.eq.u64 %r875,%r960,%r211;
@ %r875 bra $L140;
.loc 1 829 14
ld.s8 %r314,[%r261];
mov.u64 %r200,%r960;
add.u64 %r960,%r960,-1;
bra $L141;
$L140:
.loc 1 833 11
mov.u32 %r876,49;
st.u8 [%r211],%r876;
.loc 1 854 14
add.u32 %r318,%r318,1;
.loc 1 834 6
bra $L121;
$L138:
.loc 1 829 14
ld.s8 %r314,[%r200+-1];
$L128:
add.u64 %r960,%r200,-1;
mov.u64 %r261,%r960;
$L141:
.loc 1 829 13
cvt.u16.u32 %r877,%r314;
setp.eq.u16 %r878,%r877,57;
@ %r878 bra $L142;
.loc 1 836 7
add.u16 %r880,%r877,1;
cvt.u32.u16 %r882,%r880;
st.u8 [%r960],%r882;
bra $L121;
$L139:
add.u64 %r258,%r200,-1;
$L143:
add.u64 %r200,%r258,1;
.loc 1 840 13
add.u64 %r258,%r258,-1;
cvt.u16.u32 %r883,%r314;
setp.ne.u16 %r884,%r883,48;
@ %r884 bra $L121;
.loc 1 840 14
ld.s8 %r314,[%r258];
bra $L143;
$L121:
.loc 1 844 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 845 6
setp.eq.u64 %r887,%r194,0;
@ %r887 bra $L185;
.loc 1 847 11
set.u32.ne.u64 %r889,%r193,0;
neg.s32 %r890,%r889;
.loc 1 847 22
set.u32.ne.u64 %r892,%r193,%r194;
neg.s32 %r893,%r892;
.loc 1 847 15
cvt.u16.u32 %r895,%r890;
cvt.u16.u32 %r896,%r893;
and.b16 %r894,%r895,%r896;
.loc 1 847 10
cvt.u32.u16 %r897,%r894;
cvt.u16.u8 %r898,%r897;
setp.eq.u16 %r899,%r898,0;
@ %r899 bra $L186;
.loc 1 848 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r193;
call _Bfree,(%out_arg1,%out_arg2);
}
mov.u64 %r330,%r211;
mov.u64 %r211,%r200;
bra $L144;
$L186:
mov.u64 %r330,%r211;
mov.u64 %r211,%r200;
$L144:
.loc 1 849 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r194;
call _Bfree,(%out_arg1,%out_arg2);
}
bra $L65;
$L175:
mov.u64 %r330,%r211;
mov.u64 %r211,%r197;
bra $L65;
$L185:
.loc 1 851 1
mov.u64 %r330,%r211;
mov.u64 %r211,%r200;
$L65:
.loc 1 852 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r192;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 853 6
mov.u32 %r906,0;
st.u8 [%r211],%r906;
.loc 1 854 10
st.u32 [%r335],%r318;
.loc 1 855 6
setp.eq.u64 %r907,%r337,0;
@ %r907 bra $L18;
.loc 1 856 10
st.u64 [%r337],%r211;
bra $L18;
$L158:
.loc 1 284 14
cvta.const.u64 %r330,$LC2;
bra $L18;
$L23:
.loc 1 266 10
setp.ne.u64 %r909,%r337,0;
@ %r909 bra $L187;
.loc 1 263 52
cvta.const.u64 %r330,$LC0;
bra $L18;
$L260:
.loc 1 266 10
setp.ne.u64 %r910,%r337,0;
@ %r910 bra $L188;
.loc 1 263 52
cvta.const.u64 %r330,$LC1;
bra $L18;
$L112:
.loc 1 844 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 854 14
add.u32 %r318,%r242,1;
.loc 1 845 6
setp.ne.u64 %r913,%r194,0;
@ %r913 bra $L144;
bra $L65;
$L108:
.loc 1 720 6
setp.ne.u32 %r914,%r312,0;
@ %r914 bra $L189;
mov.u32 %r279,%r280;
bra $L146;
$L57:
.loc 1 476 20
cvt.rn.f64.s32 %r915,%r179;
.loc 1 476 26
fma.rn.f64 %r293,%r98,%r915,0d401c000000000000;
.loc 1 476 13
mov.b64 %r329,%r293;
.loc 1 477 19
shr.u64 %r917,%r329,32;
cvt.u32.u64 %r919,%r917;
add.u32 %r918,%r919,-54525952;
cvt.u64.u32 %r920,%r918;
shl.b64 %r921,%r920,32;
and.b64 %r922,%r329,4294967295;
or.b64 %r329,%r922,%r921;
bra $L147;
$L117:
.loc 1 760 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r786;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 759 26
mov.u32 %r237,1;
bra $L118;
$L161:
.loc 1 389 13
mov.u32 %r181,1;
.loc 1 388 10
mov.u32 %r333,0;
.loc 1 395 13
mov.u32 %r251,%r181;
.loc 1 396 8
mov.u32 %r279,-1;
.loc 1 402 15
mov.u32 %r334,%r333;
bra $L39;
$L163:
.loc 1 409 10
mov.u32 %r334,1;
mov.u32 %r279,%r334;
$L39:
.loc 1 423 32
mov.u32 %r926,0;
st.u32 [%r331+104],%r926;
mov.u32 %r280,%r279;
mov.u32 %r56,%r926;
bra $L42;
$L265:
mov.u32 %r927,0;
st.u32 [%r331+104],%r927;
.loc 1 426 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r331;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r927;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r930,[%value_in];
}
mov.u64 %r211,%r930;
setp.eq.u64 %r931,%r211,0;
@ ! %r931 bra $L264;
bra $L148;
$L162:
.loc 1 389 13
mov.u32 %r181,1;
$L40:
.loc 1 397 3
setp.eq.u32 %r932,%r333,4;
@ %r932 bra $L190;
setp.eq.u32 %r933,%r333,5;
@ %r933 bra $L191;
setp.eq.u32 %r934,%r333,2;
@ %r934 bra $L192;
setp.eq.u32 %r935,%r333,3;
@ %r935 bra $L193;
bra $L265;
$L261:
.loc 1 365 6
setp.ge.s32 %r936,%r188,0;
@ %r936 bra $L194;
.loc 1 362 15
mov.u32 %r185,0;
bra $L154;
$L98:
.loc 1 663 22
and.b64 %r937,%r327,4503599627370495;
.loc 1 663 10
setp.eq.u64 %r938,%r937,0;
@ %r938 bra $L155;
.loc 1 660 13
mov.u32 %r189,0;
bra $L99;
$L264:
.loc 1 426 25
st.u64 [%r331+96],%r211;
.loc 1 545 10
ld.u32 %r103,[%frame];
.loc 1 545 15
set.u32.le.s32 %r940,%r318,14;
neg.s32 %r941,%r940;
.loc 1 545 6
not.b32 %r943,%r103;
shr.u32 %r944,%r943,31;
.loc 1 545 15
cvt.u16.u32 %r947,%r941;
cvt.u16.u32 %r948,%r944;
and.b16 %r946,%r947,%r948;
cvt.u32.u16 %r949,%r946;
cvt.u16.u8 %r950,%r949;
setp.ne.u16 %r951,%r950,0;
@ %r951 bra $L156;
.loc 1 396 16
mov.u32 %r280,-1;
.loc 1 402 15
mov.u32 %r334,%r927;
.loc 1 396 8
mov.u32 %r279,%r280;
setp.eq.u32 %r961,1,0;
bra $L266;
$L155:
.loc 1 665 7
shr.u64 %r952,%r327,32;
.loc 1 665 17
cvt.u32.u64 %r954,%r952;
and.b32 %r953,%r954,2146435072;
.loc 1 665 4
setp.ne.u32 %r955,%r953,0;
@ %r955 bra $L157;
.loc 1 660 13
cvt.u32.u64 %r189,%r937;
bra $L99;
$L156:
.loc 1 548 10
cvta.const.u64 %r956,__mprec_tens;
cvt.s64.s32 %r957,%r318;
shl.b64 %r958,%r957,3;
add.u64 %r959,%r956,%r958;
ld.f64 %r221,[%r959];
.loc 1 429 17
mov.u32 %r59,-1;
.loc 1 396 8
mov.u32 %r279,%r59;
bra $L78;
$L18:
.loc 1 858 1
mov.u64 %value,%r330;
st.param.u64 [%value_out],%value;
ret;
}

/264            1612277261  0     0     100666  2131      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __dtoa
.visible .func (.param .u64 %value_out) __dtoa (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5);
.file 1 "../../../../../newlib/libc/stdlib/dtoastub.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.extern .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DEF: __dtoa
.visible .func (.param .u64 %value_out) __dtoa (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5)
{
.reg .u64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.reg .f64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r37;
.reg .u64 %r38;
mov.f64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
mov.u64 %r28,%ar4;
mov.u64 %r29,%ar5;
.loc 1 18 10
ld.global.u64 %r37,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r28;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r29;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r38,[%value_in];
}
.loc 1 19 1
mov.u64 %value,%r38;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-dummy.o/  1612277261  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-ecvtbuf.o/1612277261  0     0     100666  33647     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: print_e
.func print_e (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .f64 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5);
.file 1 "../../../../../newlib/libc/stdlib/ecvtbuf.c"
// BEGIN GLOBAL FUNCTION DECL: fcvtbuf
.visible .func (.param .u64 %value_out) fcvtbuf (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: ecvtbuf
.visible .func (.param .u64 %value_out) ecvtbuf (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _gcvt
.visible .func (.param .u64 %value_out) _gcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5);
// BEGIN GLOBAL FUNCTION DECL: _dcvt
.visible .func (.param .u64 %value_out) _dcvt (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .f64 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5, .param .u32 %in_ar6);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.extern .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _realloc_r
.extern .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _mprec_log10
.extern .func (.param .f64 %value_out) _mprec_log10 (.param .u32 %in_ar0);
// BEGIN FUNCTION DEF: print_e
.func print_e (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .f64 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .f64 %ar2;
ld.param.f64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u32 %ar4;
ld.param.u32 %ar4,[%in_ar4];
.reg .u32 %ar5;
ld.param.u32 %ar5,[%in_ar5];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u32 %r25;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u64 %r50;
.reg .u32 %r52;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .f64 %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .u32 %r63;
.reg .u32 %r66;
.reg .u64 %r71;
.reg .u64 %r72;
.reg .u32 %r73;
.reg .u64 %r74;
.reg .pred %r75;
.reg .u64 %r78;
.reg .u32 %r79;
.reg .pred %r80;
.reg .u32 %r81;
.reg .u16 %r83;
.reg .u32 %r84;
.reg .u32 %r85;
.reg .u32 %r87;
.reg .u32 %r88;
.reg .u16 %r89;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u32 %r92;
.reg .u16 %r93;
.reg .pred %r94;
.reg .u16 %r95;
.reg .pred %r96;
.reg .pred %r98;
.reg .pred %r99;
.reg .pred %r100;
.reg .u32 %r101;
.reg .u32 %r102;
.reg .pred %r103;
.reg .u32 %r104;
.reg .pred %r105;
.reg .u32 %r106;
.reg .u32 %r107;
.reg .u32 %r108;
.reg .pred %r109;
.reg .u16 %r111;
.reg .u16 %r112;
.reg .u32 %r113;
.reg .u16 %r116;
.reg .u16 %r117;
.reg .u32 %r118;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u32 %r122;
.reg .u32 %r124;
.reg .u16 %r126;
.reg .u16 %r127;
.reg .u32 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u16 %r131;
.reg .u32 %r132;
.reg .pred %r133;
.reg .u64 %r134;
mov.u64 %r58,%ar0;
mov.u64 %r59,%ar1;
mov.f64 %r60,%ar2;
mov.u32 %r61,%ar3;
mov.u32 %r62,%ar4;
mov.u32 %r63,%ar5;
.loc 1 143 7
add.u64 %r71,%frame,12;
add.u64 %r72,%frame,8;
add.u32 %r73,%r61,1;
mov.u32 %r66,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r58;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r60;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r66;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r73;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r72;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r71;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r74,[%value_in];
}
.loc 1 145 13
ld.u32 %r23,[%frame+8];
.loc 1 145 6
setp.ne.u32 %r75,%r23,9999;
@ %r75 bra $L2;
.loc 1 147 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r59;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r74;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r78,[%value_in];
}
bra $L1;
$L2:
.loc 1 151 14
add.u64 %r44,%r74,1;
.loc 1 151 7
add.u64 %r50,%r59,1;
.loc 1 151 10
ld.u8 %r79,[%r74];
st.u8 [%r59],%r79;
.loc 1 152 6
setp.gt.s32 %r80,%r61,0;
@ %r80 bra $L4;
bra $L5;
$L6:
.loc 1 161 18
add.u64 %r44,%r44,1;
mov.u64 %r57,%r41;
add.u64 %r50,%r41,1;
mov.u64 %r41,%r50;
.loc 1 161 14
cvt.u32.u32 %r81,%r25;
st.u8 [%r57],%r81;
.loc 1 162 13
add.u32 %r61,%r61,-1;
.loc 1 155 10
ld.s8 %r25,[%r44];
.loc 1 155 9
cvt.u16.u32 %r83,%r25;
set.u32.ne.u16 %r84,%r83,0;
neg.s32 %r85,%r84;
.loc 1 155 13
set.u32.gt.s32 %r87,%r61,0;
neg.s32 %r88,%r87;
cvt.u16.u32 %r90,%r85;
cvt.u16.u32 %r91,%r88;
and.b16 %r89,%r90,%r91;
cvt.u32.u16 %r92,%r89;
cvt.u16.u8 %r93,%r92;
setp.ne.u16 %r94,%r93,0;
@ %r94 bra $L6;
mov.u32 %r63,0;
$L5:
.loc 1 168 6
cvt.u16.u32 %r95,%r62;
setp.eq.u16 %r96,%r95,103;
@ %r96 bra $L14;
.loc 1 170 11
setp.eq.u16 %r98,%r95,71;
@ %r98 bra $L15;
.loc 1 174 13
setp.le.s32 %r99,%r61,0;
@ %r99 bra $L7;
.loc 1 177 10
add.u64 %r43,%r50,1;
.loc 1 176 8
setp.eq.u32 %r100,%r63,0;
@ %r100 bra $L16;
.loc 1 177 13
mov.u32 %r101,46;
st.u8 [%r50],%r101;
bra $L8;
$L16:
mov.u64 %r43,%r50;
$L8:
mov.u64 %r46,%r43;
cvt.s64.s32 %r40,%r61;
add.u64 %r134,%r46,%r40;
.loc 1 180 11
mov.u32 %r102,48;
$L9:
st.u8 [%r46],%r102;
.loc 1 174 13
add.u64 %r46,%r46,1;
setp.ne.u64 %r103,%r134,%r46;
@ %r103 bra $L9;
.loc 1 180 8
mov.u64 %r50,%r134;
bra $L7;
$L14:
.loc 1 169 10
mov.u32 %r62,101;
bra $L7;
$L15:
.loc 1 171 10
mov.u32 %r62,69;
$L7:
.loc 1 187 10
cvt.u32.u32 %r104,%r62;
st.u8 [%r50],%r104;
.loc 1 188 8
add.u32 %r52,%r23,-1;
.loc 1 191 11
add.u64 %r42,%r50,2;
.loc 1 189 6
setp.ge.s32 %r105,%r52,0;
@ %r105 bra $L10;
.loc 1 191 14
mov.u32 %r106,45;
st.u8 [%r50+1],%r106;
.loc 1 192 15
mov.u32 %r107,1;
sub.u32 %r52,%r107,%r23;
bra $L11;
$L10:
.loc 1 196 14
mov.u32 %r108,43;
st.u8 [%r50+1],%r108;
$L11:
.loc 1 198 6
setp.le.s32 %r109,%r52,99;
@ %r109 bra $L12;
.loc 1 200 11
div.s32 %r47,%r52,100;
.loc 1 201 11
add.u64 %r42,%r50,3;
.loc 1 201 20
cvt.u16.u32 %r112,%r47;
add.u16 %r111,%r112,48;
.loc 1 201 14
cvt.u32.u16 %r113,%r111;
st.u8 [%r50+2],%r113;
.loc 1 202 13
mad.lo.u32 %r52,%r47,-100,%r52;
$L12:
.loc 1 204 7
div.s32 %r48,%r52,10;
.loc 1 205 16
cvt.u16.u32 %r117,%r48;
add.u16 %r116,%r117,48;
.loc 1 205 10
cvt.u32.u16 %r118,%r116;
st.u8 [%r42],%r118;
.loc 1 206 16
shl.b32 %r120,%r48,2;
add.u32 %r121,%r120,%r48;
add.u32 %r122,%r121,%r121;
.loc 1 206 9
sub.u32 %r124,%r52,%r122;
.loc 1 207 18
cvt.u16.u32 %r127,%r124;
add.u16 %r126,%r127,48;
.loc 1 207 10
cvt.u32.u16 %r128,%r126;
st.u8 [%r42+1],%r128;
.loc 1 209 10
mov.u32 %r129,0;
st.u8 [%r42+2],%r129;
bra $L1;
$L13:
.loc 1 158 9
mov.u32 %r130,46;
st.u8 [%r59+1],%r130;
.loc 1 161 16
ld.s8 %r25,[%r74+1];
add.u64 %r41,%r59,2;
bra $L6;
$L4:
.loc 1 155 13
ld.s8 %r132,[%r74+1];
cvt.u16.u32 %r131,%r132;
setp.ne.u16 %r133,%r131,0;
@ %r133 bra $L13;
.loc 1 153 9
mov.u32 %r63,1;
bra $L5;
$L1:
.loc 1 210 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fcvtbuf
.visible .func (.param .u64 %value_out) fcvtbuf (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u32 %r35;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r50;
.reg .f64 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .pred %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .pred %r59;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .pred %r65;
.reg .u32 %r68;
.reg .u64 %r73;
.reg .u32 %r74;
.reg .u64 %r75;
.reg .pred %r76;
.reg .u32 %r77;
.reg .u64 %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .u64 %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u64 %r86;
.reg .u32 %r87;
mov.f64 %r51,%ar0;
mov.u32 %r52,%ar1;
mov.u64 %r53,%ar2;
mov.u64 %r54,%ar3;
mov.u64 %r55,%ar4;
.loc 1 225 18
ld.global.u64 %r31,[_impure_ptr];
.loc 1 231 6
setp.ne.u64 %r56,%r55,0;
@ %r56 bra $L20;
.loc 1 235 53
ld.u64 %r55,[%r31+136];
.loc 1 233 36
add.u32 %r57,%r52,35;
.loc 1 233 10
ld.u32 %r58,[%r31+128];
setp.gt.s32 %r59,%r58,%r57;
@ %r59 bra $L20;
.loc 1 236 20
add.u32 %r24,%r52,36;
.loc 1 235 29
cvt.s64.s32 %r63,%r24;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r55;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r63;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r64,[%value_in];
}
mov.u64 %r55,%r64;
.loc 1 235 7
setp.eq.u64 %r65,%r55,0;
@ %r65 bra $L27;
.loc 1 238 19
st.u32 [%r31+128],%r24;
.loc 1 239 19
st.u64 [%r31+136],%r55;
$L20:
.loc 1 247 7
mov.u32 %r68,3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r51;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r68;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r52;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r53;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r54;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r73,[%value_in];
}
.loc 1 251 8
ld.u32 %r74,[%r53];
neg.s32 %r35,%r74;
.loc 1 252 9
ld.u64 %r75,[%frame];
setp.ge.u64 %r76,%r73,%r75;
@ %r76 bra $L28;
mov.u64 %r45,%r55;
mov.u64 %r46,%r73;
$L24:
mov.u64 %r40,%r45;
add.u64 %r45,%r45,1;
mov.u64 %r39,%r45;
.loc 1 254 19
ld.u8 %r77,[%r46];
st.u8 [%r40],%r77;
.loc 1 255 11
add.u32 %r35,%r35,1;
.loc 1 252 9
add.u64 %r46,%r46,1;
ld.u64 %r78,[%frame];
setp.gt.u64 %r79,%r78,%r46;
@ %r79 bra $L24;
bra $L23;
$L28:
mov.u64 %r39,%r55;
$L23:
.loc 1 258 9
setp.le.s32 %r80,%r52,%r35;
@ %r80 bra $L25;
mov.u64 %r29,%r39;
add.u32 %r81,%r52,-1;
sub.u32 %r82,%r81,%r35;
cvt.u64.u32 %r43,%r82;
add.u64 %r83,%r39,1;
add.u64 %r44,%r83,%r43;
.loc 1 260 19
mov.u32 %r84,48;
$L26:
st.u8 [%r29],%r84;
.loc 1 258 9
add.u64 %r29,%r29,1;
setp.ne.u64 %r85,%r29,%r44;
@ %r85 bra $L26;
.loc 1 260 16
add.u64 %r86,%r43,1;
add.u64 %r39,%r39,%r86;
$L25:
.loc 1 263 15
mov.u32 %r87,0;
st.u8 [%r39],%r87;
.loc 1 264 10
mov.u64 %r50,%r55;
bra $L19;
$L27:
.loc 1 237 13
mov.u64 %r50,%r64;
$L19:
.loc 1 265 1
mov.u64 %value,%r50;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: ecvtbuf
.visible .func (.param .u64 %value_out) ecvtbuf (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u32 %r33;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r48;
.reg .f64 %r49;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .pred %r56;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .pred %r62;
.reg .u32 %r65;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .pred %r72;
.reg .u32 %r73;
.reg .u64 %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u64 %r79;
.reg .u32 %r80;
.reg .pred %r81;
.reg .u64 %r82;
.reg .u32 %r83;
mov.f64 %r49,%ar0;
mov.u32 %r50,%ar1;
mov.u64 %r51,%ar2;
mov.u64 %r52,%ar3;
mov.u64 %r53,%ar4;
.loc 1 274 18
ld.global.u64 %r29,[_impure_ptr];
.loc 1 280 6
setp.ne.u64 %r54,%r53,0;
@ %r54 bra $L32;
.loc 1 284 53
ld.u64 %r53,[%r29+136];
.loc 1 282 10
ld.u32 %r55,[%r29+128];
setp.gt.s32 %r56,%r55,%r50;
@ %r56 bra $L32;
.loc 1 285 20
add.u32 %r23,%r50,1;
.loc 1 284 29
cvt.s64.s32 %r60,%r23;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r53;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r60;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r61,[%value_in];
}
mov.u64 %r53,%r61;
.loc 1 284 7
setp.eq.u64 %r62,%r53,0;
@ %r62 bra $L39;
.loc 1 287 19
st.u32 [%r29+128],%r23;
.loc 1 288 19
st.u64 [%r29+136],%r53;
$L32:
.loc 1 296 7
mov.u32 %r65,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r49;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r65;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r50;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r51;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r52;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r70,[%value_in];
}
.loc 1 300 9
ld.u64 %r71,[%frame];
setp.ge.u64 %r72,%r70,%r71;
@ %r72 bra $L40;
mov.u64 %r43,%r53;
mov.u64 %r44,%r70;
.loc 1 278 7
mov.u32 %r33,0;
$L36:
mov.u64 %r36,%r43;
add.u64 %r43,%r43,1;
mov.u64 %r35,%r43;
.loc 1 302 19
ld.u8 %r73,[%r44];
st.u8 [%r36],%r73;
.loc 1 303 11
add.u32 %r33,%r33,1;
.loc 1 300 9
add.u64 %r44,%r44,1;
ld.u64 %r74,[%frame];
setp.gt.u64 %r75,%r74,%r44;
@ %r75 bra $L36;
bra $L35;
$L40:
mov.u64 %r35,%r53;
.loc 1 278 7
mov.u32 %r33,0;
$L35:
.loc 1 306 9
setp.le.s32 %r76,%r50,%r33;
@ %r76 bra $L37;
mov.u64 %r27,%r35;
add.u32 %r77,%r50,-1;
sub.u32 %r78,%r77,%r33;
cvt.u64.u32 %r41,%r78;
add.u64 %r79,%r35,1;
add.u64 %r42,%r79,%r41;
.loc 1 308 19
mov.u32 %r80,48;
$L38:
st.u8 [%r27],%r80;
.loc 1 306 9
add.u64 %r27,%r27,1;
setp.ne.u64 %r81,%r27,%r42;
@ %r81 bra $L38;
.loc 1 308 16
add.u64 %r82,%r41,1;
add.u64 %r35,%r35,%r82;
$L37:
.loc 1 311 15
mov.u32 %r83,0;
st.u8 [%r35],%r83;
.loc 1 312 10
mov.u64 %r48,%r53;
bra $L31;
$L39:
.loc 1 286 13
mov.u64 %r48,%r61;
$L31:
.loc 1 313 1
mov.u64 %value,%r48;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _gcvt
.visible .func (.param .u64 %value_out) _gcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %ar4;
ld.param.u32 %ar4,[%in_ar4];
.reg .u32 %ar5;
ld.param.u32 %ar5,[%in_ar5];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r29;
.reg .u32 %r33;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r40;
.reg .u64 %r43;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u64 %r62;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r70;
.reg .u64 %r72;
.reg .u64 %r74;
.reg .f64 %r75;
.reg .u32 %r76;
.reg .u64 %r77;
.reg .u32 %r78;
.reg .u32 %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .u32 %r82;
.reg .u32 %r83;
.reg .pred %r84;
.reg .u32 %r91;
.reg .f64 %r93;
.reg .pred %r94;
.reg .u32 %r97;
.reg .u64 %r102;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .pred %r105;
.reg .pred %r106;
.reg .u64 %r109;
.reg .u32 %r110;
.reg .pred %r111;
.reg .pred %r112;
.reg .u32 %r114;
.reg .u32 %r115;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u16 %r119;
.reg .u16 %r120;
.reg .u16 %r121;
.reg .u32 %r122;
.reg .u16 %r123;
.reg .pred %r124;
.reg .u32 %r125;
.reg .u32 %r127;
.reg .u32 %r128;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u16 %r132;
.reg .u16 %r133;
.reg .u16 %r134;
.reg .u32 %r135;
.reg .u16 %r136;
.reg .pred %r137;
.reg .pred %r138;
.reg .u16 %r139;
.reg .u32 %r140;
.reg .pred %r141;
.reg .pred %r142;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .pred %r145;
.reg .u64 %r147;
.reg .u32 %r148;
.reg .pred %r149;
.reg .u64 %r151;
.reg .u32 %r152;
.reg .u16 %r154;
.reg .u32 %r155;
.reg .u32 %r156;
.reg .u32 %r158;
.reg .u32 %r159;
.reg .u16 %r160;
.reg .u16 %r161;
.reg .u16 %r162;
.reg .u32 %r163;
.reg .u16 %r164;
.reg .pred %r165;
.reg .u32 %r166;
.reg .u16 %r168;
.reg .u32 %r169;
.reg .u32 %r170;
.reg .u32 %r172;
.reg .u32 %r173;
.reg .u16 %r174;
.reg .u16 %r175;
.reg .u16 %r176;
.reg .u32 %r177;
.reg .u16 %r178;
.reg .pred %r179;
.reg .pred %r180;
.reg .pred %r181;
.reg .u32 %r182;
.reg .u64 %r183;
.reg .u64 %r184;
.reg .u32 %r185;
.reg .pred %r186;
.reg .u64 %r187;
.reg .u32 %r188;
.reg .u32 %r190;
mov.u64 %r74,%ar0;
mov.f64 %r75,%ar1;
mov.u32 %r76,%ar2;
mov.u64 %r77,%ar3;
mov.u32 %r78,%ar4;
mov.u32 %r79,%ar5;
.loc 1 327 6
setp.lt.f64 %r80,%r75,0d0000000000000000;
@ ! %r80 bra $L44;
.loc 1 329 15
neg.f64 %r75,%r75;
$L44:
.loc 1 332 6
setp.neu.f64 %r81,%r75,0d0000000000000000;
@ %r81 bra $L46;
.loc 1 334 14
mov.u32 %r82,48;
st.u8 [%r77],%r82;
.loc 1 335 12
mov.u32 %r83,0;
st.u8 [%r77+1],%r83;
bra $L47;
$L46:
.loc 1 343 6
setp.le.f64 %r84,%r75,0d3f1a36e2eb1c432d;
@ ! %r84 bra $L82;
$L50:
.loc 1 352 7
add.u32 %r91,%r76,-1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r77;
.param .f64 %out_arg3;
st.param.f64 [%out_arg3],%r75;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r91;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r78;
.param .u32 %out_arg6;
st.param.u32 [%out_arg6],%r79;
call print_e,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
}
bra $L47;
$L82:
.loc 1 343 39
{
.param .f64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r76;
call (%value_in),_mprec_log10,(%out_arg1);
ld.param.f64 %r93,[%value_in];
}
.loc 1 343 25
setp.le.f64 %r94,%r93,%r75;
@ %r94 bra $L50;
.loc 1 364 11
add.u64 %r102,%frame,8;
add.u64 %r103,%frame,12;
mov.u32 %r97,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r75;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r97;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r76;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r103;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r102;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r104,[%value_in];
}
mov.u64 %r40,%r104;
.loc 1 366 17
ld.u32 %r26,[%frame+12];
.loc 1 366 10
setp.eq.u32 %r105,%r26,9999;
@ %r105 bra $L51;
.loc 1 371 14
ld.s8 %r27,[%r40];
.loc 1 371 13
setp.eq.u32 %r106,%r27,0;
@ %r106 bra $L65;
mov.u64 %r72,%r77;
bra $L53;
$L51:
.loc 1 368 4
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r77;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r104;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r109,[%value_in];
}
bra $L47;
$L54:
.loc 1 373 15
add.u64 %r40,%r40,1;
add.u64 %r72,%r72,1;
mov.u64 %r43,%r72;
.loc 1 373 11
cvt.u32.u32 %r110,%r27;
st.u8 [%r38],%r110;
.loc 1 374 9
add.u32 %r26,%r26,-1;
st.u32 [%frame+12],%r26;
.loc 1 375 10
add.u32 %r76,%r76,-1;
.loc 1 371 14
ld.s8 %r27,[%r40];
.loc 1 371 13
setp.eq.u32 %r111,%r27,0;
@ %r111 bra $L52;
$L53:
mov.u64 %r38,%r72;
.loc 1 371 17
setp.gt.s32 %r112,%r26,0;
@ %r112 bra $L54;
bra $L55;
$L65:
.loc 1 371 13
mov.u64 %r43,%r77;
$L52:
.loc 1 378 24
set.u32.gt.s32 %r114,%r76,0;
neg.s32 %r115,%r114;
.loc 1 378 13
set.u32.gt.s32 %r117,%r26,0;
neg.s32 %r118,%r117;
.loc 1 378 24
cvt.u16.u32 %r120,%r115;
cvt.u16.u32 %r121,%r118;
and.b16 %r119,%r120,%r121;
cvt.u32.u16 %r122,%r119;
cvt.u16.u8 %r123,%r122;
setp.eq.u16 %r124,%r123,0;
@ %r124 bra $L66;
add.u32 %r68,%r26,-1;
mov.u64 %r70,%r43;
.loc 1 380 11
mov.u32 %r125,48;
$L56:
mov.u64 %r65,%r70;
add.u64 %r38,%r70,1;
mov.u64 %r70,%r38;
st.u8 [%r65],%r125;
.loc 1 381 9
mov.u32 %r29,%r68;
.loc 1 382 10
add.u32 %r76,%r76,-1;
.loc 1 378 24
add.u32 %r68,%r68,-1;
set.u32.gt.s32 %r127,%r76,0;
neg.s32 %r128,%r127;
.loc 1 378 13
set.u32.gt.s32 %r130,%r29,0;
neg.s32 %r131,%r130;
.loc 1 378 24
cvt.u16.u32 %r133,%r128;
cvt.u16.u32 %r134,%r131;
and.b16 %r132,%r133,%r134;
cvt.u32.u16 %r135,%r132;
cvt.u16.u8 %r136,%r135;
setp.ne.u16 %r137,%r136,0;
@ %r137 bra $L56;
st.u32 [%frame+12],%r29;
bra $L55;
$L66:
mov.u64 %r38,%r43;
$L55:
.loc 1 385 10
setp.ne.u32 %r138,%r79,0;
@ %r138 bra $L57;
.loc 1 385 15
ld.s8 %r140,[%r40];
cvt.u16.u32 %r139,%r140;
setp.eq.u16 %r141,%r139,0;
@ %r141 bra $L58;
$L57:
.loc 1 388 10
add.u64 %r37,%r38,1;
.loc 1 387 7
setp.ne.u64 %r142,%r77,%r38;
@ %r142 bra $L59;
.loc 1 388 13
mov.u32 %r143,48;
st.u8 [%r77],%r143;
.loc 1 388 10
mov.u64 %r38,%r37;
.loc 1 389 8
add.u64 %r37,%r77,2;
$L59:
.loc 1 389 11
mov.u32 %r144,46;
st.u8 [%r38],%r144;
.loc 1 392 17
ld.u32 %r48,[%frame+12];
.loc 1 392 10
setp.ge.s32 %r145,%r48,0;
@ %r145 bra $L60;
mov.u64 %r62,%r37;
neg.s32 %r190,%r48;
cvt.u64.u32 %r147,%r190;
add.u64 %r67,%r147,%r37;
.loc 1 394 15
mov.u32 %r148,48;
$L61:
st.u8 [%r62],%r148;
.loc 1 392 10
add.u64 %r62,%r62,1;
setp.ne.u64 %r149,%r62,%r67;
@ %r149 bra $L61;
.loc 1 394 12
cvt.u64.u32 %r151,%r190;
add.u64 %r37,%r37,%r151;
mov.u32 %r152,0;
st.u32 [%frame+12],%r152;
$L60:
.loc 1 399 11
ld.s8 %r33,[%r40];
.loc 1 399 10
cvt.u16.u32 %r154,%r33;
set.u32.ne.u16 %r155,%r154,0;
neg.s32 %r156,%r155;
.loc 1 399 14
set.u32.gt.s32 %r158,%r76,0;
neg.s32 %r159,%r158;
cvt.u16.u32 %r161,%r156;
cvt.u16.u32 %r162,%r159;
and.b16 %r160,%r161,%r162;
cvt.u32.u16 %r163,%r160;
cvt.u16.u8 %r164,%r163;
setp.eq.u16 %r165,%r164,0;
@ %r165 bra $L67;
mov.u64 %r60,%r37;
$L63:
.loc 1 401 19
add.u64 %r40,%r40,1;
mov.u64 %r66,%r60;
add.u64 %r60,%r60,1;
mov.u64 %r38,%r60;
.loc 1 401 15
cvt.u32.u32 %r166,%r33;
st.u8 [%r66],%r166;
.loc 1 402 14
add.u32 %r76,%r76,-1;
.loc 1 399 11
ld.s8 %r33,[%r40];
.loc 1 399 10
cvt.u16.u32 %r168,%r33;
set.u32.ne.u16 %r169,%r168,0;
neg.s32 %r170,%r169;
.loc 1 399 14
set.u32.gt.s32 %r172,%r76,0;
neg.s32 %r173,%r172;
cvt.u16.u32 %r175,%r170;
cvt.u16.u32 %r176,%r173;
and.b16 %r174,%r175,%r176;
cvt.u32.u16 %r177,%r174;
cvt.u16.u8 %r178,%r177;
setp.ne.u16 %r179,%r178,0;
@ %r179 bra $L63;
bra $L62;
$L67:
mov.u64 %r38,%r37;
$L62:
.loc 1 405 7
setp.eq.u32 %r180,%r79,0;
@ %r180 bra $L58;
.loc 1 407 14
setp.le.s32 %r181,%r76,0;
@ %r181 bra $L58;
mov.u64 %r49,%r38;
add.u32 %r182,%r76,-1;
cvt.u64.u32 %r183,%r182;
add.u64 %r184,%r38,1;
add.u64 %r59,%r183,%r184;
.loc 1 409 12
mov.u32 %r185,48;
$L64:
st.u8 [%r49],%r185;
.loc 1 407 14
add.u64 %r49,%r49,1;
setp.ne.u64 %r186,%r49,%r59;
@ %r186 bra $L64;
.loc 1 409 9
cvt.u64.u32 %r187,%r76;
add.u64 %r38,%r38,%r187;
$L58:
.loc 1 414 14
mov.u32 %r188,0;
st.u8 [%r38],%r188;
$L47:
.loc 1 418 1
mov.u64 %value,%r77;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _dcvt
.visible .func (.param .u64 %value_out) _dcvt (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .f64 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5, .param .u32 %in_ar6)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .f64 %ar2;
ld.param.f64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u32 %ar4;
ld.param.u32 %ar4,[%in_ar4];
.reg .u32 %ar5;
ld.param.u32 %ar5,[%in_ar5];
.reg .u32 %ar6;
ld.param.u32 %ar6,[%in_ar6];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r34;
.reg .u32 %r36;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u32 %r56;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r61;
.reg .u64 %r65;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .f64 %r77;
.reg .u32 %r78;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u16 %r83;
.reg .u16 %r84;
.reg .u32 %r85;
.reg .u16 %r86;
.reg .pred %r87;
.reg .u64 %r88;
.reg .u64 %r89;
.reg .pred %r90;
.reg .u64 %r91;
.reg .pred %r92;
.reg .u64 %r93;
.reg .pred %r94;
.reg .pred %r95;
.reg .u32 %r98;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .pred %r106;
.reg .pred %r107;
.reg .u64 %r110;
.reg .u32 %r111;
.reg .pred %r112;
.reg .pred %r113;
.reg .pred %r114;
.reg .u32 %r115;
.reg .u64 %r116;
.reg .u64 %r117;
.reg .u32 %r118;
.reg .pred %r119;
.reg .u64 %r120;
.reg .u32 %r121;
.reg .pred %r122;
.reg .u16 %r123;
.reg .u32 %r124;
.reg .pred %r125;
.reg .pred %r126;
.reg .u32 %r127;
.reg .u32 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u16 %r134;
.reg .u16 %r135;
.reg .u16 %r136;
.reg .u32 %r137;
.reg .u16 %r138;
.reg .pred %r139;
.reg .u32 %r140;
.reg .u32 %r142;
.reg .u16 %r144;
.reg .u16 %r145;
.reg .u16 %r146;
.reg .u32 %r147;
.reg .u16 %r148;
.reg .pred %r149;
.reg .u32 %r150;
.reg .u32 %r152;
.reg .u32 %r154;
.reg .u32 %r155;
.reg .u16 %r157;
.reg .u16 %r158;
.reg .u16 %r159;
.reg .u32 %r160;
.reg .u16 %r161;
.reg .pred %r162;
.reg .pred %r163;
.reg .pred %r164;
.reg .u32 %r165;
.reg .pred %r166;
.reg .pred %r167;
.reg .pred %r168;
.reg .u32 %r169;
.reg .u64 %r170;
.reg .u64 %r171;
.reg .u32 %r172;
.reg .pred %r173;
.reg .u64 %r174;
.reg .u32 %r175;
.reg .pred %r176;
.reg .u64 %r183;
mov.u64 %r75,%ar0;
mov.u64 %r76,%ar1;
mov.f64 %r77,%ar2;
mov.u32 %r78,%ar3;
mov.u32 %r80,%ar5;
mov.u32 %r81,%ar6;
cvt.u16.u32 %r84,%r80;
add.u16 %r83,%r84,-69;
cvt.u32.u16 %r85,%r83;
cvt.u32.u8 %r50,%r85;
cvt.u16.u32 %r86,%r50;
setp.gt.u16 %r87,%r86,34;
@ %r87 bra $L84;
mov.u64 %r88,1;
shl.b64 %r59,%r88,%r50;
and.b64 %r89,%r59,4294967297;
setp.ne.u64 %r90,%r89,0;
@ %r90 bra $L85;
and.b64 %r91,%r59,17179869188;
setp.ne.u64 %r92,%r91,0;
@ %r92 bra $L86;
and.b64 %r93,%r59,8589934594;
setp.eq.u64 %r94,%r93,0;
@ %r94 bra $L84;
.loc 1 433 7
setp.eq.u32 %r95,%r78,0;
selp.u32 %r81,%r81,1,%r95;
.loc 1 73 15
add.u64 %r103,%frame,8;
add.u64 %r104,%frame,12;
mov.u32 %r98,3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r75;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r77;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r98;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r78;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r104;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r103;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r105,[%value_in];
}
.loc 1 75 13
ld.u32 %r26,[%frame+12];
.loc 1 75 6
setp.eq.u32 %r106,%r26,9999;
@ %r106 bra $L88;
.loc 1 80 10
ld.s8 %r25,[%r105];
.loc 1 80 9
setp.eq.u32 %r107,%r25,0;
@ %r107 bra $L106;
mov.u64 %r71,%r76;
mov.u64 %r23,%r105;
bra $L90;
$L88:
.loc 1 77 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r76;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r105;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r110,[%value_in];
}
bra $L84;
$L91:
.loc 1 82 18
add.u64 %r23,%r23,1;
add.u64 %r71,%r71,1;
mov.u64 %r46,%r71;
.loc 1 82 14
cvt.u32.u32 %r111,%r25;
st.u8 [%r34],%r111;
.loc 1 83 12
add.u32 %r26,%r26,-1;
st.u32 [%frame+12],%r26;
.loc 1 80 10
ld.s8 %r25,[%r23];
.loc 1 80 9
setp.eq.u32 %r112,%r25,0;
@ %r112 bra $L89;
$L90:
mov.u64 %r34,%r71;
.loc 1 80 13
setp.gt.s32 %r113,%r26,0;
@ %r113 bra $L91;
bra $L92;
$L106:
.loc 1 80 9
mov.u64 %r23,%r105;
mov.u64 %r46,%r76;
$L89:
.loc 1 86 9
setp.le.s32 %r114,%r26,0;
@ %r114 bra $L107;
mov.u64 %r65,%r46;
add.u32 %r115,%r26,-1;
cvt.u64.u32 %r116,%r115;
add.u64 %r117,%r46,1;
add.u64 %r70,%r116,%r117;
.loc 1 88 14
mov.u32 %r118,48;
$L93:
st.u8 [%r65],%r118;
.loc 1 86 9
add.u64 %r65,%r65,1;
setp.ne.u64 %r119,%r65,%r70;
@ %r119 bra $L93;
.loc 1 88 11
cvt.u64.u32 %r120,%r26;
add.u64 %r34,%r46,%r120;
mov.u32 %r121,0;
st.u32 [%frame+12],%r121;
.loc 1 89 12
mov.u32 %r26,%r121;
bra $L92;
$L107:
.loc 1 86 9
mov.u64 %r34,%r46;
$L92:
.loc 1 92 6
setp.ne.u32 %r122,%r81,0;
@ %r122 bra $L94;
.loc 1 92 11
ld.s8 %r124,[%r23];
cvt.u16.u32 %r123,%r124;
setp.eq.u16 %r125,%r123,0;
@ %r125 bra $L95;
$L94:
.loc 1 94 10
setp.ne.u64 %r126,%r105,%r23;
@ %r126 bra $L96;
.loc 1 95 9
mov.u32 %r127,48;
st.u8 [%r34],%r127;
.loc 1 95 6
add.u64 %r34,%r34,1;
$L96:
.loc 1 96 21
set.u32.gt.s32 %r129,%r78,0;
neg.s32 %r130,%r129;
cvt.u32.u32 %r128,%r130;
cvt.u32.u8 %r40,%r128;
.loc 1 96 10
set.u32.ne.u32 %r132,%r26,0;
neg.s32 %r133,%r132;
.loc 1 96 21
cvt.u16.u32 %r135,%r133;
cvt.u16.u32 %r136,%r40;
and.b16 %r134,%r135,%r136;
cvt.u32.u16 %r137,%r134;
cvt.u16.u8 %r138,%r137;
setp.eq.u16 %r139,%r138,0;
@ %r139 bra $L97;
.loc 1 97 9
mov.u32 %r140,46;
st.u8 [%r34],%r140;
.loc 1 97 6
add.u64 %r34,%r34,1;
$L97:
.loc 1 98 20
ld.u32 %r56,[%frame+12];
.loc 1 98 13
shr.u32 %r142,%r56,31;
.loc 1 98 24
cvt.u16.u32 %r145,%r142;
cvt.u16.u32 %r146,%r40;
and.b16 %r144,%r145,%r146;
cvt.u32.u16 %r147,%r144;
cvt.u16.u8 %r148,%r147;
setp.eq.u16 %r149,%r148,0;
@ %r149 bra $L98;
add.u32 %r61,%r56,1;
.loc 1 100 11
mov.u32 %r150,48;
$L99:
mov.u64 %r58,%r34;
add.u64 %r34,%r34,1;
st.u8 [%r58],%r150;
.loc 1 101 9
mov.u32 %r36,%r61;
.loc 1 102 10
add.u32 %r78,%r78,-1;
.loc 1 98 24
add.u32 %r61,%r61,1;
.loc 1 98 13
shr.u32 %r152,%r36,31;
.loc 1 98 24
set.u32.gt.s32 %r154,%r78,0;
neg.s32 %r155,%r154;
cvt.u16.u32 %r158,%r152;
cvt.u16.u32 %r159,%r155;
and.b16 %r157,%r158,%r159;
cvt.u32.u16 %r160,%r157;
cvt.u16.u8 %r161,%r160;
setp.ne.u16 %r162,%r161,0;
@ %r162 bra $L99;
st.u32 [%frame+12],%r36;
$L98:
.loc 1 106 14
ld.s8 %r38,[%r23];
.loc 1 106 13
setp.eq.u32 %r163,%r38,0;
@ %r163 bra $L100;
.loc 1 106 17
setp.le.s32 %r164,%r78,0;
@ %r164 bra $L95;
mov.u64 %r51,%r34;
$L103:
.loc 1 108 15
add.u64 %r23,%r23,1;
mov.u64 %r47,%r51;
add.u64 %r51,%r51,1;
mov.u64 %r34,%r51;
.loc 1 108 11
cvt.u32.u32 %r165,%r38;
st.u8 [%r47],%r165;
.loc 1 109 10
add.u32 %r78,%r78,-1;
.loc 1 106 14
ld.s8 %r38,[%r23];
.loc 1 106 13
setp.ne.u32 %r166,%r38,0;
@ %r166 bra $L101;
$L100:
.loc 1 112 13
setp.gt.s32 %r167,%r78,0;
@ %r167 bra $L102;
bra $L95;
$L101:
.loc 1 106 17
setp.ne.u32 %r168,%r78,0;
@ %r168 bra $L103;
bra $L95;
$L102:
mov.u64 %r37,%r34;
add.u32 %r169,%r78,-1;
cvt.u64.u32 %r170,%r169;
add.u64 %r171,%r34,1;
add.u64 %r24,%r170,%r171;
.loc 1 114 11
mov.u32 %r172,48;
$L104:
st.u8 [%r37],%r172;
.loc 1 112 13
add.u64 %r37,%r37,1;
setp.ne.u64 %r173,%r24,%r37;
@ %r173 bra $L104;
.loc 1 114 8
cvt.u64.u32 %r174,%r78;
add.u64 %r34,%r34,%r174;
$L95:
.loc 1 118 10
mov.u32 %r175,0;
st.u8 [%r34],%r175;
bra $L84;
$L86:
.loc 1 437 10
setp.ne.u32 %r176,%r78,0;
.loc 1 438 12
selp.u32 %r78,%r78,1,%r176;
.loc 1 439 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r75;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r77;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r78;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r76;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r80;
.param .u32 %out_arg6;
st.param.u32 [%out_arg6],%r81;
call (%value_in),_gcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
ld.param.u64 %r183,[%value_in];
}
.loc 1 440 7
bra $L84;
$L85:
.loc 1 443 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r75;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r76;
.param .f64 %out_arg3;
st.param.f64 [%out_arg3],%r77;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r78;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r80;
.param .u32 %out_arg6;
st.param.u32 [%out_arg6],%r81;
call print_e,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
}
$L84:
.loc 1 446 1
mov.u64 %value,%r76;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-efgcvt.o/ 1612277262  0     0     100666  9347      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: fcvt
.visible .func (.param .u64 %value_out) fcvt (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/efgcvt.c"
// BEGIN GLOBAL FUNCTION DECL: fcvtf
.visible .func (.param .u64 %value_out) fcvtf (.param .f32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: gcvt
.visible .func (.param .u64 %value_out) gcvt (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: gcvtf
.visible .func (.param .u64 %value_out) gcvtf (.param .f32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: ecvt
.visible .func (.param .u64 %value_out) ecvt (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: ecvtf
.visible .func (.param .u64 %value_out) ecvtf (.param .f32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: fcvtbuf
.extern .func (.param .u64 %value_out) fcvtbuf (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _gcvt
.extern .func (.param .u64 %value_out) _gcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u32 %in_ar5);
// BEGIN GLOBAL FUNCTION DECL: ecvtbuf
.extern .func (.param .u64 %value_out) ecvtbuf (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DEF: fcvt
.visible .func (.param .u64 %value_out) fcvt (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .f64 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.f64 %r23,%ar0;
mov.u32 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 114 10
mov.u64 %r31,0;
{
.param .u64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),fcvtbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 115 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fcvtf
.visible .func (.param .u64 %value_out) fcvtf (.param .f32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .f32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r32;
.reg .f64 %r33;
.reg .u64 %r34;
mov.f32 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 123 10
cvt.f64.f32 %r33,%r24;
.loc 1 114 10
mov.u64 %r32,0;
{
.param .u64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r33;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r32;
call (%value_in),fcvtbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 124 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: gcvt
.visible .func (.param .u64 %value_out) gcvt (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .f64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .u32 %r30;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
mov.f64 %r26,%ar0;
mov.u32 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 133 6
setp.lt.f64 %r29,%r26,0d0000000000000000;
@ ! %r29 bra $L9;
.loc 1 134 10
mov.u32 %r30,45;
st.u8 [%r28],%r30;
.loc 1 135 8
add.u64 %r24,%r28,1;
.loc 1 136 11
add.u32 %r27,%r27,-1;
bra $L4;
$L9:
mov.u64 %r24,%r28;
$L4:
.loc 1 138 11
ld.global.u64 %r37,[_impure_ptr];
mov.u32 %r36,0;
mov.u32 %r35,103;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r26;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r24;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r35;
.param .u32 %out_arg6;
st.param.u32 [%out_arg6],%r36;
call (%value_in),_gcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
ld.param.u64 %r38,[%value_in];
}
.loc 1 138 57
setp.ne.u64 %r39,%r38,0;
selp.u64 %value,%r28,0,%r39;
.loc 1 139 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: gcvtf
.visible .func (.param .u64 %value_out) gcvtf (.param .f32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .f64 %r22;
.reg .u64 %r23;
.reg .f32 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u32 %r31;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .pred %r40;
mov.f32 %r27,%ar0;
mov.u32 %r28,%ar1;
mov.u64 %r29,%ar2;
.loc 1 147 10
cvt.f64.f32 %r22,%r27;
.loc 1 133 6
setp.lt.f32 %r30,%r27,0f00000000;
@ ! %r30 bra $L16;
.loc 1 134 10
mov.u32 %r31,45;
st.u8 [%r29],%r31;
.loc 1 135 8
add.u64 %r23,%r29,1;
.loc 1 136 11
add.u32 %r28,%r28,-1;
bra $L11;
$L16:
mov.u64 %r23,%r29;
$L11:
.loc 1 138 11
ld.global.u64 %r38,[_impure_ptr];
mov.u32 %r37,0;
mov.u32 %r36,103;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r22;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r23;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r36;
.param .u32 %out_arg6;
st.param.u32 [%out_arg6],%r37;
call (%value_in),_gcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
ld.param.u64 %r39,[%value_in];
}
.loc 1 138 57
setp.ne.u64 %r40,%r39,0;
selp.u64 %value,%r29,0,%r40;
.loc 1 149 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: ecvt
.visible .func (.param .u64 %value_out) ecvt (.param .f64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .f64 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.f64 %r23,%ar0;
mov.u32 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 158 10
mov.u64 %r31,0;
{
.param .u64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),ecvtbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 159 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: ecvtf
.visible .func (.param .u64 %value_out) ecvtf (.param .f32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .f32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r32;
.reg .f64 %r33;
.reg .u64 %r34;
mov.f32 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 167 10
cvt.f64.f32 %r33,%r24;
.loc 1 158 10
mov.u64 %r32,0;
{
.param .u64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r33;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r32;
call (%value_in),ecvtbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 168 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-environ.o/1612277262  0     0     100666  258       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN VAR DEF: initial_env
.global .align 8 .u64 initial_env[1];
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: environ
.visible .global .align 8 .u64 environ[1] =
{generic(initial_env) };
lib_a-envlock.o/1612277262  0     0     100666  661       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __env_lock
.visible .func __env_lock (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/envlock.c"
// BEGIN GLOBAL FUNCTION DECL: __env_unlock
.visible .func __env_unlock (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __env_lock
.visible .func __env_lock (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.loc 1 45 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __env_unlock
.visible .func __env_unlock (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
$LFB3:
ret;
$LFE3:
}

lib_a-eprintf.o/1612277262  0     0     100666  1756      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __eprintf
.visible .func __eprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/eprintf.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: fiprintf
.extern .func (.param .u32 %value_out) fiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: abort
.extern .func abort;
// BEGIN GLOBAL FUNCTION DEF: __eprintf
.visible .func __eprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[32];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 23 20
ld.global.u64 %r30,[_impure_ptr];
.loc 1 23 10
ld.u64 %r31,[%r30+24];
st.u64 [%stack+16],%r27;
st.u32 [%stack+8],%r26;
st.u64 [%stack],%r25;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),fiprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r32,[%value_in];
}
.loc 1 24 3
{
call abort;
trap;
// (noreturn)
exit;
// (noreturn)
}
}
lib_a-erand48.o/1612277262  0     0     100666  3084      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _erand48_r
.visible .func (.param .f64 %value_out) _erand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/erand48.c"
// BEGIN GLOBAL FUNCTION DECL: erand48
.visible .func (.param .f64 %value_out) erand48 (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __dorand48
.extern .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: ldexp
.extern .func (.param .f64 %value_out) ldexp (.param .f64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _erand48_r
.visible .func (.param .f64 %value_out) _erand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .f64 %r28;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u32 %r38;
.reg .f64 %r39;
.reg .u32 %r40;
.reg .f64 %r41;
.reg .u32 %r43;
.reg .f64 %r44;
.reg .u32 %r45;
.reg .f64 %r46;
.reg .u32 %r48;
.reg .f64 %r49;
.reg .u32 %r50;
.reg .f64 %r51;
mov.u64 %r33,%ar0;
mov.u64 %r34,%ar1;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 10
ld.u16 %r40,[%r34];
cvt.rn.f64.u32 %r39,%r40;
mov.u32 %r38,-48;
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r39;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r38;
call (%value_in),ldexp,(%out_arg1,%out_arg2);
ld.param.f64 %r41,[%value_in];
}
.loc 1 22 5
ld.u16 %r45,[%r34+2];
cvt.rn.f64.u32 %r44,%r45;
mov.u32 %r43,-32;
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r44;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r43;
call (%value_in),ldexp,(%out_arg1,%out_arg2);
ld.param.f64 %r46,[%value_in];
}
.loc 1 21 40
add.f64 %r28,%r41,%r46;
.loc 1 23 5
ld.u16 %r50,[%r34+4];
cvt.rn.f64.u32 %r49,%r50;
mov.u32 %r48,-16;
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r49;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r48;
call (%value_in),ldexp,(%out_arg1,%out_arg2);
ld.param.f64 %r51,[%value_in];
}
.loc 1 22 35
add.f64 %value,%r28,%r51;
.loc 1 24 1
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: erand48
.visible .func (.param .f64 %value_out) erand48 (.param .u64 %in_ar0)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .f64 %r28;
mov.u64 %r24,%ar0;
.loc 1 30 10
ld.global.u64 %r27,[_impure_ptr];
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_erand48_r,(%out_arg1,%out_arg2);
ld.param.f64 %r28,[%value_in];
}
.loc 1 31 1
mov.f64 %value,%r28;
st.param.f64 [%value_out],%value;
ret;
}
lib_a-errno.o/  1612277262  0     0     100666  529       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __errno
.visible .func (.param .u64 %value_out) __errno;
.file 1 "../../../../../newlib/libc/errno/errno.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: __errno
.visible .func (.param .u64 %value_out) __errno
{
.reg .u64 %value;
.loc 1 13 10
ld.global.u64 %value,[_impure_ptr];
.loc 1 14 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-exit.o/   1612277262  0     0     100666  779       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: exit
.visible .func exit (.param .u32 %in_ar0);
.file 1 "../../../../../../newlib/libc/machine/nvptx/exit.c"
// BEGIN GLOBAL VAR DEF: __exitval_ptr
.weak .global .align 8 .u64 __exitval_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: exit
.visible .func exit (.param .u32 %in_ar0)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .pred %r24;
mov.u32 %r23,%ar0;
.loc 1 28 7
ld.global.u64 %r22,[__exitval_ptr];
.loc 1 28 6
setp.eq.u64 %r24,%r22,0;
@ %r24 bra $L3;
.loc 1 29 20
st.u32 [%r22],%r23;
$L3:
.loc 1 31 5
// #APP 
// 31 "../../../../../../newlib/libc/machine/nvptx/exit.c" 1
exit;
// #NO_APP 
bra $L3;
}

/282            1612277262  0     0     100666  849       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: explicit_bzero
.visible .func explicit_bzero (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/explicit_bzero.c"
// BEGIN GLOBAL FUNCTION DECL: bzero
.extern .func bzero (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: explicit_bzero
.visible .func explicit_bzero (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r23;
mov.u64 %r22,%ar0;
mov.u64 %r23,%ar1;
.loc 1 15 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call bzero,(%out_arg1,%out_arg2);
}
.loc 1 16 1
ret;
}

lib_a-fclose.o/ 1612277262  0     0     100666  6200      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _fclose_r$part$0
.func (.param .u32 %value_out) _fclose_r$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/fclose.c"
// BEGIN GLOBAL FUNCTION DECL: _fclose_r
.visible .func (.param .u32 %value_out) _fclose_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: fclose
.visible .func (.param .u32 %value_out) fclose (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sflush_r
.extern .func (.param .u32 %value_out) __sflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_acquire
.extern .func __sfp_lock_acquire;
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_release
.extern .func __sfp_lock_release;
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN FUNCTION DEF: _fclose_r$part$0
.func (.param .u32 %value_out) _fclose_r$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r36;
.reg .pred %r37;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .pred %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .pred %r45;
.reg .u64 %r48;
.reg .pred %r49;
.reg .u64 %r50;
.reg .pred %r51;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u64 %r58;
.reg .u16 %r59;
mov.u64 %r32,%ar0;
mov.u64 %r33,%ar1;
.loc 1 94 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r33;
call (%value_in),__sflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r36,[%value_in];
}
mov.u32 %r31,%r36;
.loc 1 96 9
ld.u64 %r22,[%r33+80];
.loc 1 96 6
setp.eq.u64 %r37,%r22,0;
@ %r37 bra $L2;
.loc 1 96 29
ld.u64 %r40,[%r33+48];
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r40;
call (%value_in),%r22,(%out_arg1,%out_arg2),$LCT0;
ld.param.u32 %r41,[%value_in];
}
.loc 1 96 26
setp.ge.s32 %r42,%r41,0;
.loc 1 97 7
selp.u32 %r31,%r31,-1,%r42;
$L2:
.loc 1 98 6
ld.u16 %r44,[%r33+16];
and.b16 %r43,%r44,128;
setp.eq.u16 %r45,%r43,0;
@ %r45 bra $L3;
.loc 1 99 5
ld.u64 %r48,[%r33+24];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r48;
call _free_r,(%out_arg1,%out_arg2);
}
$L3:
.loc 1 100 7
ld.u64 %r28,[%r33+88];
.loc 1 100 6
setp.eq.u64 %r49,%r28,0;
@ %r49 bra $L4;
.loc 1 101 5
add.u64 %r50,%r33,116;
setp.eq.u64 %r51,%r28,%r50;
@ %r51 bra $L5;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call _free_r,(%out_arg1,%out_arg2);
}
$L5:
mov.u64 %r54,0;
st.u64 [%r33+88],%r54;
$L4:
.loc 1 102 7
ld.u64 %r30,[%r33+120];
.loc 1 102 6
setp.eq.u64 %r55,%r30,0;
@ %r55 bra $L6;
.loc 1 103 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call _free_r,(%out_arg1,%out_arg2);
}
mov.u64 %r58,0;
st.u64 [%r33+120],%r58;
$L6:
.loc 1 104 3
{
call __sfp_lock_acquire;
}
.loc 1 105 14
mov.u16 %r59,0;
st.u16 [%r33+16],%r59;
.loc 1 112 3
{
call __sfp_lock_release;
}
.loc 1 118 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _fclose_r
.visible .func (.param .u32 %value_out) _fclose_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u16 %r32;
.reg .pred %r33;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 64 6
setp.ne.u64 %r27,%r26,0;
@ %r27 bra $L20;
$L23:
.loc 1 65 12
mov.u32 %r24,0;
bra $L19;
$L20:
.loc 1 67 3
setp.eq.u64 %r28,%r25,0;
@ %r28 bra $L22;
ld.u32 %r29,[%r25+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L22;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call __sinit,(%out_arg1);
}
$L22:
.loc 1 78 6
ld.u16 %r32,[%r26+16];
setp.eq.u16 %r33,%r32,0;
@ %r33 bra $L23;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),_fclose_r$part$0,(%out_arg1,%out_arg2);
ld.param.u32 %r36,[%value_in];
}
mov.u32 %r24,%r36;
$L19:
.loc 1 118 1
mov.u32 %value,%r24;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fclose
.visible .func (.param .u32 %value_out) fclose (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u16 %r32;
.reg .pred %r33;
.reg .u32 %r36;
mov.u64 %r26,%ar0;
.loc 1 64 6
setp.ne.u64 %r27,%r26,0;
@ %r27 bra $L31;
$L34:
.loc 1 65 12
mov.u32 %r25,0;
bra $L30;
$L31:
.loc 1 125 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 67 3
setp.eq.u64 %r28,%r22,0;
@ %r28 bra $L33;
ld.u32 %r29,[%r22+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L33;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call __sinit,(%out_arg1);
}
$L33:
.loc 1 78 6
ld.u16 %r32,[%r26+16];
setp.eq.u16 %r33,%r32,0;
@ %r33 bra $L34;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),_fclose_r$part$0,(%out_arg1,%out_arg2);
ld.param.u32 %r36,[%value_in];
}
mov.u32 %r25,%r36;
$L30:
.loc 1 126 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fcntlr.o/ 1612277262  0     0     100666  1907      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fcntl_r
.visible .func (.param .u32 %value_out) _fcntl_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/reent/fcntlr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: fcntl
.extern .func (.param .u32 %value_out) fcntl (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _fcntl_r
.visible .func (.param .u32 %value_out) _fcntl_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r31;
.reg .pred %r33;
.reg .pred %r34;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u32 %r27,%ar3;
.loc 1 50 9
mov.u32 %r28,0;
st.global.u32 [errno],%r28;
.loc 1 51 14
st.u32 [%stack],%r27;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r26;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),fcntl,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r31,[%value_in];
}
.loc 1 51 6
setp.ne.u32 %r33,%r31,-1;
@ %r33 bra $L1;
.loc 1 51 52
ld.global.u32 %r22,[errno];
.loc 1 51 43
setp.eq.u32 %r34,%r22,0;
@ %r34 bra $L1;
.loc 1 52 17
st.u32 [%r24],%r22;
$L1:
.loc 1 54 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fdopen.o/ 1612277262  0     0     100666  4975      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fdopen_r
.visible .func (.param .u64 %value_out) _fdopen_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fdopen.c"
// BEGIN GLOBAL FUNCTION DECL: fdopen
.visible .func (.param .u64 %value_out) fdopen (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sflags
.extern .func (.param .u32 %value_out) __sflags (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sfp
.extern .func (.param .u64 %value_out) __sfp (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sread
.extern .func (.param .u32 %value_out) __sread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __swrite
.extern .func (.param .u32 %value_out) __swrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sseek
.extern .func (.param .u64 %value_out) __sseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sclose
.extern .func (.param .u32 %value_out) __sclose (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _fdopen_r
.visible .func (.param .u64 %value_out) _fdopen_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u64 %r35;
.reg .pred %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
mov.u64 %r26,%ar0;
mov.u32 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 66 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sflags,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r32,[%value_in];
}
.loc 1 66 6
setp.eq.u32 %r33,%r32,0;
@ %r33 bra $L3;
.loc 1 81 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),__sfp,(%out_arg1);
ld.param.u64 %r35,[%value_in];
}
mov.u64 %r25,%r35;
.loc 1 81 6
setp.eq.u64 %r36,%r25,0;
@ %r36 bra $L1;
.loc 1 86 14
st.u16 [%r25+16],%r32;
.loc 1 95 13
st.u16 [%r25+18],%r27;
.loc 1 96 15
st.u64 [%r25+48],%r25;
.loc 1 103 13
mov.u64 %r37,__sread;
st.u64 [%r25+56],%r37;
.loc 1 104 14
mov.u64 %r38,__swrite;
st.u64 [%r25+64],%r38;
.loc 1 105 13
mov.u64 %r39,__sseek;
st.u64 [%r25+72],%r39;
.loc 1 106 14
mov.u64 %r40,__sclose;
st.u64 [%r25+80],%r40;
.loc 1 119 10
bra $L1;
$L3:
.loc 1 67 12
mov.u64 %r25,0;
$L1:
.loc 1 120 1
mov.u64 %value,%r25;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fdopen
.visible .func (.param .u64 %value_out) fdopen (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u64 %r35;
.reg .pred %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
mov.u32 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 128 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 66 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sflags,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r32,[%value_in];
}
.loc 1 66 6
setp.eq.u32 %r33,%r32,0;
@ %r33 bra $L9;
.loc 1 81 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call (%value_in),__sfp,(%out_arg1);
ld.param.u64 %r35,[%value_in];
}
mov.u64 %r26,%r35;
.loc 1 81 6
setp.eq.u64 %r36,%r26,0;
@ %r36 bra $L7;
.loc 1 86 14
st.u16 [%r26+16],%r32;
.loc 1 95 13
st.u16 [%r26+18],%r27;
.loc 1 96 15
st.u64 [%r26+48],%r26;
.loc 1 103 13
mov.u64 %r37,__sread;
st.u64 [%r26+56],%r37;
.loc 1 104 14
mov.u64 %r38,__swrite;
st.u64 [%r26+64],%r38;
.loc 1 105 13
mov.u64 %r39,__sseek;
st.u64 [%r26+72],%r39;
.loc 1 106 14
mov.u64 %r40,__sclose;
st.u64 [%r26+80],%r40;
.loc 1 119 10
bra $L7;
$L9:
.loc 1 67 12
mov.u64 %r26,0;
$L7:
.loc 1 129 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-feof.o/   1612277262  0     0     100666  1202      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: feof
.visible .func (.param .u32 %value_out) feof (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/feof.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: feof
.visible .func (.param .u32 %value_out) feof (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .pred %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u16 %r37;
mov.u64 %r28,%ar0;
.loc 1 71 3
ld.global.u64 %r25,[_impure_ptr];
setp.eq.u64 %r29,%r25,0;
@ %r29 bra $L2;
ld.u32 %r30,[%r25+80];
setp.ne.u32 %r31,%r30,0;
@ %r31 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 73 12
ld.u16 %r34,[%r28+16];
shr.u32 %r35,%r34,5;
cvt.u16.u32 %r37,%r35;
cvt.u32.u16 %r36,%r37;
and.b32 %value,%r36,1;
.loc 1 76 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-ferror.o/ 1612277262  0     0     100666  1212      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ferror
.visible .func (.param .u32 %value_out) ferror (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/ferror.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: ferror
.visible .func (.param .u32 %value_out) ferror (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .pred %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u16 %r37;
mov.u64 %r28,%ar0;
.loc 1 80 3
ld.global.u64 %r25,[_impure_ptr];
setp.eq.u64 %r29,%r25,0;
@ %r29 bra $L2;
ld.u32 %r30,[%r25+80];
setp.ne.u32 %r31,%r30,0;
@ %r31 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 82 12
ld.u16 %r34,[%r28+16];
shr.u32 %r35,%r34,6;
cvt.u16.u32 %r37,%r35;
cvt.u32.u16 %r36,%r37;
and.b32 %value,%r36,1;
.loc 1 85 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fflush.o/ 1612277262  0     0     100666  12431     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __sflush_r
.visible .func (.param .u32 %value_out) __sflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/fflush.c"
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.visible .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: fflush
.visible .func (.param .u32 %value_out) fflush (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _global_impure_ptr
.extern .const .align 8 .u64 _global_impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fwalk_reent
.extern .func (.param .u32 %value_out) _fwalk_reent (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __sflush_r
.visible .func (.param .u32 %value_out) __sflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u64 %r40;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u64 %r57;
.reg .u32 %r58;
.reg .u32 %r60;
.reg .u64 %r62;
.reg .u32 %r73;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u16 %r76;
.reg .u16 %r77;
.reg .pred %r78;
.reg .u16 %r79;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .pred %r86;
.reg .u32 %r87;
.reg .u16 %r88;
.reg .u16 %r89;
.reg .pred %r90;
.reg .u64 %r93;
.reg .u32 %r94;
.reg .u64 %r95;
.reg .pred %r96;
.reg .pred %r97;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .u16 %r104;
.reg .u16 %r105;
.reg .u16 %r106;
.reg .u32 %r107;
.reg .u16 %r108;
.reg .pred %r109;
.reg .u16 %r110;
.reg .u16 %r111;
.reg .u16 %r112;
.reg .u16 %r113;
.reg .pred %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .pred %r117;
.reg .u64 %r118;
.reg .u32 %r122;
.reg .u64 %r123;
.reg .pred %r124;
.reg .pred %r125;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .u64 %r128;
.reg .u16 %r130;
.reg .u16 %r131;
.reg .u32 %r132;
.reg .u16 %r133;
.reg .pred %r134;
.reg .pred %r135;
.reg .pred %r136;
.reg .u64 %r137;
.reg .pred %r138;
.reg .u64 %r141;
.reg .u16 %r142;
.reg .u16 %r143;
.reg .pred %r144;
.reg .u64 %r145;
.reg .u64 %r146;
.reg .u16 %r147;
.reg .pred %r149;
.reg .pred %r150;
.reg .u64 %r155;
.reg .u32 %r156;
.reg .u64 %r157;
.reg .pred %r158;
.reg .u16 %r159;
.reg .u16 %r160;
.reg .u64 %r161;
.reg .pred %r162;
.reg .u16 %r164;
.reg .u16 %r165;
.reg .u64 %r167;
.reg .u16 %r168;
.reg .pred %r170;
.reg .u16 %r171;
.reg .u16 %r172;
.reg .u64 %r174;
.reg .u16 %r175;
.reg .pred %r177;
mov.u64 %r74,%ar0;
mov.u64 %r75,%ar1;
.loc 1 111 9
ld.s16 %r53,[%r75+16];
.loc 1 112 6
cvt.u16.u32 %r77,%r53;
and.b16 %r76,%r77,8;
setp.ne.u16 %r78,%r76,0;
@ %r78 bra $L2;
.loc 1 118 18
or.b16 %r79,%r77,2048;
cvt.s32.s16 %r22,%r79;
st.u16 [%r75+16],%r79;
.loc 1 128 10
ld.u32 %r82,[%r75+8];
setp.gt.s32 %r83,%r82,0;
@ %r83 bra $L3;
.loc 1 128 23
ld.u32 %r84,[%r75+112];
setp.gt.s32 %r85,%r84,0;
@ %r85 bra $L3;
$L5:
.loc 1 205 14
mov.u32 %r73,0;
bra $L1;
$L3:
.loc 1 128 44
ld.u64 %r25,[%r75+72];
.loc 1 128 39
setp.eq.u64 %r86,%r25,0;
@ %r86 bra $L5;
.loc 1 140 14
ld.u32 %r60,[%r74];
.loc 1 141 16
mov.u32 %r87,0;
st.u32 [%r74],%r87;
.loc 1 154 12
ld.u64 %r62,[%r75+48];
.loc 1 143 7
cvt.u16.u32 %r89,%r53;
and.b16 %r88,%r89,4096;
setp.eq.u16 %r90,%r88,0;
@ %r90 bra $L6;
.loc 1 144 13
ld.u64 %r51,[%r75+144];
bra $L7;
$L6:
.loc 1 154 12
mov.u32 %r94,1;
mov.u64 %r93,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r62;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r93;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r94;
call (%value_in),%r25,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r95,[%value_in];
}
mov.u64 %r51,%r95;
.loc 1 155 11
setp.ne.u64 %r96,%r51,-1;
@ %r96 bra $L8;
.loc 1 155 32
ld.u32 %r26,[%r74];
.loc 1 155 26
setp.ne.u32 %r97,%r26,0;
@ %r97 bra $L9;
.loc 1 168 17
ld.s16 %r22,[%r75+16];
.loc 1 182 17
ld.u64 %r25,[%r75+72];
.loc 1 182 15
ld.u64 %r62,[%r75+48];
bra $L7;
$L9:
.loc 1 158 31
set.u32.eq.u32 %r99,%r26,29;
neg.s32 %r100,%r99;
set.u32.eq.u32 %r102,%r26,22;
neg.s32 %r103,%r102;
cvt.u16.u32 %r105,%r100;
cvt.u16.u32 %r106,%r103;
or.b16 %r104,%r105,%r106;
.loc 1 158 8
cvt.u32.u16 %r107,%r104;
cvt.u16.u8 %r108,%r107;
setp.eq.u16 %r109,%r108,0;
@ %r109 bra $L10;
.loc 1 161 21
st.u32 [%r74],%r60;
.loc 1 160 16
cvt.u32.u64 %r73,%r93;
bra $L1;
$L10:
.loc 1 164 18
ld.u16 %r111,[%r75+16];
or.b16 %r110,%r111,64;
st.u16 [%r75+16],%r110;
.loc 1 157 9
cvt.u32.u64 %r73,%r95;
bra $L1;
$L8:
.loc 1 168 17
ld.s16 %r22,[%r75+16];
.loc 1 182 17
ld.u64 %r25,[%r75+72];
.loc 1 182 15
ld.u64 %r62,[%r75+48];
$L7:
.loc 1 168 14
cvt.u16.u32 %r113,%r22;
and.b16 %r112,%r113,4;
setp.eq.u16 %r114,%r112,0;
@ %r114 bra $L11;
.loc 1 172 27
ld.s32 %r115,[%r75+8];
.loc 1 172 22
sub.u64 %r51,%r51,%r115;
.loc 1 173 18
ld.u64 %r116,[%r75+88];
setp.eq.u64 %r117,%r116,0;
@ %r117 bra $L11;
.loc 1 174 29
ld.s32 %r118,[%r75+112];
.loc 1 174 24
sub.u64 %r51,%r51,%r118;
$L11:
.loc 1 182 15
mov.u32 %r122,0;
{
.param .u64 %value_in;
$LCT1:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r62;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r51;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r122;
call (%value_in),%r25,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT1;
ld.param.u64 %r123,[%value_in];
}
.loc 1 183 7
setp.ne.u64 %r124,%r123,-1;
@ %r124 bra $L12;
.loc 1 183 27
ld.u32 %r37,[%r74];
.loc 1 183 21
setp.le.u32 %r125,%r37,29;
@ %r125 bra $L13;
.loc 1 201 19
ld.s16 %r38,[%r75+16];
bra $L14;
$L13:
ld.s16 %r38,[%r75+16];
.loc 1 183 21
mov.u64 %r127,541065217;
shr.u64 %r126,%r127,%r37;
not.b64 %r128,%r126;
cvt.u16.u64 %r131,%r128;
and.b16 %r130,%r131,1;
.loc 1 184 33
cvt.u32.u16 %r132,%r130;
cvt.u16.u8 %r133,%r132;
setp.ne.u16 %r134,%r133,0;
@ ! %r134 bra $L44;
bra $L14;
$L23:
.loc 1 193 51
setp.eq.u32 %r135,%r37,0;
@ ! %r135 bra $L17;
$L16:
.loc 1 194 15
st.u64 [%r75+144],%r123;
$L17:
.loc 1 195 20
st.u32 [%r74],%r60;
.loc 1 196 12
ld.u64 %r40,[%r75+88];
.loc 1 196 11
setp.eq.u64 %r136,%r40,0;
@ %r136 bra $L5;
.loc 1 197 3
add.u64 %r137,%r75,116;
setp.eq.u64 %r138,%r40,%r137;
@ %r138 bra $L18;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r40;
call _free_r,(%out_arg1,%out_arg2);
}
$L18:
mov.u64 %r141,0;
st.u64 [%r75+88],%r141;
.loc 1 205 14
cvt.u32.u64 %r73,%r141;
bra $L1;
$L14:
.loc 1 201 19
cvt.u16.u32 %r143,%r38;
or.b16 %r142,%r143,64;
st.u16 [%r75+16],%r142;
.loc 1 202 15
mov.u32 %r73,-1;
bra $L1;
$L2:
.loc 1 207 10
ld.u64 %r57,[%r75+24];
.loc 1 207 6
setp.eq.u64 %r144,%r57,0;
@ %r144 bra $L5;
.loc 1 212 14
ld.u64 %r146,[%r75];
sub.u64 %r145,%r146,%r57;
.loc 1 212 5
cvt.u32.u64 %r58,%r145;
.loc 1 219 10
st.u64 [%r75],%r57;
.loc 1 220 42
and.b16 %r147,%r77,3;
setp.ne.u16 %r149,%r147,0;
@ %r149 bra $L24;
ld.u32 %r52,[%r75+32];
bra $L19;
$L24:
mov.u32 %r52,0;
$L19:
.loc 1 220 10
st.u32 [%r75+12],%r52;
.loc 1 222 9
setp.le.s32 %r150,%r58,0;
@ %r150 bra $L5;
$L21:
.loc 1 224 11
ld.u64 %r155,[%r75+48];
ld.u64 %r157,[%r75+64];
{
.param .u32 %value_in;
$LCT2:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r155;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r57;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
call (%value_in),%r157,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT2;
ld.param.u32 %r156,[%value_in];
}
.loc 1 225 10
setp.gt.s32 %r158,%r156,0;
@ %r158 bra $L20;
.loc 1 227 22
ld.u16 %r160,[%r75+16];
or.b16 %r159,%r160,64;
st.u16 [%r75+16],%r159;
.loc 1 228 18
mov.u32 %r73,-1;
bra $L1;
$L20:
.loc 1 230 9
cvt.s64.s32 %r161,%r156;
add.u64 %r57,%r57,%r161;
.loc 1 231 9
sub.u32 %r58,%r58,%r156;
.loc 1 222 9
setp.gt.s32 %r162,%r58,0;
@ %r162 bra $L21;
bra $L5;
$L12:
.loc 1 189 19
ld.u16 %r165,[%r75+16];
and.b16 %r164,%r165,-2049;
st.u16 [%r75+16],%r164;
.loc 1 191 15
st.u32 [%r75+8],%r122;
.loc 1 192 15
ld.u64 %r167,[%r75+24];
st.u64 [%r75],%r167;
.loc 1 193 11
and.b16 %r168,%r165,4096;
setp.ne.u16 %r170,%r168,0;
@ %r170 bra $L16;
bra $L17;
$L44:
.loc 1 189 19
cvt.u16.u32 %r172,%r38;
and.b16 %r171,%r172,-2049;
st.u16 [%r75+16],%r171;
.loc 1 191 15
st.u32 [%r75+8],%r122;
.loc 1 192 15
ld.u64 %r174,[%r75+24];
st.u64 [%r75],%r174;
.loc 1 193 11
and.b16 %r175,%r172,4096;
setp.ne.u16 %r177,%r175,0;
@ ! %r177 bra $L17;
bra $L23;
$L1:
.loc 1 234 1
mov.u32 %value,%r73;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _fflush_r
.visible .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .u32 %r28;
.reg .pred %r29;
.reg .u16 %r31;
.reg .pred %r32;
.reg .u32 %r35;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 272 3
setp.eq.u64 %r27,%r25,0;
@ %r27 bra $L46;
ld.u32 %r28,[%r25+80];
setp.ne.u32 %r29,%r28,0;
@ %r29 bra $L46;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call __sinit,(%out_arg1);
}
$L46:
.loc 1 274 6
ld.u16 %r31,[%r26+16];
setp.eq.u16 %r32,%r31,0;
@ %r32 bra $L48;
.loc 1 278 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),__sflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r35,[%value_in];
}
mov.u32 %r24,%r35;
.loc 1 280 10
bra $L45;
$L48:
.loc 1 275 12
mov.u32 %r24,0;
$L45:
.loc 1 281 1
mov.u32 %value,%r24;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fflush
.visible .func (.param .u32 %value_out) fflush (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .pred %r35;
.reg .u16 %r37;
.reg .pred %r38;
.reg .u32 %r41;
mov.u64 %r27,%ar0;
.loc 1 288 6
setp.ne.u64 %r28,%r27,0;
@ %r28 bra $L53;
.loc 1 289 12
ld.const.u64 %r31,[_global_impure_ptr];
mov.u64 %r30,_fflush_r;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),_fwalk_reent,(%out_arg1,%out_arg2);
ld.param.u32 %r32,[%value_in];
}
mov.u32 %r26,%r32;
bra $L52;
$L53:
.loc 1 291 10
ld.global.u64 %r23,[_impure_ptr];
.loc 1 272 3
setp.eq.u64 %r33,%r23,0;
@ %r33 bra $L55;
ld.u32 %r34,[%r23+80];
setp.ne.u32 %r35,%r34,0;
@ %r35 bra $L55;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L55:
.loc 1 274 6
ld.u16 %r37,[%r27+16];
setp.eq.u16 %r38,%r37,0;
@ %r38 bra $L56;
.loc 1 278 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),__sflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r41,[%value_in];
}
mov.u32 %r26,%r41;
.loc 1 280 10
bra $L52;
$L56:
.loc 1 275 12
mov.u32 %r26,0;
$L52:
.loc 1 292 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-ffs.o/    1612277262  0     0     100666  687       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ffs
.visible .func (.param .u32 %value_out) ffs (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/misc/ffs.c"
// BEGIN GLOBAL FUNCTION DEF: ffs
.visible .func (.param .u32 %value_out) ffs (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .pred %r26;
mov.u32 %r23,%ar0;
.loc 1 31 10
brev.b32 %r25,%r23;
clz.b32 %r24,%r25;
setp.ne.u32 %r26,%r23,0;
selp.u32 %r24,%r24,-1,%r26;
add.u32 %value,%r24,1;
.loc 1 32 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-ffsl.o/   1612277262  0     0     100666  832       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ffsl
.visible .func (.param .u32 %value_out) ffsl (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/ffsl.c"
// BEGIN GLOBAL FUNCTION DECL: __ffsdi2
.extern .func (.param .u32 %value_out) __ffsdi2 (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: ffsl
.visible .func (.param .u32 %value_out) ffsl (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r26;
mov.u64 %r23,%ar0;
.loc 1 33 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call (%value_in),__ffsdi2,(%out_arg1);
ld.param.u32 %r26,[%value_in];
}
.loc 1 34 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-ffsll.o/  1612277262  0     0     100666  837       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ffsll
.visible .func (.param .u32 %value_out) ffsll (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/ffsll.c"
// BEGIN GLOBAL FUNCTION DECL: __ffsdi2
.extern .func (.param .u32 %value_out) __ffsdi2 (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: ffsll
.visible .func (.param .u32 %value_out) ffsll (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r26;
mov.u64 %r23,%ar0;
.loc 1 33 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call (%value_in),__ffsdi2,(%out_arg1);
ld.param.u32 %r26,[%value_in];
}
.loc 1 34 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fgetc.o/  1612277262  0     0     100666  3187      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fgetc_r
.visible .func (.param .u32 %value_out) _fgetc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/fgetc.c"
// BEGIN GLOBAL FUNCTION DECL: fgetc
.visible .func (.param .u32 %value_out) fgetc (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __srget_r
.extern .func (.param .u32 %value_out) __srget_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _fgetc_r
.visible .func (.param .u32 %value_out) _fgetc_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r39;
.reg .u64 %r40;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
.loc 1 92 3
setp.eq.u64 %r31,%r29,0;
@ %r31 bra $L2;
ld.u32 %r32,[%r29+80];
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 94 12
ld.u32 %r35,[%r30+8];
add.u32 %r24,%r35,-1;
st.u32 [%r30+8],%r24;
setp.ge.s32 %r36,%r24,0;
@ %r36 bra $L3;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r39,[%value_in];
}
mov.u32 %r28,%r39;
bra $L1;
$L3:
ld.u64 %r25,[%r30];
add.u64 %r40,%r25,1;
st.u64 [%r30],%r40;
ld.u8 %r28,[%r25];
$L1:
.loc 1 97 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fgetc
.visible .func (.param .u32 %value_out) fgetc (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r39;
.reg .u64 %r40;
mov.u64 %r30,%ar0;
.loc 1 106 18
ld.global.u64 %r28,[_impure_ptr];
.loc 1 108 3
setp.eq.u64 %r31,%r28,0;
@ %r31 bra $L9;
ld.u32 %r32,[%r28+80];
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L9;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
call __sinit,(%out_arg1);
}
$L9:
.loc 1 110 12
ld.u32 %r35,[%r30+8];
add.u32 %r24,%r35,-1;
st.u32 [%r30+8],%r24;
setp.ge.s32 %r36,%r24,0;
@ %r36 bra $L10;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r39,[%value_in];
}
mov.u32 %r29,%r39;
bra $L8;
$L10:
ld.u64 %r25,[%r30];
add.u64 %r40,%r25,1;
st.u64 [%r30],%r40;
ld.u8 %r29,[%r25];
$L8:
.loc 1 116 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fgetpos.o/1612277262  0     0     100666  2311      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fgetpos_r
.visible .func (.param .u32 %value_out) _fgetpos_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fgetpos.c"
// BEGIN GLOBAL FUNCTION DECL: fgetpos
.visible .func (.param .u32 %value_out) fgetpos (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _ftell_r
.extern .func (.param .u64 %value_out) _ftell_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _fgetpos_r
.visible .func (.param .u32 %value_out) _fgetpos_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 72 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),_ftell_r,(%out_arg1,%out_arg2);
ld.param.u64 %r30,[%value_in];
}
.loc 1 72 8
st.u64 [%r27],%r30;
.loc 1 74 6
set.u32.eq.u64 %r33,%r30,-1;
neg.s32 %value,%r33;
.loc 1 79 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fgetpos
.visible .func (.param .u32 %value_out) fgetpos (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r34;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 72 10
ld.global.u64 %r30,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),_ftell_r,(%out_arg1,%out_arg2);
ld.param.u64 %r31,[%value_in];
}
.loc 1 72 8
st.u64 [%r27],%r31;
.loc 1 74 6
set.u32.eq.u64 %r34,%r31,-1;
neg.s32 %value,%r34;
.loc 1 88 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fgets.o/  1612277262  0     0     100666  5988      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fgets_r
.visible .func (.param .u64 %value_out) _fgets_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/fgets.c"
// BEGIN GLOBAL FUNCTION DECL: fgets
.visible .func (.param .u64 %value_out) fgets (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __srefill_r
.extern .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _fgets_r
.visible .func (.param .u64 %value_out) _fgets_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r28;
.reg .u32 %r37;
.reg .u32 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r49;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u32 %r54;
.reg .u64 %r55;
.reg .pred %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .pred %r59;
.reg .pred %r61;
.reg .u32 %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .u32 %r69;
.reg .u64 %r71;
.reg .pred %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .u32 %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u64 %r89;
.reg .pred %r90;
.reg .u32 %r91;
mov.u64 %r52,%ar0;
mov.u64 %r53,%ar1;
mov.u32 %r54,%ar2;
mov.u64 %r55,%ar3;
.loc 1 106 6
setp.gt.s32 %r56,%r54,1;
@ %r56 bra $L2;
$L7:
.loc 1 107 12
mov.u64 %r51,0;
bra $L1;
$L2:
.loc 1 111 3
setp.eq.u64 %r57,%r52,0;
@ %r57 bra $L4;
ld.u32 %r58,[%r52+80];
setp.ne.u32 %r59,%r58,0;
@ %r59 bra $L4;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r52;
call __sinit,(%out_arg1);
}
$L4:
.loc 1 136 4
add.u32 %r44,%r54,-1;
mov.u64 %r46,%r53;
$L10:
.loc 1 142 16
ld.s32 %r45,[%r55+8];
.loc 1 142 10
setp.ne.u64 %r61,%r45,0;
@ %r61 bra $L5;
.loc 1 144 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r52;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r55;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r64,[%value_in];
}
.loc 1 144 7
setp.eq.u32 %r65,%r64,0;
@ %r65 bra $L6;
.loc 1 147 11
setp.eq.u64 %r66,%r46,%r53;
@ ! %r66 bra $L8;
bra $L7;
$L6:
.loc 1 154 8
ld.s32 %r45,[%r55+8];
$L5:
.loc 1 156 9
ld.u64 %r47,[%r55];
.loc 1 164 15
cvt.s64.s32 %r67,%r44;
min.u64 %r23,%r67,%r45;
.loc 1 166 29
mov.u32 %r69,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r69;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r23;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r71,[%value_in];
}
.loc 1 167 10
setp.eq.u64 %r72,%r71,0;
@ %r72 bra $L9;
.loc 1 169 8
add.u64 %r49,%r71,1;
.loc 1 169 14
sub.u64 %r28,%r49,%r47;
.loc 1 170 11
ld.u32 %r74,[%r55+8];
cvt.u32.u64 %r75,%r28;
sub.u32 %r73,%r74,%r75;
st.u32 [%r55+8],%r73;
.loc 1 171 11
st.u64 [%r55],%r49;
.loc 1 172 11
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r47;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r79,[%value_in];
}
.loc 1 173 11
add.u64 %r80,%r46,%r28;
mov.u32 %r81,0;
st.u8 [%r80],%r81;
.loc 1 175 11
mov.u64 %r51,%r53;
bra $L1;
$L9:
.loc 1 177 14
cvt.u32.u64 %r37,%r23;
ld.u32 %r83,[%r55+8];
sub.u32 %r82,%r83,%r37;
st.u32 [%r55+8],%r82;
.loc 1 178 14
ld.u64 %r85,[%r55];
add.u64 %r84,%r85,%r23;
st.u64 [%r55],%r84;
.loc 1 179 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r47;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r23;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r89,[%value_in];
}
.loc 1 180 9
add.u64 %r46,%r46,%r23;
.loc 1 182 13
sub.u32 %r44,%r44,%r37;
.loc 1 182 3
setp.ne.u32 %r90,%r44,0;
@ %r90 bra $L10;
$L8:
.loc 1 183 6
mov.u32 %r91,0;
st.u8 [%r46],%r91;
.loc 1 185 10
mov.u64 %r51,%r53;
$L1:
.loc 1 186 1
mov.u64 %value,%r51;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fgets
.visible .func (.param .u64 %value_out) fgets (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 195 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_fgets_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 196 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-fileno.o/ 1612277262  0     0     100666  1379      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: fileno
.visible .func (.param .u32 %value_out) fileno (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/fileno.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: fileno
.visible .func (.param .u32 %value_out) fileno (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .u16 %r33;
.reg .pred %r34;
.reg .u64 %r35;
.reg .u32 %r36;
mov.u64 %r28,%ar0;
.loc 1 69 3
ld.global.u64 %r26,[_impure_ptr];
setp.eq.u64 %r29,%r26,0;
@ %r29 bra $L2;
ld.u32 %r30,[%r26+80];
setp.ne.u32 %r31,%r30,0;
@ %r31 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 71 6
ld.u16 %r33,[%r28+16];
setp.eq.u16 %r34,%r33,0;
@ %r34 bra $L3;
.loc 1 72 12
ld.s16 %r27,[%r28+18];
bra $L1;
$L3:
.loc 1 76 22
ld.global.u64 %r35,[_impure_ptr];
mov.u32 %r36,9;
st.u32 [%r35],%r36;
.loc 1 75 14
mov.u32 %r27,-1;
$L1:
.loc 1 80 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-findfp.o/ 1612277262  0     0     100666  16376     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: __fp_lock
.func (.param .u32 %value_out) __fp_lock (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/findfp.c"
// BEGIN GLOBAL FUNCTION DECL: _cleanup_r
.visible .func _cleanup_r (.param .u64 %in_ar0);
// BEGIN FUNCTION DECL: __fp_unlock
.func (.param .u32 %value_out) __fp_unlock (.param .u64 %in_ar0);
// BEGIN FUNCTION DECL: __sinit$part$0
.func __sinit$part$0 (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sfmoreglue
.visible .func (.param .u64 %value_out) __sfmoreglue (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sfp
.visible .func (.param .u64 %value_out) __sfp (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _cleanup
.visible .func _cleanup;
// BEGIN GLOBAL FUNCTION DECL: __sinit
.visible .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_acquire
.visible .func __sfp_lock_acquire;
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_release
.visible .func __sfp_lock_release;
// BEGIN GLOBAL FUNCTION DECL: __sinit_lock_acquire
.visible .func __sinit_lock_acquire;
// BEGIN GLOBAL FUNCTION DECL: __sinit_lock_release
.visible .func __sinit_lock_release;
// BEGIN GLOBAL FUNCTION DECL: __fp_lock_all
.visible .func __fp_lock_all;
// BEGIN GLOBAL FUNCTION DECL: __fp_unlock_all
.visible .func __fp_unlock_all;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _global_impure_ptr
.extern .const .align 8 .u64 _global_impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _fclose_r
.extern .func (.param .u32 %value_out) _fclose_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fwalk_reent
.extern .func (.param .u32 %value_out) _fwalk_reent (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sread
.extern .func (.param .u32 %value_out) __sread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __swrite
.extern .func (.param .u32 %value_out) __swrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sseek
.extern .func (.param .u64 %value_out) __sseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sclose
.extern .func (.param .u32 %value_out) __sclose (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fwalk
.extern .func (.param .u32 %value_out) _fwalk (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DEF: __sf
.visible .global .align 8 .u64 __sf[66];
// BEGIN FUNCTION DEF: __fp_lock
.func (.param .u32 %value_out) __fp_lock (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.loc 1 338 10
mov.u32 %value,0;
.loc 1 339 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _cleanup_r
.visible .func _cleanup_r (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .u32 %r40;
.reg .u64 %r42;
.reg .u32 %r43;
mov.u64 %r25,%ar0;
.loc 1 222 10
ld.u64 %r22,[%r25+8];
.loc 1 222 6
cvta.global.u64 %r26,__sf;
setp.eq.u64 %r27,%r22,%r26;
@ %r27 bra $L3;
.loc 1 223 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
call (%value_in),_fclose_r,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
$L3:
.loc 1 224 10
ld.u64 %r23,[%r25+16];
.loc 1 224 6
cvta.global.u64 %r31,__sf+176;
setp.eq.u64 %r32,%r23,%r31;
@ %r32 bra $L4;
.loc 1 225 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call (%value_in),_fclose_r,(%out_arg1,%out_arg2);
ld.param.u32 %r35,[%value_in];
}
$L4:
.loc 1 226 10
ld.u64 %r24,[%r25+24];
.loc 1 226 6
cvta.global.u64 %r36,__sf+352;
setp.eq.u64 %r37,%r24,%r36;
@ %r37 bra $L5;
.loc 1 227 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_fclose_r,(%out_arg1,%out_arg2);
ld.param.u32 %r40,[%value_in];
}
$L5:
.loc 1 229 10
mov.u64 %r42,_fclose_r;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),_fwalk_reent,(%out_arg1,%out_arg2);
ld.param.u32 %r43,[%value_in];
}
.loc 1 230 1
ret;
}
// BEGIN FUNCTION DEF: __fp_unlock
.func (.param .u32 %value_out) __fp_unlock (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
$LFB28:
mov.u32 %value,0;
st.param.u32 [%value_out],%value;
ret;
$LFE28:
}
// BEGIN FUNCTION DEF: __sinit$part$0
.func __sinit$part$0 (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .u32 %r30;
.reg .u32 %r33;
.reg .u32 %r39;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u64 %r58;
.reg .u64 %r60;
.reg .u32 %r68;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r81;
.reg .u32 %r97;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r110;
.reg .u32 %r119;
mov.u64 %r24,%ar0;
.loc 1 256 16
mov.u64 %r25,_cleanup_r;
st.u64 [%r24+88],%r25;
.loc 1 258 20
mov.u64 %r26,0;
st.u64 [%r24+1312],%r26;
.loc 1 284 14
cvta.global.u64 %r27,__sf;
.loc 1 284 6
ld.u64 %r28,[%r27+48];
setp.ne.u64 %r29,%r28,0;
@ %r29 bra $L8;
.loc 1 285 18
ld.const.u64 %r23,[_global_impure_ptr];
.loc 1 285 35
mov.u32 %r30,3;
st.u32 [%r23+1320],%r30;
.loc 1 286 34
st.u64 [%r23+1328],%r27;
.loc 1 55 16
cvt.u32.u64 %r33,%r28;
st.u32 [%r27+172],%r33;
.loc 1 51 11
st.u64 [%r27],%r28;
.loc 1 52 11
st.u64 [%r27+8],%r28;
.loc 1 54 15
mov.u32 %r39,4;
st.u32 [%r27+16],%r39;
.loc 1 57 18
st.u64 [%r27+24],%r28;
.loc 1 58 18
st.u32 [%r27+32],%r33;
.loc 1 59 17
st.u32 [%r27+40],%r33;
.loc 1 60 3
add.u64 %r49,%r27,164;
mov.u64 %r48,8;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r33;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r48;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r50,[%value_in];
}
.loc 1 61 16
st.u64 [%r27+48],%r27;
.loc 1 62 14
mov.u64 %r54,__sread;
st.u64 [%r27+56],%r54;
.loc 1 64 15
mov.u64 %r56,__swrite;
st.u64 [%r27+64],%r56;
.loc 1 70 14
mov.u64 %r58,__sseek;
st.u64 [%r27+72],%r58;
.loc 1 72 15
mov.u64 %r60,__sclose;
st.u64 [%r27+80],%r60;
.loc 1 55 16
st.u32 [%r27+348],%r33;
.loc 1 51 11
st.u64 [%r27+176],%r28;
.loc 1 52 11
st.u64 [%r27+184],%r28;
.loc 1 54 15
mov.u32 %r68,65545;
st.u32 [%r27+192],%r68;
.loc 1 57 18
st.u64 [%r27+200],%r28;
.loc 1 58 18
st.u32 [%r27+208],%r33;
.loc 1 59 17
st.u32 [%r27+216],%r33;
.loc 1 60 3
add.u64 %r78,%r27,340;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r78;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r33;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r48;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r79,[%value_in];
}
.loc 1 61 16
add.u64 %r81,%r27,176;
st.u64 [%r27+224],%r81;
.loc 1 62 14
st.u64 [%r27+232],%r54;
.loc 1 64 15
st.u64 [%r27+240],%r56;
.loc 1 70 14
st.u64 [%r27+248],%r58;
.loc 1 72 15
st.u64 [%r27+256],%r60;
.loc 1 55 16
st.u32 [%r27+524],%r33;
.loc 1 51 11
st.u64 [%r27+352],%r28;
.loc 1 52 11
st.u64 [%r27+360],%r28;
.loc 1 54 15
mov.u32 %r97,131090;
st.u32 [%r27+368],%r97;
.loc 1 57 18
st.u64 [%r27+376],%r28;
.loc 1 58 18
st.u32 [%r27+384],%r33;
.loc 1 59 17
st.u32 [%r27+392],%r33;
.loc 1 60 3
add.u64 %r107,%r27,516;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r107;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r33;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r48;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r108,[%value_in];
}
.loc 1 61 16
add.u64 %r110,%r27,352;
st.u64 [%r27+400],%r110;
.loc 1 62 14
st.u64 [%r27+408],%r54;
.loc 1 64 15
st.u64 [%r27+416],%r56;
.loc 1 70 14
st.u64 [%r27+424],%r58;
.loc 1 72 15
st.u64 [%r27+432],%r60;
$L8:
.loc 1 297 17
mov.u32 %r119,1;
st.u32 [%r24+80],%r119;
.loc 1 300 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sfmoreglue
.visible .func (.param .u64 %value_out) __sfmoreglue (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .u64 %r38;
.reg .u32 %r40;
.reg .u64 %r42;
.reg .u64 %r43;
mov.u64 %r29,%ar0;
mov.u32 %r30,%ar1;
.loc 1 132 36
add.u32 %r31,%r30,-1;
cvt.s64.s32 %r32,%r31;
.loc 1 132 41
mul.lo.u64 %r24,%r32,176;
.loc 1 132 5
add.u64 %r35,%r24,200;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r35;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r36,[%value_in];
}
.loc 1 133 6
setp.eq.u64 %r37,%r36,0;
@ %r37 bra $L9;
.loc 1 135 17
mov.u64 %r38,0;
st.u64 [%r36],%r38;
.loc 1 136 18
st.u32 [%r36+8],%r30;
.loc 1 137 19
add.u64 %r26,%r36,24;
.loc 1 137 17
st.u64 [%r36+16],%r26;
.loc 1 138 3
add.u64 %r42,%r24,176;
cvt.u32.u64 %r40,%r38;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r40;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r42;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r43,[%value_in];
}
$L9:
.loc 1 140 1
mov.u64 %value,%r36;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sfp
.visible .func (.param .u64 %value_out) __sfp (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r36;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .pred %r47;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .u64 %r51;
.reg .u16 %r52;
.reg .pred %r53;
.reg .u32 %r54;
.reg .u64 %r55;
.reg .u32 %r57;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .pred %r70;
.reg .pred %r71;
.reg .u64 %r73;
.reg .u64 %r74;
.reg .pred %r75;
.reg .u32 %r77;
.reg .u32 %r79;
.reg .u32 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
mov.u64 %r43,%ar0;
.loc 1 155 21
ld.const.u64 %r22,[_global_impure_ptr];
.loc 1 155 6
ld.u32 %r44,[%r22+80];
setp.ne.u32 %r45,%r44,0;
@ %r45 bra $L15;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call __sinit$part$0,(%out_arg1);
}
$L15:
.loc 1 157 10
add.u64 %r29,%r22,1312;
$L22:
.loc 1 159 15
ld.u64 %r30,[%r29+16];
.loc 1 159 29
ld.u32 %r31,[%r29+8];
.loc 1 159 7
setp.le.s32 %r47,%r31,0;
@ %r47 bra $L16;
add.u64 %r32,%r30,16;
add.u32 %r48,%r31,-1;
cvt.u64.u32 %r49,%r48;
add.u64 %r51,%r30,192;
mad.lo.u64 %r41,%r49,176,%r51;
$L19:
add.u64 %r42,%r32,-16;
.loc 1 160 5
ld.u16 %r52,[%r32];
setp.ne.u16 %r53,%r52,0;
@ %r53 bra $L17;
.loc 1 173 15
mov.u32 %r54,0;
st.u32 [%r42+172],%r54;
.loc 1 179 10
mov.u64 %r55,0;
st.u64 [%r42],%r55;
.loc 1 181 10
st.u64 [%r42+8],%r55;
.loc 1 172 14
mov.u32 %r57,-65535;
st.u32 [%r42+16],%r57;
.loc 1 182 17
st.u64 [%r42+24],%r55;
.loc 1 183 17
st.u32 [%r42+32],%r54;
.loc 1 184 16
st.u32 [%r42+40],%r54;
.loc 1 185 11
add.u64 %r64,%r32,148;
.loc 1 185 3
mov.u64 %r63,8;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r64;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r54;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r63;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r65,[%value_in];
}
.loc 1 187 17
st.u64 [%r42+88],%r55;
.loc 1 188 17
st.u32 [%r42+96],%r54;
.loc 1 189 17
st.u64 [%r42+120],%r55;
.loc 1 190 17
st.u32 [%r42+128],%r54;
.loc 1 192 10
bra $L14;
$L17:
.loc 1 159 7
add.u64 %r32,%r32,176;
setp.ne.u64 %r70,%r32,%r41;
@ %r70 bra $L19;
$L16:
.loc 1 162 12
ld.u64 %r25,[%r29];
.loc 1 162 10
setp.ne.u64 %r71,%r25,0;
@ %r71 bra $L20;
.loc 1 132 5
mov.u64 %r73,728;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r43;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r73;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r74,[%value_in];
}
mov.u64 %r42,%r74;
.loc 1 133 6
setp.ne.u64 %r75,%r42,0;
@ %r75 bra $L21;
.loc 1 163 14
st.u64 [%r29],%r42;
.loc 1 167 13
mov.u32 %r77,12;
st.u32 [%r43],%r77;
.loc 1 168 10
bra $L14;
$L21:
.loc 1 135 17
st.u64 [%r74],%r25;
.loc 1 136 18
mov.u32 %r79,4;
st.u32 [%r74+8],%r79;
.loc 1 137 19
add.u64 %r36,%r74,24;
.loc 1 137 17
st.u64 [%r74+16],%r36;
.loc 1 138 3
mov.u64 %r82,704;
cvt.u32.u64 %r81,%r25;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r81;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r82;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r83,[%value_in];
}
.loc 1 139 10
mov.u64 %r25,%r74;
.loc 1 163 14
st.u64 [%r29],%r25;
$L20:
.loc 1 157 40
mov.u64 %r29,%r25;
.loc 1 159 25
bra $L22;
$L14:
.loc 1 193 1
mov.u64 %value,%r42;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _cleanup
.visible .func _cleanup
{
.reg .u64 %r24;
.loc 1 236 3
ld.const.u64 %r24,[_global_impure_ptr];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call _cleanup_r,(%out_arg1);
}
.loc 1 237 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sinit
.visible .func __sinit (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r24;
.reg .pred %r25;
mov.u64 %r23,%ar0;
.loc 1 249 6
ld.u32 %r24,[%r23+80];
setp.ne.u32 %r25,%r24,0;
@ %r25 bra $L25;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit$part$0,(%out_arg1);
}
$L25:
.loc 1 300 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sfp_lock_acquire
.visible .func __sfp_lock_acquire
{
.loc 1 311 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sfp_lock_release
.visible .func __sfp_lock_release
{
$LFB22:
ret;
$LFE22:
}
// BEGIN GLOBAL FUNCTION DEF: __sinit_lock_acquire
.visible .func __sinit_lock_acquire
{
$LFB24:
ret;
$LFE24:
}
// BEGIN GLOBAL FUNCTION DEF: __sinit_lock_release
.visible .func __sinit_lock_release
{
$LFB26:
ret;
$LFE26:
}
// BEGIN GLOBAL FUNCTION DEF: __fp_lock_all
.visible .func __fp_lock_all
{
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.loc 1 356 10
ld.global.u64 %r25,[_impure_ptr];
mov.u64 %r24,__fp_lock;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_fwalk,(%out_arg1,%out_arg2);
ld.param.u32 %r26,[%value_in];
}
.loc 1 357 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __fp_unlock_all
.visible .func __fp_unlock_all
{
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.loc 1 362 10
ld.global.u64 %r25,[_impure_ptr];
mov.u64 %r24,__fp_unlock;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_fwalk,(%out_arg1,%out_arg2);
ld.param.u32 %r26,[%value_in];
}
.loc 1 365 1
ret;
}
lib_a-fini.o/   1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

/306            1612277262  0     0     100666  2636      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fiprintf_r
.visible .func (.param .u32 %value_out) _fiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/fiprintf.c"
// BEGIN GLOBAL FUNCTION DECL: fiprintf
.visible .func (.param .u32 %value_out) fiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfiprintf_r
.extern .func (.param .u32 %value_out) _vfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _fiprintf_r
.visible .func (.param .u32 %value_out) _fiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 33 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 36 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fiprintf
.visible .func (.param .u32 %value_out) fiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 48 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 51 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fiscanf.o/1612277262  0     0     100666  2631      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: fiscanf
.visible .func (.param .u32 %value_out) fiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fiscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _fiscanf_r
.visible .func (.param .u32 %value_out) _fiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __svfiscanf_r
.extern .func (.param .u32 %value_out) __svfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: fiscanf
.visible .func (.param .u32 %value_out) fiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 33 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 36 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _fiscanf_r
.visible .func (.param .u32 %value_out) _fiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 47 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 50 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-flags.o/  1612277262  0     0     100666  2451      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __sflags
.visible .func (.param .u32 %value_out) __sflags (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/flags.c"
// BEGIN GLOBAL FUNCTION DEF: __sflags
.visible .func (.param .u32 %value_out) __sflags (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r34;
.reg .pred %r35;
.reg .pred %r37;
.reg .pred %r39;
.reg .u32 %r40;
.reg .u16 %r41;
.reg .pred %r42;
.reg .pred %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .u32 %r47;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
.loc 1 39 15
ld.s8 %r22,[%r32];
.loc 1 39 3
cvt.u16.u32 %r34,%r22;
setp.eq.u16 %r35,%r34,114;
@ %r35 bra $L9;
setp.eq.u16 %r37,%r34,119;
@ %r37 bra $L10;
setp.eq.u16 %r39,%r34,97;
@ %r39 bra $L11;
.loc 1 59 19
mov.u32 %r40,22;
st.u32 [%r31],%r40;
.loc 1 60 14
mov.u32 %r30,0;
bra $L1;
$L7:
.loc 1 64 7
cvt.u16.u32 %r41,%r25;
setp.eq.u16 %r42,%r41,43;
@ %r42 bra $L4;
setp.eq.u16 %r44,%r41,120;
@ %r44 bra $L5;
bra $L6;
$L4:
.loc 1 67 35
and.b32 %r23,%r30,-29;
.loc 1 67 8
or.b32 %r30,%r23,16;
.loc 1 68 11
and.b32 %r24,%r27,-4;
.loc 1 68 6
or.b32 %r27,%r24,2;
.loc 1 69 4
bra $L6;
$L5:
.loc 1 86 6
or.b32 %r27,%r27,2048;
.loc 1 87 4
bra $L6;
$L9:
.loc 1 44 9
mov.u32 %r29,0;
.loc 1 43 9
mov.u32 %r27,%r29;
.loc 1 42 11
mov.u32 %r30,4;
bra $L2;
$L10:
.loc 1 39 3
mov.u32 %r29,1536;
mov.u32 %r27,1;
mov.u32 %r30,8;
bra $L2;
$L11:
.loc 1 56 9
mov.u32 %r29,520;
.loc 1 55 9
mov.u32 %r27,1;
.loc 1 54 11
mov.u32 %r30,264;
$L2:
.loc 1 62 9
add.u64 %r28,%r32,1;
.loc 1 62 10
ld.s8 %r25,[%r32+1];
.loc 1 62 9
setp.ne.u32 %r45,%r25,0;
@ %r45 bra $L7;
bra $L8;
$L6:
add.u64 %r28,%r28,1;
.loc 1 62 10
ld.s8 %r25,[%r28];
.loc 1 62 9
setp.ne.u32 %r46,%r25,0;
@ %r46 bra $L7;
$L8:
.loc 1 92 13
or.b32 %r47,%r29,%r27;
.loc 1 92 9
st.u32 [%r33],%r47;
$L1:
.loc 1 94 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fls.o/    1612277262  0     0     100666  797       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: fls
.visible .func (.param .u32 %value_out) fls (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/string/fls.c"
// BEGIN GLOBAL FUNCTION DEF: fls
.visible .func (.param .u32 %value_out) fls (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .pred %r28;
.reg .u32 %r29;
mov.u32 %r27,%ar0;
.loc 1 34 5
setp.eq.u32 %r28,%r27,0;
@ %r28 bra $L3;
.loc 1 37 33
clz.b32 %r23,%r27;
.loc 1 37 31
mov.u32 %r29,32;
sub.u32 %r26,%r29,%r23;
bra $L1;
$L3:
.loc 1 35 10
mov.u32 %r26,%r27;
$L1:
.loc 1 38 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-flsl.o/   1612277262  0     0     100666  806       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: flsl
.visible .func (.param .u32 %value_out) flsl (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/flsl.c"
// BEGIN GLOBAL FUNCTION DEF: flsl
.visible .func (.param .u32 %value_out) flsl (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
mov.u64 %r27,%ar0;
.loc 1 34 5
setp.eq.u64 %r28,%r27,0;
@ %r28 bra $L3;
.loc 1 37 33
clz.b64 %r23,%r27;
.loc 1 37 31
mov.u32 %r29,64;
sub.u32 %r26,%r29,%r23;
bra $L1;
$L3:
.loc 1 35 10
cvt.u32.u64 %r26,%r27;
$L1:
.loc 1 38 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-flsll.o/  1612277262  0     0     100666  811       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: flsll
.visible .func (.param .u32 %value_out) flsll (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/flsll.c"
// BEGIN GLOBAL FUNCTION DEF: flsll
.visible .func (.param .u32 %value_out) flsll (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
mov.u64 %r27,%ar0;
.loc 1 34 5
setp.eq.u64 %r28,%r27,0;
@ %r28 bra $L3;
.loc 1 37 33
clz.b64 %r23,%r27;
.loc 1 37 31
mov.u32 %r29,64;
sub.u32 %r26,%r29,%r23;
bra $L1;
$L3:
.loc 1 35 10
cvt.u32.u64 %r26,%r27;
$L1:
.loc 1 38 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fopen.o/  1612277262  0     0     100666  5873      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fopen_r
.visible .func (.param .u64 %value_out) _fopen_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fopen.c"
// BEGIN GLOBAL FUNCTION DECL: fopen
.visible .func (.param .u64 %value_out) fopen (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sflags
.extern .func (.param .u32 %value_out) __sflags (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sfp
.extern .func (.param .u64 %value_out) __sfp (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _open_r
.extern .func (.param .u32 %value_out) _open_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_acquire
.extern .func __sfp_lock_acquire;
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_release
.extern .func __sfp_lock_release;
// BEGIN GLOBAL FUNCTION DECL: __sread
.extern .func (.param .u32 %value_out) __sread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __swrite
.extern .func (.param .u32 %value_out) __swrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sseek
.extern .func (.param .u64 %value_out) __sseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sclose
.extern .func (.param .u32 %value_out) __sclose (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fseek_r
.extern .func (.param .u32 %value_out) _fseek_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _fopen_r
.visible .func (.param .u64 %value_out) _fopen_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u16 %r46;
.reg .u16 %r47;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u16 %r53;
.reg .pred %r55;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u32 %r60;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
.loc 1 124 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sflags,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r35,[%value_in];
}
.loc 1 124 6
setp.ne.u32 %r36,%r35,0;
@ %r36 bra $L2;
$L4:
.loc 1 125 12
mov.u64 %r28,0;
bra $L1;
$L2:
.loc 1 126 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
call (%value_in),__sfp,(%out_arg1);
ld.param.u64 %r38,[%value_in];
}
mov.u64 %r28,%r38;
.loc 1 126 6
setp.eq.u64 %r39,%r28,0;
@ %r39 bra $L4;
.loc 1 129 12
mov.u32 %r43,438;
ld.u32 %r42,[%frame];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r42;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r43;
call (%value_in),_open_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r44,[%value_in];
}
.loc 1 129 6
setp.ge.s32 %r45,%r44,0;
@ %r45 bra $L5;
.loc 1 131 7
{
call __sfp_lock_acquire;
}
.loc 1 132 18
mov.u16 %r46,0;
st.u16 [%r28+16],%r46;
.loc 1 136 7
{
call __sfp_lock_release;
}
.loc 1 137 14
mov.u64 %r28,0;
bra $L1;
$L5:
.loc 1 142 13
st.u16 [%r28+18],%r44;
.loc 1 143 14
cvt.u16.u32 %r47,%r35;
st.u16 [%r28+16],%r47;
.loc 1 144 15
st.u64 [%r28+48],%r28;
.loc 1 145 13
mov.u64 %r49,__sread;
st.u64 [%r28+56],%r49;
.loc 1 146 14
mov.u64 %r50,__swrite;
st.u64 [%r28+64],%r50;
.loc 1 147 13
mov.u64 %r51,__sseek;
st.u64 [%r28+72],%r51;
.loc 1 148 14
mov.u64 %r52,__sclose;
st.u64 [%r28+80],%r52;
.loc 1 150 6
and.b16 %r53,%r47,256;
setp.eq.u16 %r55,%r53,0;
@ %r55 bra $L1;
.loc 1 151 5
mov.u32 %r59,2;
mov.u64 %r58,0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r58;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r59;
call (%value_in),_fseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r60,[%value_in];
}
$L1:
.loc 1 160 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fopen
.visible .func (.param .u64 %value_out) fopen (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 168 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),_fopen_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r30,[%value_in];
}
.loc 1 169 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-fprintf.o/1612277262  0     0     100666  2623      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fprintf_r
.visible .func (.param .u32 %value_out) _fprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/fprintf.c"
// BEGIN GLOBAL FUNCTION DECL: fprintf
.visible .func (.param .u32 %value_out) fprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfprintf_r
.extern .func (.param .u32 %value_out) _vfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _fprintf_r
.visible .func (.param .u32 %value_out) _fprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 33 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 36 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fprintf
.visible .func (.param .u32 %value_out) fprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 54 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 57 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fputc.o/  1612277262  0     0     100666  2901      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fputc_r
.visible .func (.param .u32 %value_out) _fputc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fputc.c"
// BEGIN GLOBAL FUNCTION DECL: fputc
.visible .func (.param .u32 %value_out) fputc (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _putc_r
.extern .func (.param .u32 %value_out) _putc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _fputc_r
.visible .func (.param .u32 %value_out) _fputc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .u32 %r28;
.reg .pred %r29;
.reg .u32 %r34;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 95 3
setp.eq.u64 %r27,%r24,0;
@ %r27 bra $L2;
ld.u32 %r28,[%r24+80];
setp.ne.u32 %r29,%r28,0;
@ %r29 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 97 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
call (%value_in),_putc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r34,[%value_in];
}
.loc 1 100 1
mov.u32 %value,%r34;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fputc
.visible .func (.param .u32 %value_out) fputc (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .u32 %r28;
.reg .pred %r29;
.reg .u32 %r34;
mov.u32 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 109 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 111 3
setp.eq.u64 %r27,%r23,0;
@ %r27 bra $L7;
ld.u32 %r28,[%r23+80];
setp.ne.u32 %r29,%r28,0;
@ %r29 bra $L7;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L7:
.loc 1 113 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
call (%value_in),_putc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r34,[%value_in];
}
.loc 1 119 1
mov.u32 %value,%r34;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fputs.o/  1612277262  0     0     100666  3661      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fputs_r
.visible .func (.param .u32 %value_out) _fputs_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fputs.c"
// BEGIN GLOBAL FUNCTION DECL: fputs
.visible .func (.param .u32 %value_out) fputs (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sfvwrite_r
.extern .func (.param .u32 %value_out) __sfvwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _fputs_r
.visible .func (.param .u32 %value_out) _fputs_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u32 %r36;
.reg .pred %r37;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u16 %r41;
.reg .u16 %r42;
.reg .pred %r43;
.reg .u16 %r44;
.reg .u32 %r46;
.reg .u32 %r50;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
mov.u64 %r32,%ar2;
.loc 1 98 16
st.u64 [%frame+24],%r31;
.loc 1 99 33
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r34,[%value_in];
}
.loc 1 99 31
st.u64 [%frame+16],%r34;
.loc 1 99 15
st.u64 [%frame+32],%r34;
.loc 1 100 15
add.u64 %r35,%frame,24;
st.u64 [%frame],%r35;
.loc 1 101 18
mov.u32 %r36,1;
st.u32 [%frame+8],%r36;
.loc 1 103 3
setp.eq.u64 %r37,%r30,0;
@ %r37 bra $L2;
ld.u32 %r38,[%r30+80];
setp.ne.u32 %r39,%r38,0;
@ %r39 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 106 3
ld.u16 %r42,[%r32+16];
and.b16 %r41,%r42,8192;
setp.ne.u16 %r43,%r41,0;
@ %r43 bra $L3;
.loc 1 105 3
ld.u32 %r24,[%r32+172];
.loc 1 106 3
or.b16 %r44,%r42,8192;
st.u16 [%r32+16],%r44;
and.b32 %r46,%r24,-8193;
st.u32 [%r32+172],%r46;
$L3:
.loc 1 107 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sfvwrite_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r50,[%value_in];
}
.loc 1 133 1
mov.u32 %value,%r50;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fputs
.visible .func (.param .u32 %value_out) fputs (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u32 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 140 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),_fputs_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r30,[%value_in];
}
.loc 1 141 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fread.o/  1612277262  0     0     100666  8985      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fread_r
.visible .func (.param .u64 %value_out) _fread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdio/fread.c"
// BEGIN GLOBAL FUNCTION DECL: fread
.visible .func (.param .u64 %value_out) fread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __srefill_r
.extern .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _fread_r
.visible .func (.param .u64 %value_out) _fread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r34;
.reg .u64 %r38;
.reg .u64 %r42;
.reg .u64 %r45;
.reg .u64 %r53;
.reg .u64 %r56;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r60;
.reg .u64 %r62;
.reg .u32 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u32 %r74;
.reg .pred %r75;
.reg .u16 %r77;
.reg .u16 %r78;
.reg .pred %r79;
.reg .u16 %r80;
.reg .u32 %r83;
.reg .pred %r84;
.reg .u32 %r85;
.reg .u16 %r86;
.reg .u16 %r87;
.reg .pred %r88;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u32 %r95;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .pred %r98;
.reg .u64 %r100;
.reg .pred %r101;
.reg .u64 %r104;
.reg .u32 %r107;
.reg .u32 %r108;
.reg .pred %r109;
.reg .u64 %r110;
.reg .u64 %r111;
.reg .u64 %r116;
.reg .u64 %r117;
.reg .u64 %r118;
.reg .u32 %r121;
.reg .pred %r122;
.reg .u64 %r123;
.reg .u64 %r124;
.reg .pred %r125;
.reg .u64 %r129;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r132;
.reg .u64 %r133;
.reg .u64 %r134;
.reg .pred %r136;
mov.u64 %r67,%ar0;
mov.u64 %r68,%ar1;
mov.u64 %r69,%ar2;
mov.u64 %r70,%ar3;
mov.u64 %r71,%ar4;
.loc 1 155 14
mul.lo.u64 %r66,%r70,%r69;
.loc 1 155 6
setp.eq.u64 %r72,%r66,0;
@ %r72 bra $L1;
.loc 1 158 3
setp.eq.u64 %r73,%r67,0;
@ %r73 bra $L3;
ld.u32 %r74,[%r67+80];
setp.ne.u32 %r75,%r74,0;
@ %r75 bra $L3;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r67;
call __sinit,(%out_arg1);
}
$L3:
.loc 1 161 3
ld.s16 %r24,[%r71+16];
cvt.u16.u32 %r78,%r24;
and.b16 %r77,%r78,8192;
setp.ne.u16 %r79,%r77,0;
@ %r79 bra $L4;
.loc 1 160 3
ld.u32 %r23,[%r71+172];
.loc 1 161 3
or.b16 %r80,%r78,8192;
cvt.s32.s16 %r24,%r80;
st.u16 [%r71+16],%r80;
and.b32 %r83,%r23,-8193;
st.u32 [%r71+172],%r83;
$L4:
.loc 1 162 9
ld.u32 %r64,[%r71+8];
.loc 1 162 6
setp.lt.s32 %r84,%r64,0;
@ %r84 bra $L5;
.loc 1 173 33
cvt.s64.s32 %r42,%r64;
bra $L6;
$L5:
.loc 1 163 12
mov.u32 %r85,0;
st.u32 [%r71+8],%r85;
mov.u64 %r42,0;
cvt.u32.u64 %r64,%r42;
$L6:
.loc 1 174 45
ld.u64 %r65,[%r71];
.loc 1 170 6
cvt.u16.u32 %r87,%r24;
and.b16 %r86,%r87,2;
setp.eq.u16 %r88,%r86,0;
@ %r88 bra $L16;
.loc 1 173 47
min.u64 %r29,%r42,%r66;
.loc 1 174 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r68;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r65;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r92,[%value_in];
}
.loc 1 175 14
ld.u64 %r94,[%r71];
add.u64 %r93,%r94,%r29;
st.u64 [%r71],%r93;
.loc 1 176 14
ld.u32 %r96,[%r71+8];
cvt.u32.u64 %r97,%r29;
sub.u32 %r95,%r96,%r97;
st.u32 [%r71+8],%r95;
.loc 1 178 13
sub.u64 %r25,%r66,%r29;
.loc 1 181 11
ld.u64 %r34,[%r71+88];
.loc 1 181 10
setp.eq.u64 %r98,%r34,0;
@ ! %r98 bra $L26;
setp.ne.u64 %r136,%r25,0;
bra $L8;
$L26:
.loc 1 181 22
setp.ne.u64 %r136,%r25,0;
@ %r136 bra $L9;
$L13:
.loc 1 256 10
mov.u64 %r66,%r70;
bra $L1;
$L9:
.loc 1 182 2
add.u64 %r100,%r71,116;
setp.eq.u64 %r101,%r34,%r100;
@ %r101 bra $L10;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r67;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call _free_r,(%out_arg1,%out_arg2);
}
$L10:
mov.u64 %r104,0;
st.u64 [%r71+88],%r104;
bra $L8;
$L12:
.loc 1 189 10
ld.u64 %r58,[%r71+24];
.loc 1 190 11
ld.u64 %r59,[%r71];
.loc 1 191 8
ld.u32 %r60,[%r71+32];
.loc 1 193 18
st.u64 [%r71+24],%r53;
.loc 1 194 18
st.u32 [%r71+32],%r25;
.loc 1 195 11
st.u64 [%r71],%r53;
.loc 1 196 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r67;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r71;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r107,[%value_in];
}
.loc 1 198 18
st.u64 [%r71+24],%r58;
.loc 1 199 18
st.u32 [%r71+32],%r60;
.loc 1 200 11
st.u64 [%r71],%r59;
.loc 1 201 15
ld.s32 %r38,[%r71+8];
.loc 1 201 10
sub.u64 %r62,%r25,%r38;
.loc 1 202 6
add.u64 %r53,%r53,%r38;
.loc 1 203 11
mov.u32 %r108,0;
st.u32 [%r71+8],%r108;
.loc 1 204 7
setp.eq.u32 %r109,%r107,0;
@ %r109 bra $L17;
.loc 1 214 22
add.u64 %r110,%r38,%r66;
sub.u64 %r111,%r110,%r25;
.loc 1 214 31
div.u64 %r66,%r111,%r69;
bra $L1;
$L8:
.loc 1 177 9
add.u64 %r53,%r68,%r29;
bra $L11;
$L17:
.loc 1 201 10
mov.u64 %r25,%r62;
setp.ne.u64 %r136,%r25,0;
$L11:
.loc 1 185 13
@ %r136 bra $L12;
bra $L13;
$L15:
.loc 1 223 11
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r68;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r65;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r45;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r116,[%value_in];
}
.loc 1 224 11
ld.u64 %r118,[%r71];
add.u64 %r117,%r118,%r45;
st.u64 [%r71],%r117;
.loc 1 226 6
add.u64 %r68,%r68,%r45;
.loc 1 227 10
sub.u64 %r56,%r26,%r45;
.loc 1 228 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r67;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r71;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r121,[%value_in];
}
.loc 1 228 7
setp.ne.u32 %r122,%r121,0;
@ %r122 bra $L14;
.loc 1 223 42
ld.u64 %r65,[%r71];
.loc 1 221 25
ld.u32 %r64,[%r71+8];
.loc 1 227 10
mov.u64 %r26,%r56;
bra $L7;
$L14:
.loc 1 239 22
add.u64 %r123,%r45,%r66;
sub.u64 %r124,%r123,%r26;
.loc 1 239 31
div.u64 %r66,%r124,%r69;
bra $L1;
$L16:
mov.u64 %r26,%r66;
$L7:
.loc 1 221 25
cvt.s64.s32 %r45,%r64;
.loc 1 221 13
setp.gt.u64 %r125,%r26,%r45;
@ %r125 bra $L15;
.loc 1 242 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r68;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r65;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r129,[%value_in];
}
.loc 1 243 14
ld.u32 %r131,[%r71+8];
cvt.u32.u64 %r132,%r26;
sub.u32 %r130,%r131,%r132;
st.u32 [%r71+8],%r130;
.loc 1 244 14
ld.u64 %r134,[%r71];
add.u64 %r133,%r134,%r26;
st.u64 [%r71],%r133;
.loc 1 256 10
mov.u64 %r66,%r70;
$L1:
.loc 1 257 1
mov.u64 %value,%r66;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fread
.visible .func (.param .u64 %value_out) fread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 266 11
ld.global.u64 %r33,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
call (%value_in),_fread_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 267 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-free.o/   1612277262  0     0     100666  745       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __nvptx_free
.visible .func __nvptx_free (.param .u64 %in_ar0);
.file 1 "../../../../../../newlib/libc/machine/nvptx/free.c"
// BEGIN GLOBAL FUNCTION DECL: free
.extern .func free (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __nvptx_free
.visible .func __nvptx_free (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .pred %r24;
.reg .u64 %r26;
mov.u64 %r23,%ar0;
.loc 1 24 6
setp.eq.u64 %r24,%r23,0;
@ %r24 bra $L1;
.loc 1 25 5
add.u64 %r26,%r23,-8;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call free,(%out_arg1);
}
$L1:
.loc 1 26 1
ret;
}

lib_a-freer.o/  1612277262  0     0     100666  183       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_mallocr
.visible .global .align 4 .u32 _dummy_mallocr[1] =
{1 };

lib_a-freopen.o/1612277262  0     0     100666  11119     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _freopen_r
.visible .func (.param .u64 %value_out) _freopen_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/freopen.c"
// BEGIN GLOBAL FUNCTION DECL: freopen
.visible .func (.param .u64 %value_out) freopen (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sflags
.extern .func (.param .u32 %value_out) __sflags (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _fclose_r
.extern .func (.param .u32 %value_out) _fclose_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _open_r
.extern .func (.param .u32 %value_out) _open_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_acquire
.extern .func __sfp_lock_acquire;
// BEGIN GLOBAL FUNCTION DECL: __sfp_lock_release
.extern .func __sfp_lock_release;
// BEGIN GLOBAL FUNCTION DECL: __sread
.extern .func (.param .u32 %value_out) __sread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __swrite
.extern .func (.param .u32 %value_out) __swrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sseek
.extern .func (.param .u64 %value_out) __sseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sclose
.extern .func (.param .u32 %value_out) __sclose (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _freopen_r
.visible .func (.param .u64 %value_out) _freopen_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .pred %r51;
.reg .u32 %r52;
.reg .pred %r53;
.reg .u32 %r58;
.reg .pred %r59;
.reg .u32 %r62;
.reg .pred %r63;
.reg .u16 %r64;
.reg .pred %r65;
.reg .u16 %r66;
.reg .u16 %r67;
.reg .pred %r68;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u32 %r76;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u16 %r82;
.reg .u16 %r83;
.reg .pred %r84;
.reg .u32 %r87;
.reg .u16 %r88;
.reg .u16 %r89;
.reg .pred %r90;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u32 %r97;
.reg .pred %r99;
.reg .u64 %r100;
.reg .pred %r101;
.reg .u64 %r104;
.reg .u32 %r105;
.reg .pred %r106;
.reg .u64 %r109;
.reg .u32 %r110;
.reg .u16 %r111;
.reg .u16 %r112;
.reg .u32 %r113;
.reg .u32 %r114;
.reg .u64 %r117;
.reg .u64 %r118;
.reg .u64 %r119;
.reg .pred %r120;
.reg .u16 %r121;
.reg .u64 %r122;
.reg .u64 %r123;
.reg .u64 %r124;
.reg .u64 %r125;
.reg .pred %r127;
.reg .u16 %r128;
.reg .u16 %r129;
mov.u64 %r47,%ar0;
mov.u64 %r48,%ar1;
mov.u64 %r49,%ar2;
mov.u64 %r50,%ar3;
.loc 1 87 3
setp.eq.u64 %r51,%r47,0;
@ %r51 bra $L2;
ld.u32 %r52,[%r47+80];
setp.ne.u32 %r53,%r52,0;
@ %r53 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 99 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r49;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sflags,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r58,[%value_in];
}
.loc 1 99 6
setp.ne.u32 %r59,%r58,0;
@ %r59 bra $L3;
.loc 1 106 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r50;
call (%value_in),_fclose_r,(%out_arg1,%out_arg2);
ld.param.u32 %r62,[%value_in];
}
.loc 1 107 14
mov.u64 %r46,0;
bra $L1;
$L3:
.loc 1 118 9
ld.s16 %r23,[%r50+16];
.loc 1 118 6
setp.ne.u32 %r63,%r23,0;
@ %r63 bra $L5;
.loc 1 119 16
mov.u16 %r64,32;
st.u16 [%r50+16],%r64;
.loc 1 137 6
setp.eq.u64 %r65,%r48,0;
@ %r65 bra $L6;
bra $L7;
$L5:
.loc 1 122 10
cvt.u16.u32 %r67,%r23;
and.b16 %r66,%r67,8;
setp.eq.u16 %r68,%r66,0;
@ %r68 bra $L8;
.loc 1 123 2
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r50;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r71,[%value_in];
}
$L8:
.loc 1 128 13
ld.u64 %r25,[%r50+80];
.loc 1 128 10
setp.eq.u64 %r72,%r25,0;
@ %r72 bra $L9;
.loc 1 129 2
ld.u64 %r42,[%r50+48];
.loc 1 128 30
setp.eq.u64 %r73,%r48,0;
@ %r73 bra $L10;
.loc 1 129 2
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r25,(%out_arg1,%out_arg2),$LCT0;
ld.param.u32 %r76,[%value_in];
}
$L7:
.loc 1 139 11
mov.u32 %r80,438;
ld.u32 %r79,[%frame];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r48;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r79;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r80;
call (%value_in),_open_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r81,[%value_in];
}
mov.u32 %r37,%r81;
.loc 1 140 9
ld.u32 %r38,[%r47];
ld.u16 %r83,[%r50+16];
and.b16 %r82,%r83,128;
cvt.s32.s16 %r41,%r82;
bra $L11;
$L6:
.loc 1 174 10
ld.u64 %r25,[%r50+80];
.loc 1 174 7
setp.eq.u64 %r84,%r25,0;
@ %r84 bra $L18;
.loc 1 175 6
ld.u64 %r42,[%r50+48];
$L10:
{
.param .u32 %value_in;
$LCT1:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r25,(%out_arg1,%out_arg2),$LCT1;
ld.param.u32 %r87,[%value_in];
}
ld.u16 %r89,[%r50+16];
and.b16 %r88,%r89,128;
cvt.s32.s16 %r41,%r88;
.loc 1 173 6
mov.u32 %r38,9;
.loc 1 159 9
mov.u32 %r37,-1;
$L11:
.loc 1 186 6
setp.eq.u32 %r90,%r41,0;
@ %r90 bra $L12;
.loc 1 187 5
ld.u64 %r93,[%r50+24];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r93;
call _free_r,(%out_arg1,%out_arg2);
}
bra $L12;
$L18:
.loc 1 173 6
mov.u32 %r38,9;
.loc 1 159 9
mov.u32 %r37,-1;
$L12:
.loc 1 190 10
mov.u64 %r94,0;
st.u64 [%r50],%r94;
.loc 1 189 10
st.u64 [%r50+8],%r94;
.loc 1 191 17
st.u64 [%r50+24],%r94;
.loc 1 192 17
cvt.u32.u64 %r97,%r94;
st.u32 [%r50+32],%r97;
.loc 1 193 16
st.u32 [%r50+40],%r97;
.loc 1 194 7
ld.u64 %r27,[%r50+88];
.loc 1 194 6
setp.eq.u64 %r99,%r27,0;
@ %r99 bra $L13;
.loc 1 195 5
add.u64 %r100,%r50,116;
setp.eq.u64 %r101,%r27,%r100;
@ %r101 bra $L14;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call _free_r,(%out_arg1,%out_arg2);
}
$L14:
mov.u64 %r104,0;
st.u64 [%r50+88],%r104;
$L13:
.loc 1 196 17
mov.u32 %r105,0;
st.u32 [%r50+96],%r105;
.loc 1 197 7
ld.u64 %r29,[%r50+120];
.loc 1 197 6
setp.eq.u64 %r106,%r29,0;
@ %r106 bra $L15;
.loc 1 198 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
call _free_r,(%out_arg1,%out_arg2);
}
mov.u64 %r109,0;
st.u64 [%r50+120],%r109;
$L15:
.loc 1 199 17
mov.u32 %r110,0;
st.u32 [%r50+128],%r110;
.loc 1 200 14
ld.u16 %r112,[%r50+16];
and.b16 %r111,%r112,-8193;
st.u16 [%r50+16],%r111;
.loc 1 201 15
ld.u32 %r114,[%r50+172];
and.b32 %r113,%r114,-8193;
st.u32 [%r50+172],%r113;
.loc 1 202 11
add.u64 %r118,%r50,164;
.loc 1 202 3
mov.u64 %r117,8;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r118;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r110;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r117;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r119,[%value_in];
}
.loc 1 204 6
setp.ge.s32 %r120,%r37,0;
@ %r120 bra $L16;
.loc 1 206 7
{
call __sfp_lock_acquire;
}
.loc 1 207 18
cvt.u16.u32 %r121,%r110;
st.u16 [%r50+16],%r121;
.loc 1 208 19
st.u32 [%r47],%r38;
.loc 1 214 7
{
call __sfp_lock_release;
}
.loc 1 218 14
mov.u64 %r46,0;
bra $L1;
$L16:
.loc 1 221 14
st.u16 [%r50+16],%r58;
.loc 1 222 13
st.u16 [%r50+18],%r37;
.loc 1 223 15
st.u64 [%r50+48],%r50;
.loc 1 224 13
mov.u64 %r122,__sread;
st.u64 [%r50+56],%r122;
.loc 1 225 14
mov.u64 %r123,__swrite;
st.u64 [%r50+64],%r123;
.loc 1 226 13
mov.u64 %r124,__sseek;
st.u64 [%r50+72],%r124;
.loc 1 227 14
mov.u64 %r125,__sclose;
st.u64 [%r50+80],%r125;
.loc 1 239 10
mov.u64 %r46,%r50;
bra $L1;
$L9:
.loc 1 137 6
setp.ne.u64 %r127,%r48,0;
@ %r127 bra $L7;
ld.u16 %r129,[%r50+16];
and.b16 %r128,%r129,128;
cvt.s32.s16 %r41,%r128;
.loc 1 173 6
mov.u32 %r38,9;
.loc 1 159 9
mov.u32 %r37,-1;
bra $L11;
$L1:
.loc 1 240 1
mov.u64 %value,%r46;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: freopen
.visible .func (.param .u64 %value_out) freopen (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 249 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_freopen_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 250 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-fscanf.o/ 1612277262  0     0     100666  2610      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: fscanf
.visible .func (.param .u32 %value_out) fscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _fscanf_r
.visible .func (.param .u32 %value_out) _fscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfscanf_r
.extern .func (.param .u32 %value_out) _vfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: fscanf
.visible .func (.param .u32 %value_out) fscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 33 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 36 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _fscanf_r
.visible .func (.param .u32 %value_out) _fscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 53 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 56 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fseek.o/  1612277262  0     0     100666  2668      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fseek_r
.visible .func (.param .u32 %value_out) _fseek_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/fseek.c"
// BEGIN GLOBAL FUNCTION DECL: fseek
.visible .func (.param .u32 %value_out) fseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _fseeko_r
.extern .func (.param .u32 %value_out) _fseeko_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _fseek_r
.visible .func (.param .u32 %value_out) _fseek_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u32 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 89 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_fseeko_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r31,[%value_in];
}
.loc 1 90 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fseek
.visible .func (.param .u32 %value_out) fseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 89 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_fseeko_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 100 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fsetpos.o/1612277262  0     0     100666  2691      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fsetpos_r
.visible .func (.param .u32 %value_out) _fsetpos_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fsetpos.c"
// BEGIN GLOBAL FUNCTION DECL: fsetpos
.visible .func (.param .u32 %value_out) fsetpos (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _fseek_r
.extern .func (.param .u32 %value_out) _fseek_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _fsetpos_r
.visible .func (.param .u32 %value_out) _fsetpos_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u32 %r36;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 66 11
mov.u32 %r32,0;
ld.u64 %r31,[%r28];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r32;
call (%value_in),_fseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 68 6
set.u32.ne.u32 %r36,%r33,0;
neg.s32 %value,%r36;
.loc 1 71 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fsetpos
.visible .func (.param .u32 %value_out) fsetpos (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u32 %r37;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 66 11
ld.global.u64 %r33,[_impure_ptr];
mov.u32 %r32,0;
ld.u64 %r31,[%r28];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r32;
call (%value_in),_fseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r34,[%value_in];
}
.loc 1 68 6
set.u32.ne.u32 %r37,%r34,0;
neg.s32 %value,%r37;
.loc 1 80 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-fstatr.o/ 1612277262  0     0     100666  1580      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fstat_r
.visible .func (.param .u32 %value_out) _fstat_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/fstatr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: fstat
.extern .func (.param .u32 %value_out) fstat (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _fstat_r
.visible .func (.param .u32 %value_out) _fstat_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 54 9
mov.u32 %r27,0;
st.global.u32 [errno],%r27;
.loc 1 55 14
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),fstat,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 55 6
setp.ne.u32 %r31,%r30,-1;
@ %r31 bra $L1;
.loc 1 55 49
ld.global.u32 %r22,[errno];
.loc 1 55 40
setp.eq.u32 %r32,%r22,0;
@ %r32 bra $L1;
.loc 1 56 17
st.u32 [%r24],%r22;
$L1:
.loc 1 58 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-ftell.o/  1612277262  0     0     100666  1856      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _ftell_r
.visible .func (.param .u64 %value_out) _ftell_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/ftell.c"
// BEGIN GLOBAL FUNCTION DECL: ftell
.visible .func (.param .u64 %value_out) ftell (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _ftello_r
.extern .func (.param .u64 %value_out) _ftello_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _ftell_r
.visible .func (.param .u64 %value_out) _ftell_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r27;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 91 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_ftello_r,(%out_arg1,%out_arg2);
ld.param.u64 %r27,[%value_in];
}
.loc 1 98 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: ftell
.visible .func (.param .u64 %value_out) ftell (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r28;
mov.u64 %r24,%ar0;
.loc 1 91 9
ld.global.u64 %r27,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_ftello_r,(%out_arg1,%out_arg2);
ld.param.u64 %r28,[%value_in];
}
.loc 1 106 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-fvwrite.o/1612277262  0     0     100666  18764     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __sfvwrite_r
.visible .func (.param .u32 %value_out) __sfvwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/fvwrite.c"
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.extern .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _realloc_r
.extern .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memmove
.extern .func (.param .u64 %value_out) memmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: __sfvwrite_r
.visible .func (.param .u32 %value_out) __sfvwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r26;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u32 %r52;
.reg .u64 %r56;
.reg .u32 %r58;
.reg .u64 %r67;
.reg .u32 %r75;
.reg .u64 %r76;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r81;
.reg .u64 %r86;
.reg .u64 %r90;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r96;
.reg .u64 %r99;
.reg .u64 %r100;
.reg .u32 %r101;
.reg .u64 %r102;
.reg .u32 %r103;
.reg .u32 %r104;
.reg .u32 %r106;
.reg .u64 %r107;
.reg .u32 %r108;
.reg .u32 %r116;
.reg .u64 %r117;
.reg .u32 %r118;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u64 %r122;
.reg .u32 %r124;
.reg .u32 %r131;
.reg .u64 %r132;
.reg .u64 %r133;
.reg .u64 %r134;
.reg .u32 %r135;
.reg .u64 %r136;
.reg .u64 %r137;
.reg .u64 %r138;
.reg .u64 %r139;
.reg .pred %r140;
.reg .u16 %r141;
.reg .u16 %r142;
.reg .pred %r143;
.reg .u64 %r144;
.reg .pred %r145;
.reg .u32 %r148;
.reg .pred %r149;
.reg .u16 %r150;
.reg .u16 %r151;
.reg .pred %r152;
.reg .pred %r153;
.reg .u32 %r157;
.reg .u64 %r158;
.reg .u32 %r159;
.reg .pred %r160;
.reg .u64 %r161;
.reg .pred %r162;
.reg .u16 %r163;
.reg .pred %r165;
.reg .pred %r166;
.reg .u16 %r167;
.reg .u16 %r168;
.reg .pred %r169;
.reg .pred %r170;
.reg .u16 %r171;
.reg .pred %r173;
.reg .u32 %r174;
.reg .u32 %r175;
.reg .u32 %r177;
.reg .u32 %r178;
.reg .u32 %r179;
.reg .u32 %r180;
.reg .u64 %r182;
.reg .u64 %r183;
.reg .pred %r184;
.reg .u32 %r185;
.reg .u32 %r186;
.reg .u16 %r188;
.reg .u16 %r189;
.reg .pred %r190;
.reg .u64 %r193;
.reg .pred %r194;
.reg .u32 %r195;
.reg .u64 %r199;
.reg .u64 %r200;
.reg .u16 %r201;
.reg .u16 %r202;
.reg .u16 %r203;
.reg .u64 %r207;
.reg .pred %r208;
.reg .u64 %r211;
.reg .u16 %r212;
.reg .u16 %r213;
.reg .u32 %r214;
.reg .u32 %r215;
.reg .pred %r216;
.reg .u64 %r220;
.reg .u32 %r221;
.reg .u32 %r222;
.reg .u64 %r223;
.reg .u64 %r224;
.reg .u64 %r225;
.reg .pred %r226;
.reg .u64 %r227;
.reg .pred %r228;
.reg .u64 %r229;
.reg .u64 %r230;
.reg .u64 %r234;
.reg .u32 %r235;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .pred %r238;
.reg .u32 %r241;
.reg .pred %r242;
.reg .u32 %r245;
.reg .u32 %r246;
.reg .u64 %r251;
.reg .u32 %r252;
.reg .u64 %r253;
.reg .pred %r254;
.reg .u64 %r255;
.reg .pred %r256;
.reg .pred %r257;
.reg .pred %r258;
.reg .pred %r259;
.reg .u32 %r261;
.reg .u64 %r263;
.reg .pred %r264;
.reg .u64 %r265;
.reg .u64 %r266;
.reg .u32 %r267;
.reg .u64 %r268;
.reg .u64 %r269;
.reg .u32 %r270;
.reg .u64 %r272;
.reg .u32 %r273;
.reg .u32 %r274;
.reg .u32 %r276;
.reg .u32 %r277;
.reg .u16 %r278;
.reg .u16 %r279;
.reg .u16 %r280;
.reg .u32 %r281;
.reg .u16 %r282;
.reg .pred %r283;
.reg .u64 %r287;
.reg .u64 %r288;
.reg .u64 %r289;
.reg .u32 %r292;
.reg .pred %r293;
.reg .pred %r294;
.reg .u64 %r299;
.reg .u32 %r300;
.reg .u64 %r301;
.reg .pred %r302;
.reg .u64 %r306;
.reg .u32 %r307;
.reg .u32 %r308;
.reg .u64 %r309;
.reg .u64 %r310;
.reg .pred %r311;
.reg .u32 %r314;
.reg .pred %r315;
.reg .u64 %r316;
.reg .pred %r317;
.reg .u16 %r318;
.reg .u16 %r319;
mov.u64 %r136,%ar0;
mov.u64 %r137,%ar1;
mov.u64 %r138,%ar2;
.loc 1 59 6
ld.u64 %r139,[%r138+16];
setp.ne.u64 %r140,%r139,0;
@ %r140 bra $L2;
$L10:
.loc 1 60 12
mov.u32 %r135,0;
bra $L1;
$L2:
.loc 1 63 7
ld.s16 %r124,[%r137+16];
.loc 1 63 6
cvt.u16.u32 %r142,%r124;
and.b16 %r141,%r142,8;
setp.eq.u16 %r143,%r141,0;
@ %r143 bra $L4;
.loc 1 63 7
ld.u64 %r144,[%r137+24];
setp.ne.u64 %r145,%r144,0;
@ %r145 bra $L5;
$L4:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r137;
call (%value_in),__swsetup_r,(%out_arg1,%out_arg2);
ld.param.u32 %r148,[%value_in];
}
setp.ne.u32 %r149,%r148,0;
@ %r149 bra $L39;
.loc 1 89 9
ld.s16 %r124,[%r137+16];
$L5:
.loc 1 66 7
ld.u64 %r117,[%r138];
.loc 1 89 6
cvt.u16.u32 %r151,%r124;
and.b16 %r150,%r151,2;
setp.eq.u16 %r152,%r150,0;
@ %r152 bra $L6;
.loc 1 98 10
ld.u64 %r132,[%r137+64];
.loc 1 98 8
ld.u64 %r133,[%r137+48];
.loc 1 53 24
mov.u64 %r79,0;
.loc 1 67 7
mov.u64 %r81,%r79;
bra $L7;
$L8:
.loc 1 97 4
ld.u64 %r79,[%r117];
ld.u64 %r81,[%r117+8];
add.u64 %r117,%r117,16;
$L7:
setp.eq.u64 %r153,%r81,0;
@ %r153 bra $L8;
.loc 1 99 6
min.u64 %r158,%r81,2147482624;
.loc 1 98 8
cvt.u32.u64 %r157,%r158;
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r133;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r79;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r157;
call (%value_in),%r132,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u32 %r159,[%value_in];
}
.loc 1 100 7
setp.le.s32 %r160,%r159,0;
@ %r160 bra $L9;
.loc 1 102 6
cvt.s64.s32 %r26,%r159;
add.u64 %r79,%r79,%r26;
.loc 1 103 8
sub.u64 %r81,%r81,%r26;
.loc 1 105 30
ld.u64 %r161,[%r138+16];
sub.u64 %r28,%r161,%r26;
st.u64 [%r138+16],%r28;
.loc 1 105 7
setp.eq.u64 %r162,%r28,0;
@ %r162 bra $L10;
.loc 1 98 10
ld.u64 %r132,[%r137+64];
.loc 1 98 8
ld.u64 %r133,[%r137+48];
bra $L7;
$L6:
.loc 1 107 11
and.b16 %r163,%r151,1;
setp.ne.u16 %r165,%r163,0;
@ %r165 bra $L40;
.loc 1 125 6
ld.u32 %r101,[%r137+12];
.loc 1 131 21
ld.u64 %r134,[%r137];
.loc 1 53 24
mov.u64 %r90,0;
.loc 1 67 7
mov.u64 %r93,%r90;
bra $L13;
$L14:
.loc 1 124 4
ld.u64 %r90,[%r117];
ld.u64 %r93,[%r117+8];
add.u64 %r117,%r117,16;
$L13:
setp.eq.u64 %r166,%r93,0;
@ %r166 bra $L14;
.loc 1 126 7
cvt.u16.u32 %r168,%r124;
and.b16 %r167,%r168,512;
setp.eq.u16 %r169,%r167,0;
@ %r169 bra $L15;
.loc 1 128 16
cvt.s64.s32 %r29,%r101;
.loc 1 128 11
setp.gt.u64 %r170,%r29,%r93;
@ %r170 bra $L16;
.loc 1 128 21
and.b16 %r171,%r168,1152;
setp.ne.u16 %r173,%r171,0;
@ %r173 bra $L17;
.loc 1 175 16
cvt.u32.u64 %r174,%r93;
cvt.s64.s32 %r56,%r174;
bra $L18;
$L17:
.loc 1 131 35
ld.u64 %r30,[%r137+24];
.loc 1 131 26
sub.u64 %r31,%r134,%r30;
.loc 1 131 9
cvt.u32.u64 %r121,%r31;
.loc 1 139 33
ld.u32 %r175,[%r137+32];
add.u32 %r177,%r175,%r175;
add.u32 %r178,%r177,%r175;
.loc 1 139 9
shr.u32 %r179,%r178,31;
add.u32 %r180,%r179,%r178;
shr.s32 %r108,%r180,1;
.loc 1 140 17
cvt.s64.s32 %r34,%r108;
.loc 1 140 26
cvt.s64.s32 %r35,%r121;
.loc 1 140 32
add.u64 %r182,%r93,1;
add.u64 %r183,%r182,%r35;
.loc 1 140 8
setp.ge.u64 %r184,%r34,%r183;
@ %r184 bra $L19;
.loc 1 141 30
cvt.u32.u64 %r186,%r93;
add.u32 %r185,%r186,1;
add.u32 %r108,%r185,%r121;
.loc 1 145 32
cvt.s64.s32 %r34,%r108;
$L19:
.loc 1 142 8
cvt.u16.u32 %r189,%r124;
and.b16 %r188,%r189,1024;
setp.eq.u16 %r190,%r188,0;
@ %r190 bra $L20;
.loc 1 145 32
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r193,[%value_in];
}
mov.u64 %r107,%r193;
.loc 1 146 12
setp.ne.u64 %r194,%r193,0;
@ %r194 bra $L21;
.loc 1 148 18
mov.u32 %r195,12;
st.u32 [%r136],%r195;
.loc 1 263 14
ld.s16 %r131,[%r137+16];
.loc 1 149 6
bra $L22;
$L21:
.loc 1 151 9
ld.u64 %r199,[%r137+24];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r107;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r199;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r35;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r200,[%value_in];
}
.loc 1 152 20
ld.u16 %r202,[%r137+16];
and.b16 %r201,%r202,-1153;
or.b16 %r203,%r201,128;
st.u16 [%r137+16],%r203;
bra $L23;
$L20:
.loc 1 156 32
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r34;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r207,[%value_in];
}
mov.u64 %r107,%r207;
.loc 1 158 12
setp.ne.u64 %r208,%r207,0;
@ %r208 bra $L23;
.loc 1 162 6
ld.u64 %r211,[%r137+24];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r211;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 163 17
ld.u16 %r213,[%r137+16];
and.b16 %r212,%r213,-129;
cvt.s32.s16 %r131,%r212;
.loc 1 165 18
mov.u32 %r214,12;
st.u32 [%r136],%r214;
.loc 1 166 6
bra $L22;
$L23:
.loc 1 169 19
st.u64 [%r137+24],%r107;
.loc 1 170 18
add.u64 %r134,%r107,%r35;
.loc 1 170 12
st.u64 [%r137],%r134;
.loc 1 171 19
st.u32 [%r137+32],%r108;
.loc 1 172 7
cvt.u32.u64 %r101,%r93;
.loc 1 173 22
sub.u32 %r215,%r108,%r121;
.loc 1 173 12
st.u32 [%r137+12],%r215;
.loc 1 175 16
cvt.s64.s32 %r56,%r101;
.loc 1 175 11
setp.le.u64 %r216,%r56,%r93;
@ %r216 bra $L41;
$L16:
.loc 1 176 5
cvt.u32.u64 %r101,%r93;
.loc 1 175 16
cvt.s64.s32 %r56,%r101;
mov.u64 %r29,%r56;
bra $L18;
$L41:
mov.u64 %r29,%r56;
$L18:
.loc 1 177 8
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r134;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r90;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r220,[%value_in];
}
.loc 1 178 15
ld.u32 %r222,[%r137+12];
sub.u32 %r221,%r222,%r101;
st.u32 [%r137+12],%r221;
.loc 1 179 15
ld.u64 %r224,[%r137];
add.u64 %r223,%r224,%r29;
st.u64 [%r137],%r223;
bra $L24;
$L15:
.loc 1 182 12
ld.u64 %r225,[%r137+24];
setp.lt.u64 %r226,%r225,%r134;
@ %r226 bra $L25;
.loc 1 182 52
ld.u32 %r52,[%r137+32];
cvt.s64.s32 %r227,%r52;
.loc 1 182 36
setp.le.u64 %r228,%r227,%r93;
@ %r228 bra $L26;
$L25:
.loc 1 185 12
cvt.s64.s32 %r230,%r101;
min.u64 %r229,%r230,%r93;
.loc 1 185 10
cvt.u32.u64 %r120,%r229;
.loc 1 186 8
cvt.s64.s32 %r56,%r120;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r134;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r90;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r56;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r234,[%value_in];
}
.loc 1 187 15
ld.u32 %r235,[%r137+12];
sub.u32 %r58,%r235,%r120;
st.u32 [%r137+12],%r58;
.loc 1 188 15
ld.u64 %r237,[%r137];
add.u64 %r236,%r237,%r56;
st.u64 [%r137],%r236;
.loc 1 189 11
setp.ne.u32 %r238,%r58,0;
@ %r238 bra $L24;
.loc 1 189 27
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r137;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r241,[%value_in];
}
.loc 1 189 24
setp.eq.u32 %r242,%r241,0;
@ %r242 bra $L24;
.loc 1 263 14
ld.s16 %r131,[%r137+16];
bra $L22;
$L26:
.loc 1 195 13
min.u64 %r122,%r93,2147483647;
.loc 1 195 38
cvt.u32.u64 %r246,%r122;
div.s32 %r245,%r246,%r52;
.loc 1 195 10
mul.lo.u32 %r118,%r245,%r52;
.loc 1 196 12
ld.u64 %r251,[%r137+48];
ld.u64 %r253,[%r137+64];
{
.param .u32 %value_in;
$LCT1:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r251;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r90;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r118;
call (%value_in),%r253,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT1;
ld.param.u32 %r252,[%value_in];
}
.loc 1 197 11
setp.gt.s32 %r254,%r252,0;
@ %r254 bra $L28;
.loc 1 263 14
ld.s16 %r131,[%r137+16];
bra $L22;
$L28:
.loc 1 200 6
cvt.s64.s32 %r56,%r252;
$L24:
add.u64 %r90,%r90,%r56;
.loc 1 201 8
sub.u64 %r93,%r93,%r56;
.loc 1 203 30
ld.u64 %r255,[%r138+16];
sub.u64 %r67,%r255,%r56;
st.u64 [%r138+16],%r67;
.loc 1 203 7
setp.eq.u64 %r256,%r67,0;
@ %r256 bra $L10;
.loc 1 126 10
ld.s16 %r124,[%r137+16];
.loc 1 125 6
ld.u32 %r101,[%r137+12];
.loc 1 131 21
ld.u64 %r134,[%r137];
bra $L13;
$L32:
add.u64 %r102,%r117,8;
$L30:
.loc 1 218 4
ld.u64 %r100,[%r117];
ld.u64 %r99,[%r102];
add.u64 %r117,%r117,16;
add.u64 %r102,%r102,16;
setp.eq.u64 %r257,%r99,0;
@ %r257 bra $L30;
bra $L31;
$L40:
.loc 1 215 14
mov.u32 %r106,0;
.loc 1 214 15
mov.u32 %r104,%r106;
.loc 1 53 24
mov.u64 %r100,0;
.loc 1 67 7
mov.u64 %r99,%r100;
$L12:
.loc 1 218 4
setp.eq.u64 %r258,%r99,0;
@ %r258 bra $L32;
.loc 1 219 7
setp.ne.u32 %r259,%r104,0;
@ %r259 bra $L33;
$L31:
.loc 1 221 13
mov.u32 %r261,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r100;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r261;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r99;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r263,[%value_in];
}
.loc 1 222 15
setp.eq.u64 %r264,%r263,0;
@ %r264 bra $L34;
.loc 1 222 25
add.u64 %r265,%r263,1;
.loc 1 222 29
sub.u64 %r266,%r265,%r100;
.loc 1 222 15
cvt.u32.u64 %r106,%r266;
bra $L33;
$L34:
.loc 1 222 39
cvt.u32.u64 %r267,%r99;
add.u32 %r106,%r267,1;
$L33:
.loc 1 225 8
cvt.s64.s32 %r269,%r106;
min.u64 %r268,%r269,%r99;
.loc 1 225 6
cvt.u32.u64 %r116,%r268;
.loc 1 226 24
ld.u32 %r75,[%r137+32];
.loc 1 226 6
ld.u32 %r270,[%r137+12];
add.u32 %r103,%r75,%r270;
.loc 1 227 10
ld.u64 %r76,[%r137];
.loc 1 227 7
ld.u64 %r272,[%r137+24];
set.u32.gt.u64 %r273,%r76,%r272;
neg.s32 %r274,%r273;
.loc 1 227 31
set.u32.gt.s32 %r276,%r116,%r103;
neg.s32 %r277,%r276;
cvt.u16.u32 %r279,%r274;
cvt.u16.u32 %r280,%r277;
and.b16 %r278,%r279,%r280;
cvt.u32.u16 %r281,%r278;
cvt.u16.u8 %r282,%r281;
setp.eq.u16 %r283,%r282,0;
@ %r283 bra $L35;
.loc 1 229 8
cvt.s64.s32 %r78,%r103;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r76;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r100;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r78;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r287,[%value_in];
}
.loc 1 231 15
ld.u64 %r289,[%r137];
add.u64 %r288,%r289,%r78;
st.u64 [%r137],%r288;
.loc 1 232 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r137;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r292,[%value_in];
}
.loc 1 232 11
setp.eq.u32 %r293,%r292,0;
@ %r293 bra $L36;
.loc 1 263 14
ld.s16 %r131,[%r137+16];
bra $L22;
$L35:
.loc 1 235 12
setp.gt.s32 %r294,%r75,%r116;
@ %r294 bra $L37;
.loc 1 237 12
ld.u64 %r299,[%r137+48];
ld.u64 %r301,[%r137+64];
{
.param .u32 %value_in;
$LCT2:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r299;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r100;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r75;
call (%value_in),%r301,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT2;
ld.param.u32 %r300,[%value_in];
}
mov.u32 %r103,%r300;
.loc 1 238 11
setp.gt.s32 %r302,%r300,0;
@ %r302 bra $L36;
.loc 1 263 14
ld.s16 %r131,[%r137+16];
bra $L22;
$L37:
.loc 1 244 8
cvt.s64.s32 %r86,%r116;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r76;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r100;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r86;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r306,[%value_in];
}
.loc 1 245 15
ld.u32 %r308,[%r137+12];
sub.u32 %r307,%r308,%r116;
st.u32 [%r137+12],%r307;
.loc 1 246 15
ld.u64 %r310,[%r137];
add.u64 %r309,%r310,%r86;
st.u64 [%r137],%r309;
cvt.u32.u64 %r103,%r268;
$L36:
.loc 1 248 16
sub.u32 %r106,%r106,%r103;
.loc 1 248 7
setp.ne.u32 %r311,%r106,0;
@ %r311 bra $L43;
.loc 1 251 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r137;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r314,[%value_in];
}
mov.u32 %r104,%r314;
.loc 1 251 11
setp.eq.u32 %r315,%r314,0;
@ %r315 bra $L38;
.loc 1 263 14
ld.s16 %r131,[%r137+16];
bra $L22;
$L43:
mov.u32 %r104,1;
$L38:
.loc 1 255 6
cvt.s64.s32 %r92,%r103;
add.u64 %r100,%r100,%r92;
.loc 1 256 8
sub.u64 %r99,%r99,%r92;
.loc 1 258 30
ld.u64 %r316,[%r138+16];
sub.u64 %r96,%r316,%r92;
st.u64 [%r138+16],%r96;
.loc 1 258 7
setp.ne.u64 %r317,%r96,0;
@ %r317 bra $L12;
bra $L10;
$L9:
.loc 1 263 14
ld.s16 %r131,[%r137+16];
$L22:
cvt.u16.u32 %r319,%r131;
or.b16 %r318,%r319,64;
st.u16 [%r137+16],%r318;
.loc 1 264 10
mov.u32 %r135,-1;
bra $L1;
$L39:
.loc 1 64 12
mov.u32 %r135,-1;
$L1:
.loc 1 265 1
mov.u32 %value,%r135;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fwalk.o/  1612277262  0     0     100666  3924      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fwalk
.visible .func (.param .u32 %value_out) _fwalk (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/fwalk.c"
// BEGIN GLOBAL FUNCTION DECL: _fwalk_reent
.visible .func (.param .u32 %value_out) _fwalk_reent (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _fwalk
.visible .func (.param .u32 %value_out) _fwalk (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r38;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .u64 %r46;
.reg .u64 %r48;
.reg .u16 %r49;
.reg .pred %r50;
.reg .u16 %r51;
.reg .pred %r52;
.reg .u32 %r54;
.reg .pred %r55;
.reg .pred %r56;
mov.u64 %r42,%ar0;
mov.u64 %r43,%ar1;
.loc 1 46 10
add.u64 %r31,%r42,1312;
.loc 1 35 19
mov.u32 %r41,0;
$L5:
.loc 1 47 13
ld.u64 %r29,[%r31+16];
.loc 1 47 27
ld.u32 %r30,[%r31+8];
.loc 1 47 5
setp.le.s32 %r44,%r30,0;
@ %r44 bra $L2;
add.u64 %r25,%r29,16;
add.u32 %r45,%r30,-1;
cvt.u64.u32 %r46,%r45;
add.u64 %r48,%r29,192;
mad.lo.u64 %r38,%r46,176,%r48;
$L4:
add.u64 %r40,%r25,-16;
.loc 1 48 10
ld.u16 %r49,[%r25];
setp.le.u16 %r50,%r49,1;
@ %r50 bra $L3;
.loc 1 48 46
ld.u16 %r51,[%r25+2];
setp.eq.u16 %r52,%r51,-1;
@ %r52 bra $L3;
.loc 1 49 10
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r40;
call (%value_in),%r43,(%out_arg1),$LCT0;
ld.param.u32 %r54,[%value_in];
}
.loc 1 49 6
or.b32 %r41,%r41,%r54;
$L3:
.loc 1 47 5
add.u64 %r25,%r25,176;
setp.ne.u64 %r55,%r25,%r38;
@ %r55 bra $L4;
$L2:
.loc 1 46 40
ld.u64 %r31,[%r31];
.loc 1 46 3
setp.ne.u64 %r56,%r31,0;
@ %r56 bra $L5;
.loc 1 52 1
mov.u32 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _fwalk_reent
.visible .func (.param .u32 %value_out) _fwalk_reent (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r38;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .u64 %r46;
.reg .u64 %r48;
.reg .u16 %r49;
.reg .pred %r50;
.reg .u16 %r51;
.reg .pred %r52;
.reg .u32 %r55;
.reg .pred %r56;
.reg .pred %r57;
mov.u64 %r42,%ar0;
mov.u64 %r43,%ar1;
.loc 1 72 10
add.u64 %r31,%r42,1312;
.loc 1 61 19
mov.u32 %r41,0;
$L15:
.loc 1 73 13
ld.u64 %r29,[%r31+16];
.loc 1 73 27
ld.u32 %r30,[%r31+8];
.loc 1 73 5
setp.le.s32 %r44,%r30,0;
@ %r44 bra $L12;
add.u64 %r25,%r29,16;
add.u32 %r45,%r30,-1;
cvt.u64.u32 %r46,%r45;
add.u64 %r48,%r29,192;
mad.lo.u64 %r38,%r46,176,%r48;
$L14:
add.u64 %r40,%r25,-16;
.loc 1 74 10
ld.u16 %r49,[%r25];
setp.le.u16 %r50,%r49,1;
@ %r50 bra $L13;
.loc 1 74 46
ld.u16 %r51,[%r25+2];
setp.eq.u16 %r52,%r51,-1;
@ %r52 bra $L13;
.loc 1 75 10
{
.param .u32 %value_in;
$LCT1:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r42;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r40;
call (%value_in),%r43,(%out_arg1,%out_arg2),$LCT1;
ld.param.u32 %r55,[%value_in];
}
.loc 1 75 6
or.b32 %r41,%r41,%r55;
$L13:
.loc 1 73 5
add.u64 %r25,%r25,176;
setp.ne.u64 %r56,%r25,%r38;
@ %r56 bra $L14;
$L12:
.loc 1 72 40
ld.u64 %r31,[%r31];
.loc 1 72 3
setp.ne.u64 %r57,%r31,0;
@ %r57 bra $L15;
.loc 1 78 1
mov.u32 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-fwrite.o/ 1612277262  0     0     100666  5611      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _fwrite_r
.visible .func (.param .u64 %value_out) _fwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdio/fwrite.c"
// BEGIN GLOBAL FUNCTION DECL: fwrite
.visible .func (.param .u64 %value_out) fwrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sfvwrite_r
.extern .func (.param .u32 %value_out) __sfvwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _fwrite_r
.visible .func (.param .u64 %value_out) _fwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u32 %r41;
.reg .pred %r42;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .pred %r46;
.reg .u16 %r47;
.reg .u32 %r49;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u64 %r55;
.reg .u64 %r56;
mov.u64 %r33,%ar0;
mov.u64 %r34,%ar1;
mov.u64 %r35,%ar2;
mov.u64 %r36,%ar3;
mov.u64 %r37,%ar4;
.loc 1 122 16
st.u64 [%frame+24],%r34;
.loc 1 123 35
mul.lo.u64 %r30,%r36,%r35;
.loc 1 123 31
st.u64 [%frame+32],%r30;
.loc 1 123 17
st.u64 [%frame+16],%r30;
.loc 1 124 15
add.u64 %r38,%frame,24;
st.u64 [%frame],%r38;
.loc 1 125 18
mov.u32 %r39,1;
st.u32 [%frame+8],%r39;
.loc 1 133 3
setp.eq.u64 %r40,%r33,0;
@ %r40 bra $L2;
ld.u32 %r41,[%r33+80];
setp.ne.u32 %r42,%r41,0;
@ %r42 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 136 3
ld.u16 %r45,[%r37+16];
and.b16 %r44,%r45,8192;
setp.ne.u16 %r46,%r44,0;
@ %r46 bra $L3;
.loc 1 135 3
ld.u32 %r23,[%r37+172];
.loc 1 136 3
or.b16 %r47,%r45,8192;
st.u16 [%r37+16],%r47;
and.b32 %r49,%r23,-8193;
st.u32 [%r37+172],%r49;
$L3:
.loc 1 137 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sfvwrite_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r53,[%value_in];
}
.loc 1 137 6
setp.eq.u32 %r54,%r53,0;
@ %r54 bra $L5;
.loc 1 143 13
ld.u64 %r56,[%frame+16];
sub.u64 %r55,%r30,%r56;
.loc 1 143 30
div.u64 %r32,%r55,%r35;
bra $L1;
$L5:
.loc 1 140 14
mov.u64 %r32,%r36;
$L1:
.loc 1 168 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: fwrite
.visible .func (.param .u64 %value_out) fwrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u32 %r41;
.reg .pred %r42;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .pred %r46;
.reg .u16 %r47;
.reg .u32 %r49;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u64 %r55;
.reg .u64 %r56;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
mov.u64 %r36,%ar2;
mov.u64 %r37,%ar3;
.loc 1 177 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 122 16
st.u64 [%frame+24],%r34;
.loc 1 123 35
mul.lo.u64 %r23,%r35,%r36;
.loc 1 123 31
st.u64 [%frame+32],%r23;
.loc 1 123 17
st.u64 [%frame+16],%r23;
.loc 1 124 15
add.u64 %r38,%frame,24;
st.u64 [%frame],%r38;
.loc 1 125 18
mov.u32 %r39,1;
st.u32 [%frame+8],%r39;
.loc 1 133 3
setp.eq.u64 %r40,%r22,0;
@ %r40 bra $L10;
ld.u32 %r41,[%r22+80];
setp.ne.u32 %r42,%r41,0;
@ %r42 bra $L10;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call __sinit,(%out_arg1);
}
$L10:
.loc 1 136 3
ld.u16 %r45,[%r37+16];
and.b16 %r44,%r45,8192;
setp.ne.u16 %r46,%r44,0;
@ %r46 bra $L11;
.loc 1 135 3
ld.u32 %r25,[%r37+172];
.loc 1 136 3
or.b16 %r47,%r45,8192;
st.u16 [%r37+16],%r47;
and.b32 %r49,%r25,-8193;
st.u32 [%r37+172],%r49;
$L11:
.loc 1 137 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__sfvwrite_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r53,[%value_in];
}
.loc 1 137 6
setp.eq.u32 %r54,%r53,0;
@ %r54 bra $L13;
.loc 1 143 13
ld.u64 %r56,[%frame+16];
sub.u64 %r55,%r23,%r56;
.loc 1 143 30
div.u64 %r33,%r55,%r35;
bra $L9;
$L13:
.loc 1 140 14
mov.u64 %r33,%r36;
$L9:
.loc 1 178 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

/324            1612277262  0     0     100666  34592     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: rshift
.func rshift (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/gdtoa-gethex.c"
// BEGIN GLOBAL FUNCTION DECL: __gethex
.visible .func (.param .u32 %value_out) __gethex (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4, .param .u32 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL VAR DECL: _C_numeric_locale
.extern .const .align 8 .u64 _C_numeric_locale[3];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strncmp
.extern .func (.param .u32 %value_out) strncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _Balloc
.extern .func (.param .u64 %value_out) _Balloc (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __assert_func
.extern .func __assert_func (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __hi0bits
.extern .func (.param .u32 %value_out) __hi0bits (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __any_on
.extern .func (.param .u32 %value_out) __any_on (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __lshift
.extern .func (.param .u64 %value_out) __lshift (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _Bfree
.extern .func _Bfree (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[17] =
{66,97,108,108,111,99,32,115,117,99,99,101,101,100,101,100,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[49] =
{46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,110,101,119,108,105,98,47,108,105,98,99,47,115,116,100,108,105,98,47,103,100,116,111,97,45,103,101,116,104,101,120,46,99,0 };
// BEGIN GLOBAL VAR DEF: __hexdig
.visible .const .align 1 .u8 __hexdig[256] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,0,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
// BEGIN FUNCTION DEF: rshift
.func rshift (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u32 %r33;
.reg .u32 %r36;
.reg .u64 %r40;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .u32 %r50;
.reg .u64 %r52;
.reg .u64 %r63;
.reg .u64 %r65;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .pred %r71;
.reg .u64 %r72;
.reg .u64 %r73;
.reg .pred %r74;
.reg .pred %r75;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .pred %r78;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u64 %r89;
.reg .pred %r90;
.reg .pred %r91;
.reg .u64 %r92;
.reg .u64 %r97;
.reg .u64 %r98;
.reg .u64 %r100;
.reg .pred %r101;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .pred %r104;
mov.u64 %r69,%ar0;
mov.u32 %r70,%ar1;
.loc 1 78 4
shr.s32 %r44,%r70,5;
.loc 1 79 11
ld.u32 %r22,[%r69+20];
.loc 1 79 5
setp.le.s32 %r71,%r22,%r44;
@ %r71 bra $L2;
.loc 1 77 9
add.u64 %r43,%r69,24;
.loc 1 80 13
cvt.s64.s32 %r24,%r22;
.loc 1 80 10
shl.b64 %r72,%r24,2;
.loc 1 80 6
add.u64 %r45,%r43,%r72;
.loc 1 81 5
cvt.s64.s32 %r26,%r44;
shl.b64 %r73,%r26,2;
add.u64 %r46,%r43,%r73;
.loc 1 82 9
and.b32 %r47,%r70,31;
.loc 1 82 6
setp.ne.u32 %r74,%r47,0;
@ %r74 bra $L3;
.loc 1 93 9
setp.gt.u64 %r75,%r45,%r46;
@ %r75 bra $L4;
bra $L2;
$L3:
.loc 1 83 6
mov.u32 %r76,32;
sub.u32 %r48,%r76,%r47;
.loc 1 84 10
add.u64 %r49,%r46,4;
.loc 1 84 6
ld.u32 %r77,[%r46];
shr.u32 %r50,%r77,%r47;
.loc 1 85 9
setp.le.u64 %r78,%r45,%r49;
@ %r78 bra $L5;
mov.u64 %r23,%r49;
mov.u64 %r52,%r43;
$L6:
.loc 1 86 22
ld.u32 %r80,[%r23];
shl.b32 %r79,%r80,%r48;
.loc 1 86 29
or.b32 %r81,%r79,%r50;
.loc 1 86 11
st.u32 [%r52],%r81;
.loc 1 87 7
ld.u32 %r82,[%r23];
shr.u32 %r50,%r82,%r47;
.loc 1 85 9
add.u64 %r23,%r23,4;
add.u64 %r52,%r52,4;
setp.gt.u64 %r83,%r45,%r23;
@ %r83 bra $L6;
.loc 1 86 8
sub.u64 %r84,%r24,%r26;
shl.b64 %r85,%r84,2;
add.u64 %r89,%r85,-4;
add.u64 %r40,%r43,%r89;
.loc 1 89 13
st.u32 [%r40],%r50;
.loc 1 89 7
setp.eq.u32 %r90,%r50,0;
@ %r90 bra $L7;
bra $L11;
$L12:
.loc 1 77 9
mov.u64 %r40,%r43;
$L11:
.loc 1 90 7
add.u64 %r40,%r40,4;
bra $L7;
$L4:
mov.u64 %r63,%r43;
mov.u64 %r65,%r46;
$L8:
.loc 1 94 13
ld.u32 %r33,[%r65];
.loc 1 94 11
st.u32 [%r63],%r33;
.loc 1 93 9
add.u64 %r63,%r63,4;
add.u64 %r65,%r65,4;
setp.gt.u64 %r91,%r45,%r65;
@ %r91 bra $L8;
.loc 1 94 8
sub.u64 %r92,%r24,%r26;
shl.b64 %r97,%r92,2;
add.u64 %r40,%r43,%r97;
$L7:
.loc 1 96 20
sub.u64 %r98,%r40,%r43;
shr.s64 %r100,%r98,2;
.loc 1 96 15
cvt.u32.u64 %r36,%r100;
st.u32 [%r69+20],%r36;
.loc 1 96 5
setp.ne.u32 %r101,%r36,0;
@ %r101 bra $L1;
$L10:
.loc 1 97 12
mov.u32 %r102,0;
st.u32 [%r69+24],%r102;
.loc 1 98 1
bra $L1;
$L2:
.loc 1 96 15
mov.u32 %r103,0;
st.u32 [%r69+20],%r103;
bra $L10;
$L5:
.loc 1 89 13
st.u32 [%r69+24],%r50;
.loc 1 89 7
setp.ne.u32 %r104,%r50,0;
@ %r104 bra $L12;
bra $L2;
$L1:
.loc 1 98 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __gethex
.visible .func (.param .u32 %value_out) __gethex (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4, .param .u32 %in_ar5, .param .u64 %in_ar6)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u32 %ar5;
ld.param.u32 %ar5,[%in_ar5];
.reg .u64 %ar6;
ld.param.u64 %ar6,[%in_ar6];
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r30;
.reg .u32 %r32;
.reg .u32 %r39;
.reg .u32 %r41;
.reg .u64 %r50;
.reg .u32 %r61;
.reg .u32 %r63;
.reg .u32 %r76;
.reg .u32 %r78;
.reg .u32 %r90;
.reg .u32 %r106;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u32 %r116;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u64 %r119;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u64 %r122;
.reg .u64 %r124;
.reg .u32 %r126;
.reg .u32 %r127;
.reg .u64 %r130;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u32 %r135;
.reg .u32 %r136;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .u32 %r142;
.reg .u64 %r143;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .u64 %r146;
.reg .u32 %r148;
.reg .u32 %r149;
.reg .u64 %r150;
.reg .u64 %r152;
.reg .u64 %r153;
.reg .u32 %r155;
.reg .u32 %r158;
.reg .u64 %r172;
.reg .u32 %r179;
.reg .u64 %r180;
.reg .u32 %r183;
.reg .u64 %r192;
.reg .u64 %r195;
.reg .u64 %r200;
.reg .u64 %r201;
.reg .u32 %r219;
.reg .u32 %r220;
.reg .u64 %r222;
.reg .u64 %r223;
.reg .u32 %r225;
.reg .u32 %r226;
.reg .u64 %r227;
.reg .u64 %r228;
.reg .u64 %r229;
.reg .u64 %r230;
.reg .u64 %r231;
.reg .u32 %r232;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .u16 %r239;
.reg .pred %r240;
.reg .u16 %r241;
.reg .pred %r242;
.reg .u64 %r244;
.reg .u64 %r245;
.reg .u16 %r246;
.reg .pred %r247;
.reg .u32 %r251;
.reg .pred %r252;
.reg .u64 %r254;
.reg .u64 %r255;
.reg .pred %r256;
.reg .u16 %r257;
.reg .pred %r258;
.reg .u16 %r259;
.reg .pred %r260;
.reg .u64 %r262;
.reg .u64 %r263;
.reg .u16 %r265;
.reg .u32 %r266;
.reg .u64 %r270;
.reg .u64 %r271;
.reg .u16 %r272;
.reg .pred %r273;
.reg .u64 %r276;
.reg .u64 %r277;
.reg .pred %r278;
.reg .u32 %r282;
.reg .pred %r283;
.reg .pred %r284;
.reg .u64 %r285;
.reg .u32 %r286;
.reg .u32 %r287;
.reg .u64 %r289;
.reg .u64 %r290;
.reg .u16 %r291;
.reg .pred %r292;
.reg .u64 %r294;
.reg .u64 %r295;
.reg .u16 %r296;
.reg .pred %r297;
.reg .u64 %r298;
.reg .u32 %r299;
.reg .u32 %r300;
.reg .pred %r301;
.reg .u64 %r302;
.reg .u32 %r303;
.reg .u32 %r304;
.reg .u16 %r305;
.reg .u16 %r306;
.reg .u16 %r307;
.reg .u32 %r308;
.reg .pred %r309;
.reg .u16 %r310;
.reg .pred %r311;
.reg .pred %r313;
.reg .u64 %r315;
.reg .u64 %r316;
.reg .u16 %r317;
.reg .u16 %r318;
.reg .u16 %r319;
.reg .u32 %r320;
.reg .pred %r321;
.reg .u64 %r324;
.reg .u64 %r325;
.reg .u16 %r326;
.reg .u16 %r327;
.reg .u16 %r328;
.reg .u32 %r329;
.reg .pred %r330;
.reg .u32 %r332;
.reg .u32 %r333;
.reg .u32 %r334;
.reg .u64 %r337;
.reg .u64 %r338;
.reg .u16 %r339;
.reg .u16 %r340;
.reg .u16 %r341;
.reg .u32 %r342;
.reg .pred %r343;
.reg .pred %r344;
.reg .pred %r345;
.reg .pred %r346;
.reg .u64 %r347;
.reg .u32 %r348;
.reg .pred %r349;
.reg .pred %r350;
.reg .u64 %r353;
.reg .pred %r354;
.reg .u64 %r355;
.reg .u32 %r356;
.reg .u64 %r358;
.reg .pred %r359;
.reg .u16 %r360;
.reg .u16 %r361;
.reg .pred %r362;
.reg .pred %r363;
.reg .u64 %r364;
.reg .pred %r366;
.reg .u32 %r370;
.reg .pred %r371;
.reg .u64 %r374;
.reg .u64 %r375;
.reg .u16 %r377;
.reg .u16 %r378;
.reg .u32 %r379;
.reg .u32 %r380;
.reg .u32 %r381;
.reg .pred %r382;
.reg .u64 %r383;
.reg .u64 %r385;
.reg .u32 %r387;
.reg .pred %r388;
.reg .u32 %r391;
.reg .pred %r392;
.reg .u32 %r393;
.reg .u64 %r394;
.reg .u64 %r395;
.reg .u64 %r396;
.reg .u32 %r397;
.reg .u32 %r398;
.reg .u32 %r399;
.reg .u32 %r400;
.reg .u32 %r401;
.reg .pred %r402;
.reg .pred %r403;
.reg .u32 %r406;
.reg .u32 %r407;
.reg .pred %r408;
.reg .pred %r411;
.reg .u64 %r415;
.reg .u32 %r416;
.reg .pred %r417;
.reg .u64 %r420;
.reg .pred %r421;
.reg .pred %r422;
.reg .pred %r423;
.reg .pred %r424;
.reg .pred %r425;
.reg .pred %r426;
.reg .pred %r427;
.reg .u32 %r430;
.reg .u32 %r431;
.reg .pred %r432;
.reg .pred %r433;
.reg .pred %r434;
.reg .u32 %r435;
.reg .u64 %r439;
.reg .pred %r440;
.reg .pred %r441;
.reg .u32 %r444;
.reg .u32 %r445;
.reg .u64 %r446;
.reg .u64 %r447;
.reg .u64 %r448;
.reg .u32 %r449;
.reg .u32 %r450;
.reg .u32 %r451;
.reg .u32 %r452;
.reg .u32 %r453;
.reg .pred %r454;
.reg .pred %r457;
.reg .pred %r458;
.reg .pred %r459;
.reg .pred %r460;
.reg .u32 %r461;
.reg .pred %r462;
.reg .u32 %r463;
.reg .u32 %r464;
.reg .u32 %r465;
.reg .pred %r466;
.reg .u32 %r467;
.reg .pred %r468;
.reg .u64 %r469;
.reg .pred %r470;
.reg .u32 %r471;
.reg .pred %r473;
.reg .u32 %r474;
.reg .pred %r475;
.reg .u32 %r478;
.reg .u32 %r479;
.reg .u64 %r480;
.reg .pred %r481;
.reg .u64 %r482;
.reg .u32 %r483;
.reg .u64 %r485;
.reg .u64 %r489;
.reg .u64 %r490;
.reg .u64 %r491;
.reg .u64 %r492;
.reg .u64 %r493;
.reg .u64 %r494;
.reg .u32 %r497;
.reg .u64 %r498;
.reg .u64 %r499;
.reg .u64 %r500;
.reg .u64 %r501;
.reg .u32 %r503;
.reg .pred %r504;
.reg .u32 %r505;
.reg .u32 %r506;
.reg .pred %r507;
.reg .u32 %r508;
.reg .u64 %r509;
.reg .u64 %r510;
.reg .u64 %r511;
.reg .u32 %r512;
.reg .u32 %r513;
.reg .u32 %r514;
.reg .u32 %r515;
.reg .u32 %r516;
.reg .pred %r517;
.reg .pred %r518;
.reg .pred %r519;
.reg .u32 %r520;
.reg .u64 %r521;
.reg .u32 %r523;
.reg .u32 %r524;
.reg .u32 %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .u64 %r528;
.reg .u64 %r529;
.reg .u32 %r530;
.reg .u64 %r531;
.reg .pred %r532;
.reg .u32 %r533;
.reg .u32 %r534;
.reg .u32 %r535;
.reg .u32 %r536;
.reg .pred %r537;
.reg .u64 %r538;
.reg .u64 %r540;
.reg .u64 %r542;
.reg .u64 %r543;
.reg .pred %r544;
.reg .u64 %r545;
.reg .u64 %r547;
.reg .pred %r548;
.reg .u32 %r549;
.reg .u32 %r550;
.reg .pred %r551;
.reg .u32 %r553;
.reg .u16 %r554;
.reg .u16 %r555;
.reg .u16 %r556;
.reg .u32 %r557;
.reg .pred %r558;
.reg .pred %r560;
.reg .u64 %r561;
.reg .u32 %r562;
.reg .u16 %r563;
mov.u64 %r227,%ar0;
mov.u64 %r228,%ar1;
mov.u64 %r229,%ar2;
mov.u64 %r230,%ar3;
mov.u64 %r231,%ar4;
mov.u32 %r232,%ar5;
.loc 1 152 23
ld.const.u64 %r124,[_C_numeric_locale];
.loc 1 154 20
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r124;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r236,[%value_in];
}
.loc 1 155 16
add.u64 %r237,%r124,%r236;
ld.u8 %r126,[%r237+-1];
.loc 1 158 7
ld.u64 %r24,[%r228];
.loc 1 159 10
ld.u8 %r25,[%r24+2];
.loc 1 159 7
cvt.u16.u32 %r239,%r25;
setp.ne.u16 %r240,%r239,48;
@ %r240 bra $L19;
add.u64 %r192,%r24,3;
.loc 1 157 10
mov.u32 %r148,0;
$L20:
.loc 1 160 10
add.u32 %r148,%r148,1;
.loc 1 159 10
mov.u64 %r146,%r192;
.loc 1 159 7
add.u64 %r192,%r192,1;
.loc 1 159 10
ld.u8 %r25,[%r192+-1];
.loc 1 159 7
cvt.u16.u32 %r241,%r25;
setp.eq.u16 %r242,%r241,48;
@ %r242 bra $L20;
bra $L21;
$L19:
.loc 1 159 10
add.u64 %r146,%r24,2;
.loc 1 157 10
mov.u32 %r148,0;
$L21:
.loc 1 166 7
cvta.const.u64 %r561,__hexdig;
cvt.s64.s32 %r244,%r25;
add.u64 %r245,%r561,%r244;
.loc 1 166 5
ld.u8 %r246,[%r245];
setp.ne.u16 %r247,%r246,0;
@ %r247 bra $L22;
.loc 1 168 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r146;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r124;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r236;
call (%value_in),strncmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r251,[%value_in];
}
.loc 1 168 6
setp.ne.u32 %r252,%r251,0;
@ %r252 bra $L23;
.loc 1 171 14
add.u64 %r26,%r146,%r236;
.loc 1 172 8
ld.u8 %r30,[%r26];
cvt.s64.s32 %r254,%r30;
add.u64 %r255,%r561,%r254;
ld.u8 %r225,[%r255];
.loc 1 172 6
setp.eq.u32 %r256,%r225,0;
@ %r256 bra $L24;
.loc 1 174 8
cvt.u16.u32 %r257,%r30;
setp.ne.u16 %r258,%r257,48;
@ %r258 bra $L95;
mov.u64 %r146,%r26;
$L26:
.loc 1 175 5
add.u64 %r146,%r146,1;
.loc 1 174 9
ld.u8 %r32,[%r146];
.loc 1 174 8
cvt.u16.u32 %r259,%r32;
setp.eq.u16 %r260,%r259,48;
@ %r260 bra $L26;
.loc 1 176 7
cvt.s64.s32 %r262,%r32;
add.u64 %r263,%r561,%r262;
ld.u8 %r225,[%r263];
bra $L25;
$L95:
.loc 1 174 8
mov.u64 %r146,%r26;
$L25:
.loc 1 176 6
cvt.u16.u32 %r265,%r225;
set.u32.eq.u16 %r266,%r265,0;
neg.s32 %r149,%r266;
.loc 1 178 11
mov.u32 %r148,1;
bra $L27;
$L96:
.loc 1 181 7
mov.u64 %r114,%r146;
$L28:
.loc 1 182 4
add.u64 %r114,%r114,1;
.loc 1 181 8
ld.u8 %r270,[%r114];
add.u64 %r271,%r561,%r270;
.loc 1 181 7
ld.u8 %r272,[%r271];
setp.ne.u16 %r273,%r272,0;
@ %r273 bra $L28;
bra $L29;
$L22:
.loc 1 181 8
ld.u8 %r276,[%r146];
add.u64 %r277,%r561,%r276;
ld.u8 %r225,[%r277];
.loc 1 164 7
mov.u32 %r149,0;
.loc 1 163 8
mov.u64 %r26,0;
$L27:
.loc 1 181 7
setp.ne.u32 %r278,%r225,0;
@ %r278 bra $L96;
mov.u64 %r114,%r146;
$L29:
.loc 1 183 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r114;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r124;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r236;
call (%value_in),strncmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r282,[%value_in];
}
mov.u32 %r120,%r282;
.loc 1 183 5
setp.ne.u32 %r283,%r120,0;
@ %r283 bra $L30;
.loc 1 185 6
setp.eq.u64 %r284,%r26,0;
@ %r284 bra $L31;
.loc 1 191 18
sub.u64 %r285,%r114,%r26;
.loc 1 191 27
cvt.u32.u64 %r287,%r285;
shl.b32 %r286,%r287,2;
.loc 1 191 5
neg.s32 %r120,%r286;
.loc 1 194 9
ld.u8 %r219,[%r114];
bra $L34;
$L31:
.loc 1 186 14
add.u64 %r130,%r114,%r236;
.loc 1 187 9
ld.u8 %r219,[%r130];
cvt.s64.s32 %r289,%r219;
add.u64 %r290,%r561,%r289;
.loc 1 187 8
ld.u8 %r291,[%r290];
setp.eq.u16 %r292,%r291,0;
@ %r292 bra $L97;
mov.u64 %r114,%r130;
$L33:
.loc 1 188 5
add.u64 %r114,%r114,1;
.loc 1 187 9
ld.u8 %r219,[%r114];
cvt.s64.s32 %r294,%r219;
add.u64 %r295,%r561,%r294;
.loc 1 187 8
ld.u8 %r296,[%r295];
setp.ne.u16 %r297,%r296,0;
@ %r297 bra $L33;
.loc 1 191 18
sub.u64 %r298,%r114,%r130;
.loc 1 191 27
cvt.u32.u64 %r300,%r298;
shl.b32 %r299,%r300,2;
.loc 1 191 5
neg.s32 %r120,%r299;
bra $L34;
$L30:
.loc 1 194 9
ld.u8 %r219,[%r114];
.loc 1 190 5
setp.eq.u64 %r301,%r26,0;
@ %r301 bra $L98;
.loc 1 191 18
sub.u64 %r302,%r114,%r26;
.loc 1 191 27
cvt.u32.u64 %r304,%r302;
shl.b32 %r303,%r304,2;
.loc 1 191 5
neg.s32 %r120,%r303;
bra $L34;
$L97:
.loc 1 187 8
mov.u64 %r114,%r130;
bra $L34;
$L98:
.loc 1 165 4
cvt.u32.u64 %r120,%r26;
$L34:
.loc 1 194 2
cvt.u16.u32 %r306,%r219;
and.b16 %r305,%r306,-33;
cvt.u32.u16 %r308,%r305;
cvt.u16.u8 %r307,%r308;
setp.ne.u16 %r309,%r307,80;
@ %r309 bra $L99;
mov.u64 %r26,%r114;
bra $L91;
$L115:
mov.u32 %r120,0;
mov.u32 %r149,1;
$L91:
.loc 1 198 10
ld.u8 %r220,[%r26+1];
cvt.u16.u32 %r310,%r220;
setp.eq.u16 %r311,%r310,43;
@ %r311 bra $L100;
setp.eq.u16 %r313,%r310,45;
@ %r313 bra $L101;
.loc 1 198 3
add.u64 %r115,%r26,1;
.loc 1 197 9
mov.u32 %r116,0;
bra $L37;
$L100:
mov.u32 %r116,0;
bra $L36;
$L101:
mov.u32 %r116,1;
$L36:
.loc 1 203 5
add.u64 %r115,%r26,2;
.loc 1 205 12
ld.u8 %r220,[%r26+2];
$L37:
cvt.s64.s32 %r315,%r220;
add.u64 %r316,%r561,%r315;
ld.u8 %r39,[%r316];
.loc 1 205 6
cvt.u16.u32 %r318,%r39;
add.u16 %r317,%r318,-1;
.loc 1 205 35
cvt.u32.u16 %r320,%r317;
cvt.u16.u8 %r319,%r320;
setp.gt.u16 %r321,%r319,24;
@ %r321 bra $L102;
.loc 1 209 6
add.u32 %r133,%r39,-16;
.loc 1 210 8
add.u64 %r114,%r115,1;
.loc 1 210 14
ld.u8 %r324,[%r115+1];
add.u64 %r325,%r561,%r324;
ld.u8 %r132,[%r325];
.loc 1 210 8
cvt.u16.u32 %r327,%r132;
add.u16 %r326,%r327,-1;
.loc 1 210 38
cvt.u32.u16 %r329,%r326;
cvt.u16.u8 %r328,%r329;
setp.gt.u16 %r330,%r328,24;
@ %r330 bra $L38;
$L39:
.loc 1 211 11
shl.b32 %r332,%r133,2;
add.u32 %r333,%r332,%r133;
add.u32 %r334,%r333,%r333;
.loc 1 211 15
add.u32 %r41,%r334,%r132;
.loc 1 211 7
add.u32 %r133,%r41,-16;
.loc 1 210 8
add.u64 %r114,%r114,1;
.loc 1 210 14
ld.u8 %r337,[%r114];
add.u64 %r338,%r561,%r337;
ld.u8 %r132,[%r338];
.loc 1 210 8
cvt.u16.u32 %r340,%r132;
add.u16 %r339,%r340,-1;
.loc 1 210 38
cvt.u32.u16 %r342,%r339;
cvt.u16.u8 %r341,%r342;
setp.le.u16 %r343,%r341,24;
@ %r343 bra $L39;
$L38:
.loc 1 212 6
setp.eq.u32 %r344,%r116,0;
@ %r344 bra $L40;
.loc 1 213 7
neg.s32 %r133,%r133;
$L40:
.loc 1 214 5
add.u32 %r120,%r120,%r133;
bra $L35;
$L99:
.loc 1 194 2
mov.u64 %r26,%r114;
bra $L35;
$L102:
mov.u64 %r114,%r26;
$L35:
.loc 1 216 6
st.u64 [%r228],%r114;
.loc 1 217 5
setp.eq.u32 %r345,%r149,0;
@ %r345 bra $L41;
$L90:
.loc 1 218 32
setp.ne.u32 %r346,%r148,0;
selp.u32 %r226,0,6,%r346;
bra $L18;
$L41:
.loc 1 219 9
sub.u64 %r347,%r26,%r146;
.loc 1 219 14
cvt.u32.u64 %r348,%r347;
add.u32 %r145,%r348,-1;
.loc 1 220 2
setp.le.s32 %r349,%r145,7;
@ %r349 bra $L104;
.loc 1 220 8
mov.u32 %r144,%r149;
$L44:
.loc 1 221 4
add.u32 %r144,%r144,1;
.loc 1 220 22
shr.s32 %r145,%r145,1;
.loc 1 220 2
setp.gt.s32 %r350,%r145,7;
@ %r350 bra $L44;
bra $L43;
$L104:
.loc 1 220 8
mov.u32 %r144,%r149;
$L43:
.loc 1 222 6
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r227;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r144;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r353,[%value_in];
}
mov.u64 %r113,%r353;
setp.ne.u64 %r354,%r353,0;
@ %r354 bra $L45;
cvta.const.u64 %r358,$LC0;
mov.u32 %r356,222;
cvta.const.u64 %r355,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r355;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r356;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r353;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r358;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L45:
.loc 1 223 4
add.u64 %r119,%r353,24;
.loc 1 226 7
setp.ge.u64 %r359,%r146,%r26;
@ %r359 bra $L46;
.loc 1 223 4
mov.u64 %r180,%r119;
.loc 1 224 4
mov.u32 %r127,%r149;
.loc 1 225 4
mov.u32 %r121,0;
.loc 1 227 6
cvt.u16.u32 %r361,%r126;
$L53:
add.u64 %r143,%r26,-1;
.loc 1 234 6
add.u64 %r223,%r180,4;
.loc 1 227 6
ld.u8 %r360,[%r26+-1];
setp.eq.u16 %r362,%r360,%r361;
@ %r362 bra $L47;
$L50:
.loc 1 233 6
setp.eq.u32 %r363,%r127,32;
@ ! %r363 bra $L170;
bra $L48;
$L47:
.loc 1 227 42
sub.u64 %r364,%r143,%r236;
add.u64 %r50,%r364,1;
.loc 1 227 25
setp.lt.u64 %r366,%r50,%r146;
@ %r366 bra $L50;
.loc 1 228 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r50;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r124;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r236;
call (%value_in),strncmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r370,[%value_in];
}
.loc 1 228 7
setp.eq.u32 %r371,%r370,0;
@ ! %r371 bra $L50;
bra $L105;
$L170:
.loc 1 239 5
mov.u32 %r117,%r127;
add.u32 %r127,%r127,4;
bra $L52;
$L48:
.loc 1 234 9
st.u32 [%r180],%r121;
.loc 1 241 4
add.u64 %r222,%r180,8;
.loc 1 234 6
mov.u64 %r180,%r223;
.loc 1 241 4
mov.u64 %r223,%r222;
.loc 1 236 6
mov.u32 %r117,%r149;
.loc 1 241 4
mov.u32 %r127,4;
.loc 1 235 6
mov.u32 %r121,0;
$L52:
.loc 1 238 9
ld.u8 %r374,[%r26+-1];
add.u64 %r375,%r561,%r374;
.loc 1 238 27
ld.u8 %r563,[%r375];
mov.u16 %r378,%r563;
and.b16 %r377,%r378,15;
cvt.u32.u16 %r380,%r377;
cvt.u32.u8 %r379,%r380;
.loc 1 238 35
shl.b32 %r381,%r379,%r117;
.loc 1 238 5
or.b32 %r121,%r121,%r381;
.loc 1 227 6
mov.u64 %r26,%r143;
bra $L51;
$L105:
mov.u64 %r26,%r50;
$L51:
.loc 1 226 7
setp.gt.u64 %r382,%r26,%r146;
@ %r382 bra $L53;
bra $L54;
$L46:
.loc 1 234 6
add.u64 %r223,%r353,28;
.loc 1 223 4
mov.u64 %r180,%r119;
.loc 1 225 4
mov.u32 %r121,0;
$L54:
.loc 1 241 7
st.u32 [%r180],%r121;
.loc 1 242 18
sub.u64 %r383,%r223,%r119;
shr.s64 %r385,%r383,2;
.loc 1 242 14
cvt.u32.u64 %r134,%r385;
.loc 1 242 10
st.u32 [%r353+20],%r134;
.loc 1 243 8
shl.b32 %r61,%r134,5;
.loc 1 243 13
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r121;
call (%value_in),__hi0bits,(%out_arg1);
ld.param.u32 %r387,[%value_in];
}
.loc 1 243 4
sub.u32 %r135,%r61,%r387;
.loc 1 244 8
ld.u32 %r118,[%r229];
.loc 1 247 5
setp.le.s32 %r388,%r135,%r118;
@ %r388 bra $L55;
.loc 1 248 5
sub.u32 %r137,%r135,%r118;
.loc 1 249 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r353;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r137;
call (%value_in),__any_on,(%out_arg1,%out_arg2);
ld.param.u32 %r391,[%value_in];
}
mov.u32 %r63,%r391;
.loc 1 249 6
setp.eq.u32 %r392,%r63,0;
@ %r392 bra $L56;
.loc 1 251 6
add.u32 %r138,%r137,-1;
.loc 1 252 11
shr.s32 %r393,%r138,5;
cvt.s64.s32 %r394,%r393;
.loc 1 252 9
shl.b64 %r395,%r394,2;
add.u64 %r396,%r119,%r395;
.loc 1 252 31
and.b32 %r397,%r138,31;
.loc 1 252 25
mov.u32 %r399,1;
shl.b32 %r398,%r399,%r397;
.loc 1 252 21
ld.u32 %r401,[%r396];
and.b32 %r400,%r398,%r401;
.loc 1 252 7
setp.eq.u32 %r402,%r400,0;
@ %r402 bra $L106;
.loc 1 254 8
setp.le.s32 %r403,%r138,1;
@ %r403 bra $L57;
.loc 1 254 18
add.u32 %r406,%r137,-2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r353;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r406;
call (%value_in),__any_on,(%out_arg1,%out_arg2);
ld.param.u32 %r407,[%value_in];
}
.loc 1 254 15
setp.ne.u32 %r408,%r407,0;
@ %r408 bra $L107;
$L57:
.loc 1 253 14
mov.u32 %r63,2;
bra $L56;
$L106:
.loc 1 250 13
mov.u32 %r63,%r399;
bra $L56;
$L107:
.loc 1 255 15
mov.u32 %r63,3;
$L56:
.loc 1 258 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r353;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r137;
call rshift,(%out_arg1,%out_arg2);
}
.loc 1 259 5
add.u32 %r120,%r120,%r137;
bra $L58;
$L55:
.loc 1 261 10
setp.ge.s32 %r411,%r135,%r118;
@ %r411 bra $L108;
.loc 1 262 5
sub.u32 %r136,%r118,%r135;
.loc 1 263 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r227;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r353;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r136;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r415,[%value_in];
}
mov.u64 %r113,%r415;
.loc 1 264 5
sub.u32 %r120,%r120,%r136;
.loc 1 265 5
add.u64 %r119,%r113,24;
.loc 1 245 11
mov.u32 %r63,0;
bra $L58;
$L108:
mov.u32 %r63,0;
$L58:
.loc 1 267 5
ld.u32 %r416,[%r229+8];
setp.ge.s32 %r417,%r416,%r120;
@ %r417 bra $L59;
$L60:
.loc 1 269 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r227;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r113;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 270 7
mov.u64 %r420,0;
st.u64 [%r231],%r420;
.loc 1 271 10
mov.u32 %r226,163;
bra $L18;
$L59:
.loc 1 274 13
ld.u32 %r76,[%r229+4];
.loc 1 274 5
setp.le.s32 %r421,%r76,%r120;
@ %r421 bra $L109;
.loc 1 276 5
sub.u32 %r139,%r76,%r120;
.loc 1 277 6
setp.gt.s32 %r422,%r118,%r139;
@ %r422 bra $L62;
.loc 1 278 15
ld.u32 %r78,[%r229+12];
.loc 1 278 4
setp.eq.u32 %r423,%r78,2;
@ %r423 bra $L63;
setp.eq.u32 %r424,%r78,3;
@ %r424 bra $L64;
setp.ne.u32 %r425,%r78,1;
@ %r425 bra $L65;
.loc 1 280 8
setp.eq.u32 %r426,%r118,%r139;
@ ! %r426 bra $L65;
.loc 1 280 20
setp.eq.u32 %r427,%r118,1;
@ %r427 bra $L67;
.loc 1 280 33
add.u32 %r430,%r118,-1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r113;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r430;
call (%value_in),__any_on,(%out_arg1,%out_arg2);
ld.param.u32 %r431,[%value_in];
}
.loc 1 280 30
setp.eq.u32 %r432,%r431,0;
@ %r432 bra $L65;
.loc 1 290 16
ld.u32 %r76,[%r229+4];
bra $L67;
$L63:
.loc 1 284 8
setp.eq.u32 %r433,%r232,0;
@ ! %r433 bra $L65;
bra $L67;
$L64:
.loc 1 288 8
setp.eq.u32 %r434,%r232,0;
@ %r434 bra $L65;
$L67:
.loc 1 290 11
st.u32 [%r230],%r76;
.loc 1 291 21
mov.u32 %r435,1;
st.u32 [%r113+20],%r435;
.loc 1 291 11
st.u32 [%r119],%r435;
.loc 1 292 10
st.u64 [%r231],%r113;
.loc 1 293 13
mov.u32 %r226,98;
bra $L18;
$L65:
.loc 1 297 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r227;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r113;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 298 8
mov.u64 %r439,0;
st.u64 [%r231],%r439;
.loc 1 299 11
mov.u32 %r226,80;
bra $L18;
$L62:
.loc 1 301 5
add.u32 %r140,%r139,-1;
.loc 1 302 6
setp.ne.u32 %r440,%r63,0;
@ %r440 bra $L110;
.loc 1 304 11
setp.eq.u32 %r441,%r140,0;
@ %r441 bra $L69;
.loc 1 305 15
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r113;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r140;
call (%value_in),__any_on,(%out_arg1,%out_arg2);
ld.param.u32 %r444,[%value_in];
}
mov.u32 %r63,%r444;
bra $L69;
$L110:
.loc 1 303 13
mov.u32 %r63,1;
$L69:
.loc 1 306 10
shr.s32 %r445,%r140,5;
cvt.s64.s32 %r446,%r445;
.loc 1 306 8
shl.b64 %r447,%r446,2;
add.u64 %r448,%r119,%r447;
.loc 1 306 30
and.b32 %r449,%r140,31;
.loc 1 306 24
mov.u32 %r451,1;
shl.b32 %r450,%r451,%r449;
.loc 1 306 20
ld.u32 %r453,[%r448];
and.b32 %r452,%r450,%r453;
.loc 1 306 6
setp.eq.u32 %r454,%r452,0;
@ %r454 bra $L70;
.loc 1 307 13
or.b32 %r63,%r63,2;
$L70:
.loc 1 308 9
sub.u32 %r118,%r118,%r139;
.loc 1 309 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r113;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r139;
call rshift,(%out_arg1,%out_arg2);
}
.loc 1 310 5
ld.u32 %r120,[%r229+4];
.loc 1 275 7
mov.u32 %r226,2;
bra $L61;
$L109:
.loc 1 273 6
mov.u32 %r226,1;
$L61:
.loc 1 312 5
setp.eq.u32 %r457,%r63,0;
@ %r457 bra $L71;
.loc 1 314 13
ld.u32 %r90,[%r229+12];
.loc 1 314 3
setp.eq.u32 %r458,%r90,2;
@ %r458 bra $L72;
setp.eq.u32 %r459,%r90,3;
@ %r459 bra $L73;
setp.ne.u32 %r460,%r90,1;
@ %r460 bra $L74;
.loc 1 318 21
and.b32 %r461,%r63,2;
.loc 1 318 10
setp.eq.u32 %r462,%r461,0;
@ %r462 bra $L74;
.loc 1 319 27
ld.u32 %r464,[%r119];
or.b32 %r463,%r63,%r464;
and.b32 %r465,%r463,1;
.loc 1 319 8
setp.ne.u32 %r466,%r465,0;
@ %r466 bra $L75;
bra $L74;
$L72:
.loc 1 323 7
mov.u32 %r467,1;
sub.u32 %r232,%r467,%r232;
$L73:
.loc 1 328 6
setp.eq.u32 %r468,%r232,0;
@ %r468 bra $L74;
$L75:
.loc 1 329 6
ld.u32 %r141,[%r113+20];
.loc 1 110 4
add.u64 %r150,%r113,24;
.loc 1 111 12
cvt.s64.s32 %r469,%r141;
.loc 1 111 9
shl.b64 %r152,%r469,2;
.loc 1 111 5
add.u64 %r153,%r150,%r152;
mov.u64 %r195,%r150;
.loc 1 118 8
mov.u32 %r562,0;
$L78:
.loc 1 114 7
ld.u32 %r155,[%r195];
.loc 1 114 6
setp.eq.u32 %r470,%r155,-1;
@ %r470 bra $L76;
.loc 1 115 4
add.u32 %r471,%r155,1;
st.u32 [%r195],%r471;
.loc 1 116 11
bra $L77;
$L76:
.loc 1 118 8
st.u32 [%r195],%r562;
.loc 1 119 3
add.u64 %r195,%r195,4;
setp.gt.u64 %r473,%r153,%r195;
@ %r473 bra $L78;
.loc 1 131 8
ld.u32 %r158,[%r113+20];
.loc 1 131 6
ld.u32 %r474,[%r113+12];
setp.lt.s32 %r475,%r158,%r474;
@ %r475 bra $L79;
.loc 1 132 9
ld.u32 %r479,[%r113+8];
add.u32 %r478,%r479,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r227;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r478;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r480,[%value_in];
}
setp.ne.u64 %r481,%r480,0;
@ %r481 bra $L80;
cvta.const.u64 %r485,$LC0;
mov.u32 %r483,132;
cvta.const.u64 %r482,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r482;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r483;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r480;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r485;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L80:
.loc 1 133 4
ld.s32 %r489,[%r113+20];
add.u64 %r490,%r489,2;
shl.b64 %r491,%r490,2;
add.u64 %r492,%r113,16;
add.u64 %r493,%r480,16;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r493;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r492;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r491;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r494,[%value_in];
}
.loc 1 134 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r227;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r113;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 137 10
ld.u32 %r158,[%r480+20];
.loc 1 331 6
add.u64 %r150,%r480,24;
mov.u64 %r113,%r480;
$L79:
.loc 1 137 16
add.u32 %r497,%r158,1;
st.u32 [%r113+20],%r497;
.loc 1 137 20
cvt.s64.s32 %r498,%r158;
add.u64 %r499,%r498,4;
shl.b64 %r500,%r499,2;
add.u64 %r501,%r113,%r500;
mov.u32 %r503,1;
st.u32 [%r501+8],%r503;
$L77:
.loc 1 332 7
setp.ne.u32 %r504,%r226,2;
@ %r504 bra $L81;
.loc 1 333 29
ld.u32 %r506,[%r229];
add.u32 %r505,%r506,-1;
.loc 1 333 8
setp.ne.u32 %r507,%r505,%r118;
@ %r507 bra $L111;
.loc 1 334 17
shr.s32 %r508,%r118,5;
cvt.s64.s32 %r509,%r508;
.loc 1 334 10
shl.b64 %r510,%r509,2;
add.u64 %r511,%r150,%r510;
.loc 1 334 42
and.b32 %r512,%r118,31;
.loc 1 334 32
mov.u32 %r514,1;
shl.b32 %r513,%r514,%r512;
.loc 1 334 28
ld.u32 %r516,[%r511];
and.b32 %r515,%r513,%r516;
.loc 1 334 6
setp.eq.u32 %r517,%r515,0;
selp.u32 %r226,34,33,%r517;
bra $L71;
$L81:
.loc 1 337 15
ld.u32 %r106,[%r113+20];
.loc 1 337 12
setp.gt.s32 %r518,%r106,%r141;
@ %r518 bra $L83;
.loc 1 338 12
and.b32 %r142,%r118,31;
.loc 1 338 5
setp.eq.u32 %r519,%r142,0;
@ %r519 bra $L113;
.loc 1 339 13
add.u64 %r521,%r150,%r152;
ld.u32 %r520,[%r521+-4];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r520;
call (%value_in),__hi0bits,(%out_arg1);
ld.param.u32 %r523,[%value_in];
}
.loc 1 339 33
mov.u32 %r525,32;
sub.u32 %r524,%r525,%r142;
.loc 1 339 9
setp.ge.s32 %r526,%r523,%r524;
@ %r526 bra $L114;
.loc 1 79 11
ld.u32 %r106,[%r113+20];
$L83:
.loc 1 79 5
setp.le.s32 %r527,%r106,0;
@ %r527 bra $L84;
.loc 1 80 13
cvt.s64.s32 %r528,%r106;
.loc 1 80 10
shl.b64 %r529,%r528,2;
.loc 1 80 6
add.u64 %r172,%r150,%r529;
.loc 1 84 6
ld.u32 %r530,[%r113+24];
shr.u32 %r179,%r530,1;
.loc 1 84 10
add.u64 %r531,%r113,28;
.loc 1 85 9
setp.le.u64 %r532,%r172,%r531;
@ %r532 bra $L85;
mov.u64 %r201,%r150;
mov.u64 %r200,%r531;
$L86:
.loc 1 86 22
ld.u32 %r534,[%r200];
shl.b32 %r533,%r534,31;
.loc 1 86 29
or.b32 %r535,%r533,%r179;
.loc 1 86 11
st.u32 [%r201],%r535;
.loc 1 87 7
ld.u32 %r536,[%r200];
shr.u32 %r179,%r536,1;
.loc 1 85 9
add.u64 %r201,%r201,4;
add.u64 %r200,%r200,4;
setp.gt.u64 %r537,%r172,%r200;
@ %r537 bra $L86;
.loc 1 86 8
sub.u64 %r538,%r172,%r113;
add.u64 %r540,%r538,-29;
and.b64 %r542,%r540,-4;
add.u64 %r543,%r542,4;
add.u64 %r122,%r150,%r543;
.loc 1 89 13
st.u32 [%r122],%r179;
.loc 1 89 7
setp.eq.u32 %r544,%r179,0;
@ %r544 bra $L87;
bra $L93;
$L116:
.loc 1 77 9
mov.u64 %r122,%r150;
$L93:
.loc 1 90 7
add.u64 %r122,%r122,4;
$L87:
.loc 1 96 20
sub.u64 %r545,%r122,%r150;
shr.s64 %r547,%r545,2;
.loc 1 96 15
cvt.u32.u64 %r183,%r547;
st.u32 [%r113+20],%r183;
.loc 1 96 5
setp.ne.u32 %r548,%r183,0;
@ %r548 bra $L88;
$L89:
.loc 1 97 12
mov.u32 %r549,0;
st.u32 [%r113+24],%r549;
$L88:
.loc 1 341 8
add.u32 %r120,%r120,1;
ld.u32 %r550,[%r229+8];
setp.lt.s32 %r551,%r550,%r120;
@ %r551 bra $L60;
mov.u32 %r226,33;
bra $L71;
$L111:
mov.u32 %r226,34;
bra $L71;
$L113:
mov.u32 %r226,33;
bra $L71;
$L114:
mov.u32 %r226,33;
bra $L71;
$L74:
.loc 1 347 8
or.b32 %r226,%r226,16;
$L71:
.loc 1 349 6
st.u64 [%r231],%r113;
.loc 1 350 7
st.u32 [%r230],%r120;
.loc 1 351 9
bra $L18;
$L84:
.loc 1 96 15
mov.u32 %r553,0;
st.u32 [%r113+20],%r553;
bra $L89;
$L171:
.loc 1 216 6
st.u64 [%r228],%r26;
bra $L90;
$L23:
.loc 1 194 9
ld.u8 %r30,[%r146];
mov.u64 %r26,%r146;
$L24:
.loc 1 194 2
cvt.u16.u32 %r555,%r30;
and.b16 %r554,%r555,-33;
cvt.u32.u16 %r557,%r554;
cvt.u16.u8 %r556,%r557;
setp.eq.u16 %r558,%r556,80;
@ ! %r558 bra $L171;
bra $L115;
$L172:
.loc 1 96 15
st.u32 [%r113+20],%r179;
bra $L89;
$L85:
.loc 1 89 13
st.u32 [%r113+24],%r179;
.loc 1 89 7
setp.ne.u32 %r560,%r179,0;
@ %r560 bra $L116;
bra $L172;
$L18:
.loc 1 352 1
mov.u32 %value,%r226;
st.param.u32 [%value_out],%value;
ret;
}
/346            1612277262  0     0     100666  9998      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __match
.visible .func (.param .u32 %value_out) __match (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/gdtoa-hexnan.c"
// BEGIN GLOBAL FUNCTION DECL: __hexnan
.visible .func (.param .u32 %value_out) __hexnan (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: __hexdig
.extern .const .align 1 .u8 __hexdig[];
// BEGIN GLOBAL FUNCTION DEF: __match
.visible .func (.param .u32 %value_out) __match (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u32 %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .pred %r37;
mov.u64 %r32,%ar0;
.loc 1 52 14
ld.u64 %r27,[%r32];
mov.u64 %r25,%ar1;
.loc 1 54 7
bra $L2;
$L5:
.loc 1 55 12
ld.s8 %r26,[%r27];
.loc 1 55 25
add.u32 %r34,%r26,-65;
setp.gt.u32 %r35,%r34,25;
@ %r35 bra $L3;
.loc 1 56 6
add.u32 %r26,%r26,32;
$L3:
.loc 1 57 6
add.u64 %r25,%r25,1;
setp.ne.u32 %r36,%r26,%r28;
@ %r36 bra $L6;
$L2:
.loc 1 54 12
ld.s8 %r28,[%r25];
.loc 1 55 6
add.u64 %r27,%r27,1;
.loc 1 54 7
setp.ne.u32 %r37,%r28,0;
@ %r37 bra $L5;
.loc 1 60 6
st.u64 [%r32],%r27;
.loc 1 61 9
mov.u32 %r31,1;
bra $L1;
$L6:
.loc 1 58 11
mov.u32 %r31,0;
$L1:
.loc 1 62 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __hexnan
.visible .func (.param .u32 %value_out) __hexnan (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r45;
.reg .u32 %r47;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u64 %r54;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r60;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u32 %r72;
.reg .u32 %r75;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u64 %r79;
.reg .u32 %r80;
.reg .u32 %r83;
.reg .u64 %r86;
.reg .u32 %r87;
.reg .u32 %r88;
.reg .u64 %r90;
.reg .u64 %r97;
.reg .u32 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u32 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .pred %r110;
.reg .u32 %r111;
.reg .pred %r112;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .pred %r116;
.reg .pred %r117;
.reg .pred %r118;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u32 %r123;
.reg .u32 %r124;
.reg .u16 %r125;
.reg .u16 %r126;
.reg .u16 %r127;
.reg .u32 %r128;
.reg .u16 %r129;
.reg .pred %r130;
.reg .pred %r131;
.reg .u32 %r134;
.reg .u32 %r135;
.reg .pred %r136;
.reg .pred %r138;
.reg .u64 %r139;
.reg .pred %r140;
.reg .u32 %r141;
.reg .pred %r142;
.reg .u16 %r144;
.reg .u16 %r145;
.reg .u32 %r146;
.reg .u32 %r147;
.reg .u32 %r148;
.reg .pred %r149;
.reg .pred %r150;
.reg .u32 %r152;
.reg .u32 %r153;
.reg .u32 %r155;
.reg .u32 %r156;
.reg .u16 %r157;
.reg .u16 %r158;
.reg .u16 %r159;
.reg .u32 %r160;
.reg .u16 %r161;
.reg .pred %r162;
.reg .pred %r163;
.reg .u32 %r164;
.reg .u32 %r165;
.reg .u32 %r166;
.reg .u32 %r167;
.reg .pred %r168;
.reg .pred %r169;
.reg .u64 %r170;
.reg .u64 %r171;
.reg .u64 %r172;
.reg .pred %r173;
.reg .u64 %r174;
.reg .u64 %r176;
.reg .u32 %r177;
.reg .pred %r178;
.reg .pred %r179;
.reg .u32 %r180;
.reg .u32 %r181;
.reg .u32 %r182;
.reg .u32 %r183;
.reg .pred %r184;
.reg .pred %r185;
.reg .pred %r186;
.reg .u32 %r187;
.reg .u32 %r188;
.reg .pred %r189;
.reg .u64 %r191;
.reg .u32 %r192;
.reg .u32 %r193;
.reg .u32 %r194;
.reg .u32 %r195;
mov.u64 %r104,%ar0;
mov.u64 %r105,%ar1;
mov.u64 %r106,%ar2;
.loc 1 89 8
ld.u32 %r53,[%r105];
.loc 1 90 18
shr.s32 %r107,%r53,5;
cvt.s64.s32 %r108,%r107;
.loc 1 90 9
shl.b64 %r109,%r108,2;
.loc 1 90 4
add.u64 %r54,%r106,%r109;
.loc 1 91 12
and.b32 %r25,%r53,31;
.loc 1 91 5
setp.ne.u32 %r110,%r25,0;
@ %r110 bra $L8;
.loc 1 93 7
add.u64 %r66,%r54,-4;
.loc 1 90 4
mov.u64 %r45,%r54;
bra $L9;
$L8:
.loc 1 92 4
add.u64 %r45,%r54,4;
mov.u64 %r66,%r54;
$L9:
.loc 1 93 7
mov.u32 %r111,0;
st.u32 [%r45+-4],%r111;
.loc 1 96 4
ld.u64 %r58,[%r104];
.loc 1 97 7
add.u64 %r59,%r58,1;
.loc 1 97 11
ld.u8 %r60,[%r58+1];
.loc 1 97 7
setp.ne.u32 %r112,%r60,0;
@ %r112 bra $L36;
$L19:
.loc 1 130 10
mov.u32 %r103,4;
bra $L7;
$L36:
.loc 1 97 7
mov.u64 %r64,%r66;
mov.u64 %r39,%r66;
.loc 1 95 20
mov.u32 %r52,%r111;
.loc 1 95 16
mov.u32 %r51,%r52;
.loc 1 95 10
mov.u32 %r47,%r52;
cvta.const.u64 %r191,__hexdig;
.loc 1 125 9
mov.u32 %r192,%r52;
mov.u32 %r193,%r52;
.loc 1 71 4
mov.u32 %r194,8;
.loc 1 73 4
mov.u32 %r195,32;
$L10:
.loc 1 98 13
cvt.u64.u32 %r114,%r60;
add.u64 %r115,%r191,%r114;
ld.u8 %r26,[%r115];
.loc 1 98 6
setp.ne.u32 %r116,%r26,0;
@ %r116 bra $L12;
.loc 1 99 7
setp.gt.u32 %r117,%r60,32;
@ %r117 bra $L13;
.loc 1 100 8
setp.ge.s32 %r118,%r51,%r47;
@ %r118 bra $L14;
.loc 1 101 12
set.u32.lt.u64 %r120,%r39,%r64;
neg.s32 %r121,%r120;
.loc 1 101 22
set.u32.le.s32 %r123,%r52,7;
neg.s32 %r124,%r123;
.loc 1 101 17
cvt.u16.u32 %r126,%r121;
cvt.u16.u32 %r127,%r124;
and.b16 %r125,%r126,%r127;
.loc 1 101 9
cvt.u32.u16 %r128,%r125;
cvt.u16.u8 %r129,%r128;
setp.ne.u16 %r130,%r129,0;
@ %r130 bra $L15;
$L18:
.loc 1 103 9
setp.ge.u64 %r131,%r106,%r39;
@ %r131 bra $L37;
bra $L51;
$L15:
.loc 1 71 4
sub.u32 %r67,%r194,%r52;
.loc 1 72 4
shl.b32 %r68,%r67,2;
.loc 1 73 4
sub.u32 %r69,%r195,%r68;
.loc 1 75 6
ld.u32 %r75,[%r39];
add.u64 %r97,%r39,4;
mov.u64 %r70,%r39;
$L17:
.loc 1 75 10
ld.u32 %r72,[%r97];
.loc 1 75 14
shl.b32 %r134,%r72,%r69;
.loc 1 75 6
or.b32 %r135,%r134,%r75;
st.u32 [%r70],%r135;
.loc 1 76 8
shr.u32 %r75,%r72,%r68;
st.u32 [%r97],%r75;
.loc 1 77 3
add.u64 %r70,%r70,4;
add.u64 %r97,%r97,4;
setp.lt.u64 %r136,%r70,%r64;
@ %r136 bra $L17;
bra $L18;
$L51:
.loc 1 108 11
add.u64 %r64,%r39,-4;
st.u32 [%r39+-4],%r192;
mov.u32 %r51,%r47;
mov.u64 %r39,%r64;
.loc 1 110 8
mov.u32 %r52,0;
bra $L14;
$L13:
.loc 1 114 7
setp.ne.u32 %r138,%r60,41;
@ %r138 bra $L19;
.loc 1 115 13
add.u64 %r139,%r59,1;
.loc 1 115 9
st.u64 [%r104],%r139;
.loc 1 116 5
bra $L20;
$L12:
.loc 1 120 10
add.u32 %r47,%r47,1;
.loc 1 121 6
add.u32 %r52,%r52,1;
setp.gt.s32 %r140,%r52,8;
@ %r140 bra $L21;
.loc 1 127 13
ld.u32 %r141,[%r39];
shl.b32 %r88,%r141,4;
bra $L22;
$L21:
.loc 1 122 7
setp.ge.u64 %r142,%r106,%r39;
@ %r142 bra $L14;
.loc 1 125 9
st.u32 [%r39+-4],%r192;
add.u64 %r39,%r39,-4;
mov.u32 %r88,%r193;
.loc 1 124 6
mov.u32 %r52,1;
$L22:
.loc 1 127 24
cvt.u16.u32 %r145,%r26;
and.b16 %r144,%r145,15;
cvt.u32.u16 %r147,%r144;
cvt.u32.u8 %r146,%r147;
.loc 1 127 19
or.b32 %r148,%r146,%r88;
.loc 1 127 6
st.u32 [%r39],%r148;
bra $L14;
$L37:
.loc 1 104 9
mov.u32 %r52,8;
$L14:
.loc 1 97 7
add.u64 %r59,%r59,1;
.loc 1 97 11
ld.u8 %r60,[%r59];
.loc 1 97 7
setp.ne.u32 %r149,%r60,0;
@ %r149 bra $L10;
$L20:
.loc 1 129 5
setp.eq.u32 %r150,%r47,0;
@ %r150 bra $L19;
.loc 1 131 8
set.u32.gt.u64 %r152,%r64,%r39;
neg.s32 %r153,%r152;
.loc 1 131 18
set.u32.le.s32 %r155,%r52,7;
neg.s32 %r156,%r155;
.loc 1 131 13
cvt.u16.u32 %r158,%r153;
cvt.u16.u32 %r159,%r156;
and.b16 %r157,%r158,%r159;
.loc 1 131 5
cvt.u32.u16 %r160,%r157;
cvt.u16.u8 %r161,%r160;
setp.ne.u16 %r162,%r161,0;
@ %r162 bra $L23;
$L27:
.loc 1 133 5
setp.lt.u64 %r163,%r106,%r39;
@ %r163 bra $L24;
bra $L52;
$L23:
.loc 1 71 4
mov.u32 %r164,8;
sub.u32 %r76,%r164,%r52;
.loc 1 72 4
shl.b32 %r77,%r76,2;
.loc 1 73 4
mov.u32 %r165,32;
sub.u32 %r78,%r165,%r77;
.loc 1 75 6
ld.u32 %r83,[%r39];
add.u64 %r65,%r39,4;
mov.u64 %r79,%r39;
$L26:
.loc 1 75 10
ld.u32 %r80,[%r65];
.loc 1 75 14
shl.b32 %r166,%r80,%r78;
.loc 1 75 6
or.b32 %r167,%r166,%r83;
st.u32 [%r79],%r167;
.loc 1 76 8
shr.u32 %r83,%r80,%r77;
st.u32 [%r65],%r83;
.loc 1 77 3
add.u64 %r79,%r79,4;
add.u64 %r65,%r65,4;
setp.gt.u64 %r168,%r64,%r79;
@ %r168 bra $L26;
bra $L27;
$L24:
mov.u64 %r90,%r106;
.loc 1 133 5
mov.u64 %r86,%r39;
$L28:
.loc 1 135 14
ld.u32 %r40,[%r86];
.loc 1 135 12
st.u32 [%r90],%r40;
.loc 1 136 4
add.u64 %r86,%r86,4;
add.u64 %r90,%r90,4;
setp.ge.u64 %r169,%r66,%r86;
@ %r169 bra $L28;
.loc 1 135 9
add.u64 %r171,%r66,1;
add.u64 %r172,%r39,1;
setp.lt.u64 %r173,%r171,%r172;
@ %r173 bra $L29;
sub.u64 %r174,%r66,%r39;
and.b64 %r176,%r174,-4;
add.u64 %r170,%r176,4;
bra $L30;
$L29:
mov.u64 %r170,4;
$L30:
add.u64 %r71,%r106,%r170;
.loc 1 137 12
mov.u32 %r177,0;
$L31:
st.u32 [%r71],%r177;
.loc 1 138 4
add.u64 %r71,%r71,4;
setp.ge.u64 %r178,%r66,%r71;
@ %r178 bra $L31;
.loc 1 146 7
ld.u32 %r87,[%r45+-4];
bra $L32;
$L52:
.loc 1 143 8
ld.u32 %r87,[%r45+-4];
.loc 1 142 6
setp.eq.u32 %r179,%r25,0;
@ %r179 bra $L32;
.loc 1 143 44
mov.u32 %r181,32;
sub.u32 %r180,%r181,%r25;
.loc 1 143 33
mov.u32 %r183,-1;
shr.u32 %r182,%r183,%r180;
.loc 1 143 8
and.b32 %r87,%r87,%r182;
st.u32 [%r45+-4],%r87;
$L32:
.loc 1 146 6
setp.ne.u32 %r184,%r87,0;
@ %r184 bra $L38;
.loc 1 148 6
setp.eq.u64 %r185,%r106,%r66;
@ ! %r185 bra $L34;
bra $L33;
$L35:
setp.ne.u64 %r186,%r106,%r66;
@ %r186 bra $L34;
$L33:
.loc 1 149 8
mov.u32 %r187,1;
st.u32 [%r66],%r187;
.loc 1 153 9
mov.u32 %r103,5;
.loc 1 150 4
bra $L7;
$L34:
.loc 1 145 16
add.u64 %r66,%r66,-4;
.loc 1 146 6
ld.u32 %r188,[%r66];
setp.eq.u32 %r189,%r188,0;
@ %r189 bra $L35;
.loc 1 153 9
mov.u32 %r103,5;
bra $L7;
$L38:
mov.u32 %r103,5;
$L7:
.loc 1 154 1
mov.u32 %value,%r103;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-getc.o/   1612277262  0     0     100666  3176      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _getc_r
.visible .func (.param .u32 %value_out) _getc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/getc.c"
// BEGIN GLOBAL FUNCTION DECL: getc
.visible .func (.param .u32 %value_out) getc (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __srget_r
.extern .func (.param .u32 %value_out) __srget_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _getc_r
.visible .func (.param .u32 %value_out) _getc_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r39;
.reg .u64 %r40;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
.loc 1 83 3
setp.eq.u64 %r31,%r29,0;
@ %r31 bra $L2;
ld.u32 %r32,[%r29+80];
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 85 12
ld.u32 %r35,[%r30+8];
add.u32 %r24,%r35,-1;
st.u32 [%r30+8],%r24;
setp.ge.s32 %r36,%r24,0;
@ %r36 bra $L3;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r39,[%value_in];
}
mov.u32 %r28,%r39;
bra $L1;
$L3:
ld.u64 %r25,[%r30];
add.u64 %r40,%r25,1;
st.u64 [%r30],%r40;
ld.u8 %r28,[%r25];
$L1:
.loc 1 88 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: getc
.visible .func (.param .u32 %value_out) getc (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r39;
.reg .u64 %r40;
mov.u64 %r30,%ar0;
.loc 1 96 18
ld.global.u64 %r28,[_impure_ptr];
.loc 1 98 3
setp.eq.u64 %r31,%r28,0;
@ %r31 bra $L9;
ld.u32 %r32,[%r28+80];
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L9;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
call __sinit,(%out_arg1);
}
$L9:
.loc 1 100 12
ld.u32 %r35,[%r30+8];
add.u32 %r24,%r35,-1;
st.u32 [%r30+8],%r24;
setp.ge.s32 %r36,%r24,0;
@ %r36 bra $L10;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r39,[%value_in];
}
mov.u32 %r29,%r39;
bra $L8;
$L10:
ld.u64 %r25,[%r30];
add.u64 %r40,%r25,1;
st.u64 [%r30],%r40;
ld.u8 %r29,[%r25];
$L8:
.loc 1 103 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-getc_u.o/ 1612277262  0     0     100666  2604      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _getc_unlocked_r
.visible .func (.param .u32 %value_out) _getc_unlocked_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/getc_u.c"
// BEGIN GLOBAL FUNCTION DECL: getc_unlocked
.visible .func (.param .u32 %value_out) getc_unlocked (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __srget_r
.extern .func (.param .u32 %value_out) __srget_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _getc_unlocked_r
.visible .func (.param .u32 %value_out) _getc_unlocked_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .u32 %r34;
.reg .u64 %r35;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 77 10
ld.u32 %r30,[%r29+8];
add.u32 %r23,%r30,-1;
st.u32 [%r29+8],%r23;
setp.ge.s32 %r31,%r23,0;
@ %r31 bra $L2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r34,[%value_in];
}
mov.u32 %r27,%r34;
bra $L1;
$L2:
ld.u64 %r24,[%r29];
add.u64 %r35,%r24,1;
st.u64 [%r29],%r35;
ld.u8 %r27,[%r24];
$L1:
.loc 1 78 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: getc_unlocked
.visible .func (.param .u32 %value_out) getc_unlocked (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .u64 %r36;
mov.u64 %r29,%ar0;
.loc 1 85 10
ld.u32 %r30,[%r29+8];
add.u32 %r23,%r30,-1;
st.u32 [%r29+8],%r23;
setp.ge.s32 %r31,%r23,0;
@ %r31 bra $L5;
ld.global.u64 %r34,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r35,[%value_in];
}
mov.u32 %r28,%r35;
bra $L4;
$L5:
ld.u64 %r25,[%r29];
add.u64 %r36,%r25,1;
st.u64 [%r29],%r36;
ld.u8 %r28,[%r25];
$L4:
.loc 1 86 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-getchar.o/1612277262  0     0     100666  1707      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _getchar_r
.visible .func (.param .u32 %value_out) _getchar_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/getchar.c"
// BEGIN GLOBAL FUNCTION DECL: getchar
.visible .func (.param .u32 %value_out) getchar;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _getc_r
.extern .func (.param .u32 %value_out) _getc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _getchar_r
.visible .func (.param .u32 %value_out) _getchar_r (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u32 %r28;
mov.u64 %r24,%ar0;
.loc 1 78 10
ld.u64 %r27,[%r24+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_getc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r28,[%value_in];
}
.loc 1 79 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: getchar
.visible .func (.param .u32 %value_out) getchar
{
.reg .u32 %value;
.reg .u64 %r23;
.reg .u64 %r27;
.reg .u32 %r28;
.loc 1 86 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 90 10
ld.u64 %r27,[%r23+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_getc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r28,[%value_in];
}
.loc 1 91 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

/368            1612277262  0     0     100666  1817      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _getchar_unlocked_r
.visible .func (.param .u32 %value_out) _getchar_unlocked_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/getchar_u.c"
// BEGIN GLOBAL FUNCTION DECL: getchar_unlocked
.visible .func (.param .u32 %value_out) getchar_unlocked;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _getc_unlocked_r
.extern .func (.param .u32 %value_out) _getc_unlocked_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _getchar_unlocked_r
.visible .func (.param .u32 %value_out) _getchar_unlocked_r (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u32 %r28;
mov.u64 %r24,%ar0;
.loc 1 75 10
ld.u64 %r27,[%r24+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_getc_unlocked_r,(%out_arg1,%out_arg2);
ld.param.u32 %r28,[%value_in];
}
.loc 1 76 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: getchar_unlocked
.visible .func (.param .u32 %value_out) getchar_unlocked
{
.reg .u32 %value;
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u32 %r28;
.loc 1 85 36
ld.global.u64 %r22,[_impure_ptr];
.loc 1 85 10
ld.u64 %r27,[%r22+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_getc_unlocked_r,(%out_arg1,%out_arg2);
ld.param.u32 %r28,[%value_in];
}
.loc 1 86 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

/387            1612277262  0     0     100666  5300      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __getdelim
.visible .func (.param .u64 %value_out) __getdelim (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/getdelim.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DECL: __nvptx_realloc
.extern .func (.param .u64 %value_out) __nvptx_realloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: getc_unlocked
.extern .func (.param .u32 %value_out) getc_unlocked (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __getdelim
.visible .func (.param .u64 %value_out) __getdelim (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r28;
.reg .u64 %r32;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r38;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r43;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .u64 %r50;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u16 %r57;
.reg .u16 %r58;
.reg .u16 %r59;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .u16 %r64;
.reg .u16 %r66;
.reg .u32 %r67;
.reg .u16 %r68;
.reg .pred %r69;
.reg .u64 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .u64 %r73;
.reg .pred %r74;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .pred %r78;
.reg .pred %r80;
.reg .u32 %r81;
.reg .pred %r82;
.reg .u32 %r85;
.reg .pred %r86;
.reg .pred %r87;
.reg .pred %r88;
.reg .pred %r89;
.reg .u64 %r90;
.reg .u32 %r91;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u64 %r98;
.reg .pred %r99;
mov.u64 %r47,%ar0;
mov.u64 %r48,%ar1;
mov.u32 %r49,%ar2;
mov.u64 %r50,%ar3;
.loc 1 55 28
set.u32.eq.u64 %r52,%r47,0;
neg.s32 %r53,%r52;
.loc 1 55 36
set.u32.eq.u64 %r55,%r48,0;
neg.s32 %r56,%r55;
cvt.u16.u32 %r58,%r53;
cvt.u16.u32 %r59,%r56;
or.b16 %r57,%r58,%r59;
.loc 1 55 10
set.u32.eq.u64 %r61,%r50,0;
neg.s32 %r62,%r61;
.loc 1 55 36
cvt.u16.u32 %r66,%r62;
or.b16 %r64,%r57,%r66;
cvt.u32.u16 %r67,%r64;
cvt.u16.u8 %r68,%r67;
setp.eq.u16 %r69,%r68,0;
@ %r69 bra $L2;
.loc 1 57 7
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r70,[%value_in];
}
.loc 1 57 13
mov.u32 %r71,22;
st.u32 [%r70],%r71;
.loc 1 58 14
mov.u64 %r46,-1;
bra $L1;
$L2:
.loc 1 61 7
ld.u64 %r45,[%r47];
.loc 1 62 6
setp.eq.u64 %r72,%r45,0;
@ %r72 bra $L4;
.loc 1 62 19
ld.u64 %r73,[%r48];
setp.gt.u64 %r74,%r73,3;
@ %r74 bra $L5;
$L4:
.loc 1 64 21
mov.u64 %r76,128;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r76;
call (%value_in),__nvptx_realloc,(%out_arg1,%out_arg2);
ld.param.u64 %r77,[%value_in];
}
mov.u64 %r45,%r77;
.loc 1 65 10
setp.ne.u64 %r78,%r45,0;
@ %r78 bra $L6;
$L12:
.loc 1 67 11
mov.u64 %r46,-1;
bra $L1;
$L6:
.loc 1 69 15
st.u64 [%r47],%r45;
.loc 1 70 10
st.u64 [%r48],%r76;
$L5:
.loc 1 73 3
ld.global.u64 %r36,[_impure_ptr];
setp.eq.u64 %r80,%r36,0;
@ %r80 bra $L7;
ld.u32 %r81,[%r36+80];
setp.ne.u32 %r82,%r81,0;
@ %r82 bra $L7;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
call __sinit,(%out_arg1);
}
$L7:
.loc 1 77 12
ld.u64 %r41,[%r48];
.loc 1 78 7
mov.u64 %r40,%r45;
bra $L8;
$L10:
.loc 1 87 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r50;
call (%value_in),getc_unlocked,(%out_arg1);
ld.param.u32 %r85,[%value_in];
}
.loc 1 87 14
setp.eq.u32 %r86,%r85,-1;
@ %r86 bra $L9;
add.u64 %r43,%r43,1;
.loc 1 94 22
st.u8 [%r28],%r85;
.loc 1 95 18
setp.eq.u32 %r87,%r85,%r49;
@ %r87 bra $L9;
$L14:
mov.u64 %r28,%r43;
.loc 1 85 13
setp.ne.u64 %r88,%r35,%r43;
@ %r88 bra $L10;
bra $L29;
$L30:
.loc 1 116 19
st.u64 [%r47],%r45;
.loc 1 117 14
st.u64 [%r48],%r95;
.loc 1 118 21
cvt.s64.s32 %r32,%r38;
.loc 1 118 15
add.u64 %r40,%r45,%r32;
.loc 1 119 20
sub.u64 %r41,%r95,%r32;
bra $L8;
$L9:
.loc 1 126 6
setp.eq.u64 %r89,%r45,%r43;
@ ! %r89 bra $L13;
bra $L12;
$L8:
mov.u64 %r43,%r40;
add.u64 %r90,%r41,-1;
add.u64 %r35,%r43,%r90;
bra $L14;
$L13:
.loc 1 130 8
mov.u32 %r91,0;
st.u8 [%r43],%r91;
.loc 1 131 10
sub.u64 %r46,%r43,%r45;
bra $L1;
$L29:
.loc 1 106 21
sub.u64 %r93,%r35,%r45;
.loc 1 106 15
cvt.u32.u64 %r38,%r93;
.loc 1 107 19
ld.u64 %r94,[%r48];
add.u64 %r95,%r94,%r94;
.loc 1 108 17
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r95;
call (%value_in),__nvptx_realloc,(%out_arg1,%out_arg2);
ld.param.u64 %r98,[%value_in];
}
mov.u64 %r45,%r98;
.loc 1 109 14
setp.eq.u64 %r99,%r45,0;
@ ! %r99 bra $L30;
bra $L13;
$L1:
.loc 1 132 1
mov.u64 %value,%r46;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-getenv.o/ 1612277262  0     0     100666  2164      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _findenv
.visible .func (.param .u64 %value_out) _findenv (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/getenv.c"
// BEGIN GLOBAL FUNCTION DECL: getenv
.visible .func (.param .u64 %value_out) getenv (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _findenv_r
.extern .func (.param .u64 %value_out) _findenv_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _findenv
.visible .func (.param .u64 %value_out) _findenv (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 69 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),_findenv_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r30,[%value_in];
}
.loc 1 70 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: getenv
.visible .func (.param .u64 %value_out) getenv (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u64 %r28;
.reg .u64 %r29;
mov.u64 %r24,%ar0;
.loc 1 82 10
ld.global.u64 %r28,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),_findenv_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r29,[%value_in];
}
.loc 1 83 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}
/405            1612277262  0     0     100666  5379      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _findenv_r
.visible .func (.param .u64 %value_out) _findenv_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/getenv_r.c"
// BEGIN GLOBAL FUNCTION DECL: _getenv_r
.visible .func (.param .u64 %value_out) _getenv_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: environ
.extern .global .align 8 .u64 environ[1];
// BEGIN GLOBAL FUNCTION DECL: __env_lock
.extern .func __env_lock (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __env_unlock
.extern .func __env_unlock (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strncmp
.extern .func (.param .u32 %value_out) strncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _findenv_r
.visible .func (.param .u64 %value_out) _findenv_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r35;
.reg .u32 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .pred %r48;
.reg .u16 %r50;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u16 %r57;
.reg .u16 %r58;
.reg .u16 %r59;
.reg .u32 %r60;
.reg .u16 %r61;
.reg .pred %r62;
.reg .u16 %r65;
.reg .u32 %r66;
.reg .u32 %r67;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .u16 %r72;
.reg .u16 %r73;
.reg .u16 %r74;
.reg .u32 %r75;
.reg .u16 %r76;
.reg .pred %r77;
.reg .u16 %r78;
.reg .pred %r79;
.reg .u64 %r80;
.reg .pred %r81;
.reg .u32 %r85;
.reg .pred %r86;
.reg .u64 %r87;
.reg .u16 %r88;
.reg .u32 %r89;
.reg .pred %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r94;
.reg .pred %r96;
mov.u64 %r44,%ar0;
mov.u64 %r45,%ar1;
mov.u64 %r46,%ar2;
.loc 1 84 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
call __env_lock,(%out_arg1);
}
.loc 1 88 8
ld.global.u64 %r38,[environ];
.loc 1 88 6
setp.eq.u64 %r48,%r38,0;
@ %r48 bra $L2;
.loc 1 95 10
ld.s8 %r22,[%r45];
.loc 1 95 13
cvt.u16.u32 %r50,%r22;
set.u32.ne.u16 %r51,%r50,61;
neg.s32 %r52,%r51;
set.u32.ne.u16 %r55,%r50,0;
neg.s32 %r56,%r55;
cvt.u16.u32 %r58,%r52;
cvt.u16.u32 %r59,%r56;
and.b16 %r57,%r58,%r59;
.loc 1 95 9
cvt.u32.u16 %r60,%r57;
cvt.u16.u8 %r61,%r60;
setp.ne.u16 %r62,%r61,0;
@ %r62 bra $L10;
mov.u64 %r39,%r45;
bra $L4;
$L2:
.loc 1 90 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
call __env_unlock,(%out_arg1);
}
.loc 1 91 14
mov.u64 %r43,0;
bra $L1;
$L10:
.loc 1 95 9
mov.u64 %r39,%r45;
$L3:
.loc 1 95 29
add.u64 %r39,%r39,1;
.loc 1 95 10
ld.s8 %r22,[%r39];
.loc 1 95 13
cvt.u16.u32 %r65,%r22;
set.u32.ne.u16 %r66,%r65,0;
neg.s32 %r67,%r66;
set.u32.ne.u16 %r70,%r65,61;
neg.s32 %r71,%r70;
cvt.u16.u32 %r73,%r67;
cvt.u16.u32 %r74,%r71;
and.b16 %r72,%r73,%r74;
.loc 1 95 9
cvt.u32.u16 %r75,%r72;
cvt.u16.u8 %r76,%r75;
setp.ne.u16 %r77,%r76,0;
@ %r77 bra $L3;
$L4:
.loc 1 98 5
cvt.u16.u32 %r78,%r22;
setp.ne.u16 %r79,%r78,61;
@ ! %r79 bra $L2;
.loc 1 100 13
sub.u64 %r80,%r39,%r45;
.loc 1 100 9
cvt.u32.u64 %r36,%r80;
.loc 1 101 26
ld.u64 %r35,[%r38];
.loc 1 101 5
setp.eq.u64 %r81,%r35,0;
@ %r81 bra $L2;
.loc 1 102 12
cvt.s64.s32 %r42,%r36;
$L9:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r45;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r42;
call (%value_in),strncmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r85,[%value_in];
}
.loc 1 102 10
setp.ne.u32 %r86,%r85,0;
@ %r86 bra $L8;
.loc 1 103 17
ld.u64 %r87,[%r38];
add.u64 %r37,%r87,%r42;
.loc 1 103 12
ld.s8 %r89,[%r37];
cvt.u16.u32 %r88,%r89;
setp.ne.u16 %r90,%r88,61;
@ %r90 bra $L8;
.loc 1 105 16
ld.global.u64 %r92,[environ];
sub.u64 %r91,%r38,%r92;
shr.s64 %r94,%r91,3;
.loc 1 105 12
st.u32 [%r46],%r94;
.loc 1 106 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
call __env_unlock,(%out_arg1);
}
.loc 1 107 11
add.u64 %r43,%r37,1;
bra $L1;
$L8:
.loc 1 101 30
add.u64 %r38,%r38,8;
.loc 1 101 26
ld.u64 %r35,[%r38];
.loc 1 101 5
setp.ne.u64 %r96,%r35,0;
@ %r96 bra $L9;
bra $L2;
$L1:
.loc 1 112 1
mov.u64 %value,%r43;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _getenv_r
.visible .func (.param .u64 %value_out) _getenv_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r28;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 125 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),_findenv_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r28,[%value_in];
}
.loc 1 126 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-getline.o/1612277262  0     0     100666  1408      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __getline
.visible .func (.param .u64 %value_out) __getline (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/getline.c"
// BEGIN GLOBAL FUNCTION DECL: __getdelim
.extern .func (.param .u64 %value_out) __getdelim (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: __getline
.visible .func (.param .u64 %value_out) __getline (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 44 10
mov.u32 %r28,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r25;
call (%value_in),__getdelim,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r30,[%value_in];
}
.loc 1 45 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
/423            1612277262  0     0     100666  544       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __getreent
.visible .func (.param .u64 %value_out) __getreent;
.file 1 "../../../../../newlib/libc/reent/getreent.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: __getreent
.visible .func (.param .u64 %value_out) __getreent
{
.reg .u64 %value;
.loc 1 19 10
ld.global.u64 %value,[_impure_ptr];
.loc 1 20 1
st.param.u64 [%value_out],%value;
ret;
}
lib_a-gets.o/   1612277262  0     0     100666  3155      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _gets_r
.visible .func (.param .u64 %value_out) _gets_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/gets.c"
// BEGIN GLOBAL FUNCTION DECL: gets
.visible .func (.param .u64 %value_out) gets (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __srget_r
.extern .func (.param .u32 %value_out) __srget_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _gets_r
.visible .func (.param .u64 %value_out) _gets_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u32 %r36;
.reg .pred %r37;
.reg .pred %r39;
.reg .pred %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u32 %r46;
.reg .pred %r47;
.reg .u64 %r48;
.reg .pred %r49;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
.loc 1 74 6
ld.u64 %r31,[%r34+8];
.loc 1 75 3
ld.u32 %r36,[%r34+80];
setp.ne.u32 %r37,%r36,0;
@ %r37 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
call __sinit,(%out_arg1);
}
$L2:
mov.u64 %r26,%r35;
bra $L3;
$L7:
.loc 1 78 8
setp.ne.u32 %r39,%r46,-1;
@ %r39 bra $L4;
.loc 1 79 10
setp.eq.u64 %r40,%r26,%r35;
@ %r40 bra $L9;
$L8:
.loc 1 88 6
mov.u32 %r41,0;
st.u8 [%r26],%r41;
.loc 1 90 10
mov.u64 %r33,%r35;
bra $L1;
$L4:
.loc 1 87 12
st.u8 [%r26],%r32;
add.u64 %r26,%r26,1;
$L3:
.loc 1 77 15
ld.u32 %r42,[%r31+8];
add.u32 %r25,%r42,-1;
st.u32 [%r31+8],%r25;
setp.ge.s32 %r43,%r25,0;
@ %r43 bra $L6;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call (%value_in),__srget_r,(%out_arg1,%out_arg2);
ld.param.u32 %r46,[%value_in];
}
mov.u32 %r32,%r46;
.loc 1 77 9
setp.ne.u32 %r47,%r46,10;
@ %r47 bra $L7;
bra $L8;
$L6:
.loc 1 77 15
ld.u64 %r27,[%r31];
add.u64 %r48,%r27,1;
st.u64 [%r31],%r48;
ld.u8 %r32,[%r27];
.loc 1 77 9
setp.ne.u32 %r49,%r32,10;
@ %r49 bra $L4;
bra $L8;
$L9:
.loc 1 82 11
mov.u64 %r33,0;
$L1:
.loc 1 91 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: gets
.visible .func (.param .u64 %value_out) gets (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r28;
mov.u64 %r24,%ar0;
.loc 1 98 10
ld.global.u64 %r27,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_gets_r,(%out_arg1,%out_arg2);
ld.param.u64 %r28,[%value_in];
}
.loc 1 99 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

/441            1612277262  0     0     100666  1636      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _gettimeofday_r
.visible .func (.param .u32 %value_out) _gettimeofday_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/gettimeofdayr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: gettimeofday
.extern .func (.param .u32 %value_out) gettimeofday (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _gettimeofday_r
.visible .func (.param .u32 %value_out) _gettimeofday_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 61 9
mov.u32 %r27,0;
st.global.u32 [errno],%r27;
.loc 1 62 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),gettimeofday,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 62 6
setp.ne.u32 %r31,%r30,-1;
@ %r31 bra $L1;
.loc 1 62 66
ld.global.u32 %r22,[errno];
.loc 1 62 57
setp.eq.u32 %r32,%r22,0;
@ %r32 bra $L1;
.loc 1 63 17
st.u32 [%r24],%r22;
$L1:
.loc 1 65 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
/464            1612277262  0     0     100666  548       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.visible .func (.param .u64 %value_out) __gettzinfo;
.file 1 "../../../../../newlib/libc/time/gettzinfo.c"
// BEGIN VAR DEF: tzinfo
.global .align 8 .u64 tzinfo[11] =
{1,74,0,0,0,0,74,0,0,0,0 };
// BEGIN GLOBAL FUNCTION DEF: __gettzinfo
.visible .func (.param .u64 %value_out) __gettzinfo
{
.reg .u64 %value;
.loc 1 14 10
cvta.global.u64 %value,tzinfo;
.loc 1 15 1
st.param.u64 [%value_out],%value;
ret;
}
lib_a-gmtime.o/ 1612277262  0     0     100666  1120      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: gmtime
.visible .func (.param .u64 %value_out) gmtime (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/gmtime.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: gmtime_r
.extern .func (.param .u64 %value_out) gmtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: gmtime
.visible .func (.param .u64 %value_out) gmtime (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r25,%ar0;
.loc 1 58 40
ld.global.u64 %r29,[_impure_ptr];
add.u64 %r28,%r29,188;
.loc 1 58 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call (%value_in),gmtime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r30,[%value_in];
}
.loc 1 59 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
/483            1612277262  0     0     100666  4811      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: gmtime_r
.visible .func (.param .u64 %value_out) gmtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/time/gmtime_r.c"
// BEGIN GLOBAL FUNCTION DEF: gmtime_r
.visible .func (.param .u64 %value_out) gmtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r30;
.reg .u64 %r36;
.reg .u32 %r48;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .u64 %r72;
.reg .u64 %r73;
.reg .u32 %r75;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u32 %r87;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u64 %r96;
.reg .u64 %r101;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .pred %r107;
.reg .pred %r108;
.reg .u64 %r109;
.reg .u64 %r111;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r117;
.reg .u64 %r118;
.reg .u64 %r121;
.reg .u64 %r122;
.reg .u64 %r124;
.reg .u64 %r125;
.reg .u64 %r127;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u32 %r136;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r140;
.reg .u32 %r142;
.reg .pred %r143;
.reg .u32 %r145;
.reg .u32 %r147;
.reg .pred %r149;
.reg .u32 %r150;
.reg .pred %r151;
.reg .u32 %r153;
.reg .pred %r158;
.reg .u32 %r160;
.reg .u32 %r166;
.reg .u32 %r168;
.reg .u32 %r169;
.reg .u32 %r170;
mov.u64 %r89,%ar0;
mov.u64 %r90,%ar1;
.loc 1 53 16
ld.u64 %r72,[%r89];
.loc 1 58 18
div.s64 %r22,%r72,86400;
.loc 1 59 7
rem.s64 %r67,%r72,86400;
.loc 1 60 6
setp.lt.s64 %r91,%r67,0;
@ %r91 bra $L2;
.loc 1 58 8
add.u64 %r66,%r22,719468;
bra $L3;
$L2:
.loc 1 62 11
add.u64 %r67,%r67,86400;
.loc 1 63 7
add.u64 %r66,%r22,719467;
$L3:
.loc 1 67 29
div.s64 %r96,%r67,3600;
.loc 1 67 18
st.u32 [%r90+8],%r96;
.loc 1 68 7
rem.s64 %r73,%r67,3600;
.loc 1 69 28
div.s64 %r101,%r73,60;
.loc 1 69 17
st.u32 [%r90+4],%r101;
.loc 1 70 28
rem.s64 %r105,%r73,60;
.loc 1 70 17
st.u32 [%r90],%r105;
.loc 1 73 40
add.u64 %r106,%r66,3;
.loc 1 73 48
rem.s64 %r30,%r106,7;
.loc 1 73 16
cvt.u32.u64 %r68,%r30;
.loc 1 73 6
setp.ge.s64 %r107,%r30,0;
@ %r107 bra $L4;
.loc 1 74 13
add.u32 %r68,%r68,7;
$L4:
.loc 1 75 16
st.u32 [%r90+24],%r68;
.loc 1 80 7
setp.ge.s64 %r108,%r66,0;
@ %r108 bra $L5;
.loc 1 80 34
add.u64 %r109,%r66,-146096;
.loc 1 80 56
div.s64 %r111,%r109,146097;
.loc 1 80 7
cvt.u32.u64 %r69,%r111;
bra $L6;
$L5:
.loc 1 80 56
div.s64 %r113,%r66,146097;
.loc 1 80 7
cvt.u32.u64 %r69,%r113;
$L6:
.loc 1 81 23
cvt.s64.s32 %r114,%r69;
.loc 1 81 17
mad.lo.u64 %r36,%r114,-146097,%r66;
.loc 1 82 64
div.u64 %r117,%r36,36524;
.loc 1 82 55
add.u64 %r118,%r117,%r36;
.loc 1 82 30
div.u64 %r121,%r36,1460;
.loc 1 82 55
sub.u64 %r122,%r118,%r121;
.loc 1 83 14
div.u64 %r124,%r36,146096;
.loc 1 82 83
sub.u64 %r125,%r122,%r124;
.loc 1 83 36
div.u64 %r127,%r125,365;
.loc 1 82 11
cvt.u32.u64 %r75,%r127;
.loc 1 84 71
div.u32 %r129,%r75,100;
.loc 1 84 11
cvt.u32.u64 %r131,%r36;
add.u32 %r130,%r129,%r131;
.loc 1 84 37
mul.lo.u32 %r132,%r75,365;
.loc 1 84 11
sub.u32 %r133,%r130,%r132;
.loc 1 84 57
shr.u32 %r134,%r75,2;
.loc 1 84 11
sub.u32 %r76,%r133,%r134;
.loc 1 85 14
shl.b32 %r136,%r76,2;
add.u32 %r137,%r136,%r76;
.loc 1 85 24
add.u32 %r48,%r137,2;
.loc 1 85 9
div.u32 %r77,%r48,153;
.loc 1 86 7
add.u32 %r138,%r76,1;
.loc 1 86 32
mad.lo.u32 %r140,%r77,153,2;
.loc 1 86 37
div.u32 %r142,%r140,5;
.loc 1 86 7
sub.u32 %r78,%r138,%r142;
.loc 1 87 27
setp.le.u32 %r143,%r48,1529;
selp.u32 %r70,2,-10,%r143;
.loc 1 87 9
add.u32 %r79,%r70,%r77;
.loc 1 88 40
mad.lo.u32 %r145,%r69,400,%r75;
.loc 1 88 71
set.u32.le.u32 %r147,%r79,1;
.loc 1 88 62
sub.u32 %r80,%r145,%r147;
.loc 1 91 70
setp.le.u32 %r149,%r76,305;
@ %r149 bra $L8;
.loc 1 91 15
add.u32 %r71,%r76,-306;
bra $L9;
$L8:
.loc 1 92 54
and.b32 %r150,%r75,3;
setp.ne.u32 %r151,%r150,0;
@ %r151 bra $L10;
rem.u32 %r153,%r75,100;
setp.ne.u32 %r158,%r153,0;
@ %r158 bra $L13;
$L10:
rem.u32 %r160,%r75,400;
set.u32.eq.u32 %r166,%r160,0;
neg.s32 %r87,%r166;
bra $L11;
$L13:
mov.u32 %r87,1;
$L11:
.loc 1 92 52
add.u32 %r168,%r76,59;
add.u32 %r71,%r168,%r87;
$L9:
.loc 1 90 16
st.u32 [%r90+28],%r71;
.loc 1 93 23
add.u32 %r169,%r80,-1900;
.loc 1 93 16
st.u32 [%r90+20],%r169;
.loc 1 94 15
st.u32 [%r90+16],%r79;
.loc 1 95 16
st.u32 [%r90+12],%r78;
.loc 1 97 17
mov.u32 %r170,0;
st.u32 [%r90+32],%r170;
.loc 1 100 1
mov.u64 %value,%r90;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-imaxabs.o/1612277262  0     0     100666  559       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: imaxabs
.visible .func (.param .u64 %value_out) imaxabs (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/imaxabs.c"
// BEGIN GLOBAL FUNCTION DEF: imaxabs
.visible .func (.param .u64 %value_out) imaxabs (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
mov.u64 %r23,%ar0;
.loc 1 35 21
abs.s64 %value,%r23;
.loc 1 36 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-imaxdiv.o/1612277262  0     0     100666  853       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: imaxdiv
.visible .func imaxdiv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/imaxdiv.c"
// BEGIN GLOBAL FUNCTION DEF: imaxdiv
.visible .func imaxdiv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 39 22
div.s64 %r27,%r25,%r26;
.loc 1 47 9
st.u64 [%r24],%r27;
.loc 1 40 21
rem.s64 %r28,%r25,%r26;
.loc 1 47 9
st.u64 [%r24+8],%r28;
.loc 1 48 1
ret;
}

lib_a-impure.o/ 1612277262  0     0     100666  884       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DECL: __sf
.extern .global .align 8 .u64 __sf[66];
// BEGIN VAR DEF: impure_data
.global .align 8 .u64 impure_data[167] =
{0,generic(__sf),generic(__sf) + 176,generic(__sf) + 352,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1842796655094713586,47245025004,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
// BEGIN GLOBAL VAR DEF: _global_impure_ptr
.visible .const .align 8 .u64 _global_impure_ptr[1] =
{generic(impure_data) };
// BEGIN GLOBAL VAR DEF: _impure_ptr
.visible .global .align 8 .u64 _impure_ptr[1] =
{generic(impure_data) };
lib_a-index.o/  1612277262  0     0     100666  1044      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: index
.visible .func (.param .u64 %value_out) index (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/string/index.c"
// BEGIN GLOBAL FUNCTION DECL: strchr
.extern .func (.param .u64 %value_out) strchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: index
.visible .func (.param .u64 %value_out) index (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u64 %r27;
mov.u64 %r23,%ar0;
mov.u32 %r24,%ar1;
.loc 1 37 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
call (%value_in),strchr,(%out_arg1,%out_arg2);
ld.param.u64 %r27,[%value_in];
}
.loc 1 38 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-init.o/   1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-iprintf.o/1612277262  0     0     100666  2471      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: iprintf
.visible .func (.param .u32 %value_out) iprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/iprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _iprintf_r
.visible .func (.param .u32 %value_out) _iprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfiprintf_r
.extern .func (.param .u32 %value_out) _vfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: iprintf
.visible .func (.param .u32 %value_out) iprintf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r26,%ar0;
.loc 1 32 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 36 9
ld.u64 %r32,[%r23+16];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 39 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _iprintf_r
.visible .func (.param .u32 %value_out) _iprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 52 9
ld.u64 %r32,[%r25+16];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 55 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-isalnum.o/1612277262  0     0     100666  1001      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isalnum
.visible .func (.param .u32 %value_out) isalnum (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isalnum.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isalnum
.visible .func (.param .u32 %value_out) isalnum (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 49 20
cvta.const.u64 %r28,_ctype_;
.loc 1 49 22
add.u32 %r29,%r26,1;
.loc 1 49 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 49 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,7;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 50 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-isalpha.o/1612277262  0     0     100666  1001      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isalpha
.visible .func (.param .u32 %value_out) isalpha (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isalpha.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isalpha
.visible .func (.param .u32 %value_out) isalpha (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 48 20
cvta.const.u64 %r28,_ctype_;
.loc 1 48 22
add.u32 %r29,%r26,1;
.loc 1 48 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 48 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,3;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 49 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-isattyr.o/1612277262  0     0     100666  1375      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _isatty_r
.visible .func (.param .u32 %value_out) _isatty_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/reent/isattyr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: isatty
.extern .func (.param .u32 %value_out) isatty (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _isatty_r
.visible .func (.param .u32 %value_out) _isatty_r (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r28;
.reg .pred %r29;
.reg .pred %r30;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
.loc 1 51 9
mov.u32 %r26,0;
st.global.u32 [errno],%r26;
.loc 1 52 14
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
call (%value_in),isatty,(%out_arg1);
ld.param.u32 %r28,[%value_in];
}
.loc 1 52 6
setp.ne.u32 %r29,%r28,-1;
@ %r29 bra $L1;
.loc 1 52 43
ld.global.u32 %r22,[errno];
.loc 1 52 34
setp.eq.u32 %r30,%r22,0;
@ %r30 bra $L1;
.loc 1 53 17
st.u32 [%r24],%r22;
$L1:
.loc 1 55 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-iscanf.o/ 1612277262  0     0     100666  2464      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: iscanf
.visible .func (.param .u32 %value_out) iscanf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/iscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _iscanf_r
.visible .func (.param .u32 %value_out) _iscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __svfiscanf_r
.extern .func (.param .u32 %value_out) __svfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: iscanf
.visible .func (.param .u32 %value_out) iscanf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r26,%ar0;
.loc 1 34 32
ld.global.u64 %r22,[_impure_ptr];
.loc 1 34 9
ld.u64 %r32,[%r22+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 37 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _iscanf_r
.visible .func (.param .u32 %value_out) _iscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 49 9
ld.u64 %r32,[%r25+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 52 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-iscntrl.o/1612277262  0     0     100666  1002      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: iscntrl
.visible .func (.param .u32 %value_out) iscntrl (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/iscntrl.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: iscntrl
.visible .func (.param .u32 %value_out) iscntrl (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 51 20
cvta.const.u64 %r28,_ctype_;
.loc 1 51 22
add.u32 %r29,%r26,1;
.loc 1 51 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 51 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,32;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 52 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-isdigit.o/1612277262  0     0     100666  1001      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isdigit
.visible .func (.param .u32 %value_out) isdigit (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isdigit.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isdigit
.visible .func (.param .u32 %value_out) isdigit (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 50 20
cvta.const.u64 %r28,_ctype_;
.loc 1 50 22
add.u32 %r29,%r26,1;
.loc 1 50 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 50 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,4;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 51 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-islower.o/1612277262  0     0     100666  1125      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: islower
.visible .func (.param .u32 %value_out) islower (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/islower.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: islower
.visible .func (.param .u32 %value_out) islower (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u16 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u16 %r42;
mov.u32 %r27,%ar0;
.loc 1 48 22
cvta.const.u64 %r29,_ctype_;
.loc 1 48 24
add.u32 %r30,%r27,1;
.loc 1 48 22
cvt.s64.s32 %r31,%r30;
add.u64 %r32,%r29,%r31;
.loc 1 48 39
ld.u8 %r42,[%r32];
mov.u16 %r35,%r42;
and.b16 %r34,%r35,3;
cvt.u32.u16 %r39,%r34;
cvt.s32.s8 %r38,%r39;
cvt.u16.u32 %r37,%r38;
set.u32.eq.u16 %r40,%r37,2;
neg.s32 %value,%r40;
.loc 1 49 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-isprint.o/1612277262  0     0     100666  1675      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isgraph
.visible .func (.param .u32 %value_out) isgraph (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isprint.c"
// BEGIN GLOBAL FUNCTION DECL: isprint
.visible .func (.param .u32 %value_out) isprint (.param .u32 %in_ar0);
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isgraph
.visible .func (.param .u32 %value_out) isgraph (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 62 20
cvta.const.u64 %r28,_ctype_;
.loc 1 62 22
add.u32 %r29,%r26,1;
.loc 1 62 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 62 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,23;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 63 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: isprint
.visible .func (.param .u32 %value_out) isprint (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u32 %r26,%ar0;
.loc 1 70 20
cvta.const.u64 %r28,_ctype_;
.loc 1 70 22
add.u32 %r29,%r26,1;
.loc 1 70 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
ld.s8 %r32,[%r31];
.loc 1 70 26
and.b32 %value,%r32,151;
.loc 1 71 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-ispunct.o/1612277262  0     0     100666  1002      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ispunct
.visible .func (.param .u32 %value_out) ispunct (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/ispunct.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: ispunct
.visible .func (.param .u32 %value_out) ispunct (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 50 20
cvta.const.u64 %r28,_ctype_;
.loc 1 50 22
add.u32 %r29,%r26,1;
.loc 1 50 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 50 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,16;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 51 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-isspace.o/1612277262  0     0     100666  1001      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isspace
.visible .func (.param .u32 %value_out) isspace (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isspace.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isspace
.visible .func (.param .u32 %value_out) isspace (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 49 20
cvta.const.u64 %r28,_ctype_;
.loc 1 49 22
add.u32 %r29,%r26,1;
.loc 1 49 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 49 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,8;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 50 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-isupper.o/1612277262  0     0     100666  1125      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isupper
.visible .func (.param .u32 %value_out) isupper (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isupper.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isupper
.visible .func (.param .u32 %value_out) isupper (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u16 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u16 %r42;
mov.u32 %r27,%ar0;
.loc 1 46 22
cvta.const.u64 %r29,_ctype_;
.loc 1 46 24
add.u32 %r30,%r27,1;
.loc 1 46 22
cvt.s64.s32 %r31,%r30;
add.u64 %r32,%r29,%r31;
.loc 1 46 39
ld.u8 %r42,[%r32];
mov.u16 %r35,%r42;
and.b16 %r34,%r35,3;
cvt.u32.u16 %r39,%r34;
cvt.s32.s8 %r38,%r39;
cvt.u16.u32 %r37,%r38;
set.u32.eq.u16 %r40,%r37,1;
neg.s32 %value,%r40;
.loc 1 47 1
st.param.u32 [%value_out],%value;
ret;
}

/501            1612277262  0     0     100666  1007      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isxdigit
.visible .func (.param .u32 %value_out) isxdigit (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/isxdigit.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: isxdigit
.visible .func (.param .u32 %value_out) isxdigit (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u32 %r35;
.reg .u16 %r36;
mov.u32 %r26,%ar0;
.loc 1 49 20
cvta.const.u64 %r28,_ctype_;
.loc 1 49 22
add.u32 %r29,%r26,1;
.loc 1 49 20
cvt.s64.s32 %r30,%r29;
add.u64 %r31,%r28,%r30;
.loc 1 49 26
ld.u8 %r36,[%r31];
mov.u16 %r34,%r36;
and.b16 %r33,%r34,68;
cvt.u32.u16 %r35,%r33;
cvt.s32.s8 %value,%r35;
.loc 1 50 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-itoa.o/   1612277262  0     0     100666  4214      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __itoa
.visible .func (.param .u64 %value_out) __itoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/itoa.c"
// BEGIN GLOBAL FUNCTION DECL: itoa
.visible .func (.param .u64 %value_out) itoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __utoa
.extern .func (.param .u64 %value_out) __utoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: __itoa
.visible .func (.param .u64 %value_out) __itoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u32 %r41;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .u32 %r46;
.reg .u16 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .u64 %r53;
mov.u32 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u32 %r33,%ar2;
.loc 1 41 18
add.u32 %r34,%r33,-2;
.loc 1 41 6
setp.le.u32 %r35,%r34,34;
@ %r35 bra $L2;
.loc 1 43 14
mov.u32 %r36,0;
st.u8 [%r32],%r36;
.loc 1 44 14
mov.u64 %r30,0;
bra $L1;
$L2:
.loc 1 49 13
set.u32.eq.u32 %r38,%r33,10;
neg.s32 %r39,%r38;
.loc 1 49 30
shr.u32 %r41,%r31,31;
.loc 1 49 20
cvt.u16.u32 %r44,%r39;
cvt.u16.u32 %r45,%r41;
and.b16 %r43,%r44,%r45;
.loc 1 49 6
cvt.u32.u16 %r46,%r43;
cvt.u16.u8 %r47,%r46;
setp.eq.u16 %r48,%r47,0;
@ %r48 bra $L4;
.loc 1 51 16
mov.u32 %r49,45;
st.u8 [%r32],%r49;
.loc 1 52 26
neg.s32 %r28,%r31;
.loc 1 57 3
add.u64 %r29,%r32,1;
bra $L5;
$L4:
.loc 1 55 12
mov.u32 %r28,%r31;
mov.u64 %r29,%r32;
$L5:
.loc 1 57 3
{
.param .u64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r33;
call (%value_in),__utoa,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r53,[%value_in];
}
.loc 1 58 10
mov.u64 %r30,%r32;
$L1:
.loc 1 59 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: itoa
.visible .func (.param .u64 %value_out) itoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u32 %r41;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .u32 %r46;
.reg .u16 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .u64 %r53;
mov.u32 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u32 %r33,%ar2;
.loc 1 41 18
add.u32 %r34,%r33,-2;
.loc 1 41 6
setp.le.u32 %r35,%r34,34;
@ %r35 bra $L7;
.loc 1 43 14
mov.u32 %r36,0;
st.u8 [%r32],%r36;
.loc 1 44 14
mov.u64 %r30,0;
bra $L6;
$L7:
.loc 1 49 13
set.u32.eq.u32 %r38,%r33,10;
neg.s32 %r39,%r38;
.loc 1 49 30
shr.u32 %r41,%r31,31;
.loc 1 49 20
cvt.u16.u32 %r44,%r39;
cvt.u16.u32 %r45,%r41;
and.b16 %r43,%r44,%r45;
.loc 1 49 6
cvt.u32.u16 %r46,%r43;
cvt.u16.u8 %r47,%r46;
setp.eq.u16 %r48,%r47,0;
@ %r48 bra $L9;
.loc 1 51 16
mov.u32 %r49,45;
st.u8 [%r32],%r49;
.loc 1 52 26
neg.s32 %r28,%r31;
.loc 1 57 3
add.u64 %r29,%r32,1;
bra $L10;
$L9:
.loc 1 55 12
mov.u32 %r28,%r31;
mov.u64 %r29,%r32;
$L10:
.loc 1 57 3
{
.param .u64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r33;
call (%value_in),__utoa,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r53,[%value_in];
}
.loc 1 58 10
mov.u64 %r30,%r32;
$L6:
.loc 1 67 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-jrand48.o/1612277262  0     0     100666  2045      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _jrand48_r
.visible .func (.param .u64 %value_out) _jrand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/jrand48.c"
// BEGIN GLOBAL FUNCTION DECL: jrand48
.visible .func (.param .u64 %value_out) jrand48 (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __dorand48
.extern .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _jrand48_r
.visible .func (.param .u64 %value_out) _jrand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 11
ld.u16 %r33,[%r29+4];
.loc 1 21 27
shl.b64 %r34,%r33,16;
.loc 1 21 36
ld.u16 %r35,[%r29+2];
.loc 1 21 34
add.u64 %value,%r34,%r35;
.loc 1 22 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: jrand48
.visible .func (.param .u64 %value_out) jrand48 (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r29;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
mov.u64 %r29,%ar0;
.loc 1 20 3
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 11
ld.u16 %r34,[%r29+4];
.loc 1 21 27
shl.b64 %r35,%r34,16;
.loc 1 21 36
ld.u16 %r36,[%r29+2];
.loc 1 21 34
add.u64 %value,%r35,%r36;
.loc 1 29 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-labs.o/   1612277262  0     0     100666  544       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: labs
.visible .func (.param .u64 %value_out) labs (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/labs.c"
// BEGIN GLOBAL FUNCTION DEF: labs
.visible .func (.param .u64 %value_out) labs (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
mov.u64 %r23,%ar0;
.loc 1 42 10
abs.s64 %value,%r23;
.loc 1 43 1
st.param.u64 [%value_out],%value;
ret;
}
lib_a-lcltime.o/1612277262  0     0     100666  1142      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: localtime
.visible .func (.param .u64 %value_out) localtime (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/lcltime.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: localtime_r
.extern .func (.param .u64 %value_out) localtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: localtime
.visible .func (.param .u64 %value_out) localtime (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r25,%ar0;
.loc 1 51 43
ld.global.u64 %r29,[_impure_ptr];
add.u64 %r28,%r29,188;
.loc 1 51 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call (%value_in),localtime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r30,[%value_in];
}
.loc 1 52 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
/519            1612277262  0     0     100666  10151     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: localtime_r
.visible .func (.param .u64 %value_out) localtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/time/lcltime_r.c"
// BEGIN GLOBAL VAR DECL: _daylight
.extern .global .align 4 .u32 _daylight[1];
// BEGIN GLOBAL VAR DECL: __month_lengths
.extern .const .align 4 .u32 __month_lengths[24];
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.extern .func (.param .u64 %value_out) __gettzinfo;
// BEGIN GLOBAL FUNCTION DECL: gmtime_r
.extern .func (.param .u64 %value_out) gmtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.extern .func __tz_lock;
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked
.extern .func _tzset_unlocked;
// BEGIN GLOBAL FUNCTION DECL: __tzcalc_limits
.extern .func (.param .u32 %value_out) __tzcalc_limits (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.extern .func __tz_unlock;
// BEGIN GLOBAL FUNCTION DEF: localtime_r
.visible .func (.param .u64 %value_out) localtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r32;
.reg .u32 %r37;
.reg .u32 %r39;
.reg .u32 %r41;
.reg .u32 %r57;
.reg .u32 %r59;
.reg .u32 %r63;
.reg .u32 %r67;
.reg .u32 %r69;
.reg .u32 %r75;
.reg .u32 %r77;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u32 %r83;
.reg .u32 %r89;
.reg .u64 %r90;
.reg .u32 %r92;
.reg .u64 %r93;
.reg .u64 %r95;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u32 %r107;
.reg .u64 %r109;
.reg .u64 %r111;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r116;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .pred %r119;
.reg .u32 %r121;
.reg .pred %r127;
.reg .u32 %r129;
.reg .u64 %r135;
.reg .u32 %r136;
.reg .u64 %r137;
.reg .u64 %r139;
.reg .u64 %r140;
.reg .u64 %r142;
.reg .u32 %r143;
.reg .pred %r144;
.reg .u32 %r145;
.reg .pred %r146;
.reg .u32 %r147;
.reg .pred %r148;
.reg .u32 %r150;
.reg .pred %r151;
.reg .pred %r152;
.reg .u32 %r153;
.reg .u64 %r154;
.reg .pred %r155;
.reg .u32 %r156;
.reg .u32 %r157;
.reg .pred %r158;
.reg .u32 %r159;
.reg .u32 %r161;
.reg .u32 %r162;
.reg .pred %r163;
.reg .u32 %r164;
.reg .u64 %r167;
.reg .u32 %r168;
.reg .u32 %r169;
.reg .u64 %r171;
.reg .u32 %r172;
.reg .u32 %r173;
.reg .u64 %r175;
.reg .u32 %r176;
.reg .u32 %r177;
.reg .pred %r178;
.reg .u32 %r179;
.reg .pred %r180;
.reg .u32 %r181;
.reg .pred %r182;
.reg .u32 %r183;
.reg .pred %r184;
.reg .u32 %r185;
.reg .pred %r186;
.reg .u32 %r187;
.reg .u32 %r188;
.reg .u32 %r189;
.reg .pred %r190;
.reg .u32 %r191;
.reg .u32 %r192;
.reg .u32 %r193;
.reg .u64 %r194;
.reg .u64 %r195;
.reg .u64 %r196;
.reg .pred %r197;
.reg .u32 %r198;
.reg .pred %r199;
.reg .u32 %r200;
.reg .u32 %r201;
.reg .u32 %r202;
.reg .pred %r204;
.reg .u32 %r205;
.reg .u32 %r206;
.reg .u32 %r207;
.reg .pred %r208;
.reg .u32 %r209;
.reg .u32 %r210;
.reg .u32 %r211;
.reg .pred %r212;
.reg .u32 %r213;
.reg .pred %r214;
.reg .u64 %r215;
.reg .u32 %r216;
.reg .u32 %r217;
.reg .u32 %r218;
.reg .pred %r219;
.reg .u32 %r221;
.reg .pred %r227;
.reg .u32 %r229;
.reg .u32 %r236;
.reg .u32 %r237;
.reg .u64 %r238;
mov.u64 %r111,%ar0;
mov.u64 %r112,%ar1;
.loc 1 25 29
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r113,[%value_in];
}
.loc 1 28 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r112;
call (%value_in),gmtime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r116,[%value_in];
}
.loc 1 30 8
ld.u32 %r117,[%r116+20];
add.u32 %r92,%r117,1900;
.loc 1 31 24
and.b32 %r118,%r117,3;
setp.ne.u32 %r119,%r118,0;
@ %r119 bra $L2;
rem.s32 %r121,%r92,100;
setp.ne.u32 %r127,%r121,0;
@ %r127 bra $L33;
$L2:
rem.s32 %r129,%r92,400;
set.u32.eq.u32 %r136,%r129,0;
cvt.s64.s32 %r135,%r136;
neg.s64 %r137,%r135;
add.u64 %r139,%r137,%r137;
add.u64 %r140,%r139,%r137;
shl.b64 %r104,%r140,4;
bra $L3;
$L33:
mov.u64 %r104,48;
$L3:
.loc 1 31 6
cvta.const.u64 %r142,__month_lengths;
add.u64 %r93,%r104,%r142;
.loc 1 33 3
{
call __tz_lock;
}
.loc 1 34 3
{
call _tzset_unlocked;
}
.loc 1 35 6
ld.global.u32 %r143,[_daylight];
setp.eq.u32 %r144,%r143,0;
@ %r144 bra $L4;
.loc 1 37 10
ld.u32 %r145,[%r113+4];
setp.ne.u32 %r146,%r145,%r92;
@ %r146 bra $L5;
$L8:
.loc 1 39 7
ld.u64 %r105,[%r111];
.loc 1 39 32
ld.u64 %r106,[%r113+32];
.loc 1 41 4
ld.u32 %r147,[%r113];
setp.ne.u32 %r148,%r147,0;
@ %r148 bra $L6;
bra $L35;
$L5:
.loc 1 37 35
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r92;
call (%value_in),__tzcalc_limits,(%out_arg1);
ld.param.u32 %r150,[%value_in];
}
.loc 1 37 32
setp.ne.u32 %r151,%r150,0;
@ %r151 bra $L8;
bra $L36;
$L6:
.loc 1 40 4
setp.ge.s64 %r152,%r105,%r106;
@ %r152 bra $L10;
.loc 1 38 16
mov.u32 %r153,0;
st.u32 [%r116+32],%r153;
bra $L11;
$L10:
.loc 1 40 4
ld.u64 %r154,[%r113+72];
setp.le.s64 %r155,%r154,%r105;
@ %r155 bra $L12;
.loc 1 38 16
mov.u32 %r156,1;
st.u32 [%r116+32],%r156;
bra $L13;
$L12:
mov.u32 %r157,0;
st.u32 [%r116+32],%r157;
bra $L11;
$L35:
.loc 1 42 4
setp.lt.s64 %r158,%r105,%r106;
@ %r158 bra $L14;
.loc 1 38 16
mov.u32 %r159,1;
st.u32 [%r116+32],%r159;
bra $L13;
$L14:
.loc 1 42 31
ld.u64 %r32,[%r113+72];
.loc 1 42 4
set.u32.gt.s64 %r161,%r32,%r105;
neg.s32 %r162,%r161;
.loc 1 38 16
st.u32 [%r116+32],%r162;
.loc 1 51 5
setp.gt.s64 %r163,%r32,%r105;
@ %r163 bra $L13;
bra $L11;
$L36:
.loc 1 44 16
mov.u32 %r164,-1;
st.u32 [%r116+32],%r164;
bra $L11;
$L4:
.loc 1 47 19
st.u32 [%r116+32],%r143;
bra $L11;
$L13:
.loc 1 51 5
ld.u64 %r90,[%r113+80];
$L32:
.loc 1 54 10
rem.s64 %r95,%r90,3600;
.loc 1 57 24
rem.s64 %r167,%r95,60;
.loc 1 59 15
ld.u32 %r168,[%r116];
cvt.u32.u64 %r169,%r167;
sub.u32 %r37,%r168,%r169;
st.u32 [%r116],%r37;
.loc 1 56 24
div.s64 %r171,%r95,60;
.loc 1 60 15
ld.u32 %r172,[%r116+4];
cvt.u32.u64 %r173,%r171;
sub.u32 %r39,%r172,%r173;
st.u32 [%r116+4],%r39;
.loc 1 53 25
div.s64 %r175,%r90,3600;
.loc 1 61 16
ld.u32 %r176,[%r116+8];
cvt.u32.u64 %r177,%r175;
sub.u32 %r41,%r176,%r177;
st.u32 [%r116+8],%r41;
.loc 1 63 6
setp.le.s32 %r178,%r37,59;
@ %r178 bra $L15;
.loc 1 65 19
add.u32 %r39,%r39,1;
st.u32 [%r116+4],%r39;
.loc 1 66 19
add.u32 %r179,%r37,-60;
st.u32 [%r116],%r179;
bra $L16;
$L15:
.loc 1 68 11
setp.ge.s32 %r180,%r37,0;
@ %r180 bra $L16;
.loc 1 70 19
add.u32 %r39,%r39,-1;
st.u32 [%r116+4],%r39;
.loc 1 71 19
add.u32 %r181,%r37,60;
st.u32 [%r116],%r181;
$L16:
.loc 1 73 6
setp.le.s32 %r182,%r39,59;
@ %r182 bra $L17;
.loc 1 75 20
add.u32 %r41,%r41,1;
st.u32 [%r116+8],%r41;
.loc 1 76 19
add.u32 %r183,%r39,-60;
st.u32 [%r116+4],%r183;
bra $L18;
$L17:
.loc 1 78 11
setp.ge.s32 %r184,%r39,0;
@ %r184 bra $L18;
.loc 1 80 20
add.u32 %r41,%r41,-1;
st.u32 [%r116+8],%r41;
.loc 1 81 19
add.u32 %r185,%r39,60;
st.u32 [%r116+4],%r185;
$L18:
.loc 1 83 6
setp.le.s32 %r186,%r41,23;
@ %r186 bra $L19;
.loc 1 85 7
ld.u32 %r188,[%r116+28];
add.u32 %r187,%r188,1;
st.u32 [%r116+28],%r187;
.loc 1 86 7
ld.u32 %r189,[%r116+24];
add.u32 %r57,%r189,1;
.loc 1 87 10
setp.gt.s32 %r190,%r57,6;
@ %r190 bra $L20;
.loc 1 86 7
st.u32 [%r116+24],%r57;
bra $L21;
$L20:
.loc 1 88 15
mov.u32 %r191,0;
st.u32 [%r116+24],%r191;
$L21:
.loc 1 89 7
ld.u32 %r192,[%r116+12];
add.u32 %r59,%r192,1;
st.u32 [%r116+12],%r59;
.loc 1 90 20
add.u32 %r193,%r41,-24;
st.u32 [%r116+8],%r193;
.loc 1 91 32
ld.u32 %r63,[%r116+16];
cvt.s64.s32 %r194,%r63;
.loc 1 91 28
shl.b64 %r195,%r194,2;
add.u64 %r196,%r93,%r195;
ld.u32 %r67,[%r196];
.loc 1 91 10
setp.gt.s32 %r197,%r59,%r67;
@ ! %r197 bra $L23;
.loc 1 93 17
sub.u32 %r198,%r59,%r67;
st.u32 [%r116+12],%r198;
.loc 1 94 16
add.u32 %r69,%r63,1;
.loc 1 95 7
setp.eq.u32 %r199,%r63,11;
@ %r199 bra $L24;
.loc 1 94 16
st.u32 [%r116+16],%r69;
bra $L23;
$L24:
.loc 1 97 20
mov.u32 %r200,0;
st.u32 [%r116+16],%r200;
.loc 1 98 21
ld.u32 %r202,[%r116+20];
add.u32 %r201,%r202,1;
st.u32 [%r116+20],%r201;
.loc 1 99 21
st.u32 [%r116+28],%r200;
bra $L23;
$L19:
.loc 1 103 11
setp.ge.s32 %r204,%r41,0;
@ %r204 bra $L23;
.loc 1 105 20
ld.u32 %r206,[%r116+28];
add.u32 %r205,%r206,-1;
st.u32 [%r116+28],%r205;
.loc 1 106 20
ld.u32 %r207,[%r116+24];
add.u32 %r75,%r207,-1;
.loc 1 107 10
setp.lt.s32 %r208,%r75,0;
@ %r208 bra $L26;
.loc 1 106 20
st.u32 [%r116+24],%r75;
bra $L27;
$L26:
.loc 1 108 15
mov.u32 %r209,6;
st.u32 [%r116+24],%r209;
$L27:
.loc 1 109 20
ld.u32 %r210,[%r116+12];
add.u32 %r77,%r210,-1;
st.u32 [%r116+12],%r77;
.loc 1 110 20
add.u32 %r211,%r41,24;
st.u32 [%r116+8],%r211;
.loc 1 111 10
setp.ne.u32 %r212,%r77,0;
@ %r212 bra $L23;
.loc 1 113 16
ld.u32 %r213,[%r116+16];
add.u32 %r80,%r213,-1;
.loc 1 114 7
setp.lt.s32 %r214,%r80,0;
@ %r214 bra $L28;
.loc 1 113 16
st.u32 [%r116+16],%r80;
.loc 1 120 25
cvt.s64.s32 %r215,%r80;
.loc 1 120 21
shl.b64 %r109,%r215,2;
bra $L29;
$L28:
.loc 1 116 20
mov.u32 %r216,11;
st.u32 [%r116+16],%r216;
.loc 1 117 21
ld.u32 %r81,[%r116+20];
add.u32 %r217,%r81,-1;
st.u32 [%r116+20],%r217;
.loc 1 118 29
add.u32 %r83,%r81,1899;
and.b32 %r218,%r83,3;
setp.ne.u32 %r219,%r218,0;
@ %r219 bra $L30;
rem.s32 %r221,%r83,100;
setp.ne.u32 %r227,%r221,0;
@ %r227 bra $L34;
$L30:
rem.s32 %r229,%r83,400;
set.u32.eq.u32 %r236,%r229,0;
neg.s32 %r237,%r236;
.loc 1 118 27
add.u32 %r107,%r237,364;
bra $L31;
$L34:
mov.u32 %r107,365;
$L31:
.loc 1 118 21
st.u32 [%r116+28],%r107;
mov.u64 %r109,44;
$L29:
.loc 1 120 21
add.u64 %r238,%r93,%r109;
ld.u32 %r89,[%r238];
.loc 1 120 17
st.u32 [%r116+12],%r89;
$L23:
.loc 1 123 3
{
call __tz_unlock;
}
.loc 1 125 10
bra $L37;
$L11:
.loc 1 51 5
ld.u64 %r90,[%r113+40];
bra $L32;
$L37:
.loc 1 126 1
mov.u64 %value,%r116;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-lcong48.o/1612277262  0     0     100666  2095      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _lcong48_r
.visible .func _lcong48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/lcong48.c"
// BEGIN GLOBAL FUNCTION DECL: lcong48
.visible .func lcong48 (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: _lcong48_r
.visible .func _lcong48_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u16 %r31;
.reg .u16 %r32;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u16 %r36;
.reg .u16 %r37;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
.loc 1 21 20
ld.u16 %r31,[%r30];
st.u16 [%r29+240],%r31;
.loc 1 22 20
ld.u16 %r32,[%r30+2];
st.u16 [%r29+242],%r32;
.loc 1 23 20
ld.u16 %r33,[%r30+4];
st.u16 [%r29+244],%r33;
.loc 1 24 20
ld.u16 %r34,[%r30+6];
st.u16 [%r29+246],%r34;
.loc 1 25 20
ld.u16 %r35,[%r30+8];
st.u16 [%r29+248],%r35;
.loc 1 26 20
ld.u16 %r36,[%r30+10];
st.u16 [%r29+250],%r36;
.loc 1 27 16
ld.u16 %r37,[%r30+12];
st.u16 [%r29+252],%r37;
.loc 1 28 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: lcong48
.visible .func lcong48 (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r30;
.reg .u16 %r31;
.reg .u16 %r32;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u16 %r36;
.reg .u16 %r37;
mov.u64 %r30,%ar0;
.loc 1 34 3
ld.global.u64 %r22,[_impure_ptr];
.loc 1 21 20
ld.u16 %r31,[%r30];
st.u16 [%r22+240],%r31;
.loc 1 22 20
ld.u16 %r32,[%r30+2];
st.u16 [%r22+242],%r32;
.loc 1 23 20
ld.u16 %r33,[%r30+4];
st.u16 [%r22+244],%r33;
.loc 1 24 20
ld.u16 %r34,[%r30+6];
st.u16 [%r22+246],%r34;
.loc 1 25 20
ld.u16 %r35,[%r30+8];
st.u16 [%r22+248],%r35;
.loc 1 26 20
ld.u16 %r36,[%r30+10];
st.u16 [%r22+250],%r36;
.loc 1 27 16
ld.u16 %r37,[%r30+12];
st.u16 [%r22+252],%r37;
.loc 1 35 1
ret;
}

lib_a-ldiv.o/   1612277262  0     0     100666  1218      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ldiv
.visible .func ldiv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/ldiv.c"
// BEGIN GLOBAL FUNCTION DEF: ldiv
.visible .func ldiv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .pred %r28;
.reg .pred %r29;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 88 15
div.s64 %r22,%r25,%r26;
.loc 1 89 14
rem.s64 %r23,%r25,%r26;
.loc 1 90 5
setp.lt.s64 %r27,%r25,0;
@ %r27 bra $L2;
.loc 1 90 15
setp.ge.s64 %r28,%r23,0;
@ %r28 bra $L3;
.loc 1 91 3
add.u64 %r22,%r22,1;
.loc 1 92 9
sub.u64 %r23,%r23,%r26;
bra $L3;
$L2:
.loc 1 94 19
setp.le.s64 %r29,%r23,0;
@ %r29 bra $L3;
.loc 1 95 3
add.u64 %r22,%r22,-1;
.loc 1 96 9
add.u64 %r23,%r23,%r26;
$L3:
.loc 1 98 9
st.u64 [%r24],%r22;
st.u64 [%r24+8],%r23;
.loc 1 99 1
ret;
}
lib_a-ldtoa.o/  1612277262  0     0     100666  150360    `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: eshdn1
.func eshdn1 (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/ldtoa.c"
// BEGIN FUNCTION DECL: eshup1
.func eshup1 (.param .u64 %in_ar0);
// BEGIN FUNCTION DECL: m16m
.func m16m (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN FUNCTION DECL: emovo$constprop$0
.func emovo$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DECL: enormlz
.func (.param .u32 %value_out) enormlz (.param .u64 %in_ar0);
// BEGIN FUNCTION DECL: eshift$part$0
.func (.param .u32 %value_out) eshift$part$0 (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN FUNCTION DECL: e53toe$isra$0
.func e53toe$isra$0 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DECL: emovi
.func emovi (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DECL: ecmp
.func (.param .u32 %value_out) ecmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DECL: emdnorm
.func emdnorm (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u64 %in_ar5);
// BEGIN FUNCTION DECL: eiremain
.func eiremain (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN FUNCTION DECL: emul
.func emul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN FUNCTION DECL: ediv
.func ediv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _ldtoa_r
.visible .func (.param .u64 %value_out) _ldtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: _ldcheck
.visible .func (.param .u32 %value_out) _ldcheck (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _Bfree
.extern .func _Bfree (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: sprintf
.extern .func (.param .u32 %value_out) sprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _Balloc
.extern .func (.param .u64 %value_out) _Balloc (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __assert_func
.extern .func __assert_func (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN VAR DEF: etens
.const .align 2 .u16 etens[130] =
{25974,19090,32842,5439,51532,38810,35360,20994,50272,29989,27186,52818,12954,10446,42829,24036,50493,15197,40587,23186,21100,20686,61835,15656,25869,3095,33141,30086,51574,19784,40038,22776,48208,23636,52325,37318,42510,41134,58137,18083,34078,60087,39166,36891,56763,56973,40441,60411,43646,17233,565,311,14001,13164,50799,36063,33001,18377,37818,16808,20728,9723,51051,27505,15551,42709,65487,8009,49784,16595,0,0,0,0,61472,46493,11120,44456,40389,16489,0,0,0,0,0,0,1024,51647,36379,16436,0,0,0,0,0,0,0,8192,48828,16409,0,0,0,0,0,0,0,0,40000,16396,0,0,0,0,0,0,0,0,51200,16389,0,0,0,0,0,0,0,0,40960,16386 };
// BEGIN VAR DEF: emtens
.const .align 2 .u16 emtens[130] =
{8240,53244,41411,33059,11747,40926,53966,1224,42717,2776,33380,53963,62186,4820,18725,11748,13366,21327,52910,9579,62783,63128,27603,344,34726,49341,55895,33445,41638,12981,59185,1236,58354,54066,28978,53788,56099,60978,36937,14682,41534,21256,65275,4437,64145,6457,25466,17189,49201,15532,57965,56286,53341,46070,44156,58528,25788,18044,56784,15957,10784,25124,18355,39127,16163,59813,42297,59943,43135,16170,2907,19186,42369,6381,26590,38074,17721,7853,53169,16276,49009,43443,31113,48744,19502,57691,50253,38078,59029,16329,15693,31805,14010,3371,64962,52988,33889,30481,43980,16356,49493,42152,16462,24851,54211,25899,57881,5976,53687,16369,55050,28835,2621,41943,15728,55050,28835,2621,41943,16376,52429,52428,52428,52428,52428,52428,52428,52428,52428,16379 };
// BEGIN VAR DEF: bmask
.const .align 2 .u16 bmask[17] =
{65535,65534,65532,65528,65520,65504,65472,65408,65280,65024,64512,63488,61440,57344,49152,32768,0 };
// BEGIN VAR DEF: eone
.const .align 2 .u16 eone[10] =
{0,0,0,0,0,0,0,0,32768,16383 };
// BEGIN VAR DEF: ezero
.const .align 2 .u16 ezero[10];
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[12] =
{32,45,73,110,102,105,110,105,116,121,32,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[11] =
{32,73,110,102,105,110,105,116,121,32,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[4] =
{78,97,78,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[4] =
{69,37,100,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[17] =
{66,97,108,108,111,99,32,115,117,99,99,101,101,100,101,100,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[42] =
{46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,110,101,119,108,105,98,47,108,105,98,99,47,115,116,100,108,105,98,47,108,100,116,111,97,46,99,0 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[6] =
{32,78,97,78,32,0 };
// BEGIN FUNCTION DEF: eshdn1
.func eshdn1 (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r22;
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u16 %r31;
.reg .u16 %r32;
.reg .pred %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .pred %r40;
.reg .u16 %r42;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .pred %r46;
mov.u64 %r30,%ar0;
.loc 1 819 5
add.u64 %r29,%r30,4;
add.u64 %r25,%r30,26;
.loc 1 821 8
mov.u32 %r28,0;
$L5:
.loc 1 824 11
ld.u16 %r22,[%r29];
.loc 1 824 10
cvt.u16.u32 %r32,%r22;
and.b16 %r31,%r32,1;
setp.eq.u16 %r33,%r31,0;
@ %r33 bra $L2;
.loc 1 825 7
cvt.u16.u32 %r35,%r28;
or.b16 %r34,%r35,1;
cvt.u32.u16 %r28,%r34;
$L2:
.loc 1 826 10
shr.u32 %r36,%r22,1;
cvt.u16.u32 %r37,%r36;
.loc 1 827 10
cvt.u16.u32 %r39,%r28;
and.b16 %r38,%r39,2;
setp.ne.u16 %r40,%r38,0;
@ %r40 bra $L3;
.loc 1 826 10
st.u16 [%r29],%r37;
bra $L4;
$L3:
.loc 1 828 5
or.b16 %r42,%r37,-32768;
st.u16 [%r29],%r42;
$L4:
.loc 1 829 12
cvt.u16.u32 %r44,%r28;
add.u16 %r45,%r44,%r44;
cvt.u32.u16 %r28,%r45;
.loc 1 830 7
add.u64 %r29,%r29,2;
.loc 1 822 3
setp.ne.u64 %r46,%r25,%r29;
@ %r46 bra $L5;
.loc 1 832 1
ret;
}
// BEGIN FUNCTION DEF: eshup1
.func eshup1 (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r22;
.reg .u64 %r26;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u16 %r31;
.reg .pred %r32;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u16 %r36;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .pred %r39;
.reg .u16 %r41;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .pred %r45;
mov.u64 %r30,%ar0;
.loc 1 846 5
add.u64 %r29,%r30,24;
add.u64 %r26,%r30,2;
.loc 1 847 8
mov.u32 %r28,0;
$L14:
.loc 1 851 11
ld.u16 %r22,[%r29];
.loc 1 851 10
cvt.u16.u32 %r31,%r22;
setp.ge.s16 %r32,%r31,0;
@ %r32 bra $L11;
.loc 1 852 7
cvt.u16.u32 %r34,%r28;
or.b16 %r33,%r34,1;
cvt.u32.u16 %r28,%r33;
$L11:
.loc 1 853 10
cvt.u16.u32 %r35,%r22;
add.u16 %r36,%r35,%r35;
.loc 1 854 10
cvt.u16.u32 %r38,%r28;
and.b16 %r37,%r38,2;
setp.ne.u16 %r39,%r37,0;
@ %r39 bra $L12;
.loc 1 853 10
st.u16 [%r29],%r36;
bra $L13;
$L12:
.loc 1 855 5
or.b16 %r41,%r36,1;
st.u16 [%r29],%r41;
$L13:
.loc 1 856 12
cvt.u16.u32 %r43,%r28;
add.u16 %r44,%r43,%r43;
cvt.u32.u16 %r28,%r44;
.loc 1 857 7
add.u64 %r29,%r29,-2;
.loc 1 849 3
setp.ne.u64 %r45,%r26,%r29;
@ %r45 bra $L14;
.loc 1 859 1
ret;
}
// BEGIN FUNCTION DEF: m16m
.func m16m (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u64 %r28;
.reg .u64 %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r46;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u16 %r53;
.reg .u16 %r54;
.reg .pred %r56;
.reg .u64 %r58;
.reg .u16 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .pred %r67;
.reg .u16 %r68;
.reg .pred %r69;
.reg .u64 %r70;
mov.u32 %r50,%ar0;
mov.u64 %r51,%ar1;
mov.u64 %r52,%ar2;
.loc 1 1019 6
cvt.u16.u32 %r53,%r50;
cvt.u64.u16 %r40,%r53;
.loc 1 1021 9
mov.u16 %r54,0;
st.u16 [%frame+22],%r54;
.loc 1 1022 7
st.u16 [%frame+24],%r54;
.loc 1 1023 6
add.u64 %r38,%r51,24;
.loc 1 1021 6
add.u64 %r39,%frame,24;
add.u64 %r70,%frame,4;
$L19:
.loc 1 1027 11
ld.u16 %r22,[%r38];
.loc 1 1029 4
add.u64 %r38,%r38,-2;
.loc 1 1030 4
add.u64 %r39,%r39,-2;
.loc 1 1027 10
setp.ne.u32 %r56,%r22,0;
@ %r56 bra $L17;
.loc 1 1031 14
st.u16 [%r39+-2],%r54;
bra $L18;
$L17:
.loc 1 1035 28
cvt.u16.u32 %r59,%r22;
cvt.u64.u16 %r58,%r59;
.loc 1 1035 6
mul.lo.u64 %r41,%r58,%r40;
.loc 1 1036 15
and.b64 %r60,%r41,65535;
.loc 1 1036 27
ld.u16 %r61,[%r39+2];
.loc 1 1036 10
add.u64 %r42,%r60,%r61;
.loc 1 1037 12
st.u16 [%r39+2],%r42;
.loc 1 1038 19
shr.u64 %r28,%r42,16;
.loc 1 1038 31
shr.u64 %r62,%r41,16;
.loc 1 1038 40
ld.u16 %r63,[%r39];
.loc 1 1038 10
add.u64 %r64,%r62,%r63;
add.u64 %r43,%r64,%r28;
.loc 1 1039 10
st.u16 [%r39],%r43;
.loc 1 1040 22
shr.u64 %r65,%r43,16;
.loc 1 1040 14
st.u16 [%r39+-2],%r65;
$L18:
.loc 1 1025 3
setp.ne.u64 %r67,%r39,%r70;
@ %r67 bra $L19;
mov.u64 %r36,%r39;
add.u64 %r44,%r52,4;
add.u64 %r46,%frame,26;
$L20:
.loc 1 1044 10
ld.u16 %r68,[%r36];
st.u16 [%r44],%r68;
.loc 1 1043 3
add.u64 %r36,%r36,2;
add.u64 %r44,%r44,2;
setp.ne.u64 %r69,%r36,%r46;
@ %r69 bra $L20;
.loc 1 1045 1
ret;
}
// BEGIN FUNCTION DEF: emovo$constprop$0
.func emovo$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r29;
.reg .u64 %r34;
.reg .u64 %r37;
.reg .u64 %r39;
.reg .u64 %r43;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u16 %r50;
.reg .pred %r51;
.reg .u16 %r52;
.reg .u16 %r53;
.reg .u16 %r54;
.reg .u16 %r55;
.reg .pred %r56;
.reg .u16 %r57;
.reg .pred %r58;
.reg .pred %r59;
.reg .u16 %r60;
.reg .pred %r61;
.reg .u16 %r62;
.reg .u16 %r63;
.reg .pred %r65;
.reg .u16 %r66;
.reg .u16 %r67;
.reg .u16 %r68;
.reg .pred %r69;
mov.u64 %r48,%ar0;
mov.u64 %r49,%ar1;
.loc 1 674 12
ld.u16 %r29,[%r48+2];
.loc 1 673 6
ld.u16 %r50,[%r48];
setp.eq.u16 %r51,%r50,0;
@ %r51 bra $L24;
.loc 1 674 10
cvt.u16.u32 %r53,%r29;
or.b16 %r52,%r53,-32768;
cvt.u32.u16 %r29,%r52;
$L24:
cvt.u16.u32 %r54,%r29;
st.u16 [%r49+18],%r54;
.loc 1 678 6
ld.u16 %r55,[%r48+2];
setp.ne.u16 %r56,%r55,32767;
@ %r56 bra $L25;
add.u64 %r46,%r48,6;
add.u64 %r43,%r48,26;
$L27:
.loc 1 751 7
ld.u16 %r57,[%r46];
setp.ne.u16 %r58,%r57,0;
@ %r58 bra $L26;
.loc 1 749 7
add.u64 %r46,%r46,2;
setp.ne.u64 %r59,%r43,%r46;
@ %r59 bra $L27;
bra $L40;
$L26:
mov.u64 %r25,%r49;
add.u64 %r23,%r49,16;
.loc 1 3843 9
mov.u16 %r60,0;
$L29:
st.u16 [%r25],%r60;
.loc 1 3842 7
add.u64 %r25,%r25,2;
setp.ne.u64 %r61,%r23,%r25;
@ %r61 bra $L29;
.loc 1 3844 14
mov.u16 %r62,-16384;
st.u16 [%r49+16],%r62;
.loc 1 3850 14
mov.u16 %r63,32767;
st.u16 [%r49+18],%r63;
.loc 1 684 4
bra $L23;
$L40:
mov.u64 %r24,%r49;
add.u64 %r47,%r49,18;
$L31:
.loc 1 581 10
st.u16 [%r24],%r57;
.loc 1 580 3
add.u64 %r24,%r24,2;
setp.ne.u64 %r65,%r24,%r47;
@ %r65 bra $L31;
.loc 1 582 6
ld.u16 %r67,[%r49+18];
or.b16 %r66,%r67,32767;
st.u16 [%r49+18],%r66;
.loc 1 688 7
bra $L23;
$L25:
add.u64 %r34,%r48,6;
add.u64 %r39,%r49,16;
add.u64 %r37,%r48,24;
$L32:
.loc 1 695 10
ld.u16 %r68,[%r34];
st.u16 [%r39],%r68;
.loc 1 694 3
add.u64 %r34,%r34,2;
add.u64 %r39,%r39,-2;
setp.ne.u64 %r69,%r34,%r37;
@ %r69 bra $L32;
$L23:
.loc 1 696 1
ret;
}
// BEGIN FUNCTION DEF: enormlz
.func (.param .u32 %value_out) enormlz (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r29;
.reg .u32 %r31;
.reg .u64 %r33;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u64 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u16 %r51;
.reg .u16 %r52;
.reg .pred %r53;
.reg .u16 %r54;
.reg .pred %r55;
.reg .u16 %r56;
.reg .pred %r57;
.reg .pred %r59;
.reg .pred %r60;
.reg .u16 %r61;
.reg .u16 %r62;
.reg .pred %r63;
.reg .u32 %r64;
.reg .u16 %r65;
.reg .u32 %r66;
.reg .u16 %r67;
.reg .u16 %r68;
.reg .u16 %r69;
.reg .pred %r70;
.reg .u16 %r71;
.reg .u16 %r72;
.reg .pred %r73;
.reg .pred %r75;
.reg .u16 %r76;
.reg .pred %r77;
.reg .u32 %r78;
.reg .u16 %r79;
.reg .u32 %r80;
.reg .u16 %r81;
.reg .u16 %r82;
.reg .u16 %r83;
.reg .pred %r84;
.reg .pred %r86;
.reg .pred %r87;
.reg .u64 %r89;
.reg .u64 %r91;
.reg .u16 %r92;
mov.u64 %r49,%ar0;
.loc 1 2569 7
ld.u16 %r23,[%r49+4];
.loc 1 2569 6
setp.eq.u32 %r50,%r23,0;
@ %r50 bra $L42;
.loc 1 2607 6
cvt.u16.u32 %r52,%r23;
and.b16 %r51,%r52,-256;
setp.ne.u16 %r53,%r51,0;
@ %r53 bra $L43;
.loc 1 2567 6
mov.u32 %r48,0;
bra $L57;
$L42:
.loc 1 2572 7
ld.u16 %r46,[%r49+6];
.loc 1 2572 6
cvt.u16.u32 %r54,%r46;
setp.lt.s16 %r55,%r54,0;
@ %r55 bra $L59;
.loc 1 2567 6
mov.u32 %r48,%r23;
add.u64 %r91,%r49,26;
.loc 1 924 6
cvt.u16.u32 %r92,%r48;
bra $L46;
$L49:
.loc 1 919 5
add.u64 %r33,%r49,6;
.loc 1 918 5
add.u64 %r24,%r49,4;
$L48:
.loc 1 922 14
add.u64 %r33,%r33,2;
.loc 1 922 10
cvt.u16.u32 %r56,%r46;
st.u16 [%r24],%r56;
.loc 1 921 3
add.u64 %r24,%r24,2;
setp.eq.u64 %r57,%r91,%r33;
@ %r57 bra $L47;
.loc 1 922 12
ld.u16 %r46,[%r33];
bra $L48;
$L47:
.loc 1 924 6
st.u16 [%r49+24],%r92;
.loc 1 2577 10
add.u32 %r48,%r48,16;
.loc 1 2581 10
setp.eq.u32 %r59,%r48,160;
@ %r59 bra $L41;
.loc 1 2574 10
ld.u16 %r46,[%r49+6];
$L46:
.loc 1 2574 9
setp.eq.u32 %r60,%r46,0;
@ %r60 bra $L49;
cvt.u16.u32 %r62,%r46;
and.b16 %r61,%r62,-256;
cvt.u32.u16 %r44,%r61;
.loc 1 2585 9
setp.ne.u16 %r63,%r61,0;
@ %r63 bra $L53;
.loc 1 895 5
add.u64 %r45,%r49,24;
add.u64 %r89,%r49,2;
$L52:
.loc 1 896 10
mov.u32 %r36,%r44;
.loc 1 895 5
mov.u64 %r39,%r45;
$L51:
.loc 1 900 16
ld.u16 %r35,[%r39];
mov.u32 %r31,%r36;
.loc 1 900 14
shr.u32 %r64,%r35,8;
cvt.u16.u32 %r65,%r64;
cvt.u32.u16 %r36,%r65;
.loc 1 901 10
shl.b32 %r66,%r35,8;
.loc 1 902 10
cvt.u16.u32 %r68,%r66;
cvt.u16.u32 %r69,%r31;
or.b16 %r67,%r68,%r69;
st.u16 [%r39],%r67;
.loc 1 904 7
add.u64 %r39,%r39,-2;
.loc 1 898 3
setp.ne.u64 %r70,%r89,%r39;
@ %r70 bra $L51;
.loc 1 2588 10
add.u32 %r48,%r48,8;
.loc 1 2585 11
ld.u16 %r46,[%r49+6];
.loc 1 2585 9
cvt.u16.u32 %r72,%r46;
and.b16 %r71,%r72,-256;
setp.eq.u16 %r73,%r71,0;
@ %r73 bra $L52;
bra $L53;
$L54:
.loc 1 2593 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
call eshup1,(%out_arg1);
}
.loc 1 2594 10
add.u32 %r48,%r48,1;
.loc 1 2595 10
setp.gt.s32 %r75,%r48,160;
@ %r75 bra $L41;
.loc 1 2591 11
ld.u16 %r46,[%r49+6];
$L53:
.loc 1 2591 9
cvt.u16.u32 %r76,%r46;
setp.ge.s16 %r77,%r76,0;
@ %r77 bra $L54;
bra $L41;
$L43:
.loc 1 873 5
add.u64 %r43,%r49,4;
add.u64 %r29,%r49,26;
.loc 1 874 10
mov.u32 %r47,0;
$L56:
.loc 1 877 14
shl.b32 %r78,%r23,8;
cvt.u16.u32 %r79,%r78;
cvt.u32.u16 %r40,%r79;
.loc 1 878 10
shr.u32 %r80,%r23,8;
.loc 1 879 10
cvt.u16.u32 %r82,%r80;
cvt.u16.u32 %r83,%r47;
or.b16 %r81,%r82,%r83;
st.u16 [%r43],%r81;
.loc 1 881 7
add.u64 %r43,%r43,2;
.loc 1 875 3
setp.ne.u64 %r84,%r29,%r43;
@ %r84 bra $L55;
.loc 1 2612 10
ld.u16 %r23,[%r49+4];
.loc 1 2610 10
mov.u32 %r48,-8;
bra $L57;
$L55:
.loc 1 877 16
ld.u16 %r23,[%r43];
.loc 1 880 14
mov.u32 %r47,%r40;
bra $L56;
$L58:
.loc 1 2614 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
call eshdn1,(%out_arg1);
}
.loc 1 2615 10
add.u32 %r48,%r48,-1;
.loc 1 2617 10
setp.eq.u32 %r86,%r48,-145;
@ %r86 bra $L41;
.loc 1 2612 10
ld.u16 %r23,[%r49+4];
$L57:
.loc 1 2612 9
setp.ne.u32 %r87,%r23,0;
@ %r87 bra $L58;
bra $L41;
$L59:
.loc 1 2573 12
mov.u32 %r48,%r23;
$L41:
.loc 1 2624 1
mov.u32 %value,%r48;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: eshift$part$0
.func (.param .u32 %value_out) eshift$part$0 (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r32;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u64 %r56;
.reg .u32 %r60;
.reg .u64 %r61;
.reg .u32 %r62;
.reg .u64 %r70;
.reg .u32 %r72;
.reg .u32 %r74;
.reg .u32 %r77;
.reg .u64 %r78;
.reg .u32 %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .u16 %r83;
.reg .u16 %r84;
.reg .u16 %r85;
.reg .u16 %r86;
.reg .pred %r87;
.reg .u16 %r88;
.reg .pred %r89;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .u32 %r97;
.reg .pred %r98;
.reg .u16 %r99;
.reg .u16 %r100;
.reg .u16 %r102;
.reg .u16 %r103;
.reg .u32 %r104;
.reg .u16 %r105;
.reg .u32 %r106;
.reg .u16 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .pred %r110;
.reg .pred %r111;
.reg .u16 %r112;
.reg .u16 %r113;
.reg .u16 %r114;
.reg .u16 %r115;
.reg .pred %r118;
.reg .u16 %r119;
.reg .u16 %r120;
.reg .u16 %r121;
.reg .pred %r122;
.reg .u16 %r123;
.reg .pred %r124;
.reg .pred %r129;
.reg .u32 %r130;
.reg .u16 %r131;
.reg .u32 %r132;
.reg .u16 %r133;
.reg .u16 %r134;
.reg .u16 %r135;
.reg .pred %r136;
.reg .pred %r137;
.reg .pred %r139;
.reg .u16 %r140;
.reg .u16 %r141;
.reg .pred %r143;
.reg .u64 %r144;
.reg .u64 %r145;
.reg .pred %r146;
.reg .u64 %r147;
mov.u64 %r78,%ar0;
mov.u32 %r79,%ar1;
.loc 1 2504 6
setp.lt.s32 %r80,%r79,0;
@ %r80 bra $L70;
.loc 1 2530 13
setp.gt.s32 %r81,%r79,15;
@ %r81 bra $L71;
bra $L72;
$L70:
.loc 1 2506 10
neg.s32 %r46,%r79;
.loc 1 2507 13
setp.ge.s32 %r146,%r79,-15;
@ %r146 bra $L73;
.loc 1 938 5
add.u64 %r144,%r78,26;
.loc 1 895 5
add.u64 %r61,%r78,24;
.loc 1 2501 8
mov.u32 %r51,0;
add.u64 %r145,%r78,4;
.loc 1 943 10
cvt.u16.u32 %r88,%r51;
$L75:
.loc 1 2509 9
ld.u16 %r84,[%r78+24];
cvt.u16.u32 %r85,%r51;
or.b16 %r83,%r84,%r85;
cvt.u32.u16 %r51,%r83;
.loc 1 938 5
mov.u64 %r39,%r144;
.loc 1 937 5
mov.u64 %r38,%r61;
$L74:
.loc 1 941 12
add.u64 %r38,%r38,-2;
add.u64 %r39,%r39,-2;
ld.u16 %r86,[%r38];
st.u16 [%r39],%r86;
.loc 1 940 3
setp.ne.u64 %r87,%r38,%r145;
@ %r87 bra $L74;
.loc 1 943 10
st.u16 [%r78+4],%r88;
.loc 1 2511 7
add.u32 %r46,%r46,-16;
.loc 1 2507 13
setp.gt.s32 %r89,%r46,15;
@ %r89 bra $L75;
mov.u32 %r90,-16;
sub.u32 %r62,%r90,%r79;
@ %r146 bra $L76;
and.b32 %r97,%r62,-16;
neg.s32 %r91,%r97;
bra $L77;
$L76:
mov.u32 %r91,0;
$L77:
.loc 1 2511 7
add.u32 %r46,%r62,%r91;
.loc 1 2514 13
setp.le.s32 %r98,%r46,7;
@ %r98 bra $L78;
.loc 1 2516 9
cvt.u16.u32 %r99,%r51;
cvt.s32.s16 %r60,%r99;
bra $L89;
$L91:
.loc 1 2514 13
mov.u32 %r60,0;
add.u64 %r144,%r78,26;
add.u64 %r145,%r78,4;
$L89:
.loc 1 2516 15
ld.u8 %r100,[%r78+24];
.loc 1 2516 9
cvt.u16.u32 %r103,%r60;
or.b16 %r102,%r100,%r103;
cvt.u32.u16 %r51,%r102;
.loc 1 873 5
mov.u64 %r48,%r145;
.loc 1 874 10
mov.u32 %r44,0;
$L79:
.loc 1 877 16
ld.u16 %r43,[%r48];
mov.u32 %r74,%r44;
.loc 1 877 14
shl.b32 %r104,%r43,8;
cvt.u16.u32 %r105,%r104;
cvt.u32.u16 %r44,%r105;
.loc 1 878 10
shr.u32 %r106,%r43,8;
.loc 1 879 10
cvt.u16.u32 %r108,%r106;
cvt.u16.u32 %r109,%r74;
or.b16 %r107,%r108,%r109;
st.u16 [%r48],%r107;
.loc 1 881 7
add.u64 %r48,%r48,2;
.loc 1 875 3
setp.ne.u64 %r110,%r144,%r48;
@ %r110 bra $L79;
.loc 1 2518 7
add.u32 %r46,%r46,-8;
$L78:
.loc 1 2521 13
setp.eq.u32 %r111,%r46,0;
@ %r111 bra $L80;
$L81:
.loc 1 2523 15
ld.u16 %r113,[%r78+24];
and.b16 %r112,%r113,1;
.loc 1 2523 9
cvt.u16.u32 %r115,%r51;
or.b16 %r114,%r112,%r115;
cvt.u32.u16 %r51,%r114;
.loc 1 2524 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r78;
call eshdn1,(%out_arg1);
}
.loc 1 2525 7
add.u32 %r46,%r46,-1;
.loc 1 2521 13
setp.ne.u32 %r118,%r46,0;
@ %r118 bra $L81;
.loc 1 2550 11
cvt.u16.u32 %r120,%r51;
min.u16 %r119,%r120,1;
cvt.u32.u16 %r77,%r119;
bra $L69;
$L71:
.loc 1 918 5
add.u64 %r70,%r78,4;
mov.u32 %r32,%r79;
add.u64 %r147,%r78,24;
.loc 1 924 6
mov.u16 %r123,0;
$L84:
mov.u64 %r36,%r70;
.loc 1 918 5
mov.u64 %r49,%r70;
$L83:
.loc 1 922 7
add.u64 %r49,%r49,2;
.loc 1 922 10
ld.u16 %r121,[%r49];
st.u16 [%r36],%r121;
.loc 1 921 3
add.u64 %r36,%r36,2;
setp.ne.u64 %r122,%r147,%r49;
@ %r122 bra $L83;
.loc 1 924 6
st.u16 [%r78+24],%r123;
.loc 1 2533 7
add.u32 %r32,%r32,-16;
.loc 1 2530 13
setp.gt.s32 %r124,%r32,15;
@ %r124 bra $L84;
.loc 1 2533 7
and.b32 %r79,%r79,15;
$L72:
.loc 1 2536 13
setp.le.s32 %r129,%r79,7;
@ %r129 bra $L85;
.loc 1 895 5
add.u64 %r56,%r78,24;
add.u64 %r37,%r78,2;
.loc 1 896 10
mov.u32 %r53,0;
$L86:
.loc 1 900 16
ld.u16 %r52,[%r56];
mov.u32 %r72,%r53;
.loc 1 900 14
shr.u32 %r130,%r52,8;
cvt.u16.u32 %r131,%r130;
cvt.u32.u16 %r53,%r131;
.loc 1 901 10
shl.b32 %r132,%r52,8;
.loc 1 902 10
cvt.u16.u32 %r134,%r132;
cvt.u16.u32 %r135,%r72;
or.b16 %r133,%r134,%r135;
st.u16 [%r56],%r133;
.loc 1 904 7
add.u64 %r56,%r56,-2;
.loc 1 898 3
setp.ne.u64 %r136,%r37,%r56;
@ %r136 bra $L86;
.loc 1 2539 7
add.u32 %r79,%r79,-8;
$L85:
.loc 1 2542 13
setp.ne.u32 %r137,%r79,0;
@ %r137 bra $L87;
$L88:
.loc 1 896 10
mov.u32 %r77,0;
bra $L69;
$L87:
.loc 1 2544 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r78;
call eshup1,(%out_arg1);
}
.loc 1 2545 7
add.u32 %r79,%r79,-1;
.loc 1 2542 13
setp.ne.u32 %r139,%r79,0;
@ %r139 bra $L87;
bra $L88;
$L80:
.loc 1 2550 11
cvt.u16.u32 %r141,%r51;
min.u16 %r140,%r141,1;
cvt.u32.u16 %r77,%r140;
bra $L69;
$L73:
.loc 1 2514 13
setp.lt.s32 %r143,%r79,-7;
@ %r143 bra $L91;
.loc 1 2501 8
mov.u32 %r51,0;
bra $L81;
$L69:
.loc 1 2551 1
mov.u32 %value,%r77;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: e53toe$isra$0
.func e53toe$isra$0 (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u32 %r27;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u32 %r38;
.reg .u64 %r41;
.reg .u64 %r49;
.reg .u32 %r52;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u32 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u16 %r66;
.reg .pred %r67;
.reg .u16 %r68;
.reg .pred %r70;
.reg .u16 %r72;
.reg .u16 %r73;
.reg .u16 %r75;
.reg .u16 %r77;
.reg .u16 %r78;
.reg .pred %r80;
.reg .u16 %r81;
.reg .pred %r83;
.reg .u16 %r84;
.reg .pred %r85;
.reg .u16 %r86;
.reg .pred %r87;
.reg .u16 %r88;
.reg .pred %r89;
.reg .u16 %r90;
.reg .pred %r91;
.reg .u16 %r92;
.reg .u16 %r93;
.reg .pred %r95;
.reg .u16 %r96;
.reg .pred %r97;
.reg .u16 %r98;
.reg .u16 %r99;
.reg .u16 %r101;
.reg .pred %r102;
.reg .u16 %r103;
.reg .pred %r104;
.reg .pred %r105;
.reg .u16 %r106;
.reg .u32 %r108;
.reg .u16 %r109;
.reg .pred %r110;
.reg .u16 %r111;
.reg .u16 %r113;
.reg .u16 %r114;
.reg .u16 %r115;
.reg .u16 %r116;
.reg .u32 %r118;
.reg .u32 %r119;
.reg .u32 %r121;
.reg .pred %r122;
.reg .u16 %r123;
.reg .pred %r124;
.reg .u16 %r125;
.reg .u16 %r126;
.reg .u16 %r127;
.reg .u16 %r128;
.reg .u16 %r131;
.reg .u16 %r133;
.reg .u16 %r134;
.reg .u16 %r135;
.reg .u32 %r137;
.reg .u32 %r138;
mov.u64 %r64,%ar0;
mov.u64 %r65,%ar1;
mov.u64 %r63,%frame;
add.u64 %r49,%frame,26;
.loc 1 708 11
mov.u16 %r66,0;
$L102:
st.u16 [%r63],%r66;
.loc 1 707 3
add.u64 %r63,%r63,2;
setp.ne.u64 %r67,%r49,%r63;
@ %r67 bra $L102;
.loc 1 2074 5
ld.u16 %r22,[%r64+6];
.loc 1 2076 7
cvt.u16.u32 %r68,%r22;
.loc 1 2076 6
setp.lt.s16 %r70,%r68,0;
@ %r70 bra $L103;
.loc 1 2075 9
st.u16 [%frame],%r66;
bra $L104;
$L103:
.loc 1 2077 11
mov.u16 %r72,-1;
st.u16 [%frame],%r72;
$L104:
.loc 1 2078 14
and.b16 %r73,%r68,15;
.loc 1 2078 22
or.b16 %r75,%r73,16;
.loc 1 2078 9
st.u16 [%frame+4],%r75;
.loc 1 2079 5
cvt.u16.u32 %r78,%r22;
and.b16 %r77,%r78,32752;
cvt.u32.u16 %r27,%r77;
.loc 1 2081 6
setp.ne.u16 %r80,%r77,32752;
@ %r80 bra $L105;
.loc 1 2085 10
and.b16 %r81,%r78,15;
setp.ne.u16 %r83,%r81,0;
@ %r83 bra $L106;
.loc 1 2085 32
ld.u16 %r84,[%r64+4];
setp.ne.u16 %r85,%r84,0;
@ %r85 bra $L106;
.loc 1 2086 4
ld.u16 %r86,[%r64+2];
setp.ne.u16 %r87,%r86,0;
@ %r87 bra $L106;
.loc 1 2086 20
ld.u16 %r88,[%r64];
setp.eq.u16 %r89,%r88,0;
@ %r89 bra $L107;
$L106:
mov.u64 %r60,%r65;
add.u64 %r61,%r65,16;
.loc 1 3843 9
mov.u16 %r90,0;
$L108:
st.u16 [%r60],%r90;
.loc 1 3842 7
add.u64 %r60,%r60,2;
setp.ne.u64 %r91,%r60,%r61;
@ %r91 bra $L108;
.loc 1 3844 14
mov.u16 %r92,-16384;
st.u16 [%r65+16],%r92;
.loc 1 3850 14
mov.u16 %r93,32767;
st.u16 [%r65+18],%r93;
.loc 1 2089 4
bra $L101;
$L107:
mov.u64 %r54,%r65;
add.u64 %r32,%r65,20;
.loc 1 2086 20
mov.u64 %r34,%r65;
$L110:
.loc 1 467 10
st.u16 [%r34],%r88;
.loc 1 466 3
add.u64 %r34,%r34,2;
setp.ne.u64 %r95,%r32,%r34;
@ %r95 bra $L110;
add.u64 %r33,%r65,18;
mov.u64 %r41,%r65;
.loc 1 581 10
mov.u16 %r96,0;
$L111:
st.u16 [%r41],%r96;
.loc 1 580 3
add.u64 %r41,%r41,2;
setp.ne.u64 %r97,%r33,%r41;
@ %r97 bra $L111;
.loc 1 582 6
ld.u16 %r99,[%r65+18];
or.b16 %r98,%r99,32767;
st.u16 [%r65+18],%r98;
.loc 1 2102 10
ld.u16 %r101,[%frame];
setp.eq.u16 %r102,%r101,0;
@ %r102 bra $L101;
$L112:
.loc 1 558 10
ld.u16 %r103,[%r54];
setp.ne.u16 %r104,%r103,0;
@ %r104 bra $L101;
.loc 1 556 3
add.u64 %r54,%r54,2;
setp.ne.u64 %r105,%r33,%r54;
@ %r105 bra $L112;
.loc 1 502 13
add.u16 %r106,%r98,-32768;
st.u16 [%r65+18],%r106;
bra $L101;
$L105:
.loc 1 2107 5
shr.u32 %r108,%r27,4;
cvt.u16.u32 %r109,%r108;
cvt.u32.u16 %r38,%r109;
.loc 1 2085 38
ld.u16 %r59,[%r64+4];
.loc 1 2086 10
ld.u16 %r52,[%r64+2];
.loc 1 2086 26
ld.u16 %r58,[%r64];
.loc 1 2110 6
setp.ne.u32 %r110,%r38,0;
@ %r110 bra $L113;
.loc 1 2113 13
and.b16 %r111,%r75,-17;
st.u16 [%frame+4],%r111;
.loc 1 2116 9
mov.u16 %r113,15360;
st.u16 [%frame+2],%r113;
.loc 1 2119 8
cvt.u16.u32 %r114,%r59;
st.u16 [%frame+6],%r114;
.loc 1 2120 8
cvt.u16.u32 %r115,%r52;
st.u16 [%frame+8],%r115;
.loc 1 2121 8
cvt.u16.u32 %r116,%r58;
st.u16 [%frame+10],%r116;
mov.u32 %r118,-5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r118;
call (%value_in),eshift$part$0,(%out_arg1,%out_arg2);
ld.param.u32 %r119,[%value_in];
}
.loc 1 2131 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r121,[%value_in];
}
.loc 1 2131 10
setp.le.s32 %r122,%r121,144;
@ %r122 bra $L114;
add.u64 %r56,%frame,2;
.loc 1 720 11
cvt.u16.u32 %r123,%r38;
$L115:
st.u16 [%r56],%r123;
.loc 1 719 3
add.u64 %r56,%r56,2;
setp.ne.u64 %r124,%r49,%r56;
@ %r124 bra $L115;
bra $L116;
$L114:
.loc 1 2134 8
ld.u16 %r126,[%frame+2];
add.u16 %r125,%r126,1;
cvt.u16.u32 %r128,%r121;
sub.u16 %r127,%r125,%r128;
st.u16 [%frame+2],%r127;
$L116:
.loc 1 2136 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r65;
call emovo$constprop$0,(%out_arg1,%out_arg2);
}
bra $L101;
$L113:
.loc 1 2115 5
add.u16 %r131,%r109,15360;
.loc 1 2116 9
st.u16 [%frame+2],%r131;
.loc 1 2119 8
cvt.u16.u32 %r133,%r59;
st.u16 [%frame+6],%r133;
.loc 1 2120 8
cvt.u16.u32 %r134,%r52;
st.u16 [%frame+8],%r134;
.loc 1 2121 8
cvt.u16.u32 %r135,%r58;
st.u16 [%frame+10],%r135;
mov.u32 %r137,-5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r137;
call (%value_in),eshift$part$0,(%out_arg1,%out_arg2);
ld.param.u32 %r138,[%value_in];
}
bra $L116;
$L101:
.loc 1 2138 1
ret;
}
// BEGIN FUNCTION DEF: emovi
.func emovi (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r33;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r46;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .u16 %r62;
.reg .u16 %r63;
.reg .u16 %r64;
.reg .u16 %r65;
.reg .pred %r68;
.reg .u16 %r69;
.reg .u16 %r70;
.reg .pred %r71;
.reg .u16 %r72;
.reg .pred %r73;
.reg .pred %r74;
.reg .u16 %r75;
.reg .pred %r76;
.reg .u16 %r77;
.reg .pred %r78;
.reg .u16 %r79;
.reg .u16 %r80;
.reg .pred %r81;
.reg .u16 %r82;
.reg .u16 %r83;
mov.u64 %r57,%ar0;
mov.u64 %r58,%ar1;
.loc 1 626 6
ld.u16 %r60,[%r57+18];
shr.u32 %r61,%r60,15;
cvt.u16.u32 %r63,%r61;
neg.s16 %r62,%r63;
st.u16 [%r58],%r62;
.loc 1 632 5
add.u64 %r37,%r58,4;
.loc 1 632 8
ld.u16 %r65,[%r57+18];
and.b16 %r64,%r65,32767;
st.u16 [%r58+2],%r64;
.loc 1 634 6
setp.ne.u16 %r68,%r64,32767;
@ %r68 bra $L128;
.loc 1 553 6
ld.u16 %r70,[%r57+18];
and.b16 %r69,%r70,32767;
setp.ne.u16 %r71,%r69,32767;
@ %r71 bra $L129;
add.u64 %r41,%r57,18;
mov.u64 %r50,%r57;
$L131:
.loc 1 558 10
ld.u16 %r72,[%r50];
setp.ne.u16 %r73,%r72,0;
@ %r73 bra $L130;
.loc 1 556 3
add.u64 %r50,%r50,2;
setp.ne.u64 %r74,%r41,%r50;
@ %r74 bra $L131;
bra $L129;
$L132:
.loc 1 641 11
ld.u16 %r75,[%r30];
st.u16 [%r29],%r75;
.loc 1 640 4
add.u64 %r30,%r30,-2;
add.u64 %r29,%r29,2;
setp.ne.u64 %r76,%r30,%r51;
@ %r76 bra $L132;
bra $L127;
$L129:
mov.u64 %r35,%r37;
add.u64 %r33,%r35,22;
.loc 1 646 7
mov.u16 %r77,0;
$L134:
st.u16 [%r35],%r77;
.loc 1 645 7
add.u64 %r35,%r35,2;
setp.ne.u64 %r78,%r33,%r35;
@ %r78 bra $L134;
bra $L127;
$L128:
.loc 1 651 8
mov.u16 %r79,0;
st.u16 [%r58+4],%r79;
add.u64 %r42,%r57,16;
add.u64 %r26,%r58,6;
$L136:
.loc 1 654 10
ld.u16 %r80,[%r42];
st.u16 [%r26],%r80;
mov.u64 %r46,%r42;
.loc 1 653 3
add.u64 %r42,%r42,-2;
add.u64 %r26,%r26,2;
setp.ne.u64 %r81,%r46,%r57;
@ %r81 bra $L136;
.loc 1 656 6
mov.u16 %r82,0;
st.u16 [%r58+24],%r82;
bra $L127;
$L130:
.loc 1 639 9
mov.u16 %r83,0;
st.u16 [%r58+4],%r83;
add.u64 %r30,%r57,16;
add.u64 %r29,%r58,6;
add.u64 %r51,%r57,-4;
bra $L132;
$L127:
.loc 1 657 1
ret;
}
// BEGIN FUNCTION DEF: ecmp
.func (.param .u32 %value_out) ecmp (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[64];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r41;
.reg .u64 %r43;
.reg .u64 %r46;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u16 %r55;
.reg .u16 %r56;
.reg .pred %r57;
.reg .u16 %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .u16 %r61;
.reg .u16 %r62;
.reg .pred %r63;
.reg .u16 %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u64 %r69;
.reg .u16 %r72;
.reg .u16 %r73;
.reg .pred %r74;
.reg .u16 %r77;
.reg .pred %r78;
.reg .u16 %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .pred %r82;
.reg .pred %r83;
.reg .u16 %r85;
.reg .u16 %r86;
.reg .pred %r87;
.reg .pred %r90;
.reg .pred %r91;
mov.u64 %r53,%ar0;
mov.u64 %r54,%ar1;
.loc 1 553 6
ld.u16 %r56,[%r53+18];
and.b16 %r55,%r56,32767;
setp.ne.u16 %r57,%r55,32767;
@ %r57 bra $L142;
mov.u64 %r49,%r53;
add.u64 %r51,%r53,18;
$L144:
.loc 1 558 10
ld.u16 %r58,[%r49];
setp.ne.u16 %r59,%r58,0;
@ %r59 bra $L154;
.loc 1 556 3
add.u64 %r49,%r49,2;
setp.ne.u64 %r60,%r49,%r51;
@ %r60 bra $L144;
$L142:
.loc 1 553 6
ld.u16 %r62,[%r54+18];
and.b16 %r61,%r62,32767;
setp.ne.u16 %r63,%r61,32767;
@ %r63 bra $L145;
mov.u64 %r46,%r54;
add.u64 %r48,%r54,18;
$L146:
.loc 1 558 10
ld.u16 %r64,[%r46];
setp.ne.u16 %r65,%r64,0;
@ %r65 bra $L155;
.loc 1 556 3
add.u64 %r46,%r46,2;
setp.ne.u64 %r66,%r46,%r48;
@ %r66 bra $L146;
$L145:
.loc 1 2436 3
add.u64 %r69,%frame,26;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r69;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 2438 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 2441 7
ld.u16 %r24,[%frame+26];
.loc 1 2441 6
ld.u16 %r72,[%frame];
cvt.u16.u32 %r73,%r24;
setp.eq.u16 %r74,%r72,%r73;
@ %r74 bra $L147;
add.u64 %r30,%frame,28;
add.u64 %r35,%frame,2;
add.u64 %r22,%frame,50;
$L149:
.loc 1 2446 7
ld.u16 %r77,[%r30];
setp.ne.u16 %r78,%r77,0;
@ %r78 bra $L148;
.loc 1 2448 7
ld.u16 %r79,[%r35];
setp.ne.u16 %r80,%r79,0;
@ %r80 bra $L148;
.loc 1 2444 7
add.u64 %r30,%r30,2;
add.u64 %r35,%r35,2;
setp.ne.u64 %r81,%r22,%r30;
@ %r81 bra $L149;
.loc 1 2451 14
mov.u32 %r52,0;
bra $L141;
$L148:
.loc 1 2453 10
setp.eq.u32 %r82,%r24,0;
.loc 1 2456 9
selp.u32 %r52,1,-1,%r82;
bra $L141;
$L147:
.loc 1 2459 6
setp.eq.u32 %r83,%r24,0;
.loc 1 2462 11
selp.u32 %r52,1,-1,%r83;
add.u64 %r41,%frame,2;
add.u64 %r34,%frame,28;
add.u64 %r43,%frame,24;
bra $L151;
$L153:
.loc 1 2466 11
ld.u16 %r28,[%r34];
.loc 1 2466 19
ld.u16 %r29,[%r41];
.loc 1 2466 10
add.u64 %r41,%r41,2;
add.u64 %r34,%r34,2;
cvt.u16.u32 %r85,%r28;
cvt.u16.u32 %r86,%r29;
setp.eq.u16 %r87,%r85,%r86;
@ %r87 bra $L151;
.loc 1 2479 6
setp.gt.u16 %r90,%r85,%r86;
@ %r90 bra $L141;
bra $L162;
$L151:
.loc 1 2471 3
setp.ne.u64 %r91,%r41,%r43;
@ %r91 bra $L153;
.loc 1 2451 14
mov.u32 %r52,0;
bra $L141;
$L162:
.loc 1 2482 13
neg.s32 %r52,%r52;
bra $L141;
$L154:
.loc 1 2434 12
mov.u32 %r52,-2;
bra $L141;
$L155:
mov.u32 %r52,-2;
$L141:
.loc 1 2483 1
mov.u32 %value,%r52;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: emdnorm
.func emdnorm (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u64 %in_ar5)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %ar4;
ld.param.u32 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.reg .u32 %r26;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u64 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u32 %r66;
.reg .u64 %r79;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u32 %r85;
.reg .u32 %r86;
.reg .u64 %r87;
.reg .u64 %r97;
.reg .u64 %r98;
.reg .u64 %r99;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r111;
.reg .u32 %r112;
.reg .u32 %r113;
.reg .u64 %r114;
.reg .u32 %r115;
.reg .u64 %r116;
.reg .u32 %r118;
.reg .u64 %r119;
.reg .u32 %r121;
.reg .u32 %r122;
.reg .u32 %r124;
.reg .u32 %r125;
.reg .u16 %r126;
.reg .u16 %r127;
.reg .u16 %r128;
.reg .u32 %r129;
.reg .u16 %r130;
.reg .pred %r131;
.reg .u16 %r132;
.reg .pred %r133;
.reg .pred %r135;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .pred %r139;
.reg .pred %r141;
.reg .pred %r142;
.reg .u32 %r143;
.reg .pred %r144;
.reg .u16 %r145;
.reg .pred %r146;
.reg .pred %r147;
.reg .pred %r148;
.reg .pred %r149;
.reg .pred %r150;
.reg .pred %r151;
.reg .pred %r152;
.reg .u32 %r153;
.reg .u32 %r154;
.reg .u16 %r155;
.reg .u32 %r156;
.reg .u32 %r157;
.reg .u32 %r158;
.reg .u16 %r159;
.reg .u32 %r161;
.reg .u32 %r162;
.reg .u16 %r163;
.reg .u32 %r164;
.reg .u32 %r165;
.reg .u32 %r166;
.reg .u16 %r167;
.reg .u32 %r169;
.reg .u32 %r170;
.reg .u16 %r171;
.reg .u32 %r173;
.reg .u32 %r174;
.reg .u16 %r175;
.reg .u64 %r177;
.reg .u64 %r178;
.reg .u64 %r179;
.reg .u64 %r180;
.reg .u16 %r182;
.reg .u32 %r184;
.reg .u32 %r185;
.reg .u32 %r187;
.reg .u32 %r188;
.reg .u16 %r189;
.reg .u16 %r190;
.reg .u16 %r191;
.reg .u32 %r192;
.reg .pred %r193;
.reg .u16 %r194;
.reg .u16 %r195;
.reg .u32 %r196;
.reg .u32 %r198;
.reg .u32 %r199;
.reg .u32 %r200;
.reg .u64 %r201;
.reg .u16 %r202;
.reg .u16 %r203;
.reg .u16 %r204;
.reg .pred %r205;
.reg .pred %r206;
.reg .u64 %r207;
.reg .u32 %r208;
.reg .u32 %r209;
.reg .u64 %r210;
.reg .u64 %r211;
.reg .u64 %r212;
.reg .u64 %r213;
.reg .u16 %r214;
.reg .pred %r215;
.reg .u16 %r216;
.reg .u16 %r217;
.reg .u16 %r218;
.reg .pred %r219;
.reg .u16 %r220;
.reg .u16 %r221;
.reg .u16 %r222;
.reg .u16 %r223;
.reg .u16 %r224;
.reg .u16 %r225;
.reg .u16 %r226;
.reg .pred %r227;
.reg .pred %r228;
.reg .pred %r231;
.reg .pred %r232;
.reg .u64 %r233;
.reg .u64 %r234;
.reg .u64 %r235;
.reg .u16 %r236;
.reg .u16 %r237;
.reg .u16 %r238;
.reg .pred %r239;
.reg .pred %r240;
.reg .u64 %r241;
.reg .u64 %r242;
.reg .u64 %r243;
.reg .u64 %r244;
.reg .u64 %r245;
.reg .u32 %r247;
.reg .pred %r248;
.reg .u16 %r250;
.reg .pred %r251;
.reg .u16 %r253;
.reg .pred %r254;
.reg .u16 %r255;
.reg .pred %r256;
.reg .u16 %r257;
.reg .u16 %r258;
.reg .pred %r259;
.reg .u16 %r261;
.reg .pred %r264;
.reg .pred %r266;
.reg .pred %r267;
mov.u64 %r111,%ar0;
mov.u32 %r112,%ar1;
mov.u32 %r113,%ar2;
mov.u64 %r114,%ar3;
mov.u32 %r115,%ar4;
mov.u64 %r116,%ar5;
.loc 1 1225 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r118,[%value_in];
}
.loc 1 1235 7
cvt.s64.s32 %r119,%r118;
sub.u64 %r53,%r114,%r119;
.loc 1 1240 10
set.u32.gt.s32 %r121,%r118,144;
neg.s32 %r122,%r121;
.loc 1 1240 27
set.u32.le.s64 %r124,%r53,32766;
neg.s32 %r125,%r124;
.loc 1 1240 19
cvt.u16.u32 %r127,%r122;
cvt.u16.u32 %r128,%r125;
and.b16 %r126,%r127,%r128;
.loc 1 1240 6
cvt.u32.u16 %r129,%r126;
cvt.u16.u8 %r130,%r129;
setp.eq.u16 %r131,%r130,0;
@ %r131 bra $L164;
.loc 1 718 3
add.u64 %r107,%r111,2;
add.u64 %r104,%r111,26;
.loc 1 720 11
mov.u16 %r132,0;
$L165:
st.u16 [%r107],%r132;
.loc 1 719 3
add.u64 %r107,%r107,2;
setp.ne.u64 %r133,%r104,%r107;
@ %r133 bra $L165;
bra $L163;
$L164:
.loc 1 1246 6
setp.ge.s64 %r267,%r53,0;
@ %r267 bra $L167;
.loc 1 1248 10
setp.lt.s64 %r135,%r53,-144;
@ %r135 bra $L168;
cvt.u32.u64 %r137,%r53;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r137;
call (%value_in),eshift$part$0,(%out_arg1,%out_arg2);
ld.param.u32 %r138,[%value_in];
}
.loc 1 1252 7
setp.eq.u32 %r139,%r138,0;
.loc 1 1253 11
selp.u32 %r112,%r112,1,%r139;
.loc 1 1262 6
setp.eq.u32 %r264,%r115,0;
@ ! %r264 bra $L202;
bra $L201;
$L168:
.loc 1 718 3
add.u64 %r56,%r111,2;
add.u64 %r108,%r111,26;
$L170:
.loc 1 720 11
st.u16 [%r56],%r130;
.loc 1 719 3
add.u64 %r56,%r56,2;
setp.ne.u64 %r141,%r56,%r108;
@ %r141 bra $L170;
bra $L163;
$L167:
.loc 1 1262 6
setp.eq.u32 %r142,%r115,0;
@ %r142 bra $L172;
$L202:
.loc 1 1265 10
ld.u32 %r26,[%r116+4];
.loc 1 1265 6
ld.u32 %r143,[%r116];
setp.eq.u32 %r144,%r26,%r143;
@ %r144 bra $L173;
add.u64 %r84,%r116,26;
add.u64 %r57,%r116,52;
.loc 1 708 11
mov.u16 %r145,0;
$L174:
st.u16 [%r84],%r145;
.loc 1 707 3
add.u64 %r84,%r84,2;
setp.ne.u64 %r146,%r57,%r84;
@ %r146 bra $L174;
.loc 1 1268 7
setp.eq.u32 %r147,%r26,56;
@ %r147 bra $L175;
setp.gt.s32 %r148,%r26,56;
@ %r148 bra $L176;
setp.eq.u32 %r149,%r26,24;
@ %r149 bra $L177;
setp.eq.u32 %r150,%r26,53;
@ %r150 bra $L178;
bra $L179;
$L176:
setp.eq.u32 %r151,%r26,64;
@ %r151 bra $L180;
setp.eq.u32 %r152,%r26,113;
@ %r152 bra $L181;
$L179:
.loc 1 1272 12
mov.u32 %r153,12;
st.u32 [%r116+8],%r153;
.loc 1 1273 14
mov.u32 %r154,-2147418113;
st.u32 [%r116+20],%r154;
.loc 1 1275 15
mov.u16 %r155,1;
st.u16 [%r116+24],%r155;
.loc 1 1276 12
mov.u32 %r156,11;
st.u32 [%r116+12],%r156;
.loc 1 1277 4
mov.u32 %r85,1;
mov.u32 %r86,%r156;
bra $L182;
$L181:
.loc 1 1279 12
mov.u32 %r157,10;
st.u32 [%r116+8],%r157;
.loc 1 1280 14
mov.u32 %r158,1073774591;
st.u32 [%r116+20],%r158;
.loc 1 1282 15
mov.u16 %r159,-32768;
st.u16 [%r116+24],%r159;
.loc 1 1283 12
st.u32 [%r116+12],%r157;
.loc 1 1284 4
mov.u32 %r85,32768;
mov.u32 %r86,%r157;
bra $L182;
$L180:
.loc 1 1286 12
mov.u32 %r161,7;
st.u32 [%r116+8],%r161;
.loc 1 1287 14
mov.u32 %r162,-2147418113;
st.u32 [%r116+20],%r162;
.loc 1 1289 15
mov.u16 %r163,1;
st.u16 [%r116+24],%r163;
.loc 1 1290 12
mov.u32 %r164,6;
st.u32 [%r116+12],%r164;
.loc 1 1291 4
mov.u32 %r85,1;
mov.u32 %r86,%r164;
bra $L182;
$L175:
.loc 1 1294 12
mov.u32 %r165,6;
st.u32 [%r116+8],%r165;
.loc 1 1295 14
mov.u32 %r166,8388863;
st.u32 [%r116+20],%r166;
.loc 1 1297 15
mov.u16 %r167,256;
st.u16 [%r116+24],%r167;
.loc 1 1298 12
st.u32 [%r116+12],%r165;
.loc 1 1299 4
mov.u32 %r85,256;
mov.u32 %r86,%r165;
bra $L182;
$L178:
.loc 1 1301 12
mov.u32 %r169,6;
st.u32 [%r116+8],%r169;
.loc 1 1302 14
mov.u32 %r170,67110911;
st.u32 [%r116+20],%r170;
.loc 1 1304 15
mov.u16 %r171,2048;
st.u16 [%r116+24],%r171;
.loc 1 1305 12
st.u32 [%r116+12],%r169;
.loc 1 1306 4
mov.u32 %r85,2048;
mov.u32 %r86,%r169;
bra $L182;
$L177:
.loc 1 1308 12
mov.u32 %r173,4;
st.u32 [%r116+8],%r173;
.loc 1 1309 14
mov.u32 %r174,8388863;
st.u32 [%r116+20],%r174;
.loc 1 1311 15
mov.u16 %r175,256;
st.u16 [%r116+24],%r175;
.loc 1 1312 12
st.u32 [%r116+12],%r173;
.loc 1 1313 4
mov.u32 %r85,256;
mov.u32 %r86,%r173;
$L182:
.loc 1 1315 26
cvt.s64.s32 %r177,%r86;
add.u64 %r178,%r177,8;
add.u64 %r179,%r178,%r178;
add.u64 %r180,%r116,%r179;
cvt.u16.u32 %r182,%r85;
st.u16 [%r180+10],%r182;
.loc 1 1316 18
st.u32 [%r116],%r26;
$L173:
.loc 1 1325 6
set.u32.le.s64 %r184,%r53,0;
neg.s32 %r185,%r184;
.loc 1 1325 18
set.u32.ne.u32 %r187,%r26,144;
neg.s32 %r188,%r187;
cvt.u16.u32 %r190,%r185;
cvt.u16.u32 %r191,%r188;
and.b16 %r189,%r190,%r191;
cvt.u32.u16 %r192,%r189;
cvt.u32.u8 %r66,%r192;
setp.eq.u32 %r193,%r66,0;
@ %r193 bra $L183;
.loc 1 1330 25
ld.u16 %r195,[%r111+24];
and.b16 %r194,%r195,1;
cvt.u32.u16 %r196,%r194;
.loc 1 1330 12
or.b32 %r112,%r112,%r196;
.loc 1 1331 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
call eshdn1,(%out_arg1);
}
.loc 1 1337 10
ld.u32 %r26,[%r116+4];
.loc 1 1368 18
set.u32.ne.u32 %r199,%r26,144;
neg.s32 %r200,%r199;
cvt.u32.u32 %r198,%r200;
cvt.u32.u8 %r66,%r198;
$L183:
.loc 1 1336 12
ld.u32 %r30,[%r116+8];
cvt.s64.s32 %r31,%r30;
.loc 1 1336 8
add.u64 %r201,%r31,%r31;
add.u64 %r33,%r111,%r201;
ld.u16 %r34,[%r33];
.loc 1 1336 23
ld.u16 %r35,[%r116+20];
.loc 1 1336 5
cvt.u16.u32 %r203,%r34;
cvt.u16.u32 %r204,%r35;
and.b16 %r202,%r203,%r204;
cvt.u32.u16 %r55,%r202;
.loc 1 1337 6
setp.gt.s32 %r205,%r26,143;
@ %r205 bra $L184;
.loc 1 1340 13
setp.gt.s32 %r206,%r30,11;
@ %r206 bra $L184;
add.u64 %r207,%r201,2;
add.u64 %r97,%r111,%r207;
mov.u32 %r209,11;
sub.u32 %r208,%r209,%r30;
cvt.u64.u32 %r210,%r208;
add.u64 %r211,%r210,%r31;
add.u64 %r212,%r211,%r211;
add.u64 %r213,%r111,4;
add.u64 %r87,%r212,%r213;
.loc 1 1344 9
mov.u16 %r218,0;
$L186:
.loc 1 1342 7
ld.u16 %r214,[%r97];
setp.eq.u16 %r215,%r214,0;
@ %r215 bra $L185;
.loc 1 1343 8
cvt.u16.u32 %r217,%r55;
or.b16 %r216,%r217,1;
cvt.u32.u16 %r55,%r216;
$L185:
.loc 1 1344 9
st.u16 [%r97],%r218;
.loc 1 1340 13
add.u64 %r97,%r97,2;
setp.ne.u64 %r219,%r87,%r97;
@ %r219 bra $L186;
.loc 1 1348 14
ld.u16 %r34,[%r33];
.loc 1 1348 21
ld.u16 %r35,[%r116+20];
$L184:
.loc 1 1348 14
cvt.u16.u32 %r221,%r35;
not.b16 %r220,%r221;
cvt.u16.u32 %r223,%r34;
and.b16 %r222,%r220,%r223;
st.u16 [%r33],%r222;
.loc 1 1349 24
ld.u16 %r225,[%r116+22];
cvt.u16.u32 %r226,%r55;
and.b16 %r224,%r225,%r226;
.loc 1 1349 6
setp.ne.u16 %r227,%r224,0;
@ %r227 bra $L187;
$L192:
.loc 1 1368 18
setp.ne.u32 %r228,%r66,0;
@ ! %r228 bra $L222;
bra $L188;
$L187:
.loc 1 1351 10
setp.ne.u16 %r231,%r225,%r226;
@ %r231 bra $L190;
.loc 1 1353 7
setp.ne.u32 %r232,%r112,0;
@ %r232 bra $L191;
.loc 1 1355 18
ld.s32 %r233,[%r116+12];
.loc 1 1355 14
add.u64 %r234,%r233,%r233;
add.u64 %r235,%r111,%r234;
.loc 1 1355 38
ld.u16 %r237,[%r235];
ld.u16 %r238,[%r116+24];
and.b16 %r236,%r237,%r238;
.loc 1 1355 11
setp.eq.u16 %r239,%r236,0;
@ ! %r239 bra $L190;
bra $L192;
$L191:
.loc 1 1360 11
setp.ne.u32 %r240,%r113,0;
@ %r240 bra $L192;
$L190:
.loc 1 958 5
add.u64 %r82,%r116,50;
.loc 1 959 5
add.u64 %r83,%r111,24;
add.u64 %r98,%r116,28;
.loc 1 960 9
mov.u32 %r54,0;
$L193:
.loc 1 963 11
ld.u16 %r241,[%r82];
.loc 1 963 34
ld.u16 %r242,[%r83];
.loc 1 963 32
add.u64 %r243,%r241,%r242;
.loc 1 963 55
cvt.u64.u32 %r244,%r54;
.loc 1 963 9
add.u64 %r79,%r243,%r244;
.loc 1 964 10
shr.u64 %r245,%r79,16;
cvt.u32.u64 %r247,%r245;
and.b32 %r54,%r247,1;
.loc 1 968 12
st.u16 [%r83],%r79;
.loc 1 969 7
add.u64 %r82,%r82,-2;
.loc 1 970 7
add.u64 %r83,%r83,-2;
.loc 1 961 3
setp.ne.u64 %r248,%r82,%r98;
@ %r248 bra $L193;
bra $L192;
$L188:
.loc 1 1373 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
call eshup1,(%out_arg1);
}
.loc 1 1375 6
ld.u16 %r250,[%r111+4];
setp.eq.u16 %r251,%r250,0;
@ %r251 bra $L194;
$L196:
.loc 1 1377 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
call eshdn1,(%out_arg1);
}
.loc 1 1378 11
add.u64 %r53,%r53,1;
bra $L195;
$L222:
.loc 1 1375 6
ld.u16 %r253,[%r111+4];
setp.ne.u16 %r254,%r253,0;
@ %r254 bra $L196;
$L195:
.loc 1 1381 13
mov.u16 %r255,0;
st.u16 [%r111+24],%r255;
.loc 1 1382 6
setp.le.s64 %r256,%r53,32766;
@ ! %r256 bra $L203;
setp.ge.s64 %r267,%r53,0;
bra $L197;
$L203:
.loc 1 1388 12
mov.u16 %r257,32767;
st.u16 [%r111+2],%r257;
add.u64 %r103,%r111,4;
add.u64 %r99,%r111,24;
.loc 1 1390 7
mov.u16 %r258,0;
$L198:
st.u16 [%r103],%r258;
.loc 1 1389 7
add.u64 %r103,%r103,2;
setp.ne.u64 %r259,%r99,%r103;
@ %r259 bra $L198;
bra $L163;
$L197:
.loc 1 1409 6
@ %r267 bra $L199;
$L200:
.loc 1 1410 10
mov.u16 %r261,0;
st.u16 [%r111+2],%r261;
bra $L163;
$L199:
.loc 1 1412 12
st.u16 [%r111+2],%r53;
bra $L163;
$L194:
.loc 1 1381 13
st.u16 [%r111+24],%r250;
bra $L197;
$L201:
st.u16 [%r111+24],%r130;
bra $L200;
$L172:
st.u16 [%r111+24],%r130;
.loc 1 1382 6
setp.gt.s64 %r266,%r53,32766;
@ ! %r266 bra $L199;
bra $L203;
$L163:
.loc 1 1413 1
ret;
}
// BEGIN FUNCTION DEF: eiremain
.func eiremain (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u64 %r40;
.reg .u32 %r43;
.reg .u64 %r44;
.reg .u64 %r51;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r61;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r69;
.reg .u64 %r70;
.reg .u32 %r72;
.reg .u64 %r73;
.reg .u16 %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .u16 %r77;
.reg .u16 %r78;
.reg .pred %r79;
.reg .pred %r82;
.reg .pred %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .u64 %r86;
.reg .u64 %r87;
.reg .u64 %r88;
.reg .u32 %r90;
.reg .pred %r91;
.reg .u16 %r93;
.reg .u16 %r94;
.reg .u16 %r95;
.reg .pred %r97;
.reg .u32 %r102;
.reg .u64 %r104;
.reg .u64 %r105;
mov.u64 %r65,%ar0;
mov.u64 %r66,%ar1;
mov.u64 %r67,%ar2;
.loc 1 3736 19
add.u64 %r31,%r67,52;
.loc 1 3738 6
ld.u16 %r32,[%r65+2];
.loc 1 3739 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r65;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r69,[%value_in];
}
cvt.s64.s32 %r70,%r69;
.loc 1 3739 6
sub.u64 %r34,%r32,%r70;
.loc 1 3740 6
ld.u16 %r35,[%r66+2];
.loc 1 3741 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r72,[%value_in];
}
cvt.s64.s32 %r73,%r72;
.loc 1 3741 6
sub.u64 %r37,%r35,%r73;
mov.u64 %r56,%r31;
add.u64 %r57,%r67,78;
.loc 1 708 11
mov.u16 %r74,0;
$L224:
st.u16 [%r56],%r74;
.loc 1 707 3
add.u64 %r56,%r56,2;
setp.ne.u64 %r75,%r56,%r57;
@ %r75 bra $L224;
.loc 1 3743 9
setp.gt.s64 %r76,%r34,%r37;
@ %r76 bra $L225;
.loc 1 792 5
add.u64 %r61,%r65,4;
.loc 1 793 5
add.u64 %r64,%r66,4;
add.u64 %r104,%r65,26;
add.u64 %r105,%r66,2;
$L231:
mov.u64 %r44,%r61;
mov.u64 %r40,%r64;
$L229:
.loc 1 796 10
ld.u16 %r77,[%r44];
ld.u16 %r78,[%r40];
setp.eq.u16 %r79,%r77,%r78;
@ %r79 bra $L226;
.loc 1 802 6
setp.gt.u16 %r82,%r77,%r78;
@ %r82 bra $L232;
bra $L228;
$L226:
.loc 1 794 3
add.u64 %r44,%r44,2;
add.u64 %r40,%r40,2;
setp.ne.u64 %r83,%r104,%r44;
@ %r83 bra $L229;
$L228:
.loc 1 986 5
add.u64 %r54,%r65,24;
.loc 1 987 5
add.u64 %r55,%r66,24;
.loc 1 988 9
mov.u32 %r43,0;
$L230:
.loc 1 991 11
ld.u16 %r84,[%r55];
.loc 1 991 55
cvt.u64.u32 %r85,%r43;
.loc 1 991 9
sub.u64 %r86,%r84,%r85;
.loc 1 991 34
ld.u16 %r87,[%r54];
.loc 1 991 9
sub.u64 %r51,%r86,%r87;
.loc 1 992 10
shr.u64 %r88,%r51,16;
cvt.u32.u64 %r90,%r88;
and.b32 %r43,%r90,1;
.loc 1 996 12
st.u16 [%r55],%r51;
.loc 1 997 7
add.u64 %r54,%r54,-2;
.loc 1 998 7
add.u64 %r55,%r55,-2;
.loc 1 989 3
setp.ne.u64 %r91,%r105,%r55;
@ %r91 bra $L230;
.loc 1 3748 6
mov.u32 %r29,1;
bra $L227;
$L232:
.loc 1 3752 6
mov.u32 %r29,0;
$L227:
.loc 1 3754 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
call eshup1,(%out_arg1);
}
.loc 1 3755 21
ld.u16 %r94,[%r67+76];
cvt.u16.u32 %r95,%r29;
or.b16 %r93,%r94,%r95;
st.u16 [%r67+76],%r93;
.loc 1 3756 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
call eshup1,(%out_arg1);
}
.loc 1 3757 10
add.u64 %r37,%r37,-1;
.loc 1 3743 9
setp.le.s64 %r97,%r34,%r37;
@ %r97 bra $L231;
$L225:
.loc 1 3759 3
mov.u32 %r102,0;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r102;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r102;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r37;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r102;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r67;
call emdnorm,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
}
.loc 1 3760 1
ret;
}
// BEGIN FUNCTION DEF: emul
.func emul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[80];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u32 %r43;
.reg .u32 %r45;
.reg .u32 %r54;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .u64 %r73;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .u32 %r83;
.reg .u64 %r85;
.reg .u64 %r86;
.reg .u64 %r88;
.reg .u64 %r90;
.reg .u64 %r92;
.reg .u64 %r95;
.reg .u32 %r97;
.reg .u64 %r99;
.reg .u32 %r100;
.reg .u32 %r102;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u32 %r113;
.reg .u64 %r114;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u64 %r128;
.reg .u64 %r131;
.reg .u64 %r132;
.reg .u64 %r134;
.reg .u64 %r136;
.reg .u64 %r138;
.reg .u64 %r139;
.reg .u64 %r141;
.reg .u64 %r147;
.reg .u64 %r148;
.reg .u64 %r149;
.reg .u32 %r153;
.reg .u64 %r160;
.reg .u64 %r161;
.reg .u64 %r162;
.reg .u64 %r163;
.reg .u16 %r165;
.reg .u16 %r166;
.reg .pred %r168;
.reg .u16 %r169;
.reg .pred %r170;
.reg .pred %r171;
.reg .u16 %r172;
.reg .pred %r173;
.reg .u16 %r174;
.reg .u16 %r175;
.reg .pred %r177;
.reg .u16 %r178;
.reg .pred %r179;
.reg .pred %r180;
.reg .u16 %r181;
.reg .pred %r182;
.reg .u16 %r183;
.reg .pred %r184;
.reg .pred %r185;
.reg .u16 %r186;
.reg .pred %r187;
.reg .pred %r188;
.reg .u16 %r189;
.reg .pred %r190;
.reg .u16 %r191;
.reg .u16 %r192;
.reg .u16 %r193;
.reg .pred %r194;
.reg .pred %r195;
.reg .u16 %r196;
.reg .pred %r197;
.reg .u16 %r198;
.reg .pred %r199;
.reg .pred %r200;
.reg .u16 %r201;
.reg .pred %r202;
.reg .pred %r203;
.reg .u32 %r205;
.reg .u16 %r206;
.reg .u32 %r208;
.reg .u16 %r209;
.reg .u16 %r210;
.reg .pred %r211;
.reg .u16 %r212;
.reg .pred %r213;
.reg .pred %r214;
.reg .u32 %r216;
.reg .u16 %r217;
.reg .pred %r218;
.reg .u16 %r219;
.reg .u16 %r220;
.reg .pred %r221;
.reg .u16 %r222;
.reg .u16 %r223;
.reg .pred %r230;
.reg .u16 %r231;
.reg .pred %r232;
.reg .u32 %r235;
.reg .u64 %r236;
.reg .pred %r239;
.reg .u16 %r240;
.reg .pred %r241;
.reg .u16 %r242;
.reg .u16 %r243;
.reg .pred %r244;
.reg .u16 %r245;
.reg .pred %r246;
.reg .u32 %r249;
.reg .u64 %r250;
.reg .pred %r253;
.reg .u16 %r254;
.reg .pred %r255;
.reg .u16 %r256;
.reg .u16 %r257;
.reg .u16 %r258;
.reg .pred %r259;
.reg .pred %r260;
.reg .u16 %r261;
.reg .u16 %r262;
.reg .u16 %r263;
.reg .u64 %r268;
.reg .u64 %r269;
.reg .u64 %r270;
.reg .u64 %r271;
.reg .u64 %r272;
.reg .u32 %r274;
.reg .pred %r276;
.reg .u16 %r277;
.reg .pred %r278;
.reg .u16 %r279;
.reg .pred %r282;
.reg .u16 %r283;
.reg .pred %r284;
.reg .u32 %r287;
.reg .u32 %r289;
.reg .u64 %r291;
.reg .u64 %r292;
.reg .u16 %r294;
.reg .u16 %r295;
.reg .u16 %r296;
.reg .u32 %r297;
.reg .u32 %r298;
.reg .u16 %r299;
.reg .u16 %r303;
.reg .pred %r304;
.reg .u64 %r306;
.reg .u32 %r307;
.reg .pred %r308;
.reg .u16 %r309;
.reg .u16 %r310;
.reg .u16 %r311;
.reg .u16 %r312;
.reg .pred %r314;
.reg .u64 %r316;
.reg .u32 %r317;
.reg .pred %r318;
.reg .u16 %r319;
.reg .u16 %r320;
.reg .pred %r322;
.reg .u16 %r323;
.reg .u16 %r324;
.reg .pred %r325;
.reg .u16 %r326;
.reg .u16 %r327;
.reg .pred %r329;
.reg .pred %r331;
.reg .pred %r333;
.reg .pred %r335;
.reg .u64 %r337;
.reg .u64 %r338;
.reg .u64 %r339;
.reg .u64 %r340;
.reg .u64 %r341;
.reg .u64 %r342;
.reg .u64 %r343;
mov.u64 %r160,%ar0;
mov.u64 %r161,%ar1;
mov.u64 %r162,%ar2;
mov.u64 %r163,%ar3;
ld.u16 %r166,[%r160+18];
and.b16 %r165,%r166,32767;
.loc 1 553 6
setp.ne.u16 %r168,%r165,32767;
@ %r168 bra $L238;
mov.u64 %r67,%r160;
add.u64 %r337,%r160,18;
mov.u64 %r28,%r160;
$L240:
.loc 1 558 10
ld.u16 %r169,[%r28];
setp.ne.u16 %r170,%r169,0;
@ %r170 bra $L239;
.loc 1 556 3
add.u64 %r28,%r28,2;
setp.ne.u64 %r171,%r28,%r337;
@ %r171 bra $L240;
bra $L238;
$L239:
mov.u64 %r73,%r162;
add.u64 %r108,%r160,20;
$L241:
.loc 1 483 10
ld.u16 %r172,[%r67];
st.u16 [%r73],%r172;
.loc 1 482 3
add.u64 %r67,%r67,2;
add.u64 %r73,%r73,2;
setp.ne.u64 %r173,%r67,%r108;
@ %r173 bra $L241;
bra $L237;
$L238:
.loc 1 553 9
ld.u16 %r54,[%r161+18];
cvt.u16.u32 %r175,%r54;
and.b16 %r174,%r175,32767;
cvt.u32.u16 %r118,%r174;
.loc 1 553 6
setp.ne.u16 %r177,%r174,32767;
@ %r177 bra $L243;
mov.u64 %r105,%r161;
add.u64 %r338,%r161,18;
mov.u64 %r86,%r161;
$L245:
.loc 1 558 10
ld.u16 %r178,[%r86];
setp.ne.u16 %r179,%r178,0;
@ %r179 bra $L244;
.loc 1 556 3
add.u64 %r86,%r86,2;
setp.ne.u64 %r180,%r338,%r86;
@ %r180 bra $L245;
bra $L347;
$L244:
mov.u64 %r69,%r162;
add.u64 %r104,%r69,20;
$L247:
.loc 1 483 10
ld.u16 %r181,[%r105];
st.u16 [%r69],%r181;
.loc 1 482 3
add.u64 %r69,%r69,2;
add.u64 %r105,%r105,2;
setp.ne.u64 %r182,%r69,%r104;
@ %r182 bra $L247;
bra $L237;
$L296:
mov.u64 %r68,%r160;
add.u64 %r337,%r160,18;
$L249:
.loc 1 558 10
ld.u16 %r183,[%r68];
setp.ne.u16 %r184,%r183,0;
@ %r184 bra $L248;
.loc 1 556 3
add.u64 %r68,%r68,2;
setp.ne.u64 %r185,%r68,%r337;
@ %r185 bra $L249;
bra $L348;
$L293:
mov.u64 %r141,%r161;
$L252:
.loc 1 558 10
ld.u16 %r186,[%r141];
setp.ne.u16 %r187,%r186,0;
@ %r187 bra $L251;
.loc 1 556 3
add.u64 %r141,%r141,2;
setp.ne.u64 %r188,%r141,%r338;
@ %r188 bra $L252;
bra $L349;
$L291:
mov.u64 %r63,%r162;
add.u64 %r88,%r162,16;
.loc 1 3843 9
mov.u16 %r189,0;
$L254:
st.u16 [%r63],%r189;
.loc 1 3842 7
add.u64 %r63,%r63,2;
setp.ne.u64 %r190,%r88,%r63;
@ %r190 bra $L254;
.loc 1 3844 14
mov.u16 %r191,-16384;
st.u16 [%r162+16],%r191;
.loc 1 3850 14
mov.u16 %r192,32767;
st.u16 [%r162+18],%r192;
.loc 1 1699 7
bra $L237;
$L292:
mov.u64 %r58,%r160;
$L257:
.loc 1 558 10
ld.u16 %r193,[%r58];
setp.ne.u16 %r194,%r193,0;
@ %r194 bra $L297;
.loc 1 556 3
add.u64 %r58,%r58,2;
setp.ne.u64 %r195,%r58,%r337;
@ %r195 bra $L257;
bra $L258;
$L297:
mov.u32 %r45,32767;
$L256:
.loc 1 532 6
cvt.u16.u32 %r196,%r118;
setp.ne.u16 %r197,%r196,32767;
@ %r197 bra $L259;
add.u64 %r338,%r161,18;
$L294:
mov.u64 %r85,%r161;
$L260:
.loc 1 558 10
ld.u16 %r198,[%r85];
setp.ne.u16 %r199,%r198,0;
@ %r199 bra $L259;
.loc 1 556 3
add.u64 %r85,%r85,2;
setp.ne.u64 %r200,%r338,%r85;
@ %r200 bra $L260;
bra $L350;
$L258:
mov.u64 %r95,%r160;
$L263:
.loc 1 558 10
ld.u16 %r201,[%r95];
setp.ne.u16 %r202,%r201,0;
@ %r202 bra $L298;
.loc 1 556 3
add.u64 %r95,%r95,2;
setp.ne.u64 %r203,%r95,%r337;
@ %r203 bra $L263;
bra $L351;
$L290:
.loc 1 518 6
cvt.u16.u32 %r206,%r43;
cvt.s32.s16 %r205,%r206;
shr.u32 %r97,%r205,31;
bra $L265;
$L351:
cvt.u16.u32 %r209,%r43;
cvt.s32.s16 %r208,%r209;
shr.u32 %r97,%r208,31;
bra $L262;
$L298:
.loc 1 516 12
mov.u32 %r97,0;
$L262:
.loc 1 553 6
cvt.u16.u32 %r210,%r118;
setp.ne.u16 %r211,%r210,32767;
@ %r211 bra $L266;
add.u64 %r338,%r161,18;
$L265:
mov.u64 %r57,%r161;
$L268:
.loc 1 558 10
ld.u16 %r212,[%r57];
setp.ne.u16 %r213,%r212,0;
@ %r213 bra $L299;
.loc 1 556 3
add.u64 %r57,%r57,2;
setp.ne.u64 %r214,%r57,%r338;
@ %r214 bra $L268;
$L266:
.loc 1 518 6
cvt.u16.u32 %r217,%r54;
cvt.s32.s16 %r216,%r217;
shr.u32 %r102,%r216,31;
bra $L267;
$L299:
.loc 1 516 12
mov.u32 %r102,0;
$L267:
.loc 1 1706 10
setp.ne.u32 %r218,%r102,%r97;
.loc 1 1709 18
selp.u32 %r100,32768,0,%r218;
cvt.u16.u32 %r219,%r100;
st.u16 [%r162+18],%r219;
mov.u64 %r106,%r162;
add.u64 %r78,%r162,18;
.loc 1 581 10
mov.u16 %r220,0;
$L270:
st.u16 [%r106],%r220;
.loc 1 580 3
add.u64 %r106,%r106,2;
setp.ne.u64 %r221,%r78,%r106;
@ %r221 bra $L270;
.loc 1 582 6
ld.u16 %r223,[%r162+18];
or.b16 %r222,%r223,32767;
st.u16 [%r162+18],%r222;
.loc 1 1711 7
bra $L237;
$L259:
.loc 1 1714 3
add.u64 %r340,%frame,52;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r160;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r340;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 1715 3
add.u64 %r339,%frame,26;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r161;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r339;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 1716 11
ld.u16 %r29,[%frame+54];
.loc 1 1717 11
ld.u16 %r30,[%frame+28];
.loc 1 1718 6
setp.eq.u32 %r230,%r29,0;
@ %r230 bra $L271;
.loc 1 1731 1
bra $L352;
$L275:
.loc 1 1722 7
add.u64 %r77,%r77,2;
ld.u16 %r231,[%r77+-2];
setp.eq.u16 %r232,%r231,0;
@ %r232 bra $L273;
.loc 1 1724 15
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r340;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r235,[%value_in];
}
cvt.s64.s32 %r236,%r235;
.loc 1 1724 12
neg.s64 %r40,%r236;
.loc 1 1733 9
ld.u16 %r83,[%frame+28];
.loc 1 1725 8
bra $L274;
$L271:
add.u64 %r77,%frame,56;
add.u64 %r62,%frame,76;
$L273:
.loc 1 1720 7
setp.ne.u64 %r239,%r62,%r77;
@ %r239 bra $L275;
mov.u64 %r114,%r162;
add.u64 %r149,%r114,20;
.loc 1 467 10
mov.u16 %r240,0;
$L276:
st.u16 [%r114],%r240;
.loc 1 466 3
add.u64 %r114,%r114,2;
setp.ne.u64 %r241,%r114,%r149;
@ %r241 bra $L276;
bra $L237;
$L352:
.loc 1 1716 7
cvt.u16.u32 %r242,%r29;
cvt.u64.u16 %r40,%r242;
mov.u32 %r83,%r30;
$L274:
.loc 1 1717 7
cvt.u16.u32 %r243,%r30;
cvt.u64.u16 %r41,%r243;
.loc 1 1733 6
setp.eq.u32 %r244,%r83,0;
@ %r244 bra $L277;
.loc 1 1746 1
bra $L278;
$L280:
.loc 1 1737 7
add.u64 %r109,%r109,2;
ld.u16 %r245,[%r109+-2];
setp.eq.u16 %r246,%r245,0;
@ %r246 bra $L279;
.loc 1 1739 15
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r339;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r249,[%value_in];
}
cvt.s64.s32 %r250,%r249;
.loc 1 1739 12
sub.u64 %r41,%r41,%r250;
.loc 1 1153 12
ld.u16 %r83,[%frame+28];
.loc 1 1740 8
bra $L278;
$L277:
add.u64 %r109,%frame,30;
add.u64 %r148,%frame,50;
$L279:
.loc 1 1735 7
setp.ne.u64 %r253,%r109,%r148;
@ %r253 bra $L280;
mov.u64 %r27,%r162;
add.u64 %r92,%r27,20;
.loc 1 467 10
mov.u16 %r254,0;
$L281:
st.u16 [%r27],%r254;
.loc 1 466 3
add.u64 %r27,%r27,2;
setp.ne.u64 %r255,%r27,%r92;
@ %r255 bra $L281;
bra $L237;
$L278:
.loc 1 1152 12
ld.u16 %r256,[%frame+26];
st.u16 [%r163+52],%r256;
.loc 1 1153 12
cvt.u16.u32 %r257,%r83;
st.u16 [%r163+54],%r257;
add.u64 %r90,%r163,56;
mov.u64 %r99,%r90;
add.u64 %r342,%r163,78;
.loc 1 1155 14
mov.u16 %r258,0;
$L282:
st.u16 [%r99],%r258;
.loc 1 1154 3
add.u64 %r99,%r99,2;
setp.ne.u64 %r259,%r342,%r99;
@ %r259 bra $L282;
.loc 1 959 5
add.u64 %r138,%r163,76;
.loc 1 1157 5
mov.u32 %r117,0;
.loc 1 1158 5
add.u64 %r147,%frame,76;
add.u64 %r341,%frame,56;
add.u64 %r343,%frame,2;
$L287:
.loc 1 1162 11
ld.u16 %r113,[%r147];
.loc 1 1164 4
add.u64 %r147,%r147,-2;
.loc 1 1162 10
setp.ne.u32 %r260,%r113,0;
@ %r260 bra $L283;
$L286:
.loc 1 1171 9
ld.u16 %r262,[%r163+76];
cvt.u16.u32 %r263,%r117;
or.b16 %r261,%r262,%r263;
cvt.u32.u16 %r117,%r261;
.loc 1 938 5
mov.u64 %r136,%r342;
.loc 1 937 5
mov.u64 %r134,%r138;
bra $L284;
$L283:
.loc 1 1168 4
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r113;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r339;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call m16m,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 959 5
mov.u64 %r132,%r138;
.loc 1 960 9
mov.u32 %r153,0;
.loc 1 958 5
add.u64 %r131,%frame,24;
$L285:
.loc 1 963 11
ld.u16 %r268,[%r131];
.loc 1 963 34
ld.u16 %r269,[%r132];
.loc 1 963 32
add.u64 %r270,%r268,%r269;
.loc 1 963 55
cvt.u64.u32 %r271,%r153;
.loc 1 963 9
add.u64 %r128,%r270,%r271;
.loc 1 964 10
shr.u64 %r272,%r128,16;
cvt.u32.u64 %r274,%r272;
and.b32 %r153,%r274,1;
.loc 1 968 12
st.u16 [%r132],%r128;
.loc 1 969 7
add.u64 %r131,%r131,-2;
.loc 1 970 7
add.u64 %r132,%r132,-2;
.loc 1 961 3
setp.ne.u64 %r276,%r131,%r343;
@ %r276 bra $L285;
bra $L286;
$L284:
.loc 1 941 12
add.u64 %r134,%r134,-2;
add.u64 %r136,%r136,-2;
ld.u16 %r277,[%r134];
st.u16 [%r136],%r277;
.loc 1 940 3
setp.ne.u64 %r278,%r90,%r134;
@ %r278 bra $L284;
.loc 1 943 10
mov.u16 %r279,0;
st.u16 [%r163+56],%r279;
.loc 1 1160 3
setp.ne.u64 %r282,%r147,%r341;
@ %r282 bra $L287;
add.u64 %r26,%r163,52;
mov.u64 %r139,%r339;
$L288:
.loc 1 1176 10
ld.u16 %r283,[%r26];
st.u16 [%r139],%r283;
.loc 1 1175 3
add.u64 %r26,%r26,2;
add.u64 %r139,%r139,2;
setp.ne.u64 %r284,%r340,%r139;
@ %r284 bra $L288;
.loc 1 1751 12
add.u64 %r291,%r40,%r41;
.loc 1 1751 6
add.u64 %r292,%r291,-16382;
.loc 1 1752 3
mov.u32 %r289,64;
mov.u32 %r287,0;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r339;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r117;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r287;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r292;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r289;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r163;
call emdnorm,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
}
.loc 1 1754 6
ld.u16 %r295,[%frame+52];
ld.u16 %r296,[%frame+26];
set.u32.ne.u16 %r297,%r295,%r296;
neg.s32 %r298,%r297;
cvt.u16.u32 %r294,%r298;
neg.s16 %r299,%r294;
st.u16 [%frame+26],%r299;
.loc 1 1758 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r339;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r162;
call emovo$constprop$0,(%out_arg1,%out_arg2);
}
bra $L237;
$L350:
.loc 1 553 6
cvt.u16.u32 %r303,%r45;
setp.ne.u16 %r304,%r303,32767;
@ %r304 bra $L290;
mov.u32 %r118,%r45;
add.u64 %r337,%r160,18;
bra $L258;
$L349:
.loc 1 1695 26
cvta.const.u64 %r306,ezero;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r160;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r306;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r307,[%value_in];
}
.loc 1 1695 22
setp.eq.u32 %r308,%r307,0;
@ %r308 bra $L291;
.loc 1 553 9
ld.u16 %r54,[%r161+18];
cvt.u16.u32 %r310,%r54;
and.b16 %r309,%r310,32767;
cvt.u32.u16 %r118,%r309;
.loc 1 532 9
ld.u16 %r43,[%r160+18];
cvt.u16.u32 %r312,%r43;
and.b16 %r311,%r312,32767;
cvt.u32.u16 %r45,%r311;
.loc 1 532 6
setp.eq.u16 %r314,%r311,32767;
@ ! %r314 bra $L256;
add.u64 %r337,%r160,18;
bra $L292;
$L348:
.loc 1 1694 23
cvta.const.u64 %r316,ezero;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r161;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r316;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r317,[%value_in];
}
.loc 1 1694 19
setp.eq.u32 %r318,%r317,0;
@ %r318 bra $L291;
.loc 1 532 9
ld.u16 %r54,[%r161+18];
cvt.u16.u32 %r320,%r54;
and.b16 %r319,%r320,32767;
cvt.u32.u16 %r118,%r319;
.loc 1 532 6
setp.eq.u16 %r322,%r319,32767;
@ ! %r322 bra $L353;
add.u64 %r338,%r161,18;
bra $L293;
$L353:
.loc 1 532 9
ld.u16 %r43,[%r160+18];
.loc 1 532 6
cvt.u16.u32 %r324,%r43;
and.b16 %r323,%r324,32767;
setp.eq.u16 %r325,%r323,32767;
@ %r325 bra $L292;
bra $L259;
$L251:
.loc 1 532 9
ld.u16 %r43,[%r160+18];
cvt.u16.u32 %r327,%r43;
and.b16 %r326,%r327,32767;
cvt.u32.u16 %r118,%r326;
.loc 1 532 6
setp.eq.u16 %r329,%r326,32767;
@ ! %r329 bra $L354;
add.u64 %r337,%r160,18;
bra $L292;
$L354:
mov.u32 %r45,%r118;
bra $L294;
$L355:
.loc 1 532 9
ld.u16 %r43,[%r160+18];
bra $L292;
$L248:
.loc 1 532 6
setp.eq.u16 %r331,%r174,32767;
@ ! %r331 bra $L355;
add.u64 %r338,%r161,18;
bra $L293;
$L243:
setp.eq.u16 %r333,%r165,32767;
@ %r333 bra $L296;
bra $L259;
$L347:
setp.eq.u16 %r335,%r165,32767;
@ ! %r335 bra $L293;
bra $L296;
$L237:
.loc 1 1759 1
ret;
}
// BEGIN FUNCTION DEF: ediv
.func ediv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[80];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r34;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r51;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u32 %r57;
.reg .u64 %r61;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u64 %r74;
.reg .u64 %r76;
.reg .u64 %r78;
.reg .u64 %r82;
.reg .u32 %r85;
.reg .u64 %r87;
.reg .u64 %r88;
.reg .u64 %r90;
.reg .u64 %r93;
.reg .u64 %r96;
.reg .u64 %r102;
.reg .u32 %r103;
.reg .u64 %r104;
.reg .u64 %r106;
.reg .u32 %r108;
.reg .u64 %r111;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r116;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .u64 %r128;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r133;
.reg .u32 %r135;
.reg .u64 %r138;
.reg .u32 %r141;
.reg .u64 %r144;
.reg .u64 %r150;
.reg .u64 %r153;
.reg .u64 %r154;
.reg .u64 %r163;
.reg .u64 %r166;
.reg .u64 %r167;
.reg .u64 %r168;
.reg .u32 %r172;
.reg .u64 %r175;
.reg .u64 %r177;
.reg .u64 %r180;
.reg .u64 %r181;
.reg .u64 %r182;
.reg .u64 %r184;
.reg .u64 %r188;
.reg .u64 %r189;
.reg .u32 %r194;
.reg .u64 %r195;
.reg .u64 %r198;
.reg .u64 %r199;
.reg .u64 %r202;
.reg .u32 %r209;
.reg .u32 %r211;
.reg .u32 %r213;
.reg .u64 %r216;
.reg .u64 %r217;
.reg .u64 %r218;
.reg .u64 %r219;
.reg .u16 %r224;
.reg .u16 %r225;
.reg .pred %r226;
.reg .u16 %r227;
.reg .pred %r228;
.reg .pred %r229;
.reg .u16 %r230;
.reg .pred %r231;
.reg .u16 %r232;
.reg .u16 %r233;
.reg .pred %r234;
.reg .u16 %r235;
.reg .pred %r236;
.reg .pred %r237;
.reg .u16 %r238;
.reg .pred %r239;
.reg .u64 %r241;
.reg .u32 %r242;
.reg .pred %r243;
.reg .u16 %r244;
.reg .u16 %r245;
.reg .u16 %r246;
.reg .u16 %r247;
.reg .pred %r249;
.reg .u32 %r252;
.reg .pred %r253;
.reg .u16 %r254;
.reg .pred %r255;
.reg .pred %r256;
.reg .u16 %r257;
.reg .pred %r258;
.reg .pred %r259;
.reg .u16 %r260;
.reg .pred %r261;
.reg .u16 %r262;
.reg .u16 %r263;
.reg .pred %r265;
.reg .pred %r266;
.reg .pred %r267;
.reg .u16 %r268;
.reg .pred %r269;
.reg .pred %r270;
.reg .u32 %r272;
.reg .u16 %r273;
.reg .u16 %r274;
.reg .pred %r275;
.reg .pred %r276;
.reg .pred %r277;
.reg .u16 %r278;
.reg .u16 %r279;
.reg .pred %r280;
.reg .u16 %r281;
.reg .u16 %r282;
.reg .pred %r283;
.reg .u16 %r284;
.reg .pred %r285;
.reg .pred %r292;
.reg .u16 %r293;
.reg .pred %r294;
.reg .u32 %r297;
.reg .u64 %r298;
.reg .pred %r301;
.reg .u16 %r302;
.reg .pred %r303;
.reg .u16 %r304;
.reg .u16 %r305;
.reg .pred %r306;
.reg .u16 %r307;
.reg .pred %r308;
.reg .u32 %r311;
.reg .u64 %r312;
.reg .pred %r315;
.reg .u16 %r316;
.reg .u16 %r317;
.reg .pred %r318;
.reg .u16 %r319;
.reg .u16 %r320;
.reg .pred %r321;
.reg .u16 %r322;
.reg .u16 %r323;
.reg .u16 %r324;
.reg .u16 %r325;
.reg .u16 %r326;
.reg .pred %r327;
.reg .u64 %r331;
.reg .u64 %r333;
.reg .u64 %r334;
.reg .u64 %r335;
.reg .pred %r336;
.reg .u64 %r338;
.reg .u16 %r341;
.reg .u16 %r347;
.reg .u16 %r348;
.reg .pred %r349;
.reg .pred %r352;
.reg .pred %r353;
.reg .u16 %r354;
.reg .u16 %r355;
.reg .u64 %r356;
.reg .u64 %r357;
.reg .u64 %r358;
.reg .u64 %r359;
.reg .u64 %r360;
.reg .u32 %r362;
.reg .pred %r364;
.reg .u16 %r365;
.reg .u16 %r366;
.reg .pred %r367;
.reg .pred %r370;
.reg .pred %r371;
.reg .u16 %r372;
.reg .u16 %r373;
.reg .u64 %r374;
.reg .u64 %r375;
.reg .u64 %r376;
.reg .u64 %r377;
.reg .u64 %r378;
.reg .u32 %r380;
.reg .pred %r382;
.reg .u64 %r383;
.reg .u64 %r384;
.reg .u64 %r385;
.reg .u64 %r386;
.reg .u64 %r387;
.reg .u32 %r389;
.reg .pred %r392;
.reg .u16 %r393;
.reg .u16 %r394;
.reg .pred %r397;
.reg .u16 %r398;
.reg .pred %r399;
.reg .u16 %r400;
.reg .u16 %r401;
.reg .u16 %r402;
.reg .pred %r403;
.reg .u16 %r404;
.reg .u16 %r405;
.reg .u16 %r406;
.reg .pred %r407;
.reg .u32 %r410;
.reg .u32 %r412;
.reg .u64 %r414;
.reg .u64 %r415;
.reg .u16 %r417;
.reg .u16 %r418;
.reg .u16 %r419;
.reg .u32 %r420;
.reg .u32 %r421;
.reg .u16 %r422;
.reg .u32 %r427;
.reg .u16 %r428;
.reg .pred %r430;
.reg .pred %r432;
.reg .pred %r434;
.reg .u64 %r436;
.reg .u64 %r437;
.reg .u64 %r438;
.reg .u64 %r439;
.reg .u64 %r440;
.reg .u64 %r441;
.reg .u64 %r442;
.reg .u64 %r443;
.reg .u64 %r444;
.reg .u32 %r446;
.reg .u64 %r447;
.reg .u64 %r448;
mov.u64 %r216,%ar0;
mov.u64 %r217,%ar1;
mov.u64 %r218,%ar2;
mov.u64 %r219,%ar3;
.loc 1 553 6
ld.u16 %r225,[%r216+18];
and.b16 %r224,%r225,32767;
setp.ne.u16 %r226,%r224,32767;
@ %r226 bra $L357;
mov.u64 %r189,%r216;
add.u64 %r184,%r216,18;
mov.u64 %r25,%r216;
$L359:
.loc 1 558 10
ld.u16 %r227,[%r25];
setp.ne.u16 %r228,%r227,0;
@ %r228 bra $L358;
.loc 1 556 3
add.u64 %r25,%r25,2;
setp.ne.u64 %r229,%r25,%r184;
@ %r229 bra $L359;
bra $L357;
$L358:
mov.u64 %r54,%r218;
add.u64 %r90,%r216,20;
$L360:
.loc 1 483 10
ld.u16 %r230,[%r189];
st.u16 [%r54],%r230;
.loc 1 482 3
add.u64 %r189,%r189,2;
add.u64 %r54,%r54,2;
setp.ne.u64 %r231,%r90,%r189;
@ %r231 bra $L360;
bra $L356;
$L357:
.loc 1 553 6
ld.u16 %r233,[%r217+18];
and.b16 %r232,%r233,32767;
setp.ne.u16 %r234,%r232,32767;
@ %r234 bra $L362;
mov.u64 %r24,%r217;
add.u64 %r442,%r217,18;
mov.u64 %r87,%r217;
$L364:
.loc 1 558 10
ld.u16 %r235,[%r87];
setp.ne.u16 %r236,%r235,0;
@ %r236 bra $L363;
.loc 1 556 3
add.u64 %r87,%r87,2;
setp.ne.u64 %r237,%r87,%r442;
@ %r237 bra $L364;
bra $L362;
$L363:
mov.u64 %r88,%r218;
add.u64 %r96,%r217,20;
$L365:
.loc 1 483 10
ld.u16 %r238,[%r24];
st.u16 [%r88],%r238;
.loc 1 482 3
add.u64 %r24,%r24,2;
add.u64 %r88,%r88,2;
setp.ne.u64 %r239,%r24,%r96;
@ %r239 bra $L365;
bra $L356;
$L362:
.loc 1 1588 9
cvta.const.u64 %r241,ezero;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r216;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r241;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r242,[%value_in];
}
.loc 1 1588 6
setp.eq.u32 %r243,%r242,0;
@ %r243 bra $L366;
$L369:
.loc 1 532 9
ld.u16 %r85,[%r216+18];
cvt.u16.u32 %r245,%r85;
and.b16 %r244,%r245,32767;
ld.u16 %r172,[%r217+18];
cvt.u16.u32 %r247,%r172;
and.b16 %r246,%r247,32767;
.loc 1 532 6
setp.eq.u16 %r249,%r244,32767;
@ %r249 bra $L367;
bra $L460;
$L366:
.loc 1 1588 35
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r217;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r241;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r252,[%value_in];
}
.loc 1 1588 31
setp.ne.u32 %r253,%r252,0;
@ %r253 bra $L369;
$L376:
mov.u64 %r175,%r218;
add.u64 %r71,%r218,16;
.loc 1 3843 9
mov.u16 %r260,0;
bra $L370;
$L367:
mov.u64 %r111,%r216;
add.u64 %r188,%r216,18;
$L372:
.loc 1 558 10
ld.u16 %r254,[%r111];
setp.ne.u16 %r255,%r254,0;
@ %r255 bra $L371;
.loc 1 556 3
add.u64 %r111,%r111,2;
setp.ne.u64 %r256,%r111,%r188;
@ %r256 bra $L372;
bra $L461;
$L421:
mov.u64 %r106,%r217;
add.u64 %r442,%r217,18;
$L375:
.loc 1 558 10
ld.u16 %r257,[%r106];
setp.ne.u16 %r258,%r257,0;
@ %r258 bra $L423;
.loc 1 556 3
add.u64 %r106,%r106,2;
setp.ne.u64 %r259,%r106,%r442;
@ %r259 bra $L375;
bra $L376;
$L370:
.loc 1 3843 9
st.u16 [%r175],%r260;
.loc 1 3842 7
add.u64 %r175,%r175,2;
setp.ne.u64 %r261,%r71,%r175;
@ %r261 bra $L370;
.loc 1 3844 14
mov.u16 %r262,-16384;
st.u16 [%r218+16],%r262;
.loc 1 3850 14
mov.u16 %r263,32767;
st.u16 [%r218+18],%r263;
.loc 1 1593 7
bra $L356;
$L460:
.loc 1 532 6
setp.ne.u16 %r265,%r246,32767;
@ %r265 bra $L378;
.loc 1 541 12
mov.u32 %r57,0;
add.u64 %r442,%r217,18;
bra $L374;
$L423:
.loc 1 538 14
mov.u32 %r57,1;
bra $L374;
$L428:
.loc 1 541 12
mov.u32 %r57,0;
add.u64 %r442,%r217,18;
$L374:
mov.u64 %r138,%r217;
mov.u64 %r114,%r217;
$L380:
.loc 1 558 11
ld.u16 %r103,[%r114];
.loc 1 558 10
setp.ne.u32 %r266,%r103,0;
@ %r266 bra $L379;
.loc 1 556 3
add.u64 %r114,%r114,2;
setp.ne.u64 %r267,%r442,%r114;
@ %r267 bra $L380;
bra $L462;
$L465:
mov.u64 %r82,%r216;
add.u64 %r102,%r82,18;
$L383:
.loc 1 558 10
ld.u16 %r268,[%r82];
setp.ne.u16 %r269,%r268,0;
@ %r269 bra $L424;
.loc 1 556 3
add.u64 %r82,%r82,2;
setp.ne.u64 %r270,%r82,%r102;
@ %r270 bra $L383;
$L419:
.loc 1 518 6
cvt.u16.u32 %r273,%r85;
cvt.s32.s16 %r272,%r273;
shr.u32 %r141,%r272,31;
$L385:
.loc 1 558 10
ld.u16 %r274,[%r138];
setp.ne.u16 %r275,%r274,0;
@ %r275 bra $L425;
.loc 1 556 3
add.u64 %r138,%r138,2;
setp.ne.u64 %r276,%r442,%r138;
@ %r276 bra $L385;
bra $L463;
$L425:
.loc 1 516 12
mov.u32 %r108,0;
$L384:
.loc 1 1600 10
setp.ne.u32 %r277,%r108,%r141;
.loc 1 1601 18
selp.u32 %r103,32768,%r103,%r277;
cvt.u16.u32 %r278,%r103;
st.u16 [%r218+18],%r278;
mov.u64 %r74,%r218;
add.u64 %r51,%r218,18;
.loc 1 581 10
mov.u16 %r279,0;
$L388:
st.u16 [%r74],%r279;
.loc 1 580 3
add.u64 %r74,%r74,2;
setp.ne.u64 %r280,%r51,%r74;
@ %r280 bra $L388;
.loc 1 582 6
ld.u16 %r282,[%r218+18];
or.b16 %r281,%r282,32767;
st.u16 [%r218+18],%r281;
.loc 1 1605 7
bra $L356;
$L379:
.loc 1 1607 6
setp.eq.u32 %r283,%r57,0;
@ %r283 bra $L378;
$L422:
mov.u64 %r70,%r218;
add.u64 %r66,%r70,20;
.loc 1 467 10
mov.u16 %r284,0;
$L389:
st.u16 [%r70],%r284;
.loc 1 466 3
add.u64 %r70,%r70,2;
setp.ne.u64 %r285,%r66,%r70;
@ %r285 bra $L389;
bra $L356;
$L378:
.loc 1 1613 3
add.u64 %r444,%frame,54;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r216;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r444;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 1614 3
add.u64 %r439,%frame,28;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r217;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r439;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 1615 11
ld.u16 %r30,[%frame+56];
.loc 1 1616 11
ld.u16 %r31,[%frame+30];
.loc 1 1617 6
setp.eq.u32 %r292,%r31,0;
@ %r292 bra $L390;
.loc 1 1630 1
bra $L464;
$L394:
.loc 1 1621 7
add.u64 %r76,%r76,2;
ld.u16 %r293,[%r76+-2];
setp.eq.u16 %r294,%r293,0;
@ %r294 bra $L392;
.loc 1 1623 15
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r439;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r297,[%value_in];
}
cvt.s64.s32 %r298,%r297;
.loc 1 1623 12
neg.s64 %r45,%r298;
.loc 1 1632 9
ld.u16 %r194,[%frame+56];
.loc 1 1624 8
bra $L393;
$L390:
add.u64 %r76,%frame,32;
add.u64 %r443,%frame,52;
$L392:
.loc 1 1619 7
setp.ne.u64 %r301,%r443,%r76;
@ %r301 bra $L394;
mov.u64 %r53,%r218;
add.u64 %r78,%r53,20;
.loc 1 467 10
mov.u16 %r302,0;
$L395:
st.u16 [%r53],%r302;
.loc 1 466 3
add.u64 %r53,%r53,2;
setp.ne.u64 %r303,%r53,%r78;
@ %r303 bra $L395;
bra $L356;
$L464:
.loc 1 1616 7
cvt.u16.u32 %r304,%r31;
cvt.u64.u16 %r45,%r304;
mov.u32 %r194,%r30;
$L393:
.loc 1 1615 7
cvt.u16.u32 %r305,%r30;
cvt.u64.u16 %r44,%r305;
.loc 1 1632 6
setp.eq.u32 %r306,%r194,0;
@ %r306 bra $L396;
.loc 1 1650 1
bra $L397;
$L399:
.loc 1 1636 7
add.u64 %r104,%r104,2;
ld.u16 %r307,[%r104+-2];
setp.eq.u16 %r308,%r307,0;
@ %r308 bra $L398;
.loc 1 1638 15
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r444;
call (%value_in),enormlz,(%out_arg1);
ld.param.u32 %r311,[%value_in];
}
cvt.s64.s32 %r312,%r311;
.loc 1 1638 12
sub.u64 %r44,%r44,%r312;
.loc 1 1639 8
bra $L397;
$L396:
add.u64 %r104,%frame,58;
add.u64 %r93,%frame,78;
$L398:
.loc 1 1634 7
setp.ne.u64 %r315,%r93,%r104;
@ %r315 bra $L399;
.loc 1 1642 10
ld.u16 %r316,[%frame+54];
ld.u16 %r317,[%frame+28];
setp.eq.u16 %r318,%r316,%r317;
.loc 1 1645 18
selp.u32 %r194,%r194,32768,%r318;
cvt.u16.u32 %r319,%r194;
st.u16 [%r218+18],%r319;
mov.u64 %r43,%r218;
add.u64 %r113,%r218,18;
.loc 1 581 10
mov.u16 %r320,0;
$L401:
st.u16 [%r43],%r320;
.loc 1 580 3
add.u64 %r43,%r43,2;
setp.ne.u64 %r321,%r43,%r113;
@ %r321 bra $L401;
.loc 1 582 6
ld.u16 %r323,[%r218+18];
or.b16 %r322,%r323,32767;
st.u16 [%r218+18],%r322;
.loc 1 1648 7
bra $L356;
$L397:
.loc 1 1063 8
ld.u16 %r324,[%frame+28];
st.u16 [%r219+52],%r324;
.loc 1 1064 8
ld.u16 %r325,[%frame+30];
st.u16 [%r219+54],%r325;
add.u64 %r34,%r219,56;
add.u64 %r202,%r219,78;
mov.u64 %r199,%r34;
.loc 1 1068 12
mov.u16 %r326,0;
$L402:
st.u16 [%r199],%r326;
.loc 1 1066 3
add.u64 %r199,%r199,2;
setp.ne.u64 %r327,%r199,%r202;
@ %r327 bra $L402;
.loc 1 1070 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r439;
call eshdn1,(%out_arg1);
}
.loc 1 1078 18
ld.u16 %r127,[%frame+60];
shl.b64 %r331,%r127,16;
sub.u64 %r128,%r331,%r127;
add.u64 %r441,%frame,32;
add.u64 %r443,%frame,52;
add.u64 %r436,%frame,4;
add.u64 %r438,%frame,26;
add.u64 %r437,%frame,24;
add.u64 %r440,%frame,30;
.loc 1 988 9
mov.u32 %r446,0;
.loc 1 986 5
add.u64 %r447,%frame,78;
add.u64 %r448,%frame,2;
$L415:
.loc 1 1075 16
ld.u16 %r333,[%frame+32];
.loc 1 1075 40
shl.b64 %r334,%r333,16;
.loc 1 1075 52
ld.u16 %r335,[%frame+34];
.loc 1 1075 12
add.u64 %r126,%r334,%r335;
.loc 1 1078 10
setp.gt.u64 %r336,%r126,%r128;
@ %r336 bra $L427;
.loc 1 1081 15
div.u64 %r338,%r126,%r127;
.loc 1 1081 8
cvt.u16.u64 %r341,%r338;
cvt.u32.u16 %r130,%r341;
bra $L403;
$L427:
.loc 1 1079 8
mov.u32 %r130,65535;
$L403:
.loc 1 1090 7
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r130;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r444;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call m16m,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u64 %r195,%r436;
mov.u64 %r56,%r441;
mov.u64 %r116,%r441;
mov.u64 %r144,%r436;
$L407:
.loc 1 796 10
ld.u16 %r347,[%r144];
ld.u16 %r348,[%r116];
setp.eq.u16 %r349,%r347,%r348;
@ %r349 bra $L404;
.loc 1 802 6
setp.gt.u16 %r352,%r347,%r348;
@ %r352 bra $L405;
bra $L406;
$L404:
.loc 1 794 3
add.u64 %r144,%r144,2;
add.u64 %r116,%r116,2;
setp.ne.u64 %r353,%r438,%r144;
@ %r353 bra $L407;
bra $L406;
$L405:
.loc 1 1094 10
cvt.u16.u32 %r355,%r130;
add.u16 %r354,%r355,-1;
cvt.u32.u16 %r131,%r354;
.loc 1 988 9
mov.u32 %r209,%r446;
.loc 1 986 5
mov.u64 %r153,%r447;
.loc 1 987 5
mov.u64 %r154,%r437;
$L408:
.loc 1 991 11
ld.u16 %r356,[%r154];
.loc 1 991 55
cvt.u64.u32 %r357,%r209;
.loc 1 991 9
sub.u64 %r358,%r356,%r357;
.loc 1 991 34
ld.u16 %r359,[%r153];
.loc 1 991 9
sub.u64 %r150,%r358,%r359;
.loc 1 992 10
shr.u64 %r360,%r150,16;
cvt.u32.u64 %r362,%r360;
and.b32 %r209,%r362,1;
.loc 1 996 12
st.u16 [%r154],%r150;
.loc 1 997 7
add.u64 %r153,%r153,-2;
.loc 1 998 7
add.u64 %r154,%r154,-2;
.loc 1 989 3
setp.ne.u64 %r364,%r154,%r448;
@ %r364 bra $L408;
mov.u64 %r182,%r441;
$L411:
.loc 1 796 10
ld.u16 %r365,[%r195];
ld.u16 %r366,[%r182];
setp.eq.u16 %r367,%r365,%r366;
@ %r367 bra $L409;
.loc 1 802 6
setp.gt.u16 %r370,%r365,%r366;
@ %r370 bra $L410;
.loc 1 1094 10
mov.u32 %r130,%r131;
bra $L406;
$L409:
.loc 1 794 3
add.u64 %r195,%r195,2;
add.u64 %r182,%r182,2;
setp.ne.u64 %r371,%r438,%r195;
@ %r371 bra $L411;
.loc 1 1094 10
mov.u32 %r130,%r131;
bra $L406;
$L410:
.loc 1 1098 14
cvt.u16.u32 %r373,%r130;
add.u16 %r372,%r373,-2;
cvt.u32.u16 %r130,%r372;
.loc 1 988 9
mov.u32 %r211,%r446;
.loc 1 986 5
mov.u64 %r166,%r447;
.loc 1 987 5
mov.u64 %r167,%r437;
$L412:
.loc 1 991 11
ld.u16 %r374,[%r167];
.loc 1 991 55
cvt.u64.u32 %r375,%r211;
.loc 1 991 9
sub.u64 %r376,%r374,%r375;
.loc 1 991 34
ld.u16 %r377,[%r166];
.loc 1 991 9
sub.u64 %r163,%r376,%r377;
.loc 1 992 10
shr.u64 %r378,%r163,16;
cvt.u32.u64 %r380,%r378;
and.b32 %r211,%r380,1;
.loc 1 996 12
st.u16 [%r167],%r163;
.loc 1 997 7
add.u64 %r166,%r166,-2;
.loc 1 998 7
add.u64 %r167,%r167,-2;
.loc 1 989 3
setp.ne.u64 %r382,%r167,%r448;
@ %r382 bra $L412;
$L406:
.loc 1 988 9
mov.u32 %r213,%r446;
.loc 1 986 5
mov.u64 %r180,%r437;
.loc 1 987 5
mov.u64 %r181,%r443;
$L413:
.loc 1 991 11
ld.u16 %r383,[%r181];
.loc 1 991 55
cvt.u64.u32 %r384,%r213;
.loc 1 991 9
sub.u64 %r385,%r383,%r384;
.loc 1 991 34
ld.u16 %r386,[%r180];
.loc 1 991 9
sub.u64 %r177,%r385,%r386;
.loc 1 992 10
shr.u64 %r387,%r177,16;
cvt.u32.u64 %r389,%r387;
and.b32 %r213,%r389,1;
.loc 1 996 12
st.u16 [%r181],%r177;
.loc 1 997 7
add.u64 %r180,%r180,-2;
.loc 1 998 7
add.u64 %r181,%r181,-2;
.loc 1 989 3
setp.ne.u64 %r392,%r181,%r440;
@ %r392 bra $L413;
.loc 1 1121 16
cvt.u16.u32 %r393,%r130;
st.u16 [%r34],%r393;
mov.u64 %r198,%r441;
.loc 1 918 5
mov.u64 %r168,%r441;
$L414:
.loc 1 922 7
add.u64 %r168,%r168,2;
.loc 1 922 10
ld.u16 %r394,[%r168];
st.u16 [%r198],%r394;
.loc 1 921 3
add.u64 %r198,%r198,2;
setp.ne.u64 %r397,%r168,%r443;
@ %r397 bra $L414;
.loc 1 924 6
mov.u16 %r398,0;
st.u16 [%frame+52],%r398;
.loc 1 1072 3
add.u64 %r34,%r34,2;
setp.ne.u64 %r399,%r34,%r202;
@ %r399 bra $L415;
mov.u64 %r61,%r439;
.loc 1 1126 5
mov.u32 %r133,0;
$L416:
.loc 1 1129 9
ld.u16 %r401,[%r56];
cvt.u16.u32 %r402,%r133;
or.b16 %r400,%r401,%r402;
cvt.u32.u16 %r133,%r400;
.loc 1 1127 3
add.u64 %r56,%r56,2;
setp.ne.u64 %r403,%r444,%r56;
@ %r403 bra $L416;
cvt.u16.u32 %r405,%r133;
min.u16 %r404,%r405,1;
cvt.u32.u16 %r135,%r404;
add.u64 %r65,%r219,52;
$L417:
.loc 1 1135 12
ld.u16 %r406,[%r65];
st.u16 [%r61],%r406;
.loc 1 1134 3
add.u64 %r65,%r65,2;
add.u64 %r61,%r61,2;
setp.ne.u64 %r407,%r444,%r61;
@ %r407 bra $L417;
.loc 1 1654 12
sub.u64 %r414,%r45,%r44;
.loc 1 1654 6
add.u64 %r415,%r414,16383;
.loc 1 1655 3
mov.u32 %r412,64;
mov.u32 %r410,0;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r439;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r135;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r410;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r415;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r412;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r219;
call emdnorm,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
}
.loc 1 1657 6
ld.u16 %r418,[%frame+54];
ld.u16 %r419,[%frame+28];
set.u32.ne.u16 %r420,%r418,%r419;
neg.s32 %r421,%r420;
cvt.u16.u32 %r417,%r421;
neg.s16 %r422,%r417;
st.u16 [%frame+28],%r422;
.loc 1 1661 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r439;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r218;
call emovo$constprop$0,(%out_arg1,%out_arg2);
}
bra $L356;
$L463:
.loc 1 518 6
cvt.u16.u32 %r428,%r172;
cvt.s32.s16 %r427,%r428;
shr.u32 %r108,%r427,31;
bra $L384;
$L424:
.loc 1 516 12
mov.u32 %r141,0;
bra $L385;
$L462:
.loc 1 553 6
setp.ne.u16 %r430,%r244,32767;
@ %r430 bra $L419;
bra $L465;
$L461:
.loc 1 532 6
setp.eq.u16 %r432,%r246,32767;
@ %r432 bra $L421;
bra $L422;
$L371:
setp.eq.u16 %r434,%r246,32767;
@ ! %r434 bra $L378;
bra $L428;
$L356:
.loc 1 1662 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _ldtoa_r
.visible .func (.param .u64 %value_out) _ldtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.reg .u64 %ar6;
ld.param.u64 %ar6,[%in_ar6];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[352];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r37;
.reg .u64 %r40;
.reg .u32 %r44;
.reg .u64 %r48;
.reg .u64 %r52;
.reg .u32 %r53;
.reg .u64 %r54;
.reg .u32 %r55;
.reg .u64 %r56;
.reg .u32 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u64 %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u32 %r64;
.reg .u64 %r65;
.reg .u32 %r67;
.reg .u32 %r71;
.reg .u64 %r72;
.reg .u32 %r75;
.reg .u32 %r78;
.reg .u64 %r79;
.reg .u32 %r82;
.reg .u64 %r84;
.reg .u32 %r90;
.reg .u64 %r94;
.reg .u64 %r96;
.reg .u64 %r99;
.reg .u32 %r101;
.reg .u64 %r109;
.reg .u64 %r111;
.reg .u32 %r113;
.reg .u64 %r124;
.reg .u64 %r132;
.reg .u32 %r135;
.reg .u64 %r139;
.reg .u32 %r143;
.reg .u64 %r145;
.reg .u64 %r147;
.reg .u64 %r148;
.reg .u64 %r151;
.reg .u64 %r154;
.reg .u32 %r155;
.reg .u32 %r157;
.reg .u64 %r158;
.reg .u32 %r166;
.reg .u64 %r171;
.reg .u64 %r172;
.reg .u64 %r173;
.reg .u32 %r175;
.reg .u64 %r182;
.reg .u32 %r184;
.reg .u64 %r185;
.reg .u32 %r187;
.reg .u32 %r188;
.reg .u32 %r190;
.reg .u32 %r194;
.reg .u32 %r200;
.reg .u32 %r203;
.reg .u64 %r205;
.reg .u64 %r216;
.reg .u64 %r217;
.reg .u64 %r218;
.reg .u32 %r219;
.reg .u64 %r225;
.reg .u64 %r226;
.reg .u32 %r227;
.reg .u64 %r228;
.reg .u64 %r233;
.reg .u32 %r235;
.reg .u64 %r239;
.reg .u64 %r241;
.reg .u64 %r244;
.reg .u64 %r246;
.reg .u64 %r247;
.reg .u64 %r248;
.reg .u64 %r251;
.reg .u64 %r252;
.reg .u64 %r253;
.reg .u64 %r254;
.reg .u64 %r255;
.reg .u64 %r258;
.reg .u64 %r262;
.reg .u64 %r263;
.reg .u64 %r266;
.reg .u64 %r267;
.reg .u64 %r269;
.reg .u64 %r270;
.reg .u64 %r271;
.reg .u64 %r272;
.reg .u32 %r276;
.reg .u64 %r280;
.reg .u64 %r282;
.reg .u64 %r284;
.reg .u64 %r285;
.reg .u64 %r287;
.reg .u32 %r294;
.reg .u64 %r299;
.reg .u64 %r302;
.reg .u32 %r307;
.reg .u32 %r308;
.reg .u64 %r309;
.reg .u64 %r313;
.reg .u64 %r316;
.reg .u64 %r317;
.reg .u64 %r323;
.reg .u32 %r325;
.reg .u64 %r330;
.reg .u64 %r331;
.reg .u64 %r340;
.reg .u64 %r343;
.reg .u64 %r344;
.reg .u64 %r345;
.reg .u64 %r349;
.reg .u64 %r353;
.reg .u64 %r356;
.reg .u64 %r357;
.reg .u64 %r364;
.reg .u64 %r367;
.reg .u64 %r368;
.reg .u64 %r369;
.reg .u32 %r370;
.reg .u32 %r371;
.reg .u32 %r376;
.reg .u64 %r377;
.reg .u64 %r378;
.reg .u64 %r387;
.reg .u64 %r390;
.reg .u64 %r391;
.reg .u64 %r392;
.reg .u32 %r393;
.reg .u32 %r398;
.reg .u64 %r399;
.reg .u32 %r400;
.reg .u64 %r401;
.reg .u32 %r402;
.reg .u32 %r407;
.reg .u64 %r408;
.reg .u32 %r410;
.reg .u32 %r415;
.reg .u64 %r416;
.reg .u64 %r418;
.reg .u64 %r425;
.reg .u64 %r428;
.reg .u64 %r429;
.reg .u32 %r430;
.reg .u32 %r435;
.reg .u64 %r436;
.reg .u32 %r437;
.reg .u32 %r442;
.reg .u64 %r443;
.reg .u64 %r444;
.reg .u64 %r447;
.reg .u32 %r451;
.reg .u64 %r452;
.reg .u64 %r458;
.reg .u64 %r461;
.reg .u64 %r464;
.reg .u32 %r467;
.reg .u64 %r471;
.reg .u64 %r478;
.reg .u64 %r485;
.reg .u64 %r490;
.reg .u64 %r491;
.reg .u32 %r492;
.reg .u64 %r493;
.reg .u32 %r496;
.reg .u64 %r497;
.reg .u64 %r498;
.reg .u32 %r504;
.reg .u32 %r506;
.reg .u64 %r508;
.reg .f64 %r509;
.reg .u32 %r510;
.reg .u32 %r511;
.reg .u64 %r512;
.reg .u64 %r513;
.reg .u64 %r514;
.reg .u32 %r538;
.reg .u32 %r539;
.reg .pred %r540;
.reg .u32 %r541;
.reg .u32 %r542;
.reg .u64 %r545;
.reg .u64 %r549;
.reg .u16 %r550;
.reg .u16 %r551;
.reg .u16 %r554;
.reg .pred %r555;
.reg .pred %r556;
.reg .u32 %r558;
.reg .u16 %r559;
.reg .pred %r560;
.reg .pred %r561;
.reg .u16 %r564;
.reg .pred %r565;
.reg .pred %r566;
.reg .u32 %r567;
.reg .u16 %r568;
.reg .pred %r569;
.reg .u16 %r570;
.reg .pred %r571;
.reg .u16 %r572;
.reg .u16 %r575;
.reg .pred %r576;
.reg .pred %r577;
.reg .u16 %r578;
.reg .pred %r579;
.reg .pred %r580;
.reg .pred %r581;
.reg .u64 %r583;
.reg .u32 %r585;
.reg .u64 %r588;
.reg .u32 %r590;
.reg .u16 %r592;
.reg .pred %r593;
.reg .u64 %r595;
.reg .u32 %r597;
.reg .u32 %r602;
.reg .pred %r603;
.reg .pred %r604;
.reg .u16 %r605;
.reg .pred %r606;
.reg .u16 %r607;
.reg .u16 %r614;
.reg .pred %r615;
.reg .u16 %r616;
.reg .u16 %r617;
.reg .u32 %r618;
.reg .pred %r619;
.reg .u16 %r620;
.reg .pred %r621;
.reg .u32 %r622;
.reg .u16 %r623;
.reg .pred %r624;
.reg .pred %r625;
.reg .pred %r626;
.reg .u32 %r627;
.reg .u32 %r628;
.reg .u64 %r630;
.reg .u64 %r631;
.reg .u16 %r632;
.reg .pred %r633;
.reg .u32 %r635;
.reg .u64 %r636;
.reg .u64 %r637;
.reg .u32 %r638;
.reg .u32 %r640;
.reg .u64 %r642;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u64 %r645;
.reg .u16 %r646;
.reg .u16 %r647;
.reg .u16 %r648;
.reg .u16 %r649;
.reg .pred %r650;
.reg .u16 %r651;
.reg .u16 %r652;
.reg .pred %r653;
.reg .u16 %r654;
.reg .u16 %r655;
.reg .pred %r656;
.reg .u16 %r657;
.reg .pred %r658;
.reg .pred %r659;
.reg .u16 %r660;
.reg .pred %r661;
.reg .pred %r662;
.reg .u16 %r670;
.reg .u16 %r671;
.reg .pred %r673;
.reg .u16 %r674;
.reg .pred %r675;
.reg .u16 %r676;
.reg .u16 %r677;
.reg .pred %r678;
.reg .u16 %r679;
.reg .u16 %r680;
.reg .pred %r681;
.reg .u16 %r682;
.reg .pred %r683;
.reg .pred %r684;
.reg .u32 %r686;
.reg .u32 %r688;
.reg .u16 %r691;
.reg .u16 %r692;
.reg .pred %r693;
.reg .pred %r696;
.reg .pred %r697;
.reg .u16 %r698;
.reg .u16 %r699;
.reg .pred %r700;
.reg .u16 %r701;
.reg .pred %r702;
.reg .pred %r703;
.reg .u16 %r704;
.reg .pred %r705;
.reg .u16 %r706;
.reg .pred %r707;
.reg .u16 %r708;
.reg .u16 %r709;
.reg .u16 %r710;
.reg .u16 %r711;
.reg .u16 %r712;
.reg .u16 %r713;
.reg .pred %r714;
.reg .u16 %r716;
.reg .u16 %r718;
.reg .u16 %r719;
.reg .pred %r722;
.reg .u16 %r725;
.reg .pred %r726;
.reg .pred %r727;
.reg .u16 %r728;
.reg .pred %r729;
.reg .u16 %r730;
.reg .u16 %r731;
.reg .pred %r732;
.reg .u16 %r733;
.reg .u16 %r734;
.reg .pred %r735;
.reg .u16 %r736;
.reg .u16 %r737;
.reg .u16 %r738;
.reg .pred %r739;
.reg .u64 %r740;
.reg .u64 %r741;
.reg .u64 %r742;
.reg .u64 %r743;
.reg .u64 %r744;
.reg .u32 %r746;
.reg .pred %r749;
.reg .u64 %r750;
.reg .u64 %r751;
.reg .u64 %r752;
.reg .u64 %r753;
.reg .u64 %r754;
.reg .u32 %r756;
.reg .pred %r759;
.reg .u32 %r764;
.reg .pred %r771;
.reg .u16 %r772;
.reg .u16 %r773;
.reg .pred %r774;
.reg .pred %r775;
.reg .u16 %r776;
.reg .pred %r777;
.reg .u32 %r778;
.reg .u16 %r779;
.reg .pred %r781;
.reg .u16 %r782;
.reg .u16 %r783;
.reg .u16 %r784;
.reg .u16 %r785;
.reg .u16 %r786;
.reg .pred %r787;
.reg .u16 %r788;
.reg .pred %r789;
.reg .u32 %r793;
.reg .pred %r794;
.reg .u32 %r807;
.reg .u16 %r808;
.reg .pred %r810;
.reg .u32 %r815;
.reg .pred %r816;
.reg .u16 %r817;
.reg .pred %r818;
.reg .u16 %r819;
.reg .pred %r820;
.reg .u16 %r828;
.reg .pred %r829;
.reg .u16 %r834;
.reg .u16 %r835;
.reg .pred %r836;
.reg .u16 %r837;
.reg .pred %r838;
.reg .u16 %r839;
.reg .u64 %r844;
.reg .u64 %r845;
.reg .u64 %r846;
.reg .u64 %r847;
.reg .u64 %r848;
.reg .u32 %r850;
.reg .pred %r853;
.reg .u16 %r856;
.reg .pred %r857;
.reg .u16 %r858;
.reg .pred %r859;
.reg .u16 %r864;
.reg .pred %r865;
.reg .pred %r867;
.reg .u16 %r868;
.reg .pred %r869;
.reg .u16 %r870;
.reg .pred %r871;
.reg .u16 %r876;
.reg .pred %r877;
.reg .u16 %r878;
.reg .pred %r879;
.reg .u32 %r883;
.reg .pred %r884;
.reg .u32 %r898;
.reg .u32 %r899;
.reg .pred %r901;
.reg .u32 %r907;
.reg .pred %r908;
.reg .u16 %r919;
.reg .pred %r920;
.reg .u16 %r921;
.reg .u16 %r926;
.reg .pred %r927;
.reg .u16 %r928;
.reg .pred %r934;
.reg .u16 %r935;
.reg .pred %r936;
.reg .u16 %r937;
.reg .u16 %r938;
.reg .u16 %r939;
.reg .u16 %r940;
.reg .u16 %r941;
.reg .u16 %r942;
.reg .pred %r943;
.reg .u16 %r945;
.reg .u16 %r947;
.reg .u16 %r948;
.reg .pred %r951;
.reg .u16 %r952;
.reg .pred %r953;
.reg .u16 %r954;
.reg .u16 %r955;
.reg .pred %r956;
.reg .u16 %r957;
.reg .u16 %r958;
.reg .u16 %r959;
.reg .u16 %r960;
.reg .u16 %r961;
.reg .u16 %r962;
.reg .pred %r963;
.reg .u16 %r965;
.reg .u16 %r967;
.reg .u16 %r968;
.reg .pred %r971;
.reg .u16 %r972;
.reg .pred %r973;
.reg .u16 %r974;
.reg .u16 %r975;
.reg .u16 %r976;
.reg .u16 %r977;
.reg .u16 %r978;
.reg .u16 %r979;
.reg .pred %r980;
.reg .u16 %r982;
.reg .u16 %r984;
.reg .u16 %r985;
.reg .pred %r988;
.reg .u64 %r989;
.reg .u64 %r990;
.reg .u64 %r991;
.reg .u64 %r992;
.reg .u64 %r993;
.reg .u32 %r995;
.reg .pred %r998;
.reg .pred %r1004;
.reg .u32 %r1008;
.reg .pred %r1009;
.reg .pred %r1010;
.reg .u32 %r1011;
.reg .pred %r1012;
.reg .pred %r1013;
.reg .u32 %r1014;
.reg .u32 %r1015;
.reg .pred %r1016;
.reg .u32 %r1017;
.reg .pred %r1018;
.reg .u16 %r1020;
.reg .u16 %r1021;
.reg .u32 %r1022;
.reg .u32 %r1023;
.reg .pred %r1024;
.reg .u16 %r1025;
.reg .pred %r1026;
.reg .u16 %r1027;
.reg .u16 %r1028;
.reg .u16 %r1029;
.reg .u16 %r1030;
.reg .u16 %r1031;
.reg .u16 %r1032;
.reg .pred %r1033;
.reg .u16 %r1035;
.reg .u16 %r1037;
.reg .u16 %r1038;
.reg .pred %r1041;
.reg .u16 %r1042;
.reg .pred %r1043;
.reg .u16 %r1044;
.reg .u16 %r1045;
.reg .pred %r1046;
.reg .u16 %r1047;
.reg .u16 %r1048;
.reg .u16 %r1049;
.reg .u16 %r1050;
.reg .u16 %r1051;
.reg .u16 %r1052;
.reg .pred %r1053;
.reg .u16 %r1055;
.reg .u16 %r1057;
.reg .u16 %r1058;
.reg .pred %r1061;
.reg .u16 %r1062;
.reg .pred %r1063;
.reg .u16 %r1064;
.reg .u16 %r1065;
.reg .u16 %r1066;
.reg .u16 %r1067;
.reg .u16 %r1068;
.reg .u16 %r1069;
.reg .pred %r1070;
.reg .u16 %r1072;
.reg .u16 %r1074;
.reg .u16 %r1075;
.reg .pred %r1078;
.reg .u64 %r1079;
.reg .u64 %r1080;
.reg .u64 %r1081;
.reg .u64 %r1082;
.reg .u64 %r1083;
.reg .u32 %r1085;
.reg .pred %r1088;
.reg .u16 %r1095;
.reg .u16 %r1096;
.reg .u32 %r1097;
.reg .u32 %r1098;
.reg .u32 %r1099;
.reg .u32 %r1100;
.reg .pred %r1101;
.reg .u16 %r1102;
.reg .pred %r1103;
.reg .pred %r1104;
.reg .u64 %r1110;
.reg .u32 %r1112;
.reg .pred %r1113;
.reg .pred %r1114;
.reg .u64 %r1115;
.reg .u16 %r1116;
.reg .u32 %r1117;
.reg .u64 %r1120;
.reg .u16 %r1122;
.reg .u16 %r1123;
.reg .u32 %r1124;
.reg .u16 %r1125;
.reg .u32 %r1126;
.reg .pred %r1127;
.reg .u16 %r1129;
.reg .u16 %r1130;
.reg .u32 %r1131;
.reg .pred %r1132;
.reg .u32 %r1133;
.reg .u16 %r1134;
.reg .pred %r1135;
.reg .pred %r1136;
.reg .u32 %r1137;
.reg .pred %r1138;
.reg .u16 %r1141;
.reg .u16 %r1142;
.reg .u32 %r1143;
.reg .u64 %r1145;
.reg .u32 %r1146;
.reg .u16 %r1148;
.reg .u16 %r1149;
.reg .pred %r1150;
.reg .u16 %r1151;
.reg .pred %r1152;
.reg .pred %r1153;
.reg .u16 %r1154;
.reg .pred %r1155;
.reg .pred %r1156;
.reg .u32 %r1157;
.reg .u32 %r1158;
.reg .pred %r1159;
.reg .u16 %r1160;
.reg .pred %r1161;
.reg .u16 %r1162;
.reg .u32 %r1163;
.reg .pred %r1164;
.reg .pred %r1165;
.reg .u32 %r1166;
.reg .pred %r1167;
.reg .u16 %r1169;
.reg .u32 %r1170;
.reg .u32 %r1171;
.reg .u32 %r1172;
.reg .u32 %r1175;
.reg .u32 %r1176;
.reg .u16 %r1177;
.reg .u16 %r1178;
.reg .u16 %r1179;
.reg .u32 %r1180;
.reg .u16 %r1181;
.reg .pred %r1182;
.reg .pred %r1184;
.reg .u32 %r1185;
.reg .u16 %r1187;
.reg .u32 %r1188;
.reg .u32 %r1189;
.reg .u32 %r1192;
.reg .u32 %r1193;
.reg .u16 %r1194;
.reg .u16 %r1195;
.reg .u16 %r1196;
.reg .u32 %r1197;
.reg .u16 %r1198;
.reg .pred %r1199;
.reg .u16 %r1201;
.reg .u32 %r1202;
.reg .u32 %r1203;
.reg .u32 %r1206;
.reg .u32 %r1207;
.reg .u16 %r1208;
.reg .u16 %r1209;
.reg .u16 %r1210;
.reg .u32 %r1211;
.reg .u16 %r1212;
.reg .pred %r1213;
.reg .u32 %r1214;
.reg .pred %r1215;
.reg .pred %r1216;
.reg .u16 %r1217;
.reg .pred %r1218;
.reg .u32 %r1219;
.reg .u16 %r1220;
.reg .u32 %r1221;
.reg .pred %r1222;
.reg .u64 %r1224;
.reg .pred %r1225;
.reg .u64 %r1227;
.reg .pred %r1228;
.reg .pred %r1229;
.reg .u32 %r1230;
.reg .pred %r1231;
.reg .u32 %r1232;
.reg .u32 %r1233;
.reg .u32 %r1234;
.reg .pred %r1235;
.reg .u64 %r1237;
.reg .u64 %r1238;
.reg .pred %r1239;
.reg .u64 %r1242;
.reg .pred %r1243;
.reg .u64 %r1244;
.reg .u32 %r1245;
.reg .u64 %r1247;
.reg .u64 %r1251;
.reg .pred %r1252;
.reg .u64 %r1254;
.reg .u64 %r1255;
.reg .u32 %r1257;
.reg .u16 %r1258;
.reg .pred %r1259;
.reg .u64 %r1261;
.reg .u32 %r1263;
.reg .u16 %r1265;
.reg .pred %r1266;
.reg .u16 %r1267;
.reg .u32 %r1269;
.reg .u64 %r1271;
.reg .pred %r1272;
.reg .pred %r1273;
.reg .u64 %r1274;
.reg .u64 %r1275;
.reg .u64 %r1276;
.reg .u64 %r1277;
.reg .u64 %r1278;
.reg .u64 %r1279;
.reg .u64 %r1281;
.reg .u64 %r1283;
.reg .u64 %r1287;
.reg .u64 %r1288;
.reg .u64 %r1290;
.reg .u64 %r1291;
.reg .u64 %r1292;
.reg .u64 %r1293;
.reg .u64 %r1294;
.reg .u64 %r1295;
.reg .u16 %r1296;
.reg .u64 %r1297;
.reg .u64 %r1298;
.reg .u64 %r1299;
.reg .u64 %r1300;
.reg .u64 %r1301;
.reg .u64 %r1302;
.reg .u32 %r1319;
.reg .u32 %r1320;
.reg .u64 %r1321;
.reg .u64 %r1322;
.reg .u64 %r1323;
.reg .u64 %r1324;
.reg .u64 %r1325;
.reg .u64 %r1326;
.reg .u64 %r1327;
.reg .u64 %r1328;
.reg .u64 %r1329;
.reg .u64 %r1330;
.reg .u64 %r1331;
.reg .u64 %r1332;
.reg .u64 %r1333;
.reg .u64 %r1334;
.reg .u64 %r1335;
.reg .u64 %r1336;
.reg .u64 %r1337;
.reg .u64 %r1338;
.reg .u64 %r1339;
.reg .u64 %r1340;
.reg .u16 %r1349;
mov.u64 %r508,%ar0;
mov.f64 %r509,%ar1;
mov.u32 %r510,%ar2;
mov.u32 %r511,%ar3;
mov.u64 %r512,%ar4;
mov.u64 %r513,%ar5;
mov.u64 %r514,%ar6;
.loc 1 2799 8
st.f64 [%frame+344],%r509;
.loc 1 2802 13
mov.u32 %r538,-1;
st.u32 [%frame],%r538;
.loc 1 2803 14
mov.u32 %r539,144;
st.u32 [%frame+4],%r539;
.loc 1 2808 7
ld.u64 %r22,[%r508+96];
.loc 1 2808 6
setp.eq.u64 %r540,%r22,0;
@ %r540 bra $L467;
.loc 1 2810 36
ld.u32 %r24,[%r508+104];
.loc 1 2810 34
st.u32 [%r22+8],%r24;
.loc 1 2811 43
mov.u32 %r542,1;
shl.b32 %r541,%r542,%r24;
.loc 1 2811 39
st.u32 [%r22+12],%r541;
.loc 1 2812 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r508;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 2813 30
mov.u64 %r545,0;
st.u64 [%r508+96],%r545;
$L467:
.loc 1 2819 3
add.u64 %r1300,%frame,294;
add.u64 %r549,%frame,344;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r549;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1300;
call e53toe$isra$0,(%out_arg1,%out_arg2);
}
.loc 1 553 9
ld.u16 %r67,[%frame+312];
cvt.u16.u32 %r551,%r67;
and.b16 %r550,%r551,32767;
.loc 1 553 6
setp.ne.u16 %r1273,%r550,32767;
@ %r1273 bra $L468;
mov.u64 %r226,%r1300;
add.u64 %r225,%frame,312;
$L470:
.loc 1 558 10
ld.u16 %r554,[%r226];
setp.ne.u16 %r555,%r554,0;
@ %r555 bra $L641;
.loc 1 556 3
add.u64 %r226,%r226,2;
setp.ne.u64 %r556,%r225,%r226;
@ %r556 bra $L470;
$L468:
.loc 1 518 6
cvt.u16.u32 %r559,%r67;
cvt.s32.s16 %r558,%r559;
shr.u32 %r194,%r558,31;
bra $L469;
$L641:
.loc 1 2829 11
mov.u32 %r194,0;
$L469:
st.u32 [%r513],%r194;
.loc 1 2831 6
setp.eq.u32 %r560,%r510,3;
@ %r560 bra $L642;
.loc 1 2836 6
setp.eq.u32 %r561,%r510,0;
@ %r561 bra $L643;
.loc 1 2832 13
add.u32 %r59,%r511,-1;
bra $L471;
$L642:
mov.u32 %r59,%r511;
$L471:
min.s32 %r53,%r59,42;
bra $L472;
$L643:
.loc 1 2837 13
mov.u32 %r53,20;
$L472:
.loc 1 2991 10
ld.u32 %r78,[%frame+4];
.loc 1 553 6
@ %r1273 bra $L473;
mov.u64 %r255,%r1300;
add.u64 %r458,%frame,312;
$L475:
.loc 1 558 10
ld.u16 %r564,[%r255];
setp.ne.u16 %r565,%r564,0;
@ %r565 bra $L474;
.loc 1 556 3
add.u64 %r255,%r255,2;
setp.ne.u64 %r566,%r255,%r458;
@ %r566 bra $L475;
$L473:
.loc 1 3000 15
mov.u32 %r567,144;
st.u32 [%frame+4],%r567;
mov.u64 %r270,%r1300;
add.u64 %r1297,%frame,268;
add.u64 %r461,%frame,314;
mov.u64 %r254,%r1297;
$L476:
.loc 1 483 10
ld.u16 %r568,[%r270];
st.u16 [%r254],%r568;
.loc 1 482 3
add.u64 %r270,%r270,2;
add.u64 %r254,%r254,2;
setp.ne.u64 %r569,%r270,%r461;
@ %r569 bra $L476;
.loc 1 3002 8
ld.u16 %r82,[%frame+286];
.loc 1 3002 6
cvt.u16.u32 %r570,%r82;
setp.ge.s16 %r571,%r570,0;
@ %r571 bra $L644;
.loc 1 3005 17
and.b16 %r572,%r570,32767;
cvt.u32.u16 %r82,%r572;
st.u16 [%frame+286],%r572;
.loc 1 3004 12
mov.u32 %r90,65535;
bra $L477;
$L644:
.loc 1 3009 12
mov.u32 %r90,0;
$L477:
add.u64 %r1295,%frame,242;
mov.u64 %r491,%r1295;
add.u64 %r271,%frame,262;
mov.u64 %r272,%r1295;
mov.u32 %r227,0;
cvta.const.u64 %r1276,eone;
mov.u64 %r84,%r1276;
$L479:
.loc 1 483 14
add.u64 %r84,%r84,2;
.loc 1 483 10
cvt.u16.u32 %r575,%r227;
st.u16 [%r272],%r575;
.loc 1 482 3
add.u64 %r272,%r272,2;
setp.eq.u64 %r576,%r271,%r272;
@ %r576 bra $L478;
.loc 1 483 12
ld.u16 %r227,[%r84];
bra $L479;
$L478:
.loc 1 3015 6
setp.ne.u32 %r577,%r82,0;
@ %r577 bra $L480;
add.u64 %r27,%r1297,18;
mov.u64 %r52,%r1297;
$L482:
.loc 1 3019 7
ld.u16 %r578,[%r52];
setp.ne.u16 %r579,%r578,0;
@ %r579 bra $L481;
.loc 1 3017 7
add.u64 %r52,%r52,2;
setp.ne.u64 %r580,%r27,%r52;
@ %r580 bra $L482;
$L486:
.loc 1 3011 9
mov.u32 %r135,0;
add.u64 %r1279,%frame,80;
add.u64 %r1288,%frame,190;
add.u64 %r1290,%frame,214;
bra $L483;
$L637:
.loc 1 3030 10
setp.eq.u32 %r581,%r90,0;
@ %r581 bra $L484;
.loc 1 3031 2
add.u64 %r1279,%frame,80;
cvta.const.u64 %r583,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r583;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r585,[%value_in];
}
.loc 1 3034 13
mov.u32 %r135,9999;
bra $L485;
$L484:
.loc 1 3033 2
add.u64 %r1279,%frame,80;
cvta.const.u64 %r588,$LC1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r588;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r590,[%value_in];
}
.loc 1 3034 13
mov.u32 %r135,9999;
bra $L485;
$L737:
.loc 1 3041 24
ld.u16 %r592,[%frame+284];
setp.lt.s16 %r593,%r592,0;
@ %r593 bra $L481;
.loc 1 3044 7
add.u64 %r1279,%frame,80;
cvta.const.u64 %r595,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r595;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r597,[%value_in];
}
.loc 1 3045 13
mov.u32 %r135,9999;
.loc 1 3046 7
bra $L485;
$L481:
.loc 1 3050 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1276;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1297;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r602,[%value_in];
}
.loc 1 3051 6
setp.eq.u32 %r603,%r602,0;
@ %r603 bra $L486;
.loc 1 3054 6
setp.ge.s32 %r604,%r602,0;
@ %r604 bra $L487;
add.u64 %r1291,%frame,216;
mov.u64 %r444,%r1291;
add.u64 %r287,%r1297,20;
mov.u64 %r251,%r1291;
mov.u64 %r252,%r1297;
$L488:
.loc 1 483 10
ld.u16 %r605,[%r252];
st.u16 [%r251],%r605;
.loc 1 482 3
add.u64 %r252,%r252,2;
add.u64 %r251,%r251,2;
setp.ne.u64 %r606,%r252,%r287;
@ %r606 bra $L488;
.loc 1 3058 17
mov.u16 %r607,16526;
st.u16 [%frame+234],%r607;
.loc 1 3061 9
mov.u32 %r101,16;
.loc 1 3011 9
mov.u32 %r135,0;
.loc 1 3060 9
cvta.const.u64 %r96,etens+160;
add.u64 %r1279,%frame,80;
add.u64 %r1302,%frame,320;
add.u64 %r1288,%frame,190;
add.u64 %r1274,%r1295,18;
add.u64 %r1283,%r96,100;
add.u64 %r1326,%frame,338;
.loc 1 1478 3
add.u64 %r1327,%frame,164;
.loc 1 1479 3
add.u64 %r1328,%frame,138;
add.u64 %r1329,%frame,140;
add.u64 %r1330,%frame,166;
add.u64 %r1331,%frame,162;
add.u64 %r1332,%frame,210;
add.u64 %r1333,%frame,188;
add.u64 %r1334,%frame,104;
add.u64 %r1335,%frame,208;
add.u64 %r1336,%frame,340;
mov.u64 %r1337,%r1332;
$L536:
.loc 1 3064 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r96;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1291;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call ediv,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
mov.u64 %r147,%r1302;
mov.u64 %r244,%r1302;
mov.u64 %r241,%r1295;
$L489:
.loc 1 483 10
ld.u16 %r614,[%r241];
st.u16 [%r244],%r614;
.loc 1 482 3
add.u64 %r241,%r241,2;
add.u64 %r244,%r244,2;
setp.ne.u64 %r615,%r271,%r241;
@ %r615 bra $L489;
.loc 1 3692 18
ld.u16 %r200,[%frame+338];
.loc 1 3693 14
cvt.u16.u32 %r617,%r200;
and.b16 %r616,%r617,32767;
cvt.u32.u16 %r618,%r616;
.loc 1 3693 5
add.u32 %r203,%r618,-16382;
.loc 1 3694 6
setp.gt.s32 %r619,%r203,0;
@ %r619 bra $L490;
mov.u64 %r217,%r1288;
.loc 1 467 10
mov.u16 %r620,0;
$L491:
st.u16 [%r217],%r620;
.loc 1 466 3
add.u64 %r217,%r217,2;
setp.ne.u64 %r621,%r1337,%r217;
@ %r621 bra $L491;
bra $L492;
$L490:
.loc 1 3700 5
mov.u32 %r622,144;
sub.u32 %r28,%r622,%r203;
mov.u64 %r239,%r1288;
mov.u64 %r248,%r1288;
mov.u64 %r246,%r1302;
$L493:
.loc 1 483 10
ld.u16 %r623,[%r246];
st.u16 [%r248],%r623;
.loc 1 482 3
add.u64 %r246,%r246,2;
add.u64 %r248,%r248,2;
setp.ne.u64 %r624,%r1336,%r246;
@ %r624 bra $L493;
.loc 1 3702 6
setp.le.s32 %r625,%r28,0;
@ %r625 bra $L494;
.loc 1 3706 9
setp.gt.s32 %r626,%r28,15;
@ %r626 bra $L495;
.loc 1 3705 5
mov.u64 %r309,%r1288;
bra $L496;
$L494:
mov.u64 %r349,%r1288;
.loc 1 3703 5
mov.u64 %r369,%r1295;
bra $L497;
$L495:
mov.u32 %r628,128;
sub.u32 %r627,%r628,%r203;
shr.u32 %r276,%r627,4;
add.u64 %r1293,%r1288,2;
cvt.u64.u32 %r630,%r276;
add.u64 %r631,%r630,%r630;
add.u64 %r313,%r1293,%r631;
.loc 1 3708 12
mov.u16 %r632,0;
$L498:
st.u16 [%r239],%r632;
.loc 1 3706 9
mov.u64 %r239,%r1293;
setp.ne.u64 %r633,%r1293,%r313;
@ ! %r633 bra $L733;
add.u64 %r1293,%r1293,2;
bra $L498;
$L733:
.loc 1 3708 9
add.u32 %r635,%r276,1;
cvt.u64.u32 %r636,%r635;
add.u64 %r637,%r636,%r636;
add.u64 %r309,%r1288,%r637;
mov.u32 %r638,128;
sub.u32 %r467,%r638,%r203;
.loc 1 3709 9
shl.b32 %r640,%r276,4;
sub.u32 %r28,%r467,%r640;
$L496:
.loc 1 3712 14
cvta.const.u64 %r642,bmask;
cvt.s64.s32 %r643,%r28;
add.u64 %r644,%r643,%r643;
add.u64 %r645,%r642,%r644;
.loc 1 3712 6
ld.u16 %r647,[%r309];
ld.u16 %r648,[%r645];
and.b16 %r646,%r647,%r648;
st.u16 [%r309],%r646;
$L492:
.loc 1 3716 6
cvt.u16.u32 %r649,%r200;
setp.ge.s16 %r650,%r649,0;
@ %r650 bra $L494;
mov.u64 %r490,%r1288;
mov.u64 %r302,%r1288;
$L533:
.loc 1 3720 7
ld.u16 %r651,[%r147];
ld.u16 %r652,[%r302];
setp.eq.u16 %r653,%r651,%r652;
@ %r653 bra $L499;
.loc 1 553 6
ld.u16 %r655,[%frame+208];
and.b16 %r654,%r655,32767;
setp.ne.u16 %r656,%r654,32767;
@ %r656 bra $L500;
mov.u64 %r58,%r1288;
$L501:
.loc 1 558 10
ld.u16 %r657,[%r58];
setp.ne.u16 %r658,%r657,0;
@ %r658 bra $L494;
.loc 1 556 3
add.u64 %r58,%r58,2;
setp.ne.u64 %r659,%r58,%r1335;
@ %r659 bra $L501;
mov.u64 %r72,%r1288;
$L502:
.loc 1 558 10
ld.u16 %r660,[%r72];
setp.ne.u16 %r661,%r660,0;
@ %r661 bra $L500;
.loc 1 556 3
add.u64 %r72,%r72,2;
setp.ne.u64 %r662,%r1335,%r72;
@ %r662 bra $L502;
bra $L494;
$L500:
.loc 1 1478 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1276;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1327;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 1479 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1288;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1328;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 1481 11
ld.u16 %r671,[%frame+164];
not.b16 %r670,%r671;
cvt.u32.u16 %r370,%r670;
st.u16 [%frame+164],%r670;
.loc 1 1484 7
ld.u16 %r280,[%frame+166];
.loc 1 1485 7
ld.u16 %r299,[%frame+140];
.loc 1 1486 6
sub.u64 %r282,%r280,%r299;
.loc 1 1487 6
setp.le.s64 %r673,%r282,0;
@ %r673 bra $L504;
mov.u64 %r485,%r1328;
mov.u64 %r478,%r1279;
mov.u64 %r498,%r1279;
mov.u64 %r497,%r1328;
$L505:
.loc 1 734 10
ld.u16 %r674,[%r497];
st.u16 [%r498],%r674;
.loc 1 733 3
add.u64 %r497,%r497,2;
add.u64 %r498,%r498,2;
setp.ne.u64 %r675,%r1331,%r497;
@ %r675 bra $L505;
.loc 1 736 6
mov.u16 %r676,0;
st.u16 [%frame+104],%r676;
mov.u64 %r284,%r1327;
$L507:
.loc 1 734 14
add.u64 %r284,%r284,2;
.loc 1 734 10
cvt.u16.u32 %r677,%r370;
st.u16 [%r485],%r677;
.loc 1 733 3
add.u64 %r485,%r485,2;
setp.eq.u64 %r678,%r1331,%r485;
@ %r678 bra $L506;
.loc 1 734 12
ld.u16 %r370,[%r284];
bra $L507;
$L506:
.loc 1 736 6
mov.u16 %r679,0;
st.u16 [%frame+162],%r679;
mov.u64 %r233,%r1327;
$L508:
.loc 1 734 10
ld.u16 %r680,[%r478];
st.u16 [%r233],%r680;
.loc 1 733 3
add.u64 %r478,%r478,2;
add.u64 %r233,%r233,2;
setp.ne.u64 %r681,%r478,%r1334;
@ %r681 bra $L508;
.loc 1 736 6
mov.u16 %r682,0;
st.u16 [%frame+188],%r682;
.loc 1 1493 10
sub.u64 %r282,%r299,%r280;
.loc 1 1492 11
ld.u16 %r299,[%frame+140];
$L504:
.loc 1 1496 6
setp.eq.u64 %r683,%r282,0;
@ %r683 bra $L509;
.loc 1 1498 10
setp.ge.s64 %r684,%r282,-145;
@ ! %r684 bra $L511;
cvt.u32.u64 %r686,%r282;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1327;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r686;
call (%value_in),eshift$part$0,(%out_arg1,%out_arg2);
ld.param.u32 %r688,[%value_in];
}
mov.u32 %r307,%r688;
bra $L512;
$L509:
add.u64 %r331,%frame,168;
add.u64 %r323,%frame,142;
mov.u64 %r285,%r1327;
$L515:
.loc 1 796 10
ld.u16 %r691,[%r331];
ld.u16 %r692,[%r323];
setp.eq.u16 %r693,%r691,%r692;
@ %r693 bra $L513;
.loc 1 802 6
setp.gt.u16 %r696,%r691,%r692;
@ %r696 bra $L514;
.loc 1 1495 8
mov.u32 %r307,0;
bra $L512;
$L513:
.loc 1 794 3
add.u64 %r331,%r331,2;
add.u64 %r323,%r323,2;
setp.ne.u64 %r697,%r1288,%r331;
@ %r697 bra $L515;
.loc 1 1510 7
ld.u16 %r698,[%frame+164];
ld.u16 %r699,[%frame+138];
setp.eq.u16 %r700,%r698,%r699;
@ %r700 bra $L516;
.loc 1 467 10
mov.u16 %r701,0;
$L517:
st.u16 [%r490],%r701;
.loc 1 466 3
add.u64 %r490,%r490,2;
setp.ne.u64 %r702,%r1332,%r490;
@ %r702 bra $L517;
bra $L494;
$L516:
.loc 1 1517 11
ld.u16 %r294,[%frame+140];
.loc 1 1517 7
setp.ne.u32 %r703,%r294,0;
@ %r703 bra $L518;
.loc 1 1517 21
ld.u16 %r704,[%frame+144];
setp.lt.s16 %r705,%r704,0;
@ %r705 bra $L518;
.loc 1 846 5
add.u64 %r330,%frame,162;
$L522:
.loc 1 851 11
ld.u16 %r325,[%r330];
.loc 1 851 10
cvt.u16.u32 %r706,%r325;
setp.ge.s16 %r707,%r706,0;
@ %r707 bra $L519;
.loc 1 852 7
cvt.u16.u32 %r709,%r294;
or.b16 %r708,%r709,1;
cvt.u32.u16 %r294,%r708;
$L519:
.loc 1 853 10
cvt.u16.u32 %r710,%r325;
add.u16 %r711,%r710,%r710;
.loc 1 854 10
cvt.u16.u32 %r713,%r294;
and.b16 %r712,%r713,2;
setp.ne.u16 %r714,%r712,0;
@ %r714 bra $L520;
.loc 1 853 10
st.u16 [%r330],%r711;
bra $L521;
$L520:
.loc 1 855 5
or.b16 %r716,%r711,1;
st.u16 [%r330],%r716;
$L521:
.loc 1 856 12
cvt.u16.u32 %r718,%r294;
add.u16 %r719,%r718,%r718;
cvt.u32.u16 %r294,%r719;
.loc 1 857 7
add.u64 %r330,%r330,-2;
.loc 1 849 3
setp.ne.u64 %r722,%r330,%r1329;
@ %r722 bra $L522;
bra $L511;
$L518:
add.u64 %r48,%frame,140;
$L526:
.loc 1 1525 11
ld.u16 %r725,[%r48];
setp.eq.u16 %r726,%r725,0;
@ %r726 bra $L524;
.loc 1 1528 9
add.u64 %r299,%r299,1;
.loc 1 1529 5
bra $L525;
$L524:
.loc 1 1523 4
add.u64 %r48,%r48,2;
setp.ne.u64 %r727,%r1331,%r48;
@ %r727 bra $L526;
$L525:
.loc 1 1532 12
st.u16 [%frame+140],%r299;
.loc 1 1533 4
bra $L511;
$L514:
mov.u64 %r471,%r1328;
mov.u64 %r54,%r1279;
.loc 1 802 6
mov.u64 %r171,%r1279;
mov.u64 %r172,%r1328;
$L527:
.loc 1 734 10
ld.u16 %r728,[%r172];
st.u16 [%r171],%r728;
.loc 1 733 3
add.u64 %r172,%r172,2;
add.u64 %r171,%r171,2;
setp.ne.u64 %r729,%r1331,%r172;
@ %r729 bra $L527;
.loc 1 736 6
mov.u16 %r730,0;
st.u16 [%frame+104],%r730;
mov.u64 %r40,%r1327;
$L528:
.loc 1 734 10
ld.u16 %r731,[%r40];
st.u16 [%r471],%r731;
.loc 1 733 3
add.u64 %r40,%r40,2;
add.u64 %r471,%r471,2;
setp.ne.u64 %r732,%r40,%r1333;
@ %r732 bra $L528;
.loc 1 736 6
mov.u16 %r733,0;
st.u16 [%frame+162],%r733;
$L529:
.loc 1 734 10
ld.u16 %r734,[%r54];
st.u16 [%r285],%r734;
.loc 1 733 3
add.u64 %r54,%r54,2;
add.u64 %r285,%r285,2;
setp.ne.u64 %r735,%r1334,%r54;
@ %r735 bra $L529;
.loc 1 736 6
mov.u16 %r736,0;
st.u16 [%frame+188],%r736;
.loc 1 1495 8
mov.u32 %r307,0;
$L512:
.loc 1 1542 6
ld.u16 %r737,[%frame+164];
ld.u16 %r738,[%frame+138];
setp.ne.u16 %r739,%r737,%r738;
@ %r739 bra $L645;
.loc 1 960 9
mov.u32 %r496,0;
.loc 1 959 5
mov.u64 %r344,%r1331;
.loc 1 958 5
add.u64 %r343,%frame,188;
$L531:
.loc 1 963 11
ld.u16 %r740,[%r343];
.loc 1 963 34
ld.u16 %r741,[%r344];
.loc 1 963 32
add.u64 %r742,%r740,%r741;
.loc 1 963 55
cvt.u64.u32 %r743,%r496;
.loc 1 963 9
add.u64 %r340,%r742,%r743;
.loc 1 964 10
shr.u64 %r744,%r340,16;
cvt.u32.u64 %r746,%r744;
and.b32 %r496,%r746,1;
.loc 1 968 12
st.u16 [%r344],%r340;
.loc 1 969 7
add.u64 %r343,%r343,-2;
.loc 1 970 7
add.u64 %r344,%r344,-2;
.loc 1 961 3
setp.ne.u64 %r749,%r343,%r1330;
@ %r749 bra $L531;
.loc 1 1545 14
mov.u32 %r308,0;
bra $L532;
$L645:
.loc 1 988 9
mov.u32 %r75,0;
.loc 1 986 5
add.u64 %r356,%frame,188;
.loc 1 987 5
mov.u64 %r357,%r1331;
$L530:
.loc 1 991 11
ld.u16 %r750,[%r357];
.loc 1 991 55
cvt.u64.u32 %r751,%r75;
.loc 1 991 9
sub.u64 %r752,%r750,%r751;
.loc 1 991 34
ld.u16 %r753,[%r356];
.loc 1 991 9
sub.u64 %r353,%r752,%r753;
.loc 1 992 10
shr.u64 %r754,%r353,16;
cvt.u32.u64 %r756,%r754;
and.b32 %r75,%r756,1;
.loc 1 996 12
st.u16 [%r357],%r353;
.loc 1 997 7
add.u64 %r356,%r356,-2;
.loc 1 998 7
add.u64 %r357,%r357,-2;
.loc 1 989 3
setp.ne.u64 %r759,%r357,%r1329;
@ %r759 bra $L530;
.loc 1 1550 14
mov.u32 %r308,1;
$L532:
.loc 1 1552 3
mov.u32 %r764,64;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1328;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r307;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r308;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r299;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r764;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%frame;
call emdnorm,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
}
$L511:
.loc 1 1555 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1328;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
call emovo$constprop$0,(%out_arg1,%out_arg2);
}
bra $L494;
$L499:
.loc 1 3718 7
add.u64 %r147,%r147,2;
add.u64 %r302,%r302,2;
setp.ne.u64 %r771,%r147,%r1326;
@ %r771 bra $L533;
bra $L494;
$L497:
.loc 1 3068 11
ld.u16 %r772,[%r369];
ld.u16 %r773,[%r349];
setp.ne.u16 %r774,%r772,%r773;
@ %r774 bra $L534;
.loc 1 3066 4
add.u64 %r369,%r369,2;
add.u64 %r349,%r349,2;
setp.ne.u64 %r775,%r1274,%r369;
@ %r775 bra $L497;
mov.u64 %r392,%r1291;
mov.u64 %r378,%r1295;
$L535:
.loc 1 483 10
ld.u16 %r776,[%r378];
st.u16 [%r392],%r776;
.loc 1 482 3
add.u64 %r378,%r378,2;
add.u64 %r392,%r392,2;
setp.ne.u64 %r777,%r271,%r378;
@ %r777 bra $L535;
.loc 1 3072 10
add.u32 %r135,%r135,%r101;
$L534:
.loc 1 3074 6
add.u64 %r96,%r96,20;
.loc 1 3075 6
shr.u32 %r778,%r101,1;
cvt.u16.u32 %r779,%r778;
cvt.u32.u16 %r101,%r779;
.loc 1 3077 7
setp.ne.u64 %r781,%r96,%r1283;
@ %r781 bra $L536;
.loc 1 3080 17
ld.u16 %r783,[%frame+234];
ld.u16 %r784,[%frame+286];
add.u16 %r782,%r783,%r784;
add.u16 %r785,%r782,-16526;
st.u16 [%frame+234],%r785;
add.u64 %r401,%r1291,20;
mov.u64 %r418,%r1297;
$L537:
.loc 1 483 10
ld.u16 %r786,[%r444];
st.u16 [%r418],%r786;
.loc 1 482 3
add.u64 %r444,%r444,2;
add.u64 %r418,%r418,2;
setp.ne.u64 %r787,%r401,%r444;
@ %r787 bra $L537;
mov.u64 %r452,%r1295;
mov.u32 %r492,0;
cvta.const.u64 %r109,eone;
$L539:
.loc 1 483 14
add.u64 %r109,%r109,2;
.loc 1 483 10
cvt.u16.u32 %r788,%r492;
st.u16 [%r452],%r788;
.loc 1 482 3
add.u64 %r452,%r452,2;
setp.eq.u64 %r789,%r271,%r452;
@ %r789 bra $L646;
.loc 1 483 12
ld.u16 %r492,[%r109];
bra $L539;
$L541:
.loc 1 3088 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1291;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r793,[%value_in];
}
.loc 1 3088 7
setp.gt.s32 %r794,%r793,0;
@ %r794 bra $L540;
.loc 1 3090 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1291;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1291;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call ediv,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
.loc 1 3091 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1295;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call emul,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
.loc 1 3092 14
add.u32 %r135,%r135,%r113;
$L540:
.loc 1 3094 6
shr.u32 %r807,%r113,1;
cvt.u16.u32 %r808,%r807;
cvt.u32.u16 %r113,%r808;
.loc 1 3095 7
setp.eq.u64 %r810,%r111,%r1281;
@ ! %r810 bra $L734;
add.u64 %r1290,%frame,214;
bra $L483;
$L734:
.loc 1 3097 6
add.u64 %r111,%r111,20;
bra $L538;
$L646:
.loc 1 3084 9
mov.u32 %r113,4096;
.loc 1 3085 9
cvta.const.u64 %r111,etens;
add.u64 %r1281,%r111,240;
$L538:
.loc 1 3086 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1281;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1291;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r815,[%value_in];
}
.loc 1 3086 13
setp.le.s32 %r816,%r815,0;
@ %r816 bra $L541;
add.u64 %r1290,%frame,214;
bra $L483;
$L487:
.loc 1 3103 10
ld.u16 %r817,[%frame+286];
setp.ne.u16 %r818,%r817,0;
@ %r818 bra $L542;
.loc 1 3105 10
ld.u16 %r819,[%frame+284];
setp.lt.s16 %r820,%r819,0;
@ %r820 bra $L647;
.loc 1 3011 9
mov.u32 %r135,0;
cvta.const.u64 %r1281,etens+240;
$L544:
.loc 1 3107 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1281;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1297;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1297;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call emul,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
.loc 1 3108 14
add.u32 %r135,%r135,-1;
.loc 1 3105 10
ld.u16 %r828,[%frame+284];
setp.ge.s16 %r829,%r828,0;
@ %r829 bra $L544;
add.u64 %r1288,%frame,190;
add.u64 %r1290,%frame,214;
bra $L543;
$L542:
.loc 1 3113 4
add.u64 %r1288,%frame,190;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1297;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
call emovi,(%out_arg1,%out_arg2);
}
.loc 1 3011 9
mov.u32 %r135,0;
add.u64 %r1290,%frame,214;
add.u64 %r1338,%frame,216;
add.u64 %r1339,%frame,192;
add.u64 %r1340,%frame,240;
$L552:
.loc 1 3116 11
ld.u16 %r835,[%frame+214];
and.b16 %r834,%r835,7;
setp.ne.u16 %r836,%r834,0;
@ %r836 bra $L545;
mov.u64 %r262,%r1288;
mov.u64 %r258,%r1338;
mov.u64 %r269,%r1338;
mov.u64 %r464,%r1288;
$L546:
.loc 1 734 10
ld.u16 %r837,[%r464];
st.u16 [%r269],%r837;
.loc 1 733 3
add.u64 %r464,%r464,2;
add.u64 %r269,%r269,2;
setp.ne.u64 %r838,%r1290,%r464;
@ %r838 bra $L546;
.loc 1 736 6
mov.u16 %r839,0;
st.u16 [%frame+240],%r839;
.loc 1 3120 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1338;
call eshdn1,(%out_arg1);
}
.loc 1 3121 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1338;
call eshdn1,(%out_arg1);
}
.loc 1 960 9
mov.u32 %r235,0;
.loc 1 959 5
add.u64 %r368,%frame,240;
.loc 1 958 5
mov.u64 %r367,%r1290;
$L547:
.loc 1 963 11
ld.u16 %r844,[%r367];
.loc 1 963 34
ld.u16 %r845,[%r368];
.loc 1 963 32
add.u64 %r846,%r844,%r845;
.loc 1 963 55
cvt.u64.u32 %r847,%r235;
.loc 1 963 9
add.u64 %r364,%r846,%r847;
.loc 1 964 10
shr.u64 %r848,%r364,16;
cvt.u32.u64 %r850,%r848;
and.b32 %r235,%r850,1;
.loc 1 968 12
st.u16 [%r368],%r364;
.loc 1 969 7
add.u64 %r367,%r367,-2;
.loc 1 970 7
add.u64 %r368,%r368,-2;
.loc 1 961 3
setp.ne.u64 %r853,%r367,%r1339;
@ %r853 bra $L547;
.loc 1 3123 13
ld.u16 %r1296,[%frame+218];
add.u16 %r1296,%r1296,3;
st.u16 [%frame+218],%r1296;
.loc 1 3124 14
ld.u16 %r856,[%frame+220];
setp.ne.u16 %r857,%r856,0;
@ %r857 bra $L548;
$L550:
.loc 1 3129 11
ld.u16 %r858,[%frame+240];
setp.ne.u16 %r859,%r858,0;
@ ! %r859 bra $L735;
bra $L545;
$L548:
.loc 1 3126 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1338;
call eshdn1,(%out_arg1);
}
.loc 1 3127 10
ld.u16 %r1296,[%frame+218];
add.u16 %r1296,%r1296,1;
st.u16 [%frame+218],%r1296;
.loc 1 3124 14
ld.u16 %r864,[%frame+220];
setp.ne.u16 %r865,%r864,0;
@ %r865 bra $L548;
bra $L550;
$L735:
.loc 1 3131 11
setp.gt.u16 %r867,%r1296,16382;
@ %r867 bra $L545;
$L551:
.loc 1 734 10
ld.u16 %r868,[%r258];
st.u16 [%r262],%r868;
.loc 1 733 3
add.u64 %r258,%r258,2;
add.u64 %r262,%r262,2;
setp.ne.u64 %r869,%r258,%r1340;
@ %r869 bra $L551;
.loc 1 736 6
mov.u16 %r870,0;
st.u16 [%frame+214],%r870;
.loc 1 3134 14
add.u32 %r135,%r135,-1;
.loc 1 3114 4
setp.ne.u32 %r871,%r135,-43;
@ %r871 bra $L552;
$L545:
.loc 1 3136 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1288;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1297;
call emovo$constprop$0,(%out_arg1,%out_arg2);
}
bra $L543;
$L647:
.loc 1 3011 9
mov.u32 %r135,0;
add.u64 %r1288,%frame,190;
add.u64 %r1290,%frame,214;
$L543:
mov.u64 %r253,%r1288;
add.u64 %r316,%r1297,20;
mov.u64 %r247,%r1297;
$L553:
.loc 1 483 10
ld.u16 %r876,[%r247];
st.u16 [%r253],%r876;
.loc 1 482 3
add.u64 %r247,%r247,2;
add.u64 %r253,%r253,2;
setp.ne.u64 %r877,%r247,%r316;
@ %r877 bra $L553;
mov.u64 %r263,%r1295;
mov.u32 %r400,0;
cvta.const.u64 %r139,eone;
$L555:
.loc 1 483 14
add.u64 %r139,%r139,2;
.loc 1 483 10
cvt.u16.u32 %r878,%r400;
st.u16 [%r263],%r878;
.loc 1 482 3
add.u64 %r263,%r263,2;
setp.eq.u64 %r879,%r271,%r263;
@ %r879 bra $L648;
.loc 1 483 12
ld.u16 %r400,[%r139];
bra $L555;
$L558:
.loc 1 3145 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r267;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r883,[%value_in];
}
.loc 1 3145 7
setp.lt.s32 %r884,%r883,0;
@ %r884 bra $L556;
.loc 1 3147 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r266;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1288;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call emul,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
.loc 1 3148 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r266;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1295;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call emul,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
.loc 1 3149 14
add.u32 %r135,%r135,%r143;
$L556:
.loc 1 3151 6
shr.u32 %r898,%r143,31;
add.u32 %r899,%r898,%r143;
shr.s32 %r143,%r899,1;
.loc 1 3152 7
add.u64 %r317,%r317,20;
setp.eq.u64 %r901,%r317,260;
@ ! %r901 bra $L554;
bra $L557;
$L648:
mov.u64 %r317,0;
.loc 1 3138 9
mov.u32 %r143,-4096;
cvta.const.u64 %r1275,etens;
cvta.const.u64 %r1287,emtens;
$L554:
add.u64 %r267,%r1287,%r317;
add.u64 %r266,%r1275,%r317;
.loc 1 3143 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1276;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r907,[%value_in];
}
.loc 1 3143 13
setp.gt.s32 %r908,%r907,0;
@ %r908 bra $L558;
$L557:
.loc 1 3157 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1295;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1276;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call ediv,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
add.u64 %r1279,%frame,80;
$L483:
.loc 1 3161 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1295;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
call emovi,(%out_arg1,%out_arg2);
}
mov.u64 %r79,%r1288;
mov.u64 %r493,%r1288;
$L559:
.loc 1 734 10
ld.u16 %r919,[%r493];
st.u16 [%r491],%r919;
.loc 1 733 3
add.u64 %r493,%r493,2;
add.u64 %r491,%r491,2;
setp.ne.u64 %r920,%r1290,%r493;
@ %r920 bra $L559;
.loc 1 736 6
mov.u16 %r921,0;
st.u16 [%frame+266],%r921;
.loc 1 3163 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1297;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1288;
call emovi,(%out_arg1,%out_arg2);
}
mov.u64 %r56,%r1297;
$L560:
.loc 1 734 10
ld.u16 %r926,[%r79];
st.u16 [%r56],%r926;
.loc 1 733 3
add.u64 %r79,%r79,2;
add.u64 %r56,%r56,2;
setp.ne.u64 %r927,%r79,%r1290;
@ %r927 bra $L560;
.loc 1 736 6
mov.u16 %r928,0;
st.u16 [%frame+292],%r928;
.loc 1 3165 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1295;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1297;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call eiremain,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 3166 9
ld.u16 %r151,[%frame+76];
.loc 1 3167 9
setp.eq.u64 %r934,%r151,0;
@ ! %r934 bra $L562;
cvta.const.u64 %r1277,ezero;
.loc 1 846 5
add.u64 %r1321,%frame,292;
add.u64 %r1322,%frame,270;
add.u64 %r1323,%r1297,24;
add.u64 %r1324,%frame,240;
add.u64 %r1325,%frame,218;
bra $L561;
$L650:
.loc 1 847 8
mov.u32 %r376,0;
.loc 1 846 5
mov.u64 %r377,%r1321;
$L566:
.loc 1 851 11
ld.u16 %r371,[%r377];
.loc 1 851 10
cvt.u16.u32 %r935,%r371;
setp.ge.s16 %r936,%r935,0;
@ %r936 bra $L563;
.loc 1 852 7
cvt.u16.u32 %r938,%r376;
or.b16 %r937,%r938,1;
cvt.u32.u16 %r376,%r937;
$L563:
.loc 1 853 10
cvt.u16.u32 %r939,%r371;
add.u16 %r940,%r939,%r939;
.loc 1 854 10
cvt.u16.u32 %r942,%r376;
and.b16 %r941,%r942,2;
setp.ne.u16 %r943,%r941,0;
@ %r943 bra $L564;
.loc 1 853 10
st.u16 [%r377],%r940;
bra $L565;
$L564:
.loc 1 855 5
or.b16 %r945,%r940,1;
st.u16 [%r377],%r945;
$L565:
.loc 1 856 12
cvt.u16.u32 %r947,%r376;
add.u16 %r948,%r947,%r947;
cvt.u32.u16 %r376,%r948;
.loc 1 857 7
add.u64 %r377,%r377,-2;
.loc 1 849 3
setp.ne.u64 %r951,%r377,%r1322;
@ %r951 bra $L566;
add.u64 %r94,%frame,216;
mov.u64 %r99,%r1297;
$L567:
.loc 1 734 10
ld.u16 %r952,[%r99];
st.u16 [%r94],%r952;
.loc 1 733 3
add.u64 %r99,%r99,2;
add.u64 %r94,%r94,2;
setp.ne.u64 %r953,%r1323,%r99;
@ %r953 bra $L567;
.loc 1 736 6
mov.u16 %r954,0;
st.u16 [%frame+240],%r954;
.loc 1 847 8
mov.u32 %r407,0;
.loc 1 846 5
mov.u64 %r408,%r1324;
$L571:
.loc 1 851 11
ld.u16 %r402,[%r408];
.loc 1 851 10
cvt.u16.u32 %r955,%r402;
setp.ge.s16 %r956,%r955,0;
@ %r956 bra $L568;
.loc 1 852 7
cvt.u16.u32 %r958,%r407;
or.b16 %r957,%r958,1;
cvt.u32.u16 %r407,%r957;
$L568:
.loc 1 853 10
cvt.u16.u32 %r959,%r402;
add.u16 %r960,%r959,%r959;
.loc 1 854 10
cvt.u16.u32 %r962,%r407;
and.b16 %r961,%r962,2;
setp.ne.u16 %r963,%r961,0;
@ %r963 bra $L569;
.loc 1 853 10
st.u16 [%r408],%r960;
bra $L570;
$L569:
.loc 1 855 5
or.b16 %r965,%r960,1;
st.u16 [%r408],%r965;
$L570:
.loc 1 856 12
cvt.u16.u32 %r967,%r407;
add.u16 %r968,%r967,%r967;
cvt.u32.u16 %r407,%r968;
.loc 1 857 7
add.u64 %r408,%r408,-2;
.loc 1 849 3
setp.ne.u64 %r971,%r408,%r1325;
@ %r971 bra $L571;
.loc 1 847 8
mov.u32 %r398,0;
.loc 1 846 5
mov.u64 %r399,%r1324;
$L575:
.loc 1 851 11
ld.u16 %r393,[%r399];
.loc 1 851 10
cvt.u16.u32 %r972,%r393;
setp.ge.s16 %r973,%r972,0;
@ %r973 bra $L572;
.loc 1 852 7
cvt.u16.u32 %r975,%r398;
or.b16 %r974,%r975,1;
cvt.u32.u16 %r398,%r974;
$L572:
.loc 1 853 10
cvt.u16.u32 %r976,%r393;
add.u16 %r977,%r976,%r976;
.loc 1 854 10
cvt.u16.u32 %r979,%r398;
and.b16 %r978,%r979,2;
setp.ne.u16 %r980,%r978,0;
@ %r980 bra $L573;
.loc 1 853 10
st.u16 [%r399],%r977;
bra $L574;
$L573:
.loc 1 855 5
or.b16 %r982,%r977,1;
st.u16 [%r399],%r982;
$L574:
.loc 1 856 12
cvt.u16.u32 %r984,%r398;
add.u16 %r985,%r984,%r984;
cvt.u32.u16 %r398,%r985;
.loc 1 857 7
add.u64 %r399,%r399,-2;
.loc 1 849 3
setp.ne.u64 %r988,%r399,%r1325;
@ %r988 bra $L575;
.loc 1 960 9
mov.u32 %r504,0;
.loc 1 959 5
mov.u64 %r391,%r1321;
.loc 1 958 5
mov.u64 %r390,%r1324;
$L576:
.loc 1 963 11
ld.u16 %r989,[%r390];
.loc 1 963 34
ld.u16 %r990,[%r391];
.loc 1 963 32
add.u64 %r991,%r989,%r990;
.loc 1 963 55
cvt.u64.u32 %r992,%r504;
.loc 1 963 9
add.u64 %r387,%r991,%r992;
.loc 1 964 10
shr.u64 %r993,%r387,16;
cvt.u32.u64 %r995,%r993;
and.b32 %r504,%r995,1;
.loc 1 968 12
st.u16 [%r391],%r387;
.loc 1 969 7
add.u64 %r390,%r390,-2;
.loc 1 970 7
add.u64 %r391,%r391,-2;
.loc 1 961 3
setp.ne.u64 %r998,%r390,%r1325;
@ %r998 bra $L576;
.loc 1 3174 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1295;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1297;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call eiremain,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 3175 13
ld.u16 %r154,[%frame+76];
.loc 1 3176 13
add.u32 %r135,%r135,-1;
.loc 1 3167 9
setp.ne.u64 %r1004,%r154,0;
@ %r1004 bra $L649;
$L561:
.loc 1 3167 27
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1297;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1277;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r1008,[%value_in];
}
.loc 1 3167 23
setp.ne.u32 %r1009,%r1008,0;
@ %r1009 bra $L650;
bra $L562;
$L649:
mov.u64 %r151,%r154;
$L562:
.loc 1 3179 6
setp.ne.u32 %r1010,%r90,0;
.loc 1 3182 10
selp.u32 %r71,45,32,%r1010;
cvt.u32.u32 %r1011,%r71;
st.u8 [%frame+80],%r1011;
.loc 1 3184 6
setp.ne.u32 %r1012,%r510,3;
@ %r1012 bra $L652;
.loc 1 3185 11
add.u32 %r157,%r53,%r135;
bra $L578;
$L652:
.loc 1 2990 9
mov.u32 %r157,%r53;
$L578:
min.s32 %r155,%r157,42;
.loc 1 3192 6
setp.ne.u64 %r1013,%r151,10;
@ %r1013 bra $L579;
.loc 1 3194 12
mov.u32 %r1014,49;
st.u8 [%frame+81],%r1014;
.loc 1 3195 12
mov.u32 %r1015,46;
st.u8 [%frame+82],%r1015;
.loc 1 3201 13
add.u32 %r135,%r135,1;
.loc 1 3196 10
setp.le.s32 %r1016,%r157,0;
@ %r1016 bra $L580;
.loc 1 3198 9
mov.u32 %r1017,48;
st.u8 [%frame+83],%r1017;
.loc 1 3199 10
add.u32 %r155,%r155,-1;
.loc 1 3198 6
add.u64 %r124,%frame,84;
bra $L640;
$L580:
.loc 1 3202 10
setp.ne.u32 %r1018,%r157,0;
@ %r1018 bra $L653;
.loc 1 3195 9
add.u64 %r124,%frame,83;
bra $L640;
$L579:
.loc 1 3210 27
cvt.u16.u64 %r1021,%r151;
add.u16 %r1020,%r1021,48;
.loc 1 3210 12
cvt.u32.u16 %r1022,%r1020;
st.u8 [%frame+81],%r1022;
.loc 1 3211 12
mov.u32 %r1023,46;
st.u8 [%frame+82],%r1023;
.loc 1 3214 3
setp.lt.s32 %r1024,%r157,0;
@ %r1024 bra $L583;
.loc 1 3211 9
add.u64 %r124,%frame,83;
$L640:
mov.u64 %r132,%r124;
add.u64 %r1291,%frame,216;
add.u64 %r1294,%frame,240;
add.u64 %r1299,%frame,292;
add.u64 %r1298,%frame,270;
add.u64 %r1301,%r1297,24;
add.u64 %r1292,%frame,218;
.loc 1 847 8
mov.u32 %r1320,0;
.loc 1 3214 3
cvt.u32.u64 %r1100,%r132;
$L598:
mov.u64 %r447,%r132;
.loc 1 847 8
mov.u32 %r415,%r1320;
.loc 1 846 5
mov.u64 %r416,%r1299;
$L587:
.loc 1 851 11
ld.u16 %r410,[%r416];
.loc 1 851 10
cvt.u16.u32 %r1025,%r410;
setp.ge.s16 %r1026,%r1025,0;
@ %r1026 bra $L584;
.loc 1 852 7
cvt.u16.u32 %r1028,%r415;
or.b16 %r1027,%r1028,1;
cvt.u32.u16 %r415,%r1027;
$L584:
.loc 1 853 10
cvt.u16.u32 %r1029,%r410;
add.u16 %r1030,%r1029,%r1029;
.loc 1 854 10
cvt.u16.u32 %r1032,%r415;
and.b16 %r1031,%r1032,2;
setp.ne.u16 %r1033,%r1031,0;
@ %r1033 bra $L585;
.loc 1 853 10
st.u16 [%r416],%r1030;
bra $L586;
$L585:
.loc 1 855 5
or.b16 %r1035,%r1030,1;
st.u16 [%r416],%r1035;
$L586:
.loc 1 856 12
cvt.u16.u32 %r1037,%r415;
add.u16 %r1038,%r1037,%r1037;
cvt.u32.u16 %r415,%r1038;
.loc 1 857 7
add.u64 %r416,%r416,-2;
.loc 1 849 3
setp.ne.u64 %r1041,%r416,%r1298;
@ %r1041 bra $L587;
mov.u64 %r145,%r1291;
mov.u64 %r148,%r1297;
$L588:
.loc 1 734 10
ld.u16 %r1042,[%r148];
st.u16 [%r145],%r1042;
.loc 1 733 3
add.u64 %r148,%r148,2;
add.u64 %r145,%r145,2;
setp.ne.u64 %r1043,%r1301,%r148;
@ %r1043 bra $L588;
.loc 1 736 6
mov.u16 %r1044,0;
st.u16 [%frame+240],%r1044;
.loc 1 847 8
mov.u32 %r442,%r1320;
.loc 1 846 5
mov.u64 %r443,%r1294;
$L592:
.loc 1 851 11
ld.u16 %r437,[%r443];
.loc 1 851 10
cvt.u16.u32 %r1045,%r437;
setp.ge.s16 %r1046,%r1045,0;
@ %r1046 bra $L589;
.loc 1 852 7
cvt.u16.u32 %r1048,%r442;
or.b16 %r1047,%r1048,1;
cvt.u32.u16 %r442,%r1047;
$L589:
.loc 1 853 10
cvt.u16.u32 %r1049,%r437;
add.u16 %r1050,%r1049,%r1049;
.loc 1 854 10
cvt.u16.u32 %r1052,%r442;
and.b16 %r1051,%r1052,2;
setp.ne.u16 %r1053,%r1051,0;
@ %r1053 bra $L590;
.loc 1 853 10
st.u16 [%r443],%r1050;
bra $L591;
$L590:
.loc 1 855 5
or.b16 %r1055,%r1050,1;
st.u16 [%r443],%r1055;
$L591:
.loc 1 856 12
cvt.u16.u32 %r1057,%r442;
add.u16 %r1058,%r1057,%r1057;
cvt.u32.u16 %r442,%r1058;
.loc 1 857 7
add.u64 %r443,%r443,-2;
.loc 1 849 3
setp.ne.u64 %r1061,%r443,%r1292;
@ %r1061 bra $L592;
.loc 1 847 8
mov.u32 %r435,%r1320;
.loc 1 846 5
mov.u64 %r436,%r1294;
$L596:
.loc 1 851 11
ld.u16 %r430,[%r436];
.loc 1 851 10
cvt.u16.u32 %r1062,%r430;
setp.ge.s16 %r1063,%r1062,0;
@ %r1063 bra $L593;
.loc 1 852 7
cvt.u16.u32 %r1065,%r435;
or.b16 %r1064,%r1065,1;
cvt.u32.u16 %r435,%r1064;
$L593:
.loc 1 853 10
cvt.u16.u32 %r1066,%r430;
add.u16 %r1067,%r1066,%r1066;
.loc 1 854 10
cvt.u16.u32 %r1069,%r435;
and.b16 %r1068,%r1069,2;
setp.ne.u16 %r1070,%r1068,0;
@ %r1070 bra $L594;
.loc 1 853 10
st.u16 [%r436],%r1067;
bra $L595;
$L594:
.loc 1 855 5
or.b16 %r1072,%r1067,1;
st.u16 [%r436],%r1072;
$L595:
.loc 1 856 12
cvt.u16.u32 %r1074,%r435;
add.u16 %r1075,%r1074,%r1074;
cvt.u32.u16 %r435,%r1075;
.loc 1 857 7
add.u64 %r436,%r436,-2;
.loc 1 849 3
setp.ne.u64 %r1078,%r436,%r1292;
@ %r1078 bra $L596;
.loc 1 960 9
mov.u32 %r506,%r1320;
.loc 1 959 5
mov.u64 %r429,%r1299;
.loc 1 958 5
mov.u64 %r428,%r1294;
$L597:
.loc 1 963 11
ld.u16 %r1079,[%r428];
.loc 1 963 34
ld.u16 %r1080,[%r429];
.loc 1 963 32
add.u64 %r1081,%r1079,%r1080;
.loc 1 963 55
cvt.u64.u32 %r1082,%r506;
.loc 1 963 9
add.u64 %r425,%r1081,%r1082;
.loc 1 964 10
shr.u64 %r1083,%r425,16;
cvt.u32.u64 %r1085,%r1083;
and.b32 %r506,%r1085,1;
.loc 1 968 12
st.u16 [%r429],%r425;
.loc 1 969 7
add.u64 %r428,%r428,-2;
.loc 1 970 7
add.u64 %r429,%r429,-2;
.loc 1 961 3
setp.ne.u64 %r1088,%r428,%r1292;
@ %r1088 bra $L597;
.loc 1 3222 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1295;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1297;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call eiremain,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 3223 26
ld.u16 %r166,[%frame+76];
add.u64 %r132,%r132,1;
mov.u64 %r37,%r132;
.loc 1 3223 35
cvt.u16.u32 %r1096,%r166;
add.u16 %r1095,%r1096,48;
.loc 1 3223 12
cvt.u32.u16 %r1097,%r1095;
st.u8 [%r447],%r1097;
.loc 1 3214 3
cvt.u32.u64 %r1099,%r132;
sub.u32 %r1098,%r1099,%r1100;
setp.le.s32 %r1101,%r1098,%r155;
@ %r1101 bra $L598;
bra $L599;
$L583:
.loc 1 3225 16
ld.u16 %r166,[%frame+76];
add.u64 %r447,%frame,82;
.loc 1 3211 9
add.u64 %r37,%frame,83;
$L599:
.loc 1 3225 9
cvt.u16.u32 %r1102,%r166;
cvt.u64.u16 %r173,%r1102;
.loc 1 3229 6
setp.le.s64 %r1103,%r173,4;
@ %r1103 bra $L582;
.loc 1 3232 10
setp.ne.u64 %r1104,%r173,5;
@ %r1104 bra $L600;
.loc 1 3234 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1297;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1295;
call emovo$constprop$0,(%out_arg1,%out_arg2);
}
.loc 1 3235 8
cvta.const.u64 %r1110,ezero;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1295;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1110;
call (%value_in),ecmp,(%out_arg1,%out_arg2);
ld.param.u32 %r1112,[%value_in];
}
.loc 1 3235 7
setp.ne.u32 %r1113,%r1112,0;
@ %r1113 bra $L600;
.loc 1 3237 7
setp.lt.s32 %r1114,%r155,0;
@ %r1114 bra $L582;
.loc 1 3237 33
ld.s8 %r175,[%r37+-2];
.loc 1 3237 42
cvt.u16.u32 %r1116,%r175;
set.u32.eq.u16 %r1117,%r1116,46;
cvt.s64.s32 %r1115,%r1117;
.loc 1 3237 22
add.u64 %r1120,%r447,%r1115;
.loc 1 3237 18
ld.u8 %r1349,[%r1120+-1];
mov.u16 %r1123,%r1349;
and.b16 %r1122,%r1123,1;
cvt.u32.u16 %r1124,%r1122;
cvt.s32.s8 %r1126,%r1124;
cvt.u16.u32 %r1125,%r1126;
setp.eq.u16 %r1127,%r1125,0;
@ ! %r1127 bra $L736;
bra $L582;
$L600:
.loc 1 3242 7
add.u64 %r182,%r37,-2;
ld.u8 %r1349,[%r37+-2];
mov.u16 %r1130,%r1349;
and.b16 %r1129,%r1130,127;
cvt.u32.u16 %r1131,%r1129;
cvt.s32.s8 %r184,%r1131;
.loc 1 3245 10
setp.ge.s32 %r1132,%r155,0;
@ %r1132 bra $L602;
.loc 1 3248 7
mov.u32 %r1133,49;
st.u8 [%r37+-2],%r1133;
.loc 1 3249 10
add.u32 %r135,%r135,1;
.loc 1 3250 4
bra $L582;
$L602:
.loc 1 3271 7
mov.u32 %r1319,48;
$L606:
.loc 1 3252 15
cvt.u16.u32 %r1134,%r184;
setp.ne.u16 %r1135,%r1134,46;
@ %r1135 bra $L603;
.loc 1 3255 6
ld.s8 %r187,[%r182+-1];
.loc 1 3256 6
add.u32 %r188,%r187,1;
.loc 1 3259 7
setp.gt.s32 %r1136,%r188,57;
@ %r1136 bra $L604;
.loc 1 3257 9
st.u8 [%r182+-1],%r188;
bra $L582;
$L604:
.loc 1 3261 14
add.u32 %r135,%r135,1;
.loc 1 3262 11
mov.u32 %r1137,49;
st.u8 [%r182+-1],%r1137;
bra $L582;
$L603:
.loc 1 3267 9
add.u32 %r190,%r184,1;
.loc 1 3269 10
setp.gt.s32 %r1138,%r190,57;
@ %r1138 bra $L605;
.loc 1 3268 12
st.u8 [%r182],%r190;
bra $L582;
$L605:
.loc 1 3271 7
st.u8 [%r182],%r1319;
.loc 1 3242 7
add.u64 %r182,%r182,-1;
ld.u8 %r1349,[%r182];
mov.u16 %r1142,%r1349;
and.b16 %r1141,%r1142,127;
cvt.u32.u16 %r1143,%r1141;
cvt.s32.s8 %r184,%r1143;
bra $L606;
$L653:
.loc 1 3195 9
add.u64 %r447,%frame,83;
$L582:
.loc 1 3282 3
st.u32 [%stack],%r135;
cvta.const.u64 %r1145,$LC3;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r447;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1145;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1146,[%value_in];
}
$L485:
.loc 1 3285 15
st.u32 [%frame+4],%r78;
.loc 1 3286 17
st.u32 [%frame+16],%r135;
.loc 1 532 6
ld.u16 %r1149,[%frame+312];
and.b16 %r1148,%r1149,32767;
setp.ne.u16 %r1150,%r1148,32767;
@ %r1150 bra $L607;
mov.u64 %r205,%r1300;
add.u64 %r158,%frame,312;
mov.u64 %r185,%r205;
$L609:
.loc 1 558 10
ld.u16 %r1151,[%r185];
setp.ne.u16 %r1152,%r1151,0;
@ %r1152 bra $L608;
.loc 1 556 3
add.u64 %r185,%r185,2;
setp.ne.u64 %r1153,%r158,%r185;
@ %r1153 bra $L609;
bra $L610;
$L608:
.loc 1 558 10
ld.u16 %r1154,[%r205];
setp.ne.u16 %r1155,%r1154,0;
@ %r1155 bra $L610;
.loc 1 556 3
add.u64 %r205,%r205,2;
setp.ne.u64 %r1156,%r158,%r205;
@ %r1156 bra $L608;
bra $L607;
$L610:
.loc 1 2848 14
mov.u32 %r1157,9999;
st.u32 [%r512],%r1157;
.loc 1 2849 7
bra $L611;
$L607:
.loc 1 2851 26
add.u32 %r1158,%r135,1;
.loc 1 2851 10
st.u32 [%r512],%r1158;
.loc 1 2857 10
ld.s8 %r30,[%frame+80];
.loc 1 2857 9
setp.eq.u32 %r1159,%r30,0;
@ %r1159 bra $L654;
.loc 1 2856 5
mov.u64 %r61,%r1279;
$L616:
.loc 1 2859 10
cvt.u16.u32 %r1160,%r30;
setp.ne.u16 %r1161,%r1160,46;
@ %r1161 bra $L613;
.loc 1 2868 9
ld.s8 %r1163,[%r61];
cvt.u16.u32 %r1162,%r1163;
setp.ne.u16 %r1164,%r1162,0;
@ %r1164 bra $L614;
bra $L615;
$L613:
.loc 1 2861 7
add.u64 %r61,%r61,1;
.loc 1 2857 10
ld.s8 %r30,[%r61];
.loc 1 2857 9
setp.ne.u32 %r1165,%r30,0;
@ %r1165 bra $L616;
bra $L615;
$L614:
add.u64 %r1278,%r61,1;
mov.u64 %r216,%r1278;
$L617:
.loc 1 2870 10
ld.s8 %r31,[%r216];
cvt.u32.u32 %r1166,%r31;
st.u8 [%r61],%r1166;
.loc 1 2871 7
mov.u64 %r61,%r1278;
.loc 1 2868 9
add.u64 %r216,%r216,1;
setp.ne.u32 %r1167,%r31,0;
@ ! %r1167 bra $L615;
add.u64 %r1278,%r1278,1;
bra $L617;
$L618:
.loc 1 2878 5
add.u64 %r61,%r61,-1;
.loc 1 2877 9
ld.s8 %r1170,[%r61];
cvt.u16.u32 %r1169,%r1170;
set.u32.ne.u16 %r1171,%r1169,69;
neg.s32 %r1172,%r1171;
.loc 1 2877 20
set.u32.gt.u64 %r1175,%r61,%r1279;
neg.s32 %r1176,%r1175;
cvt.u16.u32 %r1178,%r1172;
cvt.u16.u32 %r1179,%r1176;
and.b16 %r1177,%r1178,%r1179;
cvt.u32.u16 %r1180,%r1177;
cvt.u16.u8 %r1181,%r1180;
setp.ne.u16 %r1182,%r1181,0;
@ %r1182 bra $L618;
bra $L612;
$L615:
setp.gt.u64 %r1184,%r61,%r1279;
@ %r1184 bra $L618;
bra $L612;
$L654:
.loc 1 2856 5
mov.u64 %r61,%r1279;
$L612:
.loc 1 2879 6
mov.u32 %r1185,0;
st.u8 [%r61],%r1185;
$L611:
.loc 1 2885 10
ld.s8 %r62,[%frame+80];
.loc 1 2885 20
cvt.u16.u32 %r1187,%r62;
set.u32.eq.u16 %r1188,%r1187,32;
neg.s32 %r1189,%r1188;
set.u32.eq.u16 %r1192,%r1187,45;
neg.s32 %r1193,%r1192;
cvt.u16.u32 %r1195,%r1189;
cvt.u16.u32 %r1196,%r1193;
or.b16 %r1194,%r1195,%r1196;
.loc 1 2885 9
cvt.u32.u16 %r1197,%r1194;
cvt.u16.u8 %r1198,%r1197;
setp.eq.u16 %r1199,%r1198,0;
@ %r1199 bra $L655;
.loc 1 2884 5
mov.u64 %r65,%r1279;
$L620:
.loc 1 2886 5
add.u64 %r65,%r65,1;
.loc 1 2885 10
ld.s8 %r62,[%r65];
.loc 1 2885 20
cvt.u16.u32 %r1201,%r62;
set.u32.eq.u16 %r1202,%r1201,32;
neg.s32 %r1203,%r1202;
set.u32.eq.u16 %r1206,%r1201,45;
neg.s32 %r1207,%r1206;
cvt.u16.u32 %r1209,%r1203;
cvt.u16.u32 %r1210,%r1207;
or.b16 %r1208,%r1209,%r1210;
.loc 1 2885 9
cvt.u32.u16 %r1211,%r1208;
cvt.u16.u8 %r1212,%r1211;
setp.ne.u16 %r1213,%r1212,0;
@ %r1213 bra $L620;
bra $L619;
$L655:
.loc 1 2884 5
mov.u64 %r65,%r1279;
$L619:
mov.u64 %r218,%r1279;
$L622:
mov.u64 %r63,%r218;
.loc 1 2890 20
add.u64 %r65,%r65,1;
.loc 1 2890 16
cvt.u32.u32 %r1214,%r62;
st.u8 [%r218],%r1214;
.loc 1 2890 9
add.u64 %r218,%r218,1;
setp.eq.u32 %r1215,%r62,0;
@ %r1215 bra $L621;
.loc 1 2890 18
ld.s8 %r62,[%r65];
bra $L622;
$L621:
.loc 1 2902 10
ld.s8 %r451,[%r63+-1];
.loc 1 2895 6
setp.eq.u32 %r1216,%r510,2;
@ %r1216 bra $L623;
max.s32 %r57,%r53,%r135;
.loc 1 2902 9
cvt.u16.u32 %r1217,%r451;
setp.eq.u16 %r1218,%r1217,48;
@ %r1218 bra $L624;
bra $L625;
$L657:
.loc 1 2902 26
mov.u64 %r25,1;
$L627:
add.u64 %r228,%r63,-2;
.loc 1 2903 12
mov.u32 %r1219,0;
$L628:
add.u64 %r63,%r63,-1;
st.u8 [%r63],%r1219;
.loc 1 2902 9
ld.s8 %r1221,[%r228];
cvt.u16.u32 %r1220,%r1221;
setp.eq.u16 %r1222,%r1220,48;
@ %r1222 bra $L626;
bra $L625;
$L624:
.loc 1 2902 43
cvt.s64.s32 %r25,%r57;
.loc 1 2902 33
sub.u64 %r1224,%r63,%r1279;
.loc 1 2902 26
setp.lt.s64 %r1225,%r25,%r1224;
@ %r1225 bra $L627;
bra $L625;
$L626:
add.u64 %r228,%r228,-1;
.loc 1 2902 33
sub.u64 %r1227,%r63,%r1279;
.loc 1 2902 26
setp.lt.s64 %r1228,%r25,%r1227;
@ %r1228 bra $L628;
$L625:
.loc 1 2907 6
setp.ne.u32 %r1229,%r510,3;
@ %r1229 bra $L629;
.loc 1 2907 30
add.u32 %r1230,%r53,%r135;
.loc 1 2907 17
setp.ge.s32 %r1231,%r1230,0;
@ %r1231 bra $L630;
.loc 1 2910 10
mov.u32 %r1232,0;
st.u8 [%frame+80],%r1232;
.loc 1 2911 14
mov.u32 %r1233,0;
st.u32 [%r512],%r1233;
.loc 1 2909 9
mov.u64 %r63,%r1279;
bra $L631;
$L636:
.loc 1 2923 33
mov.u32 %r1234,0;
st.u32 [%r508+104],%r1234;
.loc 1 2924 48
cvt.s64.s32 %r345,%r55;
.loc 1 2923 3
setp.le.u64 %r1235,%r345,31;
@ %r1235 bra $L656;
mov.u32 %r219,1;
.loc 1 2922 5
mov.u32 %r64,4;
$L633:
.loc 1 2925 29
mov.u32 %r44,%r219;
.loc 1 2924 56
add.u32 %r64,%r64,%r64;
.loc 1 2923 3
add.u32 %r219,%r44,1;
.loc 1 2924 44
cvt.s64.s32 %r1237,%r64;
add.u64 %r1238,%r1237,28;
.loc 1 2923 3
setp.le.u64 %r1239,%r1238,%r345;
@ %r1239 bra $L633;
st.u32 [%r508+104],%r44;
bra $L632;
$L656:
mov.u32 %r44,%r1234;
$L632:
.loc 1 2926 28
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r508;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r44;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r1242,[%value_in];
}
setp.ne.u64 %r1243,%r1242,0;
@ %r1243 bra $L634;
cvta.const.u64 %r1247,$LC4;
mov.u32 %r1245,2926;
cvta.const.u64 %r1244,$LC5;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1244;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1245;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1242;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r1247;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L634:
.loc 1 2926 26
st.u64 [%r508+96],%r1242;
.loc 1 2930 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1242;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1279;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r1251,[%value_in];
}
.loc 1 2932 6
setp.eq.u64 %r1252,%r514,0;
@ %r1252 bra $L466;
.loc 1 2933 24
sub.u64 %r1254,%r63,%r1279;
.loc 1 2933 19
add.u64 %r1255,%r1242,%r1254;
.loc 1 2933 10
st.u64 [%r514],%r1255;
.loc 1 2935 10
bra $L466;
$L630:
.loc 1 2918 16
ld.u32 %r1257,[%r512];
add.u32 %r511,%r511,%r1257;
$L631:
.loc 1 2918 7
add.u32 %r55,%r511,3;
bra $L636;
$L629:
.loc 1 2920 7
add.u32 %r55,%r511,9;
bra $L636;
$L480:
.loc 1 3028 6
cvt.u16.u32 %r1258,%r82;
setp.eq.u16 %r1259,%r1258,32767;
@ ! %r1259 bra $L737;
bra $L637;
$L474:
.loc 1 2995 7
add.u64 %r1279,%frame,80;
cvta.const.u64 %r1261,$LC6;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1261;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1263,[%value_in];
}
.loc 1 2996 13
mov.u32 %r135,9999;
.loc 1 2997 7
bra $L485;
$L623:
.loc 1 2902 9
cvt.u16.u32 %r1265,%r451;
setp.eq.u16 %r1266,%r1265,48;
@ %r1266 bra $L639;
bra $L629;
$L736:
.loc 1 3242 7
add.u64 %r182,%r37,-2;
and.b16 %r1267,%r1116,127;
cvt.u32.u16 %r1269,%r1267;
cvt.s32.s8 %r184,%r1269;
bra $L602;
$L639:
.loc 1 2902 33
sub.u64 %r1271,%r63,%r1279;
.loc 1 2902 26
setp.gt.s64 %r1272,%r1271,1;
@ %r1272 bra $L657;
bra $L629;
$L466:
.loc 1 2936 1
mov.u64 %value,%r1242;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _ldcheck
.visible .func (.param .u32 %value_out) _ldcheck (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .f64 %r31;
.reg .u64 %r34;
.reg .u16 %r35;
.reg .u16 %r36;
.reg .pred %r37;
.reg .u16 %r38;
.reg .pred %r39;
.reg .pred %r40;
mov.u64 %r30,%ar0;
.loc 1 2954 8
ld.f64 %r31,[%r30];
st.f64 [%frame+32],%r31;
.loc 1 2958 3
add.u64 %r34,%frame,32;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call e53toe$isra$0,(%out_arg1,%out_arg2);
}
.loc 1 2965 6
ld.u16 %r36,[%frame+18];
and.b16 %r35,%r36,32767;
setp.ne.u16 %r37,%r35,32767;
@ %r37 bra $L741;
mov.u64 %r25,%frame;
add.u64 %r27,%frame,18;
$L740:
.loc 1 558 10
ld.u16 %r38,[%r25];
setp.ne.u16 %r39,%r38,0;
@ %r39 bra $L742;
.loc 1 556 3
add.u64 %r25,%r25,2;
setp.ne.u64 %r40,%r25,%r27;
@ %r40 bra $L740;
.loc 1 2971 14
mov.u32 %r29,2;
bra $L738;
$L741:
.loc 1 2974 12
mov.u32 %r29,0;
bra $L738;
$L742:
.loc 1 2969 9
mov.u32 %r29,1;
$L738:
.loc 1 2975 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-linkr.o/  1612277262  0     0     100666  1572      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _link_r
.visible .func (.param .u32 %value_out) _link_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/linkr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: link
.extern .func (.param .u32 %value_out) link (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _link_r
.visible .func (.param .u32 %value_out) _link_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 52 9
mov.u32 %r27,0;
st.global.u32 [errno],%r27;
.loc 1 53 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),link,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 53 6
setp.ne.u32 %r31,%r30,-1;
@ %r31 bra $L1;
.loc 1 53 47
ld.global.u32 %r22,[errno];
.loc 1 53 38
setp.eq.u32 %r32,%r22,0;
@ %r32 bra $L1;
.loc 1 54 17
st.u32 [%r24],%r22;
$L1:
.loc 1 56 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-llabs.o/  1612277262  0     0     100666  549       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: llabs
.visible .func (.param .u64 %value_out) llabs (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/llabs.c"
// BEGIN GLOBAL FUNCTION DEF: llabs
.visible .func (.param .u64 %value_out) llabs (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
mov.u64 %r23,%ar0;
.loc 1 59 21
abs.s64 %value,%r23;
.loc 1 60 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-lldiv.o/  1612277262  0     0     100666  1344      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: lldiv
.visible .func lldiv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/lldiv.c"
// BEGIN GLOBAL FUNCTION DEF: lldiv
.visible .func lldiv (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u32 %r40;
.reg .u16 %r41;
.reg .pred %r42;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
mov.u64 %r29,%ar2;
.loc 1 101 22
div.s64 %r22,%r28,%r29;
.loc 1 102 21
rem.s64 %r23,%r28,%r29;
.loc 1 103 17
shr.u64 %r31,%r23,63;
.loc 1 103 5
not.b64 %r33,%r28;
shr.u64 %r34,%r33,63;
.loc 1 103 17
cvt.u16.u64 %r38,%r31;
cvt.u16.u64 %r39,%r34;
and.b16 %r37,%r38,%r39;
cvt.u32.u16 %r40,%r37;
cvt.u16.u8 %r41,%r40;
setp.eq.u16 %r42,%r41,0;
@ %r42 bra $L2;
.loc 1 104 14
add.u64 %r22,%r22,1;
.loc 1 105 14
sub.u64 %r23,%r23,%r29;
$L2:
.loc 1 107 9
st.u64 [%r27],%r22;
st.u64 [%r27+8],%r23;
.loc 1 108 1
ret;
}
lib_a-locale.o/ 1612277262  0     0     100666  5779      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _setlocale_r
.visible .func (.param .u64 %value_out) _setlocale_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/locale/locale.c"
// BEGIN GLOBAL FUNCTION DECL: __locale_mb_cur_max
.visible .func (.param .u32 %value_out) __locale_mb_cur_max;
// BEGIN GLOBAL FUNCTION DECL: setlocale
.visible .func (.param .u64 %value_out) setlocale (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_b
.extern .const .align 1 .u8 _ctype_b[];
// BEGIN GLOBAL FUNCTION DECL: strcmp
.extern .func (.param .u32 %value_out) strcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __ascii_wctomb
.extern .func (.param .u32 %value_out) __ascii_wctomb (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ascii_mbtowc
.extern .func (.param .u32 %value_out) __ascii_mbtowc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[6] =
{80,79,83,73,88,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[1] =
{0 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[2] =
{67,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[2] =
{46,0 };
// BEGIN GLOBAL VAR DEF: __global_locale
.visible .global .align 8 .u64 __global_locale[53] =
{67,0,0,0,67,0,0,0,67,0,0,0,67,0,0,0,67,0,0,0,67,0,0,0,67,0,0,0,__ascii_wctomb,__ascii_mbtowc,0,generic(_ctype_b) + 127,generic($LC3),generic($LC2),generic($LC2),generic($LC2),generic($LC2),generic($LC2),generic($LC2),generic($LC2),generic($LC2),generic($LC2),9187201950435737471,140185576636287,20628226808283137,0,0,0,20628226808283136,0,0,0,0 };
// BEGIN GLOBAL VAR DEF: _PathLocale
.visible .global .align 8 .u64 _PathLocale[1];
// BEGIN GLOBAL FUNCTION DEF: _setlocale_r
.visible .func (.param .u64 %value_out) _setlocale_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .pred %r29;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r36;
.reg .pred %r37;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .u64 %r43;
mov.u64 %r28,%ar2;
.loc 1 298 6
setp.ne.u64 %r29,%r28,0;
@ %r29 bra $L2;
$L4:
.loc 1 304 10
cvta.const.u64 %r25,$LC0;
bra $L1;
$L2:
.loc 1 300 11
cvta.const.u64 %r31,$LC1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r32,[%value_in];
}
.loc 1 300 10
setp.eq.u32 %r33,%r32,0;
@ %r33 bra $L4;
.loc 1 300 39
cvta.const.u64 %r43,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r43;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r36,[%value_in];
}
.loc 1 300 36
setp.eq.u32 %r37,%r36,0;
@ %r37 bra $L4;
.loc 1 301 7
cvta.const.u64 %r39,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r40,[%value_in];
}
.loc 1 301 4
setp.eq.u32 %r41,%r40,0;
@ %r41 bra $L4;
.loc 1 302 16
mov.u64 %r25,0;
$L1:
.loc 1 438 1
mov.u64 %value,%r25;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __locale_mb_cur_max
.visible .func (.param .u32 %value_out) __locale_mb_cur_max
{
.reg .u32 %value;
.reg .u64 %r25;
.loc 1 981 45
cvta.global.u64 %r25,__global_locale;
ld.s8 %value,[%r25+352];
.loc 1 983 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: setlocale
.visible .func (.param .u64 %value_out) setlocale (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .pred %r32;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u64 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u64 %r42;
mov.u64 %r27,%ar1;
.loc 1 298 6
setp.ne.u64 %r28,%r27,0;
@ %r28 bra $L16;
$L18:
.loc 1 304 10
cvta.const.u64 %r25,$LC0;
bra $L15;
$L16:
.loc 1 300 11
cvta.const.u64 %r30,$LC1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r31,[%value_in];
}
.loc 1 300 10
setp.eq.u32 %r32,%r31,0;
@ %r32 bra $L18;
.loc 1 300 39
cvta.const.u64 %r42,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r35,[%value_in];
}
.loc 1 300 36
setp.eq.u32 %r36,%r35,0;
@ %r36 bra $L18;
.loc 1 301 7
cvta.const.u64 %r38,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r39,[%value_in];
}
.loc 1 301 4
setp.eq.u32 %r40,%r39,0;
@ %r40 bra $L18;
.loc 1 302 16
mov.u64 %r25,0;
$L15:
.loc 1 1006 1
mov.u64 %value,%r25;
st.param.u64 [%value_out],%value;
ret;
}

/538            1612277262  0     0     100666  1447      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __localeconv_l
.visible .func (.param .u64 %value_out) __localeconv_l (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/locale/localeconv.c"
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.visible .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: localeconv
.visible .func (.param .u64 %value_out) localeconv;
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DEF: __localeconv_l
.visible .func (.param .u64 %value_out) __localeconv_l (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
mov.u64 %r23,%ar0;
.loc 1 8 17
add.u64 %value,%r23,256;
.loc 1 51 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _localeconv_r
.visible .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.loc 1 59 10
cvta.global.u64 %value,__global_locale+256;
.loc 1 60 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: localeconv
.visible .func (.param .u64 %value_out) localeconv
{
.reg .u64 %value;
.loc 1 66 10
cvta.global.u64 %value,__global_locale+256;
.loc 1 67 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-lrand48.o/1612277262  0     0     100666  2165      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _lrand48_r
.visible .func (.param .u64 %value_out) _lrand48_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/lrand48.c"
// BEGIN GLOBAL FUNCTION DECL: lrand48
.visible .func (.param .u64 %value_out) lrand48;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __dorand48
.extern .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _lrand48_r
.visible .func (.param .u64 %value_out) _lrand48_r (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r31;
.reg .u64 %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u16 %r41;
mov.u64 %r31,%ar0;
.loc 1 20 17
add.u64 %r34,%r31,240;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 17
ld.u16 %r36,[%r31+244];
.loc 1 21 50
shl.b64 %r37,%r36,15;
.loc 1 22 39
ld.u16 %r38,[%r31+242];
shr.u32 %r39,%r38,1;
cvt.u16.u32 %r41,%r39;
cvt.u64.u16 %r40,%r41;
.loc 1 21 57
add.u64 %value,%r37,%r40;
.loc 1 23 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: lrand48
.visible .func (.param .u64 %value_out) lrand48
{
.reg .u64 %value;
.reg .u64 %r22;
.reg .u64 %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u16 %r41;
.loc 1 29 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 20 17
add.u64 %r34,%r22,240;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 17
ld.u16 %r36,[%r22+244];
.loc 1 21 50
shl.b64 %r37,%r36,15;
.loc 1 22 39
ld.u16 %r38,[%r22+242];
shr.u32 %r39,%r38,1;
cvt.u16.u32 %r41,%r39;
cvt.u64.u16 %r40,%r41;
.loc 1 21 57
add.u64 %value,%r37,%r40;
.loc 1 30 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-lseekr.o/ 1612277262  0     0     100666  1793      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _lseek_r
.visible .func (.param .u64 %value_out) _lseek_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/reent/lseekr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: lseek
.extern .func (.param .u64 %value_out) lseek (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _lseek_r
.visible .func (.param .u64 %value_out) _lseek_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u64 %r32;
.reg .pred %r33;
.reg .pred %r34;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u32 %r27,%ar3;
.loc 1 48 9
mov.u32 %r28,0;
st.global.u32 [errno],%r28;
.loc 1 49 14
{
.param .u64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r27;
call (%value_in),lseek,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r32,[%value_in];
}
.loc 1 49 6
setp.ne.u64 %r33,%r32,-1;
@ %r33 bra $L1;
.loc 1 49 64
ld.global.u32 %r22,[errno];
.loc 1 49 55
setp.eq.u32 %r34,%r22,0;
@ %r34 bra $L1;
.loc 1 50 17
st.u32 [%r24],%r22;
$L1:
.loc 1 52 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-makebuf.o/1612277262  0     0     100666  7224      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __smakebuf_r
.visible .func __smakebuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/makebuf.c"
// BEGIN GLOBAL FUNCTION DECL: __swhatbuf_r
.visible .func (.param .u32 %value_out) __swhatbuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _fstat_r
.extern .func (.param .u32 %value_out) _fstat_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _cleanup_r
.extern .func _cleanup_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _isatty_r
.extern .func (.param .u32 %value_out) _isatty_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __smakebuf_r
.visible .func __smakebuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[112];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u64 %r27;
.reg .u32 %r29;
.reg .u32 %r41;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u16 %r53;
.reg .u16 %r54;
.reg .pred %r55;
.reg .u32 %r56;
.reg .u16 %r57;
.reg .pred %r58;
.reg .u32 %r62;
.reg .pred %r63;
.reg .u16 %r64;
.reg .u16 %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r70;
.reg .u64 %r74;
.reg .pred %r75;
.reg .u16 %r76;
.reg .u16 %r77;
.reg .pred %r78;
.reg .u16 %r79;
.reg .u16 %r81;
.reg .u32 %r82;
.reg .u64 %r83;
.reg .u16 %r84;
.reg .u16 %r85;
.reg .pred %r87;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .pred %r92;
.reg .u16 %r93;
.reg .u16 %r94;
.reg .u16 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u16 %r98;
mov.u64 %r51,%ar0;
mov.u64 %r52,%ar1;
.loc 1 46 9
ld.s16 %r22,[%r52+16];
.loc 1 46 6
cvt.u16.u32 %r54,%r22;
and.b16 %r53,%r54,2;
setp.eq.u16 %r55,%r53,0;
@ %r55 bra $L2;
.loc 1 48 32
add.u64 %r23,%r52,119;
.loc 1 48 30
st.u64 [%r52],%r23;
.loc 1 48 21
st.u64 [%r52+24],%r23;
.loc 1 49 21
mov.u32 %r56,1;
st.u32 [%r52+32],%r56;
bra $L1;
$L2:
.loc 1 96 9
ld.s16 %r41,[%r52+18];
.loc 1 96 6
cvt.u16.u32 %r57,%r41;
setp.lt.s16 %r58,%r57,0;
@ %r58 bra $L4;
.loc 1 96 24
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r51;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r41;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),_fstat_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r62,[%value_in];
}
.loc 1 96 21
setp.ge.s32 %r63,%r62,0;
@ %r63 bra $L5;
ld.s16 %r22,[%r52+16];
$L4:
.loc 1 101 10
cvt.u16.u32 %r65,%r22;
and.b16 %r64,%r65,128;
setp.ne.u16 %r66,%r64,0;
@ %r66 bra $L10;
.loc 1 99 19
mov.u32 %r47,0;
.loc 1 104 18
mov.u64 %r50,1024;
.loc 1 101 10
mov.u32 %r48,%r47;
bra $L6;
$L5:
.loc 1 109 17
ld.u32 %r68,[%frame+4];
and.b32 %r67,%r68,61440;
set.u32.eq.u32 %r70,%r67,8192;
neg.s32 %r47,%r70;
.loc 1 123 12
mov.u64 %r50,1024;
.loc 1 124 10
mov.u32 %r48,2048;
bra $L6;
$L10:
.loc 1 99 19
mov.u32 %r47,0;
.loc 1 102 18
mov.u64 %r50,64;
mov.u32 %r48,%r47;
$L6:
.loc 1 53 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r51;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r50;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r74,[%value_in];
}
.loc 1 53 6
setp.ne.u64 %r75,%r74,0;
@ %r75 bra $L7;
.loc 1 55 10
ld.u16 %r77,[%r52+16];
and.b16 %r76,%r77,512;
setp.ne.u16 %r78,%r76,0;
@ %r78 bra $L1;
.loc 1 57 15
and.b16 %r79,%r77,-4;
or.b16 %r81,%r79,2;
st.u16 [%r52+16],%r81;
.loc 1 58 29
add.u64 %r27,%r52,119;
.loc 1 58 27
st.u64 [%r52],%r27;
.loc 1 58 18
st.u64 [%r52+24],%r27;
.loc 1 59 18
mov.u32 %r82,1;
st.u32 [%r52+32],%r82;
bra $L1;
$L7:
.loc 1 64 22
mov.u64 %r83,_cleanup_r;
st.u64 [%r51+88],%r83;
.loc 1 65 18
ld.u16 %r85,[%r52+16];
or.b16 %r84,%r85,128;
cvt.s32.s16 %r29,%r84;
st.u16 [%r52+16],%r84;
.loc 1 66 30
st.u64 [%r52],%r74;
.loc 1 66 21
st.u64 [%r52+24],%r74;
.loc 1 67 21
st.u32 [%r52+32],%r50;
.loc 1 68 10
setp.eq.u32 %r87,%r47,0;
@ %r87 bra $L8;
.loc 1 68 25
ld.s16 %r90,[%r52+18];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r51;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r90;
call (%value_in),_isatty_r,(%out_arg1,%out_arg2);
ld.param.u32 %r91,[%value_in];
}
.loc 1 68 22
setp.ne.u32 %r92,%r91,0;
@ %r92 bra $L9;
.loc 1 70 18
ld.s16 %r29,[%r52+16];
bra $L8;
$L9:
.loc 1 69 13
ld.u16 %r94,[%r52+16];
and.b16 %r93,%r94,-4;
or.b16 %r95,%r93,1;
cvt.s32.s16 %r29,%r95;
$L8:
.loc 1 70 18
cvt.u16.u32 %r97,%r48;
cvt.u16.u32 %r98,%r29;
or.b16 %r96,%r97,%r98;
st.u16 [%r52+16],%r96;
$L1:
.loc 1 72 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __swhatbuf_r
.visible .func (.param .u32 %value_out) __swhatbuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[112];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u32 %r29;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u16 %r36;
.reg .pred %r37;
.reg .u32 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .pred %r41;
.reg .u32 %r45;
.reg .pred %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .u32 %r50;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u64 %r54;
mov.u64 %r32,%ar0;
mov.u64 %r33,%ar1;
mov.u64 %r34,%ar2;
mov.u64 %r35,%ar3;
.loc 1 96 9
ld.s16 %r22,[%r33+18];
.loc 1 96 6
cvt.u16.u32 %r36,%r22;
setp.ge.s16 %r37,%r36,0;
@ %r37 bra $L15;
$L18:
ld.s16 %r29,[%r33+16];
.loc 1 99 19
mov.u32 %r38,0;
st.u32 [%r35],%r38;
.loc 1 101 10
cvt.u16.u32 %r40,%r29;
and.b16 %r39,%r40,128;
setp.ne.u16 %r41,%r39,0;
@ %r41 bra $L16;
bra $L21;
$L15:
.loc 1 96 24
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r22;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),_fstat_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r45,[%value_in];
}
.loc 1 96 21
setp.lt.s32 %r46,%r45,0;
@ ! %r46 bra $L22;
bra $L18;
$L16:
.loc 1 102 18
mov.u64 %r47,64;
st.u64 [%r34],%r47;
mov.u32 %r31,%r38;
bra $L14;
$L21:
.loc 1 104 18
mov.u64 %r48,1024;
st.u64 [%r34],%r48;
mov.u32 %r31,%r38;
bra $L14;
$L22:
.loc 1 109 17
ld.u32 %r50,[%frame+4];
and.b32 %r49,%r50,61440;
set.u32.eq.u32 %r52,%r49,8192;
neg.s32 %r53,%r52;
.loc 1 109 15
st.u32 [%r35],%r53;
.loc 1 123 12
mov.u64 %r54,1024;
st.u64 [%r34],%r54;
.loc 1 124 10
mov.u32 %r31,2048;
$L14:
.loc 1 125 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
/558            1612277262  0     0     100666  183       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_mallocr
.visible .global .align 4 .u32 _dummy_mallocr[1] =
{1 };

lib_a-malloc.o/ 1612277262  0     0     100666  1120      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.visible .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
.file 1 "../../../../../../newlib/libc/machine/nvptx/malloc.c"
// BEGIN GLOBAL FUNCTION DECL: malloc
.extern .func (.param .u64 %value_out) malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __nvptx_malloc
.visible .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
mov.u64 %r25,%ar0;
.loc 1 24 20
add.u64 %r27,%r25,8;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
call (%value_in),malloc,(%out_arg1);
ld.param.u64 %r28,[%value_in];
}
.loc 1 25 6
setp.eq.u64 %r29,%r28,0;
@ %r29 bra $L3;
.loc 1 26 6
add.u64 %r24,%r28,8;
.loc 1 26 22
st.u64 [%r28],%r25;
bra $L1;
$L3:
mov.u64 %r24,%r28;
$L1:
.loc 1 29 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-mallocr.o/1612277262  0     0     100666  1545      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.visible .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../../newlib/libc/machine/nvptx/mallocr.c"
// BEGIN GLOBAL FUNCTION DECL: _free_r
.visible .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.extern .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __nvptx_free
.extern .func __nvptx_free (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _malloc_r
.visible .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r26;
mov.u64 %r24,%ar1;
.loc 1 20 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r26,[%value_in];
}
.loc 1 21 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _free_r
.visible .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
mov.u64 %r23,%ar1;
.loc 1 25 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __nvptx_free,(%out_arg1);
}
.loc 1 26 1
ret;
}

/577            1612277262  0     0     100666  183       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_mallocr
.visible .global .align 4 .u32 _dummy_mallocr[1] =
{1 };

lib_a-mblen.o/  1612277262  0     0     100666  1095      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: mblen
.visible .func (.param .u32 %value_out) mblen (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/mblen.c"
// BEGIN GLOBAL FUNCTION DEF: mblen
.visible .func (.param .u32 %value_out) mblen (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .pred %r26;
.reg .u16 %r27;
.reg .u32 %r28;
.reg .pred %r29;
.reg .pred %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 66 6
setp.eq.u64 %r26,%r24,0;
@ %r26 bra $L3;
.loc 1 66 17
ld.s8 %r28,[%r24];
cvt.u16.u32 %r27,%r28;
setp.eq.u16 %r29,%r27,0;
@ %r29 bra $L4;
.loc 1 68 6
setp.ne.u64 %r30,%r25,0;
.loc 1 69 12
selp.u32 %r23,1,-1,%r30;
bra $L1;
$L3:
.loc 1 67 12
cvt.u32.u64 %r23,%r24;
bra $L1;
$L4:
mov.u32 %r23,0;
$L1:
.loc 1 72 1
mov.u32 %value,%r23;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-mblen_r.o/1612277262  0     0     100666  1287      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _mblen_r
.visible .func (.param .u32 %value_out) _mblen_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/mblen_r.c"
// BEGIN GLOBAL FUNCTION DEF: _mblen_r
.visible .func (.param .u32 %value_out) _mblen_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .pred %r28;
.reg .u16 %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 61 6
setp.eq.u64 %r28,%r25,0;
@ %r28 bra $L3;
.loc 1 61 17
ld.s8 %r30,[%r25];
cvt.u16.u32 %r29,%r30;
setp.eq.u16 %r31,%r29,0;
@ %r31 bra $L4;
.loc 1 63 6
setp.ne.u64 %r32,%r26,0;
.loc 1 64 12
selp.u32 %r23,1,-1,%r32;
bra $L1;
$L3:
.loc 1 62 12
cvt.u32.u64 %r23,%r25;
bra $L1;
$L4:
mov.u32 %r23,0;
$L1:
.loc 1 67 1
mov.u32 %value,%r23;
st.param.u32 [%value_out],%value;
ret;
}

/597            1612277262  0     0     100666  1461      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: mbstowcs
.visible .func (.param .u64 %value_out) mbstowcs (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/mbstowcs.c"
// BEGIN GLOBAL FUNCTION DEF: mbstowcs
.visible .func (.param .u64 %value_out) mbstowcs (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .pred %r36;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
.loc 1 63 6
setp.eq.u64 %r34,%r33,0;
@ %r34 bra $L2;
mov.u64 %r25,%r31;
mov.u64 %r26,%r32;
add.u64 %r29,%r26,%r33;
.loc 1 61 7
mov.u32 %r24,0;
$L4:
.loc 1 65 22
ld.s8 %r23,[%r26];
.loc 1 65 20
st.u32 [%r25],%r23;
.loc 1 65 10
setp.ne.u32 %r35,%r23,0;
@ %r35 bra $L3;
.loc 1 71 10
cvt.s64.s32 %r33,%r24;
bra $L2;
$L3:
.loc 1 67 12
add.u32 %r24,%r24,1;
.loc 1 68 5
add.u64 %r25,%r25,4;
add.u64 %r26,%r26,1;
setp.ne.u64 %r36,%r26,%r29;
@ %r36 bra $L4;
.loc 1 71 10
cvt.s64.s32 %r33,%r24;
$L2:
.loc 1 73 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

/615            1612277262  0     0     100666  3059      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _mbstowcs_r
.visible .func (.param .u64 %value_out) _mbstowcs_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/mbstowcs_r.c"
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: __locale_mb_cur_max
.extern .func (.param .u32 %value_out) __locale_mb_cur_max;
// BEGIN GLOBAL FUNCTION DEF: _mbstowcs_r
.visible .func (.param .u64 %value_out) _mbstowcs_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .pred %r34;
.reg .u32 %r36;
.reg .u64 %r42;
.reg .u32 %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .pred %r46;
.reg .u64 %r47;
.reg .pred %r48;
.reg .pred %r49;
.reg .u64 %r51;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u64 %r30,%ar2;
mov.u64 %r31,%ar3;
mov.u64 %r32,%ar4;
.loc 1 16 6
setp.eq.u64 %r33,%r29,0;
@ %r33 bra $L7;
.loc 1 18 9
setp.eq.u64 %r34,%r31,0;
@ ! %r34 bra $L2;
bra $L8;
$L7:
.loc 1 17 7
mov.u64 %r31,1;
$L2:
mov.u64 %r27,0;
cvta.global.u64 %r51,__global_locale;
$L6:
.loc 1 20 15
ld.u64 %r22,[%r51+232];
.loc 1 20 37
{
.param .u32 %value_in;
call (%value_in),__locale_mb_cur_max;
ld.param.u32 %r36,[%value_in];
}
.loc 1 20 15
cvt.s64.s32 %r42,%r36;
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u64 %in_ar3,.param .u64 %in_ar4);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r42;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r32;
call (%value_in),%r22,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5),$LCT0;
ld.param.u32 %r43,[%value_in];
}
.loc 1 21 10
setp.ge.s32 %r44,%r43,0;
@ %r44 bra $L4;
.loc 1 23 19
mov.u32 %r45,0;
st.u32 [%r32],%r45;
.loc 1 24 11
mov.u64 %r27,-1;
bra $L1;
$L4:
.loc 1 26 15
setp.eq.u32 %r46,%r43,0;
@ %r46 bra $L1;
.loc 1 28 9
cvt.s64.s32 %r47,%r43;
add.u64 %r30,%r30,%r47;
.loc 1 29 7
add.u64 %r27,%r27,1;
.loc 1 30 10
setp.eq.u64 %r48,%r29,0;
@ %r48 bra $L6;
.loc 1 32 4
add.u64 %r29,%r29,4;
.loc 1 33 4
add.u64 %r31,%r31,-1;
.loc 1 18 9
setp.eq.u64 %r49,%r31,0;
@ ! %r49 bra $L6;
bra $L1;
$L8:
mov.u64 %r27,%r31;
$L1:
.loc 1 37 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-mbtowc.o/ 1612277262  0     0     100666  1352      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: mbtowc
.visible .func (.param .u32 %value_out) mbtowc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/mbtowc.c"
// BEGIN GLOBAL FUNCTION DEF: mbtowc
.visible .func (.param .u32 %value_out) mbtowc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .u16 %r33;
.reg .u32 %r34;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 74 6
setp.eq.u64 %r29,%r27,0;
@ %r29 bra $L4;
.loc 1 76 6
setp.eq.u64 %r30,%r28,0;
@ %r30 bra $L5;
.loc 1 79 22
ld.s8 %r24,[%r27];
.loc 1 78 6
setp.eq.u64 %r31,%r26,0;
@ %r31 bra $L3;
.loc 1 79 12
st.u32 [%r26],%r24;
$L3:
.loc 1 80 14
cvt.u16.u32 %r33,%r24;
set.u32.ne.u16 %r34,%r33,0;
neg.s32 %r25,%r34;
bra $L1;
$L4:
.loc 1 75 12
cvt.u32.u64 %r25,%r27;
bra $L1;
$L5:
.loc 1 77 12
mov.u32 %r25,-1;
$L1:
.loc 1 82 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}
/635            1612277262  0     0     100666  3381      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _mbtowc_r
.visible .func (.param .u32 %value_out) _mbtowc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/mbtowc_r.c"
// BEGIN GLOBAL FUNCTION DECL: __ascii_mbtowc
.visible .func (.param .u32 %value_out) __ascii_mbtowc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DEF: _mbtowc_r
.visible .func (.param .u32 %value_out) _mbtowc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .u64 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
mov.u64 %r28,%ar4;
.loc 1 17 10
cvta.global.u64 %r34,__global_locale;
ld.u64 %r36,[%r34+232];
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u64 %in_ar3,.param .u64 %in_ar4);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r28;
call (%value_in),%r36,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5),$LCT0;
ld.param.u32 %r35,[%value_in];
}
.loc 1 18 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ascii_mbtowc
.visible .func (.param .u32 %value_out) __ascii_mbtowc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .pred %r32;
.reg .pred %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .u16 %r37;
.reg .u32 %r38;
mov.u64 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u64 %r30,%ar3;
.loc 1 30 6
setp.ne.u64 %r32,%r28,0;
.loc 1 31 9
selp.u64 %r28,%r28,%frame,%r32;
.loc 1 33 6
setp.eq.u64 %r33,%r29,0;
@ %r33 bra $L5;
.loc 1 36 6
setp.eq.u64 %r34,%r30,0;
@ %r34 bra $L6;
.loc 1 47 10
ld.u8 %r35,[%r29];
st.u32 [%r28],%r35;
.loc 1 49 6
ld.u8 %r37,[%r29];
set.u32.ne.u16 %r38,%r37,0;
neg.s32 %r26,%r38;
bra $L2;
$L5:
.loc 1 34 12
cvt.u32.u64 %r26,%r29;
bra $L2;
$L6:
.loc 1 37 12
mov.u32 %r26,-2;
$L2:
.loc 1 53 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-memchr.o/ 1612277262  0     0     100666  3342      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: memchr
.visible .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/memchr.c"
// BEGIN GLOBAL FUNCTION DEF: memchr
.visible .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .u64 %r50;
.reg .pred %r51;
.reg .pred %r52;
.reg .pred %r53;
.reg .u16 %r54;
.reg .u16 %r55;
.reg .pred %r56;
.reg .u64 %r57;
.reg .pred %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .u16 %r70;
.reg .u16 %r71;
.reg .pred %r72;
.reg .pred %r73;
mov.u64 %r46,%ar0;
mov.u32 %r47,%ar1;
mov.u64 %r48,%ar2;
.loc 1 70 17
cvt.u32.u32 %r49,%r47;
cvt.u32.u8 %r39,%r49;
.loc 1 77 10
and.b64 %r50,%r46,7;
.loc 1 77 9
setp.eq.u64 %r51,%r50,0;
@ %r51 bra $L11;
.loc 1 79 18
add.u64 %r24,%r48,-1;
.loc 1 79 10
setp.eq.u64 %r52,%r48,0;
@ %r52 bra $L12;
.loc 1 81 10
cvt.u16.u32 %r55,%r39;
bra $L4;
$L5:
.loc 1 79 18
add.u64 %r24,%r24,-1;
.loc 1 79 10
setp.eq.u64 %r53,%r24,-1;
@ %r53 bra $L13;
$L4:
.loc 1 81 10
ld.u8 %r54,[%r46];
setp.eq.u16 %r56,%r54,%r55;
@ %r56 bra $L14;
.loc 1 83 10
add.u64 %r46,%r46,1;
.loc 1 77 10
and.b64 %r57,%r46,7;
.loc 1 77 9
setp.ne.u64 %r58,%r57,0;
@ %r58 bra $L5;
bra $L2;
$L11:
mov.u64 %r24,%r48;
$L2:
.loc 1 86 6
setp.gt.u64 %r59,%r24,7;
@ %r59 bra $L6;
$L9:
.loc 1 118 9
setp.ne.u64 %r60,%r24,0;
@ %r60 bra $L7;
.loc 1 80 16
mov.u64 %r45,%r24;
bra $L1;
$L6:
and.b32 %r38,%r47,255;
.loc 1 97 16
shl.b32 %r61,%r38,8;
.loc 1 97 21
or.b32 %r62,%r61,%r38;
.loc 1 97 12
cvt.s64.s32 %r40,%r62;
.loc 1 98 19
shl.b64 %r27,%r40,16;
.loc 1 98 12
or.b64 %r41,%r27,%r40;
.loc 1 100 22
shl.b64 %r28,%r41,32;
.loc 1 100 14
or.b64 %r42,%r28,%r41;
$L8:
.loc 1 104 15
ld.u64 %r63,[%r46];
xor.b64 %r30,%r42,%r63;
add.u64 %r64,%r30,-72340172838076673;
not.b64 %r65,%r30;
and.b64 %r66,%r64,%r65;
and.b64 %r67,%r66,-9187201950435737472;
.loc 1 104 14
setp.ne.u64 %r68,%r67,0;
@ %r68 bra $L7;
.loc 1 106 18
add.u64 %r24,%r24,-8;
.loc 1 107 15
add.u64 %r46,%r46,8;
.loc 1 102 13
setp.gt.u64 %r69,%r24,7;
@ %r69 bra $L8;
bra $L9;
$L7:
add.u64 %r37,%r46,%r24;
.loc 1 77 9
mov.u64 %r45,%r46;
.loc 1 120 10
cvt.u16.u32 %r71,%r39;
$L10:
ld.u8 %r70,[%r45];
setp.eq.u16 %r72,%r70,%r71;
@ %r72 bra $L1;
.loc 1 122 10
add.u64 %r45,%r45,1;
.loc 1 118 9
setp.ne.u64 %r73,%r37,%r45;
@ %r73 bra $L10;
.loc 1 80 16
mov.u64 %r45,0;
bra $L1;
$L12:
mov.u64 %r45,%r48;
bra $L1;
$L13:
mov.u64 %r45,0;
bra $L1;
$L14:
mov.u64 %r45,%r46;
$L1:
.loc 1 126 1
mov.u64 %value,%r45;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-memcmp.o/ 1612277262  0     0     100666  2366      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: memcmp
.visible .func (.param .u32 %value_out) memcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/memcmp.c"
// BEGIN GLOBAL FUNCTION DEF: memcmp
.visible .func (.param .u32 %value_out) memcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .pred %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .pred %r49;
.reg .pred %r50;
.reg .u16 %r51;
.reg .u16 %r52;
.reg .pred %r53;
.reg .pred %r56;
.reg .u64 %r58;
.reg .u64 %r59;
mov.u64 %r39,%ar0;
mov.u64 %r40,%ar1;
mov.u64 %r41,%ar2;
.loc 1 73 6
setp.le.u64 %r42,%r41,7;
@ %r42 bra $L2;
.loc 1 73 25
or.b64 %r43,%r39,%r40;
and.b64 %r44,%r43,7;
.loc 1 73 21
setp.eq.u64 %r45,%r44,0;
@ %r45 bra $L3;
bra $L15;
$L2:
.loc 1 94 11
add.u64 %r30,%r41,-1;
.loc 1 94 9
setp.ne.u64 %r46,%r41,0;
@ %r46 bra $L10;
.loc 1 102 10
cvt.u32.u64 %r38,%r41;
bra $L1;
$L3:
.loc 1 81 14
ld.u64 %r47,[%r39];
ld.u64 %r48,[%r40];
setp.ne.u64 %r49,%r47,%r48;
@ %r49 bra $L7;
.loc 1 83 13
add.u64 %r39,%r39,8;
.loc 1 84 13
add.u64 %r40,%r40,8;
.loc 1 85 13
add.u64 %r41,%r41,-8;
.loc 1 79 13
setp.gt.u64 %r50,%r41,7;
@ %r50 bra $L3;
bra $L2;
$L10:
.loc 1 49 1
mov.u64 %r32,%r39;
.loc 1 94 9
add.u64 %r58,%r30,1;
add.u64 %r59,%r32,%r58;
$L9:
.loc 1 96 11
ld.u8 %r28,[%r32];
.loc 1 96 18
ld.u8 %r29,[%r40];
.loc 1 96 10
cvt.u16.u32 %r51,%r28;
cvt.u16.u32 %r52,%r29;
setp.eq.u16 %r53,%r51,%r52;
@ %r53 bra $L8;
.loc 1 97 13
sub.u32 %r38,%r28,%r29;
bra $L1;
$L8:
.loc 1 98 9
add.u64 %r32,%r32,1;
.loc 1 99 9
add.u64 %r40,%r40,1;
.loc 1 94 9
setp.ne.u64 %r56,%r32,%r59;
@ %r56 bra $L9;
.loc 1 102 10
mov.u32 %r38,0;
bra $L1;
$L15:
.loc 1 94 11
add.u64 %r30,%r41,-1;
bra $L10;
$L7:
add.u64 %r30,%r41,-1;
bra $L10;
$L1:
.loc 1 104 1
mov.u32 %value,%r38;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-memcpy.o/ 1612277262  0     0     100666  3258      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: memcpy
.visible .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/memcpy.c"
// BEGIN GLOBAL FUNCTION DEF: memcpy
.visible .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r33;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .pred %r69;
.reg .u64 %r70;
.reg .u64 %r72;
.reg .pred %r73;
.reg .u64 %r74;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .pred %r81;
.reg .u64 %r82;
.reg .pred %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .pred %r86;
.reg .u64 %r87;
.reg .u32 %r88;
.reg .pred %r89;
.reg .u64 %r91;
mov.u64 %r63,%ar0;
mov.u64 %r64,%ar1;
mov.u64 %r65,%ar2;
.loc 1 73 6
setp.le.u64 %r66,%r65,31;
@ %r66 bra $L11;
.loc 1 73 28
or.b64 %r67,%r64,%r63;
and.b64 %r68,%r67,7;
.loc 1 73 24
setp.eq.u64 %r69,%r68,0;
@ %r69 bra $L3;
bra $L16;
$L18:
.loc 1 92 16
and.b64 %r65,%r65,7;
add.u64 %r70,%r38,-8;
and.b64 %r72,%r70,-8;
add.u64 %r41,%r72,8;
.loc 1 91 23
add.u64 %r33,%r33,%r41;
.loc 1 91 40
add.u64 %r64,%r64,%r41;
bra $L2;
$L11:
.loc 1 66 9
mov.u64 %r33,%r63;
bra $L2;
$L12:
.loc 1 89 13
mov.u64 %r65,%r38;
$L2:
.loc 1 100 14
add.u64 %r37,%r65,-1;
.loc 1 100 9
setp.ne.u64 %r73,%r65,0;
@ %r73 bra $L5;
bra $L17;
$L3:
add.u64 %r74,%r65,-32;
and.b64 %r76,%r74,-32;
add.u64 %r56,%r76,32;
add.u64 %r57,%r64,%r56;
.loc 1 75 19
mov.u64 %r42,%r63;
$L7:
.loc 1 81 26
ld.u64 %r77,[%r64];
st.u64 [%r42],%r77;
.loc 1 82 26
ld.u64 %r78,[%r64+8];
st.u64 [%r42+8],%r78;
.loc 1 83 26
ld.u64 %r79,[%r64+16];
st.u64 [%r42+16],%r79;
add.u64 %r64,%r64,32;
add.u64 %r42,%r42,32;
.loc 1 84 26
ld.u64 %r80,[%r64+-8];
st.u64 [%r42+-8],%r80;
.loc 1 79 13
setp.ne.u64 %r81,%r57,%r64;
@ %r81 bra $L7;
.loc 1 84 23
add.u64 %r33,%r63,%r56;
.loc 1 85 16
and.b64 %r38,%r65,31;
.loc 1 89 13
and.b64 %r82,%r65,24;
setp.eq.u64 %r83,%r82,0;
@ %r83 bra $L12;
mov.u64 %r48,%r33;
mov.u64 %r47,%r64;
add.u64 %r91,%r64,%r38;
$L8:
.loc 1 91 26
ld.u64 %r84,[%r47];
st.u64 [%r48],%r84;
.loc 1 89 13
add.u64 %r47,%r47,8;
add.u64 %r48,%r48,8;
sub.u64 %r85,%r91,%r47;
setp.gt.u64 %r86,%r85,7;
@ %r86 bra $L8;
bra $L18;
$L5:
mov.u64 %r35,%r33;
mov.u64 %r43,%r64;
add.u64 %r87,%r37,1;
add.u64 %r46,%r35,%r87;
$L10:
.loc 1 101 12
ld.u8 %r88,[%r43];
st.u8 [%r35],%r88;
.loc 1 100 9
add.u64 %r35,%r35,1;
add.u64 %r43,%r43,1;
setp.ne.u64 %r89,%r35,%r46;
@ %r89 bra $L10;
bra $L17;
$L16:
.loc 1 100 14
add.u64 %r37,%r65,-1;
.loc 1 66 9
mov.u64 %r33,%r63;
bra $L5;
$L17:
.loc 1 105 1
mov.u64 %value,%r63;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-memmove.o/1612277262  0     0     100666  3896      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: memmove
.visible .func (.param .u64 %value_out) memmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/memmove.c"
// BEGIN GLOBAL FUNCTION DEF: memmove
.visible .func (.param .u64 %value_out) memmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .pred %r71;
.reg .u32 %r72;
.reg .pred %r73;
.reg .pred %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .pred %r77;
.reg .u64 %r78;
.reg .u64 %r80;
.reg .pred %r81;
.reg .u64 %r82;
.reg .u64 %r84;
.reg .pred %r85;
.reg .u64 %r86;
.reg .pred %r87;
.reg .u64 %r88;
.reg .pred %r89;
.reg .u64 %r90;
.reg .u32 %r91;
.reg .pred %r92;
.reg .u64 %r94;
mov.u64 %r66,%ar0;
mov.u64 %r67,%ar1;
mov.u64 %r68,%ar2;
.loc 1 86 6
setp.le.u64 %r69,%r66,%r67;
@ %r69 bra $L2;
.loc 1 86 30
add.u64 %r41,%r67,%r68;
.loc 1 86 17
setp.le.u64 %r70,%r41,%r66;
@ %r70 bra $L2;
.loc 1 90 11
add.u64 %r42,%r66,%r68;
.loc 1 91 13
setp.eq.u64 %r71,%r68,0;
@ %r71 bra $L16;
$L4:
.loc 1 93 11
add.u64 %r41,%r41,-1;
add.u64 %r42,%r42,-1;
ld.u8 %r72,[%r41];
st.u8 [%r42],%r72;
.loc 1 91 13
setp.ne.u64 %r73,%r67,%r41;
@ %r73 bra $L4;
bra $L16;
$L2:
.loc 1 101 10
setp.le.u64 %r74,%r68,31;
@ %r74 bra $L13;
.loc 1 101 34
or.b64 %r75,%r67,%r66;
and.b64 %r76,%r75,7;
.loc 1 101 30
setp.eq.u64 %r77,%r76,0;
@ %r77 bra $L6;
bra $L23;
$L24:
.loc 1 120 22
and.b64 %r68,%r68,7;
add.u64 %r78,%r38,-8;
and.b64 %r80,%r78,-8;
add.u64 %r34,%r80,8;
.loc 1 119 27
add.u64 %r35,%r35,%r34;
.loc 1 119 44
add.u64 %r67,%r67,%r34;
bra $L5;
$L13:
mov.u64 %r35,%r66;
bra $L5;
$L14:
.loc 1 117 17
mov.u64 %r68,%r38;
$L5:
.loc 1 128 20
add.u64 %r36,%r68,-1;
.loc 1 128 13
setp.ne.u64 %r81,%r68,0;
@ %r81 bra $L8;
bra $L16;
$L6:
add.u64 %r82,%r68,-32;
and.b64 %r84,%r82,-32;
add.u64 %r59,%r84,32;
add.u64 %r60,%r67,%r59;
.loc 1 101 30
mov.u64 %r45,%r66;
$L9:
.loc 1 109 32
ld.u64 %r27,[%r67];
.loc 1 109 30
st.u64 [%r45],%r27;
.loc 1 110 32
ld.u64 %r28,[%r67+8];
.loc 1 110 30
st.u64 [%r45+8],%r28;
.loc 1 111 32
ld.u64 %r29,[%r67+16];
.loc 1 111 30
st.u64 [%r45+16],%r29;
add.u64 %r67,%r67,32;
add.u64 %r45,%r45,32;
.loc 1 112 32
ld.u64 %r30,[%r67+-8];
.loc 1 112 30
st.u64 [%r45+-8],%r30;
.loc 1 107 17
setp.ne.u64 %r85,%r60,%r67;
@ %r85 bra $L9;
.loc 1 112 27
add.u64 %r35,%r66,%r59;
.loc 1 113 22
and.b64 %r38,%r68,31;
.loc 1 117 17
and.b64 %r86,%r68,24;
setp.eq.u64 %r87,%r86,0;
@ %r87 bra $L14;
mov.u64 %r51,%r35;
mov.u64 %r50,%r67;
add.u64 %r94,%r67,%r38;
$L10:
.loc 1 119 32
ld.u64 %r31,[%r50];
.loc 1 119 30
st.u64 [%r51],%r31;
.loc 1 117 17
add.u64 %r50,%r50,8;
add.u64 %r51,%r51,8;
sub.u64 %r88,%r94,%r50;
setp.gt.u64 %r89,%r88,7;
@ %r89 bra $L10;
bra $L24;
$L8:
mov.u64 %r39,%r35;
mov.u64 %r46,%r67;
add.u64 %r90,%r36,1;
add.u64 %r49,%r39,%r90;
$L12:
.loc 1 130 18
ld.u8 %r91,[%r46];
st.u8 [%r39],%r91;
.loc 1 128 13
add.u64 %r39,%r39,1;
add.u64 %r46,%r46,1;
setp.ne.u64 %r92,%r39,%r49;
@ %r92 bra $L12;
bra $L16;
$L23:
.loc 1 128 20
add.u64 %r36,%r68,-1;
mov.u64 %r35,%r66;
bra $L8;
$L16:
.loc 1 136 1
mov.u64 %value,%r66;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-memset.o/ 1612277262  0     0     100666  3830      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: memset
.visible .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/memset.c"
// BEGIN GLOBAL FUNCTION DEF: memset
.visible .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r31;
.reg .u64 %r33;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r55;
.reg .u64 %r58;
.reg .u64 %r62;
.reg .u32 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .pred %r66;
.reg .pred %r67;
.reg .u32 %r69;
.reg .pred %r70;
.reg .u32 %r71;
.reg .u64 %r72;
.reg .pred %r73;
.reg .pred %r74;
.reg .u32 %r75;
.reg .u32 %r76;
.reg .pred %r77;
.reg .u64 %r78;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .pred %r82;
.reg .u64 %r83;
.reg .pred %r84;
.reg .u64 %r85;
.reg .pred %r86;
.reg .u64 %r87;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .pred %r94;
.reg .u64 %r95;
mov.u64 %r62,%ar0;
mov.u32 %r63,%ar1;
mov.u64 %r64,%ar2;
.loc 1 51 10
mov.u64 %r58,%r62;
and.b64 %r65,%r62,7;
.loc 1 51 9
setp.eq.u64 %r66,%r65,0;
@ %r66 bra $L12;
.loc 1 53 12
add.u64 %r43,%r64,-1;
.loc 1 53 10
setp.ne.u64 %r67,%r64,0;
@ ! %r67 bra $L17;
.loc 1 54 16
cvt.u32.u32 %r69,%r63;
.loc 1 42 9
mov.u64 %r44,%r62;
.loc 1 54 14
mov.u32 %r71,%r69;
bra $L4;
$L6:
.loc 1 53 12
add.u64 %r43,%r43,-1;
.loc 1 53 10
add.u64 %r58,%r58,1;
setp.eq.u64 %r70,%r43,-1;
@ %r70 bra $L17;
$L4:
.loc 1 54 11
add.u64 %r44,%r44,1;
.loc 1 54 14
st.u8 [%r58],%r71;
.loc 1 51 10
and.b64 %r72,%r44,7;
.loc 1 51 9
setp.ne.u64 %r73,%r72,0;
@ %r73 bra $L6;
bra $L2;
$L12:
.loc 1 42 9
mov.u64 %r44,%r62;
.loc 1 51 9
mov.u64 %r43,%r64;
$L2:
.loc 1 59 6
setp.le.u64 %r74,%r43,7;
@ %r74 bra $L7;
.loc 1 48 16
and.b32 %r38,%r63,255;
.loc 1 66 19
shl.b32 %r75,%r38,8;
.loc 1 66 25
or.b32 %r76,%r75,%r38;
.loc 1 66 14
cvt.u64.u32 %r39,%r76;
.loc 1 67 25
shl.b64 %r27,%r39,16;
.loc 1 67 14
or.b64 %r40,%r27,%r39;
.loc 1 69 26
shl.b64 %r28,%r40,32;
.loc 1 69 16
or.b64 %r41,%r28,%r40;
.loc 1 72 13
setp.le.u64 %r77,%r43,31;
@ %r77 bra $L13;
add.u64 %r78,%r43,-32;
and.b64 %r80,%r78,-32;
add.u64 %r81,%r80,32;
add.u64 %r55,%r44,%r81;
$L9:
.loc 1 74 27
st.u64 [%r44],%r41;
.loc 1 75 27
st.u64 [%r44+8],%r41;
.loc 1 76 27
st.u64 [%r44+16],%r41;
add.u64 %r44,%r44,32;
.loc 1 77 27
st.u64 [%r44+-8],%r41;
.loc 1 72 13
setp.ne.u64 %r82,%r55,%r44;
@ %r82 bra $L9;
.loc 1 78 13
and.b64 %r45,%r43,31;
.loc 1 81 13
and.b64 %r83,%r43,24;
setp.eq.u64 %r84,%r83,0;
@ ! %r84 bra $L8;
bra $L14;
$L13:
.loc 1 72 13
mov.u64 %r45,%r43;
$L8:
mov.u64 %r31,%r44;
add.u64 %r95,%r44,%r45;
$L10:
.loc 1 83 27
st.u64 [%r31],%r41;
.loc 1 81 13
add.u64 %r31,%r31,8;
sub.u64 %r85,%r95,%r31;
setp.gt.u64 %r86,%r85,7;
@ %r86 bra $L10;
.loc 1 83 24
add.u64 %r87,%r45,-8;
and.b64 %r89,%r87,-8;
add.u64 %r90,%r89,8;
add.u64 %r44,%r44,%r90;
.loc 1 84 13
and.b64 %r43,%r45,7;
bra $L7;
$L14:
.loc 1 81 13
mov.u64 %r43,%r45;
$L7:
.loc 1 92 9
setp.eq.u64 %r91,%r43,0;
@ %r91 bra $L17;
.loc 1 54 16
cvt.u32.u32 %r92,%r63;
mov.u64 %r33,%r44;
add.u64 %r37,%r33,%r43;
.loc 1 93 10
mov.u32 %r93,%r92;
$L11:
st.u8 [%r33],%r93;
.loc 1 92 9
add.u64 %r33,%r33,1;
setp.ne.u64 %r94,%r37,%r33;
@ %r94 bra $L11;
$L17:
.loc 1 96 1
mov.u64 %value,%r62;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-misc.o/   1612277262  0     0     100666  1617      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: close
.visible .func (.param .u32 %value_out) close (.param .u32 %in_ar0);
.file 1 "../../../../../../newlib/libc/machine/nvptx/misc.c"
// BEGIN GLOBAL FUNCTION DECL: lseek
.visible .func (.param .u64 %value_out) lseek (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: read
.visible .func (.param .u32 %value_out) read (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: close
.visible .func (.param .u32 %value_out) close (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.loc 1 23 10
mov.u32 %value,-1;
.loc 1 24 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: lseek
.visible .func (.param .u64 %value_out) lseek (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.loc 1 28 10
mov.u64 %value,0;
.loc 1 29 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: read
.visible .func (.param .u32 %value_out) read (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.loc 1 33 10
mov.u32 %value,0;
.loc 1 34 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-mkdirr.o/ 1612277262  0     0     100666  1580      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _mkdir_r
.visible .func (.param .u32 %value_out) _mkdir_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/mkdirr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: mkdir
.extern .func (.param .u32 %value_out) mkdir (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _mkdir_r
.visible .func (.param .u32 %value_out) _mkdir_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r31;
.reg .pred %r32;
.reg .pred %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u32 %r27,%ar2;
.loc 1 49 9
mov.u32 %r28,0;
st.global.u32 [errno],%r28;
.loc 1 50 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r27;
call (%value_in),mkdir,(%out_arg1,%out_arg2);
ld.param.u32 %r31,[%value_in];
}
.loc 1 50 6
setp.ne.u32 %r32,%r31,-1;
@ %r32 bra $L1;
.loc 1 50 50
ld.global.u32 %r23,[errno];
.loc 1 50 41
setp.eq.u32 %r33,%r23,0;
@ %r33 bra $L1;
.loc 1 51 17
st.u32 [%r25],%r23;
$L1:
.loc 1 53 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-mktime.o/ 1612277262  0     0     100666  21318     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: validate_structure
.func validate_structure (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/mktime.c"
// BEGIN GLOBAL FUNCTION DECL: mktime
.visible .func (.param .u64 %value_out) mktime (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _daylight
.extern .global .align 4 .u32 _daylight[1];
// BEGIN GLOBAL FUNCTION DECL: div
.extern .func div (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.extern .func (.param .u64 %value_out) __gettzinfo;
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.extern .func __tz_lock;
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked
.extern .func _tzset_unlocked;
// BEGIN GLOBAL FUNCTION DECL: __tzcalc_limits
.extern .func (.param .u32 %value_out) __tzcalc_limits (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.extern .func __tz_unlock;
// BEGIN VAR DEF: DAYS_IN_MONTH
.const .align 4 .u32 DAYS_IN_MONTH[12] =
{31,28,31,30,31,30,31,31,30,31,30,31 };
// BEGIN VAR DEF: _DAYS_BEFORE_MONTH
.const .align 4 .u32 _DAYS_BEFORE_MONTH[12] =
{0,31,59,90,120,151,181,212,243,273,304,334 };
// BEGIN FUNCTION DEF: validate_structure
.func validate_structure (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u32 %r33;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r51;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .u64 %r62;
.reg .u32 %r63;
.reg .u32 %r65;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r70;
.reg .u32 %r72;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .u32 %r76;
.reg .u64 %r78;
.reg .pred %r79;
.reg .u32 %r82;
.reg .u32 %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u32 %r86;
.reg .pred %r87;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .u32 %r92;
.reg .pred %r93;
.reg .u32 %r94;
.reg .pred %r95;
.reg .u32 %r98;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .pred %r101;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .pred %r104;
.reg .u32 %r107;
.reg .u32 %r108;
.reg .u32 %r109;
.reg .pred %r110;
.reg .u32 %r111;
.reg .pred %r112;
.reg .u32 %r114;
.reg .pred %r120;
.reg .u32 %r121;
.reg .u32 %r123;
.reg .pred %r129;
.reg .pred %r130;
.reg .pred %r131;
.reg .u32 %r132;
.reg .pred %r133;
.reg .u32 %r135;
.reg .pred %r141;
.reg .u32 %r142;
.reg .u32 %r144;
.reg .pred %r150;
.reg .pred %r151;
.reg .u64 %r153;
.reg .u64 %r154;
.reg .u64 %r155;
.reg .pred %r156;
.reg .pred %r157;
.reg .u32 %r159;
.reg .pred %r160;
.reg .u32 %r162;
.reg .pred %r168;
.reg .u32 %r169;
.reg .u32 %r171;
.reg .pred %r177;
.reg .u64 %r178;
.reg .u64 %r179;
.reg .pred %r181;
.reg .pred %r182;
.reg .pred %r184;
.reg .u64 %r185;
.reg .u64 %r186;
.reg .u32 %r187;
.reg .u32 %r188;
.reg .u32 %r189;
.reg .u32 %r190;
.reg .u32 %r191;
.reg .u32 %r192;
mov.u64 %r78,%ar0;
.loc 1 71 12
ld.u32 %r22,[%r78];
.loc 1 71 6
setp.gt.u32 %r79,%r22,59;
@ %r79 bra $L2;
.loc 1 82 12
ld.u32 %r74,[%r78+4];
bra $L3;
$L2:
.loc 1 73 13
mov.u32 %r82,60;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r22;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r82;
call div,(%out_arg1,%out_arg2,%out_arg3);
}
ld.u32 %r60,[%frame+4];
.loc 1 74 21
ld.u32 %r83,[%r78+4];
ld.u32 %r84,[%frame];
add.u32 %r74,%r83,%r84;
st.u32 [%r78+4],%r74;
.loc 1 75 10
setp.lt.s32 %r85,%r60,0;
@ %r85 bra $L4;
.loc 1 75 26
st.u32 [%r78],%r60;
bra $L3;
$L4:
.loc 1 77 18
add.u32 %r86,%r60,60;
st.u32 [%r78],%r86;
.loc 1 78 4
add.u32 %r74,%r74,-1;
st.u32 [%r78+4],%r74;
$L3:
.loc 1 82 6
setp.gt.u32 %r87,%r74,59;
@ %r87 bra $L5;
.loc 1 93 12
ld.u32 %r75,[%r78+8];
bra $L6;
$L5:
.loc 1 84 13
mov.u32 %r90,60;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r74;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r90;
call div,(%out_arg1,%out_arg2,%out_arg3);
}
ld.u32 %r70,[%frame+4];
.loc 1 85 22
ld.u32 %r91,[%r78+8];
ld.u32 %r92,[%frame];
add.u32 %r75,%r91,%r92;
st.u32 [%r78+8],%r75;
.loc 1 86 10
setp.lt.s32 %r93,%r70,0;
@ %r93 bra $L7;
.loc 1 86 26
st.u32 [%r78+4],%r70;
bra $L6;
$L7:
.loc 1 88 18
add.u32 %r94,%r70,60;
st.u32 [%r78+4],%r94;
.loc 1 89 4
add.u32 %r75,%r75,-1;
st.u32 [%r78+8],%r75;
$L6:
.loc 1 93 6
setp.gt.u32 %r95,%r75,23;
@ ! %r95 bra $L9;
.loc 1 95 13
mov.u32 %r98,24;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r75;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r98;
call div,(%out_arg1,%out_arg2,%out_arg3);
}
ld.u32 %r72,[%frame+4];
.loc 1 96 22
ld.u32 %r99,[%r78+12];
ld.u32 %r100,[%frame];
add.u32 %r33,%r99,%r100;
st.u32 [%r78+12],%r33;
.loc 1 97 10
setp.lt.s32 %r101,%r72,0;
@ %r101 bra $L10;
.loc 1 97 27
st.u32 [%r78+8],%r72;
bra $L9;
$L10:
.loc 1 99 19
add.u32 %r102,%r72,24;
st.u32 [%r78+8],%r102;
.loc 1 100 4
add.u32 %r103,%r33,-1;
st.u32 [%r78+12],%r103;
$L9:
.loc 1 104 12
ld.u32 %r63,[%r78+16];
.loc 1 104 6
setp.gt.u32 %r104,%r63,11;
@ %r104 bra $L12;
.loc 1 115 7
ld.u32 %r76,[%r78+20];
bra $L13;
$L12:
.loc 1 106 13
mov.u32 %r107,12;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r63;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r107;
call div,(%out_arg1,%out_arg2,%out_arg3);
}
ld.u32 %r63,[%frame+4];
.loc 1 107 22
ld.u32 %r108,[%r78+20];
ld.u32 %r109,[%frame];
add.u32 %r76,%r108,%r109;
st.u32 [%r78+20],%r76;
.loc 1 108 10
setp.lt.s32 %r110,%r63,0;
@ %r110 bra $L14;
.loc 1 108 26
st.u32 [%r78+16],%r63;
bra $L13;
$L14:
.loc 1 110 18
add.u32 %r63,%r63,12;
st.u32 [%r78+16],%r63;
.loc 1 111 4
add.u32 %r76,%r76,-1;
st.u32 [%r78+20],%r76;
$L13:
.loc 1 115 7
and.b32 %r111,%r76,3;
.loc 1 115 6
setp.ne.u32 %r112,%r111,0;
@ %r112 bra $L30;
rem.s32 %r114,%r76,100;
.loc 1 115 38
setp.ne.u32 %r120,%r114,0;
@ %r120 bra $L31;
.loc 1 115 7
add.u32 %r121,%r76,1900;
rem.s32 %r123,%r121,400;
setp.ne.u32 %r129,%r123,0;
.loc 1 116 17
selp.u32 %r68,28,29,%r129;
bra $L15;
$L30:
.loc 1 68 7
mov.u32 %r68,28;
bra $L15;
$L31:
.loc 1 116 17
mov.u32 %r68,29;
$L15:
.loc 1 118 12
ld.u32 %r51,[%r78+12];
.loc 1 118 6
setp.gt.s32 %r130,%r51,0;
@ %r130 bra $L40;
.loc 1 130 22
cvta.const.u64 %r186,DAYS_IN_MONTH;
.loc 1 116 17
mov.u32 %r187,31;
.loc 1 128 7
mov.u32 %r188,28;
mov.u32 %r189,29;
bra $L20;
$L40:
cvta.const.u64 %r185,DAYS_IN_MONTH;
.loc 1 141 22
mov.u32 %r190,0;
.loc 1 144 7
mov.u32 %r191,28;
mov.u32 %r192,29;
bra $L16;
$L20:
.loc 1 122 8
add.u32 %r63,%r63,-1;
.loc 1 122 7
setp.ne.u32 %r131,%r63,-1;
@ %r131 bra $L17;
.loc 1 124 13
ld.u32 %r43,[%r78+20];
.loc 1 124 22
add.u32 %r44,%r43,-1;
st.u32 [%r78+20],%r44;
.loc 1 127 5
and.b32 %r132,%r44,3;
.loc 1 128 7
setp.ne.u32 %r133,%r132,0;
@ %r133 bra $L33;
rem.s32 %r135,%r44,100;
.loc 1 127 36
setp.ne.u32 %r141,%r135,0;
@ %r141 bra $L34;
.loc 1 127 5
add.u32 %r142,%r43,1899;
rem.s32 %r144,%r142,400;
setp.ne.u32 %r150,%r144,0;
.loc 1 128 7
selp.u32 %r68,28,29,%r150;
bra $L18;
$L17:
.loc 1 130 22
setp.eq.u32 %r151,%r63,1;
@ %r151 bra $L36;
cvt.s64.s32 %r153,%r63;
shl.b64 %r154,%r153,2;
add.u64 %r155,%r186,%r154;
ld.u32 %r61,[%r155];
bra $L19;
$L36:
mov.u32 %r61,%r68;
$L19:
.loc 1 130 19
add.u32 %r51,%r51,%r61;
.loc 1 120 13
setp.le.s32 %r156,%r51,0;
@ %r156 bra $L20;
st.u32 [%r78+16],%r63;
st.u32 [%r78+12],%r51;
bra $L1;
$L26:
.loc 1 137 19
sub.u32 %r51,%r51,%r65;
st.u32 [%r78+12],%r51;
.loc 1 138 7
st.u32 [%r78+16],%r67;
setp.eq.u32 %r157,%r67,12;
@ %r157 bra $L22;
$L28:
add.u32 %r67,%r67,1;
add.u64 %r62,%r62,4;
bra $L23;
$L22:
.loc 1 140 13
ld.u32 %r53,[%r78+20];
.loc 1 140 22
add.u32 %r54,%r53,1;
st.u32 [%r78+20],%r54;
.loc 1 141 22
st.u32 [%r78+16],%r190;
.loc 1 143 5
and.b32 %r159,%r54,3;
.loc 1 144 7
setp.ne.u32 %r160,%r159,0;
@ %r160 bra $L37;
rem.s32 %r162,%r54,100;
.loc 1 143 36
setp.ne.u32 %r168,%r162,0;
@ %r168 bra $L38;
.loc 1 143 5
add.u32 %r169,%r53,1901;
rem.s32 %r171,%r169,400;
setp.ne.u32 %r177,%r171,0;
.loc 1 144 7
selp.u32 %r68,28,29,%r177;
bra $L24;
$L37:
mov.u32 %r68,%r191;
bra $L24;
$L38:
mov.u32 %r68,%r192;
$L24:
mov.u32 %r63,0;
$L16:
add.u32 %r67,%r63,1;
cvt.s64.s32 %r178,%r63;
shl.b64 %r179,%r178,2;
add.u64 %r62,%r185,%r179;
$L23:
.loc 1 135 31
setp.eq.u32 %r181,%r67,2;
@ %r181 bra $L25;
ld.u32 %r65,[%r62];
.loc 1 135 13
setp.lt.s32 %r182,%r65,%r51;
@ %r182 bra $L26;
bra $L1;
$L33:
.loc 1 128 7
mov.u32 %r68,%r188;
bra $L18;
$L34:
mov.u32 %r68,%r189;
$L18:
.loc 1 116 17
mov.u32 %r61,%r187;
.loc 1 130 22
mov.u32 %r63,11;
bra $L19;
$L29:
.loc 1 137 19
sub.u32 %r51,%r51,%r68;
st.u32 [%r78+12],%r51;
.loc 1 138 7
st.u32 [%r78+16],%r67;
bra $L28;
$L25:
.loc 1 135 13
setp.lt.s32 %r184,%r68,%r51;
@ %r184 bra $L29;
$L1:
.loc 1 148 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: mktime
.visible .func (.param .u64 %value_out) mktime (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r31;
.reg .u32 %r35;
.reg .u32 %r56;
.reg .u32 %r58;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r71;
.reg .u32 %r76;
.reg .u64 %r91;
.reg .u32 %r92;
.reg .u64 %r94;
.reg .u32 %r95;
.reg .u64 %r96;
.reg .u64 %r97;
.reg .u64 %r98;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .u32 %r101;
.reg .u32 %r103;
.reg .u32 %r104;
.reg .u64 %r105;
.reg .u32 %r106;
.reg .u64 %r109;
.reg .u32 %r110;
.reg .u32 %r112;
.reg .u32 %r126;
.reg .u32 %r127;
.reg .u32 %r128;
.reg .u32 %r129;
.reg .u64 %r130;
.reg .u64 %r131;
.reg .u64 %r132;
.reg .u64 %r133;
.reg .u64 %r135;
.reg .u64 %r137;
.reg .u64 %r138;
.reg .u64 %r139;
.reg .u64 %r140;
.reg .u64 %r141;
.reg .u64 %r142;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .u64 %r146;
.reg .u64 %r147;
.reg .u64 %r148;
.reg .u64 %r149;
.reg .u64 %r150;
.reg .u64 %r151;
.reg .pred %r152;
.reg .u32 %r153;
.reg .pred %r154;
.reg .u32 %r156;
.reg .pred %r162;
.reg .u32 %r163;
.reg .u32 %r165;
.reg .pred %r171;
.reg .u32 %r172;
.reg .pred %r173;
.reg .pred %r174;
.reg .u32 %r175;
.reg .pred %r176;
.reg .u32 %r178;
.reg .pred %r183;
.reg .u32 %r184;
.reg .u32 %r186;
.reg .pred %r191;
.reg .pred %r192;
.reg .pred %r193;
.reg .pred %r194;
.reg .u32 %r195;
.reg .pred %r196;
.reg .u32 %r198;
.reg .pred %r204;
.reg .u32 %r205;
.reg .u32 %r207;
.reg .pred %r213;
.reg .pred %r214;
.reg .u32 %r215;
.reg .pred %r216;
.reg .u32 %r218;
.reg .pred %r224;
.reg .u32 %r225;
.reg .u32 %r227;
.reg .pred %r233;
.reg .pred %r235;
.reg .u32 %r236;
.reg .u32 %r237;
.reg .pred %r238;
.reg .u64 %r239;
.reg .u32 %r241;
.reg .u32 %r242;
.reg .u32 %r244;
.reg .u32 %r245;
.reg .u16 %r246;
.reg .u16 %r247;
.reg .u16 %r248;
.reg .u32 %r249;
.reg .u16 %r250;
.reg .pred %r251;
.reg .u32 %r253;
.reg .pred %r254;
.reg .u64 %r255;
.reg .u64 %r256;
.reg .u32 %r257;
.reg .u32 %r258;
.reg .u32 %r259;
.reg .u32 %r260;
.reg .u32 %r261;
.reg .u32 %r262;
.reg .u32 %r263;
.reg .pred %r264;
.reg .u16 %r265;
.reg .u16 %r266;
.reg .u16 %r267;
.reg .u32 %r268;
.reg .u16 %r269;
.reg .u16 %r270;
.reg .u16 %r271;
.reg .u32 %r272;
.reg .pred %r273;
.reg .pred %r274;
.reg .u32 %r275;
.reg .u32 %r276;
.reg .pred %r277;
.reg .u32 %r278;
.reg .u32 %r279;
.reg .u64 %r280;
.reg .u32 %r282;
.reg .pred %r283;
.reg .pred %r284;
.reg .pred %r285;
.reg .u32 %r286;
.reg .pred %r287;
.reg .u32 %r288;
.reg .pred %r289;
.reg .u32 %r291;
.reg .pred %r297;
.reg .u32 %r298;
.reg .u32 %r300;
.reg .pred %r306;
.reg .u32 %r307;
.reg .pred %r308;
.reg .u32 %r310;
.reg .pred %r316;
.reg .u32 %r317;
.reg .u32 %r319;
.reg .pred %r325;
.reg .pred %r326;
.reg .u32 %r327;
.reg .pred %r328;
.reg .u64 %r329;
.reg .u64 %r330;
.reg .u64 %r331;
.reg .pred %r332;
.reg .u32 %r333;
.reg .u32 %r335;
.reg .u64 %r336;
.reg .u32 %r338;
.reg .pred %r339;
.reg .u64 %r342;
.reg .u64 %r343;
.reg .u64 %r344;
.reg .u64 %r345;
mov.u64 %r132,%ar0;
.loc 1 156 23
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r133,[%value_in];
}
.loc 1 159 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r132;
call validate_structure,(%out_arg1);
}
.loc 1 162 32
ld.s32 %r135,[%r132+4];
.loc 1 162 41
shl.b64 %r137,%r135,4;
sub.u64 %r138,%r137,%r135;
shl.b64 %r139,%r138,2;
.loc 1 162 15
ld.s32 %r140,[%r132];
.loc 1 162 24
add.u64 %r141,%r139,%r140;
.loc 1 163 11
ld.s32 %r142,[%r132+8];
.loc 1 162 59
mad.lo.u64 %r31,%r142,3600,%r141;
.loc 1 167 35
ld.u32 %r35,[%r132+16];
.loc 1 166 26
ld.u32 %r145,[%r132+12];
add.u32 %r144,%r145,-1;
cvt.s64.s32 %r146,%r144;
.loc 1 167 29
cvta.const.u64 %r147,_DAYS_BEFORE_MONTH;
cvt.s64.s32 %r148,%r35;
shl.b64 %r149,%r148,2;
add.u64 %r150,%r147,%r149;
ld.s32 %r151,[%r150];
.loc 1 167 8
add.u64 %r94,%r146,%r151;
.loc 1 168 6
setp.gt.s32 %r152,%r35,1;
@ %r152 bra $L43;
.loc 1 168 28
ld.u32 %r95,[%r132+20];
bra $L44;
$L43:
ld.u32 %r95,[%r132+20];
and.b32 %r153,%r95,3;
.loc 1 168 25
setp.ne.u32 %r154,%r153,0;
@ %r154 bra $L44;
rem.s32 %r156,%r95,100;
.loc 1 168 59
setp.ne.u32 %r162,%r156,0;
@ %r162 bra $L45;
.loc 1 168 28
add.u32 %r163,%r95,1900;
rem.s32 %r165,%r163,400;
setp.ne.u32 %r171,%r165,0;
@ %r171 bra $L44;
$L45:
.loc 1 169 9
add.u64 %r94,%r94,1;
$L44:
.loc 1 172 18
st.u32 [%r132+28],%r94;
.loc 1 174 30
add.u32 %r172,%r95,10000;
.loc 1 174 6
setp.gt.u32 %r173,%r172,20000;
@ %r173 bra $L71;
.loc 1 178 6
setp.le.s32 %r174,%r95,70;
@ %r174 bra $L47;
.loc 1 180 17
mov.u32 %r104,70;
.loc 1 181 10
mov.u64 %r342,365;
mov.u64 %r343,366;
$L49:
and.b32 %r175,%r104,3;
setp.ne.u32 %r176,%r175,0;
@ %r176 bra $L72;
rem.s32 %r178,%r104,100;
setp.ne.u32 %r183,%r178,0;
@ %r183 bra $L73;
add.u32 %r184,%r104,1900;
rem.s32 %r186,%r184,400;
setp.ne.u32 %r191,%r186,0;
selp.u64 %r96,365,366,%r191;
bra $L48;
$L72:
mov.u64 %r96,%r342;
bra $L48;
$L73:
mov.u64 %r96,%r343;
$L48:
.loc 1 181 7
add.u64 %r94,%r94,%r96;
.loc 1 180 50
add.u32 %r104,%r104,1;
.loc 1 180 7
setp.ne.u32 %r192,%r104,%r95;
@ %r192 bra $L49;
bra $L50;
$L47:
.loc 1 183 11
setp.eq.u32 %r193,%r95,70;
@ %r193 bra $L50;
.loc 1 185 7
setp.eq.u32 %r194,%r95,69;
@ %r194 bra $L75;
.loc 1 185 17
mov.u32 %r103,69;
.loc 1 186 10
mov.u64 %r344,365;
mov.u64 %r345,366;
$L53:
and.b32 %r195,%r103,3;
setp.ne.u32 %r196,%r195,0;
@ %r196 bra $L76;
rem.s32 %r198,%r103,100;
setp.ne.u32 %r204,%r198,0;
@ %r204 bra $L77;
add.u32 %r205,%r103,1900;
rem.s32 %r207,%r205,400;
setp.ne.u32 %r213,%r207,0;
selp.u64 %r97,365,366,%r213;
bra $L52;
$L76:
mov.u64 %r97,%r344;
bra $L52;
$L77:
mov.u64 %r97,%r345;
$L52:
.loc 1 186 7
sub.u64 %r94,%r94,%r97;
.loc 1 185 50
add.u32 %r103,%r103,-1;
.loc 1 185 7
setp.ne.u32 %r214,%r103,%r95;
@ %r214 bra $L53;
.loc 1 187 15
and.b32 %r215,%r95,3;
setp.ne.u32 %r216,%r215,0;
@ %r216 bra $L79;
rem.s32 %r218,%r95,100;
setp.ne.u32 %r224,%r218,0;
@ %r224 bra $L80;
add.u32 %r225,%r95,1900;
rem.s32 %r227,%r225,400;
setp.ne.u32 %r233,%r227,0;
selp.u64 %r98,365,366,%r233;
bra $L51;
$L75:
mov.u64 %r98,365;
bra $L51;
$L79:
mov.u64 %r98,365;
bra $L51;
$L80:
mov.u64 %r98,366;
$L51:
.loc 1 187 12
sub.u64 %r94,%r94,%r98;
$L50:
.loc 1 191 7
mad.lo.u64 %r105,%r94,86400,%r31;
.loc 1 193 3
{
call __tz_lock;
}
.loc 1 195 3
{
call _tzset_unlocked;
}
.loc 1 197 7
ld.global.u32 %r56,[_daylight];
.loc 1 197 6
setp.eq.u32 %r235,%r56,0;
@ %r235 bra $L54;
.loc 1 200 11
ld.u32 %r236,[%r132+20];
add.u32 %r106,%r236,1900;
.loc 1 202 23
ld.u32 %r58,[%r132+32];
.loc 1 202 16
min.s32 %r56,%r58,1;
.loc 1 205 10
ld.u32 %r237,[%r133+4];
setp.ne.u32 %r238,%r237,%r106;
@ %r238 bra $L55;
$L58:
.loc 1 210 32
ld.u64 %r62,[%r133+80];
.loc 1 211 41
ld.u64 %r63,[%r133+72];
.loc 1 214 32
ld.u64 %r64,[%r133+40];
.loc 1 213 11
sub.u64 %r109,%r63,%r64;
.loc 1 211 11
sub.u64 %r239,%r63,%r62;
.loc 1 216 35
set.u32.lt.s64 %r241,%r105,%r239;
neg.s32 %r242,%r241;
.loc 1 216 12
set.u32.ge.s64 %r244,%r105,%r109;
neg.s32 %r245,%r244;
.loc 1 216 28
cvt.u16.u32 %r247,%r242;
cvt.u16.u32 %r248,%r245;
and.b16 %r246,%r247,%r248;
.loc 1 216 7
cvt.u32.u16 %r249,%r246;
cvt.u16.u8 %r250,%r249;
setp.ne.u16 %r251,%r250,0;
@ %r251 bra $L56;
bra $L103;
$L55:
.loc 1 205 32
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r106;
call (%value_in),__tzcalc_limits,(%out_arg1);
ld.param.u32 %r253,[%value_in];
}
.loc 1 205 29
setp.ne.u32 %r254,%r253,0;
@ %r254 bra $L58;
bra $L56;
$L103:
.loc 1 209 18
ld.u64 %r256,[%r133+32];
sub.u64 %r255,%r256,%r62;
.loc 1 221 17
set.u32.ge.s64 %r258,%r105,%r255;
neg.s32 %r259,%r258;
cvt.u32.u32 %r257,%r259;
cvt.u32.u8 %r126,%r257;
.loc 1 221 40
set.u32.lt.s64 %r261,%r105,%r109;
neg.s32 %r262,%r261;
cvt.u32.u32 %r260,%r262;
cvt.u32.u8 %r127,%r260;
.loc 1 222 10
ld.u32 %r263,[%r133];
setp.eq.u32 %r264,%r263,0;
@ %r264 bra $L59;
.loc 1 221 33
cvt.u16.u32 %r266,%r126;
cvt.u16.u32 %r267,%r127;
and.b16 %r265,%r266,%r267;
.loc 1 222 10
cvt.u32.u16 %r268,%r265;
cvt.u32.u8 %r99,%r268;
bra $L60;
$L59:
.loc 1 222 33
cvt.u16.u32 %r270,%r126;
cvt.u16.u32 %r271,%r127;
or.b16 %r269,%r270,%r271;
.loc 1 222 10
cvt.u32.u16 %r272,%r269;
cvt.u32.u8 %r99,%r272;
$L60:
.loc 1 226 12
setp.lt.s32 %r273,%r58,0;
@ %r273 bra $L82;
.loc 1 226 39
xor.b32 %r71,%r99,%r56;
.loc 1 226 28
setp.ne.u32 %r274,%r71,1;
@ %r274 bra $L83;
.loc 1 234 9
cvt.u32.u64 %r275,%r64;
cvt.u32.u64 %r276,%r62;
sub.u32 %r110,%r275,%r276;
.loc 1 237 19
ld.u32 %r128,[%r132];
.loc 1 239 9
ld.u32 %r129,[%r132+12];
.loc 1 235 8
setp.ne.u32 %r277,%r99,0;
@ %r277 bra $L61;
.loc 1 237 19
sub.u32 %r278,%r128,%r110;
st.u32 [%r132],%r278;
.loc 1 236 12
neg.s32 %r279,%r110;
.loc 1 238 9
cvt.s64.s32 %r280,%r279;
add.u64 %r105,%r105,%r280;
.loc 1 240 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r132;
call validate_structure,(%out_arg1);
}
.loc 1 241 10
ld.u32 %r282,[%r132+12];
sub.u32 %r56,%r282,%r129;
.loc 1 243 8
setp.eq.u32 %r283,%r282,%r129;
@ %r283 bra $L54;
$L69:
.loc 1 245 10
setp.gt.s32 %r284,%r56,1;
@ %r284 bra $L84;
.loc 1 247 15
setp.lt.s32 %r285,%r56,-1;
@ %r285 bra $L85;
.loc 1 250 12
cvt.s64.s32 %r130,%r56;
mov.u32 %r71,%r56;
bra $L62;
$L84:
mov.u64 %r130,-1;
.loc 1 246 11
cvt.u32.u64 %r71,%r130;
bra $L62;
$L85:
mov.u64 %r130,1;
$L62:
.loc 1 250 12
add.u64 %r94,%r94,%r130;
.loc 1 252 27
ld.u32 %r286,[%r132+28];
add.u32 %r76,%r71,%r286;
.loc 1 252 10
setp.ge.s32 %r287,%r76,0;
@ %r287 bra $L63;
.loc 1 253 6
add.u32 %r112,%r95,-1;
.loc 1 254 23
and.b32 %r288,%r112,3;
.loc 1 254 43
setp.ne.u32 %r289,%r288,0;
@ %r289 bra $L86;
rem.s32 %r291,%r112,100;
.loc 1 254 23
setp.ne.u32 %r297,%r291,0;
@ %r297 bra $L87;
add.u32 %r298,%r95,1899;
rem.s32 %r300,%r298,400;
setp.ne.u32 %r306,%r300,0;
.loc 1 254 43
selp.u32 %r100,364,365,%r306;
bra $L64;
$L86:
mov.u32 %r100,364;
bra $L64;
$L87:
mov.u32 %r100,365;
$L64:
.loc 1 254 21
st.u32 [%r132+28],%r100;
mov.u32 %r56,%r99;
bra $L56;
$L63:
.loc 1 256 13
and.b32 %r307,%r95,3;
setp.ne.u32 %r308,%r307,0;
@ %r308 bra $L89;
rem.s32 %r310,%r95,100;
setp.ne.u32 %r316,%r310,0;
@ %r316 bra $L90;
add.u32 %r317,%r95,1900;
rem.s32 %r319,%r317,400;
setp.ne.u32 %r325,%r319,0;
selp.u32 %r101,365,366,%r325;
bra $L65;
$L89:
mov.u32 %r101,365;
bra $L65;
$L90:
mov.u32 %r101,366;
$L65:
.loc 1 257 9
setp.ge.s32 %r326,%r76,%r101;
@ %r326 bra $L66;
.loc 1 252 27
st.u32 [%r132+28],%r76;
mov.u32 %r56,%r99;
bra $L56;
$L66:
.loc 1 258 20
sub.u32 %r327,%r76,%r101;
st.u32 [%r132+28],%r327;
mov.u32 %r56,%r99;
bra $L56;
$L82:
mov.u32 %r56,%r99;
bra $L56;
$L83:
mov.u32 %r56,%r99;
$L56:
.loc 1 267 6
setp.ne.u32 %r328,%r56,1;
@ %r328 bra $L54;
$L70:
.loc 1 268 9
ld.u64 %r329,[%r133+80];
add.u64 %r131,%r105,%r329;
mov.u32 %r56,1;
bra $L67;
$L54:
.loc 1 270 9
ld.u64 %r330,[%r133+40];
add.u64 %r131,%r105,%r330;
$L67:
.loc 1 272 3
{
call __tz_unlock;
}
.loc 1 275 19
st.u32 [%r132+32],%r56;
.loc 1 278 31
add.u64 %r331,%r94,4;
.loc 1 278 36
rem.s64 %r91,%r331,7;
.loc 1 278 23
cvt.u32.u64 %r92,%r91;
.loc 1 278 6
setp.lt.s64 %r332,%r91,0;
@ %r332 bra $L68;
.loc 1 278 23
st.u32 [%r132+24],%r92;
bra $L42;
$L68:
.loc 1 279 20
add.u32 %r333,%r92,7;
st.u32 [%r132+24],%r333;
bra $L42;
$L71:
.loc 1 175 14
mov.u64 %r131,-1;
bra $L42;
$L61:
.loc 1 237 19
add.u32 %r335,%r110,%r128;
st.u32 [%r132],%r335;
.loc 1 238 9
cvt.s64.s32 %r336,%r110;
add.u64 %r105,%r105,%r336;
.loc 1 240 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r132;
call validate_structure,(%out_arg1);
}
.loc 1 241 10
ld.u32 %r338,[%r132+12];
sub.u32 %r56,%r338,%r129;
.loc 1 243 8
setp.ne.u32 %r339,%r338,%r129;
@ ! %r339 bra $L70;
bra $L69;
$L42:
.loc 1 282 1
mov.u64 %value,%r131;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-mlock.o/  1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

/653            1612277262  0     0     100666  255       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: __month_lengths
.visible .const .align 4 .u32 __month_lengths[24] =
{31,28,31,30,31,30,31,31,30,31,30,31,31,29,31,30,31,30,31,31,30,31,30,31 };

lib_a-mprec.o/  1612277262  0     0     100666  64355     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _Balloc
.visible .func (.param .u64 %value_out) _Balloc (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/mprec.c"
// BEGIN GLOBAL FUNCTION DECL: _Bfree
.visible .func _Bfree (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __multadd
.visible .func (.param .u64 %value_out) __multadd (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __s2b
.visible .func (.param .u64 %value_out) __s2b (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: __hi0bits
.visible .func (.param .u32 %value_out) __hi0bits (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __lo0bits
.visible .func (.param .u32 %value_out) __lo0bits (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __i2b
.visible .func (.param .u64 %value_out) __i2b (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __multiply
.visible .func (.param .u64 %value_out) __multiply (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __pow5mult
.visible .func (.param .u64 %value_out) __pow5mult (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __lshift
.visible .func (.param .u64 %value_out) __lshift (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __mcmp
.visible .func (.param .u32 %value_out) __mcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __mdiff
.visible .func (.param .u64 %value_out) __mdiff (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __ulp
.visible .func (.param .f64 %value_out) __ulp (.param .f64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __b2d
.visible .func (.param .f64 %value_out) __b2d (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __d2b
.visible .func (.param .u64 %value_out) __d2b (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ratio
.visible .func (.param .f64 %value_out) __ratio (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _mprec_log10
.visible .func (.param .f64 %value_out) _mprec_log10 (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __copybits
.visible .func __copybits (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __any_on
.visible .func (.param .u32 %value_out) __any_on (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _calloc_r
.extern .func (.param .u64 %value_out) _calloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __assert_func
.extern .func __assert_func (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DEF: __mprec_tens
.visible .const .align 8 .u64 __mprec_tens[25] =
{4607182418800017408,4621819117588971520,4636737291354636288,4652007308841189376,4666723172467343360,4681608360884174848,4696837146684686336,4711630319722168320,4726483295884279808,4741671816366391296,4756540486875873280,4771362005757984768,4786511204640096256,4801453603149578240,4816244402031689728,4831355200913801216,4846369599423283200,4861130398305394688,4876203697187506176,4891288408196988160,4906019910204099648,4921056587992461136,4936209963552724370,4950912855330343670,4965913770331839924 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[42] =
{46,46,47,46,46,47,46,46,47,46,46,47,46,46,47,110,101,119,108,105,98,47,108,105,98,99,47,115,116,100,108,105,98,47,109,112,114,101,99,46,99,0 };
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[17] =
{66,97,108,108,111,99,32,115,117,99,99,101,101,100,101,100,0 };
// BEGIN GLOBAL VAR DEF: __mprec_tinytens
.visible .const .align 8 .u64 __mprec_tinytens[5] =
{4367597403136100796,4128101167230658355,3649340653511681853,2691949749288605597,776877706278891331 };
// BEGIN GLOBAL VAR DEF: __mprec_bigtens
.visible .const .align 8 .u64 __mprec_bigtens[5] =
{4846369599423283200,5085611494797045271,5564284217833028085,6521906365687930162,8436737289693151036 };
// BEGIN VAR DEF: p05$0
.const .align 4 .u32 p05$0[3] =
{5,25,125 };
// BEGIN GLOBAL FUNCTION DEF: _Balloc
.visible .func (.param .u64 %value_out) _Balloc (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .pred %r42;
.reg .u32 %r43;
.reg .u64 %r45;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .pred %r51;
.reg .u64 %r52;
mov.u64 %r32,%ar0;
mov.u32 %r33,%ar1;
.loc 1 103 7
ld.u64 %r22,[%r32+120];
.loc 1 103 6
setp.ne.u64 %r34,%r22,0;
@ %r34 bra $L2;
.loc 1 106 53
mov.u64 %r37,65;
mov.u64 %r36,8;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r36;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r37;
call (%value_in),_calloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r38,[%value_in];
}
mov.u64 %r22,%r38;
.loc 1 106 31
st.u64 [%r32+120],%r22;
.loc 1 109 10
setp.ne.u64 %r39,%r22,0;
@ %r39 bra $L2;
$L6:
.loc 1 111 11
mov.u64 %r31,0;
bra $L1;
$L2:
.loc 1 115 36
cvt.s64.s32 %r40,%r33;
shl.b64 %r41,%r40,3;
add.u64 %r25,%r22,%r41;
.loc 1 115 11
ld.u64 %r31,[%r25];
.loc 1 115 6
setp.eq.u64 %r42,%r31,0;
@ %r42 bra $L4;
.loc 1 117 38
ld.u64 %r26,[%r31];
.loc 1 117 34
st.u64 [%r25],%r26;
bra $L5;
$L4:
.loc 1 121 9
mov.u32 %r43,1;
shl.b32 %r30,%r43,%r33;
.loc 1 125 24
cvt.s64.s32 %r47,%r30;
add.u64 %r48,%r47,7;
.loc 1 123 24
shl.b64 %r49,%r48,2;
mov.u64 %r45,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r45;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r49;
call (%value_in),_calloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r50,[%value_in];
}
mov.u64 %r31,%r50;
.loc 1 127 10
setp.eq.u64 %r51,%r31,0;
@ %r51 bra $L6;
.loc 1 128 14
st.u32 [%r31+8],%r33;
.loc 1 129 19
st.u32 [%r31+12],%r30;
$L5:
.loc 1 131 13
mov.u64 %r52,0;
st.u64 [%r31+16],%r52;
$L1:
.loc 1 133 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _Bfree
.visible .func _Bfree (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 139 6
setp.eq.u64 %r30,%r29,0;
@ %r30 bra $L10;
.loc 1 141 43
ld.s32 %r31,[%r29+8];
.loc 1 141 41
shl.b64 %r32,%r31,3;
ld.u64 %r33,[%r28+120];
add.u64 %r26,%r33,%r32;
ld.u64 %r27,[%r26];
.loc 1 141 16
st.u64 [%r29],%r27;
.loc 1 142 38
st.u64 [%r26],%r29;
$L10:
.loc 1 144 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __multadd
.visible .func (.param .u64 %value_out) __multadd (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r56;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .u32 %r63;
.reg .u32 %r65;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .pred %r71;
.reg .pred %r72;
.reg .u32 %r73;
.reg .pred %r74;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u64 %r79;
.reg .pred %r80;
.reg .u64 %r81;
.reg .u32 %r82;
.reg .u64 %r84;
.reg .u64 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u64 %r96;
.reg .u64 %r97;
.reg .u64 %r98;
.reg .u64 %r99;
.reg .u64 %r100;
.reg .u32 %r102;
mov.u64 %r59,%ar0;
mov.u64 %r60,%ar1;
mov.u32 %r61,%ar2;
mov.u32 %r62,%ar3;
.loc 1 159 7
ld.u32 %r42,[%r60+20];
add.u64 %r56,%r60,24;
.loc 1 161 5
mov.u32 %r41,0;
$L16:
.loc 1 165 10
ld.u32 %r43,[%r56];
.loc 1 166 15
and.b32 %r63,%r43,65535;
.loc 1 166 9
mad.lo.u32 %r44,%r63,%r61,%r62;
.loc 1 167 15
shr.u32 %r65,%r43,16;
.loc 1 167 31
shr.u32 %r67,%r44,16;
.loc 1 167 9
mad.lo.u32 %r45,%r65,%r61,%r67;
.loc 1 168 20
shr.u32 %r62,%r45,16;
.loc 1 169 17
shl.b32 %r68,%r45,16;
.loc 1 169 29
and.b32 %r69,%r44,65535;
.loc 1 169 24
add.u32 %r70,%r68,%r69;
.loc 1 169 12
st.u32 [%r56],%r70;
.loc 1 176 3
add.u32 %r41,%r41,1;
add.u64 %r56,%r56,4;
setp.gt.s32 %r71,%r42,%r41;
@ %r71 bra $L16;
.loc 1 177 6
setp.eq.u32 %r72,%r62,0;
@ %r72 bra $L15;
.loc 1 179 10
ld.u32 %r73,[%r60+12];
setp.gt.s32 %r74,%r73,%r42;
@ %r74 bra $L18;
.loc 1 181 9
ld.u32 %r78,[%r60+8];
add.u32 %r77,%r78,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r59;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r77;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r79,[%value_in];
}
setp.ne.u64 %r80,%r79,0;
@ %r80 bra $L19;
cvta.const.u64 %r84,$LC0;
mov.u32 %r82,181;
cvta.const.u64 %r81,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r81;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r82;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r79;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r84;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L19:
.loc 1 182 4
ld.s32 %r88,[%r60+20];
add.u64 %r89,%r88,2;
shl.b64 %r90,%r89,2;
add.u64 %r91,%r60,16;
add.u64 %r92,%r79,16;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r92;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r91;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r90;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r93,[%value_in];
}
.loc 1 141 43
ld.s32 %r94,[%r60+8];
.loc 1 141 41
shl.b64 %r95,%r94,3;
ld.u64 %r96,[%r59+120];
add.u64 %r52,%r96,%r95;
ld.u64 %r53,[%r52];
.loc 1 141 16
st.u64 [%r60],%r53;
.loc 1 142 38
st.u64 [%r52],%r60;
mov.u64 %r60,%r79;
$L18:
.loc 1 186 20
cvt.s64.s32 %r97,%r42;
add.u64 %r98,%r97,4;
shl.b64 %r99,%r98,2;
add.u64 %r100,%r60,%r99;
st.u32 [%r100+8],%r62;
.loc 1 186 16
add.u32 %r102,%r42,1;
.loc 1 187 15
st.u32 [%r60+20],%r102;
$L15:
.loc 1 190 1
mov.u64 %value,%r60;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __s2b
.visible .func (.param .u64 %value_out) __s2b (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u32 %ar4;
ld.param.u32 %ar4,[%in_ar4];
.reg .u64 %r32;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u32 %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u32 %r59;
.reg .pred %r60;
.reg .pred %r62;
.reg .u64 %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .u64 %r73;
.reg .u32 %r74;
.reg .u64 %r75;
.reg .u32 %r78;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u64 %r82;
.reg .pred %r83;
.reg .u32 %r84;
.reg .u64 %r85;
.reg .pred %r86;
.reg .u32 %r87;
.reg .u32 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .u32 %r93;
.reg .u32 %r95;
.reg .u32 %r96;
.reg .u64 %r97;
.reg .pred %r98;
mov.u64 %r54,%ar0;
mov.u64 %r55,%ar1;
mov.u32 %r56,%ar2;
mov.u32 %r57,%ar3;
mov.u32 %r58,%ar4;
.loc 1 203 11
add.u32 %r59,%r57,8;
.loc 1 203 5
div.s32 %r33,%r59,9;
.loc 1 204 3
setp.le.s32 %r60,%r57,9;
@ %r60 bra $L32;
.loc 1 204 17
mov.u32 %r37,1;
.loc 1 204 10
mov.u32 %r38,0;
$L25:
.loc 1 204 31
add.u32 %r37,%r37,%r37;
.loc 1 204 39
add.u32 %r38,%r38,1;
.loc 1 204 3
setp.gt.s32 %r62,%r33,%r37;
@ %r62 bra $L25;
bra $L24;
$L32:
.loc 1 204 10
mov.u32 %r38,0;
$L24:
.loc 1 206 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r38;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r65,[%value_in];
}
mov.u64 %r53,%r65;
setp.ne.u64 %r66,%r65,0;
@ %r66 bra $L26;
cvta.const.u64 %r70,$LC0;
mov.u32 %r68,206;
cvta.const.u64 %r67,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r67;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r68;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r65;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r70;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L26:
.loc 1 207 12
st.u32 [%r53+24],%r58;
.loc 1 208 11
mov.u32 %r71,1;
st.u32 [%r53+20],%r71;
.loc 1 216 6
setp.le.s32 %r72,%r56,9;
@ %r72 bra $L27;
.loc 1 218 9
add.u64 %r34,%r55,9;
mov.u64 %r46,%r34;
add.u64 %r73,%r55,10;
add.u32 %r74,%r56,-10;
cvt.u64.u32 %r75,%r74;
add.u64 %r52,%r73,%r75;
$L28:
.loc 1 220 27
ld.s8 %r80,[%r46];
.loc 1 220 6
add.u32 %r81,%r80,-48;
mov.u32 %r78,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r53;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r78;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r81;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r82,[%value_in];
}
mov.u64 %r53,%r82;
.loc 1 221 7
add.u64 %r46,%r46,1;
setp.ne.u64 %r83,%r46,%r52;
@ %r83 bra $L28;
.loc 1 222 8
add.u32 %r84,%r56,-8;
cvt.u64.u32 %r85,%r84;
add.u64 %r36,%r34,%r85;
bra $L29;
$L27:
.loc 1 225 7
add.u64 %r36,%r55,10;
.loc 1 215 5
mov.u32 %r56,9;
$L29:
.loc 1 226 3
setp.le.s32 %r86,%r57,%r56;
@ %r86 bra $L23;
mov.u64 %r32,%r36;
add.u32 %r87,%r57,-1;
sub.u32 %r88,%r87,%r56;
cvt.u64.u32 %r89,%r88;
add.u64 %r90,%r32,1;
add.u64 %r45,%r89,%r90;
$L31:
.loc 1 227 30
ld.s8 %r95,[%r32];
.loc 1 227 9
add.u32 %r96,%r95,-48;
mov.u32 %r93,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r53;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r93;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r96;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r97,[%value_in];
}
mov.u64 %r53,%r97;
.loc 1 226 3
add.u64 %r32,%r32,1;
setp.ne.u64 %r98,%r32,%r45;
@ %r98 bra $L31;
$L23:
.loc 1 229 1
mov.u64 %value,%r53;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __hi0bits
.visible .func (.param .u32 %value_out) __hi0bits (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .pred %r37;
.reg .pred %r38;
.reg .u32 %r39;
.reg .pred %r40;
mov.u32 %r29,%ar0;
.loc 1 236 11
and.b32 %r30,%r29,-65536;
.loc 1 236 6
setp.ne.u32 %r31,%r30,0;
@ %r31 bra $L42;
.loc 1 239 9
shl.b32 %r29,%r29,16;
.loc 1 238 9
mov.u32 %r28,16;
bra $L37;
$L42:
.loc 1 234 16
mov.u32 %r28,0;
$L37:
.loc 1 241 11
and.b32 %r32,%r29,-16777216;
.loc 1 241 6
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L38;
.loc 1 243 9
add.u32 %r28,%r28,8;
.loc 1 244 9
shl.b32 %r29,%r29,8;
$L38:
.loc 1 246 11
and.b32 %r34,%r29,-268435456;
.loc 1 246 6
setp.ne.u32 %r35,%r34,0;
@ %r35 bra $L39;
.loc 1 248 9
add.u32 %r28,%r28,4;
.loc 1 249 9
shl.b32 %r29,%r29,4;
$L39:
.loc 1 251 11
and.b32 %r36,%r29,-1073741824;
.loc 1 251 6
setp.ne.u32 %r37,%r36,0;
@ %r37 bra $L40;
.loc 1 253 9
add.u32 %r28,%r28,2;
.loc 1 254 9
shl.b32 %r29,%r29,2;
$L40:
.loc 1 256 6
setp.lt.s32 %r38,%r29,0;
@ %r38 bra $L36;
.loc 1 258 8
add.u32 %r28,%r28,1;
.loc 1 259 15
and.b32 %r39,%r29,1073741824;
.loc 1 259 10
setp.ne.u32 %r40,%r39,0;
.loc 1 260 9
selp.u32 %r28,%r28,32,%r40;
$L36:
.loc 1 263 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __lo0bits
.visible .func (.param .u32 %value_out) __lo0bits (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r37;
.reg .pred %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .pred %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .u32 %r51;
.reg .pred %r52;
.reg .pred %r53;
mov.u64 %r34,%ar0;
.loc 1 269 20
ld.u32 %r32,[%r34];
.loc 1 271 9
and.b32 %r35,%r32,7;
.loc 1 271 6
setp.eq.u32 %r36,%r35,0;
@ %r36 bra $L44;
.loc 1 273 13
and.b32 %r37,%r32,1;
.loc 1 273 10
setp.ne.u32 %r38,%r37,0;
@ %r38 bra $L52;
.loc 1 275 13
and.b32 %r39,%r32,2;
.loc 1 275 10
setp.eq.u32 %r40,%r39,0;
@ %r40 bra $L46;
.loc 1 277 11
shr.u32 %r41,%r32,1;
.loc 1 277 7
st.u32 [%r34],%r41;
.loc 1 278 11
mov.u32 %r33,1;
bra $L43;
$L46:
.loc 1 280 14
shr.u32 %r42,%r32,2;
.loc 1 280 10
st.u32 [%r34],%r42;
.loc 1 281 14
mov.u32 %r33,2;
bra $L43;
$L44:
.loc 1 284 11
and.b32 %r43,%r32,65535;
.loc 1 284 6
setp.ne.u32 %r44,%r43,0;
@ %r44 bra $L53;
.loc 1 287 9
shr.u32 %r32,%r32,16;
.loc 1 286 9
mov.u32 %r33,16;
bra $L47;
$L53:
.loc 1 283 5
mov.u32 %r33,%r35;
$L47:
.loc 1 289 11
and.b32 %r45,%r32,255;
.loc 1 289 6
setp.ne.u32 %r46,%r45,0;
@ %r46 bra $L48;
.loc 1 291 9
add.u32 %r33,%r33,8;
.loc 1 292 9
shr.u32 %r32,%r32,8;
$L48:
.loc 1 294 11
and.b32 %r47,%r32,15;
.loc 1 294 6
setp.ne.u32 %r48,%r47,0;
@ %r48 bra $L49;
.loc 1 296 9
add.u32 %r33,%r33,4;
.loc 1 297 9
shr.u32 %r32,%r32,4;
$L49:
.loc 1 299 11
and.b32 %r49,%r32,3;
.loc 1 299 6
setp.ne.u32 %r50,%r49,0;
@ %r50 bra $L50;
.loc 1 301 9
add.u32 %r33,%r33,2;
.loc 1 302 9
shr.u32 %r32,%r32,2;
$L50:
.loc 1 304 11
and.b32 %r51,%r32,1;
.loc 1 304 6
setp.ne.u32 %r52,%r51,0;
@ %r52 bra $L51;
.loc 1 306 8
add.u32 %r33,%r33,1;
.loc 1 307 9
shr.u32 %r32,%r32,1;
.loc 1 308 10
setp.eq.u32 %r53,%r32,0;
@ %r53 bra $L54;
$L51:
.loc 1 311 6
st.u32 [%r34],%r32;
.loc 1 312 10
bra $L43;
$L52:
.loc 1 274 9
mov.u32 %r33,0;
bra $L43;
$L54:
.loc 1 309 9
mov.u32 %r33,32;
$L43:
.loc 1 313 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __i2b
.visible .func (.param .u64 %value_out) __i2b (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .pred %r28;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .pred %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u32 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
mov.u64 %r26,%ar0;
mov.u32 %r27,%ar1;
.loc 1 103 7
ld.u64 %r23,[%r26+120];
.loc 1 103 6
setp.ne.u64 %r28,%r23,0;
@ %r28 bra $L56;
.loc 1 106 53
mov.u64 %r31,65;
mov.u64 %r30,8;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
call (%value_in),_calloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r32,[%value_in];
}
mov.u64 %r23,%r32;
.loc 1 106 31
st.u64 [%r26+120],%r23;
.loc 1 109 10
setp.eq.u64 %r33,%r23,0;
@ %r33 bra $L57;
$L56:
.loc 1 115 11
ld.u64 %r25,[%r23+8];
.loc 1 115 6
setp.eq.u64 %r34,%r25,0;
@ %r34 bra $L58;
.loc 1 117 38
ld.u64 %r24,[%r25];
.loc 1 117 34
st.u64 [%r23+8],%r24;
bra $L59;
$L58:
.loc 1 123 24
mov.u64 %r37,36;
mov.u64 %r36,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r36;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r37;
call (%value_in),_calloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r38,[%value_in];
}
mov.u64 %r25,%r38;
.loc 1 127 10
setp.eq.u64 %r39,%r25,0;
@ %r39 bra $L57;
.loc 1 128 14
mov.u64 %r40,8589934593;
st.u64 [%r25+8],%r40;
bra $L59;
$L57:
.loc 1 320 7
cvta.const.u64 %r44,$LC0;
mov.u64 %r43,0;
mov.u32 %r42,320;
cvta.const.u64 %r41,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r42;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r43;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r44;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L59:
.loc 1 321 12
st.u32 [%r25+24],%r27;
.loc 1 131 13
mov.u64 %r45,4294967296;
st.u64 [%r25+16],%r45;
.loc 1 324 1
mov.u64 %value,%r25;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __multiply
.visible .func (.param .u64 %value_out) __multiply (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r31;
.reg .u32 %r32;
.reg .u32 %r35;
.reg .u32 %r56;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r70;
.reg .u32 %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r75;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r87;
.reg .u64 %r99;
.reg .u64 %r100;
.reg .u64 %r101;
.reg .u32 %r102;
.reg .u64 %r103;
.reg .pred %r104;
.reg .u32 %r105;
.reg .pred %r106;
.reg .u64 %r109;
.reg .pred %r110;
.reg .u64 %r111;
.reg .u32 %r112;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .pred %r117;
.reg .u64 %r118;
.reg .u64 %r119;
.reg .u64 %r120;
.reg .u64 %r121;
.reg .pred %r122;
.reg .u32 %r123;
.reg .pred %r124;
.reg .pred %r125;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .pred %r128;
.reg .u64 %r129;
.reg .u64 %r131;
.reg .u64 %r133;
.reg .pred %r134;
.reg .u32 %r135;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u32 %r141;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .pred %r147;
.reg .u64 %r148;
.reg .pred %r149;
.reg .u32 %r150;
.reg .u32 %r153;
.reg .u32 %r154;
.reg .u32 %r155;
.reg .u32 %r156;
.reg .u32 %r157;
.reg .u32 %r158;
.reg .u32 %r159;
.reg .u32 %r161;
.reg .u32 %r162;
.reg .u32 %r163;
.reg .pred %r164;
.reg .u64 %r165;
.reg .pred %r166;
.reg .pred %r167;
.reg .u32 %r168;
.reg .pred %r169;
.reg .u64 %r171;
.reg .u32 %r172;
mov.u64 %r99,%ar0;
mov.u64 %r100,%ar1;
mov.u64 %r101,%ar2;
.loc 1 337 8
ld.u32 %r22,[%r100+20];
.loc 1 337 18
ld.u32 %r23,[%r101+20];
.loc 1 337 6
setp.lt.s32 %r104,%r22,%r23;
@ %r104 bra $L67;
mov.u32 %r102,%r23;
mov.u32 %r23,%r22;
mov.u32 %r22,%r102;
mov.u64 %r103,%r101;
mov.u64 %r101,%r100;
mov.u64 %r100,%r103;
$L67:
.loc 1 343 5
ld.u32 %r60,[%r101+8];
.loc 1 346 6
add.u32 %r71,%r23,%r22;
.loc 1 347 6
ld.u32 %r105,[%r101+12];
setp.ge.s32 %r106,%r105,%r71;
@ %r106 bra $L68;
.loc 1 348 6
add.u32 %r60,%r60,1;
$L68:
.loc 1 349 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r99;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r60;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r109,[%value_in];
}
setp.ne.u64 %r110,%r109,0;
@ %r110 bra $L69;
cvta.const.u64 %r114,$LC0;
mov.u32 %r112,349;
cvta.const.u64 %r111,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r112;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r109;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r114;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L69:
.loc 1 350 10
add.u64 %r81,%r109,24;
.loc 1 350 26
cvt.s64.s32 %r115,%r71;
shl.b64 %r116,%r115,2;
.loc 1 350 22
add.u64 %r70,%r81,%r116;
.loc 1 350 3
setp.lt.u64 %r117,%r81,%r70;
@ %r117 bra $L84;
$L73:
.loc 1 352 6
add.u64 %r171,%r101,24;
.loc 1 353 12
cvt.s64.s32 %r118,%r23;
shl.b64 %r119,%r118,2;
.loc 1 353 7
add.u64 %r67,%r171,%r119;
.loc 1 354 6
add.u64 %r80,%r100,24;
.loc 1 355 12
cvt.s64.s32 %r120,%r22;
shl.b64 %r121,%r120,2;
.loc 1 355 7
add.u64 %r68,%r80,%r121;
.loc 1 358 3
setp.lt.u64 %r122,%r80,%r68;
@ %r122 bra $L71;
bra $L72;
$L84:
.loc 1 350 3
mov.u64 %r82,%r81;
.loc 1 351 8
mov.u32 %r123,0;
$L70:
st.u32 [%r82],%r123;
.loc 1 350 41
add.u64 %r82,%r82,4;
.loc 1 350 3
setp.gt.u64 %r124,%r70,%r82;
@ %r124 bra $L70;
bra $L73;
$L72:
.loc 1 413 3
setp.gt.s32 %r125,%r71,0;
@ %r125 bra $L74;
bra $L75;
$L71:
add.u64 %r127,%r101,25;
setp.lt.u64 %r128,%r67,%r127;
@ %r128 bra $L76;
sub.u64 %r129,%r67,%r101;
add.u64 %r131,%r129,-25;
and.b64 %r133,%r131,-4;
add.u64 %r126,%r133,4;
bra $L77;
$L76:
mov.u64 %r126,4;
$L77:
.loc 1 364 10
mov.u32 %r172,0;
$L82:
.loc 1 360 16
ld.u32 %r31,[%r80];
.loc 1 360 14
and.b32 %r72,%r31,65535;
.loc 1 360 10
setp.eq.u32 %r134,%r72,0;
@ %r134 bra $L78;
mov.u64 %r83,%r81;
.loc 1 362 6
mov.u64 %r63,%r171;
.loc 1 364 10
mov.u32 %r61,%r172;
$L79:
.loc 1 367 13
ld.u32 %r32,[%r63];
.loc 1 367 33
ld.u32 %r35,[%r83];
.loc 1 367 16
and.b32 %r135,%r32,65535;
.loc 1 367 37
and.b32 %r137,%r35,65535;
.loc 1 367 30
mad.lo.u32 %r138,%r135,%r72,%r137;
.loc 1 367 10
add.u32 %r73,%r138,%r61;
.loc 1 369 16
add.u64 %r63,%r63,4;
.loc 1 369 19
shr.u32 %r139,%r32,16;
.loc 1 369 37
shr.u32 %r141,%r35,16;
.loc 1 369 30
mad.lo.u32 %r142,%r139,%r72,%r141;
.loc 1 368 14
shr.u32 %r143,%r73,16;
.loc 1 369 11
add.u32 %r75,%r142,%r143;
.loc 1 370 14
shr.u32 %r61,%r75,16;
.loc 1 371 8
shl.b32 %r144,%r75,16;
and.b32 %r145,%r73,65535;
or.b32 %r146,%r144,%r145;
st.u32 [%r83],%r146;
.loc 1 373 4
add.u64 %r83,%r83,4;
setp.gt.u64 %r147,%r67,%r63;
@ %r147 bra $L79;
.loc 1 374 8
add.u64 %r148,%r81,%r126;
st.u32 [%r148],%r61;
.loc 1 376 16
ld.u32 %r31,[%r80];
$L78:
.loc 1 376 14
shr.u32 %r76,%r31,16;
.loc 1 376 10
setp.eq.u32 %r149,%r76,0;
@ %r149 bra $L80;
.loc 1 381 7
ld.u32 %r65,[%r81];
mov.u64 %r87,%r171;
mov.u32 %r56,%r65;
mov.u64 %r64,%r81;
.loc 1 380 10
mov.u32 %r62,%r172;
$L81:
.loc 1 384 16
ld.u16 %r150,[%r87];
.loc 1 384 37
shr.u32 %r153,%r56,16;
.loc 1 384 30
mad.lo.u32 %r154,%r150,%r76,%r153;
.loc 1 384 10
add.u32 %r77,%r154,%r62;
.loc 1 386 8
add.u64 %r64,%r64,4;
shl.b32 %r155,%r77,16;
and.b32 %r156,%r65,65535;
or.b32 %r157,%r155,%r156;
st.u32 [%r64+-4],%r157;
.loc 1 387 33
ld.u32 %r56,[%r64];
.loc 1 387 19
ld.u32 %r159,[%r87];
shr.u32 %r158,%r159,16;
.loc 1 387 37
and.b32 %r161,%r56,65535;
.loc 1 387 30
mad.lo.u32 %r162,%r158,%r76,%r161;
.loc 1 385 14
shr.u32 %r163,%r77,16;
.loc 1 387 11
add.u32 %r65,%r162,%r163;
.loc 1 388 14
shr.u32 %r62,%r65,16;
.loc 1 390 4
add.u64 %r87,%r87,4;
setp.gt.u64 %r164,%r67,%r87;
@ %r164 bra $L81;
.loc 1 391 8
add.u64 %r165,%r81,%r126;
st.u32 [%r165],%r65;
$L80:
.loc 1 358 22
add.u64 %r80,%r80,4;
.loc 1 358 29
add.u64 %r81,%r81,4;
.loc 1 358 3
setp.gt.u64 %r166,%r68,%r80;
@ %r166 bra $L82;
bra $L72;
$L83:
.loc 1 413 54
add.u32 %r71,%r71,-1;
.loc 1 413 3
setp.eq.u32 %r167,%r71,0;
@ %r167 bra $L75;
$L74:
.loc 1 413 43
add.u64 %r70,%r70,-4;
ld.u32 %r168,[%r70];
setp.eq.u32 %r169,%r168,0;
@ %r169 bra $L83;
$L75:
.loc 1 414 11
st.u32 [%r109+20],%r71;
.loc 1 416 1
mov.u64 %value,%r109;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __pow5mult
.visible .func (.param .u64 %value_out) __pow5mult (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u64 %r45;
.reg .u32 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .pred %r51;
.reg .pred %r52;
.reg .u32 %r54;
.reg .u64 %r55;
.reg .pred %r56;
.reg .u64 %r57;
.reg .u32 %r58;
.reg .u64 %r60;
.reg .u32 %r61;
.reg .u64 %r63;
.reg .u32 %r64;
.reg .pred %r65;
.reg .u64 %r69;
.reg .pred %r70;
.reg .u64 %r71;
.reg .u64 %r72;
.reg .u64 %r73;
.reg .pred %r74;
.reg .pred %r75;
.reg .u64 %r79;
.reg .u64 %r80;
mov.u64 %r37,%ar0;
mov.u64 %r38,%ar1;
mov.u32 %r39,%ar2;
.loc 1 425 10
and.b32 %r26,%r39,3;
.loc 1 425 6
setp.eq.u32 %r40,%r26,0;
@ %r40 bra $L100;
.loc 1 426 9
cvta.const.u64 %r45,p05$0;
.loc 1 426 32
add.u32 %r46,%r26,-1;
.loc 1 426 9
cvt.s64.s32 %r47,%r46;
shl.b64 %r48,%r47,2;
add.u64 %r49,%r45,%r48;
mov.u32 %r44,0;
ld.u32 %r43,[%r49];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r43;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r44;
call (%value_in),__multadd,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r50,[%value_in];
}
mov.u64 %r38,%r50;
$L100:
.loc 1 428 11
shr.s32 %r25,%r39,2;
.loc 1 428 6
setp.eq.u32 %r51,%r25,0;
@ %r51 bra $L107;
.loc 1 431 12
ld.u64 %r27,[%r37+112];
.loc 1 431 6
setp.ne.u64 %r52,%r27,0;
@ %r52 bra $L102;
.loc 1 320 7
mov.u32 %r54,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r54;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r55,[%value_in];
}
mov.u64 %r27,%r55;
setp.ne.u64 %r56,%r55,0;
@ %r56 bra $L103;
cvta.const.u64 %r60,$LC0;
mov.u32 %r58,320;
cvta.const.u64 %r57,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r57;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r58;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r55;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r60;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L103:
.loc 1 321 12
mov.u32 %r61,625;
st.u32 [%r27+24],%r61;
.loc 1 322 11
st.u32 [%r27+20],%r54;
.loc 1 434 31
st.u64 [%r37+112],%r27;
.loc 1 435 17
mov.u64 %r63,0;
st.u64 [%r27],%r63;
$L102:
.loc 1 420 1
mov.u64 %r36,%r38;
bra $L104;
$L106:
mov.u64 %r27,%r29;
$L104:
.loc 1 439 13
and.b32 %r64,%r25,1;
.loc 1 439 10
setp.eq.u32 %r65,%r64,0;
@ %r65 bra $L105;
.loc 1 441 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r36;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
call (%value_in),__multiply,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r69,[%value_in];
}
.loc 1 139 6
setp.eq.u64 %r70,%r36,0;
@ %r70 bra $L108;
.loc 1 141 43
ld.s32 %r71,[%r36+8];
.loc 1 141 41
shl.b64 %r72,%r71,3;
ld.u64 %r73,[%r37+120];
add.u64 %r34,%r73,%r72;
ld.u64 %r35,[%r34];
.loc 1 141 16
st.u64 [%r36],%r35;
.loc 1 142 38
st.u64 [%r34],%r36;
.loc 1 443 6
mov.u64 %r36,%r69;
bra $L105;
$L108:
mov.u64 %r36,%r69;
$L105:
.loc 1 445 15
shr.s32 %r25,%r25,1;
.loc 1 445 10
setp.eq.u32 %r74,%r25,0;
@ %r74 bra $L99;
.loc 1 447 17
ld.u64 %r29,[%r27];
.loc 1 447 10
setp.ne.u64 %r75,%r29,0;
@ %r75 bra $L106;
.loc 1 449 22
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
call (%value_in),__multiply,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r79,[%value_in];
}
mov.u64 %r29,%r79;
.loc 1 449 20
st.u64 [%r27],%r29;
.loc 1 450 15
mov.u64 %r80,0;
st.u64 [%r79],%r80;
bra $L106;
$L107:
.loc 1 429 12
mov.u64 %r36,%r38;
$L99:
.loc 1 455 1
mov.u64 %value,%r36;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __lshift
.visible .func (.param .u64 %value_out) __lshift (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r67;
.reg .u64 %r69;
.reg .u64 %r73;
.reg .u64 %r81;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u32 %r85;
.reg .u32 %r86;
.reg .pred %r87;
.reg .pred %r89;
.reg .u64 %r92;
.reg .pred %r93;
.reg .u64 %r94;
.reg .u32 %r95;
.reg .u64 %r97;
.reg .pred %r98;
.reg .u32 %r99;
.reg .u64 %r100;
.reg .u64 %r101;
.reg .u64 %r102;
.reg .u32 %r103;
.reg .pred %r104;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .pred %r110;
.reg .u32 %r111;
.reg .u32 %r112;
.reg .u32 %r113;
.reg .u32 %r114;
.reg .u32 %r115;
.reg .pred %r116;
.reg .u64 %r117;
.reg .u64 %r118;
.reg .pred %r119;
.reg .u64 %r120;
.reg .u64 %r122;
.reg .u64 %r124;
.reg .u64 %r125;
.reg .pred %r126;
.reg .pred %r127;
.reg .u64 %r128;
.reg .u64 %r129;
.reg .u64 %r130;
mov.u64 %r83,%ar0;
mov.u64 %r84,%ar1;
mov.u32 %r85,%ar2;
.loc 1 465 5
shr.s32 %r40,%r85,5;
.loc 1 469 6
ld.u32 %r46,[%r84+8];
.loc 1 470 10
ld.u32 %r86,[%r84+20];
add.u32 %r23,%r40,%r86;
.loc 1 470 6
add.u32 %r41,%r23,1;
.loc 1 471 10
ld.u32 %r47,[%r84+12];
.loc 1 471 3
setp.le.s32 %r87,%r41,%r47;
@ %r87 bra $L119;
$L120:
.loc 1 472 7
add.u32 %r46,%r46,1;
.loc 1 471 34
add.u32 %r47,%r47,%r47;
.loc 1 471 3
setp.gt.s32 %r89,%r41,%r47;
@ %r89 bra $L120;
$L119:
.loc 1 473 8
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r83;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r46;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r92,[%value_in];
}
setp.ne.u64 %r93,%r92,0;
@ %r93 bra $L121;
cvta.const.u64 %r97,$LC0;
mov.u32 %r95,473;
cvta.const.u64 %r94,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r94;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r95;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r92;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r97;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L121:
.loc 1 474 6
add.u64 %r36,%r92,24;
.loc 1 475 3
setp.le.s32 %r98,%r40,0;
@ %r98 bra $L122;
mov.u64 %r73,%r36;
add.u32 %r99,%r40,-1;
cvt.u64.u32 %r100,%r99;
shl.b64 %r101,%r100,2;
add.u64 %r102,%r101,28;
add.u64 %r81,%r92,%r102;
.loc 1 476 11
mov.u32 %r103,0;
$L123:
st.u32 [%r73],%r103;
.loc 1 475 3
add.u64 %r73,%r73,4;
setp.ne.u64 %r104,%r73,%r81;
@ %r104 bra $L123;
.loc 1 476 8
cvt.u64.u32 %r105,%r40;
shl.b64 %r106,%r105,2;
add.u64 %r36,%r36,%r106;
$L122:
.loc 1 477 5
add.u64 %r107,%r84,24;
.loc 1 478 13
ld.s32 %r108,[%r84+20];
.loc 1 478 10
shl.b64 %r109,%r108,2;
.loc 1 478 6
add.u64 %r43,%r107,%r109;
.loc 1 480 9
and.b32 %r44,%r85,31;
.loc 1 480 6
setp.eq.u32 %r110,%r44,0;
@ %r110 bra $L124;
.loc 1 482 10
mov.u32 %r111,32;
sub.u32 %r45,%r111,%r44;
mov.u64 %r35,%r107;
mov.u64 %r34,%r36;
.loc 1 483 9
mov.u32 %r39,0;
$L125:
.loc 1 486 15
ld.u32 %r113,[%r35];
shl.b32 %r112,%r113,%r44;
.loc 1 486 20
or.b32 %r114,%r112,%r39;
.loc 1 486 10
st.u32 [%r34],%r114;
.loc 1 487 6
ld.u32 %r115,[%r35];
shr.u32 %r39,%r115,%r45;
.loc 1 489 7
add.u64 %r35,%r35,4;
add.u64 %r34,%r34,4;
setp.gt.u64 %r116,%r43,%r35;
@ %r116 bra $L125;
.loc 1 486 7
add.u64 %r118,%r84,25;
setp.lt.u64 %r119,%r43,%r118;
@ %r119 bra $L126;
sub.u64 %r120,%r43,%r84;
add.u64 %r122,%r120,-25;
and.b64 %r124,%r122,-4;
add.u64 %r117,%r124,4;
bra $L127;
$L126:
mov.u64 %r117,4;
$L127:
.loc 1 490 16
add.u64 %r125,%r36,%r117;
st.u32 [%r125],%r39;
.loc 1 490 10
setp.eq.u32 %r126,%r39,0;
.loc 1 470 6
selp.u32 %r23,%r23,%r41,%r126;
bra $L128;
$L124:
mov.u64 %r67,%r107;
mov.u64 %r69,%r36;
$L129:
.loc 1 510 15
ld.u32 %r33,[%r67];
.loc 1 510 13
st.u32 [%r69],%r33;
.loc 1 511 5
add.u64 %r67,%r67,4;
add.u64 %r69,%r69,4;
setp.gt.u64 %r127,%r43,%r67;
@ %r127 bra $L129;
$L128:
.loc 1 512 12
st.u32 [%r92+20],%r23;
.loc 1 141 43
ld.s32 %r128,[%r84+8];
.loc 1 141 41
shl.b64 %r129,%r128,3;
ld.u64 %r130,[%r83+120];
add.u64 %r52,%r130,%r129;
ld.u64 %r53,[%r52];
.loc 1 141 16
st.u64 [%r84],%r53;
.loc 1 142 38
st.u64 [%r52],%r84;
.loc 1 515 1
mov.u64 %value,%r92;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __mcmp
.visible .func (.param .u32 %value_out) __mcmp (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .pred %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .pred %r38;
.reg .pred %r39;
.reg .pred %r40;
mov.u64 %r33,%ar0;
mov.u64 %r34,%ar1;
.loc 1 523 5
ld.u32 %r28,[%r33+20];
.loc 1 524 5
ld.u32 %r29,[%r34+20];
.loc 1 531 9
sub.u32 %r32,%r28,%r29;
.loc 1 531 6
setp.ne.u32 %r35,%r28,%r29;
@ %r35 bra $L136;
.loc 1 533 7
add.u64 %r30,%r33,24;
.loc 1 534 12
cvt.s64.s32 %r36,%r29;
shl.b64 %r23,%r36,2;
.loc 1 534 6
add.u64 %r26,%r30,%r23;
.loc 1 535 7
add.u64 %r37,%r34,24;
.loc 1 536 6
add.u64 %r27,%r37,%r23;
$L139:
.loc 1 539 10
add.u64 %r26,%r26,-4;
.loc 1 539 11
ld.u32 %r24,[%r26];
.loc 1 539 10
add.u64 %r27,%r27,-4;
.loc 1 539 20
ld.u32 %r25,[%r27];
.loc 1 539 10
setp.eq.u32 %r38,%r24,%r25;
@ %r38 bra $L138;
.loc 1 540 24
setp.lt.u32 %r39,%r24,%r25;
selp.u32 %r32,-1,1,%r39;
bra $L136;
$L138:
.loc 1 541 10
setp.lt.u64 %r40,%r30,%r26;
@ %r40 bra $L139;
$L136:
.loc 1 545 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __mdiff
.visible .func (.param .u64 %value_out) __mdiff (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r27;
.reg .u32 %r29;
.reg .u32 %r43;
.reg .u32 %r53;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u64 %r61;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u32 %r70;
.reg .u64 %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u64 %r75;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u64 %r79;
.reg .u64 %r81;
.reg .u64 %r83;
.reg .u32 %r84;
.reg .u64 %r85;
.reg .u32 %r86;
.reg .u64 %r93;
.reg .u64 %r96;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r106;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u64 %r110;
.reg .u64 %r111;
.reg .pred %r112;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .pred %r115;
.reg .pred %r116;
.reg .pred %r117;
.reg .u64 %r118;
.reg .u32 %r119;
.reg .u64 %r121;
.reg .u32 %r122;
.reg .u32 %r126;
.reg .u64 %r127;
.reg .pred %r128;
.reg .u64 %r129;
.reg .u32 %r130;
.reg .u64 %r132;
.reg .u64 %r133;
.reg .u64 %r134;
.reg .u64 %r135;
.reg .u64 %r136;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .pred %r146;
.reg .u64 %r147;
.reg .u64 %r149;
.reg .u64 %r150;
.reg .u64 %r152;
.reg .u64 %r154;
.reg .pred %r155;
.reg .u32 %r156;
.reg .u32 %r157;
.reg .u32 %r158;
.reg .u32 %r159;
.reg .u32 %r160;
.reg .pred %r161;
.reg .u64 %r162;
.reg .u64 %r163;
.reg .u64 %r165;
.reg .pred %r166;
.reg .u32 %r167;
.reg .pred %r168;
.reg .u32 %r171;
.reg .u64 %r172;
.reg .pred %r173;
.reg .pred %r174;
.reg .pred %r175;
mov.u64 %r107,%ar0;
mov.u64 %r108,%ar1;
mov.u64 %r109,%ar2;
.loc 1 523 5
ld.u32 %r77,[%r108+20];
.loc 1 524 5
ld.u32 %r78,[%r109+20];
.loc 1 531 9
sub.u32 %r55,%r77,%r78;
.loc 1 531 6
setp.ne.u32 %r112,%r77,%r78;
@ %r112 bra $L143;
.loc 1 533 7
add.u64 %r79,%r108,24;
.loc 1 534 12
cvt.s64.s32 %r113,%r78;
shl.b64 %r81,%r113,2;
.loc 1 534 6
add.u64 %r83,%r79,%r81;
.loc 1 535 7
add.u64 %r114,%r109,24;
.loc 1 536 6
add.u64 %r85,%r114,%r81;
$L147:
.loc 1 539 10
add.u64 %r83,%r83,-4;
.loc 1 539 11
ld.u32 %r84,[%r83];
.loc 1 539 10
add.u64 %r85,%r85,-4;
.loc 1 539 20
ld.u32 %r86,[%r85];
.loc 1 539 10
setp.eq.u32 %r115,%r84,%r86;
@ %r115 bra $L144;
.loc 1 540 24
setp.ge.u32 %r116,%r84,%r86;
@ %r116 bra $L145;
mov.u64 %r110,%r108;
mov.u64 %r108,%r109;
mov.u64 %r109,%r110;
.loc 1 572 9
mov.u32 %r55,1;
bra $L145;
$L144:
.loc 1 541 10
setp.ge.u64 %r117,%r79,%r83;
@ ! %r117 bra $L147;
bra $L146;
$L159:
.loc 1 562 11
cvta.const.u64 %r121,$LC0;
mov.u32 %r119,562;
cvta.const.u64 %r118,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r118;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r119;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r172;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r121;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L166:
.loc 1 563 15
mov.u32 %r122,1;
st.u32 [%r106+20],%r122;
.loc 1 564 16
st.u32 [%r106+24],%r171;
.loc 1 565 14
bra $L142;
$L161:
.loc 1 575 7
mov.u32 %r55,0;
$L145:
.loc 1 576 7
ld.u32 %r126,[%r108+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r107;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r126;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r127,[%value_in];
}
mov.u64 %r106,%r127;
setp.ne.u64 %r128,%r127,0;
@ %r128 bra $L149;
cvta.const.u64 %r132,$LC0;
mov.u32 %r130,576;
cvta.const.u64 %r129,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r129;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r130;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r127;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r132;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L149:
.loc 1 577 12
st.u32 [%r127+16],%r55;
.loc 1 578 6
ld.u32 %r72,[%r108+20];
.loc 1 579 6
add.u64 %r63,%r108,24;
.loc 1 580 12
cvt.s64.s32 %r133,%r72;
shl.b64 %r134,%r133,2;
.loc 1 580 7
add.u64 %r64,%r63,%r134;
.loc 1 582 6
add.u64 %r59,%r109,24;
.loc 1 583 12
ld.s32 %r135,[%r109+20];
shl.b64 %r136,%r135,2;
.loc 1 583 7
add.u64 %r66,%r59,%r136;
.loc 1 584 6
add.u64 %r67,%r127,24;
mov.u64 %r57,%r67;
.loc 1 579 6
mov.u64 %r58,%r63;
.loc 1 585 10
mov.u32 %r56,0;
$L150:
.loc 1 589 12
ld.u32 %r27,[%r58];
.loc 1 589 29
ld.u32 %r29,[%r59];
.loc 1 589 16
and.b32 %r137,%r27,65535;
.loc 1 589 43
add.u32 %r138,%r137,%r56;
.loc 1 589 33
and.b32 %r139,%r29,65535;
.loc 1 589 43
sub.u32 %r68,%r138,%r139;
.loc 1 592 15
add.u64 %r58,%r58,4;
.loc 1 592 31
add.u64 %r59,%r59,4;
.loc 1 592 18
shr.u32 %r140,%r27,16;
.loc 1 592 34
shr.u32 %r141,%r29,16;
.loc 1 592 25
sub.u32 %r142,%r140,%r141;
.loc 1 590 14
shr.s32 %r143,%r68,16;
.loc 1 592 41
add.u32 %r70,%r142,%r143;
.loc 1 593 14
shr.s32 %r56,%r70,16;
.loc 1 595 7
shl.b32 %r144,%r70,16;
and.b32 %r145,%r68,65535;
or.b32 %r53,%r144,%r145;
st.u32 [%r57],%r53;
.loc 1 597 3
add.u64 %r57,%r57,4;
setp.gt.u64 %r146,%r66,%r59;
@ %r146 bra $L150;
add.u64 %r96,%r109,25;
sub.u64 %r147,%r66,%r109;
add.u64 %r149,%r147,-25;
shr.u64 %r93,%r149,2;
setp.lt.u64 %r175,%r66,%r96;
@ %r175 bra $L151;
shl.b64 %r150,%r93,2;
bra $L152;
$L151:
mov.u64 %r150,0;
$L152:
add.u64 %r71,%r67,%r150;
@ %r175 bra $L153;
add.u64 %r154,%r93,1;
shl.b64 %r152,%r154,2;
bra $L154;
$L153:
mov.u64 %r152,4;
$L154:
.loc 1 592 15
add.u64 %r104,%r63,%r152;
.loc 1 595 7
add.u64 %r103,%r67,%r152;
.loc 1 598 9
setp.le.u64 %r155,%r64,%r104;
@ %r155 bra $L155;
mov.u64 %r61,%r103;
mov.u64 %r75,%r104;
$L156:
.loc 1 600 12
ld.u32 %r43,[%r75];
.loc 1 600 16
and.b32 %r156,%r43,65535;
.loc 1 600 26
add.u32 %r73,%r156,%r56;
.loc 1 603 15
add.u64 %r75,%r75,4;
.loc 1 603 18
shr.u32 %r157,%r43,16;
.loc 1 601 14
shr.s32 %r158,%r73,16;
.loc 1 603 25
add.u32 %r76,%r157,%r158;
.loc 1 604 14
shr.s32 %r56,%r76,16;
.loc 1 606 7
shl.b32 %r159,%r76,16;
and.b32 %r160,%r73,65535;
or.b32 %r53,%r159,%r160;
st.u32 [%r61],%r53;
.loc 1 598 9
add.u64 %r61,%r61,4;
setp.gt.u64 %r161,%r64,%r75;
@ %r161 bra $L156;
add.u64 %r162,%r64,-1;
sub.u64 %r163,%r162,%r104;
and.b64 %r165,%r163,-4;
add.u64 %r71,%r103,%r165;
$L155:
.loc 1 625 9
setp.ne.u32 %r166,%r53,0;
@ %r166 bra $L157;
$L158:
.loc 1 626 7
add.u32 %r72,%r72,-1;
.loc 1 625 9
add.u64 %r71,%r71,-4;
ld.u32 %r167,[%r71];
setp.eq.u32 %r168,%r167,0;
@ %r168 bra $L158;
$L157:
.loc 1 627 11
st.u32 [%r127+20],%r72;
.loc 1 628 10
bra $L142;
$L146:
.loc 1 562 11
mov.u32 %r171,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r107;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r171;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r172,[%value_in];
}
mov.u64 %r106,%r172;
setp.eq.u64 %r173,%r106,0;
@ ! %r173 bra $L166;
bra $L159;
$L143:
.loc 1 567 6
setp.ge.s32 %r174,%r55,0;
@ %r174 bra $L161;
mov.u64 %r111,%r108;
mov.u64 %r108,%r109;
mov.u64 %r109,%r111;
.loc 1 572 9
mov.u32 %r55,1;
bra $L145;
$L142:
.loc 1 629 1
mov.u64 %value,%r106;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ulp
.visible .func (.param .f64 %value_out) __ulp (.param .f64 %in_ar0)
{
.reg .f64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r27;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u64 %r32;
.reg .f64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
mov.f64 %r34,%ar0;
.loc 1 639 18
mov.b64 %r35,%r34;
shr.u64 %r36,%r35,32;
cvt.u32.u64 %r38,%r36;
and.b32 %r37,%r38,2146435072;
.loc 1 639 30
add.u32 %r23,%r37,-54525952;
.loc 1 641 6
setp.le.s32 %r39,%r23,0;
@ %r39 bra $L168;
.loc 1 647 17
cvt.u64.u32 %r40,%r23;
.loc 1 649 17
shl.b64 %r32,%r40,32;
bra $L169;
$L168:
.loc 1 656 11
neg.s32 %r24,%r23;
.loc 1 656 9
shr.s32 %r29,%r24,20;
.loc 1 657 10
setp.gt.s32 %r45,%r24,20971519;
@ %r45 bra $L170;
.loc 1 659 24
mov.u32 %r47,524288;
shr.s32 %r46,%r47,%r29;
.loc 1 659 14
cvt.u64.u32 %r48,%r46;
.loc 1 661 14
shl.b64 %r32,%r48,32;
bra $L169;
$L170:
.loc 1 666 14
mov.u64 %r32,0;
.loc 1 667 6
add.u32 %r30,%r29,-20;
.loc 1 669 34
setp.gt.s32 %r54,%r30,30;
@ %r54 bra $L172;
mov.u32 %r55,-2147483648;
shr.u32 %r27,%r55,%r30;
bra $L171;
$L172:
mov.u32 %r27,1;
$L171:
.loc 1 669 20
cvt.u64.u32 %r56,%r27;
and.b64 %r57,%r32,-4294967296;
or.b64 %r32,%r57,%r56;
$L169:
.loc 1 674 11
mov.b64 %value,%r32;
.loc 1 675 1
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __b2d
.visible .func (.param .f64 %value_out) __b2d (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r26;
.reg .u32 %r33;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u32 %r44;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .f64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .pred %r63;
.reg .u32 %r64;
.reg .u32 %r65;
.reg .u32 %r66;
.reg .u64 %r67;
.reg .pred %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .pred %r79;
.reg .pred %r80;
.reg .u32 %r82;
.reg .u32 %r83;
.reg .u32 %r84;
.reg .u32 %r85;
.reg .u64 %r86;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u32 %r97;
.reg .u64 %r98;
.reg .u64 %r102;
.reg .u64 %r103;
.reg .u32 %r106;
.reg .u32 %r107;
.reg .u64 %r108;
.reg .pred %r112;
mov.u64 %r55,%ar0;
mov.u64 %r56,%ar1;
.loc 1 690 7
add.u64 %r38,%r55,24;
.loc 1 691 15
ld.s32 %r57,[%r55+20];
.loc 1 691 12
shl.b64 %r58,%r57,2;
.loc 1 691 6
add.u64 %r39,%r38,%r58;
.loc 1 692 5
add.u64 %r40,%r39,-4;
ld.u32 %r41,[%r39+-4];
.loc 1 697 7
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r41;
call (%value_in),__hi0bits,(%out_arg1);
ld.param.u32 %r60,[%value_in];
}
.loc 1 698 11
mov.u32 %r62,32;
sub.u32 %r61,%r62,%r60;
.loc 1 698 6
st.u32 [%r56],%r61;
.loc 1 700 6
setp.gt.s32 %r63,%r60,10;
@ %r63 bra $L174;
.loc 1 702 32
mov.u32 %r64,11;
sub.u32 %r26,%r64,%r60;
.loc 1 702 22
shr.u32 %r65,%r41,%r26;
.loc 1 702 18
or.b32 %r66,%r65,1072693248;
.loc 1 702 10
cvt.u64.u32 %r67,%r66;
shl.b64 %r53,%r67,32;
.loc 1 703 28
setp.ge.u64 %r71,%r38,%r40;
@ %r71 bra $L181;
.loc 1 705 40
ld.u32 %r72,[%r39+-8];
shr.u32 %r48,%r72,%r26;
bra $L175;
$L181:
mov.u32 %r48,0;
$L175:
.loc 1 705 31
add.u32 %r73,%r60,21;
.loc 1 705 14
shl.b32 %r74,%r41,%r73;
.loc 1 705 36
or.b32 %r75,%r74,%r48;
.loc 1 705 10
cvt.u64.u32 %r76,%r75;
and.b64 %r77,%r53,-4294967296;
or.b64 %r53,%r77,%r76;
.loc 1 707 7
bra $L176;
$L174:
.loc 1 710 9
add.u32 %r52,%r60,-11;
.loc 1 709 24
setp.ge.u64 %r79,%r38,%r40;
@ %r79 bra $L177;
ld.u32 %r44,[%r39+-8];
.loc 1 710 6
setp.eq.u32 %r80,%r52,0;
@ %r80 bra $L178;
.loc 1 712 38
sub.u32 %r33,%r62,%r52;
.loc 1 712 22
shl.b32 %r82,%r41,%r52;
.loc 1 712 31
shr.u32 %r83,%r44,%r33;
.loc 1 712 27
or.b32 %r84,%r82,%r83;
or.b32 %r85,%r84,1072693248;
.loc 1 712 10
cvt.u64.u32 %r86,%r85;
shl.b64 %r53,%r86,32;
.loc 1 715 14
shl.b32 %r47,%r44,%r52;
.loc 1 709 24
add.u64 %r90,%r39,-8;
.loc 1 713 28
setp.ge.u64 %r91,%r38,%r90;
@ %r91 bra $L179;
.loc 1 715 23
ld.u32 %r93,[%r39+-12];
shr.u32 %r92,%r93,%r33;
.loc 1 715 19
or.b32 %r47,%r47,%r92;
$L179:
.loc 1 715 10
cvt.u64.u32 %r94,%r47;
and.b64 %r95,%r53,-4294967296;
or.b64 %r53,%r95,%r94;
bra $L176;
$L178:
.loc 1 720 18
or.b32 %r97,%r41,1072693248;
.loc 1 720 10
cvt.u64.u32 %r98,%r97;
.loc 1 722 10
cvt.u64.u32 %r102,%r44;
shl.b64 %r103,%r98,32;
or.b64 %r53,%r103,%r102;
$L176:
.loc 1 750 11
mov.b64 %r54,%r53;
bra $L185;
$L180:
.loc 1 712 22
shl.b32 %r106,%r41,%r52;
.loc 1 712 27
or.b32 %r107,%r106,1072693248;
.loc 1 712 10
cvt.u64.u32 %r108,%r107;
shl.b64 %r53,%r108,32;
mov.u32 %r47,0;
bra $L179;
$L177:
.loc 1 710 6
setp.ne.u32 %r112,%r52,0;
@ %r112 bra $L180;
.loc 1 709 24
mov.u32 %r44,%r52;
bra $L178;
$L185:
.loc 1 751 1
mov.f64 %value,%r54;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __d2b
.visible .func (.param .u64 %value_out) __d2b (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r25;
.reg .u32 %r30;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r50;
.reg .u32 %r51;
.reg .u64 %r54;
.reg .f64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .pred %r61;
.reg .u64 %r62;
.reg .u32 %r63;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .pred %r69;
.reg .u32 %r70;
.reg .u64 %r71;
.reg .pred %r72;
.reg .u64 %r74;
.reg .u32 %r75;
.reg .pred %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u32 %r85;
.reg .u32 %r86;
.reg .u32 %r87;
.reg .pred %r88;
.reg .u32 %r89;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u32 %r94;
.reg .u64 %r95;
.reg .u64 %r96;
.reg .u64 %r97;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .u32 %r101;
mov.u64 %r54,%ar0;
mov.f64 %r55,%ar1;
mov.u64 %r56,%ar2;
mov.u64 %r57,%ar3;
.loc 1 778 7
mov.u32 %r59,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r59;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r60,[%value_in];
}
setp.ne.u64 %r61,%r60,0;
@ %r61 bra $L187;
cvta.const.u64 %r65,$LC0;
mov.u32 %r63,778;
cvta.const.u64 %r62,$LC1;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r62;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r63;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r60;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r65;
call __assert_func,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
trap;
// (noreturn)
exit;
// (noreturn)
}
$L187:
mov.b64 %r66,%r55;
shr.u64 %r67,%r66,32;
cvt.u32.u64 %r50,%r67;
.loc 1 784 10
and.b32 %r22,%r50,1048575;
.loc 1 792 23
shr.u32 %r68,%r50,20;
and.b32 %r23,%r68,2047;
.loc 1 792 6
setp.ne.u32 %r69,%r23,0;
@ %r69 bra $L188;
.loc 1 784 5
st.u32 [%frame],%r22;
bra $L189;
$L188:
.loc 1 793 7
or.b32 %r70,%r22,1048576;
st.u32 [%frame],%r70;
$L189:
mov.b64 %r71,%r55;
cvt.u32.u64 %r51,%r71;
.loc 1 797 6
setp.eq.u32 %r72,%r51,0;
@ %r72 bra $L190;
.loc 1 799 9
st.u32 [%frame+4],%r51;
.loc 1 800 11
add.u64 %r74,%frame,4;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r74;
call (%value_in),__lo0bits,(%out_arg1);
ld.param.u32 %r75,[%value_in];
}
mov.u32 %r46,%r75;
.loc 1 801 10
setp.eq.u32 %r76,%r46,0;
@ %r76 bra $L191;
.loc 1 803 23
ld.u32 %r25,[%frame];
.loc 1 803 30
mov.u32 %r78,32;
sub.u32 %r77,%r78,%r46;
.loc 1 803 23
shl.b32 %r79,%r25,%r77;
.loc 1 803 19
ld.u32 %r81,[%frame+4];
or.b32 %r80,%r79,%r81;
.loc 1 803 15
st.u32 [%r60+24],%r80;
.loc 1 804 6
shr.u32 %r30,%r25,%r46;
st.u32 [%frame],%r30;
bra $L192;
$L191:
.loc 1 807 7
ld.u32 %r82,[%frame+4];
st.u32 [%r60+24],%r82;
.loc 1 808 27
ld.u32 %r30,[%frame];
$L192:
st.u32 [%r60+28],%r30;
.loc 1 808 36
setp.ne.u32 %r83,%r30,0;
selp.u32 %r45,2,1,%r83;
.loc 1 808 19
st.u32 [%r60+20],%r45;
bra $L194;
$L190:
.loc 1 817 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
call (%value_in),__lo0bits,(%out_arg1);
ld.param.u32 %r85,[%value_in];
}
.loc 1 818 12
ld.u32 %r86,[%frame];
st.u32 [%r60+24],%r86;
.loc 1 819 19
mov.u32 %r87,1;
st.u32 [%r60+20],%r87;
.loc 1 821 9
add.u32 %r46,%r85,32;
.loc 1 819 9
mov.u32 %r45,%r87;
$L194:
.loc 1 879 6
setp.eq.u32 %r88,%r23,0;
@ %r88 bra $L195;
.loc 1 886 22
add.u32 %r89,%r23,-1075;
.loc 1 886 32
add.u32 %r90,%r89,%r46;
.loc 1 886 10
st.u32 [%r56],%r90;
.loc 1 887 17
mov.u32 %r92,53;
sub.u32 %r91,%r92,%r46;
.loc 1 887 13
st.u32 [%r57],%r91;
bra $L186;
$L195:
.loc 1 893 36
add.u32 %r93,%r46,-1074;
.loc 1 893 10
st.u32 [%r56],%r93;
.loc 1 895 34
cvt.s64.s32 %r95,%r45;
.loc 1 895 24
shl.b64 %r96,%r95,2;
add.u64 %r97,%r60,%r96;
ld.u32 %r94,[%r97+20];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r94;
call (%value_in),__hi0bits,(%out_arg1);
ld.param.u32 %r99,[%value_in];
}
.loc 1 895 18
shl.b32 %r100,%r45,5;
.loc 1 895 22
sub.u32 %r101,%r100,%r99;
.loc 1 895 13
st.u32 [%r57],%r101;
$L186:
.loc 1 902 1
mov.u64 %value,%r60;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ratio
.visible .func (.param .f64 %value_out) __ratio (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .f64 %r22;
.reg .u32 %r35;
.reg .f64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r47;
.reg .f64 %r48;
.reg .f64 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .pred %r59;
.reg .u32 %r60;
.reg .u64 %r62;
.reg .u32 %r63;
.reg .u32 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u32 %r70;
.reg .u64 %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .u64 %r79;
mov.u64 %r43,%ar0;
mov.u64 %r44,%ar1;
.loc 1 913 10
add.u64 %r47,%frame,4;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r43;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r47;
call (%value_in),__b2d,(%out_arg1,%out_arg2);
ld.param.f64 %r48,[%value_in];
}
mov.f64 %r39,%r48;
.loc 1 913 8
mov.b64 %r40,%r39;
.loc 1 914 10
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call (%value_in),__b2d,(%out_arg1,%out_arg2);
ld.param.f64 %r51,[%value_in];
}
mov.f64 %r22,%r51;
.loc 1 914 8
mov.b64 %r41,%r22;
.loc 1 916 31
ld.u32 %r53,[%r43+20];
ld.u32 %r54,[%r44+20];
sub.u32 %r52,%r53,%r54;
.loc 1 916 20
shl.b32 %r55,%r52,5;
.loc 1 916 10
ld.u32 %r57,[%frame+4];
ld.u32 %r58,[%frame];
sub.u32 %r56,%r57,%r58;
.loc 1 916 5
add.u32 %r35,%r55,%r56;
.loc 1 935 6
setp.le.s32 %r59,%r35,0;
@ %r59 bra $L199;
.loc 1 936 21
shl.b32 %r60,%r35,20;
.loc 1 936 16
shr.u64 %r62,%r40,32;
cvt.u32.u64 %r64,%r62;
add.u32 %r63,%r60,%r64;
cvt.u64.u32 %r65,%r63;
shl.b64 %r66,%r65,32;
and.b64 %r67,%r40,4294967295;
or.b64 %r68,%r67,%r66;
.loc 1 943 12
mov.b64 %r39,%r68;
bra $L200;
$L199:
.loc 1 940 23
shl.b32 %r70,%r35,20;
.loc 1 940 18
shr.u64 %r73,%r41,32;
cvt.u32.u64 %r75,%r73;
sub.u32 %r74,%r75,%r70;
cvt.u64.u32 %r76,%r74;
shl.b64 %r77,%r76,32;
and.b64 %r78,%r41,4294967295;
or.b64 %r79,%r78,%r77;
.loc 1 943 19
mov.b64 %r22,%r79;
$L200:
.loc 1 943 15
div.rn.f64 %value,%r39,%r22;
.loc 1 944 1
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _mprec_log10
.visible .func (.param .f64 %value_out) _mprec_log10 (.param .u32 %in_ar0)
{
.reg .f64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .f64 %r22;
.reg .u32 %r23;
.reg .pred %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
mov.u32 %r23,%ar0;
.loc 1 975 6
setp.gt.s32 %r24,%r23,23;
@ %r24 bra $L204;
.loc 1 976 16
cvta.const.u64 %r25,__mprec_tens;
cvt.s64.s32 %r26,%r23;
shl.b64 %r27,%r26,3;
add.u64 %r28,%r25,%r27;
ld.f64 %r22,[%r28];
bra $L201;
$L204:
.loc 1 974 10
mov.f64 %r22,0d3ff0000000000000;
$L202:
.loc 1 979 9
mul.f64 %r22,%r22,0d4024000000000000;
.loc 1 980 10
add.u32 %r23,%r23,-1;
.loc 1 977 9
setp.ne.u32 %r29,%r23,0;
@ %r29 bra $L202;
$L201:
.loc 1 983 1
mov.f64 %value,%r22;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __copybits
.visible .func __copybits (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r30;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r50;
.reg .u32 %r51;
.reg .u64 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .pred %r60;
.reg .pred %r61;
.reg .u64 %r62;
.reg .u64 %r64;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .pred %r68;
.reg .u32 %r69;
.reg .pred %r70;
mov.u64 %r50,%ar0;
mov.u32 %r51,%ar1;
mov.u64 %r52,%ar2;
.loc 1 995 14
add.u32 %r53,%r51,-1;
.loc 1 995 18
shr.s32 %r54,%r53,5;
.loc 1 995 29
add.u32 %r55,%r54,1;
cvt.s64.s32 %r56,%r55;
shl.b64 %r57,%r56,2;
.loc 1 995 5
add.u64 %r35,%r50,%r57;
.loc 1 996 4
add.u64 %r36,%r52,24;
.loc 1 998 12
ld.s32 %r58,[%r52+20];
.loc 1 998 9
shl.b64 %r59,%r58,2;
.loc 1 998 5
add.u64 %r37,%r36,%r59;
.loc 1 999 7
setp.ge.u64 %r60,%r36,%r37;
@ %r60 bra $L207;
mov.u64 %r44,%r50;
mov.u64 %r45,%r36;
$L208:
.loc 1 1000 10
ld.u32 %r30,[%r45];
.loc 1 1000 8
st.u32 [%r44],%r30;
.loc 1 999 7
add.u64 %r44,%r44,4;
add.u64 %r45,%r45,4;
setp.gt.u64 %r61,%r37,%r45;
@ %r61 bra $L208;
.loc 1 1000 5
sub.u64 %r62,%r37,%r52;
add.u64 %r64,%r62,-25;
and.b64 %r66,%r64,-4;
add.u64 %r67,%r66,4;
add.u64 %r50,%r50,%r67;
$L207:
.loc 1 1009 7
setp.le.u64 %r68,%r35,%r50;
@ %r68 bra $L206;
mov.u64 %r34,%r50;
.loc 1 1010 8
mov.u32 %r69,0;
$L210:
st.u32 [%r34],%r69;
.loc 1 1009 7
add.u64 %r34,%r34,4;
setp.gt.u64 %r70,%r35,%r34;
@ %r70 bra $L210;
$L206:
.loc 1 1011 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __any_on
.visible .func (.param .u32 %value_out) __any_on (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u32 %r35;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .pred %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .pred %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .pred %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .pred %r49;
mov.u64 %r36,%ar0;
mov.u32 %r37,%ar1;
.loc 1 1020 4
add.u64 %r24,%r36,24;
.loc 1 1021 7
ld.u32 %r25,[%r36+20];
.loc 1 1022 4
shr.s32 %r26,%r37,5;
.loc 1 1023 5
setp.ge.s32 %r38,%r25,%r26;
@ %r38 bra $L214;
.loc 1 1033 4
cvt.s64.s32 %r39,%r25;
shl.b64 %r40,%r39,2;
add.u64 %r23,%r24,%r40;
bra $L217;
$L214:
.loc 1 1026 14
cvt.s64.s32 %r41,%r26;
shl.b64 %r42,%r41,2;
add.u64 %r23,%r24,%r42;
.loc 1 1025 10
setp.le.s32 %r43,%r25,%r26;
@ %r43 bra $L217;
.loc 1 1025 26
and.b32 %r27,%r37,31;
.loc 1 1025 20
setp.eq.u32 %r44,%r27,0;
@ %r44 bra $L217;
.loc 1 1026 11
ld.u32 %r28,[%r23];
.loc 1 1027 6
shr.u32 %r29,%r28,%r27;
.loc 1 1028 6
shl.b32 %r45,%r29,%r27;
.loc 1 1029 6
setp.ne.u32 %r46,%r28,%r45;
@ %r46 bra $L219;
bra $L217;
$L218:
.loc 1 1035 6
add.u64 %r23,%r23,-4;
ld.u32 %r47,[%r23];
setp.ne.u32 %r48,%r47,0;
@ %r48 bra $L220;
$L217:
.loc 1 1034 7
setp.gt.u64 %r49,%r23,%r24;
@ %r49 bra $L218;
.loc 1 1037 9
mov.u32 %r35,0;
bra $L213;
$L219:
.loc 1 1030 11
mov.u32 %r35,1;
bra $L213;
$L220:
mov.u32 %r35,1;
$L213:
.loc 1 1038 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-mrand48.o/1612277262  0     0     100666  1923      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _mrand48_r
.visible .func (.param .u64 %value_out) _mrand48_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/mrand48.c"
// BEGIN GLOBAL FUNCTION DECL: mrand48
.visible .func (.param .u64 %value_out) mrand48;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __dorand48
.extern .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _mrand48_r
.visible .func (.param .u64 %value_out) _mrand48_r (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r29;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
mov.u64 %r29,%ar0;
.loc 1 20 17
add.u64 %r32,%r29,240;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 11
ld.u16 %r34,[%r29+244];
.loc 1 21 35
shl.b64 %r35,%r34,16;
.loc 1 21 44
ld.u16 %r36,[%r29+242];
.loc 1 21 42
add.u64 %value,%r35,%r36;
.loc 1 22 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: mrand48
.visible .func (.param .u64 %value_out) mrand48
{
.reg .u64 %value;
.reg .u64 %r22;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.loc 1 28 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 20 17
add.u64 %r32,%r22,240;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 11
ld.u16 %r34,[%r22+244];
.loc 1 21 35
shl.b64 %r35,%r34,16;
.loc 1 21 44
ld.u16 %r36,[%r22+242];
.loc 1 21 42
add.u64 %value,%r35,%r36;
.loc 1 29 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-msize.o/  1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-msizer.o/ 1612277262  0     0     100666  183       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_mallocr
.visible .global .align 4 .u32 _dummy_mallocr[1] =
{1 };

lib_a-mstats.o/ 1612277262  0     0     100666  181       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_mstats
.visible .global .align 4 .u32 _dummy_mstats[1] =
{1 };

lib_a-mtrim.o/  1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-ndbm.o/   1612277262  0     0     100666  13793     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: dbm_open
.visible .func (.param .u64 %value_out) dbm_open (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/search/ndbm.c"
// BEGIN GLOBAL FUNCTION DECL: dbm_close
.visible .func dbm_close (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: dbm_fetch
.visible .func dbm_fetch (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: dbm_firstkey
.visible .func dbm_firstkey (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: dbm_nextkey
.visible .func dbm_nextkey (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: dbm_delete
.visible .func (.param .u32 %value_out) dbm_delete (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: dbm_store
.visible .func (.param .u32 %value_out) dbm_store (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: dbm_error
.visible .func (.param .u32 %value_out) dbm_error (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: dbm_clearerr
.visible .func (.param .u32 %value_out) dbm_clearerr (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: dbm_dirfno
.visible .func (.param .u32 %value_out) dbm_dirfno (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strcat
.extern .func (.param .u64 %value_out) strcat (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __hash_open
.extern .func (.param .u64 %value_out) __hash_open (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[4] =
{46,100,98,0 };
// BEGIN GLOBAL FUNCTION DEF: dbm_open
.visible .func (.param .u64 %value_out) dbm_open (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[1056];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .u64 %r42;
.reg .u32 %r43;
.reg .u64 %r46;
.reg .u64 %r49;
.reg .u64 %r55;
.reg .u64 %r56;
mov.u64 %r28,%ar0;
mov.u32 %r29,%ar1;
mov.u32 %r30,%ar2;
.loc 1 69 13
mov.u64 %r31,171798695936;
st.u64 [%frame+1024],%r31;
.loc 1 71 13
mov.u64 %r32,1;
st.u64 [%frame+1032],%r32;
.loc 1 73 12
mov.u64 %r33,0;
st.u64 [%frame+1040],%r33;
.loc 1 74 14
cvt.u32.u64 %r34,%r33;
st.u32 [%frame+1048],%r34;
.loc 1 76 6
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r36,[%value_in];
}
.loc 1 76 37
cvta.const.u64 %r37,$LC0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r38,[%value_in];
}
.loc 1 76 35
mov.u64 %r40,1024;
sub.u64 %r39,%r40,%r38;
.loc 1 76 4
setp.lt.u64 %r41,%r36,%r39;
@ %r41 bra $L2;
.loc 1 77 3
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r42,[%value_in];
}
.loc 1 77 9
mov.u32 %r43,91;
st.u32 [%r42],%r43;
.loc 1 78 9
mov.u64 %r27,%r33;
bra $L1;
$L2:
.loc 1 80 8
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r46,[%value_in];
}
.loc 1 81 8
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
call (%value_in),strcat,(%out_arg1,%out_arg2);
ld.param.u64 %r49,[%value_in];
}
.loc 1 82 17
add.u64 %r55,%frame,1024;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r29;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r30;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r34;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r55;
call (%value_in),__hash_open,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r56,[%value_in];
}
mov.u64 %r27,%r56;
$L1:
.loc 1 83 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_close
.visible .func dbm_close (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r26;
mov.u64 %r23,%ar0;
.loc 1 88 11
ld.u64 %r26,[%r23+8];
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call (%value_in),%r26,(%out_arg1),$LCT0;
ld.param.u32 %r25,[%value_in];
}
.loc 1 89 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_fetch
.visible .func dbm_fetch (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r27;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .pred %r42;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
mov.u64 %r32,%ar2;
.loc 1 103 14
ld.u64 %r33,[%r32];
st.u64 [%frame+16],%r33;
.loc 1 104 19
ld.s32 %r34,[%r32+8];
st.u64 [%frame+24],%r34;
.loc 1 105 14
add.u64 %r39,%frame,16;
ld.u64 %r41,[%r31+24];
mov.u32 %r38,0;
{
.param .u32 %value_in;
$LCT1:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r38;
call (%value_in),%r41,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT1;
ld.param.u32 %r40,[%value_in];
}
.loc 1 106 5
setp.ne.u32 %r42,%r40,0;
@ %r42 bra $L7;
.loc 1 110 27
ld.u64 %r27,[%frame];
.loc 1 111 16
ld.u32 %r29,[%frame+8];
bra $L6;
$L7:
mov.u32 %r29,%r38;
mov.u64 %r27,0;
$L6:
.loc 1 112 9
st.u64 [%r30],%r27;
st.u32 [%r30+8],%r29;
.loc 1 113 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_firstkey
.visible .func dbm_firstkey (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r35;
.reg .pred %r36;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 127 14
add.u64 %r33,%frame,16;
ld.u64 %r35,[%r28+40];
mov.u32 %r32,3;
{
.param .u32 %value_in;
$LCT2:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r33;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r32;
call (%value_in),%r35,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT2;
ld.param.u32 %r34,[%value_in];
}
.loc 1 128 5
setp.ne.u32 %r36,%r34,0;
@ %r36 bra $L10;
.loc 1 130 25
ld.u64 %r26,[%frame+16];
bra $L9;
$L10:
mov.u64 %r26,0;
$L9:
.loc 1 131 15
ld.u32 %r24,[%frame+24];
.loc 1 132 9
st.u64 [%r27],%r26;
st.u32 [%r27+8],%r24;
.loc 1 133 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_nextkey
.visible .func dbm_nextkey (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r35;
.reg .pred %r36;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 147 14
add.u64 %r33,%frame,16;
ld.u64 %r35,[%r28+40];
mov.u32 %r32,7;
{
.param .u32 %value_in;
$LCT3:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r33;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r32;
call (%value_in),%r35,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT3;
ld.param.u32 %r34,[%value_in];
}
.loc 1 148 5
setp.ne.u32 %r36,%r34,0;
@ %r36 bra $L13;
.loc 1 150 25
ld.u64 %r26,[%frame+16];
bra $L12;
$L13:
mov.u64 %r26,0;
$L12:
.loc 1 151 15
ld.u32 %r24,[%frame+24];
.loc 1 152 9
st.u64 [%r27],%r26;
st.u32 [%r27+8],%r24;
.loc 1 153 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_delete
.visible .func (.param .u32 %value_out) dbm_delete (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u64 %r38;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 166 14
ld.u64 %r32,[%r31];
st.u64 [%frame],%r32;
.loc 1 167 19
ld.s32 %r33,[%r31+8];
st.u64 [%frame+8],%r33;
.loc 1 168 14
ld.u64 %r38,[%r30+16];
mov.u32 %r36,0;
{
.param .u32 %value_in;
$LCT4:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u32 %in_ar2);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r36;
call (%value_in),%r38,(%out_arg1,%out_arg2,%out_arg3),$LCT4;
ld.param.u32 %r37,[%value_in];
}
.loc 1 169 5
set.u32.ne.u32 %value,%r37,0;
.loc 1 173 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_store
.visible .func (.param .u32 %value_out) dbm_store (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r44;
.reg .u32 %r45;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
mov.u32 %r34,%ar3;
.loc 1 186 14
ld.u64 %r35,[%r32];
st.u64 [%frame+16],%r35;
.loc 1 187 19
ld.s32 %r36,[%r32+8];
st.u64 [%frame+24],%r36;
.loc 1 188 15
ld.u64 %r37,[%r33];
st.u64 [%frame],%r37;
.loc 1 189 21
ld.s32 %r38,[%r33+8];
st.u64 [%frame+8],%r38;
.loc 1 190 13
ld.u64 %r28,[%r31+32];
setp.eq.u32 %r39,%r34,0;
selp.u32 %r29,8,0,%r39;
add.u64 %r44,%frame,16;
{
.param .u32 %value_in;
$LCT5:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r44;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r29;
call (%value_in),%r28,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT5;
ld.param.u32 %r45,[%value_in];
}
.loc 1 192 1
mov.u32 %value,%r45;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_error
.visible .func (.param .u32 %value_out) dbm_error (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r26;
mov.u64 %r24,%ar0;
.loc 1 200 12
ld.u64 %r26,[%r24+56];
ld.u32 %value,[%r26+320];
.loc 1 201 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_clearerr
.visible .func (.param .u32 %value_out) dbm_clearerr (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
mov.u64 %r24,%ar0;
.loc 1 209 12
ld.u64 %r25,[%r24+56];
mov.u32 %r26,0;
st.u32 [%r25+320],%r26;
.loc 1 211 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: dbm_dirfno
.visible .func (.param .u32 %value_out) dbm_dirfno (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r26;
mov.u64 %r24,%ar0;
.loc 1 216 31
ld.u64 %r26,[%r24+56];
ld.u32 %value,[%r26+284];
.loc 1 217 1
st.param.u32 [%value_out],%value;
ret;
}

lib_a-nrand48.o/1612277262  0     0     100666  2287      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _nrand48_r
.visible .func (.param .u64 %value_out) _nrand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/nrand48.c"
// BEGIN GLOBAL FUNCTION DECL: nrand48
.visible .func (.param .u64 %value_out) nrand48 (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __dorand48
.extern .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _nrand48_r
.visible .func (.param .u64 %value_out) _nrand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .u16 %r40;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 20 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 17
ld.u16 %r35,[%r31+4];
.loc 1 21 42
shl.b64 %r36,%r35,15;
.loc 1 22 31
ld.u16 %r37,[%r31+2];
shr.u32 %r38,%r37,1;
cvt.u16.u32 %r40,%r38;
cvt.u64.u16 %r39,%r40;
.loc 1 21 49
add.u64 %value,%r36,%r39;
.loc 1 23 1
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: nrand48
.visible .func (.param .u64 %value_out) nrand48 (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r31;
.reg .u64 %r34;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u16 %r41;
mov.u64 %r31,%ar0;
.loc 1 20 3
ld.global.u64 %r34,[_impure_ptr];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call __dorand48,(%out_arg1,%out_arg2);
}
.loc 1 21 17
ld.u16 %r36,[%r31+4];
.loc 1 21 42
shl.b64 %r37,%r36,15;
.loc 1 22 31
ld.u16 %r38,[%r31+2];
shr.u32 %r39,%r38,1;
cvt.u16.u32 %r41,%r39;
cvt.u64.u16 %r40,%r41;
.loc 1 21 49
add.u64 %value,%r37,%r40;
.loc 1 30 1
st.param.u64 [%value_out],%value;
ret;
}

/676            1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-openr.o/  1612277262  0     0     100666  1899      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _open_r
.visible .func (.param .u32 %value_out) _open_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/reent/openr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: open
.extern .func (.param .u32 %value_out) open (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _open_r
.visible .func (.param .u32 %value_out) _open_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r31;
.reg .pred %r33;
.reg .pred %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u32 %r27,%ar3;
.loc 1 49 9
mov.u32 %r28,0;
st.global.u32 [errno],%r28;
.loc 1 50 14
st.u32 [%stack],%r27;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r26;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),open,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r31,[%value_in];
}
.loc 1 50 6
setp.ne.u32 %r33,%r31,-1;
@ %r33 bra $L1;
.loc 1 50 56
ld.global.u32 %r22,[errno];
.loc 1 50 47
setp.eq.u32 %r34,%r22,0;
@ %r34 bra $L1;
.loc 1 51 17
st.u32 [%r24],%r22;
$L1:
.loc 1 53 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-perror.o/ 1612277262  0     0     100666  7861      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _perror_r
.visible .func _perror_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/perror.c"
// BEGIN GLOBAL FUNCTION DECL: perror
.visible .func perror (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: fileno
.extern .func (.param .u32 %value_out) fileno (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _write_r
.extern .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strerror_r
.extern .func (.param .u64 %value_out) _strerror_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{58,32,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[2] =
{10,0 };
// BEGIN GLOBAL FUNCTION DEF: _perror_r
.visible .func _perror_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .u32 %r54;
.reg .pred %r55;
.reg .u16 %r56;
.reg .u32 %r57;
.reg .pred %r58;
.reg .u64 %r60;
.reg .pred %r61;
.reg .u32 %r63;
.reg .u64 %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .u64 %r72;
.reg .pred %r73;
.reg .u32 %r75;
.reg .u64 %r80;
.reg .pred %r81;
.reg .pred %r82;
.reg .u32 %r84;
.reg .u32 %r85;
.reg .u64 %r87;
.reg .pred %r88;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u32 %r93;
.reg .u64 %r98;
.reg .pred %r99;
.reg .pred %r100;
.reg .u64 %r102;
.reg .pred %r103;
.reg .u32 %r105;
.reg .u64 %r110;
.reg .pred %r111;
.reg .pred %r112;
.reg .u16 %r113;
.reg .u16 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
mov.u64 %r47,%ar0;
mov.u64 %r48,%ar1;
.loc 1 81 9
ld.u64 %r35,[%r47+24];
.loc 1 83 3
ld.u32 %r49,[%r47+80];
setp.ne.u32 %r50,%r49,0;
@ %r50 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 86 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r35;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r54,[%value_in];
}
.loc 1 87 6
setp.eq.u64 %r55,%r48,0;
@ %r55 bra $L3;
.loc 1 87 17
ld.s8 %r57,[%r48];
cvt.u16.u32 %r56,%r57;
setp.eq.u16 %r58,%r56,0;
@ %r58 bra $L3;
.loc 1 89 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r48;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r60,[%value_in];
}
mov.u64 %r37,%r60;
setp.eq.u64 %r61,%r37,0;
@ %r61 bra $L4;
$L5:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r63,[%value_in];
}
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r63;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r48;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r37;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r68,[%value_in];
}
setp.lt.s64 %r69,%r68,0;
@ %r69 bra $L4;
sub.u64 %r37,%r37,%r68;
add.u64 %r48,%r48,%r68;
setp.ne.u64 %r70,%r37,0;
@ %r70 bra $L5;
$L4:
.loc 1 90 7
cvta.const.u64 %r115,$LC0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r115;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r72,[%value_in];
}
mov.u64 %r39,%r72;
setp.eq.u64 %r73,%r39,0;
@ %r73 bra $L3;
mov.u64 %r40,%r115;
$L6:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r75,[%value_in];
}
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r75;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r40;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r39;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r80,[%value_in];
}
setp.lt.s64 %r81,%r80,0;
@ %r81 bra $L3;
sub.u64 %r39,%r39,%r80;
add.u64 %r40,%r40,%r80;
setp.ne.u64 %r82,%r39,0;
@ %r82 bra $L6;
$L3:
.loc 1 93 16
mov.u32 %r85,1;
ld.u32 %r84,[%r47];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r84;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r85;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call (%value_in),_strerror_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r87,[%value_in];
}
mov.u64 %r43,%r87;
.loc 1 93 6
setp.eq.u64 %r88,%r43,0;
@ %r88 bra $L7;
.loc 1 94 5
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r43;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r90,[%value_in];
}
mov.u64 %r42,%r90;
setp.eq.u64 %r91,%r42,0;
@ %r91 bra $L7;
$L8:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r93,[%value_in];
}
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r93;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r43;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r42;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r98,[%value_in];
}
setp.lt.s64 %r99,%r98,0;
@ %r99 bra $L7;
sub.u64 %r42,%r42,%r98;
add.u64 %r43,%r43,%r98;
setp.ne.u64 %r100,%r42,0;
@ %r100 bra $L8;
$L7:
.loc 1 99 3
cvta.const.u64 %r116,$LC1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r116;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r102,[%value_in];
}
mov.u64 %r45,%r102;
setp.eq.u64 %r103,%r45,0;
@ %r103 bra $L9;
mov.u64 %r46,%r116;
$L10:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r105,[%value_in];
}
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r105;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r46;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r45;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r110,[%value_in];
}
setp.lt.s64 %r111,%r110,0;
@ %r111 bra $L9;
sub.u64 %r45,%r45,%r110;
add.u64 %r46,%r46,%r110;
setp.ne.u64 %r112,%r45,0;
@ %r112 bra $L10;
$L9:
.loc 1 101 14
ld.u16 %r114,[%r35+16];
and.b16 %r113,%r114,-4097;
st.u16 [%r35+16],%r113;
.loc 1 103 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: perror
.visible .func perror (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r26;
mov.u64 %r23,%ar0;
.loc 1 110 3
ld.global.u64 %r26,[_impure_ptr];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call _perror_r,(%out_arg1,%out_arg2);
}
.loc 1 111 1
ret;
}

lib_a-printf.o/ 1612277262  0     0     100666  1027      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: printf
.visible .func (.param .u32 %value_out) printf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../../newlib/libc/machine/nvptx/printf.c"
// BEGIN GLOBAL FUNCTION DECL: vprintf
.extern .func (.param .u32 %value_out) vprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: printf
.visible .func (.param .u32 %value_out) printf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar1];
.reg .u64 %r24;
.reg .u32 %r28;
mov.u64 %r24,%ar0;
.loc 1 27 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%args;
call (%value_in),vprintf,(%out_arg1,%out_arg2);
ld.param.u32 %r28,[%value_in];
}
.loc 1 30 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-psignal.o/1612277262  0     0     100666  6609      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: psignal
.visible .func psignal (.param .u32 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/signal/psignal.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: fflush
.extern .func (.param .u32 %value_out) fflush (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: fileno
.extern .func (.param .u32 %value_out) fileno (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: write
.extern .func (.param .u32 %value_out) write (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strsignal
.extern .func (.param .u64 %value_out) strsignal (.param .u32 %in_ar0);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{58,32,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[2] =
{10,0 };
// BEGIN GLOBAL FUNCTION DEF: psignal
.visible .func psignal (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r29;
.reg .u64 %r34;
.reg .u64 %r39;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u32 %r57;
.reg .pred %r58;
.reg .u16 %r59;
.reg .u32 %r60;
.reg .pred %r61;
.reg .u64 %r63;
.reg .pred %r64;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u32 %r72;
.reg .pred %r73;
.reg .pred %r74;
.reg .u64 %r76;
.reg .pred %r77;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u32 %r81;
.reg .u32 %r85;
.reg .pred %r86;
.reg .pred %r87;
.reg .u64 %r89;
.reg .u64 %r91;
.reg .pred %r92;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u32 %r96;
.reg .u32 %r100;
.reg .pred %r101;
.reg .pred %r102;
.reg .u64 %r104;
.reg .pred %r105;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u32 %r109;
.reg .u32 %r113;
.reg .pred %r114;
.reg .pred %r115;
.reg .u64 %r116;
.reg .u64 %r117;
mov.u32 %r52,%ar0;
mov.u64 %r53,%ar1;
.loc 1 55 11
ld.global.u64 %r55,[_impure_ptr];
.loc 1 55 3
ld.u64 %r56,[%r55+24];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
call (%value_in),fflush,(%out_arg1);
ld.param.u32 %r57,[%value_in];
}
.loc 1 56 6
setp.eq.u64 %r58,%r53,0;
@ %r58 bra $L2;
.loc 1 56 17
ld.s8 %r60,[%r53];
cvt.u16.u32 %r59,%r60;
setp.eq.u16 %r61,%r59,0;
@ %r61 bra $L2;
.loc 1 58 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r63,[%value_in];
}
mov.u64 %r45,%r63;
setp.eq.u64 %r64,%r45,0;
@ %r64 bra $L3;
$L4:
ld.global.u64 %r66,[_impure_ptr];
ld.u64 %r67,[%r66+24];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r67;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r68,[%value_in];
}
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r68;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r53;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r45;
call (%value_in),write,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r72,[%value_in];
}
setp.lt.s32 %r73,%r72,0;
@ %r73 bra $L3;
cvt.s64.s32 %r29,%r72;
sub.u64 %r45,%r45,%r29;
add.u64 %r53,%r53,%r29;
setp.ne.u64 %r74,%r45,0;
@ %r74 bra $L4;
$L3:
.loc 1 59 7
cvta.const.u64 %r116,$LC0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r116;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r76,[%value_in];
}
mov.u64 %r46,%r76;
setp.eq.u64 %r77,%r46,0;
@ %r77 bra $L2;
mov.u64 %r47,%r116;
$L5:
ld.global.u64 %r79,[_impure_ptr];
ld.u64 %r80,[%r79+24];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r80;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r81,[%value_in];
}
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r81;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r47;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r46;
call (%value_in),write,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r85,[%value_in];
}
setp.lt.s32 %r86,%r85,0;
@ %r86 bra $L2;
cvt.s64.s32 %r34,%r85;
sub.u64 %r46,%r46,%r34;
add.u64 %r47,%r47,%r34;
setp.ne.u64 %r87,%r46,0;
@ %r87 bra $L5;
$L2:
.loc 1 61 3
{
.param .u64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r52;
call (%value_in),strsignal,(%out_arg1);
ld.param.u64 %r89,[%value_in];
}
mov.u64 %r49,%r89;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r91,[%value_in];
}
mov.u64 %r48,%r91;
setp.eq.u64 %r92,%r48,0;
@ %r92 bra $L6;
$L7:
ld.global.u64 %r94,[_impure_ptr];
ld.u64 %r95,[%r94+24];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r95;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r96,[%value_in];
}
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r96;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r49;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r48;
call (%value_in),write,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r100,[%value_in];
}
setp.lt.s32 %r101,%r100,0;
@ %r101 bra $L6;
cvt.s64.s32 %r39,%r100;
sub.u64 %r48,%r48,%r39;
add.u64 %r49,%r49,%r39;
setp.ne.u64 %r102,%r48,0;
@ %r102 bra $L7;
$L6:
.loc 1 66 3
cvta.const.u64 %r117,$LC1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r117;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r104,[%value_in];
}
mov.u64 %r50,%r104;
setp.eq.u64 %r105,%r50,0;
@ %r105 bra $L1;
mov.u64 %r51,%r117;
$L9:
ld.global.u64 %r107,[_impure_ptr];
ld.u64 %r108,[%r107+24];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r108;
call (%value_in),fileno,(%out_arg1);
ld.param.u32 %r109,[%value_in];
}
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r109;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r50;
call (%value_in),write,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r113,[%value_in];
}
setp.lt.s32 %r114,%r113,0;
@ %r114 bra $L1;
cvt.s64.s32 %r44,%r113;
sub.u64 %r50,%r50,%r44;
add.u64 %r51,%r51,%r44;
setp.ne.u64 %r115,%r50,0;
@ %r115 bra $L9;
$L1:
.loc 1 68 1
ret;
}

lib_a-putc.o/   1612277262  0     0     100666  4526      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _putc_r
.visible .func (.param .u32 %value_out) _putc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/putc.c"
.file 2 "R:/winlibs64_stage/nvptx-gcc-10.2.0/gcc-10.2.0/newlib/libc/include/stdio.h"
// BEGIN GLOBAL FUNCTION DECL: putc
.visible .func (.param .u32 %value_out) putc (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __swbuf_r
.extern .func (.param .u32 %value_out) __swbuf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _putc_r
.visible .func (.param .u32 %value_out) _putc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u64 %r27;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .u16 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u64 %r46;
.reg .u32 %r50;
mov.u64 %r31,%ar0;
mov.u32 %r32,%ar1;
mov.u64 %r33,%ar2;
.loc 1 86 3
setp.eq.u64 %r34,%r31,0;
@ %r34 bra $L2;
ld.u32 %r35,[%r31+80];
setp.ne.u32 %r36,%r35,0;
@ %r36 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
call __sinit,(%out_arg1);
}
$L2:
.loc 2 692 6
ld.u32 %r38,[%r33+12];
add.u32 %r24,%r38,-1;
.loc 2 692 5
st.u32 [%r33+12],%r24;
setp.ge.s32 %r39,%r24,0;
@ %r39 bra $L3;
.loc 2 692 20
ld.u32 %r40,[%r33+40];
setp.lt.s32 %r41,%r24,%r40;
@ %r41 bra $L4;
.loc 2 692 47
cvt.u32.u32 %r44,%r32;
cvt.s32.s8 %r43,%r44;
cvt.u16.u32 %r42,%r43;
setp.eq.u16 %r45,%r42,10;
@ %r45 bra $L4;
$L3:
.loc 2 693 14
ld.u64 %r27,[%r33];
.loc 2 693 18
add.u64 %r46,%r27,1;
st.u64 [%r33],%r46;
.loc 2 693 21
st.u8 [%r27],%r32;
and.b32 %r30,%r32,255;
bra $L1;
$L4:
.loc 2 695 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r33;
call (%value_in),__swbuf_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r50,[%value_in];
}
mov.u32 %r30,%r50;
$L1:
.loc 1 91 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: putc
.visible .func (.param .u32 %value_out) putc (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r28;
.reg .u32 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .u16 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u64 %r46;
.reg .u32 %r50;
mov.u32 %r32,%ar0;
mov.u64 %r33,%ar1;
.loc 1 100 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 102 3
setp.eq.u64 %r34,%r23,0;
@ %r34 bra $L13;
ld.u32 %r35,[%r23+80];
setp.ne.u32 %r36,%r35,0;
@ %r36 bra $L13;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L13:
.loc 2 692 6
ld.u32 %r38,[%r33+12];
add.u32 %r25,%r38,-1;
.loc 2 692 5
st.u32 [%r33+12],%r25;
setp.ge.s32 %r39,%r25,0;
@ %r39 bra $L14;
.loc 2 692 20
ld.u32 %r40,[%r33+40];
setp.lt.s32 %r41,%r25,%r40;
@ %r41 bra $L15;
.loc 2 692 47
cvt.u32.u32 %r44,%r32;
cvt.s32.s8 %r43,%r44;
cvt.u16.u32 %r42,%r43;
setp.eq.u16 %r45,%r42,10;
@ %r45 bra $L15;
$L14:
.loc 2 693 14
ld.u64 %r28,[%r33];
.loc 2 693 18
add.u64 %r46,%r28,1;
st.u64 [%r33],%r46;
.loc 2 693 21
st.u8 [%r28],%r32;
and.b32 %r31,%r32,255;
bra $L12;
$L15:
.loc 2 695 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r33;
call (%value_in),__swbuf_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r50,[%value_in];
}
mov.u32 %r31,%r50;
$L12:
.loc 1 110 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-putc_u.o/ 1612277262  0     0     100666  3962      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _putc_unlocked_r
.visible .func (.param .u32 %value_out) _putc_unlocked_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "R:/winlibs64_stage/nvptx-gcc-10.2.0/gcc-10.2.0/newlib/libc/include/stdio.h"
.file 2 "../../../../../newlib/libc/stdio/putc_u.c"
// BEGIN GLOBAL FUNCTION DECL: putc_unlocked
.visible .func (.param .u32 %value_out) putc_unlocked (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __swbuf_r
.extern .func (.param .u32 %value_out) __swbuf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _putc_unlocked_r
.visible .func (.param .u32 %value_out) _putc_unlocked_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u64 %r26;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u16 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u64 %r41;
.reg .u32 %r45;
mov.u64 %r30,%ar0;
mov.u32 %r31,%ar1;
mov.u64 %r32,%ar2;
.loc 1 692 6
ld.u32 %r33,[%r32+12];
add.u32 %r23,%r33,-1;
.loc 1 692 5
st.u32 [%r32+12],%r23;
setp.ge.s32 %r34,%r23,0;
@ %r34 bra $L2;
.loc 1 692 20
ld.u32 %r35,[%r32+40];
setp.lt.s32 %r36,%r23,%r35;
@ %r36 bra $L3;
.loc 1 692 47
cvt.u32.u32 %r39,%r31;
cvt.s32.s8 %r38,%r39;
cvt.u16.u32 %r37,%r38;
setp.eq.u16 %r40,%r37,10;
@ %r40 bra $L3;
$L2:
.loc 1 693 14
ld.u64 %r26,[%r32];
.loc 1 693 18
add.u64 %r41,%r26,1;
st.u64 [%r32],%r41;
.loc 1 693 21
st.u8 [%r26],%r31;
and.b32 %r29,%r31,255;
bra $L1;
$L3:
.loc 1 695 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
call (%value_in),__swbuf_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r45,[%value_in];
}
mov.u32 %r29,%r45;
$L1:
.loc 2 80 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: putc_unlocked
.visible .func (.param .u32 %value_out) putc_unlocked (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u64 %r27;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u16 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u64 %r41;
.reg .u32 %r45;
mov.u32 %r31,%ar0;
mov.u64 %r32,%ar1;
.loc 2 89 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 692 6
ld.u32 %r33,[%r32+12];
add.u32 %r24,%r33,-1;
.loc 1 692 5
st.u32 [%r32+12],%r24;
setp.ge.s32 %r34,%r24,0;
@ %r34 bra $L9;
.loc 1 692 20
ld.u32 %r35,[%r32+40];
setp.lt.s32 %r36,%r24,%r35;
@ %r36 bra $L10;
.loc 1 692 47
cvt.u32.u32 %r39,%r31;
cvt.s32.s8 %r38,%r39;
cvt.u16.u32 %r37,%r38;
setp.eq.u16 %r40,%r37,10;
@ %r40 bra $L10;
$L9:
.loc 1 693 14
ld.u64 %r27,[%r32];
.loc 1 693 18
add.u64 %r41,%r27,1;
st.u64 [%r32],%r41;
.loc 1 693 21
st.u8 [%r27],%r31;
and.b32 %r30,%r31,255;
bra $L8;
$L10:
.loc 1 695 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
call (%value_in),__swbuf_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r45,[%value_in];
}
mov.u32 %r30,%r45;
$L8:
.loc 2 90 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-putchar.o/1612277262  0     0     100666  1302      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: putchar
.visible .func (.param .u32 %value_out) putchar (.param .u32 %in_ar0);
.file 1 "../../../../../../newlib/libc/machine/nvptx/putchar.c"
// BEGIN GLOBAL FUNCTION DECL: vprintf
.extern .func (.param .u32 %value_out) vprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{37,99,0 };
// BEGIN GLOBAL FUNCTION DEF: putchar
.visible .func (.param .u32 %value_out) putchar (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r28;
.reg .pred %r29;
mov.u32 %r25,%ar0;
and.b32 %r24,%r25,255;
.loc 1 26 13
st.u32 [%frame],%r24;
.loc 1 27 13
cvta.const.u64 %r26,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call (%value_in),vprintf,(%out_arg1,%out_arg2);
ld.param.u32 %r28,[%value_in];
}
.loc 1 28 6
setp.ge.s32 %r29,%r28,0;
.loc 1 29 7
selp.u32 %value,%r24,-1,%r29;
.loc 1 31 1
st.param.u32 [%value_out],%value;
ret;
}
/698            1612277262  0     0     100666  2061      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _putchar_unlocked_r
.visible .func (.param .u32 %value_out) _putchar_unlocked_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/putchar_u.c"
// BEGIN GLOBAL FUNCTION DECL: putchar_unlocked
.visible .func (.param .u32 %value_out) putchar_unlocked (.param .u32 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: putc_unlocked
.extern .func (.param .u32 %value_out) putc_unlocked (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _putchar_unlocked_r
.visible .func (.param .u32 %value_out) _putchar_unlocked_r (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r28;
.reg .u32 %r29;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
.loc 1 67 10
ld.u64 %r28,[%r24+16];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call (%value_in),putc_unlocked,(%out_arg1,%out_arg2);
ld.param.u32 %r29,[%value_in];
}
.loc 1 68 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: putchar_unlocked
.visible .func (.param .u32 %value_out) putchar_unlocked (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
mov.u32 %r25,%ar0;
.loc 1 67 28
ld.global.u64 %r28,[_impure_ptr];
.loc 1 67 10
ld.u64 %r29,[%r28+16];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
call (%value_in),putc_unlocked,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 78 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-puts.o/   1612277262  0     0     100666  1171      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: puts
.visible .func (.param .u32 %value_out) puts (.param .u64 %in_ar0);
.file 1 "../../../../../../newlib/libc/machine/nvptx/puts.c"
// BEGIN GLOBAL FUNCTION DECL: vprintf
.extern .func (.param .u32 %value_out) vprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[4] =
{37,115,10,0 };
// BEGIN GLOBAL FUNCTION DEF: puts
.visible .func (.param .u32 %value_out) puts (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u32 %r26;
mov.u64 %r23,%ar0;
.loc 1 25 13
st.u64 [%frame],%r23;
.loc 1 26 10
cvta.const.u64 %r24,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call (%value_in),vprintf,(%out_arg1,%out_arg2);
ld.param.u32 %r26,[%value_in];
}
.loc 1 27 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-qsort.o/  1612277262  0     0     100666  27753     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: qsort
.visible .func qsort (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/search/qsort.c"
// BEGIN GLOBAL FUNCTION DEF: qsort
.visible .func qsort (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[128];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r49;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r61;
.reg .u64 %r63;
.reg .u32 %r64;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u32 %r69;
.reg .u64 %r71;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u32 %r87;
.reg .u64 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u64 %r95;
.reg .u64 %r96;
.reg .u64 %r98;
.reg .u64 %r99;
.reg .u64 %r101;
.reg .u64 %r102;
.reg .u64 %r103;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u64 %r108;
.reg .u32 %r111;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .u64 %r121;
.reg .u64 %r132;
.reg .u32 %r141;
.reg .u64 %r143;
.reg .u64 %r145;
.reg .u64 %r146;
.reg .u64 %r147;
.reg .u64 %r148;
.reg .u32 %r149;
.reg .u64 %r151;
.reg .u64 %r152;
.reg .u64 %r153;
.reg .u64 %r154;
.reg .u32 %r155;
.reg .u64 %r158;
.reg .u64 %r159;
.reg .u64 %r160;
.reg .u32 %r161;
.reg .u64 %r163;
.reg .u64 %r164;
.reg .u64 %r165;
.reg .u32 %r166;
.reg .u64 %r168;
.reg .u64 %r169;
.reg .u64 %r170;
.reg .u64 %r171;
.reg .u32 %r172;
.reg .u64 %r176;
.reg .u64 %r177;
.reg .u64 %r178;
.reg .u32 %r179;
.reg .u64 %r183;
.reg .u64 %r184;
.reg .u64 %r185;
.reg .u32 %r188;
.reg .u64 %r190;
.reg .u64 %r191;
.reg .u64 %r193;
.reg .u64 %r197;
.reg .u64 %r202;
.reg .u64 %r203;
.reg .u64 %r208;
.reg .u64 %r217;
.reg .u64 %r219;
.reg .u64 %r225;
.reg .u64 %r226;
.reg .u64 %r229;
.reg .u64 %r230;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .u64 %r240;
.reg .u64 %r241;
.reg .u64 %r248;
.reg .u64 %r251;
.reg .u64 %r252;
.reg .u64 %r255;
.reg .u64 %r257;
.reg .u64 %r263;
.reg .u64 %r264;
.reg .u64 %r265;
.reg .u64 %r266;
.reg .u64 %r268;
.reg .u64 %r269;
.reg .u64 %r270;
.reg .pred %r271;
.reg .u32 %r273;
.reg .u32 %r275;
.reg .pred %r277;
.reg .pred %r278;
.reg .pred %r281;
.reg .u32 %r282;
.reg .u32 %r283;
.reg .u64 %r285;
.reg .pred %r286;
.reg .pred %r287;
.reg .pred %r288;
.reg .u32 %r291;
.reg .pred %r292;
.reg .pred %r293;
.reg .u64 %r294;
.reg .u64 %r296;
.reg .pred %r298;
.reg .pred %r299;
.reg .u64 %r300;
.reg .u64 %r301;
.reg .u32 %r304;
.reg .pred %r305;
.reg .u32 %r308;
.reg .pred %r309;
.reg .u32 %r312;
.reg .pred %r313;
.reg .u32 %r316;
.reg .pred %r317;
.reg .u32 %r320;
.reg .pred %r321;
.reg .u32 %r324;
.reg .pred %r325;
.reg .u32 %r328;
.reg .pred %r329;
.reg .u32 %r332;
.reg .pred %r333;
.reg .u32 %r336;
.reg .pred %r337;
.reg .u32 %r340;
.reg .pred %r341;
.reg .u32 %r344;
.reg .pred %r345;
.reg .u32 %r348;
.reg .pred %r349;
.reg .u32 %r352;
.reg .pred %r353;
.reg .u32 %r356;
.reg .pred %r357;
.reg .u32 %r360;
.reg .pred %r361;
.reg .u32 %r364;
.reg .pred %r365;
.reg .u32 %r368;
.reg .pred %r369;
.reg .u32 %r372;
.reg .pred %r373;
.reg .u32 %r376;
.reg .pred %r377;
.reg .u32 %r380;
.reg .pred %r381;
.reg .pred %r384;
.reg .u32 %r385;
.reg .u32 %r386;
.reg .u64 %r388;
.reg .pred %r389;
.reg .pred %r390;
.reg .pred %r391;
.reg .pred %r392;
.reg .pred %r395;
.reg .u32 %r396;
.reg .u32 %r397;
.reg .u64 %r399;
.reg .pred %r400;
.reg .pred %r401;
.reg .u32 %r404;
.reg .pred %r405;
.reg .pred %r406;
.reg .pred %r407;
.reg .pred %r410;
.reg .u32 %r411;
.reg .u32 %r412;
.reg .u64 %r414;
.reg .pred %r415;
.reg .pred %r416;
.reg .pred %r417;
.reg .u32 %r420;
.reg .pred %r421;
.reg .pred %r423;
.reg .u32 %r424;
.reg .u32 %r425;
.reg .u64 %r427;
.reg .pred %r428;
.reg .pred %r431;
.reg .u32 %r432;
.reg .u32 %r433;
.reg .u64 %r435;
.reg .pred %r436;
.reg .pred %r437;
.reg .pred %r438;
.reg .u32 %r441;
.reg .pred %r442;
.reg .pred %r443;
.reg .u64 %r444;
.reg .u64 %r445;
.reg .u64 %r446;
.reg .pred %r447;
.reg .u64 %r449;
.reg .pred %r450;
.reg .u32 %r451;
.reg .u32 %r452;
.reg .u64 %r454;
.reg .u64 %r455;
.reg .pred %r456;
.reg .pred %r457;
.reg .pred %r458;
.reg .u64 %r460;
.reg .pred %r461;
.reg .u32 %r462;
.reg .u32 %r463;
.reg .u64 %r465;
.reg .u64 %r466;
.reg .pred %r467;
.reg .pred %r468;
.reg .pred %r469;
.reg .u64 %r470;
.reg .u64 %r471;
.reg .u64 %r475;
.reg .u64 %r481;
.reg .pred %r482;
.reg .u64 %r483;
.reg .u64 %r484;
.reg .pred %r488;
.reg .pred %r489;
.reg .pred %r491;
.reg .pred %r492;
.reg .u64 %r494;
.reg .u64 %r495;
.reg .u64 %r496;
.reg .u64 %r497;
.reg .u64 %r498;
.reg .u64 %r499;
.reg .u64 %r500;
.reg .u64 %r501;
.reg .u64 %r502;
.reg .pred %r512;
.reg .pred %r513;
.reg .pred %r514;
.reg .pred %r515;
mov.u64 %r263,%ar0;
mov.u64 %r264,%ar1;
mov.u64 %r265,%ar2;
mov.u64 %r266,%ar3;
.loc 1 194 2
or.b64 %r269,%r263,%r265;
and.b64 %r270,%r269,7;
setp.ne.u64 %r271,%r270,0;
@ %r271 bra $L89;
set.u32.ne.u64 %r273,%r265,8;
neg.s32 %r87,%r273;
bra $L2;
$L89:
mov.u32 %r87,2;
$L2:
.loc 1 109 3
cvt.u32.u64 %r275,%r265;
cvt.s64.s32 %r143,%r275;
shr.u64 %r145,%r143,3;
.loc 1 191 9
mov.u64 %r43,0;
.loc 1 218 2
setp.ne.u32 %r512,%r87,0;
.loc 1 108 4
setp.ne.u32 %r513,%r87,1;
.loc 1 250 3
setp.eq.u32 %r514,%r87,0;
.loc 1 108 4
setp.eq.u32 %r515,%r87,2;
$L3:
.loc 1 198 11
add.u64 %r106,%r263,%r265;
.loc 1 198 46
mad.lo.u64 %r84,%r264,%r265,%r263;
.loc 1 196 5
setp.gt.u64 %r277,%r264,6;
@ %r277 bra $L4;
.loc 1 198 3
setp.gt.u64 %r278,%r84,%r106;
@ %r278 bra $L5;
bra $L6;
$L13:
.loc 1 201 5
@ %r512 bra $L7;
ld.u64 %r108,[%r102];
ld.u64 %r26,[%r96];
st.u64 [%r102],%r26;
st.u64 [%r96],%r108;
bra $L8;
$L7:
.loc 1 108 4
@ %r513 bra $L90;
mov.u64 %r52,%r96;
.loc 1 109 3
mov.u64 %r116,%r145;
$L10:
ld.u64 %r114,[%r54];
ld.u64 %r115,[%r52];
st.u64 [%r54],%r115;
st.u64 [%r52],%r114;
add.u64 %r116,%r116,-1;
add.u64 %r54,%r54,8;
add.u64 %r52,%r52,8;
setp.gt.s64 %r281,%r116,0;
@ %r281 bra $L10;
bra $L8;
$L90:
mov.u64 %r168,%r96;
mov.u64 %r151,%r102;
add.u64 %r496,%r151,%r143;
$L9:
.loc 1 111 3
ld.s8 %r111,[%r151];
ld.u8 %r282,[%r168];
st.u8 [%r151],%r282;
cvt.u32.u32 %r283,%r111;
st.u8 [%r168],%r283;
add.u64 %r151,%r151,1;
add.u64 %r168,%r168,1;
sub.u64 %r285,%r496,%r151;
setp.gt.s64 %r286,%r285,0;
@ %r286 bra $L9;
$L8:
.loc 1 199 4
setp.lt.u64 %r287,%r263,%r96;
@ %r287 bra $L12;
$L14:
.loc 1 198 59
add.u64 %r106,%r106,%r265;
.loc 1 198 3
setp.gt.u64 %r288,%r84,%r106;
@ %r288 bra $L5;
bra $L6;
$L12:
mov.u64 %r102,%r96;
mov.u64 %r54,%r96;
sub.u64 %r96,%r96,%r265;
.loc 1 199 37
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r96;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r102;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT0;
ld.param.u32 %r291,[%value_in];
}
.loc 1 199 34
setp.gt.s32 %r292,%r291,0;
@ %r292 bra $L13;
bra $L14;
$L5:
.loc 1 199 4
setp.ge.u64 %r293,%r263,%r106;
@ %r293 bra $L14;
mov.u64 %r96,%r106;
bra $L12;
$L4:
.loc 1 206 23
shr.u64 %r294,%r264,1;
.loc 1 206 5
mad.lo.u64 %r83,%r294,%r265,%r263;
.loc 1 209 24
add.u64 %r296,%r264,-1;
.loc 1 209 6
mad.lo.u64 %r98,%r296,%r265,%r263;
.loc 1 207 5
setp.eq.u64 %r298,%r264,7;
@ %r298 bra $L15;
.loc 1 210 6
setp.le.u64 %r299,%r264,40;
@ %r299 bra $L91;
.loc 1 211 11
shr.u64 %r300,%r264,3;
.loc 1 211 6
mul.lo.u64 %r90,%r300,%r265;
.loc 1 212 33
add.u64 %r301,%r90,%r90;
.loc 1 212 9
add.u64 %r38,%r263,%r301;
add.u64 %r81,%r263,%r90;
.loc 1 143 9
{
.param .u32 %value_in;
$LCT1:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r263;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r81;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT1;
ld.param.u32 %r304,[%value_in];
}
.loc 1 145 15
setp.ge.s32 %r305,%r304,0;
@ %r305 bra $L17;
.loc 1 144 10
{
.param .u32 %value_in;
$LCT2:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r81;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT2;
ld.param.u32 %r308,[%value_in];
}
.loc 1 144 35
setp.lt.s32 %r309,%r308,0;
@ %r309 bra $L18;
.loc 1 144 38
{
.param .u32 %value_in;
$LCT3:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r263;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT3;
ld.param.u32 %r312,[%value_in];
}
.loc 1 144 63
setp.lt.s32 %r313,%r312,0;
selp.u64 %r81,%r38,%r263,%r313;
bra $L18;
$L17:
.loc 1 145 17
{
.param .u32 %value_in;
$LCT4:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r81;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT4;
ld.param.u32 %r316,[%value_in];
}
.loc 1 145 42
setp.gt.s32 %r317,%r316,0;
@ %r317 bra $L18;
.loc 1 145 45
{
.param .u32 %value_in;
$LCT5:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r263;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT5;
ld.param.u32 %r320,[%value_in];
}
.loc 1 145 70
setp.lt.s32 %r321,%r320,0;
selp.u64 %r81,%r263,%r38,%r321;
$L18:
.loc 1 213 9
add.u64 %r39,%r83,%r90;
.loc 1 213 17
neg.s64 %r40,%r90;
.loc 1 213 9
sub.u64 %r41,%r83,%r90;
.loc 1 143 9
{
.param .u32 %value_in;
$LCT6:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r83;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT6;
ld.param.u32 %r324,[%value_in];
}
.loc 1 145 15
setp.ge.s32 %r325,%r324,0;
@ %r325 bra $L19;
.loc 1 144 10
{
.param .u32 %value_in;
$LCT7:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r83;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT7;
ld.param.u32 %r328,[%value_in];
}
.loc 1 144 35
setp.lt.s32 %r329,%r328,0;
@ %r329 bra $L20;
.loc 1 144 38
{
.param .u32 %value_in;
$LCT8:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT8;
ld.param.u32 %r332,[%value_in];
}
.loc 1 144 63
setp.lt.s32 %r333,%r332,0;
selp.u64 %r83,%r39,%r41,%r333;
bra $L20;
$L19:
.loc 1 145 17
{
.param .u32 %value_in;
$LCT9:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r83;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT9;
ld.param.u32 %r336,[%value_in];
}
.loc 1 145 42
setp.gt.s32 %r337,%r336,0;
@ %r337 bra $L20;
.loc 1 145 45
{
.param .u32 %value_in;
$LCT10:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT10;
ld.param.u32 %r340,[%value_in];
}
.loc 1 145 70
setp.lt.s32 %r341,%r340,0;
selp.u64 %r83,%r41,%r39,%r341;
$L20:
.loc 1 214 9
add.u64 %r42,%r98,%r40;
add.u64 %r44,%r42,%r40;
.loc 1 143 9
{
.param .u32 %value_in;
$LCT11:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT11;
ld.param.u32 %r344,[%value_in];
}
.loc 1 145 15
setp.ge.s32 %r345,%r344,0;
@ %r345 bra $L21;
.loc 1 144 10
{
.param .u32 %value_in;
$LCT12:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r42;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r98;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT12;
ld.param.u32 %r348,[%value_in];
}
.loc 1 144 35
setp.lt.s32 %r349,%r348,0;
@ %r349 bra $L16;
.loc 1 144 38
{
.param .u32 %value_in;
$LCT13:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r98;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT13;
ld.param.u32 %r352,[%value_in];
}
.loc 1 144 63
setp.lt.s32 %r353,%r352,0;
selp.u64 %r42,%r98,%r44,%r353;
bra $L16;
$L21:
.loc 1 145 17
{
.param .u32 %value_in;
$LCT14:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r42;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r98;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT14;
ld.param.u32 %r356,[%value_in];
}
.loc 1 145 42
setp.gt.s32 %r357,%r356,0;
@ %r357 bra $L16;
.loc 1 145 45
{
.param .u32 %value_in;
$LCT15:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r98;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT15;
ld.param.u32 %r360,[%value_in];
}
.loc 1 145 70
setp.lt.s32 %r361,%r360,0;
.loc 1 209 6
selp.u64 %r42,%r44,%r98,%r361;
bra $L16;
$L91:
mov.u64 %r42,%r98;
mov.u64 %r81,%r263;
$L16:
.loc 1 143 9
{
.param .u32 %value_in;
$LCT16:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r81;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r83;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT16;
ld.param.u32 %r364,[%value_in];
}
.loc 1 145 15
setp.ge.s32 %r365,%r364,0;
@ %r365 bra $L22;
.loc 1 144 10
{
.param .u32 %value_in;
$LCT17:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r83;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT17;
ld.param.u32 %r368,[%value_in];
}
.loc 1 144 35
setp.lt.s32 %r369,%r368,0;
@ %r369 bra $L15;
.loc 1 144 38
{
.param .u32 %value_in;
$LCT18:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r81;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT18;
ld.param.u32 %r372,[%value_in];
}
.loc 1 144 63
setp.lt.s32 %r373,%r372,0;
selp.u64 %r83,%r42,%r81,%r373;
bra $L15;
$L22:
.loc 1 145 17
{
.param .u32 %value_in;
$LCT19:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r83;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT19;
ld.param.u32 %r376,[%value_in];
}
.loc 1 145 42
setp.gt.s32 %r377,%r376,0;
@ %r377 bra $L15;
.loc 1 145 45
{
.param .u32 %value_in;
$LCT20:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r81;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT20;
ld.param.u32 %r380,[%value_in];
}
.loc 1 145 70
setp.lt.s32 %r381,%r380,0;
selp.u64 %r83,%r81,%r42,%r381;
$L15:
.loc 1 218 2
@ %r512 bra $L23;
ld.u64 %r95,[%r263];
ld.u64 %r45,[%r83];
st.u64 [%r263],%r45;
st.u64 [%r83],%r95;
bra $L24;
$L23:
.loc 1 108 4
@ %r513 bra $L25;
mov.u64 %r251,%r263;
mov.u64 %r252,%r83;
.loc 1 109 3
mov.u64 %r148,%r145;
$L26:
ld.u64 %r146,[%r251];
ld.u64 %r147,[%r252];
st.u64 [%r251],%r147;
st.u64 [%r252],%r146;
add.u64 %r148,%r148,-1;
add.u64 %r251,%r251,8;
add.u64 %r252,%r252,8;
setp.gt.s64 %r384,%r148,0;
@ %r384 bra $L26;
bra $L24;
$L25:
mov.u64 %r257,%r83;
.loc 1 108 4
mov.u64 %r255,%r263;
add.u64 %r495,%r263,%r143;
$L27:
.loc 1 111 3
ld.s8 %r141,[%r255];
ld.u8 %r385,[%r257];
st.u8 [%r255],%r385;
cvt.u32.u32 %r386,%r141;
st.u8 [%r257],%r386;
add.u64 %r255,%r255,1;
add.u64 %r257,%r257,1;
sub.u64 %r388,%r495,%r255;
setp.gt.s64 %r389,%r388,0;
@ %r389 bra $L27;
$L24:
.loc 1 228 9
setp.gt.u64 %r390,%r106,%r98;
@ %r390 bra $L29;
mov.u64 %r248,%r106;
mov.u64 %r79,%r98;
mov.u64 %r121,%r106;
.loc 1 195 16
mov.u32 %r188,0;
bra $L30;
$L29:
.loc 1 256 3
setp.gt.u64 %r391,%r84,%r106;
@ %r391 bra $L31;
bra $L6;
$L40:
.loc 1 230 7
setp.ne.u32 %r392,%r404,0;
@ %r392 bra $L32;
.loc 1 232 5
@ %r512 bra $L33;
ld.u64 %r99,[%r121];
ld.u64 %r49,[%r248];
st.u64 [%r121],%r49;
st.u64 [%r248],%r99;
bra $L34;
$L33:
.loc 1 108 4
@ %r513 bra $L35;
mov.u64 %r197,%r121;
mov.u64 %r57,%r248;
.loc 1 109 3
mov.u64 %r154,%r145;
$L36:
ld.u64 %r152,[%r197];
ld.u64 %r153,[%r57];
st.u64 [%r197],%r153;
st.u64 [%r57],%r152;
add.u64 %r154,%r154,-1;
add.u64 %r197,%r197,8;
add.u64 %r57,%r57,8;
setp.gt.s64 %r395,%r154,0;
@ %r395 bra $L36;
bra $L34;
$L35:
.loc 1 108 4
mov.u64 %r219,%r248;
mov.u64 %r217,%r121;
add.u64 %r500,%r121,%r143;
$L37:
.loc 1 111 3
ld.s8 %r149,[%r217];
ld.u8 %r396,[%r219];
st.u8 [%r217],%r396;
cvt.u32.u32 %r397,%r149;
st.u8 [%r219],%r397;
add.u64 %r217,%r217,1;
add.u64 %r219,%r219,1;
sub.u64 %r399,%r500,%r217;
setp.gt.s64 %r400,%r399,0;
@ %r400 bra $L37;
$L34:
.loc 1 233 8
add.u64 %r121,%r121,%r265;
.loc 1 231 14
mov.u32 %r188,1;
$L32:
add.u64 %r498,%r265,%r248;
mov.u64 %r88,%r498;
$L58:
.loc 1 228 9
mov.u64 %r248,%r498;
setp.lt.u64 %r401,%r98,%r248;
@ %r401 bra $L39;
$L30:
mov.u64 %r88,%r248;
.loc 1 228 36
{
.param .u32 %value_in;
$LCT21:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r248;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r263;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT21;
ld.param.u32 %r404,[%value_in];
}
.loc 1 228 19
setp.le.s32 %r405,%r404,0;
@ %r405 bra $L40;
.loc 1 238 9
setp.le.u64 %r406,%r248,%r98;
@ %r406 bra $L41;
bra $L39;
$L51:
.loc 1 240 7
setp.ne.u32 %r407,%r420,0;
@ %r407 bra $L42;
.loc 1 242 5
@ %r512 bra $L43;
ld.u64 %r101,[%r98];
ld.u64 %r51,[%r79];
st.u64 [%r98],%r51;
st.u64 [%r79],%r101;
bra $L44;
$L43:
.loc 1 108 4
@ %r513 bra $L45;
mov.u64 %r236,%r98;
mov.u64 %r237,%r79;
.loc 1 109 3
mov.u64 %r160,%r145;
$L46:
ld.u64 %r158,[%r236];
ld.u64 %r159,[%r237];
st.u64 [%r236],%r159;
st.u64 [%r237],%r158;
add.u64 %r160,%r160,-1;
add.u64 %r236,%r236,8;
add.u64 %r237,%r237,8;
setp.gt.s64 %r410,%r160,0;
@ %r410 bra $L46;
bra $L44;
$L45:
mov.u64 %r241,%r79;
.loc 1 108 4
mov.u64 %r240,%r98;
add.u64 %r499,%r98,%r143;
$L47:
.loc 1 111 3
ld.s8 %r155,[%r240];
ld.u8 %r411,[%r241];
st.u8 [%r240],%r411;
cvt.u32.u32 %r412,%r155;
st.u8 [%r241],%r412;
add.u64 %r240,%r240,1;
add.u64 %r241,%r241,1;
sub.u64 %r414,%r499,%r240;
setp.gt.s64 %r415,%r414,0;
@ %r415 bra $L47;
$L44:
.loc 1 243 8
add.u64 %r79,%r79,%r89;
.loc 1 241 14
mov.u32 %r188,1;
$L42:
.loc 1 245 7
add.u64 %r98,%r98,%r89;
.loc 1 238 9
setp.ge.u64 %r416,%r98,%r248;
@ %r416 bra $L49;
$L39:
.loc 1 255 5
setp.eq.u32 %r417,%r188,0;
@ ! %r417 bra $L132;
bra $L29;
$L41:
.loc 1 199 37
neg.s64 %r89,%r265;
$L49:
.loc 1 238 36
{
.param .u32 %value_in;
$LCT22:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r98;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r263;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT22;
ld.param.u32 %r420,[%value_in];
}
.loc 1 238 19
setp.ge.s32 %r421,%r420,0;
@ %r421 bra $L51;
bra $L133;
$L84:
.loc 1 250 3
ld.u64 %r103,[%r248];
ld.u64 %r53,[%r98];
st.u64 [%r248],%r53;
st.u64 [%r98],%r103;
bra $L53;
$L137:
.loc 1 108 4
@ %r513 bra $L54;
mov.u64 %r226,%r98;
mov.u64 %r225,%r248;
.loc 1 109 3
mov.u64 %r165,%r145;
$L55:
ld.u64 %r163,[%r225];
ld.u64 %r164,[%r226];
st.u64 [%r225],%r164;
st.u64 [%r226],%r163;
add.u64 %r165,%r165,-1;
add.u64 %r225,%r225,8;
add.u64 %r226,%r226,8;
setp.gt.s64 %r423,%r165,0;
@ %r423 bra $L55;
bra $L53;
$L54:
mov.u64 %r230,%r98;
.loc 1 108 4
mov.u64 %r229,%r248;
add.u64 %r494,%r143,%r248;
$L56:
.loc 1 111 3
ld.s8 %r161,[%r229];
ld.u8 %r424,[%r230];
st.u8 [%r229],%r424;
cvt.u32.u32 %r425,%r161;
st.u8 [%r230],%r425;
add.u64 %r229,%r229,1;
add.u64 %r230,%r230,1;
sub.u64 %r427,%r494,%r229;
setp.gt.s64 %r428,%r427,0;
@ %r428 bra $L56;
$L53:
add.u64 %r498,%r265,%r248;
mov.u64 %r88,%r498;
.loc 1 253 6
add.u64 %r98,%r98,%r89;
.loc 1 251 12
mov.u32 %r188,1;
.loc 1 228 9
bra $L58;
$L65:
.loc 1 259 5
@ %r512 bra $L59;
ld.u64 %r105,[%r193];
ld.u64 %r56,[%r132];
st.u64 [%r193],%r56;
st.u64 [%r132],%r105;
bra $L60;
$L59:
.loc 1 108 4
@ %r513 bra $L100;
mov.u64 %r68,%r132;
.loc 1 109 3
mov.u64 %r171,%r145;
$L62:
ld.u64 %r169,[%r67];
ld.u64 %r170,[%r68];
st.u64 [%r67],%r170;
st.u64 [%r68],%r169;
add.u64 %r171,%r171,-1;
add.u64 %r67,%r67,8;
add.u64 %r68,%r68,8;
setp.gt.s64 %r431,%r171,0;
@ %r431 bra $L62;
bra $L60;
$L100:
mov.u64 %r80,%r132;
mov.u64 %r76,%r193;
add.u64 %r497,%r76,%r143;
$L61:
.loc 1 111 3
ld.s8 %r166,[%r76];
ld.u8 %r432,[%r80];
st.u8 [%r76],%r432;
cvt.u32.u32 %r433,%r166;
st.u8 [%r80],%r433;
add.u64 %r76,%r76,1;
add.u64 %r80,%r80,1;
sub.u64 %r435,%r497,%r76;
setp.gt.s64 %r436,%r435,0;
@ %r436 bra $L61;
$L60:
.loc 1 257 4
setp.lt.u64 %r437,%r263,%r132;
@ %r437 bra $L64;
$L66:
.loc 1 256 59
add.u64 %r106,%r106,%r265;
.loc 1 256 3
setp.gt.u64 %r438,%r84,%r106;
@ %r438 bra $L31;
bra $L6;
$L64:
mov.u64 %r193,%r132;
mov.u64 %r67,%r132;
sub.u64 %r132,%r132,%r265;
.loc 1 257 37
{
.param .u32 %value_in;
$LCT23:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r132;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r193;
call (%value_in),%r266,(%out_arg1,%out_arg2),$LCT23;
ld.param.u32 %r441,[%value_in];
}
.loc 1 257 34
setp.gt.s32 %r442,%r441,0;
@ %r442 bra $L65;
bra $L66;
$L31:
.loc 1 257 4
setp.ge.u64 %r443,%r263,%r106;
@ %r443 bra $L66;
mov.u64 %r132,%r106;
bra $L64;
$L132:
.loc 1 268 6
sub.u64 %r61,%r88,%r121;
sub.u64 %r444,%r121,%r263;
min.s64 %r63,%r444,%r61;
.loc 1 270 6
sub.u64 %r82,%r79,%r98;
sub.u64 %r445,%r84,%r79;
sub.u64 %r446,%r445,%r265;
.loc 1 270 4
min.u64 %r208,%r446,%r82;
.loc 1 269 2
setp.eq.u64 %r447,%r63,0;
@ %r447 bra $L67;
cvt.u32.u64 %r64,%r63;
sub.u64 %r66,%r88,%r63;
.loc 1 108 4
@ %r515 bra $L68;
.loc 1 109 3
cvt.s64.s32 %r449,%r64;
shr.u64 %r178,%r449,3;
mov.u64 %r191,%r263;
mov.u64 %r94,%r66;
$L69:
ld.u64 %r176,[%r191];
ld.u64 %r177,[%r94];
st.u64 [%r191],%r177;
st.u64 [%r94],%r176;
add.u64 %r178,%r178,-1;
add.u64 %r191,%r191,8;
add.u64 %r94,%r94,8;
setp.gt.s64 %r450,%r178,0;
@ %r450 bra $L69;
bra $L134;
$L68:
mov.u64 %r29,%r66;
.loc 1 108 4
mov.u64 %r93,%r263;
cvt.s64.s32 %r501,%r64;
.loc 1 111 3
add.u64 %r454,%r263,%r501;
$L71:
ld.s8 %r172,[%r93];
ld.u8 %r451,[%r29];
st.u8 [%r93],%r451;
cvt.u32.u32 %r452,%r172;
st.u8 [%r29],%r452;
add.u64 %r93,%r93,1;
add.u64 %r29,%r29,1;
sub.u64 %r455,%r454,%r93;
setp.gt.s64 %r456,%r455,0;
@ %r456 bra $L71;
bra $L135;
$L67:
.loc 1 271 2
setp.ne.u64 %r457,%r208,0;
@ %r457 bra $L73;
$L77:
.loc 1 272 4
mov.u64 %r75,%r61;
.loc 1 274 5
sub.u64 %r77,%r84,%r82;
.loc 1 281 5
setp.le.u64 %r458,%r82,%r75;
@ %r458 bra $L74;
mov.u64 %r75,%r82;
mov.u64 %r82,%r61;
mov.u64 %r268,%r263;
.loc 1 283 5
mov.u64 %r263,%r77;
.loc 1 281 5
mov.u64 %r77,%r268;
bra $L74;
$L73:
.loc 1 271 2
cvt.u32.u64 %r69,%r208;
sub.u64 %r71,%r84,%r208;
.loc 1 108 4
@ %r515 bra $L75;
$L87:
.loc 1 109 3
cvt.s64.s32 %r460,%r69;
shr.u64 %r185,%r460,3;
mov.u64 %r92,%r88;
mov.u64 %r190,%r71;
$L76:
ld.u64 %r183,[%r92];
ld.u64 %r184,[%r190];
st.u64 [%r92],%r184;
st.u64 [%r190],%r183;
add.u64 %r185,%r185,-1;
add.u64 %r92,%r92,8;
add.u64 %r190,%r190,8;
setp.gt.s64 %r461,%r185,0;
@ %r461 bra $L76;
bra $L77;
$L75:
mov.u64 %r203,%r71;
.loc 1 108 4
mov.u64 %r202,%r88;
cvt.s64.s32 %r502,%r69;
.loc 1 111 3
add.u64 %r465,%r202,%r502;
$L78:
ld.s8 %r179,[%r202];
ld.u8 %r462,[%r203];
st.u8 [%r202],%r462;
cvt.u32.u32 %r463,%r179;
st.u8 [%r203],%r463;
add.u64 %r202,%r202,1;
add.u64 %r203,%r203,1;
sub.u64 %r466,%r465,%r202;
setp.gt.s64 %r467,%r466,0;
@ %r467 bra $L78;
bra $L77;
$L74:
.loc 1 300 5
setp.le.u64 %r468,%r82,%r265;
@ %r468 bra $L79;
.loc 1 301 6
setp.gt.u64 %r469,%r43,7;
@ %r469 bra $L80;
.loc 1 311 39
shl.b64 %r470,%r43,4;
add.u64 %r471,%frame,%r470;
st.u64 [%r471],%r263;
.loc 1 312 43
div.u64 %r475,%r75,%r265;
.loc 1 312 39
st.u64 [%r471+8],%r475;
.loc 1 313 19
add.u64 %r43,%r43,1;
.loc 1 315 6
div.u64 %r264,%r82,%r265;
.loc 1 314 6
mov.u64 %r263,%r77;
.loc 1 316 4
bra $L3;
$L80:
.loc 1 315 6
div.u64 %r481,%r82,%r265;
.loc 1 329 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r77;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r481;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r265;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r266;
call qsort,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
}
.loc 1 333 5
setp.gt.u64 %r482,%r75,%r265;
@ %r482 bra $L82;
$L83:
.loc 1 340 18
add.u64 %r43,%r43,-1;
.loc 1 341 5
shl.b64 %r483,%r43,4;
add.u64 %r484,%frame,%r483;
ld.u64 %r263,[%r484];
.loc 1 342 5
ld.u64 %r264,[%r484+8];
.loc 1 343 3
bra $L3;
$L82:
.loc 1 334 5
div.u64 %r264,%r75,%r265;
.loc 1 335 3
bra $L3;
$L79:
.loc 1 333 5
setp.gt.u64 %r488,%r75,%r265;
@ %r488 bra $L82;
$L6:
.loc 1 339 5
setp.ne.u64 %r489,%r43,0;
@ %r489 bra $L83;
bra $L136;
$L133:
.loc 1 250 3
@ %r514 bra $L84;
bra $L137;
$L86:
.loc 1 271 2
cvt.u32.u64 %r69,%r208;
sub.u64 %r71,%r84,%r208;
bra $L75;
$L135:
setp.ne.u64 %r491,%r208,0;
@ ! %r491 bra $L77;
bra $L86;
$L88:
cvt.u32.u64 %r69,%r208;
sub.u64 %r71,%r84,%r208;
bra $L87;
$L134:
setp.ne.u64 %r492,%r208,0;
@ ! %r492 bra $L77;
bra $L88;
$L136:
.loc 1 345 1
ret;
}

/717            1612277262  0     0     100666  2192      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: at_quick_exit
.visible .func (.param .u32 %value_out) at_quick_exit (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/quick_exit.c"
// BEGIN GLOBAL FUNCTION DECL: quick_exit
.visible .func quick_exit (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.extern .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _exit
.extern .func _exit (.param .u32 %in_ar0);
// BEGIN VAR DEF: handlers
.global .align 8 .u64 handlers[1];
// BEGIN GLOBAL FUNCTION DEF: at_quick_exit
.visible .func (.param .u32 %value_out) at_quick_exit (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r29;
.reg .u64 %r30;
mov.u64 %r25,%ar0;
.loc 1 60 6
mov.u64 %r26,16;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r27,[%value_in];
}
.loc 1 62 5
setp.eq.u64 %r29,%r27,0;
@ %r29 bra $L3;
.loc 1 64 13
st.u64 [%r27+8],%r25;
.loc 1 68 10
ld.global.u64 %r30,[handlers];
st.u64 [%r27],%r30;
.loc 1 69 11
st.global.u64 [handlers],%r27;
.loc 1 73 9
mov.u32 %r24,0;
bra $L1;
$L3:
.loc 1 63 10
mov.u32 %r24,1;
$L1:
.loc 1 74 1
mov.u32 %value,%r24;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: quick_exit
.visible .func quick_exit (.param .u32 %in_ar0)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r24;
.reg .pred %r25;
.reg .u64 %r26;
.reg .pred %r27;
mov.u32 %r24,%ar0;
.loc 1 85 9
ld.global.u64 %r23,[handlers];
.loc 1 85 2
setp.eq.u64 %r25,%r23,0;
@ %r25 bra $L5;
$L6:
.loc 1 86 3
ld.u64 %r26,[%r23+8];
{
$LCT0:
.callprototype _;
call %r26,$LCT0;
}
.loc 1 85 34
ld.u64 %r23,[%r23];
.loc 1 85 2
setp.ne.u64 %r27,%r23,0;
@ %r27 bra $L6;
$L5:
.loc 1 87 2
{
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r24;
call _exit,(%out_arg1);
trap;
// (noreturn)
exit;
// (noreturn)
}
}
lib_a-raise.o/  1612277262  0     0     100666  171       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _dummy_raise
.visible .global .align 4 .u32 _dummy_raise[1];

lib_a-rand.o/   1612277262  0     0     100666  1250      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: srand
.visible .func srand (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/rand.c"
// BEGIN GLOBAL FUNCTION DECL: rand
.visible .func (.param .u32 %value_out) rand;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: srand
.visible .func srand (.param .u32 %in_ar0)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
mov.u32 %r24,%ar0;
.loc 1 67 27
ld.global.u64 %r25,[_impure_ptr];
cvt.u64.u32 %r26,%r24;
st.u64 [%r25+232],%r26;
.loc 1 68 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: rand
.visible .func (.param .u32 %value_out) rand
{
.reg .u32 %value;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u32 %r33;
.loc 1 73 18
ld.global.u64 %r27,[_impure_ptr];
.loc 1 80 30
ld.u64 %r30,[%r27+232];
.loc 1 80 68
mad.lo.u64 %r24,%r30,6364136223846793005,1;
.loc 1 79 27
st.u64 [%r27+232],%r24;
.loc 1 81 41
shr.u64 %r32,%r24,32;
.loc 1 81 10
cvt.u32.u64 %r33,%r32;
and.b32 %value,%r33,2147483647;
.loc 1 82 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-rand48.o/ 1612277262  0     0     100666  2086      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __dorand48
.visible .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/rand48.c"
// BEGIN GLOBAL FUNCTION DEF: __dorand48
.visible .func __dorand48 (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u32 %r30;
.reg .u32 %r33;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u16 %r60;
.reg .u16 %r61;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u16 %r65;
.reg .u64 %r67;
.reg .u16 %r68;
.reg .u64 %r69;
.reg .u64 %r70;
.reg .u32 %r71;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .u32 %r77;
.reg .u64 %r78;
mov.u64 %r58,%ar0;
mov.u64 %r59,%ar1;
.loc 1 140 39
ld.u16 %r22,[%r58+246];
.loc 1 140 10
cvt.u16.u32 %r60,%r22;
cvt.u64.u16 %r23,%r60;
.loc 1 140 66
ld.u16 %r24,[%r59];
.loc 1 140 45
cvt.u16.u32 %r61,%r24;
cvt.u64.u16 %r25,%r61;
.loc 1 141 5
ld.u16 %r63,[%r58+252];
.loc 1 140 8
mad.lo.u64 %r53,%r23,%r25,%r63;
.loc 1 143 8
shr.u64 %r54,%r53,16;
.loc 1 144 67
ld.u16 %r30,[%r59+2];
.loc 1 145 34
ld.u16 %r33,[%r58+248];
.loc 1 144 46
cvt.u16.u32 %r65,%r30;
cvt.u64.u16 %r64,%r65;
.loc 1 145 5
cvt.u16.u32 %r68,%r33;
cvt.u64.u16 %r67,%r68;
.loc 1 145 38
mul.lo.u64 %r69,%r67,%r25;
.loc 1 144 71
mad.lo.u64 %r70,%r64,%r23,%r69;
.loc 1 144 8
add.u64 %r55,%r70,%r54;
.loc 1 147 8
shr.u64 %r56,%r55,16;
.loc 1 148 35
ld.u16 %r71,[%r59+4];
.loc 1 148 58
mul.lo.u32 %r73,%r33,%r30;
.loc 1 148 39
mad.lo.u32 %r74,%r71,%r22,%r73;
.loc 1 148 84
ld.u16 %r75,[%r58+250];
.loc 1 148 69
mad.lo.u32 %r77,%r75,%r24,%r74;
cvt.s64.s32 %r78,%r77;
.loc 1 148 8
add.u64 %r57,%r78,%r56;
.loc 1 142 13
st.u16 [%r59],%r53;
.loc 1 146 13
st.u16 [%r59+2],%r55;
.loc 1 151 14
st.u16 [%r59+4],%r57;
.loc 1 152 1
ret;
}
lib_a-rand_r.o/ 1612277262  0     0     100666  1372      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: rand_r
.visible .func (.param .u32 %value_out) rand_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/rand_r.c"
// BEGIN GLOBAL FUNCTION DEF: rand_r
.visible .func (.param .u32 %value_out) rand_r (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u32 %r34;
.reg .u64 %r35;
.reg .pred %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .pred %r40;
mov.u64 %r35,%ar0;
.loc 1 28 14
ld.u32 %r27,[%r35];
.loc 1 29 12
setp.eq.u64 %r36,%r27,0;
@ %r36 bra $L4;
.loc 1 31 11
div.s64 %r28,%r27,127773;
.loc 1 32 24
mad.lo.u64 %r38,%r28,-127773,%r27;
.loc 1 32 45
mul.lo.u64 %r39,%r28,-2836;
.loc 1 32 11
mad.lo.u64 %r29,%r38,16807,%r39;
.loc 1 33 12
setp.lt.s64 %r40,%r29,0;
@ %r40 bra $L3;
.loc 1 35 19
cvt.u32.u64 %r31,%r29;
.loc 1 36 16
and.b32 %r34,%r31,2147483647;
bra $L2;
$L3:
.loc 1 34 13
add.u64 %r30,%r29,2147483647;
.loc 1 35 19
cvt.u32.u64 %r31,%r30;
.loc 1 36 16
and.b32 %r34,%r31,2147483647;
bra $L2;
$L4:
mov.u32 %r34,719435623;
mov.u32 %r31,%r34;
$L2:
.loc 1 35 17
st.u32 [%r35],%r31;
.loc 1 37 1
mov.u32 %value,%r34;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-random.o/ 1612277262  0     0     100666  1227      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: srandom
.visible .func srandom (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/stdlib/random.c"
// BEGIN GLOBAL FUNCTION DECL: random
.visible .func (.param .u64 %value_out) random;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: srandom
.visible .func srandom (.param .u32 %in_ar0)
{
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
mov.u32 %r24,%ar0;
.loc 1 65 27
ld.global.u64 %r25,[_impure_ptr];
cvt.u64.u32 %r26,%r24;
st.u64 [%r25+232],%r26;
.loc 1 66 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: random
.visible .func (.param .u64 %value_out) random
{
.reg .u64 %value;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u64 %r32;
.loc 1 71 18
ld.global.u64 %r27,[_impure_ptr];
.loc 1 78 30
ld.u64 %r30,[%r27+232];
.loc 1 78 68
mad.lo.u64 %r24,%r30,6364136223846793005,1;
.loc 1 77 27
st.u64 [%r27+232],%r24;
.loc 1 79 46
shr.u64 %r32,%r24,32;
.loc 1 79 10
and.b64 %value,%r32,2147483647;
.loc 1 80 1
st.param.u64 [%value_out],%value;
ret;
}

lib_a-readr.o/  1612277262  0     0     100666  1840      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _read_r
.visible .func (.param .u64 %value_out) _read_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/reent/readr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: read
.extern .func (.param .u32 %value_out) read (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _read_r
.visible .func (.param .u64 %value_out) _read_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u32 %r33;
.reg .pred %r34;
.reg .pred %r35;
mov.u64 %r25,%ar0;
mov.u32 %r26,%ar1;
mov.u64 %r27,%ar2;
mov.u64 %r28,%ar3;
.loc 1 48 9
mov.u32 %r29,0;
st.global.u32 [errno],%r29;
.loc 1 49 24
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),read,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r33,[%value_in];
}
.loc 1 49 12
cvt.s64.s32 %r24,%r33;
.loc 1 49 6
setp.ne.u32 %r34,%r33,-1;
@ %r34 bra $L1;
.loc 1 49 61
ld.global.u32 %r23,[errno];
.loc 1 49 52
setp.eq.u32 %r35,%r23,0;
@ %r35 bra $L1;
.loc 1 50 17
st.u32 [%r25],%r23;
$L1:
.loc 1 52 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-realloc.o/1612277262  0     0     100666  2280      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __nvptx_realloc
.visible .func (.param .u64 %value_out) __nvptx_realloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../../newlib/libc/machine/nvptx/realloc.c"
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.extern .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __nvptx_free
.extern .func __nvptx_free (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __nvptx_realloc
.visible .func (.param .u64 %value_out) __nvptx_realloc (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u32 %r42;
.reg .u16 %r43;
.reg .pred %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r53;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 21 19
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 23 7
set.u32.ne.u64 %r34,%r28,0;
neg.s32 %r35,%r34;
.loc 1 23 15
set.u32.ne.u64 %r37,%r31,0;
neg.s32 %r38,%r37;
cvt.u16.u32 %r40,%r35;
cvt.u16.u32 %r41,%r38;
and.b16 %r39,%r40,%r41;
.loc 1 23 6
cvt.u32.u16 %r42,%r39;
cvt.u16.u8 %r43,%r42;
setp.eq.u16 %r44,%r43,0;
@ %r44 bra $L1;
.loc 1 26 14
ld.u64 %r46,[%r28+-8];
min.u64 %r45,%r29,%r46;
.loc 1 27 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r45;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r53,[%value_in];
}
.loc 1 28 7
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
call __nvptx_free,(%out_arg1);
}
$L1:
.loc 1 32 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
/737            1612277262  0     0     100666  3291      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: reallocarray
.visible .func (.param .u64 %value_out) reallocarray (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/reallocarray.c"
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DECL: __nvptx_realloc
.extern .func (.param .u64 %value_out) __nvptx_realloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: reallocarray
.visible .func (.param .u64 %value_out) reallocarray (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u32 %r37;
.reg .pred %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .u32 %r42;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u64 %r49;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u32 %r61;
.reg .pred %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .pred %r68;
.reg .pred %r69;
.reg .u64 %r70;
.reg .u32 %r71;
.reg .u64 %r74;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
.loc 1 29 6
mov.u64 %r27,0;
shr.u64 %r32,%r30,32;
shr.u64 %r33,%r31,32;
cvt.u32.u64 %r35,%r32;
setp.ne.u32 %r36,%r35,0;
@ %r36 bra $L4;
cvt.u32.u64 %r37,%r33;
setp.ne.u32 %r38,%r37,0;
@ %r38 bra $L5;
cvt.u32.u64 %r40,%r30;
cvt.u64.u32 %r39,%r40;
cvt.u32.u64 %r42,%r31;
cvt.u64.u32 %r41,%r42;
mul.lo.u64 %r34,%r39,%r41;
bra $L2;
$L5:
cvt.u32.u64 %r45,%r33;
cvt.u32.u64 %r46,%r30;
bra $L6;
$L4:
cvt.u32.u64 %r47,%r33;
setp.ne.u32 %r48,%r47,0;
@ %r48 bra $L8;
cvt.u32.u64 %r45,%r32;
cvt.u32.u64 %r46,%r31;
$L6:
cvt.u32.u64 %r50,%r30;
cvt.u64.u32 %r49,%r50;
cvt.u32.u64 %r52,%r31;
cvt.u64.u32 %r51,%r52;
mul.lo.u64 %r53,%r49,%r51;
cvt.u64.u32 %r55,%r46;
cvt.u64.u32 %r56,%r45;
shr.u64 %r58,%r53,32;
mad.lo.u64 %r59,%r55,%r56,%r58;
shr.s64 %r60,%r59,32;
cvt.u32.u64 %r61,%r60;
setp.ne.u32 %r62,%r61,0;
@ %r62 bra $L8;
shl.b64 %r63,%r59,32;
cvt.u32.u64 %r65,%r53;
cvt.u64.u32 %r64,%r65;
or.b64 %r34,%r63,%r64;
bra $L2;
$L8:
mul.lo.u64 %r34,%r30,%r31;
mov.u64 %r27,1;
$L2:
setp.ge.s64 %r68,%r34,0;
@ ! %r68 bra $L12;
.loc 1 29 5
setp.eq.u64 %r69,%r27,0;
@ %r69 bra $L10;
$L12:
.loc 1 31 3
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r70,[%value_in];
}
.loc 1 31 9
mov.u32 %r71,12;
st.u32 [%r70],%r71;
.loc 1 32 10
mov.u64 %r28,0;
bra $L1;
$L10:
.loc 1 34 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
call (%value_in),__nvptx_realloc,(%out_arg1,%out_arg2);
ld.param.u64 %r74,[%value_in];
}
mov.u64 %r28,%r74;
$L1:
.loc 1 35 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

/759            1612277262  0     0     100666  3705      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _reallocf_r
.visible .func (.param .u64 %value_out) _reallocf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/reallocf.c"
// BEGIN GLOBAL FUNCTION DECL: reallocf
.visible .func (.param .u64 %value_out) reallocf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _realloc_r
.extern .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _reallocf_r
.visible .func (.param .u64 %value_out) _reallocf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r32;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u32 %r42;
.reg .u16 %r43;
.reg .pred %r44;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 40 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r32,[%value_in];
}
.loc 1 41 6
set.u32.eq.u64 %r34,%r32,0;
neg.s32 %r35,%r34;
.loc 1 41 12
set.u32.ne.u64 %r37,%r27,0;
neg.s32 %r38,%r37;
cvt.u16.u32 %r40,%r35;
cvt.u16.u32 %r41,%r38;
and.b16 %r39,%r40,%r41;
.loc 1 41 5
cvt.u32.u16 %r42,%r39;
cvt.u16.u8 %r43,%r42;
setp.eq.u16 %r44,%r43,0;
@ %r44 bra $L1;
.loc 1 42 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call _free_r,(%out_arg1,%out_arg2);
}
$L1:
.loc 1 44 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: reallocf
.visible .func (.param .u64 %value_out) reallocf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r32;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u32 %r42;
.reg .u16 %r43;
.reg .pred %r44;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 51 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 40 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r32,[%value_in];
}
.loc 1 41 6
set.u32.eq.u64 %r34,%r32,0;
neg.s32 %r35,%r34;
.loc 1 41 12
set.u32.ne.u64 %r37,%r27,0;
neg.s32 %r38,%r37;
cvt.u16.u32 %r40,%r35;
cvt.u16.u32 %r41,%r38;
and.b16 %r39,%r40,%r41;
.loc 1 41 5
cvt.u32.u16 %r42,%r39;
cvt.u16.u8 %r43,%r42;
setp.eq.u16 %r44,%r43,0;
@ %r44 bra $L6;
.loc 1 42 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call _free_r,(%out_arg1,%out_arg2);
}
$L6:
.loc 1 52 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

/777            1612277262  0     0     100666  1193      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _realloc_r
.visible .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../../newlib/libc/machine/nvptx/reallocr.c"
// BEGIN GLOBAL FUNCTION DECL: __nvptx_realloc
.extern .func (.param .u64 %value_out) __nvptx_realloc (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _realloc_r
.visible .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 20 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call (%value_in),__nvptx_realloc,(%out_arg1,%out_arg2);
ld.param.u64 %r28,[%value_in];
}
.loc 1 21 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-reent.o/  1612277262  0     0     100666  5779      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: cleanup_glue
.visible .func cleanup_glue (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/reent/reent.c"
// BEGIN GLOBAL FUNCTION DECL: _reclaim_reent
.visible .func _reclaim_reent (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DEF: errno
.visible .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DEF: cleanup_glue
.visible .func cleanup_glue (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 37 11
ld.u64 %r22,[%r27];
.loc 1 37 6
setp.eq.u64 %r28,%r22,0;
@ %r28 bra $L2;
.loc 1 37 11
ld.u64 %r23,[%r22];
.loc 1 37 6
setp.eq.u64 %r29,%r23,0;
@ %r29 bra $L3;
.loc 1 37 11
ld.u64 %r24,[%r23];
.loc 1 37 6
setp.eq.u64 %r30,%r24,0;
@ %r30 bra $L4;
.loc 1 37 11
ld.u64 %r25,[%r24];
.loc 1 37 6
setp.eq.u64 %r31,%r25,0;
@ %r31 bra $L5;
.loc 1 38 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call cleanup_glue,(%out_arg1,%out_arg2);
}
$L5:
.loc 1 40 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call _free_r,(%out_arg1,%out_arg2);
}
$L4:
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call _free_r,(%out_arg1,%out_arg2);
}
$L3:
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
call _free_r,(%out_arg1,%out_arg2);
}
$L2:
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 41 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _reclaim_reent
.visible .func _reclaim_reent (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .pred %r40;
.reg .u64 %r41;
.reg .pred %r42;
.reg .pred %r45;
.reg .pred %r46;
.reg .pred %r49;
.reg .pred %r52;
.reg .pred %r53;
.reg .pred %r54;
.reg .pred %r57;
.reg .u32 %r60;
.reg .pred %r61;
.reg .u64 %r63;
.reg .pred %r64;
.reg .pred %r65;
mov.u64 %r37,%ar0;
.loc 1 46 6
ld.global.u64 %r38,[_impure_ptr];
setp.ne.u64 %r39,%r38,%r37;
@ ! %r39 bra $L18;
.loc 1 53 11
ld.u64 %r32,[%r37+120];
.loc 1 53 10
setp.eq.u64 %r40,%r32,0;
@ %r40 bra $L21;
mov.u64 %r25,0;
$L24:
.loc 1 60 16
add.u64 %r41,%r32,%r25;
ld.u64 %r33,[%r41];
.loc 1 61 14
setp.eq.u64 %r42,%r33,0;
@ %r42 bra $L22;
$L23:
mov.u64 %r23,%r33;
.loc 1 64 13
ld.u64 %r33,[%r33];
.loc 1 65 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 61 14
setp.ne.u64 %r45,%r33,0;
@ %r45 bra $L23;
.loc 1 69 18
ld.u64 %r32,[%r37+120];
$L22:
.loc 1 56 4
add.u64 %r25,%r25,8;
setp.ne.u64 %r46,%r25,512;
@ %r46 bra $L24;
.loc 1 69 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
call _free_r,(%out_arg1,%out_arg2);
}
$L21:
.loc 1 71 11
ld.u64 %r26,[%r37+96];
.loc 1 71 10
setp.eq.u64 %r49,%r26,0;
@ %r49 bra $L25;
.loc 1 72 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call _free_r,(%out_arg1,%out_arg2);
}
$L25:
.loc 1 100 15
ld.u64 %r34,[%r37+504];
.loc 1 100 10
setp.ne.u64 %r52,%r34,0;
@ %r52 bra $L26;
$L29:
.loc 1 113 14
ld.u64 %r28,[%r37+136];
.loc 1 113 10
setp.ne.u64 %r53,%r28,0;
@ %r53 bra $L27;
bra $L28;
$L26:
.loc 1 100 46
add.u64 %r27,%r37,512;
.loc 1 100 26
setp.eq.u64 %r54,%r34,%r27;
@ %r54 bra $L29;
$L30:
mov.u64 %r36,%r34;
.loc 1 106 10
ld.u64 %r34,[%r34];
.loc 1 107 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r36;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 103 4
setp.ne.u64 %r57,%r27,%r34;
@ %r57 bra $L30;
bra $L29;
$L27:
.loc 1 114 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call _free_r,(%out_arg1,%out_arg2);
}
$L28:
.loc 1 121 10
ld.u32 %r60,[%r37+80];
setp.eq.u32 %r61,%r60,0;
@ %r61 bra $L18;
.loc 1 125 4
ld.u64 %r63,[%r37+88];
{
$LCT0:
.callprototype _ ( .param .u64 %in_ar0);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
call %r63,(%out_arg1),$LCT0;
}
.loc 1 127 20
ld.u64 %r31,[%r37+1312];
.loc 1 127 7
setp.eq.u64 %r64,%r31,0;
@ %r64 bra $L18;
.loc 1 37 11
ld.u64 %r35,[%r31];
.loc 1 37 6
setp.eq.u64 %r65,%r35,0;
@ %r65 bra $L32;
.loc 1 38 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r35;
call cleanup_glue,(%out_arg1,%out_arg2);
}
$L32:
.loc 1 40 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call _free_r,(%out_arg1,%out_arg2);
}
$L18:
.loc 1 134 1
ret;
}

lib_a-refill.o/ 1612277262  0     0     100666  8164      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: lflush
.func (.param .u32 %value_out) lflush (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/refill.c"
// BEGIN GLOBAL FUNCTION DECL: __srefill_r
.visible .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _global_impure_ptr
.extern .const .align 8 .u64 _global_impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: fflush
.extern .func (.param .u32 %value_out) fflush (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __smakebuf_r
.extern .func __smakebuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fwalk
.extern .func (.param .u32 %value_out) _fwalk (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sflush_r
.extern .func (.param .u32 %value_out) __sflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DEF: lflush
.func (.param .u32 %value_out) lflush (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u16 %r26;
.reg .u16 %r27;
.reg .pred %r28;
.reg .u32 %r30;
mov.u64 %r25,%ar0;
.loc 1 28 6
ld.u16 %r27,[%r25+16];
and.b16 %r26,%r27,9;
setp.ne.u16 %r28,%r26,9;
@ %r28 bra $L3;
.loc 1 29 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call (%value_in),fflush,(%out_arg1);
ld.param.u32 %r30,[%value_in];
}
mov.u32 %r24,%r30;
bra $L1;
$L3:
.loc 1 30 10
mov.u32 %r24,0;
$L1:
.loc 1 31 1
mov.u32 %value,%r24;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __srefill_r
.visible .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u64 %r30;
.reg .u32 %r32;
.reg .u64 %r37;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .pred %r61;
.reg .u16 %r62;
.reg .u32 %r65;
.reg .u32 %r66;
.reg .u32 %r67;
.reg .u16 %r68;
.reg .u16 %r69;
.reg .pred %r70;
.reg .u16 %r71;
.reg .pred %r73;
.reg .u16 %r74;
.reg .pred %r76;
.reg .u32 %r77;
.reg .u16 %r78;
.reg .u16 %r80;
.reg .pred %r82;
.reg .u32 %r85;
.reg .pred %r86;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .u16 %r91;
.reg .u16 %r92;
.reg .pred %r93;
.reg .u64 %r94;
.reg .pred %r95;
.reg .u64 %r98;
.reg .pred %r99;
.reg .u64 %r100;
.reg .u64 %r101;
.reg .pred %r102;
.reg .u16 %r105;
.reg .u16 %r106;
.reg .pred %r107;
.reg .u16 %r108;
.reg .u64 %r110;
.reg .u64 %r111;
.reg .u32 %r112;
.reg .u16 %r114;
.reg .pred %r116;
.reg .u32 %r119;
.reg .u32 %r124;
.reg .u64 %r125;
.reg .u32 %r126;
.reg .u64 %r127;
.reg .pred %r128;
.reg .pred %r129;
.reg .u16 %r130;
.reg .u16 %r131;
.reg .u32 %r132;
.reg .u16 %r133;
.reg .u16 %r134;
mov.u64 %r53,%ar0;
mov.u64 %r54,%ar1;
.loc 1 44 3
setp.eq.u64 %r55,%r53,0;
@ %r55 bra $L5;
ld.u32 %r56,[%r53+80];
setp.ne.u32 %r57,%r56,0;
@ %r57 bra $L5;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
call __sinit,(%out_arg1);
}
$L5:
.loc 1 46 3
ld.s16 %r23,[%r54+16];
cvt.u16.u32 %r60,%r23;
and.b16 %r59,%r60,8192;
setp.ne.u16 %r61,%r59,0;
@ %r61 bra $L6;
or.b16 %r62,%r60,8192;
cvt.s32.s16 %r23,%r62;
st.u16 [%r54+16],%r62;
ld.u32 %r66,[%r54+172];
and.b32 %r65,%r66,-8193;
st.u32 [%r54+172],%r65;
$L6:
.loc 1 48 10
mov.u32 %r67,0;
st.u32 [%r54+8],%r67;
.loc 1 52 6
cvt.u16.u32 %r69,%r23;
and.b16 %r68,%r69,32;
setp.eq.u16 %r70,%r68,0;
@ %r70 bra $L7;
$L12:
.loc 1 53 12
mov.u32 %r52,-1;
bra $L4;
$L7:
.loc 1 57 6
and.b16 %r71,%r69,4;
setp.ne.u16 %r73,%r71,0;
@ %r73 bra $L9;
.loc 1 59 10
and.b16 %r74,%r69,16;
setp.ne.u16 %r76,%r74,0;
@ %r76 bra $L10;
.loc 1 61 16
mov.u32 %r77,9;
st.u32 [%r53],%r77;
.loc 1 62 15
or.b16 %r78,%r69,64;
st.u16 [%r54+16],%r78;
.loc 1 63 11
mov.u32 %r52,-1;
bra $L4;
$L10:
.loc 1 66 10
and.b16 %r80,%r69,8;
setp.eq.u16 %r82,%r80,0;
@ %r82 bra $L11;
.loc 1 68 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r85,[%value_in];
}
.loc 1 68 7
setp.ne.u32 %r86,%r85,0;
@ %r86 bra $L12;
.loc 1 70 15
ld.u16 %r88,[%r54+16];
and.b16 %r87,%r88,-9;
cvt.s32.s16 %r23,%r87;
.loc 1 71 11
st.u32 [%r54+12],%r85;
.loc 1 72 17
st.u32 [%r54+40],%r85;
$L11:
.loc 1 74 18
cvt.u16.u32 %r92,%r23;
or.b16 %r91,%r92,4;
st.u16 [%r54+16],%r91;
bra $L13;
$L9:
.loc 1 84 11
ld.u64 %r30,[%r54+88];
.loc 1 84 10
setp.eq.u64 %r93,%r30,0;
@ %r93 bra $L13;
.loc 1 86 4
add.u64 %r94,%r54,116;
setp.eq.u64 %r95,%r30,%r94;
@ %r95 bra $L15;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call _free_r,(%out_arg1,%out_arg2);
}
$L15:
mov.u64 %r98,0;
st.u64 [%r54+88],%r98;
.loc 1 87 20
ld.u32 %r32,[%r54+112];
.loc 1 87 16
st.u32 [%r54+8],%r32;
.loc 1 87 7
setp.eq.u32 %r99,%r32,0;
@ %r99 bra $L13;
.loc 1 89 15
ld.u64 %r100,[%r54+104];
st.u64 [%r54],%r100;
.loc 1 90 15
cvt.u32.u64 %r52,%r98;
bra $L4;
$L13:
.loc 1 95 6
ld.u64 %r101,[%r54+24];
setp.ne.u64 %r102,%r101,0;
@ %r102 bra $L16;
.loc 1 96 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
call __smakebuf_r,(%out_arg1,%out_arg2);
}
$L16:
.loc 1 103 6
ld.u16 %r106,[%r54+16];
and.b16 %r105,%r106,3;
setp.ne.u16 %r107,%r105,0;
@ ! %r107 bra $L18;
.loc 1 107 18
mov.u16 %r108,1;
st.u16 [%r54+16],%r108;
.loc 1 108 14
ld.const.u64 %r111,[_global_impure_ptr];
mov.u64 %r110,lflush;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r110;
call (%value_in),_fwalk,(%out_arg1,%out_arg2);
ld.param.u32 %r112,[%value_in];
}
.loc 1 109 18
st.u16 [%r54+16],%r106;
.loc 1 112 10
and.b16 %r114,%r106,9;
setp.ne.u16 %r116,%r114,9;
@ %r116 bra $L18;
.loc 1 113 2
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
call (%value_in),__sflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r119,[%value_in];
}
$L18:
.loc 1 116 19
ld.u64 %r37,[%r54+24];
.loc 1 116 10
st.u64 [%r54],%r37;
.loc 1 117 12
ld.u32 %r124,[%r54+32];
ld.u64 %r125,[%r54+48];
ld.u64 %r127,[%r54+56];
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r125;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r37;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r124;
call (%value_in),%r127,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u32 %r126,[%value_in];
}
.loc 1 117 10
st.u32 [%r54+8],%r126;
.loc 1 119 6
setp.gt.s32 %r128,%r126,0;
@ %r128 bra $L21;
.loc 1 127 13
ld.s16 %r51,[%r54+16];
.loc 1 126 10
setp.ne.u32 %r129,%r126,0;
@ %r129 bra $L20;
.loc 1 127 13
cvt.u16.u32 %r131,%r51;
or.b16 %r130,%r131,32;
st.u16 [%r54+16],%r130;
.loc 1 133 14
mov.u32 %r52,-1;
bra $L4;
$L20:
.loc 1 130 11
mov.u32 %r132,0;
st.u32 [%r54+8],%r132;
.loc 1 131 15
cvt.u16.u32 %r134,%r51;
or.b16 %r133,%r134,64;
st.u16 [%r54+16],%r133;
.loc 1 133 14
mov.u32 %r52,-1;
bra $L4;
$L21:
.loc 1 135 10
mov.u32 %r52,0;
$L4:
.loc 1 136 1
mov.u32 %value,%r52;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-remove.o/ 1612277262  0     0     100666  1910      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _remove_r
.visible .func (.param .u32 %value_out) _remove_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/remove.c"
// BEGIN GLOBAL FUNCTION DECL: remove
.visible .func (.param .u32 %value_out) remove (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _unlink_r
.extern .func (.param .u32 %value_out) _unlink_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _remove_r
.visible .func (.param .u32 %value_out) _remove_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r30;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 65 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_unlink_r,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 65 6
set.u32.eq.u32 %value,%r30,-1;
.loc 1 69 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: remove
.visible .func (.param .u32 %value_out) remove (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u32 %r31;
mov.u64 %r27,%ar0;
.loc 1 65 7
ld.global.u64 %r30,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_unlink_r,(%out_arg1,%out_arg2);
ld.param.u32 %r31,[%value_in];
}
.loc 1 65 6
set.u32.eq.u32 %value,%r31,-1;
.loc 1 77 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-rename.o/ 1612277262  0     0     100666  1282      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: rename
.visible .func (.param .u32 %value_out) rename (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/rename.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _rename_r
.extern .func (.param .u32 %value_out) _rename_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: rename
.visible .func (.param .u32 %value_out) rename (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u32 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 60 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),_rename_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r30,[%value_in];
}
.loc 1 61 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-renamer.o/1612277262  0     0     100666  1828      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _rename_r
.visible .func (.param .u32 %value_out) _rename_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/renamer.c"
// BEGIN GLOBAL FUNCTION DECL: _link_r
.extern .func (.param .u32 %value_out) _link_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _unlink_r
.extern .func (.param .u32 %value_out) _unlink_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _rename_r
.visible .func (.param .u32 %value_out) _rename_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r36;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 54 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),_link_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r32,[%value_in];
}
mov.u32 %r25,%r32;
.loc 1 54 6
setp.eq.u32 %r33,%r25,-1;
@ %r33 bra $L1;
.loc 1 57 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
call (%value_in),_unlink_r,(%out_arg1,%out_arg2);
ld.param.u32 %r36,[%value_in];
}
.loc 1 57 6
set.u32.eq.u32 %r25,%r36,-1;
$L1:
.loc 1 64 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-rewind.o/ 1612277262  0     0     100666  2290      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _rewind_r
.visible .func _rewind_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/rewind.c"
// BEGIN GLOBAL FUNCTION DECL: rewind
.visible .func rewind (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _fseek_r
.extern .func (.param .u32 %value_out) _fseek_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _rewind_r
.visible .func _rewind_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u16 %r31;
.reg .u16 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 58 10
mov.u32 %r29,0;
mov.u64 %r28,0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r29;
call (%value_in),_fseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r30,[%value_in];
}
.loc 1 59 3
ld.u16 %r32,[%r25+16];
and.b16 %r31,%r32,-97;
st.u16 [%r25+16],%r31;
.loc 1 60 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: rewind
.visible .func rewind (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u16 %r32;
.reg .u16 %r33;
mov.u64 %r25,%ar0;
.loc 1 58 10
ld.global.u64 %r30,[_impure_ptr];
mov.u32 %r29,0;
mov.u64 %r28,0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r29;
call (%value_in),_fseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r31,[%value_in];
}
.loc 1 59 3
ld.u16 %r33,[%r25+16];
and.b16 %r32,%r33,-97;
st.u16 [%r25+16],%r32;
.loc 1 68 1
ret;
}
lib_a-rget.o/   1612277262  0     0     100666  3362      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __srget_r
.visible .func (.param .u32 %value_out) __srget_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/rget.c"
// BEGIN GLOBAL FUNCTION DECL: __srget
.visible .func (.param .u32 %value_out) __srget (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __srefill_r
.extern .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __srget_r
.visible .func (.param .u32 %value_out) __srget_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 40 3
setp.eq.u64 %r32,%r30,0;
@ %r32 bra $L2;
ld.u32 %r33,[%r30+80];
setp.ne.u32 %r34,%r33,0;
@ %r34 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 42 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r38,[%value_in];
}
.loc 1 42 6
setp.ne.u32 %r39,%r38,0;
@ %r39 bra $L4;
.loc 1 44 13
ld.u32 %r41,[%r31+8];
add.u32 %r40,%r41,-1;
st.u32 [%r31+8],%r40;
.loc 1 45 17
ld.u64 %r26,[%r31];
.loc 1 45 21
add.u64 %r42,%r26,1;
st.u64 [%r31],%r42;
.loc 1 45 14
ld.u8 %r29,[%r26];
bra $L1;
$L4:
.loc 1 47 10
mov.u32 %r29,-1;
$L1:
.loc 1 48 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __srget
.visible .func (.param .u32 %value_out) __srget (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
mov.u64 %r31,%ar0;
.loc 1 56 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 40 3
setp.eq.u64 %r32,%r22,0;
@ %r32 bra $L9;
ld.u32 %r33,[%r22+80];
setp.ne.u32 %r34,%r33,0;
@ %r34 bra $L9;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call __sinit,(%out_arg1);
}
$L9:
.loc 1 42 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r38,[%value_in];
}
.loc 1 42 6
setp.ne.u32 %r39,%r38,0;
@ %r39 bra $L11;
.loc 1 44 13
ld.u32 %r41,[%r31+8];
add.u32 %r40,%r41,-1;
st.u32 [%r31+8],%r40;
.loc 1 45 17
ld.u64 %r27,[%r31];
.loc 1 45 21
add.u64 %r42,%r27,1;
st.u64 [%r31],%r42;
.loc 1 45 14
ld.u8 %r30,[%r27];
bra $L8;
$L11:
.loc 1 47 10
mov.u32 %r30,-1;
$L8:
.loc 1 57 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-rindex.o/ 1612277262  0     0     100666  1052      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: rindex
.visible .func (.param .u64 %value_out) rindex (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/string/rindex.c"
// BEGIN GLOBAL FUNCTION DECL: strrchr
.extern .func (.param .u64 %value_out) strrchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: rindex
.visible .func (.param .u64 %value_out) rindex (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u64 %r27;
mov.u64 %r23,%ar0;
mov.u32 %r24,%ar1;
.loc 1 37 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
call (%value_in),strrchr,(%out_arg1,%out_arg2);
ld.param.u64 %r27,[%value_in];
}
.loc 1 38 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
/795            1612277261  0     0     100666  1235      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: copysign
.visible .func (.param .f64 %value_out) copysign (.param .f64 %in_ar0, .param .f64 %in_ar1);
.file 1 "../../../../../newlib/libm/common/s_copysign.c"
// BEGIN GLOBAL FUNCTION DEF: copysign
.visible .func (.param .f64 %value_out) copysign (.param .f64 %in_ar0, .param .f64 %in_ar1)
{
.reg .f64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u64 %r27;
.reg .f64 %r29;
.reg .f64 %r30;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
mov.f64 %r29,%ar0;
mov.f64 %r30,%ar1;
.loc 1 68 2
mov.b64 %r27,%r29;
shr.u64 %r32,%r27,32;
cvt.u32.u64 %r34,%r32;
and.b32 %r33,%r34,2147483647;
mov.b64 %r35,%r30;
shr.u64 %r36,%r35,32;
cvt.u32.u64 %r38,%r36;
and.b32 %r37,%r38,-2147483648;
or.b32 %r39,%r33,%r37;
cvt.u64.u32 %r40,%r39;
shl.b64 %r41,%r40,32;
and.b64 %r42,%r27,4294967295;
or.b64 %r43,%r42,%r41;
mov.b64 %value,%r43;
.loc 1 70 1
st.param.f64 [%value_out],%value;
ret;
}

/815            1612277261  0     0     100666  815       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: finite
.visible .func (.param .u32 %value_out) finite (.param .f64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_finite.c"
// BEGIN GLOBAL FUNCTION DEF: finite
.visible .func (.param .u32 %value_out) finite (.param .f64 %in_ar0)
{
.reg .u32 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .f64 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u32 %r35;
mov.f64 %r29,%ar0;
.loc 1 31 2
mov.b64 %r31,%r29;
shr.u64 %r32,%r31,32;
.loc 1 32 32
cvt.u32.u64 %r34,%r32;
and.b32 %r33,%r34,2147483647;
.loc 1 32 44
add.u32 %r35,%r33,-2146435072;
.loc 1 32 56
shr.u32 %value,%r35,31;
.loc 1 33 1
st.param.u32 [%value_out],%value;
ret;
}

/833            1612277261  0     0     100666  2193      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __fpclassifyd
.visible .func (.param .u32 %value_out) __fpclassifyd (.param .f64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_fpclassify.c"
// BEGIN GLOBAL FUNCTION DEF: __fpclassifyd
.visible .func (.param .u32 %value_out) __fpclassifyd (.param .f64 %in_ar0)
{
.reg .u32 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r31;
.reg .u32 %r33;
.reg .f64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u16 %r46;
.reg .u16 %r47;
.reg .u16 %r48;
.reg .u32 %r49;
.reg .u16 %r50;
.reg .pred %r51;
.reg .u32 %r52;
.reg .pred %r53;
.reg .u32 %r54;
.reg .pred %r55;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .u32 %r62;
mov.f64 %r34,%ar0;
mov.b64 %r35,%r34;
shr.u64 %r36,%r35,32;
cvt.u32.u64 %r27,%r36;
cvt.u32.u64 %r28,%r35;
.loc 1 16 26
or.b32 %r38,%r27,%r28;
.loc 1 16 6
setp.eq.u32 %r39,%r38,0;
@ %r39 bra $L3;
.loc 1 17 33
set.u32.eq.u32 %r41,%r28,0;
neg.s32 %r42,%r41;
cvt.u32.u32 %r40,%r42;
.loc 1 17 12
set.u32.eq.u32 %r44,%r27,-2147483648;
neg.s32 %r45,%r44;
.loc 1 17 26
cvt.u16.u32 %r47,%r45;
cvt.u16.u8 %r48,%r40;
and.b16 %r46,%r47,%r48;
.loc 1 16 48
cvt.u32.u16 %r49,%r46;
cvt.u16.u8 %r50,%r49;
setp.ne.u16 %r51,%r50,0;
@ %r51 bra $L4;
.loc 1 19 31
and.b32 %r31,%r27,2147483647;
add.u32 %r52,%r31,-1048576;
.loc 1 19 11
setp.le.u32 %r53,%r52,2145386495;
@ %r53 bra $L5;
.loc 1 22 31
and.b32 %r54,%r27,2146435072;
.loc 1 22 11
setp.eq.u32 %r55,%r54,0;
@ %r55 bra $L6;
.loc 1 26 17
set.u32.eq.u32 %r57,%r31,2146435072;
neg.s32 %r58,%r57;
.loc 1 26 53
cvt.u16.u32 %r60,%r58;
and.b16 %r59,%r60,%r48;
.loc 1 18 12
cvt.u32.u16 %r62,%r59;
cvt.u32.u8 %r33,%r62;
bra $L1;
$L3:
mov.u32 %r33,2;
bra $L1;
$L4:
mov.u32 %r33,2;
bra $L1;
$L5:
.loc 1 21 12
mov.u32 %r33,4;
bra $L1;
$L6:
.loc 1 25 12
mov.u32 %r33,3;
$L1:
.loc 1 31 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-s_frexp.o/1612277261  0     0     100666  2130      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: frexp
.visible .func (.param .f64 %value_out) frexp (.param .f64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libm/math/s_frexp.c"
// BEGIN GLOBAL FUNCTION DEF: frexp
.visible .func (.param .f64 %value_out) frexp (.param .f64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r28;
.reg .u32 %r33;
.reg .u32 %r35;
.reg .u64 %r36;
.reg .f64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .pred %r47;
.reg .u32 %r48;
.reg .pred %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u64 %r60;
mov.f64 %r38,%ar0;
mov.u64 %r39,%ar1;
mov.b64 %r40,%r38;
shr.u64 %r41,%r40,32;
cvt.u32.u64 %r33,%r41;
.loc 1 88 5
and.b32 %r28,%r33,2147483647;
.loc 1 89 8
mov.u32 %r42,0;
st.u32 [%r39],%r42;
.loc 1 90 4
setp.gt.s32 %r43,%r28,2146435071;
@ %r43 bra $L2;
.loc 1 90 25
cvt.u32.u64 %r46,%r40;
or.b32 %r45,%r28,%r46;
.loc 1 90 19
setp.eq.u32 %r47,%r45,0;
@ %r47 bra $L2;
.loc 1 91 5
and.b32 %r48,%r33,2146435072;
setp.ne.u32 %r49,%r48,0;
@ %r49 bra $L4;
.loc 1 92 8
mul.f64 %r38,%r38,0d4350000000000000;
mov.b64 %r50,%r38;
shr.u64 %r51,%r50,32;
cvt.u32.u64 %r33,%r51;
.loc 1 94 9
and.b32 %r28,%r33,2147483647;
mov.u32 %r35,-54;
bra $L3;
$L4:
mov.u32 %r35,%r42;
$L3:
.loc 1 97 14
shr.s32 %r52,%r28,20;
.loc 1 97 19
add.u32 %r53,%r52,-1022;
.loc 1 97 8
add.u32 %r54,%r53,%r35;
st.u32 [%r39],%r54;
.loc 1 99 2
mov.b64 %r36,%r38;
.loc 1 98 10
and.b32 %r55,%r33,-2146435073;
.loc 1 98 22
or.b32 %r56,%r55,1071644672;
.loc 1 99 2
cvt.u64.u32 %r57,%r56;
shl.b64 %r58,%r57,32;
and.b64 %r59,%r36,4294967295;
or.b64 %r60,%r59,%r58;
mov.b64 %r38,%r60;
$L2:
.loc 1 101 1
mov.f64 %value,%r38;
st.param.f64 [%value_out],%value;
ret;
}
lib_a-s_isinf.o/1612277261  0     0     100666  1307      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isinf
.visible .func (.param .u32 %value_out) isinf (.param .f64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_isinf.c"
// BEGIN GLOBAL FUNCTION DEF: isinf
.visible .func (.param .u32 %value_out) isinf (.param .f64 %in_ar0)
{
.reg .u32 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .f64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u32 %r50;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
mov.f64 %r41,%ar0;
.loc 1 22 2
mov.b64 %r42,%r41;
shr.u64 %r43,%r42,32;
cvt.u32.u64 %r33,%r43;
cvt.u32.u64 %r34,%r42;
.loc 1 24 25
neg.s32 %r45,%r34;
.loc 1 24 23
or.b32 %r46,%r45,%r34;
.loc 1 24 30
shr.u32 %r47,%r46,31;
.loc 1 23 5
and.b32 %r48,%r33,2147483647;
.loc 1 24 5
or.b32 %r27,%r47,%r48;
.loc 1 26 36
add.u32 %r50,%r27,-2146435072;
.loc 1 25 5
mov.u32 %r52,2146435072;
sub.u32 %r51,%r52,%r27;
.loc 1 26 34
or.b32 %r53,%r50,%r51;
.loc 1 26 41
shr.u32 %r54,%r53,31;
.loc 1 26 11
mov.u32 %r55,1;
sub.u32 %value,%r55,%r54;
.loc 1 27 1
st.param.u32 [%value_out],%value;
ret;
}

/855            1612277261  0     0     100666  1320      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __isinfd
.visible .func (.param .u32 %value_out) __isinfd (.param .f64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_isinfd.c"
// BEGIN GLOBAL FUNCTION DEF: __isinfd
.visible .func (.param .u32 %value_out) __isinfd (.param .f64 %in_ar0)
{
.reg .u32 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .f64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u32 %r50;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
mov.f64 %r41,%ar0;
.loc 1 15 2
mov.b64 %r42,%r41;
shr.u64 %r43,%r42,32;
cvt.u32.u64 %r33,%r43;
cvt.u32.u64 %r34,%r42;
.loc 1 17 25
neg.s32 %r45,%r34;
.loc 1 17 23
or.b32 %r46,%r45,%r34;
.loc 1 17 30
shr.u32 %r47,%r46,31;
.loc 1 16 5
and.b32 %r48,%r33,2147483647;
.loc 1 17 5
or.b32 %r27,%r47,%r48;
.loc 1 19 36
add.u32 %r50,%r27,-2146435072;
.loc 1 18 5
mov.u32 %r52,2146435072;
sub.u32 %r51,%r52,%r27;
.loc 1 19 34
or.b32 %r53,%r50,%r51;
.loc 1 19 41
shr.u32 %r54,%r53,31;
.loc 1 19 11
mov.u32 %r55,1;
sub.u32 %value,%r55,%r54;
.loc 1 20 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-s_isnan.o/1612277261  0     0     100666  1108      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isnan
.visible .func (.param .u32 %value_out) isnan (.param .f64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_isnan.c"
// BEGIN GLOBAL FUNCTION DEF: isnan
.visible .func (.param .u32 %value_out) isnan (.param .f64 %in_ar0)
{
.reg .u32 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .f64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r47;
.reg .u32 %r48;
mov.f64 %r38,%ar0;
.loc 1 203 2
mov.b64 %r39,%r38;
shr.u64 %r40,%r39,32;
cvt.u32.u64 %r30,%r40;
cvt.u32.u64 %r31,%r39;
.loc 1 205 25
neg.s32 %r42,%r31;
.loc 1 205 23
or.b32 %r43,%r42,%r31;
.loc 1 205 30
shr.u32 %r44,%r43,31;
.loc 1 204 5
and.b32 %r45,%r30,2147483647;
.loc 1 205 5
or.b32 %r27,%r44,%r45;
.loc 1 206 5
mov.u32 %r48,2146435072;
sub.u32 %r47,%r48,%r27;
.loc 1 207 33
shr.u32 %value,%r47,31;
.loc 1 208 1
st.param.u32 [%value_out],%value;
ret;
}
/873            1612277261  0     0     100666  1120      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __isnand
.visible .func (.param .u32 %value_out) __isnand (.param .f64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_isnand.c"
// BEGIN GLOBAL FUNCTION DEF: __isnand
.visible .func (.param .u32 %value_out) __isnand (.param .f64 %in_ar0)
{
.reg .u32 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %r27;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .f64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r47;
.reg .u32 %r48;
mov.f64 %r38,%ar0;
.loc 1 99 2
mov.b64 %r39,%r38;
shr.u64 %r40,%r39,32;
cvt.u32.u64 %r30,%r40;
cvt.u32.u64 %r31,%r39;
.loc 1 101 25
neg.s32 %r42,%r31;
.loc 1 101 23
or.b32 %r43,%r42,%r31;
.loc 1 101 30
shr.u32 %r44,%r43,31;
.loc 1 100 5
and.b32 %r45,%r30,2147483647;
.loc 1 101 5
or.b32 %r27,%r44,%r45;
.loc 1 102 5
mov.u32 %r48,2146435072;
sub.u32 %r47,%r48,%r27;
.loc 1 103 33
shr.u32 %value,%r47,31;
.loc 1 104 1
st.param.u32 [%value_out],%value;
ret;
}
lib_a-s_ldexp.o/1612277261  0     0     100666  2808      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ldexp
.visible .func (.param .f64 %value_out) ldexp (.param .f64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libm/math/s_ldexp.c"
// BEGIN GLOBAL FUNCTION DECL: finite
.extern .func (.param .u32 %value_out) finite (.param .f64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: scalbn
.extern .func (.param .f64 %value_out) scalbn (.param .f64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DEF: ldexp
.visible .func (.param .f64 %value_out) ldexp (.param .f64 %in_ar0, .param .u32 %in_ar1)
{
.reg .f64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .f64 %r32;
.reg .u32 %r33;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u32 %r45;
.reg .u16 %r46;
.reg .pred %r47;
.reg .f64 %r50;
.reg .u32 %r52;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .u16 %r61;
.reg .u32 %r62;
.reg .u16 %r63;
.reg .pred %r64;
.reg .u64 %r65;
.reg .u32 %r66;
mov.f64 %r32,%ar0;
mov.u32 %r33,%ar1;
.loc 1 63 6
{
.param .u32 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r32;
call (%value_in),finite,(%out_arg1);
ld.param.u32 %r35,[%value_in];
}
.loc 1 63 19
set.u32.eq.f64 %r37,%r32,0d0000000000000000;
neg.s32 %r38,%r37;
.loc 1 63 4
set.u32.eq.u32 %r40,%r35,0;
neg.s32 %r41,%r40;
.loc 1 63 19
cvt.u16.u32 %r43,%r38;
cvt.u16.u32 %r44,%r41;
or.b16 %r42,%r43,%r44;
cvt.u32.u16 %r45,%r42;
cvt.u16.u8 %r46,%r45;
setp.ne.u16 %r47,%r46,0;
@ %r47 bra $L2;
.loc 1 64 10
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r32;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r33;
call (%value_in),scalbn,(%out_arg1,%out_arg2);
ld.param.f64 %r50,[%value_in];
}
mov.f64 %r32,%r50;
.loc 1 65 6
{
.param .u32 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r32;
call (%value_in),finite,(%out_arg1);
ld.param.u32 %r52,[%value_in];
}
.loc 1 65 19
set.u32.eq.f64 %r54,%r32,0d0000000000000000;
neg.s32 %r55,%r54;
.loc 1 65 4
set.u32.eq.u32 %r57,%r52,0;
neg.s32 %r58,%r57;
.loc 1 65 19
cvt.u16.u32 %r60,%r55;
cvt.u16.u32 %r61,%r58;
or.b16 %r59,%r60,%r61;
cvt.u32.u16 %r62,%r59;
cvt.u16.u8 %r63,%r62;
setp.eq.u16 %r64,%r63,0;
@ %r64 bra $L2;
.loc 1 65 33
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r65,[%value_in];
}
.loc 1 65 39
mov.u32 %r66,34;
st.u32 [%r65],%r66;
$L2:
.loc 1 67 1
mov.f64 %value,%r32;
st.param.f64 [%value_out],%value;
ret;
}
lib_a-s_modf.o/ 1612277261  0     0     100666  3877      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: modf
.visible .func (.param .f64 %value_out) modf (.param .f64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libm/common/s_modf.c"
// BEGIN GLOBAL FUNCTION DECL: __fpclassifyd
.extern .func (.param .u32 %value_out) __fpclassifyd (.param .f64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: modf
.visible .func (.param .f64 %value_out) modf (.param .f64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .f64 %r32;
.reg .u32 %r37;
.reg .u32 %r40;
.reg .f64 %r42;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .f64 %r53;
.reg .f64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u32 %r59;
.reg .pred %r60;
.reg .pred %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u64 %r67;
.reg .f64 %r68;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .u32 %r73;
.reg .u64 %r74;
.reg .u64 %r78;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u64 %r81;
.reg .u64 %r85;
.reg .pred %r86;
.reg .u32 %r88;
.reg .pred %r89;
.reg .u32 %r90;
.reg .u64 %r91;
.reg .u64 %r95;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .u32 %r98;
.reg .pred %r99;
.reg .u32 %r100;
.reg .u64 %r101;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u32 %r110;
.reg .u32 %r111;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r114;
mov.f64 %r54,%ar0;
mov.u64 %r55,%ar1;
mov.b64 %r56,%r54;
shr.u64 %r57,%r56,32;
cvt.u32.u64 %r40,%r57;
cvt.u32.u64 %r37,%r56;
.loc 1 76 11
shr.s32 %r59,%r40,20;
.loc 1 76 16
and.b32 %r23,%r59,2047;
.loc 1 76 5
add.u32 %r44,%r23,-1023;
.loc 1 77 4
setp.gt.s32 %r60,%r44,19;
@ %r60 bra $L2;
.loc 1 78 8
setp.ge.s32 %r61,%r44,0;
@ %r61 bra $L3;
.loc 1 79 10
and.b32 %r62,%r40,-2147483648;
cvt.u64.u32 %r63,%r62;
shl.b64 %r67,%r63,32;
mov.b64 %r68,%r67;
st.f64 [%r55],%r68;
.loc 1 80 10
mov.f64 %r53,%r54;
bra $L1;
$L3:
.loc 1 82 19
mov.u32 %r69,1048575;
shr.s32 %r46,%r69,%r44;
.loc 1 83 10
and.b32 %r70,%r40,%r46;
.loc 1 83 13
or.b32 %r71,%r70,%r37;
.loc 1 83 5
setp.ne.u32 %r72,%r71,0;
@ %r72 bra $L5;
.loc 1 84 13
st.f64 [%r55],%r54;
.loc 1 85 7
and.b32 %r73,%r40,-2147483648;
cvt.u64.u32 %r74,%r73;
shl.b64 %r78,%r74,32;
mov.b64 %r53,%r78;
.loc 1 86 14
bra $L1;
$L5:
.loc 1 88 7
not.b32 %r79,%r46;
and.b32 %r80,%r79,%r40;
cvt.u64.u32 %r81,%r80;
shl.b64 %r85,%r81,32;
mov.b64 %r32,%r85;
st.f64 [%r55],%r32;
.loc 1 89 16
sub.f64 %r53,%r54,%r32;
bra $L1;
$L2:
.loc 1 92 12
setp.le.s32 %r86,%r44,51;
@ %r86 bra $L6;
.loc 1 93 12
st.f64 [%r55],%r54;
.loc 1 94 10
{
.param .u32 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r54;
call (%value_in),__fpclassifyd,(%out_arg1);
ld.param.u32 %r88,[%value_in];
}
.loc 1 94 9
setp.ne.u32 %r89,%r88,0;
@ %r89 bra $L7;
.loc 1 94 54
add.f64 %r53,%r54,%r54;
.loc 1 94 51
st.f64 [%r55],%r53;
bra $L1;
$L7:
.loc 1 95 6
and.b32 %r90,%r40,-2147483648;
cvt.u64.u32 %r91,%r90;
shl.b64 %r95,%r91,32;
mov.b64 %r53,%r95;
.loc 1 96 13
bra $L1;
$L6:
.loc 1 98 41
add.u32 %r96,%r23,-1043;
.loc 1 98 8
mov.u32 %r97,-1;
shr.u32 %r45,%r97,%r96;
.loc 1 99 12
and.b32 %r98,%r37,%r45;
.loc 1 99 8
setp.ne.u32 %r99,%r98,0;
@ %r99 bra $L8;
.loc 1 100 9
st.f64 [%r55],%r54;
.loc 1 101 3
and.b32 %r100,%r40,-2147483648;
cvt.u64.u32 %r101,%r100;
shl.b64 %r105,%r101,32;
mov.b64 %r53,%r105;
.loc 1 102 10
bra $L1;
$L8:
.loc 1 104 10
cvt.u64.u32 %r106,%r40;
not.b32 %r110,%r45;
and.b32 %r111,%r110,%r37;
cvt.u64.u32 %r112,%r111;
shl.b64 %r113,%r106,32;
or.b64 %r114,%r113,%r112;
mov.b64 %r42,%r114;
st.f64 [%r55],%r42;
.loc 1 105 12
sub.f64 %r53,%r54,%r42;
$L1:
.loc 1 108 1
mov.f64 %value,%r53;
st.param.f64 [%value_out],%value;
ret;
}

lib_a-s_nan.o/  1612277261  0     0     100666  517       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: nan
.visible .func (.param .f64 %value_out) nan (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/s_nan.c"
// BEGIN GLOBAL FUNCTION DEF: nan
.visible .func (.param .f64 %value_out) nan (.param .u64 %in_ar0)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.loc 1 44 9
mov.f64 %value,0d7ff8000000000000;
.loc 1 45 1
st.param.f64 [%value_out],%value;
ret;
}

/891            1612277261  0     0     100666  3705      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: scalbn
.visible .func (.param .f64 %value_out) scalbn (.param .f64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libm/common/s_scalbn.c"
// BEGIN GLOBAL FUNCTION DEF: scalbn
.visible .func (.param .f64 %value_out) scalbn (.param .f64 %in_ar0, .param .u32 %in_ar1)
{
.reg .f64 %value;
.reg .f64 %ar0;
ld.param.f64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .f64 %r27;
.reg .f64 %r33;
.reg .f64 %r34;
.reg .u32 %r40;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .f64 %r45;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .f64 %r51;
.reg .f64 %r52;
.reg .u32 %r53;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .pred %r62;
.reg .pred %r63;
.reg .pred %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .pred %r69;
.reg .f64 %r70;
.reg .pred %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u64 %r77;
.reg .u64 %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .f64 %r81;
.reg .f64 %r82;
.reg .u32 %r83;
.reg .u32 %r84;
.reg .u32 %r85;
.reg .u32 %r86;
.reg .u64 %r87;
.reg .u64 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
mov.f64 %r52,%ar0;
mov.u32 %r53,%ar1;
.loc 1 86 2
mov.b64 %r54,%r52;
shr.u64 %r55,%r54,32;
cvt.u32.u64 %r40,%r55;
.loc 1 87 28
shr.s32 %r56,%r40,20;
.loc 1 87 11
and.b32 %r42,%r56,2047;
.loc 1 88 12
setp.ne.u32 %r57,%r42,0;
@ %r57 bra $L2;
.loc 1 89 24
and.b32 %r58,%r40,2147483647;
.loc 1 89 20
cvt.u32.u64 %r61,%r54;
or.b32 %r60,%r58,%r61;
.loc 1 89 16
setp.eq.u32 %r62,%r60,0;
@ %r62 bra $L10;
.loc 1 90 8
mul.f64 %r52,%r52,0d4350000000000000;
.loc 1 93 16
setp.ge.s32 %r63,%r53,-50000;
@ %r63 bra $L4;
.loc 1 93 39
mul.f64 %r51,%r52,0d01a56e1fc2f8f359;
bra $L1;
$L2:
.loc 1 95 12
setp.ne.u32 %r64,%r42,2047;
@ %r64 bra $L5;
.loc 1 95 31
add.f64 %r51,%r52,%r52;
bra $L1;
$L4:
.loc 1 91 6
mov.b64 %r65,%r52;
shr.u64 %r66,%r65,32;
cvt.u32.u64 %r40,%r66;
.loc 1 92 26
shr.s32 %r67,%r40,20;
and.b32 %r68,%r67,2047;
.loc 1 92 8
add.u32 %r42,%r68,-54;
$L5:
.loc 1 96 11
add.u32 %r43,%r53,%r42;
.loc 1 97 12
setp.le.s32 %r69,%r43,2046;
@ %r69 bra $L6;
.loc 1 97 37
mov.f64 %r70,0d7e37e43c8800759c;
copysign.f64 %r27,%r52,%r70;
.loc 1 97 36
mul.f64 %r51,%r27,0d7e37e43c8800759c;
bra $L1;
$L6:
.loc 1 98 12
setp.le.s32 %r71,%r43,0;
@ %r71 bra $L7;
.loc 1 99 7
mov.b64 %r49,%r52;
and.b32 %r72,%r40,-2146435073;
shl.b32 %r73,%r43,20;
or.b32 %r74,%r72,%r73;
cvt.u64.u32 %r75,%r74;
shl.b64 %r76,%r75,32;
and.b64 %r77,%r49,4294967295;
or.b64 %r78,%r77,%r76;
mov.b64 %r51,%r78;
.loc 1 99 56
bra $L1;
$L7:
.loc 1 100 12
setp.ge.s32 %r79,%r43,-53;
@ %r79 bra $L8;
.loc 1 101 16
setp.le.s32 %r80,%r53,50000;
@ %r80 bra $L9;
.loc 1 102 15
mov.f64 %r81,0d7e37e43c8800759c;
copysign.f64 %r33,%r52,%r81;
.loc 1 102 14
mul.f64 %r51,%r33,0d7e37e43c8800759c;
bra $L1;
$L9:
.loc 1 103 23
mov.f64 %r82,0d01a56e1fc2f8f359;
copysign.f64 %r34,%r52,%r82;
.loc 1 103 22
mul.f64 %r51,%r34,0d01a56e1fc2f8f359;
bra $L1;
$L8:
.loc 1 106 2
mov.b64 %r50,%r52;
.loc 1 105 11
add.u32 %r83,%r43,54;
.loc 1 106 2
shl.b32 %r84,%r83,20;
and.b32 %r85,%r40,-2146435073;
or.b32 %r86,%r84,%r85;
cvt.u64.u32 %r87,%r86;
shl.b64 %r88,%r87,32;
and.b64 %r89,%r50,4294967295;
or.b64 %r90,%r89,%r88;
mov.b64 %r45,%r90;
.loc 1 107 17
mul.f64 %r51,%r45,0d3c90000000000000;
bra $L1;
$L10:
.loc 1 89 49
mov.f64 %r51,%r52;
$L1:
.loc 1 108 1
mov.f64 %value,%r51;
st.param.f64 [%value_out],%value;
ret;
}

/909            1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-sbrkr.o/  1612277262  0     0     100666  1359      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _sbrk_r
.visible .func (.param .u64 %value_out) _sbrk_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/reent/sbrkr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: sbrk
.extern .func (.param .u64 %value_out) sbrk (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _sbrk_r
.visible .func (.param .u64 %value_out) _sbrk_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r28;
.reg .pred %r29;
.reg .pred %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 50 9
mov.u32 %r26,0;
st.global.u32 [errno],%r26;
.loc 1 51 23
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call (%value_in),sbrk,(%out_arg1);
ld.param.u64 %r28,[%value_in];
}
.loc 1 51 6
setp.ne.u64 %r29,%r28,-1;
@ %r29 bra $L1;
.loc 1 51 62
ld.global.u32 %r22,[errno];
.loc 1 51 53
setp.eq.u32 %r30,%r22,0;
@ %r30 bra $L1;
.loc 1 52 17
st.u32 [%r24],%r22;
$L1:
.loc 1 54 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-scanf.o/  1612277262  0     0     100666  2443      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: scanf
.visible .func (.param .u32 %value_out) scanf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/scanf.c"
// BEGIN GLOBAL FUNCTION DECL: _scanf_r
.visible .func (.param .u32 %value_out) _scanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfscanf_r
.extern .func (.param .u32 %value_out) _vfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: scanf
.visible .func (.param .u32 %value_out) scanf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r26,%ar0;
.loc 1 31 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 35 9
ld.u64 %r32,[%r23+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 38 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _scanf_r
.visible .func (.param .u32 %value_out) _scanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
.reg .u32 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 56 9
ld.u64 %r32,[%r25+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_vfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r33,[%value_in];
}
.loc 1 59 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-sccl.o/   1612277262  0     0     100666  3516      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __sccl
.visible .func (.param .u64 %value_out) __sccl (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/sccl.c"
// BEGIN GLOBAL FUNCTION DEF: __sccl
.visible .func (.param .u64 %value_out) __sccl (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r46;
.reg .u64 %r53;
.reg .u64 %r55;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .pred %r60;
.reg .u32 %r61;
.reg .pred %r62;
.reg .pred %r63;
.reg .u32 %r64;
.reg .u32 %r65;
.reg .u32 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u32 %r69;
.reg .u16 %r70;
.reg .pred %r71;
.reg .pred %r73;
.reg .pred %r74;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u16 %r81;
.reg .u16 %r82;
.reg .u16 %r83;
.reg .u32 %r84;
.reg .u16 %r85;
.reg .pred %r86;
.reg .u64 %r88;
.reg .pred %r90;
.reg .u32 %r91;
.reg .pred %r92;
.reg .u32 %r93;
.reg .u32 %r95;
.reg .u32 %r97;
.reg .u32 %r100;
mov.u64 %r58,%ar0;
mov.u64 %r59,%ar1;
.loc 1 40 5
ld.u8 %r34,[%r59];
.loc 1 41 6
setp.eq.u32 %r60,%r34,94;
@ %r60 bra $L2;
.loc 1 40 11
add.u64 %r33,%r59,1;
mov.u32 %r46,0;
.loc 1 47 7
mov.u32 %r37,%r46;
bra $L3;
$L2:
.loc 1 44 15
add.u64 %r33,%r59,2;
.loc 1 44 9
ld.u8 %r34,[%r59+1];
mov.u32 %r46,1;
.loc 1 43 9
mov.u32 %r37,%r46;
$L3:
mov.u64 %r53,%r58;
add.u64 %r55,%r58,256;
.loc 1 50 12
cvt.u32.u32 %r61,%r46;
$L4:
st.u8 [%r53],%r61;
.loc 1 49 3
add.u64 %r53,%r53,1;
setp.ne.u64 %r62,%r53,%r55;
@ %r62 bra $L4;
.loc 1 51 6
setp.ne.u32 %r63,%r34,0;
@ %r63 bra $L5;
.loc 1 52 16
add.u64 %r57,%r33,-1;
bra $L1;
$L5:
.loc 1 62 5
mov.u32 %r65,1;
sub.u32 %r64,%r65,%r37;
.loc 1 65 14
cvt.u32.u32 %r66,%r64;
mov.u32 %r69,%r66;
mov.u32 %r97,0;
.loc 1 90 10
mov.u32 %r100,45;
bra $L7;
$L22:
.loc 1 67 9
mov.u32 %r34,%r28;
bra $L11;
$L16:
.loc 1 90 10
mov.u32 %r34,%r100;
$L11:
mov.u64 %r33,%r57;
$L7:
.loc 1 65 10
cvt.s64.s32 %r67,%r34;
.loc 1 65 14
add.u64 %r68,%r58,%r67;
st.u8 [%r68],%r69;
$L8:
add.u64 %r57,%r33,1;
.loc 1 67 11
ld.u8 %r28,[%r33];
.loc 1 68 7
cvt.u16.u32 %r70,%r28;
setp.eq.u16 %r71,%r70,45;
@ %r71 bra $L9;
setp.eq.u16 %r73,%r70,93;
@ %r73 bra $L1;
setp.eq.u32 %r74,%r28,0;
@ ! %r74 bra $L22;
bra $L15;
$L9:
.loc 1 87 8
ld.u8 %r29,[%r33+1];
.loc 1 88 10
set.u32.eq.u32 %r76,%r29,93;
neg.s32 %r77,%r76;
.loc 1 88 22
set.u32.gt.s32 %r79,%r34,%r29;
neg.s32 %r80,%r79;
.loc 1 88 17
cvt.u16.u32 %r82,%r77;
cvt.u16.u32 %r83,%r80;
or.b16 %r81,%r82,%r83;
.loc 1 88 7
cvt.u32.u16 %r84,%r81;
cvt.u16.u8 %r85,%r84;
setp.ne.u16 %r86,%r85,0;
@ %r86 bra $L16;
add.u64 %r33,%r33,2;
add.u32 %r95,%r34,1;
cvt.s64.s32 %r88,%r95;
add.u64 %r27,%r58,%r88;
mov.u32 %r35,%r34;
$L12:
.loc 1 96 17
add.u32 %r35,%r35,1;
st.u8 [%r27],%r69;
.loc 1 98 4
add.u64 %r27,%r27,1;
setp.gt.s32 %r90,%r29,%r35;
@ %r90 bra $L12;
setp.ge.s32 %r92,%r34,%r29;
@ %r92 bra $L13;
sub.u32 %r93,%r29,%r34;
add.u32 %r91,%r93,-1;
bra $L14;
$L13:
mov.u32 %r91,%r97;
$L14:
.loc 1 96 17
add.u32 %r34,%r95,%r91;
bra $L8;
$L15:
.loc 1 68 7
mov.u64 %r57,%r33;
$L1:
.loc 1 126 1
mov.u64 %value,%r57;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-seed48.o/ 1612277262  0     0     100666  2789      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _seed48_r
.visible .func (.param .u64 %value_out) _seed48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/seed48.c"
// BEGIN GLOBAL FUNCTION DECL: seed48
.visible .func (.param .u64 %value_out) seed48 (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN VAR DEF: sseed$0
.global .align 2 .u16 sseed$0[3];
// BEGIN GLOBAL FUNCTION DEF: _seed48_r
.visible .func (.param .u64 %value_out) _seed48_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r32;
.reg .u16 %r34;
.reg .u16 %r36;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
.loc 1 23 12
cvta.global.u64 %r31,sseed$0;
ld.u16 %r32,[%r29+240];
st.u16 [%r31],%r32;
.loc 1 24 12
ld.u16 %r34,[%r29+242];
st.u16 [%r31+2],%r34;
.loc 1 25 12
ld.u16 %r36,[%r29+244];
st.u16 [%r31+4],%r36;
.loc 1 26 20
ld.u16 %r37,[%r30];
st.u16 [%r29+240],%r37;
.loc 1 27 20
ld.u16 %r38,[%r30+2];
st.u16 [%r29+242],%r38;
.loc 1 28 20
ld.u16 %r39,[%r30+4];
st.u16 [%r29+244],%r39;
.loc 1 29 20
mov.u16 %r40,-6547;
st.u16 [%r29+246],%r40;
.loc 1 30 20
mov.u32 %r41,384748;
st.u32 [%r29+248],%r41;
.loc 1 32 16
mov.u16 %r42,11;
st.u16 [%r29+252],%r42;
.loc 1 34 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: seed48
.visible .func (.param .u64 %value_out) seed48 (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r32;
.reg .u16 %r34;
.reg .u16 %r36;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
mov.u64 %r30,%ar0;
.loc 1 40 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 23 12
cvta.global.u64 %r31,sseed$0;
ld.u16 %r32,[%r22+240];
st.u16 [%r31],%r32;
.loc 1 24 12
ld.u16 %r34,[%r22+242];
st.u16 [%r31+2],%r34;
.loc 1 25 12
ld.u16 %r36,[%r22+244];
st.u16 [%r31+4],%r36;
.loc 1 26 20
ld.u16 %r37,[%r30];
st.u16 [%r22+240],%r37;
.loc 1 27 20
ld.u16 %r38,[%r30+2];
st.u16 [%r22+242],%r38;
.loc 1 28 20
ld.u16 %r39,[%r30+4];
st.u16 [%r22+244],%r39;
.loc 1 29 20
mov.u16 %r40,-6547;
st.u16 [%r22+246],%r40;
.loc 1 30 20
mov.u32 %r41,384748;
st.u32 [%r22+248],%r41;
.loc 1 32 16
mov.u16 %r42,11;
st.u16 [%r22+252],%r42;
.loc 1 41 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-setbuf.o/ 1612277262  0     0     100666  1222      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: setbuf
.visible .func setbuf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/setbuf.c"
// BEGIN GLOBAL FUNCTION DECL: setvbuf
.extern .func (.param .u32 %value_out) setvbuf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: setbuf
.visible .func setbuf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .pred %r25;
.reg .u64 %r29;
.reg .u32 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 71 10
setp.ne.u64 %r25,%r24,0;
selp.u32 %r22,0,2,%r25;
mov.u64 %r29,1024;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r22;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),setvbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r30,[%value_in];
}
.loc 1 72 1
ret;
}
/930            1612277262  0     0     100666  1367      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: setbuffer
.visible .func setbuffer (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/setbuffer.c"
// BEGIN GLOBAL FUNCTION DECL: setvbuf
.extern .func (.param .u32 %value_out) setvbuf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: setbuffer
.visible .func setbuffer (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .pred %r27;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 72 10
cvt.s64.s32 %r22,%r26;
setp.ne.u64 %r27,%r25,0;
selp.u32 %r23,0,2,%r27;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r23;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r22;
call (%value_in),setvbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 73 1
ret;
}

/949            1612277262  0     0     100666  1187      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: setlinebuf
.visible .func (.param .u32 %value_out) setlinebuf (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/setlinebuf.c"
// BEGIN GLOBAL FUNCTION DECL: setvbuf
.extern .func (.param .u32 %value_out) setvbuf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: setlinebuf
.visible .func (.param .u32 %value_out) setlinebuf (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
mov.u64 %r23,%ar0;
.loc 1 61 11
mov.u64 %r27,0;
mov.u32 %r26,1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),setvbuf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r28,[%value_in];
}
.loc 1 62 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-setvbuf.o/1612277262  0     0     100666  8226      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: setvbuf
.visible .func (.param .u32 %value_out) setvbuf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/setvbuf.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __swhatbuf_r
.extern .func (.param .u32 %value_out) __swhatbuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __nvptx_malloc
.extern .func (.param .u64 %value_out) __nvptx_malloc (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: setvbuf
.visible .func (.param .u32 %value_out) setvbuf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r25;
.reg .u32 %r27;
.reg .u32 %r29;
.reg .u64 %r33;
.reg .u64 %r35;
.reg .u32 %r42;
.reg .u64 %r45;
.reg .u32 %r49;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u32 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u32 %r56;
.reg .pred %r57;
.reg .pred %r60;
.reg .u32 %r61;
.reg .pred %r62;
.reg .u32 %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .pred %r68;
.reg .u64 %r71;
.reg .u32 %r72;
.reg .u16 %r74;
.reg .u16 %r75;
.reg .pred %r76;
.reg .u64 %r79;
.reg .u16 %r80;
.reg .u16 %r81;
.reg .u64 %r88;
.reg .u32 %r89;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u16 %r92;
.reg .pred %r93;
.reg .pred %r94;
.reg .u64 %r96;
.reg .pred %r98;
.reg .pred %r99;
.reg .u64 %r101;
.reg .pred %r103;
.reg .u16 %r104;
.reg .u16 %r105;
.reg .u32 %r106;
.reg .u32 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .u32 %r110;
.reg .pred %r111;
.reg .u64 %r113;
.reg .pred %r114;
.reg .u16 %r115;
.reg .u16 %r116;
.reg .pred %r118;
.reg .u16 %r119;
.reg .u16 %r120;
.reg .u16 %r121;
.reg .pred %r123;
.reg .u16 %r124;
.reg .u16 %r125;
.reg .pred %r126;
.reg .u16 %r127;
.reg .pred %r129;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r132;
.reg .pred %r134;
mov.u64 %r51,%ar0;
mov.u64 %r52,%ar1;
mov.u32 %r53,%ar2;
mov.u64 %r54,%ar3;
.loc 1 97 18
ld.global.u64 %r45,[_impure_ptr];
.loc 1 101 3
setp.eq.u64 %r55,%r45,0;
@ %r55 bra $L2;
ld.u32 %r56,[%r45+80];
setp.ne.u32 %r57,%r56,0;
@ %r57 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 108 6
setp.eq.u32 %r134,%r53,2;
@ %r134 bra $L3;
.loc 1 109 8
setp.gt.u32 %r60,%r53,1;
@ %r60 bra $L20;
.loc 1 109 44
cvt.u32.u64 %r61,%r54;
setp.lt.s32 %r62,%r61,0;
@ %r62 bra $L21;
$L3:
.loc 1 120 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r65,[%value_in];
}
.loc 1 121 7
ld.u64 %r25,[%r51+88];
.loc 1 121 6
setp.eq.u64 %r66,%r25,0;
@ %r66 bra $L5;
.loc 1 122 5
add.u64 %r67,%r51,116;
setp.eq.u64 %r68,%r25,%r67;
@ %r68 bra $L6;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call _free_r,(%out_arg1,%out_arg2);
}
$L6:
mov.u64 %r71,0;
st.u64 [%r51+88],%r71;
$L5:
.loc 1 123 25
mov.u32 %r72,0;
st.u32 [%r51+40],%r72;
.loc 1 123 10
st.u32 [%r51+8],%r72;
.loc 1 124 9
ld.s16 %r27,[%r51+16];
.loc 1 124 6
cvt.u16.u32 %r75,%r27;
and.b16 %r74,%r75,128;
setp.eq.u16 %r76,%r74,0;
@ %r76 bra $L7;
.loc 1 125 5
ld.u64 %r79,[%r51+24];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r79;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 126 14
ld.s16 %r27,[%r51+16];
$L7:
cvt.u16.u32 %r81,%r27;
and.b16 %r80,%r81,-3236;
cvt.s32.s16 %r29,%r80;
st.u16 [%r51+16],%r80;
.loc 1 128 6
@ %r134 bra $L22;
.loc 1 136 17
add.u64 %r88,%frame,8;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r88;
call (%value_in),__swhatbuf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r89,[%value_in];
}
.loc 1 136 14
ld.u16 %r91,[%r51+16];
cvt.u16.u32 %r92,%r89;
or.b16 %r90,%r91,%r92;
st.u16 [%r51+16],%r90;
.loc 1 137 6
setp.ne.u64 %r93,%r54,0;
@ %r93 bra $L9;
.loc 1 140 12
ld.u64 %r54,[%frame];
bra $L10;
$L9:
.loc 1 144 6
setp.ne.u64 %r94,%r52,0;
@ %r94 bra $L11;
$L10:
.loc 1 146 18
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r54;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r96,[%value_in];
}
mov.u64 %r52,%r96;
.loc 1 146 10
setp.ne.u64 %r98,%r96,0;
@ %r98 bra $L12;
.loc 1 153 13
ld.u64 %r33,[%frame];
.loc 1 153 7
setp.ne.u64 %r99,%r33,%r54;
@ %r99 bra $L13;
.loc 1 163 22
ld.s16 %r29,[%r51+16];
.loc 1 152 8
mov.u32 %r50,-1;
bra $L8;
$L13:
.loc 1 156 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
call (%value_in),__nvptx_malloc,(%out_arg1);
ld.param.u64 %r101,[%value_in];
}
mov.u64 %r52,%r101;
.loc 1 159 10
setp.ne.u64 %r103,%r101,0;
@ %r103 bra $L23;
.loc 1 163 22
ld.s16 %r29,[%r51+16];
.loc 1 152 8
mov.u32 %r50,-1;
bra $L8;
$L22:
.loc 1 96 7
mov.u32 %r50,0;
$L8:
.loc 1 163 22
cvt.u16.u32 %r105,%r29;
or.b16 %r104,%r105,2;
st.u16 [%r51+16],%r104;
.loc 1 164 18
mov.u32 %r106,0;
st.u32 [%r51+12],%r106;
.loc 1 165 36
add.u64 %r35,%r51,119;
.loc 1 165 34
st.u64 [%r51],%r35;
.loc 1 165 25
st.u64 [%r51+24],%r35;
.loc 1 166 25
mov.u32 %r107,1;
st.u32 [%r51+32],%r107;
.loc 1 168 18
bra $L1;
$L23:
mov.u64 %r54,%r33;
$L12:
.loc 1 170 18
ld.u16 %r109,[%r51+16];
or.b16 %r108,%r109,128;
st.u16 [%r51+16],%r108;
$L11:
.loc 1 177 6
ld.u32 %r110,[%r45+80];
setp.ne.u32 %r111,%r110,0;
@ %r111 bra $L14;
.loc 1 178 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
call __sinit,(%out_arg1);
}
$L14:
.loc 1 188 17
ld.s16 %r42,[%r51+16];
.loc 1 187 6
ld.u64 %r113,[%frame];
setp.eq.u64 %r114,%r113,%r54;
@ %r114 bra $L15;
.loc 1 188 17
cvt.u16.u32 %r116,%r42;
or.b16 %r115,%r116,2048;
cvt.s32.s16 %r42,%r115;
st.u16 [%r51+16],%r115;
$L15:
.loc 1 195 6
setp.ne.u32 %r118,%r53,1;
@ %r118 bra $L16;
.loc 1 196 16
cvt.u16.u32 %r120,%r42;
or.b16 %r119,%r120,1;
st.u16 [%r51+16],%r119;
.loc 1 197 26
st.u64 [%r51],%r52;
.loc 1 197 17
st.u64 [%r51+24],%r52;
.loc 1 198 17
cvt.u32.u64 %r49,%r54;
st.u32 [%r51+32],%r49;
.loc 1 200 6
and.b16 %r121,%r120,8;
setp.ne.u16 %r123,%r121,0;
@ %r123 bra $L17;
bra $L18;
$L16:
.loc 1 197 26
st.u64 [%r51],%r52;
.loc 1 197 17
st.u64 [%r51+24],%r52;
.loc 1 198 17
cvt.u32.u64 %r49,%r54;
st.u32 [%r51+32],%r49;
.loc 1 200 6
cvt.u16.u32 %r125,%r42;
and.b16 %r124,%r125,8;
setp.eq.u16 %r126,%r124,0;
@ %r126 bra $L18;
.loc 1 206 10
and.b16 %r127,%r125,1;
setp.eq.u16 %r129,%r127,0;
@ %r129 bra $L19;
$L17:
.loc 1 208 11
mov.u32 %r130,0;
st.u32 [%r51+12],%r130;
.loc 1 209 19
neg.s32 %r131,%r49;
.loc 1 209 17
st.u32 [%r51+40],%r131;
.loc 1 221 10
mov.u32 %r50,%r130;
bra $L1;
$L19:
.loc 1 212 16
st.u32 [%r51+12],%r49;
.loc 1 221 10
mov.u32 %r50,0;
bra $L1;
$L18:
.loc 1 217 14
mov.u32 %r132,0;
st.u32 [%r51+12],%r132;
.loc 1 221 10
mov.u32 %r50,%r132;
bra $L1;
$L20:
.loc 1 110 14
mov.u32 %r50,-1;
bra $L1;
$L21:
mov.u32 %r50,-1;
$L1:
.loc 1 222 1
mov.u32 %value,%r50;
st.param.u32 [%value_out],%value;
ret;
}
/969            1612277261  0     0     100666  922       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: copysignf
.visible .func (.param .f32 %value_out) copysignf (.param .f32 %in_ar0, .param .f32 %in_ar1);
.file 1 "../../../../../newlib/libm/common/sf_copysign.c"
// BEGIN GLOBAL FUNCTION DEF: copysignf
.visible .func (.param .f32 %value_out) copysignf (.param .f32 %in_ar0, .param .f32 %in_ar1)
{
.reg .f32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .f32 %ar1;
ld.param.f32 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .f32 %r28;
.reg .f32 %r29;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u32 %r32;
.reg .u32 %r33;
mov.f32 %r28,%ar0;
mov.f32 %r29,%ar1;
.loc 1 34 2
mov.b32 %r31,%r28;
and.b32 %r30,%r31,2147483647;
mov.b32 %r33,%r29;
and.b32 %r32,%r33,-2147483648;
or.b32 %r24,%r30,%r32;
.loc 1 35 16
mov.b32 %value,%r24;
.loc 1 36 1
st.param.f32 [%value_out],%value;
ret;
}
/990            1612277261  0     0     100666  727       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: finitef
.visible .func (.param .u32 %value_out) finitef (.param .f32 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_finite.c"
// BEGIN GLOBAL FUNCTION DEF: finitef
.visible .func (.param .u32 %value_out) finitef (.param .f32 %in_ar0)
{
.reg .u32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .f32 %r27;
.reg .u32 %r29;
.reg .u32 %r31;
mov.f32 %r27,%ar0;
.loc 1 31 2
mov.b32 %r23,%r27;
.loc 1 32 5
and.b32 %r29,%r23,2147483647;
.loc 1 33 10
set.u32.le.s32 %r31,%r29,2139095039;
neg.s32 %value,%r31;
.loc 1 34 1
st.param.u32 [%value_out],%value;
ret;
}

/1009           1612277261  0     0     100666  1279      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __fpclassifyf
.visible .func (.param .u32 %value_out) __fpclassifyf (.param .f32 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_fpclassify.c"
// BEGIN GLOBAL FUNCTION DEF: __fpclassifyf
.visible .func (.param .u32 %value_out) __fpclassifyf (.param .f32 %in_ar0)
{
.reg .u32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u32 %r27;
.reg .f32 %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u32 %r36;
mov.f32 %r28,%ar0;
.loc 1 16 9
mov.b32 %r29,%r28;
and.b32 %r26,%r29,2147483647;
.loc 1 16 6
setp.eq.u32 %r30,%r26,0;
@ %r30 bra $L3;
.loc 1 18 29
add.u32 %r31,%r26,-8388608;
.loc 1 18 11
setp.le.u32 %r32,%r31,2130706431;
@ %r32 bra $L4;
.loc 1 21 29
add.u32 %r33,%r26,-1;
.loc 1 21 11
setp.le.u32 %r34,%r33,8388606;
@ %r34 bra $L5;
.loc 1 24 14
set.u32.eq.u32 %r36,%r26,2139095040;
neg.s32 %r27,%r36;
bra $L1;
$L3:
.loc 1 17 12
mov.u32 %r27,2;
bra $L1;
$L4:
.loc 1 20 12
mov.u32 %r27,4;
bra $L1;
$L5:
.loc 1 23 12
mov.u32 %r27,3;
$L1:
.loc 1 28 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}

/1032           1612277261  0     0     100666  2106      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: frexpf
.visible .func (.param .f32 %value_out) frexpf (.param .f32 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libm/math/sf_frexp.c"
// BEGIN GLOBAL FUNCTION DEF: frexpf
.visible .func (.param .f32 %value_out) frexpf (.param .f32 %in_ar0, .param .u64 %in_ar1)
{
.reg .f32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u32 %r36;
.reg .f32 %r37;
.reg .f32 %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u16 %r47;
.reg .u16 %r48;
.reg .u16 %r49;
.reg .u32 %r50;
.reg .u16 %r51;
.reg .pred %r52;
.reg .u32 %r53;
.reg .pred %r54;
.reg .f32 %r55;
.reg .u32 %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u32 %r59;
.reg .u32 %r60;
mov.f32 %r38,%ar0;
mov.u64 %r39,%ar1;
.loc 1 33 2
mov.b32 %r30,%r38;
.loc 1 34 5
and.b32 %r31,%r30,2147483647;
.loc 1 35 8
mov.u32 %r40,0;
st.u32 [%r39],%r40;
.loc 1 36 5
set.u32.gt.s32 %r42,%r31,2139095039;
neg.s32 %r43,%r42;
.loc 1 36 31
set.u32.eq.u32 %r45,%r31,0;
neg.s32 %r46,%r45;
.loc 1 36 29
cvt.u16.u32 %r48,%r43;
cvt.u16.u32 %r49,%r46;
or.b16 %r47,%r48,%r49;
.loc 1 36 4
cvt.u32.u16 %r50,%r47;
cvt.u16.u8 %r51,%r50;
setp.ne.u16 %r52,%r51,0;
@ %r52 bra $L4;
.loc 1 37 5
and.b32 %r53,%r30,2139095040;
setp.ne.u32 %r54,%r53,0;
@ %r54 bra $L5;
.loc 1 38 8
mul.f32 %r55,%r38,0f4c000000;
.loc 1 39 6
mov.b32 %r30,%r55;
.loc 1 40 9
and.b32 %r31,%r30,2147483647;
mov.u32 %r36,-25;
bra $L3;
$L5:
mov.u32 %r36,%r40;
$L3:
.loc 1 43 14
shr.s32 %r56,%r31,23;
.loc 1 43 19
add.u32 %r57,%r56,-126;
.loc 1 43 8
add.u32 %r58,%r57,%r36;
st.u32 [%r39],%r58;
.loc 1 44 10
and.b32 %r59,%r30,-2139095041;
.loc 1 44 22
or.b32 %r60,%r59,1056964608;
.loc 1 45 2
mov.b32 %r37,%r60;
.loc 1 46 9
bra $L1;
$L4:
.loc 1 36 61
mov.f32 %r37,%r38;
$L1:
.loc 1 47 1
mov.f32 %value,%r37;
st.param.f32 [%value_out],%value;
ret;
}
/1050           1612277261  0     0     100666  721       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isinff
.visible .func (.param .u32 %value_out) isinff (.param .f32 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_isinf.c"
// BEGIN GLOBAL FUNCTION DEF: isinff
.visible .func (.param .u32 %value_out) isinff (.param .f32 %in_ar0)
{
.reg .u32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .f32 %r27;
.reg .u32 %r29;
.reg .u32 %r31;
mov.f32 %r27,%ar0;
.loc 1 19 2
mov.b32 %r23,%r27;
.loc 1 20 5
and.b32 %r29,%r23,2147483647;
.loc 1 21 9
set.u32.eq.u32 %r31,%r29,2139095040;
neg.s32 %value,%r31;
.loc 1 22 1
st.param.u32 [%value_out],%value;
ret;
}

/1068           1612277261  0     0     100666  730       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __isinff
.visible .func (.param .u32 %value_out) __isinff (.param .f32 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_isinff.c"
// BEGIN GLOBAL FUNCTION DEF: __isinff
.visible .func (.param .u32 %value_out) __isinff (.param .f32 %in_ar0)
{
.reg .u32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .f32 %r27;
.reg .u32 %r29;
.reg .u32 %r31;
mov.f32 %r27,%ar0;
.loc 1 12 2
mov.b32 %r23,%r27;
.loc 1 13 5
and.b32 %r29,%r23,2147483647;
.loc 1 14 9
set.u32.eq.u32 %r31,%r29,2139095040;
neg.s32 %value,%r31;
.loc 1 15 1
st.param.u32 [%value_out],%value;
ret;
}
/1087           1612277261  0     0     100666  721       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: isnanf
.visible .func (.param .u32 %value_out) isnanf (.param .f32 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_isnan.c"
// BEGIN GLOBAL FUNCTION DEF: isnanf
.visible .func (.param .u32 %value_out) isnanf (.param .f32 %in_ar0)
{
.reg .u32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .f32 %r27;
.reg .u32 %r29;
.reg .u32 %r31;
mov.f32 %r27,%ar0;
.loc 1 30 2
mov.b32 %r23,%r27;
.loc 1 31 5
and.b32 %r29,%r23,2147483647;
.loc 1 32 9
set.u32.gt.s32 %r31,%r29,2139095040;
neg.s32 %value,%r31;
.loc 1 33 1
st.param.u32 [%value_out],%value;
ret;
}

/1105           1612277261  0     0     100666  730       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __isnanf
.visible .func (.param .u32 %value_out) __isnanf (.param .f32 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_isnanf.c"
// BEGIN GLOBAL FUNCTION DEF: __isnanf
.visible .func (.param .u32 %value_out) __isnanf (.param .f32 %in_ar0)
{
.reg .u32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %r23;
.reg .f32 %r27;
.reg .u32 %r29;
.reg .u32 %r31;
mov.f32 %r27,%ar0;
.loc 1 22 2
mov.b32 %r23,%r27;
.loc 1 23 5
and.b32 %r29,%r23,2147483647;
.loc 1 24 9
set.u32.gt.s32 %r31,%r29,2139095040;
neg.s32 %value,%r31;
.loc 1 25 1
st.param.u32 [%value_out],%value;
ret;
}
/1124           1612277261  0     0     100666  2804      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: ldexpf
.visible .func (.param .f32 %value_out) ldexpf (.param .f32 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libm/math/sf_ldexp.c"
// BEGIN GLOBAL FUNCTION DECL: finitef
.extern .func (.param .u32 %value_out) finitef (.param .f32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: scalbnf
.extern .func (.param .f32 %value_out) scalbnf (.param .f32 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DEF: ldexpf
.visible .func (.param .f32 %value_out) ldexpf (.param .f32 %in_ar0, .param .u32 %in_ar1)
{
.reg .f32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .f32 %r32;
.reg .u32 %r33;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u32 %r45;
.reg .u16 %r46;
.reg .pred %r47;
.reg .f32 %r50;
.reg .u32 %r52;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .u16 %r61;
.reg .u32 %r62;
.reg .u16 %r63;
.reg .pred %r64;
.reg .u64 %r65;
.reg .u32 %r66;
mov.f32 %r32,%ar0;
mov.u32 %r33,%ar1;
.loc 1 26 6
{
.param .u32 %value_in;
.param .f32 %out_arg1;
st.param.f32 [%out_arg1],%r32;
call (%value_in),finitef,(%out_arg1);
ld.param.u32 %r35,[%value_in];
}
.loc 1 26 20
set.u32.eq.f32 %r37,%r32,0f00000000;
neg.s32 %r38,%r37;
.loc 1 26 4
set.u32.eq.u32 %r40,%r35,0;
neg.s32 %r41,%r40;
.loc 1 26 20
cvt.u16.u32 %r43,%r38;
cvt.u16.u32 %r44,%r41;
or.b16 %r42,%r43,%r44;
cvt.u32.u16 %r45,%r42;
cvt.u16.u8 %r46,%r45;
setp.ne.u16 %r47,%r46,0;
@ %r47 bra $L2;
.loc 1 27 10
{
.param .f32 %value_in;
.param .f32 %out_arg1;
st.param.f32 [%out_arg1],%r32;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r33;
call (%value_in),scalbnf,(%out_arg1,%out_arg2);
ld.param.f32 %r50,[%value_in];
}
mov.f32 %r32,%r50;
.loc 1 28 6
{
.param .u32 %value_in;
.param .f32 %out_arg1;
st.param.f32 [%out_arg1],%r32;
call (%value_in),finitef,(%out_arg1);
ld.param.u32 %r52,[%value_in];
}
.loc 1 28 20
set.u32.eq.f32 %r54,%r32,0f00000000;
neg.s32 %r55,%r54;
.loc 1 28 4
set.u32.eq.u32 %r57,%r52,0;
neg.s32 %r58,%r57;
.loc 1 28 20
cvt.u16.u32 %r60,%r55;
cvt.u16.u32 %r61,%r58;
or.b16 %r59,%r60,%r61;
cvt.u32.u16 %r62,%r59;
cvt.u16.u8 %r63,%r62;
setp.eq.u16 %r64,%r63,0;
@ %r64 bra $L2;
.loc 1 28 41
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r65,[%value_in];
}
.loc 1 28 47
mov.u32 %r66,34;
st.u32 [%r65],%r66;
$L2:
.loc 1 30 1
mov.f32 %value,%r32;
st.param.f32 [%value_out],%value;
ret;
}
lib_a-sf_modf.o/1612277261  0     0     100666  2395      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: modff
.visible .func (.param .f32 %value_out) modff (.param .f32 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libm/common/sf_modf.c"
// BEGIN GLOBAL FUNCTION DECL: __fpclassifyf
.extern .func (.param .u32 %value_out) __fpclassifyf (.param .f32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: modff
.visible .func (.param .f32 %value_out) modff (.param .f32 %in_ar0, .param .u64 %in_ar1)
{
.reg .f32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .f32 %r31;
.reg .u32 %r33;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .f32 %r38;
.reg .f32 %r39;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .pred %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .f32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .pred %r49;
.reg .u32 %r50;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r54;
.reg .pred %r55;
.reg .u32 %r56;
mov.f32 %r39,%ar0;
mov.u64 %r40,%ar1;
.loc 1 27 2
mov.b32 %r33,%r39;
.loc 1 28 11
shr.s32 %r41,%r33,23;
.loc 1 28 16
and.b32 %r42,%r41,255;
.loc 1 28 5
add.u32 %r36,%r42,-127;
.loc 1 29 4
setp.gt.s32 %r43,%r36,22;
@ %r43 bra $L2;
.loc 1 30 8
setp.ge.s32 %r44,%r36,0;
@ %r44 bra $L3;
.loc 1 31 10
and.b32 %r45,%r33,-2147483648;
mov.b32 %r46,%r45;
st.f32 [%r40],%r46;
.loc 1 32 10
mov.f32 %r38,%r39;
bra $L1;
$L3:
.loc 1 34 19
mov.u32 %r47,8388607;
shr.s32 %r37,%r47,%r36;
.loc 1 35 9
and.b32 %r48,%r33,%r37;
.loc 1 35 5
setp.ne.u32 %r49,%r48,0;
@ %r49 bra $L5;
.loc 1 36 13
st.f32 [%r40],%r39;
.loc 1 37 7
and.b32 %r50,%r33,-2147483648;
mov.b32 %r38,%r50;
.loc 1 38 14
bra $L1;
$L5:
.loc 1 40 7
not.b32 %r51,%r37;
and.b32 %r52,%r51,%r33;
mov.b32 %r31,%r52;
st.f32 [%r40],%r31;
.loc 1 41 16
sub.f32 %r38,%r39,%r31;
bra $L1;
$L2:
.loc 1 45 12
st.f32 [%r40],%r39;
.loc 1 46 10
{
.param .u32 %value_in;
.param .f32 %out_arg1;
st.param.f32 [%out_arg1],%r39;
call (%value_in),__fpclassifyf,(%out_arg1);
ld.param.u32 %r54,[%value_in];
}
.loc 1 46 9
setp.ne.u32 %r55,%r54,0;
@ %r55 bra $L6;
.loc 1 46 54
add.f32 %r38,%r39,%r39;
.loc 1 46 51
st.f32 [%r40],%r38;
bra $L1;
$L6:
.loc 1 47 6
and.b32 %r56,%r33,-2147483648;
mov.b32 %r38,%r56;
$L1:
.loc 1 50 1
mov.f32 %value,%r38;
st.param.f32 [%value_out],%value;
ret;
}

lib_a-sf_nan.o/ 1612277261  0     0     100666  514       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: nanf
.visible .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libm/common/sf_nan.c"
// BEGIN GLOBAL FUNCTION DEF: nanf
.visible .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.loc 1 17 9
mov.f32 %value,0f7fc00000;
.loc 1 18 1
st.param.f32 [%value_out],%value;
ret;
}
/1142           1612277261  0     0     100666  3004      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: scalbnf
.visible .func (.param .f32 %value_out) scalbnf (.param .f32 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libm/common/sf_scalbn.c"
// BEGIN GLOBAL FUNCTION DEF: scalbnf
.visible .func (.param .f32 %value_out) scalbnf (.param .f32 %in_ar0, .param .u32 %in_ar1)
{
.reg .f32 %value;
.reg .f32 %ar0;
ld.param.f32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .f32 %r26;
.reg .f32 %r32;
.reg .f32 %r33;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r45;
.reg .f32 %r47;
.reg .f32 %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .pred %r51;
.reg .u32 %r52;
.reg .pred %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .pred %r57;
.reg .f32 %r58;
.reg .pred %r59;
.reg .u32 %r60;
.reg .u32 %r61;
.reg .u32 %r62;
.reg .pred %r63;
.reg .pred %r64;
.reg .f32 %r65;
.reg .f32 %r66;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .f32 %r71;
mov.f32 %r48,%ar0;
mov.u32 %r49,%ar1;
.loc 1 46 2
mov.b32 %r45,%r48;
.loc 1 47 5
and.b32 %r41,%r45,2147483647;
.loc 1 49 5
setp.eq.u32 %r50,%r41,0;
@ %r50 bra $L11;
.loc 1 51 12
setp.le.u32 %r51,%r41,2139095039;
@ %r51 bra $L3;
.loc 1 52 14
add.f32 %r47,%r48,%r48;
bra $L1;
$L3:
.loc 1 53 12
and.b32 %r52,%r45,2139095040;
setp.ne.u32 %r53,%r52,0;
@ %r53 bra $L4;
.loc 1 54 8
mul.f32 %r48,%r48,0f4c000000;
.loc 1 57 16
setp.lt.s32 %r54,%r49,-50000;
@ %r54 bra $L5;
.loc 1 55 6
mov.b32 %r40,%r48;
.loc 1 56 26
shr.s32 %r55,%r40,23;
and.b32 %r56,%r55,255;
.loc 1 56 8
add.u32 %r39,%r56,-25;
bra $L6;
$L5:
.loc 1 57 39
mul.f32 %r47,%r48,0f0da24260;
bra $L1;
$L4:
.loc 1 46 2
mov.u32 %r40,%r45;
.loc 1 48 15
shr.u32 %r39,%r41,23;
$L6:
.loc 1 59 11
add.u32 %r42,%r39,%r49;
.loc 1 60 12
setp.le.s32 %r57,%r42,254;
@ %r57 bra $L7;
.loc 1 60 46
mov.f32 %r58,0f7149f2ca;
copysign.f32 %r26,%r48,%r58;
.loc 1 60 45
mul.f32 %r47,%r26,0f7149f2ca;
bra $L1;
$L7:
.loc 1 61 12
setp.le.s32 %r59,%r42,0;
@ %r59 bra $L8;
.loc 1 62 7
and.b32 %r60,%r40,-2139095041;
shl.b32 %r61,%r42,23;
or.b32 %r62,%r60,%r61;
mov.b32 %r47,%r62;
.loc 1 62 57
bra $L1;
$L8:
.loc 1 63 12
setp.ge.s32 %r63,%r42,-22;
@ %r63 bra $L9;
.loc 1 64 16
setp.le.s32 %r64,%r49,50000;
@ %r64 bra $L10;
.loc 1 65 15
mov.f32 %r65,0f7149f2ca;
copysign.f32 %r32,%r48,%r65;
.loc 1 65 14
mul.f32 %r47,%r32,0f7149f2ca;
bra $L1;
$L10:
.loc 1 66 23
mov.f32 %r66,0f0da24260;
copysign.f32 %r33,%r48,%r66;
.loc 1 66 22
mul.f32 %r47,%r33,0f0da24260;
bra $L1;
$L9:
.loc 1 68 11
add.u32 %r67,%r42,25;
.loc 1 69 2
shl.b32 %r68,%r67,23;
and.b32 %r69,%r40,-2139095041;
or.b32 %r70,%r68,%r69;
.loc 1 70 17
mov.b32 %r71,%r70;
mul.f32 %r47,%r71,0f33000000;
bra $L1;
$L11:
.loc 1 50 13
mov.f32 %r47,%r48;
$L1:
.loc 1 71 1
mov.f32 %value,%r47;
st.param.f32 [%value_out],%value;
ret;
}
lib_a-signal.o/ 1612277262  0     0     100666  16246     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _init_signal_r
.visible .func (.param .u32 %value_out) _init_signal_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/signal/signal.c"
// BEGIN GLOBAL FUNCTION DECL: _signal_r
.visible .func (.param .u64 %value_out) _signal_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _raise_r
.visible .func (.param .u32 %value_out) _raise_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sigtramp_r
.visible .func (.param .u32 %value_out) __sigtramp_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: raise
.visible .func (.param .u32 %value_out) raise (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: signal
.visible .func (.param .u64 %value_out) signal (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _init_signal
.visible .func (.param .u32 %value_out) _init_signal;
// BEGIN GLOBAL FUNCTION DECL: __sigtramp
.visible .func (.param .u32 %value_out) __sigtramp (.param .u32 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _getpid_r
.extern .func (.param .u32 %value_out) _getpid_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _kill_r
.extern .func (.param .u32 %value_out) _kill_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _init_signal_r
.visible .func (.param .u32 %value_out) _init_signal_r (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .pred %r36;
mov.u64 %r28,%ar0;
.loc 1 96 6
ld.u64 %r29,[%r28+1304];
setp.ne.u64 %r30,%r29,0;
@ %r30 bra $L2;
.loc 1 98 41
mov.u64 %r32,256;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r33,[%value_in];
}
.loc 1 98 22
st.u64 [%r28+1304],%r33;
.loc 1 99 10
setp.eq.u64 %r34,%r33,0;
@ %r34 bra $L5;
mov.u64 %r24,%r33;
add.u64 %r26,%r24,256;
$L4:
.loc 1 103 20
st.u64 [%r24],%r29;
.loc 1 102 7
add.u64 %r24,%r24,8;
setp.ne.u64 %r36,%r24,%r26;
@ %r36 bra $L4;
$L2:
.loc 1 106 10
mov.u32 %r27,0;
bra $L1;
$L5:
.loc 1 100 9
mov.u32 %r27,-1;
$L1:
.loc 1 107 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _signal_r
.visible .func (.param .u64 %value_out) _signal_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .pred %r40;
.reg .u64 %r41;
.reg .pred %r42;
.reg .u64 %r43;
.reg .u64 %r44;
mov.u64 %r31,%ar0;
mov.u32 %r32,%ar1;
mov.u64 %r33,%ar2;
.loc 1 116 6
setp.le.u32 %r34,%r32,31;
@ %r34 bra $L8;
.loc 1 118 19
mov.u32 %r35,22;
st.u32 [%r31],%r35;
.loc 1 119 14
mov.u64 %r30,-1;
bra $L7;
$L8:
.loc 1 122 10
ld.u64 %r23,[%r31+1304];
.loc 1 122 6
setp.ne.u64 %r36,%r23,0;
@ %r36 bra $L10;
.loc 1 98 41
mov.u64 %r38,256;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r39,[%value_in];
}
mov.u64 %r23,%r39;
.loc 1 98 22
st.u64 [%r31+1304],%r23;
.loc 1 99 10
setp.eq.u64 %r40,%r23,0;
@ %r40 bra $L12;
mov.u64 %r28,%r23;
add.u64 %r24,%r23,256;
.loc 1 103 20
mov.u64 %r41,0;
$L11:
st.u64 [%r28],%r41;
.loc 1 102 7
add.u64 %r28,%r28,8;
setp.ne.u64 %r42,%r24,%r28;
@ %r42 bra $L11;
$L10:
.loc 1 125 28
cvt.s64.s32 %r43,%r32;
shl.b64 %r44,%r43,3;
add.u64 %r27,%r23,%r44;
.loc 1 125 12
ld.u64 %r30,[%r27];
.loc 1 126 23
st.u64 [%r27],%r33;
.loc 1 128 10
bra $L7;
$L12:
.loc 1 123 12
mov.u64 %r30,-1;
$L7:
.loc 1 129 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _raise_r
.visible .func (.param .u32 %value_out) _raise_r (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r26;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .u32 %r39;
.reg .u32 %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u64 %r47;
mov.u64 %r30,%ar0;
mov.u32 %r31,%ar1;
.loc 1 137 6
setp.le.u32 %r32,%r31,31;
@ %r32 bra $L15;
.loc 1 139 19
mov.u32 %r33,22;
st.u32 [%r30],%r33;
.loc 1 140 14
mov.u32 %r29,-1;
bra $L14;
$L15:
.loc 1 143 10
ld.u64 %r23,[%r30+1304];
.loc 1 143 6
setp.eq.u64 %r34,%r23,0;
@ %r34 bra $L17;
.loc 1 146 26
cvt.s64.s32 %r35,%r31;
shl.b64 %r36,%r35,3;
add.u64 %r26,%r23,%r36;
.loc 1 146 10
ld.u64 %r28,[%r26];
.loc 1 148 6
setp.ne.u64 %r37,%r28,0;
@ %r37 bra $L18;
$L17:
.loc 1 149 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
call (%value_in),_getpid_r,(%out_arg1);
ld.param.u32 %r39,[%value_in];
}
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r39;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r31;
call (%value_in),_kill_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r43,[%value_in];
}
mov.u32 %r29,%r43;
bra $L14;
$L18:
.loc 1 150 11
setp.eq.u64 %r44,%r28,1;
@ %r44 bra $L20;
.loc 1 152 11
setp.ne.u64 %r45,%r28,-1;
@ %r45 bra $L19;
.loc 1 154 19
mov.u32 %r46,22;
st.u32 [%r30],%r46;
.loc 1 155 14
mov.u32 %r29,1;
bra $L14;
$L19:
.loc 1 159 27
mov.u64 %r47,0;
st.u64 [%r26],%r47;
.loc 1 160 7
{
$LCT0:
.callprototype _ ( .param .u32 %in_ar0);
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r31;
call %r28,(%out_arg1),$LCT0;
}
.loc 1 161 14
cvt.u32.u64 %r29,%r47;
bra $L14;
$L20:
.loc 1 151 12
mov.u32 %r29,0;
$L14:
.loc 1 163 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sigtramp_r
.visible .func (.param .u32 %value_out) __sigtramp_r (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .u64 %r47;
mov.u64 %r32,%ar0;
mov.u32 %r33,%ar1;
.loc 1 171 6
setp.le.u32 %r34,%r33,31;
@ %r34 bra $L25;
$L28:
.loc 1 173 14
mov.u32 %r31,-1;
bra $L24;
$L25:
.loc 1 176 10
ld.u64 %r23,[%r32+1304];
.loc 1 176 6
setp.ne.u64 %r35,%r23,0;
@ %r35 bra $L27;
.loc 1 98 41
mov.u64 %r37,256;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r38,[%value_in];
}
mov.u64 %r23,%r38;
.loc 1 98 22
st.u64 [%r32+1304],%r23;
.loc 1 99 10
setp.eq.u64 %r39,%r23,0;
@ %r39 bra $L28;
mov.u64 %r28,%r23;
add.u64 %r30,%r23,256;
.loc 1 103 20
mov.u64 %r40,0;
$L29:
st.u64 [%r28],%r40;
.loc 1 102 7
add.u64 %r28,%r28,8;
setp.ne.u64 %r41,%r28,%r30;
@ %r41 bra $L29;
$L27:
.loc 1 179 24
cvt.s64.s32 %r42,%r33;
shl.b64 %r43,%r42,3;
add.u64 %r26,%r23,%r43;
.loc 1 179 8
ld.u64 %r27,[%r26];
.loc 1 180 6
setp.eq.u64 %r44,%r27,0;
@ %r44 bra $L30;
.loc 1 182 11
setp.eq.u64 %r45,%r27,-1;
@ %r45 bra $L31;
.loc 1 184 11
setp.eq.u64 %r46,%r27,1;
@ %r46 bra $L32;
.loc 1 188 27
mov.u64 %r47,0;
st.u64 [%r26],%r47;
.loc 1 189 7
{
$LCT1:
.callprototype _ ( .param .u32 %in_ar0);
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r33;
call %r27,(%out_arg1),$LCT1;
}
.loc 1 190 14
cvt.u32.u64 %r31,%r47;
bra $L24;
$L30:
.loc 1 181 12
mov.u32 %r31,1;
bra $L24;
$L31:
.loc 1 183 12
mov.u32 %r31,2;
bra $L24;
$L32:
.loc 1 185 12
mov.u32 %r31,3;
$L24:
.loc 1 192 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: raise
.visible .func (.param .u32 %value_out) raise (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .u32 %r39;
.reg .u32 %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u64 %r47;
mov.u32 %r31,%ar0;
.loc 1 199 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 137 6
setp.le.u32 %r32,%r31,31;
@ %r32 bra $L38;
.loc 1 139 19
mov.u32 %r33,22;
st.u32 [%r22],%r33;
.loc 1 140 14
mov.u32 %r30,-1;
bra $L37;
$L38:
.loc 1 143 10
ld.u64 %r24,[%r22+1304];
.loc 1 143 6
setp.eq.u64 %r34,%r24,0;
@ %r34 bra $L40;
.loc 1 146 26
cvt.s64.s32 %r35,%r31;
shl.b64 %r36,%r35,3;
add.u64 %r27,%r24,%r36;
.loc 1 146 10
ld.u64 %r28,[%r27];
.loc 1 148 6
setp.ne.u64 %r37,%r28,0;
@ %r37 bra $L41;
$L40:
.loc 1 149 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call (%value_in),_getpid_r,(%out_arg1);
ld.param.u32 %r39,[%value_in];
}
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r39;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r31;
call (%value_in),_kill_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r43,[%value_in];
}
mov.u32 %r30,%r43;
bra $L37;
$L41:
.loc 1 150 11
setp.eq.u64 %r44,%r28,1;
@ %r44 bra $L43;
.loc 1 152 11
setp.ne.u64 %r45,%r28,-1;
@ %r45 bra $L42;
.loc 1 154 19
mov.u32 %r46,22;
st.u32 [%r22],%r46;
.loc 1 155 14
mov.u32 %r30,1;
bra $L37;
$L42:
.loc 1 159 27
mov.u64 %r47,0;
st.u64 [%r27],%r47;
.loc 1 160 7
{
$LCT2:
.callprototype _ ( .param .u32 %in_ar0);
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r31;
call %r28,(%out_arg1),$LCT2;
}
.loc 1 161 14
cvt.u32.u64 %r30,%r47;
bra $L37;
$L43:
.loc 1 151 12
mov.u32 %r30,0;
$L37:
.loc 1 200 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: signal
.visible .func (.param .u64 %value_out) signal (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .pred %r40;
.reg .u64 %r41;
.reg .pred %r42;
.reg .u64 %r43;
.reg .u64 %r44;
mov.u32 %r32,%ar0;
mov.u64 %r33,%ar1;
.loc 1 206 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 116 6
setp.le.u32 %r34,%r32,31;
@ %r34 bra $L48;
.loc 1 118 19
mov.u32 %r35,22;
st.u32 [%r22],%r35;
.loc 1 119 14
mov.u64 %r31,-1;
bra $L47;
$L48:
.loc 1 122 10
ld.u64 %r24,[%r22+1304];
.loc 1 122 6
setp.ne.u64 %r36,%r24,0;
@ %r36 bra $L50;
.loc 1 98 41
mov.u64 %r38,256;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r39,[%value_in];
}
mov.u64 %r24,%r39;
.loc 1 98 22
st.u64 [%r22+1304],%r24;
.loc 1 99 10
setp.eq.u64 %r40,%r24,0;
@ %r40 bra $L52;
mov.u64 %r29,%r24;
add.u64 %r25,%r24,256;
.loc 1 103 20
mov.u64 %r41,0;
$L51:
st.u64 [%r29],%r41;
.loc 1 102 7
add.u64 %r29,%r29,8;
setp.ne.u64 %r42,%r25,%r29;
@ %r42 bra $L51;
$L50:
.loc 1 125 28
cvt.s64.s32 %r43,%r32;
shl.b64 %r44,%r43,3;
add.u64 %r28,%r24,%r44;
.loc 1 125 12
ld.u64 %r31,[%r28];
.loc 1 126 23
st.u64 [%r28],%r33;
.loc 1 128 10
bra $L47;
$L52:
.loc 1 123 12
mov.u64 %r31,-1;
$L47:
.loc 1 207 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _init_signal
.visible .func (.param .u32 %value_out) _init_signal
{
.reg .u32 %value;
.reg .u64 %r22;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .pred %r36;
.loc 1 212 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 96 6
ld.u64 %r29,[%r22+1304];
setp.ne.u64 %r30,%r29,0;
@ %r30 bra $L55;
.loc 1 98 41
mov.u64 %r32,256;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r32;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r33,[%value_in];
}
.loc 1 98 22
st.u64 [%r22+1304],%r33;
.loc 1 99 10
setp.eq.u64 %r34,%r33,0;
@ %r34 bra $L58;
mov.u64 %r25,%r33;
add.u64 %r27,%r25,256;
$L57:
.loc 1 103 20
st.u64 [%r25],%r29;
.loc 1 102 7
add.u64 %r25,%r25,8;
setp.ne.u64 %r36,%r25,%r27;
@ %r36 bra $L57;
$L55:
.loc 1 106 10
mov.u32 %r28,0;
bra $L54;
$L58:
.loc 1 100 9
mov.u32 %r28,-1;
$L54:
.loc 1 213 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sigtramp
.visible .func (.param .u32 %value_out) __sigtramp (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .u64 %r47;
mov.u32 %r33,%ar0;
.loc 1 218 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 171 6
setp.le.u32 %r34,%r33,31;
@ %r34 bra $L61;
$L64:
.loc 1 173 14
mov.u32 %r32,-1;
bra $L60;
$L61:
.loc 1 176 10
ld.u64 %r24,[%r22+1304];
.loc 1 176 6
setp.ne.u64 %r35,%r24,0;
@ %r35 bra $L63;
.loc 1 98 41
mov.u64 %r37,256;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r38,[%value_in];
}
mov.u64 %r24,%r38;
.loc 1 98 22
st.u64 [%r22+1304],%r24;
.loc 1 99 10
setp.eq.u64 %r39,%r24,0;
@ %r39 bra $L64;
mov.u64 %r25,%r24;
add.u64 %r31,%r24,256;
.loc 1 103 20
mov.u64 %r40,0;
$L65:
st.u64 [%r25],%r40;
.loc 1 102 7
add.u64 %r25,%r25,8;
setp.ne.u64 %r41,%r25,%r31;
@ %r41 bra $L65;
$L63:
.loc 1 179 24
cvt.s64.s32 %r42,%r33;
shl.b64 %r43,%r42,3;
add.u64 %r28,%r24,%r43;
.loc 1 179 8
ld.u64 %r29,[%r28];
.loc 1 180 6
setp.eq.u64 %r44,%r29,0;
@ %r44 bra $L66;
.loc 1 182 11
setp.eq.u64 %r45,%r29,-1;
@ %r45 bra $L67;
.loc 1 184 11
setp.eq.u64 %r46,%r29,1;
@ %r46 bra $L68;
.loc 1 188 27
mov.u64 %r47,0;
st.u64 [%r28],%r47;
.loc 1 189 7
{
$LCT3:
.callprototype _ ( .param .u32 %in_ar0);
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r33;
call %r29,(%out_arg1),$LCT3;
}
.loc 1 190 14
cvt.u32.u64 %r32,%r47;
bra $L60;
$L66:
.loc 1 181 12
mov.u32 %r32,1;
bra $L60;
$L67:
.loc 1 183 12
mov.u32 %r32,2;
bra $L60;
$L68:
.loc 1 185 12
mov.u32 %r32,3;
$L60:
.loc 1 219 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-signalr.o/1612277262  0     0     100666  2157      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _kill_r
.visible .func (.param .u32 %value_out) _kill_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/signalr.c"
// BEGIN GLOBAL FUNCTION DECL: _getpid_r
.visible .func (.param .u32 %value_out) _getpid_r (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: kill
.extern .func (.param .u32 %value_out) kill (.param .u32 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: getpid
.extern .func (.param .u32 %value_out) getpid;
// BEGIN GLOBAL FUNCTION DEF: _kill_r
.visible .func (.param .u32 %value_out) _kill_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 52 9
mov.u32 %r27,0;
st.global.u32 [errno],%r27;
.loc 1 53 14
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r25;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r26;
call (%value_in),kill,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 53 6
setp.ne.u32 %r31,%r30,-1;
@ %r31 bra $L1;
.loc 1 53 47
ld.global.u32 %r22,[errno];
.loc 1 53 38
setp.eq.u32 %r32,%r22,0;
@ %r32 bra $L1;
.loc 1 54 17
st.u32 [%r24],%r22;
$L1:
.loc 1 56 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _getpid_r
.visible .func (.param .u32 %value_out) _getpid_r (.param .u64 %in_ar0)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r24;
.loc 1 83 9
{
.param .u32 %value_in;
call (%value_in),getpid;
ld.param.u32 %r24,[%value_in];
}
.loc 1 85 1
mov.u32 %value,%r24;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-signgam.o/1612277262  0     0     100666  580       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __signgam
.visible .func (.param .u64 %value_out) __signgam;
.file 1 "../../../../../newlib/libc/reent/signgam.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: __signgam
.visible .func (.param .u64 %value_out) __signgam
{
.reg .u64 %value;
.reg .u64 %r25;
.loc 1 13 10
ld.global.u64 %r25,[_impure_ptr];
add.u64 %value,%r25,224;
.loc 1 14 1
st.param.u64 [%value_out],%value;
ret;
}
/1161           1612277262  0     0     100666  3642      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _siprintf_r
.visible .func (.param .u32 %value_out) _siprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/siprintf.c"
// BEGIN GLOBAL FUNCTION DECL: siprintf
.visible .func (.param .u32 %value_out) siprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfiprintf_r
.extern .func (.param .u32 %value_out) _svfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _siprintf_r
.visible .func (.param .u32 %value_out) _siprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r36;
.reg .u32 %r37;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 111 22
st.u64 [%frame],%r26;
.loc 1 111 15
st.u64 [%frame+24],%r26;
.loc 1 112 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 112 22
st.u32 [%frame+12],%r28;
.loc 1 110 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 115 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 117 5
ld.u64 %r22,[%frame];
.loc 1 117 9
mov.u32 %r37,0;
st.u8 [%r22],%r37;
.loc 1 119 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: siprintf
.visible .func (.param .u32 %value_out) siprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 132 22
st.u64 [%frame],%r26;
.loc 1 132 15
st.u64 [%frame+24],%r26;
.loc 1 133 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 133 22
st.u32 [%frame+12],%r28;
.loc 1 131 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 136 9
ld.global.u64 %r36,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r37,[%value_in];
}
.loc 1 138 5
ld.u64 %r23,[%frame];
.loc 1 138 9
mov.u32 %r38,0;
st.u8 [%r23],%r38;
.loc 1 140 1
mov.u32 %value,%r37;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-siscanf.o/1612277262  0     0     100666  4590      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: siscanf
.visible .func (.param .u32 %value_out) siscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/siscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _siscanf_r
.visible .func (.param .u32 %value_out) _siscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __seofread
.extern .func (.param .u32 %value_out) __seofread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ssvfiscanf_r
.extern .func (.param .u32 %value_out) __ssvfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: siscanf
.visible .func (.param .u32 %value_out) siscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u64 %r41;
.reg .u32 %r42;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 92 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 93 22
st.u64 [%frame],%r27;
.loc 1 93 15
st.u64 [%frame+24],%r27;
.loc 1 94 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 94 22
cvt.u32.u64 %r23,%r31;
st.u32 [%frame+8],%r23;
.loc 1 94 15
st.u32 [%frame+32],%r23;
.loc 1 95 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 96 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 97 15
st.u64 [%frame+120],%r33;
.loc 1 98 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 100 9
ld.global.u64 %r41,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__ssvfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r42,[%value_in];
}
.loc 1 103 1
mov.u32 %value,%r42;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _siscanf_r
.visible .func (.param .u32 %value_out) _siscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u32 %r41;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 116 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 117 22
st.u64 [%frame],%r27;
.loc 1 117 15
st.u64 [%frame+24],%r27;
.loc 1 118 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 118 22
cvt.u32.u64 %r23,%r31;
st.u32 [%frame+8],%r23;
.loc 1 118 15
st.u32 [%frame+32],%r23;
.loc 1 119 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 120 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 121 15
st.u64 [%frame+120],%r33;
.loc 1 122 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 124 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__ssvfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r41,[%value_in];
}
.loc 1 127 1
mov.u32 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}
/1179           1612277262  0     0     100666  6685      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _sniprintf_r
.visible .func (.param .u32 %value_out) _sniprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdio/sniprintf.c"
// BEGIN GLOBAL FUNCTION DECL: sniprintf
.visible .func (.param .u32 %value_out) sniprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfiprintf_r
.extern .func (.param .u32 %value_out) _svfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _sniprintf_r
.visible .func (.param .u32 %value_out) _sniprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar4];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r26;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .u16 %r35;
.reg .pred %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u32 %r48;
.reg .u16 %r50;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .u32 %r59;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
mov.u64 %r32,%ar3;
.loc 1 39 6
setp.le.u64 %r33,%r31,2147483647;
@ %r33 bra $L2;
.loc 1 41 19
mov.u32 %r34,139;
st.u32 [%r29],%r34;
.loc 1 42 14
mov.u32 %r28,-1;
bra $L1;
$L2:
.loc 1 44 12
mov.u16 %r35,520;
st.u16 [%frame+16],%r35;
.loc 1 45 22
st.u64 [%frame],%r30;
.loc 1 45 15
st.u64 [%frame+24],%r30;
.loc 1 46 22
setp.eq.u64 %r36,%r31,0;
@ %r36 bra $L4;
.loc 1 46 41
cvt.u32.u64 %r37,%r31;
add.u32 %r26,%r37,-1;
.loc 1 46 22
st.u32 [%frame+12],%r26;
.loc 1 46 15
st.u32 [%frame+32],%r26;
.loc 1 47 11
mov.u16 %r38,-1;
st.u16 [%frame+18],%r38;
.loc 1 49 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r44,[%value_in];
}
mov.u32 %r28,%r44;
.loc 1 51 6
setp.lt.s32 %r45,%r28,-1;
@ %r45 bra $L5;
$L7:
.loc 1 54 7
ld.u64 %r24,[%frame];
.loc 1 54 11
mov.u32 %r46,0;
st.u8 [%r24],%r46;
bra $L1;
$L4:
.loc 1 46 22
cvt.u32.u64 %r48,%r31;
st.u32 [%frame+12],%r48;
.loc 1 46 15
st.u32 [%frame+32],%r48;
.loc 1 47 11
mov.u16 %r50,-1;
st.u16 [%frame+18],%r50;
.loc 1 49 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r56,[%value_in];
}
mov.u32 %r28,%r56;
.loc 1 51 6
setp.lt.s32 %r57,%r28,-1;
@ ! %r57 bra $L1;
bra $L6;
$L5:
.loc 1 52 17
mov.u32 %r58,139;
st.u32 [%r29],%r58;
bra $L7;
$L6:
mov.u32 %r59,139;
st.u32 [%r29],%r59;
$L1:
.loc 1 56 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: sniprintf
.visible .func (.param .u32 %value_out) sniprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .u16 %r35;
.reg .pred %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u32 %r48;
.reg .u16 %r50;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .u32 %r59;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
mov.u64 %r32,%ar2;
.loc 1 68 18
ld.global.u64 %r26,[_impure_ptr];
.loc 1 70 6
setp.le.u64 %r33,%r31,2147483647;
@ %r33 bra $L9;
.loc 1 72 19
mov.u32 %r34,139;
st.u32 [%r26],%r34;
.loc 1 73 14
mov.u32 %r29,-1;
bra $L8;
$L9:
.loc 1 75 12
mov.u16 %r35,520;
st.u16 [%frame+16],%r35;
.loc 1 76 22
st.u64 [%frame],%r30;
.loc 1 76 15
st.u64 [%frame+24],%r30;
.loc 1 77 22
setp.eq.u64 %r36,%r31,0;
@ %r36 bra $L11;
.loc 1 77 41
cvt.u32.u64 %r37,%r31;
add.u32 %r27,%r37,-1;
.loc 1 77 22
st.u32 [%frame+12],%r27;
.loc 1 77 15
st.u32 [%frame+32],%r27;
.loc 1 78 11
mov.u16 %r38,-1;
st.u16 [%frame+18],%r38;
.loc 1 80 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r44,[%value_in];
}
mov.u32 %r29,%r44;
.loc 1 82 6
setp.lt.s32 %r45,%r29,-1;
@ %r45 bra $L12;
$L14:
.loc 1 85 7
ld.u64 %r24,[%frame];
.loc 1 85 11
mov.u32 %r46,0;
st.u8 [%r24],%r46;
bra $L8;
$L11:
.loc 1 77 22
cvt.u32.u64 %r48,%r31;
st.u32 [%frame+12],%r48;
.loc 1 77 15
st.u32 [%frame+32],%r48;
.loc 1 78 11
mov.u16 %r50,-1;
st.u16 [%frame+18],%r50;
.loc 1 80 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r56,[%value_in];
}
mov.u32 %r29,%r56;
.loc 1 82 6
setp.lt.s32 %r57,%r29,-1;
@ ! %r57 bra $L8;
bra $L13;
$L12:
.loc 1 83 17
mov.u32 %r58,139;
st.u32 [%r26],%r58;
bra $L14;
$L13:
mov.u32 %r59,139;
st.u32 [%r26],%r59;
$L8:
.loc 1 87 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}

/1198           1612277262  0     0     100666  6670      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _snprintf_r
.visible .func (.param .u32 %value_out) _snprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdio/snprintf.c"
// BEGIN GLOBAL FUNCTION DECL: snprintf
.visible .func (.param .u32 %value_out) snprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfprintf_r
.extern .func (.param .u32 %value_out) _svfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _snprintf_r
.visible .func (.param .u32 %value_out) _snprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar4];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r26;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .u16 %r35;
.reg .pred %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u32 %r48;
.reg .u16 %r50;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .u32 %r59;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
mov.u64 %r32,%ar3;
.loc 1 38 6
setp.le.u64 %r33,%r31,2147483647;
@ %r33 bra $L2;
.loc 1 40 19
mov.u32 %r34,139;
st.u32 [%r29],%r34;
.loc 1 41 14
mov.u32 %r28,-1;
bra $L1;
$L2:
.loc 1 43 12
mov.u16 %r35,520;
st.u16 [%frame+16],%r35;
.loc 1 44 22
st.u64 [%frame],%r30;
.loc 1 44 15
st.u64 [%frame+24],%r30;
.loc 1 45 22
setp.eq.u64 %r36,%r31,0;
@ %r36 bra $L4;
.loc 1 45 41
cvt.u32.u64 %r37,%r31;
add.u32 %r26,%r37,-1;
.loc 1 45 22
st.u32 [%frame+12],%r26;
.loc 1 45 15
st.u32 [%frame+32],%r26;
.loc 1 46 11
mov.u16 %r38,-1;
st.u16 [%frame+18],%r38;
.loc 1 48 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r44,[%value_in];
}
mov.u32 %r28,%r44;
.loc 1 50 6
setp.lt.s32 %r45,%r28,-1;
@ %r45 bra $L5;
$L7:
.loc 1 53 7
ld.u64 %r24,[%frame];
.loc 1 53 11
mov.u32 %r46,0;
st.u8 [%r24],%r46;
bra $L1;
$L4:
.loc 1 45 22
cvt.u32.u64 %r48,%r31;
st.u32 [%frame+12],%r48;
.loc 1 45 15
st.u32 [%frame+32],%r48;
.loc 1 46 11
mov.u16 %r50,-1;
st.u16 [%frame+18],%r50;
.loc 1 48 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r56,[%value_in];
}
mov.u32 %r28,%r56;
.loc 1 50 6
setp.lt.s32 %r57,%r28,-1;
@ ! %r57 bra $L1;
bra $L6;
$L5:
.loc 1 51 17
mov.u32 %r58,139;
st.u32 [%r29],%r58;
bra $L7;
$L6:
mov.u32 %r59,139;
st.u32 [%r29],%r59;
$L1:
.loc 1 55 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: snprintf
.visible .func (.param .u32 %value_out) snprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .u16 %r35;
.reg .pred %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u32 %r48;
.reg .u16 %r50;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u32 %r58;
.reg .u32 %r59;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
mov.u64 %r32,%ar2;
.loc 1 73 18
ld.global.u64 %r26,[_impure_ptr];
.loc 1 75 6
setp.le.u64 %r33,%r31,2147483647;
@ %r33 bra $L9;
.loc 1 77 19
mov.u32 %r34,139;
st.u32 [%r26],%r34;
.loc 1 78 14
mov.u32 %r29,-1;
bra $L8;
$L9:
.loc 1 80 12
mov.u16 %r35,520;
st.u16 [%frame+16],%r35;
.loc 1 81 22
st.u64 [%frame],%r30;
.loc 1 81 15
st.u64 [%frame+24],%r30;
.loc 1 82 22
setp.eq.u64 %r36,%r31,0;
@ %r36 bra $L11;
.loc 1 82 41
cvt.u32.u64 %r37,%r31;
add.u32 %r27,%r37,-1;
.loc 1 82 22
st.u32 [%frame+12],%r27;
.loc 1 82 15
st.u32 [%frame+32],%r27;
.loc 1 83 11
mov.u16 %r38,-1;
st.u16 [%frame+18],%r38;
.loc 1 85 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r44,[%value_in];
}
mov.u32 %r29,%r44;
.loc 1 87 6
setp.lt.s32 %r45,%r29,-1;
@ %r45 bra $L12;
$L14:
.loc 1 90 7
ld.u64 %r24,[%frame];
.loc 1 90 11
mov.u32 %r46,0;
st.u8 [%r24],%r46;
bra $L8;
$L11:
.loc 1 82 22
cvt.u32.u64 %r48,%r31;
st.u32 [%frame+12],%r48;
.loc 1 82 15
st.u32 [%frame+32],%r48;
.loc 1 83 11
mov.u16 %r50,-1;
st.u16 [%frame+18],%r50;
.loc 1 85 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r32;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r56,[%value_in];
}
mov.u32 %r29,%r56;
.loc 1 87 6
setp.lt.s32 %r57,%r29,-1;
@ ! %r57 bra $L8;
bra $L13;
$L12:
.loc 1 88 17
mov.u32 %r58,139;
st.u32 [%r26],%r58;
bra $L14;
$L13:
mov.u32 %r59,139;
st.u32 [%r26],%r59;
$L8:
.loc 1 92 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-sprintf.o/1612277262  0     0     100666  3629      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _sprintf_r
.visible .func (.param .u32 %value_out) _sprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/sprintf.c"
// BEGIN GLOBAL FUNCTION DECL: sprintf
.visible .func (.param .u32 %value_out) sprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfprintf_r
.extern .func (.param .u32 %value_out) _svfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _sprintf_r
.visible .func (.param .u32 %value_out) _sprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r36;
.reg .u32 %r37;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 587 22
st.u64 [%frame],%r26;
.loc 1 587 15
st.u64 [%frame+24],%r26;
.loc 1 588 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 588 22
st.u32 [%frame+12],%r28;
.loc 1 586 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 591 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 593 5
ld.u64 %r22,[%frame];
.loc 1 593 9
mov.u32 %r37,0;
st.u8 [%r22],%r37;
.loc 1 595 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: sprintf
.visible .func (.param .u32 %value_out) sprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u64 %r36;
.reg .u32 %r37;
.reg .u32 %r38;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 614 22
st.u64 [%frame],%r26;
.loc 1 614 15
st.u64 [%frame+24],%r26;
.loc 1 615 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 615 22
st.u32 [%frame+12],%r28;
.loc 1 613 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 618 9
ld.global.u64 %r36,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r37,[%value_in];
}
.loc 1 620 5
ld.u64 %r23,[%frame];
.loc 1 620 9
mov.u32 %r38,0;
st.u8 [%r23],%r38;
.loc 1 622 1
mov.u32 %value,%r37;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-srand48.o/1612277262  0     0     100666  1865      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _srand48_r
.visible .func _srand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/srand48.c"
// BEGIN GLOBAL FUNCTION DECL: srand48
.visible .func srand48 (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DEF: _srand48_r
.visible .func _srand48_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u16 %r28;
.reg .u64 %r29;
.reg .u16 %r30;
.reg .u32 %r31;
.reg .u16 %r32;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
.loc 1 21 20
mov.u16 %r28,13070;
st.u16 [%r26+240],%r28;
.loc 1 22 22
st.u16 [%r26+242],%r27;
.loc 1 23 60
shr.u64 %r29,%r27,16;
.loc 1 23 22
st.u16 [%r26+244],%r29;
.loc 1 24 20
mov.u16 %r30,-6547;
st.u16 [%r26+246],%r30;
.loc 1 25 20
mov.u32 %r31,384748;
st.u32 [%r26+248],%r31;
.loc 1 27 16
mov.u16 %r32,11;
st.u16 [%r26+252],%r32;
.loc 1 28 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: srand48
.visible .func srand48 (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u16 %r28;
.reg .u64 %r29;
.reg .u16 %r30;
.reg .u32 %r31;
.reg .u16 %r32;
mov.u64 %r27,%ar0;
.loc 1 34 3
ld.global.u64 %r22,[_impure_ptr];
.loc 1 21 20
mov.u16 %r28,13070;
st.u16 [%r22+240],%r28;
.loc 1 22 22
st.u16 [%r22+242],%r27;
.loc 1 23 60
shr.u64 %r29,%r27,16;
.loc 1 23 22
st.u16 [%r22+244],%r29;
.loc 1 24 20
mov.u16 %r30,-6547;
st.u16 [%r22+246],%r30;
.loc 1 25 20
mov.u32 %r31,384748;
st.u32 [%r22+248],%r31;
.loc 1 27 16
mov.u16 %r32,11;
st.u16 [%r22+252],%r32;
.loc 1 35 1
ret;
}

lib_a-sscanf.o/ 1612277262  0     0     100666  4587      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: sscanf
.visible .func (.param .u32 %value_out) sscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/sscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _sscanf_r
.visible .func (.param .u32 %value_out) _sscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __seofread
.extern .func (.param .u32 %value_out) __seofread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ssvfscanf_r
.extern .func (.param .u32 %value_out) __ssvfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: sscanf
.visible .func (.param .u32 %value_out) sscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u64 %r41;
.reg .u32 %r42;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 431 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 432 22
st.u64 [%frame],%r27;
.loc 1 432 15
st.u64 [%frame+24],%r27;
.loc 1 433 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 433 22
cvt.u32.u64 %r23,%r31;
st.u32 [%frame+8],%r23;
.loc 1 433 15
st.u32 [%frame+32],%r23;
.loc 1 434 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 435 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 436 15
st.u64 [%frame+120],%r33;
.loc 1 437 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 439 9
ld.global.u64 %r41,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__ssvfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r42,[%value_in];
}
.loc 1 442 1
mov.u32 %value,%r42;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _sscanf_r
.visible .func (.param .u32 %value_out) _sscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %args;
ld.param.u64 %args,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u32 %r41;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 461 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 462 22
st.u64 [%frame],%r27;
.loc 1 462 15
st.u64 [%frame+24],%r27;
.loc 1 463 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 463 22
cvt.u32.u64 %r23,%r31;
st.u32 [%frame+8],%r23;
.loc 1 463 15
st.u32 [%frame+32],%r23;
.loc 1 464 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 465 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 466 15
st.u64 [%frame+120],%r33;
.loc 1 467 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 469 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%args;
call (%value_in),__ssvfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r41,[%value_in];
}
.loc 1 472 1
mov.u32 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-statr.o/  1612277262  0     0     100666  1572      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _stat_r
.visible .func (.param .u32 %value_out) _stat_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/reent/statr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: stat
.extern .func (.param .u32 %value_out) stat (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _stat_r
.visible .func (.param .u32 %value_out) _stat_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 54 9
mov.u32 %r27,0;
st.global.u32 [errno],%r27;
.loc 1 55 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
call (%value_in),stat,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 55 6
setp.ne.u32 %r31,%r30,-1;
@ %r31 bra $L1;
.loc 1 55 50
ld.global.u32 %r22,[errno];
.loc 1 55 41
setp.eq.u32 %r32,%r22,0;
@ %r32 bra $L1;
.loc 1 56 17
st.u32 [%r24],%r22;
$L1:
.loc 1 58 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-stdio.o/  1612277262  0     0     100666  7629      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __sread
.visible .func (.param .u32 %value_out) __sread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/stdio.c"
// BEGIN GLOBAL FUNCTION DECL: __seofread
.visible .func (.param .u32 %value_out) __seofread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __swrite
.visible .func (.param .u32 %value_out) __swrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sseek
.visible .func (.param .u64 %value_out) __sseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sclose
.visible .func (.param .u32 %value_out) __sclose (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _read_r
.extern .func (.param .u64 %value_out) _read_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _lseek_r
.extern .func (.param .u64 %value_out) _lseek_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _write_r
.extern .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _close_r
.extern .func (.param .u32 %value_out) _close_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __sread
.visible .func (.param .u32 %value_out) __sread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .pred %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u16 %r45;
.reg .u16 %r46;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
mov.u32 %r34,%ar3;
.loc 1 47 9
cvt.s64.s32 %r39,%r34;
ld.s16 %r40,[%r32+18];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r40;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r33;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r39;
call (%value_in),_read_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r41,[%value_in];
}
.loc 1 56 6
setp.lt.s64 %r42,%r41,0;
@ %r42 bra $L2;
.loc 1 57 17
ld.u64 %r44,[%r32+144];
add.u64 %r43,%r44,%r41;
st.u64 [%r32+144],%r43;
bra $L3;
$L2:
.loc 1 59 16
ld.u16 %r46,[%r32+16];
and.b16 %r45,%r46,-4097;
st.u16 [%r32+16],%r45;
$L3:
.loc 1 61 1
cvt.u32.u64 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __seofread
.visible .func (.param .u32 %value_out) __seofread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.loc 1 70 10
mov.u32 %value,0;
.loc 1 71 1
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __swrite
.visible .func (.param .u32 %value_out) __swrite (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u32 %r22;
.reg .u32 %r28;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u16 %r35;
.reg .u16 %r36;
.reg .pred %r37;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u64 %r49;
.reg .u64 %r50;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
mov.u32 %r34,%ar3;
.loc 1 85 9
ld.s16 %r22,[%r32+16];
.loc 1 86 5
ld.s16 %r28,[%r32+18];
.loc 1 85 6
cvt.u16.u32 %r36,%r22;
and.b16 %r35,%r36,256;
setp.eq.u16 %r37,%r35,0;
@ %r37 bra $L6;
.loc 1 86 5
mov.u32 %r41,2;
mov.u64 %r40,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r40;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r41;
call (%value_in),_lseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r42,[%value_in];
}
.loc 1 87 14
ld.s16 %r22,[%r32+16];
.loc 1 94 7
ld.s16 %r28,[%r32+18];
$L6:
.loc 1 87 14
cvt.u16.u32 %r44,%r22;
and.b16 %r43,%r44,-4097;
st.u16 [%r32+16],%r43;
.loc 1 94 7
cvt.s64.s32 %r49,%r34;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r33;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r49;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r50,[%value_in];
}
.loc 1 102 1
cvt.u32.u64 %value,%r50;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sseek
.visible .func (.param .u64 %value_out) __sseek (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u32 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
mov.u32 %r32,%ar3;
.loc 1 113 9
ld.s16 %r37,[%r30+18];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r37;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r32;
call (%value_in),_lseek_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r38,[%value_in];
}
.loc 1 114 6
setp.ne.u64 %r39,%r38,-1;
@ %r39 bra $L11;
.loc 1 115 16
ld.u16 %r41,[%r30+16];
and.b16 %r40,%r41,-4097;
st.u16 [%r30+16],%r40;
bra $L10;
$L11:
.loc 1 118 18
ld.u16 %r43,[%r30+16];
or.b16 %r42,%r43,4096;
st.u16 [%r30+16],%r42;
.loc 1 119 19
st.u64 [%r30+144],%r38;
$L10:
.loc 1 122 1
mov.u64 %value,%r38;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sclose
.visible .func (.param .u32 %value_out) __sclose (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r29;
.reg .u32 %r30;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 130 10
ld.s16 %r29,[%r26+18];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r29;
call (%value_in),_close_r,(%out_arg1,%out_arg2);
ld.param.u32 %r30,[%value_in];
}
.loc 1 131 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}

/1216           1612277262  0     0     100666  2056      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strcasecmp
.visible .func (.param .u32 %value_out) strcasecmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strcasecmp.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: strcasecmp
.visible .func (.param .u32 %value_out) strcasecmp (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u64 %r46;
.reg .u16 %r48;
.reg .u16 %r49;
.reg .u16 %r50;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .pred %r53;
.reg .u64 %r54;
.reg .u32 %r55;
.reg .u64 %r57;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .u16 %r61;
.reg .u32 %r62;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u64 %r68;
.reg .u16 %r69;
mov.u64 %r39,%ar0;
mov.u64 %r38,%ar1;
cvta.const.u64 %r68,_ctype_+1;
$L5:
.loc 1 45 22
ld.s8 %r30,[%r39];
cvt.u32.u32 %r44,%r30;
cvt.s64.s8 %r43,%r44;
add.u64 %r46,%r68,%r43;
ld.u8 %r69,[%r46];
mov.u16 %r49,%r69;
and.b16 %r48,%r49,3;
cvt.u32.u16 %r52,%r48;
cvt.s32.s8 %r51,%r52;
cvt.u16.u32 %r50,%r51;
setp.ne.u16 %r53,%r50,1;
@ %r53 bra $L2;
add.u32 %r30,%r30,32;
$L2:
.loc 1 46 22
ld.s8 %r31,[%r38];
cvt.u32.u32 %r55,%r31;
cvt.s64.s8 %r54,%r55;
add.u64 %r57,%r68,%r54;
ld.u8 %r69,[%r57];
mov.u16 %r60,%r69;
and.b16 %r59,%r60,3;
cvt.u32.u16 %r63,%r59;
cvt.s32.s8 %r62,%r63;
cvt.u16.u32 %r61,%r62;
setp.ne.u16 %r64,%r61,1;
@ %r64 bra $L3;
add.u32 %r31,%r31,32;
$L3:
.loc 1 47 15
sub.u32 %r40,%r30,%r31;
.loc 1 47 10
setp.ne.u32 %r65,%r30,%r31;
@ %r65 bra $L1;
.loc 1 47 32
add.u64 %r39,%r39,1;
add.u64 %r38,%r38,1;
setp.ne.u32 %r66,%r31,0;
@ %r66 bra $L5;
$L1:
.loc 1 51 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-strcat.o/ 1612277262  0     0     100666  2346      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strcat
.visible .func (.param .u64 %value_out) strcat (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strcat.c"
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: strcat
.visible .func (.param .u64 %value_out) strcat (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .pred %r46;
.reg .u16 %r47;
.reg .u32 %r48;
.reg .pred %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .pred %r54;
.reg .u16 %r55;
.reg .u32 %r56;
.reg .pred %r57;
.reg .u64 %r60;
mov.u64 %r38,%ar0;
mov.u64 %r39,%ar1;
.loc 1 74 7
and.b64 %r40,%r38,7;
.loc 1 74 6
setp.ne.u64 %r41,%r40,0;
@ %r41 bra $L6;
.loc 1 77 15
ld.u64 %r32,[%r38];
add.u64 %r42,%r32,-72340172838076673;
not.b64 %r43,%r32;
and.b64 %r44,%r42,%r43;
and.b64 %r45,%r44,-9187201950435737472;
.loc 1 77 13
setp.eq.u64 %r46,%r45,0;
@ %r46 bra $L7;
mov.u64 %r30,%r38;
bra $L2;
$L6:
mov.u64 %r30,%r38;
$L2:
.loc 1 83 9
ld.s8 %r48,[%r30];
cvt.u16.u32 %r47,%r48;
setp.ne.u16 %r49,%r47,0;
@ %r49 bra $L4;
bra $L5;
$L7:
.loc 1 77 13
mov.u64 %r30,%r38;
$L3:
.loc 1 78 12
add.u64 %r30,%r30,8;
.loc 1 77 15
ld.u64 %r24,[%r30];
add.u64 %r50,%r24,-72340172838076673;
not.b64 %r51,%r24;
and.b64 %r52,%r50,%r51;
and.b64 %r53,%r52,-9187201950435737472;
.loc 1 77 13
setp.eq.u64 %r54,%r53,0;
@ %r54 bra $L3;
bra $L2;
$L4:
.loc 1 84 7
add.u64 %r30,%r30,1;
.loc 1 83 9
ld.s8 %r56,[%r30];
cvt.u16.u32 %r55,%r56;
setp.ne.u16 %r57,%r55,0;
@ %r57 bra $L4;
$L5:
.loc 1 93 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r60,[%value_in];
}
.loc 1 97 1
mov.u64 %value,%r38;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strchr.o/ 1612277262  0     0     100666  5250      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strchr
.visible .func (.param .u64 %value_out) strchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strchr.c"
// BEGIN GLOBAL FUNCTION DEF: strchr
.visible .func (.param .u64 %value_out) strchr (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r40;
.reg .u32 %r45;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r54;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .u64 %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .pred %r77;
.reg .u16 %r78;
.reg .pred %r79;
.reg .u64 %r80;
.reg .pred %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .u64 %r84;
.reg .u64 %r85;
.reg .pred %r86;
.reg .u64 %r87;
.reg .u64 %r88;
.reg .u64 %r89;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u16 %r92;
.reg .pred %r93;
.reg .u16 %r94;
.reg .pred %r95;
.reg .pred %r96;
.reg .u16 %r97;
.reg .pred %r99;
.reg .u64 %r100;
.reg .pred %r101;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r106;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u64 %r110;
.reg .pred %r111;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .u64 %r117;
.reg .u64 %r118;
.reg .u64 %r119;
.reg .pred %r120;
.reg .pred %r121;
.reg .pred %r122;
.reg .u16 %r123;
.reg .u16 %r124;
.reg .pred %r125;
.reg .u16 %r127;
mov.u64 %r72,%ar0;
mov.u32 %r73,%ar1;
.loc 1 59 17
cvt.u32.u32 %r74,%r73;
cvt.u32.u8 %r48,%r74;
.loc 1 86 10
and.b64 %r70,%r72,7;
.loc 1 66 6
setp.eq.u32 %r75,%r48,0;
@ %r75 bra $L2;
.loc 1 86 9
setp.ne.u64 %r76,%r70,0;
@ ! %r76 bra $L4;
.loc 1 90 10
cvt.u16.u32 %r127,%r48;
bra $L3;
$L2:
.loc 1 68 13
setp.eq.u64 %r77,%r70,0;
@ %r77 bra $L5;
$L7:
.loc 1 70 14
ld.u8 %r78,[%r72];
setp.eq.u16 %r79,%r78,0;
@ %r79 bra $L15;
.loc 1 72 12
add.u64 %r72,%r72,1;
.loc 1 68 14
and.b64 %r80,%r72,7;
.loc 1 68 13
setp.ne.u64 %r81,%r80,0;
@ %r81 bra $L7;
$L5:
.loc 1 76 15
ld.u64 %r32,[%r72];
add.u64 %r82,%r32,-72340172838076673;
not.b64 %r83,%r32;
and.b64 %r84,%r82,%r83;
and.b64 %r85,%r84,-9187201950435737472;
.loc 1 76 13
setp.ne.u64 %r86,%r85,0;
@ %r86 bra $L8;
$L9:
.loc 1 77 21
add.u64 %r72,%r72,8;
.loc 1 76 15
ld.u64 %r24,[%r72];
add.u64 %r87,%r24,-72340172838076673;
not.b64 %r88,%r24;
and.b64 %r89,%r87,%r88;
and.b64 %r90,%r89,-9187201950435737472;
.loc 1 76 13
setp.eq.u64 %r91,%r90,0;
@ %r91 bra $L9;
$L8:
.loc 1 80 13
ld.u8 %r92,[%r72];
setp.eq.u16 %r93,%r92,0;
@ %r93 bra $L16;
$L10:
.loc 1 81 10
add.u64 %r72,%r72,1;
.loc 1 80 13
ld.u8 %r94,[%r72];
setp.ne.u16 %r95,%r94,0;
@ %r95 bra $L10;
mov.u64 %r71,%r72;
bra $L1;
$L3:
.loc 1 88 12
ld.u8 %r31,[%r72];
.loc 1 88 10
setp.eq.u32 %r96,%r31,0;
@ %r96 bra $L17;
.loc 1 90 10
cvt.u16.u32 %r97,%r31;
setp.eq.u16 %r99,%r97,%r127;
@ %r99 bra $L18;
.loc 1 92 8
add.u64 %r72,%r72,1;
.loc 1 86 10
and.b64 %r100,%r72,7;
.loc 1 86 9
setp.ne.u64 %r101,%r100,0;
@ %r101 bra $L3;
$L4:
.loc 1 95 8
cvt.u64.u8 %r49,%r74;
.loc 1 97 18
shl.b64 %r66,%r49,8;
.loc 1 97 10
or.b64 %r65,%r49,%r66;
.loc 1 97 18
shl.b64 %r64,%r65,16;
.loc 1 97 10
or.b64 %r63,%r64,%r65;
.loc 1 97 18
shl.b64 %r34,%r63,32;
.loc 1 97 10
or.b64 %r50,%r34,%r63;
.loc 1 100 11
ld.u64 %r51,[%r72];
.loc 1 100 42
xor.b64 %r54,%r50,%r51;
add.u64 %r103,%r54,-72340172838076673;
not.b64 %r104,%r54;
and.b64 %r105,%r103,%r104;
.loc 1 100 11
add.u64 %r106,%r51,-72340172838076673;
not.b64 %r107,%r51;
and.b64 %r108,%r106,%r107;
.loc 1 100 38
or.b64 %r109,%r105,%r108;
and.b64 %r110,%r109,-9187201950435737472;
setp.ne.u64 %r111,%r110,0;
@ %r111 bra $L11;
$L12:
.loc 1 101 17
add.u64 %r72,%r72,8;
.loc 1 100 11
ld.u64 %r35,[%r72];
.loc 1 100 42
xor.b64 %r40,%r35,%r50;
.loc 1 100 11
add.u64 %r112,%r35,-72340172838076673;
not.b64 %r113,%r35;
and.b64 %r114,%r112,%r113;
.loc 1 100 42
add.u64 %r115,%r40,-72340172838076673;
not.b64 %r116,%r40;
and.b64 %r117,%r115,%r116;
.loc 1 100 38
or.b64 %r118,%r114,%r117;
and.b64 %r119,%r118,-9187201950435737472;
setp.eq.u64 %r120,%r119,0;
@ %r120 bra $L12;
$L11:
.loc 1 111 10
ld.u8 %r45,[%r72];
.loc 1 111 9
setp.ne.u32 %r121,%r45,0;
@ ! %r121 bra $L32;
.loc 1 111 13
cvt.u16.u32 %r123,%r48;
bra $L13;
$L32:
.loc 1 89 16
mov.u64 %r71,0;
bra $L1;
$L14:
.loc 1 112 6
add.u64 %r72,%r72,1;
.loc 1 111 10
ld.u8 %r45,[%r72];
.loc 1 111 9
setp.eq.u32 %r122,%r45,0;
@ %r122 bra $L19;
$L13:
.loc 1 111 13
cvt.u16.u32 %r124,%r45;
setp.ne.u16 %r125,%r123,%r124;
@ %r125 bra $L14;
mov.u64 %r71,%r72;
bra $L1;
$L15:
mov.u64 %r71,%r72;
bra $L1;
$L16:
.loc 1 80 13
mov.u64 %r71,%r72;
bra $L1;
$L17:
.loc 1 89 16
mov.u64 %r71,0;
bra $L1;
$L18:
mov.u64 %r71,%r72;
bra $L1;
$L19:
mov.u64 %r71,0;
$L1:
.loc 1 116 1
mov.u64 %value,%r71;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strcmp.o/ 1612277262  0     0     100666  2367      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strcmp
.visible .func (.param .u32 %value_out) strcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strcmp.c"
// BEGIN GLOBAL FUNCTION DEF: strcmp
.visible .func (.param .u32 %value_out) strcmp (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r30;
.reg .u32 %r32;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .u64 %r45;
.reg .pred %r46;
.reg .pred %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .pred %r52;
.reg .u64 %r53;
.reg .pred %r54;
.reg .pred %r55;
.reg .u16 %r56;
.reg .u32 %r57;
.reg .u16 %r58;
.reg .pred %r59;
.reg .u32 %r60;
.reg .u32 %r61;
mov.u64 %r40,%ar0;
mov.u64 %r41,%ar1;
.loc 1 71 8
or.b64 %r42,%r40,%r41;
and.b64 %r43,%r42,7;
.loc 1 71 6
setp.ne.u64 %r44,%r43,0;
@ %r44 bra $L2;
.loc 1 76 14
ld.u64 %r30,[%r40];
.loc 1 76 13
ld.u64 %r45,[%r41];
setp.eq.u64 %r46,%r30,%r45;
@ %r46 bra $L3;
$L2:
.loc 1 92 10
ld.s8 %r32,[%r40];
.loc 1 92 9
setp.ne.u32 %r47,%r32,0;
@ %r47 bra $L4;
mov.u32 %r38,%r32;
bra $L5;
$L3:
.loc 1 80 15
add.u64 %r48,%r30,-72340172838076673;
not.b64 %r49,%r30;
and.b64 %r50,%r48,%r49;
and.b64 %r51,%r50,-9187201950435737472;
.loc 1 80 14
setp.ne.u64 %r52,%r51,0;
@ %r52 bra $L8;
.loc 1 83 13
add.u64 %r40,%r40,8;
.loc 1 84 13
add.u64 %r41,%r41,8;
.loc 1 76 14
ld.u64 %r30,[%r40];
.loc 1 76 13
ld.u64 %r53,[%r41];
setp.eq.u64 %r54,%r30,%r53;
@ %r54 bra $L3;
bra $L2;
$L7:
.loc 1 94 9
add.u64 %r40,%r40,1;
.loc 1 95 9
add.u64 %r41,%r41,1;
.loc 1 92 10
ld.s8 %r32,[%r40];
.loc 1 92 9
setp.eq.u32 %r55,%r32,0;
@ %r55 bra $L9;
$L4:
.loc 1 92 22
ld.s8 %r57,[%r41];
cvt.u16.u32 %r56,%r57;
cvt.u16.u32 %r58,%r32;
setp.eq.u16 %r59,%r56,%r58;
@ %r59 bra $L7;
.loc 1 97 11
cvt.u32.u32 %r60,%r32;
cvt.u32.u8 %r38,%r60;
bra $L5;
$L9:
mov.u32 %r38,%r32;
$L5:
.loc 1 97 37
ld.u8 %r61,[%r41];
.loc 1 97 34
sub.u32 %r39,%r38,%r61;
bra $L1;
$L8:
.loc 1 81 13
mov.u32 %r39,0;
$L1:
.loc 1 99 1
mov.u32 %value,%r39;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-strcoll.o/1612277262  0     0     100666  1054      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strcoll
.visible .func (.param .u32 %value_out) strcoll (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strcoll.c"
// BEGIN GLOBAL FUNCTION DECL: strcmp
.extern .func (.param .u32 %value_out) strcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: strcoll
.visible .func (.param .u32 %value_out) strcoll (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u32 %r27;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 43 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r27,[%value_in];
}
.loc 1 44 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-strcpy.o/ 1612277262  0     0     100666  2091      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strcpy
.visible .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strcpy.c"
// BEGIN GLOBAL FUNCTION DEF: strcpy
.visible .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r43;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .pred %r60;
.reg .u32 %r61;
.reg .pred %r62;
mov.u64 %r46,%ar0;
mov.u64 %r47,%ar1;
.loc 1 72 8
mov.u64 %r43,%r46;
or.b64 %r48,%r47,%r46;
and.b64 %r49,%r48,7;
.loc 1 72 6
setp.eq.u64 %r50,%r49,0;
@ %r50 bra $L2;
.loc 1 66 9
mov.u64 %r34,%r46;
bra $L4;
$L6:
mov.u64 %r34,%r46;
$L4:
mov.u64 %r32,%r34;
mov.u64 %r35,%r47;
bra $L3;
$L2:
.loc 1 79 15
ld.u64 %r25,[%r47];
add.u64 %r51,%r25,-72340172838076673;
not.b64 %r52,%r25;
and.b64 %r53,%r51,%r52;
and.b64 %r54,%r53,-9187201950435737472;
.loc 1 79 13
setp.ne.u64 %r55,%r54,0;
@ %r55 bra $L6;
$L5:
.loc 1 81 40
add.u64 %r47,%r47,8;
mov.u64 %r33,%r43;
add.u64 %r43,%r43,8;
mov.u64 %r34,%r43;
.loc 1 81 26
st.u64 [%r33],%r25;
.loc 1 79 15
ld.u64 %r25,[%r47];
add.u64 %r56,%r25,-72340172838076673;
not.b64 %r57,%r25;
and.b64 %r58,%r56,%r57;
and.b64 %r59,%r58,-9187201950435737472;
.loc 1 79 13
setp.eq.u64 %r60,%r59,0;
@ %r60 bra $L5;
bra $L4;
$L3:
.loc 1 88 20
ld.s8 %r31,[%r35];
.loc 1 88 18
cvt.u32.u32 %r61,%r31;
st.u8 [%r32],%r61;
.loc 1 88 9
add.u64 %r32,%r32,1;
add.u64 %r35,%r35,1;
setp.ne.u32 %r62,%r31,0;
@ %r62 bra $L3;
.loc 1 92 1
mov.u64 %value,%r46;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strcspn.o/1612277262  0     0     100666  1675      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strcspn
.visible .func (.param .u64 %value_out) strcspn (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strcspn.c"
// BEGIN GLOBAL FUNCTION DEF: strcspn
.visible .func (.param .u64 %value_out) strcspn (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .pred %r39;
.reg .pred %r40;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 35 10
ld.s8 %r25,[%r30];
.loc 1 35 9
setp.ne.u32 %r32,%r25,0;
@ %r32 bra $L2;
mov.u64 %r29,0;
bra $L1;
$L8:
.loc 1 37 7
mov.u64 %r26,%r31;
mov.u32 %r24,%r23;
.loc 1 39 7
cvt.u16.u32 %r34,%r25;
$L5:
cvt.u16.u32 %r33,%r24;
setp.ne.u16 %r35,%r33,%r34;
@ %r35 bra $L4;
.loc 1 47 13
sub.u64 %r29,%r27,%r30;
bra $L1;
$L4:
.loc 1 37 25
add.u64 %r26,%r26,1;
.loc 1 37 20
ld.s8 %r24,[%r26];
.loc 1 37 7
setp.ne.u32 %r36,%r24,0;
@ %r36 bra $L5;
bra $L6;
$L2:
.loc 1 37 20
ld.s8 %r23,[%r31];
mov.u64 %r27,%r30;
setp.ne.u32 %r40,%r23,0;
$L7:
.loc 1 37 7
@ %r40 bra $L8;
$L6:
.loc 1 44 9
add.u64 %r27,%r27,1;
.loc 1 35 10
ld.s8 %r25,[%r27];
.loc 1 35 9
setp.ne.u32 %r39,%r25,0;
@ %r39 bra $L7;
.loc 1 47 13
sub.u64 %r29,%r27,%r30;
$L1:
.loc 1 48 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strdup.o/ 1612277262  0     0     100666  1070      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strdup
.visible .func (.param .u64 %value_out) strdup (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/strdup.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _strdup_r
.extern .func (.param .u64 %value_out) _strdup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: strdup
.visible .func (.param .u64 %value_out) strdup (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r24;
.reg .u64 %r27;
.reg .u64 %r28;
mov.u64 %r24,%ar0;
.loc 1 10 10
ld.global.u64 %r27,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),_strdup_r,(%out_arg1,%out_arg2);
ld.param.u64 %r28,[%value_in];
}
.loc 1 11 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}
/1236           1612277262  0     0     100666  1968      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _strdup_r
.visible .func (.param .u64 %value_out) _strdup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strdup_r.c"
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _strdup_r
.visible .func (.param .u64 %value_out) _strdup_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r28;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u64 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 9 16
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r28,[%value_in];
}
.loc 1 9 10
add.u64 %r23,%r28,1;
.loc 1 10 16
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r31,[%value_in];
}
.loc 1 11 6
setp.eq.u64 %r32,%r31,0;
@ %r32 bra $L1;
.loc 1 13 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r23;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r36,[%value_in];
}
$L1:
.loc 1 16 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
/1254           1612277262  0     0     100666  27381     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _strerror_r
.visible .func (.param .u64 %value_out) _strerror_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/string/strerror.c"
// BEGIN GLOBAL FUNCTION DECL: strerror
.visible .func (.param .u64 %value_out) strerror (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strerror_l
.visible .func (.param .u64 %value_out) strerror_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _user_strerror
.extern .func (.param .u64 %value_out) _user_strerror (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN VAR DEF: $LC80
.const .align 1 .u8 $LC80[1] =
{0 };
// BEGIN VAR DEF: $LC10
.const .align 1 .u8 $LC10[18] =
{65,114,103,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0 };
// BEGIN VAR DEF: $LC11
.const .align 1 .u8 $LC11[15] =
{73,115,32,97,32,100,105,114,101,99,116,111,114,121,0 };
// BEGIN VAR DEF: $LC12
.const .align 1 .u8 $LC12[25] =
{83,111,99,107,101,116,32,97,108,114,101,97,100,121,32,99,111,110,110,101,99,116,101,100,0 };
// BEGIN VAR DEF: $LC13
.const .align 1 .u8 $LC13[18] =
{80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0 };
// BEGIN VAR DEF: $LC14
.const .align 1 .u8 $LC14[18] =
{78,111,32,109,111,114,101,32,112,114,111,99,101,115,115,101,115,0 };
// BEGIN VAR DEF: $LC15
.const .align 1 .u8 $LC15[24] =
{68,101,118,105,99,101,32,111,114,32,114,101,115,111,117,114,99,101,32,98,117,115,121,0 };
// BEGIN VAR DEF: $LC16
.const .align 1 .u8 $LC16[17] =
{78,111,116,32,101,110,111,117,103,104,32,115,112,97,99,101,0 };
// BEGIN VAR DEF: $LC17
.const .align 1 .u8 $LC17[16] =
{66,97,100,32,102,105,108,101,32,110,117,109,98,101,114,0 };
// BEGIN VAR DEF: $LC18
.const .align 1 .u8 $LC18[15] =
{78,111,32,115,117,99,104,32,100,101,118,105,99,101,0 };
// BEGIN VAR DEF: $LC19
.const .align 1 .u8 $LC19[12] =
{70,105,108,101,32,101,120,105,115,116,115,0 };
// BEGIN VAR DEF: $LC20
.const .align 1 .u8 $LC20[12] =
{66,97,100,32,97,100,100,114,101,115,115,0 };
// BEGIN VAR DEF: $LC21
.const .align 1 .u8 $LC21[18] =
{67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0 };
// BEGIN VAR DEF: $LC22
.const .align 1 .u8 $LC22[31] =
{67,111,110,110,101,99,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0 };
// BEGIN VAR DEF: $LC23
.const .align 1 .u8 $LC23[22] =
{65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0 };
// BEGIN VAR DEF: $LC24
.const .align 1 .u8 $LC24[21] =
{83,116,114,101,97,109,32,105,111,99,116,108,32,116,105,109,101,111,117,116,0 };
// BEGIN VAR DEF: $LC25
.const .align 1 .u8 $LC25[32] =
{70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,118,97,108,117,101,32,116,111,111,32,108,97,114,103,101,0 };
// BEGIN VAR DEF: $LC26
.const .align 1 .u8 $LC26[13] =
{72,111,115,116,32,105,115,32,100,111,119,110,0 };
// BEGIN VAR DEF: $LC27
.const .align 1 .u8 $LC27[24] =
{83,111,99,107,101,116,32,105,115,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0 };
// BEGIN VAR DEF: $LC28
.const .align 1 .u8 $LC28[17] =
{73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0 };
// BEGIN VAR DEF: $LC29
.const .align 1 .u8 $LC29[15] =
{84,101,120,116,32,102,105,108,101,32,98,117,115,121,0 };
// BEGIN VAR DEF: $LC30
.const .align 1 .u8 $LC30[30] =
{84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0 };
// BEGIN VAR DEF: $LC31
.const .align 1 .u8 $LC31[15] =
{84,111,111,32,109,97,110,121,32,108,105,110,107,115,0 };
// BEGIN VAR DEF: $LC32
.const .align 1 .u8 $LC32[13] =
{73,108,108,101,103,97,108,32,115,101,101,107,0 };
// BEGIN VAR DEF: $LC33
.const .align 1 .u8 $LC33[21] =
{67,111,110,110,101,99,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0 };
// BEGIN VAR DEF: $LC34
.const .align 1 .u8 $LC34[15] =
{70,105,108,101,32,116,111,111,32,108,97,114,103,101,0 };
// BEGIN VAR DEF: $LC35
.const .align 1 .u8 $LC35[28] =
{83,111,99,107,101,116,32,105,115,32,97,108,114,101,97,100,121,32,99,111,110,110,101,99,116,101,100,0 };
// BEGIN VAR DEF: $LC36
.const .align 1 .u8 $LC36[23] =
{78,111,116,32,97,32,99,104,97,114,97,99,116,101,114,32,100,101,118,105,99,101,0 };
// BEGIN VAR DEF: $LC37
.const .align 1 .u8 $LC37[24] =
{78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0 };
// BEGIN VAR DEF: $LC38
.const .align 1 .u8 $LC38[16] =
{78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0 };
// BEGIN VAR DEF: $LC39
.const .align 1 .u8 $LC39[17] =
{82,101,115,117,108,116,32,116,111,111,32,108,97,114,103,101,0 };
// BEGIN VAR DEF: $LC40
.const .align 1 .u8 $LC40[12] =
{66,114,111,107,101,110,32,112,105,112,101,0 };
// BEGIN VAR DEF: $LC41
.const .align 1 .u8 $LC41[19] =
{73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0 };
// BEGIN VAR DEF: $LC42
.const .align 1 .u8 $LC42[47] =
{77,97,116,104,101,109,97,116,105,99,115,32,97,114,103,117,109,101,110,116,32,111,117,116,32,111,102,32,100,111,109,97,105,110,32,111,102,32,102,117,110,99,116,105,111,110,0 };
// BEGIN VAR DEF: $LC43
.const .align 1 .u8 $LC43[22] =
{82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0 };
// BEGIN VAR DEF: $LC44
.const .align 1 .u8 $LC44[17] =
{85,110,107,110,111,119,110,32,112,114,111,116,111,99,111,108,0 };
// BEGIN VAR DEF: $LC45
.const .align 1 .u8 $LC45[8] =
{78,111,32,100,97,116,97,0 };
// BEGIN VAR DEF: $LC46
.const .align 1 .u8 $LC46[8] =
{78,111,32,108,111,99,107,0 };
// BEGIN VAR DEF: $LC47
.const .align 1 .u8 $LC47[9] =
{68,101,97,100,108,111,99,107,0 };
// BEGIN VAR DEF: $LC48
.const .align 1 .u8 $LC48[27] =
{78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0 };
// BEGIN VAR DEF: $LC49
.const .align 1 .u8 $LC49[15] =
{80,114,111,116,111,99,111,108,32,101,114,114,111,114,0 };
// BEGIN VAR DEF: $LC50
.const .align 1 .u8 $LC50[20] =
{78,111,32,115,116,114,101,97,109,32,114,101,115,111,117,114,99,101,115,0 };
// BEGIN VAR DEF: $LC51
.const .align 1 .u8 $LC51[12] =
{66,97,100,32,109,101,115,115,97,103,101,0 };
// BEGIN VAR DEF: $LC52
.const .align 1 .u8 $LC52[29] =
{68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0 };
// BEGIN VAR DEF: $LC53
.const .align 1 .u8 $LC53[24] =
{86,105,114,116,117,97,108,32,99,105,114,99,117,105,116,32,105,115,32,103,111,110,101,0 };
// BEGIN VAR DEF: $LC54
.const .align 1 .u8 $LC54[34] =
{79,112,101,114,97,116,105,111,110,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,111,110,32,115,111,99,107,101,116,0 };
// BEGIN VAR DEF: $LC55
.const .align 1 .u8 $LC55[27] =
{70,105,108,101,32,111,114,32,112,97,116,104,32,110,97,109,101,32,116,111,111,32,108,111,110,103,0 };
// BEGIN VAR DEF: $LC56
.const .align 1 .u8 $LC56[25] =
{70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0 };
// BEGIN VAR DEF: $LC57
.const .align 1 .u8 $LC57[19] =
{77,117,108,116,105,104,111,112,32,97,116,116,101,109,112,116,101,100,0 };
// BEGIN VAR DEF: $LC58
.const .align 1 .u8 $LC58[20] =
{68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0 };
// BEGIN VAR DEF: $LC59
.const .align 1 .u8 $LC59[25] =
{67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[20] =
{80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[8] =
{83,117,99,99,101,115,115,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[10] =
{73,47,79,32,101,114,114,111,114,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[10] =
{78,111,116,32,111,119,110,101,114,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[16] =
{78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[12] =
{78,111,32,99,104,105,108,100,114,101,110,0 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[18] =
{69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0 };
// BEGIN VAR DEF: $LC7
.const .align 1 .u8 $LC7[26] =
{78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0 };
// BEGIN VAR DEF: $LC8
.const .align 1 .u8 $LC8[24] =
{73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0 };
// BEGIN VAR DEF: $LC9
.const .align 1 .u8 $LC9[17] =
{77,101,115,115,97,103,101,32,116,111,111,32,108,111,110,103,0 };
// BEGIN VAR DEF: $LC60
.const .align 1 .u8 $LC60[13] =
{78,111,116,32,97,32,115,116,114,101,97,109,0 };
// BEGIN VAR DEF: $LC61
.const .align 1 .u8 $LC61[31] =
{83,111,99,107,101,116,32,111,112,101,114,97,116,105,111,110,32,111,110,32,110,111,110,45,115,111,99,107,101,116,0 };
// BEGIN VAR DEF: $LC62
.const .align 1 .u8 $LC62[26] =
{78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0 };
// BEGIN VAR DEF: $LC63
.const .align 1 .u8 $LC63[24] =
{84,111,111,32,109,97,110,121,32,115,121,109,98,111,108,105,99,32,108,105,110,107,115,0 };
// BEGIN VAR DEF: $LC64
.const .align 1 .u8 $LC64[23] =
{65,100,100,114,101,115,115,32,97,108,114,101,97,100,121,32,105,110,32,117,115,101,0 };
// BEGIN VAR DEF: $LC65
.const .align 1 .u8 $LC65[23] =
{80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0 };
// BEGIN VAR DEF: $LC66
.const .align 1 .u8 $LC66[48] =
{65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,32,102,97,109,105,108,121,0 };
// BEGIN VAR DEF: $LC67
.const .align 1 .u8 $LC67[31] =
{80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0 };
// BEGIN VAR DEF: $LC68
.const .align 1 .u8 $LC68[33] =
{83,111,102,116,119,97,114,101,32,99,97,117,115,101,100,32,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,0 };
// BEGIN VAR DEF: $LC69
.const .align 1 .u8 $LC69[19] =
{67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0 };
// BEGIN VAR DEF: $LC70
.const .align 1 .u8 $LC70[22] =
{73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0 };
// BEGIN VAR DEF: $LC71
.const .align 1 .u8 $LC71[30] =
{67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,32,98,121,32,110,101,116,119,111,114,107,0 };
// BEGIN VAR DEF: $LC72
.const .align 1 .u8 $LC72[38] =
{86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,101,102,105,110,101,100,32,100,97,116,97,32,116,121,112,101,0 };
// BEGIN VAR DEF: $LC73
.const .align 1 .u8 $LC73[14] =
{78,111,116,32,115,117,112,112,111,114,116,101,100,0 };
// BEGIN VAR DEF: $LC74
.const .align 1 .u8 $LC74[19] =
{79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0 };
// BEGIN VAR DEF: $LC75
.const .align 1 .u8 $LC75[23] =
{78,101,116,119,111,114,107,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0 };
// BEGIN VAR DEF: $LC76
.const .align 1 .u8 $LC76[22] =
{83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0 };
// BEGIN VAR DEF: $LC77
.const .align 1 .u8 $LC77[20] =
{72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0 };
// BEGIN VAR DEF: $LC78
.const .align 1 .u8 $LC78[36] =
{78,101,116,119,111,114,107,32,105,110,116,101,114,102,97,99,101,32,105,115,32,110,111,116,32,99,111,110,102,105,103,117,114,101,100,0 };
// BEGIN VAR DEF: $LC79
.const .align 1 .u8 $LC79[26] =
{78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0 };
// BEGIN GLOBAL FUNCTION DEF: _strerror_r
.visible .func (.param .u64 %value_out) _strerror_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .pred %r27;
.reg .pred %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .pred %r32;
.reg .pred %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .pred %r37;
.reg .pred %r38;
.reg .pred %r39;
.reg .pred %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .pred %r47;
.reg .pred %r48;
.reg .pred %r49;
.reg .pred %r50;
.reg .pred %r51;
.reg .pred %r52;
.reg .pred %r53;
.reg .pred %r54;
.reg .pred %r55;
.reg .pred %r56;
.reg .pred %r57;
.reg .pred %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .pred %r61;
.reg .pred %r62;
.reg .pred %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .pred %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .pred %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .pred %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .pred %r77;
.reg .pred %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .pred %r82;
.reg .pred %r83;
.reg .pred %r84;
.reg .pred %r85;
.reg .pred %r86;
.reg .pred %r87;
.reg .pred %r88;
.reg .pred %r89;
.reg .pred %r90;
.reg .pred %r91;
.reg .pred %r92;
.reg .pred %r93;
.reg .pred %r94;
.reg .pred %r95;
.reg .pred %r96;
.reg .pred %r97;
.reg .pred %r98;
.reg .pred %r99;
.reg .pred %r100;
.reg .pred %r101;
.reg .pred %r102;
.reg .pred %r103;
.reg .pred %r104;
.reg .pred %r105;
.reg .pred %r106;
.reg .pred %r107;
.reg .pred %r108;
.reg .pred %r109;
.reg .pred %r110;
.reg .pred %r111;
.reg .pred %r112;
.reg .pred %r113;
.reg .pred %r114;
.reg .pred %r115;
.reg .pred %r116;
.reg .pred %r117;
.reg .pred %r118;
.reg .pred %r119;
.reg .pred %r120;
.reg .pred %r121;
.reg .pred %r122;
.reg .pred %r123;
.reg .pred %r124;
.reg .pred %r125;
.reg .pred %r126;
.reg .pred %r127;
.reg .pred %r128;
.reg .pred %r129;
.reg .pred %r130;
.reg .pred %r131;
.reg .pred %r132;
.reg .pred %r133;
.reg .pred %r134;
.reg .pred %r135;
.reg .pred %r136;
.reg .pred %r137;
.reg .u64 %r141;
.reg .pred %r142;
mov.u64 %r23,%ar0;
mov.u32 %r24,%ar1;
mov.u32 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 396 3
setp.eq.u32 %r27,%r24,62;
@ %r27 bra $L35;
setp.gt.s32 %r28,%r24,62;
@ %r28 bra $L3;
setp.eq.u32 %r29,%r24,21;
@ %r29 bra $L36;
setp.gt.s32 %r30,%r24,21;
@ %r30 bra $L4;
setp.eq.u32 %r31,%r24,10;
@ %r31 bra $L37;
setp.gt.s32 %r32,%r24,10;
@ %r32 bra $L5;
setp.eq.u32 %r33,%r24,5;
@ %r33 bra $L38;
setp.gt.s32 %r34,%r24,5;
@ %r34 bra $L6;
setp.eq.u32 %r35,%r24,2;
@ %r35 bra $L39;
setp.gt.s32 %r36,%r24,2;
@ %r36 bra $L7;
setp.eq.u32 %r37,%r24,0;
@ %r37 bra $L40;
setp.eq.u32 %r38,%r24,1;
@ %r38 bra $L41;
bra $L8;
$L7:
setp.eq.u32 %r39,%r24,3;
@ %r39 bra $L42;
setp.eq.u32 %r40,%r24,4;
@ %r40 bra $L43;
bra $L8;
$L6:
setp.eq.u32 %r41,%r24,8;
@ %r41 bra $L44;
setp.gt.s32 %r42,%r24,8;
@ %r42 bra $L9;
setp.eq.u32 %r43,%r24,6;
@ %r43 bra $L45;
setp.eq.u32 %r44,%r24,7;
@ %r44 bra $L46;
bra $L8;
$L9:
setp.eq.u32 %r45,%r24,9;
@ %r45 bra $L47;
bra $L8;
$L5:
setp.eq.u32 %r46,%r24,16;
@ %r46 bra $L48;
setp.gt.s32 %r47,%r24,16;
@ %r47 bra $L10;
setp.eq.u32 %r48,%r24,13;
@ %r48 bra $L49;
setp.gt.s32 %r49,%r24,13;
@ %r49 bra $L11;
setp.eq.u32 %r50,%r24,11;
@ %r50 bra $L50;
setp.eq.u32 %r51,%r24,12;
@ %r51 bra $L51;
bra $L8;
$L11:
setp.eq.u32 %r52,%r24,14;
@ %r52 bra $L52;
bra $L8;
$L10:
setp.eq.u32 %r53,%r24,19;
@ %r53 bra $L53;
setp.gt.s32 %r54,%r24,19;
@ %r54 bra $L12;
setp.eq.u32 %r55,%r24,17;
@ %r55 bra $L54;
setp.eq.u32 %r56,%r24,18;
@ %r56 bra $L55;
bra $L8;
$L12:
setp.eq.u32 %r57,%r24,20;
@ %r57 bra $L56;
bra $L8;
$L4:
setp.eq.u32 %r58,%r24,31;
@ %r58 bra $L57;
setp.gt.s32 %r59,%r24,31;
@ %r59 bra $L13;
setp.eq.u32 %r60,%r24,26;
@ %r60 bra $L58;
setp.gt.s32 %r61,%r24,26;
@ %r61 bra $L14;
setp.eq.u32 %r62,%r24,24;
@ %r62 bra $L59;
setp.gt.s32 %r63,%r24,24;
@ %r63 bra $L15;
setp.eq.u32 %r64,%r24,22;
@ %r64 bra $L60;
setp.eq.u32 %r65,%r24,23;
@ %r65 bra $L61;
bra $L8;
$L15:
setp.eq.u32 %r66,%r24,25;
@ %r66 bra $L62;
bra $L8;
$L14:
setp.eq.u32 %r67,%r24,29;
@ %r67 bra $L63;
setp.gt.s32 %r68,%r24,29;
@ %r68 bra $L16;
setp.eq.u32 %r69,%r24,27;
@ %r69 bra $L64;
setp.eq.u32 %r70,%r24,28;
@ %r70 bra $L65;
bra $L8;
$L16:
setp.eq.u32 %r71,%r24,30;
@ %r71 bra $L66;
bra $L8;
$L13:
setp.eq.u32 %r72,%r24,36;
@ %r72 bra $L67;
setp.gt.s32 %r73,%r24,36;
@ %r73 bra $L17;
setp.eq.u32 %r74,%r24,34;
@ %r74 bra $L68;
setp.gt.s32 %r75,%r24,34;
@ %r75 bra $L18;
setp.eq.u32 %r76,%r24,32;
@ %r76 bra $L69;
setp.eq.u32 %r77,%r24,33;
@ %r77 bra $L70;
bra $L8;
$L18:
setp.eq.u32 %r78,%r24,35;
@ %r78 bra $L71;
bra $L8;
$L17:
setp.eq.u32 %r79,%r24,60;
@ %r79 bra $L72;
setp.eq.u32 %r80,%r24,61;
@ %r80 bra $L73;
setp.eq.u32 %r81,%r24,45;
@ %r81 bra $L74;
setp.eq.u32 %r82,%r24,46;
@ %r82 bra $L75;
bra $L8;
$L3:
setp.eq.u32 %r83,%r24,114;
@ %r83 bra $L76;
setp.gt.s32 %r84,%r24,114;
@ %r84 bra $L19;
setp.eq.u32 %r85,%r24,95;
@ %r85 bra $L77;
setp.gt.s32 %r86,%r24,95;
@ %r86 bra $L20;
setp.eq.u32 %r87,%r24,77;
@ %r87 bra $L78;
setp.gt.s32 %r88,%r24,77;
@ %r88 bra $L21;
setp.eq.u32 %r89,%r24,71;
@ %r89 bra $L79;
setp.gt.s32 %r90,%r24,71;
@ %r90 bra $L22;
setp.eq.u32 %r91,%r24,63;
@ %r91 bra $L80;
setp.eq.u32 %r92,%r24,67;
@ %r92 bra $L81;
bra $L8;
$L22:
setp.eq.u32 %r93,%r24,74;
@ %r93 bra $L82;
bra $L8;
$L21:
setp.eq.u32 %r94,%r24,91;
@ %r94 bra $L83;
setp.gt.s32 %r95,%r24,91;
@ %r95 bra $L23;
setp.eq.u32 %r96,%r24,88;
@ %r96 bra $L84;
setp.eq.u32 %r97,%r24,90;
@ %r97 bra $L85;
bra $L8;
$L23:
setp.eq.u32 %r98,%r24,92;
@ %r98 bra $L86;
bra $L8;
$L20:
setp.eq.u32 %r99,%r24,108;
@ %r99 bra $L87;
setp.gt.s32 %r100,%r24,108;
@ %r100 bra $L24;
setp.eq.u32 %r101,%r24,106;
@ %r101 bra $L88;
setp.gt.s32 %r102,%r24,106;
@ %r102 bra $L25;
setp.eq.u32 %r103,%r24,104;
@ %r103 bra $L89;
setp.eq.u32 %r104,%r24,105;
@ %r104 bra $L90;
bra $L8;
$L25:
setp.eq.u32 %r105,%r24,107;
@ %r105 bra $L91;
bra $L8;
$L24:
setp.eq.u32 %r106,%r24,112;
@ %r106 bra $L92;
setp.gt.s32 %r107,%r24,112;
@ %r107 bra $L26;
setp.eq.u32 %r108,%r24,109;
@ %r108 bra $L93;
setp.eq.u32 %r109,%r24,111;
@ %r109 bra $L94;
bra $L8;
$L26:
setp.eq.u32 %r110,%r24,113;
@ %r110 bra $L95;
bra $L8;
$L19:
setp.eq.u32 %r111,%r24,125;
@ %r111 bra $L96;
setp.gt.s32 %r112,%r24,125;
@ %r112 bra $L27;
setp.eq.u32 %r113,%r24,119;
@ %r113 bra $L97;
setp.gt.s32 %r114,%r24,119;
@ %r114 bra $L28;
setp.eq.u32 %r115,%r24,117;
@ %r115 bra $L98;
setp.gt.s32 %r116,%r24,117;
@ %r116 bra $L29;
setp.eq.u32 %r117,%r24,115;
@ %r117 bra $L99;
setp.eq.u32 %r118,%r24,116;
@ %r118 bra $L100;
bra $L8;
$L29:
setp.eq.u32 %r119,%r24,118;
@ %r119 bra $L101;
bra $L8;
$L28:
setp.eq.u32 %r120,%r24,122;
@ %r120 bra $L102;
setp.gt.s32 %r121,%r24,122;
@ %r121 bra $L30;
setp.eq.u32 %r122,%r24,120;
@ %r122 bra $L103;
setp.eq.u32 %r123,%r24,121;
@ %r123 bra $L104;
bra $L8;
$L30:
setp.eq.u32 %r124,%r24,123;
@ %r124 bra $L105;
bra $L8;
$L27:
setp.eq.u32 %r125,%r24,138;
@ %r125 bra $L106;
setp.gt.s32 %r126,%r24,138;
@ %r126 bra $L31;
setp.eq.u32 %r127,%r24,128;
@ %r127 bra $L107;
setp.gt.s32 %r128,%r24,128;
@ %r128 bra $L32;
setp.eq.u32 %r129,%r24,126;
@ %r129 bra $L108;
setp.eq.u32 %r130,%r24,127;
@ %r130 bra $L109;
bra $L8;
$L32:
setp.eq.u32 %r131,%r24,134;
@ %r131 bra $L110;
bra $L8;
$L31:
setp.eq.u32 %r132,%r24,141;
@ %r132 bra $L111;
setp.gt.s32 %r133,%r24,141;
@ %r133 bra $L33;
setp.eq.u32 %r134,%r24,139;
@ %r134 bra $L112;
setp.eq.u32 %r135,%r24,140;
@ %r135 bra $L113;
bra $L8;
$L33:
setp.eq.u32 %r136,%r24,142;
@ %r136 bra $L114;
$L8:
.loc 1 884 10
setp.ne.u64 %r137,%r26,0;
.loc 1 885 16
selp.u64 %r26,%r26,%r23,%r137;
.loc 1 886 20
{
.param .u64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r24;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
call (%value_in),_user_strerror,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r141,[%value_in];
}
mov.u64 %r22,%r141;
.loc 1 886 10
setp.ne.u64 %r142,%r22,0;
@ %r142 bra $L1;
.loc 1 887 15
cvta.const.u64 %r22,$LC80;
bra $L1;
$L35:
.loc 1 650 13
cvta.const.u64 %r22,$LC24;
bra $L1;
$L36:
.loc 1 525 13
cvta.const.u64 %r22,$LC11;
bra $L1;
$L37:
.loc 1 455 13
cvta.const.u64 %r22,$LC5;
bra $L1;
$L38:
.loc 1 424 13
cvta.const.u64 %r22,$LC2;
bra $L1;
$L39:
.loc 1 409 13
cvta.const.u64 %r22,$LC79;
bra $L1;
$L40:
.loc 1 399 13
cvta.const.u64 %r22,$LC1;
bra $L1;
$L41:
.loc 1 396 3
cvta.const.u64 %r22,$LC3;
bra $L1;
$L42:
.loc 1 414 13
cvta.const.u64 %r22,$LC4;
bra $L1;
$L43:
.loc 1 419 13
cvta.const.u64 %r22,$LC8;
bra $L1;
$L44:
.loc 1 440 13
cvta.const.u64 %r22,$LC6;
bra $L1;
$L45:
.loc 1 430 13
cvta.const.u64 %r22,$LC7;
bra $L1;
$L46:
.loc 1 435 13
cvta.const.u64 %r22,$LC10;
bra $L1;
$L47:
.loc 1 450 13
cvta.const.u64 %r22,$LC17;
bra $L1;
$L48:
.loc 1 490 13
cvta.const.u64 %r22,$LC15;
bra $L1;
$L49:
.loc 1 475 13
cvta.const.u64 %r22,$LC13;
bra $L1;
$L50:
.loc 1 465 13
cvta.const.u64 %r22,$LC14;
bra $L1;
$L51:
.loc 1 470 13
cvta.const.u64 %r22,$LC16;
bra $L1;
$L52:
.loc 1 480 13
cvta.const.u64 %r22,$LC20;
bra $L1;
$L53:
.loc 1 505 13
cvta.const.u64 %r22,$LC18;
bra $L1;
$L54:
.loc 1 495 13
cvta.const.u64 %r22,$LC19;
bra $L1;
$L55:
.loc 1 500 13
cvta.const.u64 %r22,$LC21;
bra $L1;
$L56:
.loc 1 510 13
cvta.const.u64 %r22,$LC38;
bra $L1;
$L57:
.loc 1 595 13
cvta.const.u64 %r22,$LC31;
bra $L1;
$L58:
.loc 1 560 13
cvta.const.u64 %r22,$LC29;
bra $L1;
$L59:
.loc 1 550 13
cvta.const.u64 %r22,$LC25;
bra $L1;
$L60:
.loc 1 530 13
cvta.const.u64 %r22,$LC28;
bra $L1;
$L61:
.loc 1 545 13
cvta.const.u64 %r22,$LC30;
bra $L1;
$L62:
.loc 1 555 13
cvta.const.u64 %r22,$LC36;
bra $L1;
$L63:
.loc 1 585 13
cvta.const.u64 %r22,$LC32;
bra $L1;
$L64:
.loc 1 565 13
cvta.const.u64 %r22,$LC34;
bra $L1;
$L65:
.loc 1 575 13
cvta.const.u64 %r22,$LC37;
bra $L1;
$L66:
.loc 1 590 13
cvta.const.u64 %r22,$LC43;
bra $L1;
$L67:
.loc 1 620 13
cvta.const.u64 %r22,$LC41;
bra $L1;
$L68:
.loc 1 610 13
cvta.const.u64 %r22,$LC39;
bra $L1;
$L69:
.loc 1 600 13
cvta.const.u64 %r22,$LC40;
bra $L1;
$L70:
.loc 1 605 13
cvta.const.u64 %r22,$LC42;
bra $L1;
$L71:
.loc 1 615 13
cvta.const.u64 %r22,$LC48;
bra $L1;
$L72:
.loc 1 645 13
cvta.const.u64 %r22,$LC60;
bra $L1;
$L73:
.loc 1 770 13
cvta.const.u64 %r22,$LC45;
bra $L1;
$L74:
.loc 1 630 13
cvta.const.u64 %r22,$LC47;
bra $L1;
$L75:
.loc 1 640 13
cvta.const.u64 %r22,$LC46;
bra $L1;
$L76:
.loc 1 635 13
cvta.const.u64 %r22,$LC75;
bra $L1;
$L77:
.loc 1 865 15
cvta.const.u64 %r22,$LC54;
bra $L1;
$L78:
.loc 1 710 13
cvta.const.u64 %r22,$LC51;
bra $L1;
$L79:
.loc 1 695 13
cvta.const.u64 %r22,$LC49;
bra $L1;
$L80:
.loc 1 655 13
cvta.const.u64 %r22,$LC50;
bra $L1;
$L81:
.loc 1 675 13
cvta.const.u64 %r22,$LC53;
bra $L1;
$L82:
.loc 1 705 13
cvta.const.u64 %r22,$LC57;
bra $L1;
$L83:
.loc 1 755 13
cvta.const.u64 %r22,$LC55;
bra $L1;
$L84:
.loc 1 740 13
cvta.const.u64 %r22,$LC56;
bra $L1;
$L85:
.loc 1 750 13
cvta.const.u64 %r22,$LC58;
bra $L1;
$L86:
.loc 1 760 13
cvta.const.u64 %r22,$LC63;
bra $L1;
$L87:
.loc 1 785 13
cvta.const.u64 %r22,$LC61;
bra $L1;
$L88:
.loc 1 775 13
cvta.const.u64 %r22,$LC66;
bra $L1;
$L89:
.loc 1 805 13
cvta.const.u64 %r22,$LC59;
bra $L1;
$L90:
.loc 1 765 13
cvta.const.u64 %r22,$LC62;
bra $L1;
$L91:
.loc 1 780 13
cvta.const.u64 %r22,$LC67;
bra $L1;
$L92:
.loc 1 810 13
cvta.const.u64 %r22,$LC64;
bra $L1;
$L93:
.loc 1 790 13
cvta.const.u64 %r22,$LC65;
bra $L1;
$L94:
.loc 1 800 13
cvta.const.u64 %r22,$LC69;
bra $L1;
$L95:
.loc 1 820 13
cvta.const.u64 %r22,$LC68;
bra $L1;
$L96:
.loc 1 815 13
cvta.const.u64 %r22,$LC23;
bra $L1;
$L97:
.loc 1 520 13
cvta.const.u64 %r22,$LC22;
bra $L1;
$L98:
.loc 1 515 13
cvta.const.u64 %r22,$LC26;
bra $L1;
$L99:
.loc 1 535 13
cvta.const.u64 %r22,$LC78;
bra $L1;
$L100:
.loc 1 880 15
cvta.const.u64 %r22,$LC33;
bra $L1;
$L101:
.loc 1 570 13
cvta.const.u64 %r22,$LC77;
bra $L1;
$L102:
.loc 1 875 15
cvta.const.u64 %r22,$LC9;
bra $L1;
$L103:
.loc 1 445 13
cvta.const.u64 %r22,$LC12;
bra $L1;
$L104:
.loc 1 460 13
cvta.const.u64 %r22,$LC52;
bra $L1;
$L105:
.loc 1 700 13
cvta.const.u64 %r22,$LC44;
bra $L1;
$L106:
.loc 1 625 13
cvta.const.u64 %r22,$LC70;
bra $L1;
$L107:
.loc 1 830 15
cvta.const.u64 %r22,$LC27;
bra $L1;
$L108:
.loc 1 540 13
cvta.const.u64 %r22,$LC71;
bra $L1;
$L109:
.loc 1 840 15
cvta.const.u64 %r22,$LC35;
bra $L1;
$L110:
.loc 1 580 13
cvta.const.u64 %r22,$LC73;
bra $L1;
$L111:
.loc 1 850 15
cvta.const.u64 %r22,$LC76;
bra $L1;
$L112:
.loc 1 870 13
cvta.const.u64 %r22,$LC72;
bra $L1;
$L113:
.loc 1 845 15
cvta.const.u64 %r22,$LC74;
bra $L1;
$L114:
.loc 1 855 15
cvta.const.u64 %r22,$LC0;
$L1:
.loc 1 892 1
mov.u64 %value,%r22;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strerror
.visible .func (.param .u64 %value_out) strerror (.param .u32 %in_ar0)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r24;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u32 %r24,%ar0;
.loc 1 897 10
ld.global.u64 %r29,[_impure_ptr];
mov.u64 %r28,0;
cvt.u32.u64 %r27,%r28;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r28;
call (%value_in),_strerror_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r30,[%value_in];
}
.loc 1 898 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strerror_l
.visible .func (.param .u64 %value_out) strerror_l (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
mov.u32 %r24,%ar0;
.loc 1 904 10
ld.global.u64 %r30,[_impure_ptr];
mov.u64 %r29,0;
cvt.u32.u64 %r28,%r29;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r28;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_strerror_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 905 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}

/1272           1612277262  0     0     100666  2408      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strerror_r
.visible .func (.param .u64 %value_out) strerror_r (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strerror_r.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _strerror_r
.extern .func (.param .u64 %value_out) _strerror_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: strerror_r
.visible .func (.param .u64 %value_out) strerror_r (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r35;
.reg .pred %r36;
.reg .u64 %r39;
mov.u32 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 72 17
ld.global.u64 %r32,[_impure_ptr];
mov.u64 %r31,0;
mov.u32 %r30,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_strerror_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
mov.u64 %r24,%r33;
.loc 1 74 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r35,[%value_in];
}
.loc 1 74 6
setp.ge.u64 %r36,%r35,%r27;
@ %r36 bra $L1;
.loc 1 76 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r39,[%value_in];
}
mov.u64 %r24,%r39;
$L1:
.loc 1 77 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}
/1292           1612277262  0     0     100666  71321     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: iso_year_adjust$isra$0
.func (.param .u32 %value_out) iso_year_adjust$isra$0 (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/time/strftime.c"
// BEGIN FUNCTION DECL: __strftime$isra$0
.func (.param .u64 %value_out) __strftime$isra$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strftime
.visible .func (.param .u64 %value_out) strftime (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strftime_l
.visible .func (.param .u64 %value_out) strftime_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL VAR DECL: _C_time_locale
.extern .const .align 8 .u64 _C_time_locale[63];
// BEGIN GLOBAL VAR DECL: _tzname
.extern .global .align 8 .u64 _tzname[2];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: strtoul
.extern .func (.param .u64 %value_out) strtoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: abs
.extern .func (.param .u32 %value_out) abs (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: sniprintf
.extern .func (.param .u32 %value_out) sniprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.extern .func __tz_lock;
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked
.extern .func _tzset_unlocked;
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.extern .func (.param .u64 %value_out) __gettzinfo;
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.extern .func __tz_unlock;
// BEGIN GLOBAL FUNCTION DECL: labs
.extern .func (.param .u64 %value_out) labs (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC9
.const .align 1 .u8 $LC9[8] =
{89,45,37,109,45,37,100,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[5] =
{37,46,50,100,0 };
// BEGIN VAR DEF: $LC10
.const .align 1 .u8 $LC10[4] =
{46,42,117,0 };
// BEGIN VAR DEF: $LC11
.const .align 1 .u8 $LC11[5] =
{37,46,51,100,0 };
// BEGIN VAR DEF: $LC12
.const .align 1 .u8 $LC12[10] =
{37,46,50,100,58,37,46,50,100,0 };
// BEGIN VAR DEF: $LC13
.const .align 1 .u8 $LC13[5] =
{37,108,108,100,0 };
// BEGIN VAR DEF: $LC14
.const .align 1 .u8 $LC14[15] =
{37,46,50,100,58,37,46,50,100,58,37,46,50,100,0 };
// BEGIN VAR DEF: $LC15
.const .align 1 .u8 $LC15[12] =
{37,43,48,51,108,100,37,46,50,108,100,0 };
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[1] =
{0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[8] =
{37,115,37,48,46,42,100,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[7] =
{37,115,37,46,42,100,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[2] =
{43,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[2] =
{45,0 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[4] =
{37,50,100,0 };
// BEGIN VAR DEF: $LC7
.const .align 1 .u8 $LC7[15] =
{37,46,50,100,47,37,46,50,100,47,37,46,50,100,0 };
// BEGIN VAR DEF: $LC8
.const .align 1 .u8 $LC8[4] =
{37,108,117,0 };
// BEGIN FUNCTION DEF: iso_year_adjust$isra$0
.func (.param .u32 %value_out) iso_year_adjust$isra$0 (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r31;
.reg .u32 %r34;
.reg .u32 %r42;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .u32 %r52;
.reg .pred %r58;
.reg .u32 %r60;
.reg .u32 %r67;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u32 %r78;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .pred %r86;
mov.u32 %r45,%ar0;
mov.u32 %r46,%ar1;
mov.u32 %r47,%ar2;
.loc 1 350 14
setp.lt.s32 %r48,%r45,0;
selp.u32 %r23,1900,-100,%r48;
add.u32 %r24,%r23,%r45;
and.b32 %r49,%r45,3;
setp.ne.u32 %r50,%r49,0;
@ %r50 bra $L3;
rem.s32 %r52,%r24,100;
setp.ne.u32 %r58,%r52,0;
@ %r58 bra $L10;
$L3:
rem.s32 %r60,%r24,400;
set.u32.eq.u32 %r67,%r60,0;
neg.s32 %r31,%r67;
bra $L4;
$L10:
mov.u32 %r31,1;
$L4:
.loc 1 356 11
shl.b32 %r69,%r47,4;
add.u32 %r70,%r46,%r46;
add.u32 %r71,%r69,%r70;
add.u32 %r34,%r71,%r31;
.loc 1 356 3
setp.gt.s32 %r72,%r34,33;
@ %r72 bra $L5;
setp.ge.s32 %r73,%r34,0;
@ %r73 bra $L6;
.loc 1 385 10
mov.u32 %r44,0;
bra $L1;
$L8:
mov.u64 %r75,1;
shl.b64 %r74,%r75,%r42;
and.b64 %r76,%r74,11822082166292481;
set.u32.ne.u64 %r78,%r76,0;
neg.s32 %r44,%r78;
bra $L1;
$L6:
mov.u64 %r81,1;
shl.b64 %r80,%r81,%r34;
and.b64 %r82,%r80,13690420227;
set.u32.ne.u64 %r44,%r82,0;
bra $L1;
$L5:
.loc 1 356 3
add.u32 %r42,%r34,-5794;
setp.le.u32 %r86,%r42,53;
@ %r86 bra $L8;
.loc 1 385 10
mov.u32 %r44,0;
$L1:
.loc 1 387 1
mov.u32 %value,%r44;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: __strftime$isra$0
.func (.param .u64 %value_out) __strftime$isra$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[32];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r25;
.reg .u64 %r32;
.reg .u64 %r35;
.reg .u64 %r39;
.reg .u64 %r41;
.reg .u64 %r45;
.reg .u32 %r47;
.reg .u64 %r49;
.reg .u64 %r53;
.reg .u64 %r55;
.reg .u64 %r60;
.reg .u64 %r63;
.reg .u32 %r65;
.reg .u64 %r66;
.reg .u32 %r71;
.reg .u32 %r73;
.reg .u32 %r76;
.reg .u32 %r79;
.reg .u64 %r85;
.reg .u64 %r86;
.reg .u32 %r89;
.reg .u64 %r92;
.reg .u32 %r95;
.reg .u32 %r96;
.reg .u64 %r106;
.reg .u64 %r108;
.reg .u64 %r111;
.reg .u32 %r115;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u32 %r119;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u32 %r135;
.reg .u32 %r137;
.reg .u32 %r140;
.reg .u64 %r151;
.reg .u64 %r159;
.reg .u32 %r163;
.reg .u64 %r166;
.reg .u64 %r192;
.reg .u32 %r195;
.reg .u64 %r203;
.reg .u32 %r205;
.reg .u64 %r219;
.reg .u32 %r220;
.reg .u32 %r272;
.reg .u32 %r286;
.reg .u32 %r289;
.reg .u32 %r290;
.reg .u32 %r291;
.reg .u32 %r292;
.reg .u32 %r297;
.reg .u32 %r310;
.reg .u32 %r311;
.reg .u32 %r320;
.reg .u32 %r321;
.reg .u32 %r328;
.reg .u64 %r333;
.reg .u64 %r344;
.reg .u64 %r357;
.reg .u64 %r360;
.reg .u32 %r361;
.reg .u32 %r369;
.reg .u32 %r375;
.reg .u32 %r376;
.reg .u32 %r377;
.reg .u64 %r378;
.reg .u32 %r379;
.reg .u64 %r380;
.reg .u64 %r381;
.reg .u32 %r383;
.reg .u64 %r385;
.reg .u64 %r387;
.reg .u32 %r390;
.reg .u32 %r391;
.reg .u64 %r394;
.reg .u64 %r397;
.reg .u64 %r405;
.reg .u64 %r412;
.reg .u64 %r416;
.reg .u64 %r421;
.reg .u64 %r423;
.reg .u64 %r424;
.reg .u64 %r425;
.reg .u64 %r426;
.reg .u64 %r427;
.reg .pred %r429;
.reg .u64 %r430;
.reg .u32 %r431;
.reg .u16 %r433;
.reg .u32 %r434;
.reg .u32 %r435;
.reg .u32 %r438;
.reg .u32 %r439;
.reg .u16 %r440;
.reg .u16 %r441;
.reg .u16 %r442;
.reg .u32 %r443;
.reg .u16 %r444;
.reg .pred %r445;
.reg .pred %r446;
.reg .u16 %r448;
.reg .u32 %r449;
.reg .u32 %r450;
.reg .u32 %r453;
.reg .u32 %r454;
.reg .u16 %r455;
.reg .u16 %r456;
.reg .u16 %r457;
.reg .u32 %r458;
.reg .u16 %r459;
.reg .pred %r460;
.reg .u16 %r462;
.reg .u16 %r463;
.reg .u16 %r464;
.reg .u32 %r465;
.reg .pred %r466;
.reg .u32 %r469;
.reg .u64 %r470;
.reg .u16 %r471;
.reg .pred %r472;
.reg .pred %r474;
.reg .u16 %r475;
.reg .pred %r476;
.reg .pred %r478;
.reg .pred %r480;
.reg .pred %r482;
.reg .pred %r484;
.reg .pred %r486;
.reg .pred %r488;
.reg .pred %r490;
.reg .pred %r492;
.reg .pred %r494;
.reg .pred %r496;
.reg .pred %r498;
.reg .pred %r500;
.reg .pred %r502;
.reg .pred %r504;
.reg .pred %r506;
.reg .pred %r508;
.reg .pred %r510;
.reg .pred %r512;
.reg .pred %r514;
.reg .pred %r516;
.reg .pred %r518;
.reg .pred %r520;
.reg .pred %r522;
.reg .pred %r524;
.reg .pred %r526;
.reg .pred %r528;
.reg .pred %r530;
.reg .pred %r532;
.reg .pred %r534;
.reg .pred %r536;
.reg .pred %r538;
.reg .pred %r540;
.reg .pred %r542;
.reg .pred %r544;
.reg .u16 %r546;
.reg .u16 %r548;
.reg .u32 %r549;
.reg .pred %r550;
.reg .pred %r552;
.reg .pred %r554;
.reg .pred %r556;
.reg .pred %r558;
.reg .pred %r560;
.reg .pred %r562;
.reg .pred %r564;
.reg .pred %r566;
.reg .pred %r568;
.reg .pred %r570;
.reg .pred %r572;
.reg .pred %r574;
.reg .pred %r576;
.reg .pred %r578;
.reg .pred %r580;
.reg .pred %r582;
.reg .pred %r584;
.reg .pred %r586;
.reg .u64 %r587;
.reg .u64 %r588;
.reg .u64 %r589;
.reg .u64 %r590;
.reg .u64 %r591;
.reg .u64 %r593;
.reg .pred %r594;
.reg .pred %r595;
.reg .pred %r596;
.reg .u64 %r597;
.reg .u64 %r598;
.reg .u64 %r599;
.reg .u32 %r600;
.reg .pred %r601;
.reg .u64 %r602;
.reg .u64 %r603;
.reg .u64 %r604;
.reg .u64 %r605;
.reg .u64 %r606;
.reg .u64 %r609;
.reg .pred %r610;
.reg .pred %r611;
.reg .pred %r612;
.reg .u64 %r613;
.reg .u64 %r614;
.reg .u64 %r615;
.reg .u32 %r616;
.reg .pred %r617;
.reg .u64 %r618;
.reg .u64 %r619;
.reg .u64 %r620;
.reg .u64 %r621;
.reg .u64 %r623;
.reg .pred %r624;
.reg .pred %r625;
.reg .pred %r626;
.reg .u64 %r627;
.reg .u64 %r628;
.reg .u64 %r629;
.reg .u32 %r630;
.reg .pred %r631;
.reg .u64 %r632;
.reg .u64 %r633;
.reg .u64 %r634;
.reg .u64 %r635;
.reg .u64 %r636;
.reg .u64 %r638;
.reg .pred %r639;
.reg .pred %r640;
.reg .pred %r641;
.reg .u64 %r642;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u32 %r645;
.reg .pred %r646;
.reg .u64 %r647;
.reg .u64 %r649;
.reg .u64 %r650;
.reg .u64 %r652;
.reg .u64 %r653;
.reg .u64 %r655;
.reg .u64 %r656;
.reg .u64 %r658;
.reg .u16 %r659;
.reg .u32 %r660;
.reg .pred %r661;
.reg .u64 %r666;
.reg .u64 %r667;
.reg .u64 %r668;
.reg .pred %r669;
.reg .u64 %r670;
.reg .u64 %r671;
.reg .u64 %r672;
.reg .u32 %r673;
.reg .pred %r675;
.reg .u32 %r677;
.reg .pred %r678;
.reg .u32 %r680;
.reg .u32 %r681;
.reg .pred %r682;
.reg .u32 %r684;
.reg .u32 %r685;
.reg .u16 %r687;
.reg .u32 %r688;
.reg .u32 %r689;
.reg .u16 %r690;
.reg .u16 %r691;
.reg .u16 %r692;
.reg .u32 %r693;
.reg .u16 %r694;
.reg .pred %r695;
.reg .pred %r696;
.reg .u64 %r700;
.reg .u64 %r701;
.reg .u32 %r702;
.reg .pred %r704;
.reg .u64 %r705;
.reg .pred %r706;
.reg .pred %r708;
.reg .u64 %r712;
.reg .u64 %r713;
.reg .u32 %r714;
.reg .pred %r716;
.reg .u64 %r717;
.reg .pred %r718;
.reg .pred %r719;
.reg .u32 %r721;
.reg .u32 %r722;
.reg .u64 %r725;
.reg .u64 %r726;
.reg .u64 %r727;
.reg .u32 %r728;
.reg .u32 %r729;
.reg .u32 %r730;
.reg .u32 %r731;
.reg .pred %r733;
.reg .u64 %r734;
.reg .pred %r735;
.reg .u32 %r736;
.reg .pred %r737;
.reg .u32 %r738;
.reg .pred %r739;
.reg .u32 %r740;
.reg .u64 %r742;
.reg .u64 %r743;
.reg .u32 %r745;
.reg .pred %r747;
.reg .u64 %r749;
.reg .u64 %r751;
.reg .u64 %r752;
.reg .u64 %r757;
.reg .u64 %r758;
.reg .u64 %r759;
.reg .pred %r760;
.reg .u64 %r761;
.reg .u32 %r765;
.reg .u32 %r766;
.reg .u32 %r767;
.reg .pred %r768;
.reg .u32 %r770;
.reg .u32 %r771;
.reg .pred %r772;
.reg .u32 %r773;
.reg .pred %r774;
.reg .pred %r775;
.reg .u32 %r776;
.reg .pred %r777;
.reg .u64 %r780;
.reg .u64 %r781;
.reg .u64 %r782;
.reg .u32 %r783;
.reg .u32 %r785;
.reg .u32 %r786;
.reg .u32 %r790;
.reg .u32 %r791;
.reg .pred %r793;
.reg .u64 %r794;
.reg .pred %r795;
.reg .u32 %r796;
.reg .u32 %r797;
.reg .u32 %r798;
.reg .u32 %r802;
.reg .u32 %r803;
.reg .u32 %r804;
.reg .pred %r805;
.reg .u32 %r807;
.reg .u32 %r809;
.reg .u32 %r810;
.reg .pred %r811;
.reg .u32 %r813;
.reg .u32 %r814;
.reg .pred %r815;
.reg .u32 %r816;
.reg .pred %r817;
.reg .u32 %r819;
.reg .u32 %r820;
.reg .u16 %r821;
.reg .u16 %r822;
.reg .u16 %r823;
.reg .u32 %r824;
.reg .u16 %r825;
.reg .pred %r826;
.reg .pred %r827;
.reg .pred %r828;
.reg .pred %r830;
.reg .u32 %r831;
.reg .pred %r832;
.reg .u16 %r834;
.reg .u32 %r835;
.reg .u32 %r836;
.reg .u32 %r838;
.reg .u32 %r839;
.reg .u16 %r840;
.reg .u16 %r841;
.reg .u16 %r842;
.reg .u32 %r843;
.reg .u16 %r844;
.reg .pred %r845;
.reg .u32 %r846;
.reg .pred %r847;
.reg .u32 %r848;
.reg .pred %r849;
.reg .u32 %r850;
.reg .u64 %r852;
.reg .u64 %r853;
.reg .u64 %r857;
.reg .u64 %r858;
.reg .u32 %r859;
.reg .pred %r861;
.reg .u64 %r862;
.reg .pred %r863;
.reg .u64 %r867;
.reg .u64 %r868;
.reg .u32 %r869;
.reg .pred %r871;
.reg .u64 %r872;
.reg .pred %r873;
.reg .u16 %r874;
.reg .pred %r875;
.reg .u64 %r879;
.reg .u64 %r880;
.reg .u32 %r881;
.reg .pred %r883;
.reg .u64 %r884;
.reg .pred %r885;
.reg .u64 %r888;
.reg .u64 %r889;
.reg .u64 %r890;
.reg .u32 %r891;
.reg .u32 %r892;
.reg .u32 %r893;
.reg .pred %r895;
.reg .u64 %r896;
.reg .pred %r897;
.reg .u64 %r900;
.reg .u64 %r901;
.reg .u64 %r902;
.reg .u32 %r903;
.reg .u32 %r904;
.reg .u32 %r905;
.reg .pred %r907;
.reg .u64 %r908;
.reg .pred %r909;
.reg .u64 %r912;
.reg .u64 %r913;
.reg .u64 %r914;
.reg .u32 %r915;
.reg .u32 %r916;
.reg .pred %r918;
.reg .u64 %r919;
.reg .pred %r920;
.reg .pred %r922;
.reg .u64 %r923;
.reg .u32 %r924;
.reg .u64 %r925;
.reg .u32 %r927;
.reg .u32 %r928;
.reg .u32 %r929;
.reg .u64 %r930;
.reg .u64 %r931;
.reg .u64 %r932;
.reg .u64 %r933;
.reg .u64 %r936;
.reg .pred %r937;
.reg .pred %r938;
.reg .pred %r939;
.reg .u64 %r940;
.reg .u64 %r941;
.reg .u16 %r942;
.reg .u32 %r943;
.reg .pred %r944;
.reg .u32 %r945;
.reg .u64 %r946;
.reg .u64 %r949;
.reg .u16 %r951;
.reg .u16 %r952;
.reg .u16 %r953;
.reg .u32 %r954;
.reg .u32 %r955;
.reg .pred %r956;
.reg .u32 %r957;
.reg .u32 %r958;
.reg .u64 %r959;
.reg .u32 %r960;
.reg .pred %r961;
.reg .u64 %r964;
.reg .u64 %r965;
.reg .u64 %r966;
.reg .u32 %r967;
.reg .u32 %r968;
.reg .u32 %r969;
.reg .pred %r971;
.reg .u64 %r972;
.reg .pred %r973;
.reg .u32 %r974;
.reg .pred %r975;
.reg .pred %r976;
.reg .u64 %r977;
.reg .u32 %r979;
.reg .u32 %r980;
.reg .u32 %r981;
.reg .u64 %r982;
.reg .u64 %r984;
.reg .u64 %r985;
.reg .u64 %r986;
.reg .u64 %r987;
.reg .u64 %r989;
.reg .u64 %r992;
.reg .u64 %r993;
.reg .u64 %r994;
.reg .u64 %r995;
.reg .u64 %r996;
.reg .u64 %r1000;
.reg .u64 %r1001;
.reg .u64 %r1002;
.reg .u64 %r1003;
.reg .u32 %r1004;
.reg .u32 %r1006;
.reg .u64 %r1007;
.reg .u64 %r1008;
.reg .u32 %r1009;
.reg .u32 %r1011;
.reg .u64 %r1012;
.reg .u64 %r1013;
.reg .u32 %r1014;
.reg .u32 %r1015;
.reg .u64 %r1016;
.reg .u64 %r1017;
.reg .u64 %r1018;
.reg .u64 %r1019;
.reg .u64 %r1021;
.reg .u64 %r1022;
.reg .u64 %r1023;
.reg .u64 %r1024;
.reg .u64 %r1025;
.reg .u64 %r1027;
.reg .u64 %r1028;
.reg .u64 %r1029;
.reg .u64 %r1030;
.reg .u64 %r1031;
.reg .u64 %r1033;
.reg .u64 %r1034;
.reg .u64 %r1035;
.reg .u64 %r1036;
.reg .u64 %r1037;
.reg .u64 %r1038;
.reg .u32 %r1039;
.reg .pred %r1041;
.reg .u64 %r1042;
.reg .pred %r1043;
.reg .u64 %r1046;
.reg .u64 %r1047;
.reg .u64 %r1048;
.reg .u32 %r1049;
.reg .u32 %r1050;
.reg .pred %r1052;
.reg .u64 %r1053;
.reg .pred %r1054;
.reg .pred %r1056;
.reg .u64 %r1057;
.reg .u32 %r1058;
.reg .u64 %r1061;
.reg .u64 %r1062;
.reg .u64 %r1063;
.reg .u32 %r1064;
.reg .u32 %r1065;
.reg .u32 %r1066;
.reg .u32 %r1067;
.reg .pred %r1069;
.reg .u64 %r1070;
.reg .pred %r1071;
.reg .pred %r1073;
.reg .pred %r1074;
.reg .u32 %r1075;
.reg .u16 %r1077;
.reg .u16 %r1078;
.reg .u32 %r1079;
.reg .u64 %r1082;
.reg .u64 %r1083;
.reg .u64 %r1084;
.reg .u32 %r1085;
.reg .u32 %r1086;
.reg .u32 %r1087;
.reg .u32 %r1088;
.reg .u32 %r1090;
.reg .u32 %r1091;
.reg .pred %r1093;
.reg .u64 %r1094;
.reg .pred %r1095;
.reg .u32 %r1099;
.reg .pred %r1100;
.reg .pred %r1101;
.reg .pred %r1102;
.reg .u32 %r1103;
.reg .u32 %r1104;
.reg .pred %r1105;
.reg .u32 %r1106;
.reg .pred %r1107;
.reg .u32 %r1109;
.reg .pred %r1115;
.reg .u32 %r1117;
.reg .u32 %r1124;
.reg .u32 %r1126;
.reg .pred %r1127;
.reg .u64 %r1130;
.reg .u64 %r1131;
.reg .u64 %r1132;
.reg .u32 %r1133;
.reg .pred %r1135;
.reg .u64 %r1136;
.reg .pred %r1137;
.reg .pred %r1139;
.reg .u64 %r1140;
.reg .u16 %r1143;
.reg .u16 %r1144;
.reg .u32 %r1145;
.reg .pred %r1146;
.reg .u64 %r1149;
.reg .u64 %r1150;
.reg .u64 %r1151;
.reg .u32 %r1152;
.reg .u32 %r1153;
.reg .u32 %r1154;
.reg .u32 %r1156;
.reg .u32 %r1157;
.reg .pred %r1159;
.reg .u64 %r1160;
.reg .pred %r1161;
.reg .pred %r1162;
.reg .u32 %r1164;
.reg .u32 %r1165;
.reg .u64 %r1168;
.reg .u64 %r1169;
.reg .u64 %r1170;
.reg .u32 %r1171;
.reg .pred %r1173;
.reg .u64 %r1174;
.reg .pred %r1175;
.reg .pred %r1176;
.reg .u32 %r1177;
.reg .u32 %r1178;
.reg .pred %r1179;
.reg .u16 %r1181;
.reg .u32 %r1182;
.reg .u32 %r1183;
.reg .u32 %r1185;
.reg .u32 %r1186;
.reg .u16 %r1187;
.reg .u16 %r1188;
.reg .u16 %r1189;
.reg .u32 %r1190;
.reg .u16 %r1191;
.reg .pred %r1192;
.reg .u32 %r1193;
.reg .pred %r1194;
.reg .u32 %r1195;
.reg .pred %r1196;
.reg .u32 %r1197;
.reg .u64 %r1199;
.reg .u64 %r1200;
.reg .u64 %r1204;
.reg .u64 %r1205;
.reg .u32 %r1206;
.reg .pred %r1208;
.reg .u64 %r1209;
.reg .pred %r1210;
.reg .u32 %r1211;
.reg .pred %r1212;
.reg .pred %r1213;
.reg .u64 %r1214;
.reg .u32 %r1216;
.reg .u32 %r1217;
.reg .u32 %r1218;
.reg .u64 %r1219;
.reg .u64 %r1221;
.reg .u64 %r1222;
.reg .u64 %r1223;
.reg .u64 %r1224;
.reg .u64 %r1226;
.reg .u64 %r1229;
.reg .u64 %r1230;
.reg .u64 %r1233;
.reg .u64 %r1234;
.reg .u64 %r1235;
.reg .u64 %r1237;
.reg .u64 %r1239;
.reg .u32 %r1240;
.reg .pred %r1242;
.reg .u64 %r1243;
.reg .pred %r1244;
.reg .u32 %r1245;
.reg .pred %r1246;
.reg .pred %r1247;
.reg .u64 %r1248;
.reg .u32 %r1250;
.reg .u32 %r1251;
.reg .u32 %r1252;
.reg .u64 %r1253;
.reg .u64 %r1254;
.reg .u64 %r1255;
.reg .u64 %r1257;
.reg .pred %r1258;
.reg .pred %r1259;
.reg .u64 %r1260;
.reg .u64 %r1261;
.reg .u64 %r1262;
.reg .u32 %r1263;
.reg .pred %r1264;
.reg .pred %r1265;
.reg .pred %r1267;
.reg .u64 %r1268;
.reg .u32 %r1269;
.reg .u16 %r1270;
.reg .u32 %r1271;
.reg .pred %r1272;
.reg .pred %r1273;
.reg .u64 %r1274;
.reg .u32 %r1275;
.reg .u32 %r1277;
.reg .pred %r1278;
.reg .u32 %r1279;
.reg .u32 %r1281;
.reg .u32 %r1282;
.reg .u16 %r1284;
.reg .u32 %r1285;
.reg .u32 %r1286;
.reg .u16 %r1287;
.reg .u16 %r1288;
.reg .u16 %r1289;
.reg .u32 %r1290;
.reg .u16 %r1291;
.reg .pred %r1292;
.reg .u32 %r1294;
.reg .u32 %r1295;
.reg .u32 %r1297;
.reg .u32 %r1298;
.reg .u16 %r1299;
.reg .u16 %r1300;
.reg .u16 %r1301;
.reg .u32 %r1302;
.reg .u16 %r1303;
.reg .pred %r1304;
.reg .u32 %r1306;
.reg .u32 %r1307;
.reg .u32 %r1309;
.reg .u32 %r1310;
.reg .u16 %r1311;
.reg .u16 %r1312;
.reg .u16 %r1313;
.reg .u32 %r1314;
.reg .u16 %r1315;
.reg .pred %r1316;
.reg .pred %r1318;
.reg .u32 %r1319;
.reg .u64 %r1325;
.reg .u64 %r1326;
.reg .u64 %r1327;
.reg .u64 %r1328;
.reg .u16 %r1330;
mov.u64 %r424,%ar0;
mov.u64 %r425,%ar1;
mov.u64 %r426,%ar2;
mov.u64 %r427,%ar3;
.loc 1 688 7
mov.u32 %r118,0;
.loc 1 678 10
mov.u64 %r423,0;
.loc 1 1397 25
add.u64 %r1325,%r425,-1;
.loc 1 1083 38
cvta.const.u64 %r1326,_ctype_+1;
.loc 1 1323 3
add.u64 %r1327,%frame,1;
.loc 1 932 9
add.u64 %r1328,%frame,2;
bra $L12;
$L15:
.loc 1 695 7
setp.gt.u64 %r429,%r1325,%r423;
@ %r429 bra $L13;
$L75:
.loc 1 698 13
mov.u64 %r423,0;
bra $L11;
$L13:
.loc 1 696 26
add.u64 %r426,%r426,1;
.loc 1 696 17
add.u64 %r430,%r424,%r423;
cvt.u32.u32 %r431,%r25;
st.u8 [%r430],%r431;
.loc 1 696 13
add.u64 %r423,%r423,1;
$L12:
.loc 1 693 14
ld.s8 %r25,[%r426];
.loc 1 693 22
cvt.u16.u32 %r433,%r25;
set.u32.ne.u16 %r434,%r433,0;
neg.s32 %r435,%r434;
set.u32.ne.u16 %r438,%r433,37;
neg.s32 %r439,%r438;
cvt.u16.u32 %r441,%r435;
cvt.u16.u32 %r442,%r439;
and.b16 %r440,%r441,%r442;
.loc 1 693 13
cvt.u32.u16 %r443,%r440;
cvt.u16.u8 %r444,%r443;
setp.ne.u16 %r445,%r444,0;
@ %r445 bra $L15;
.loc 1 700 10
setp.eq.u32 %r446,%r25,0;
@ %r446 bra $L16;
.loc 1 708 11
ld.s8 %r383,[%r426+1];
.loc 1 708 30
cvt.u16.u32 %r448,%r383;
set.u32.eq.u16 %r449,%r448,48;
neg.s32 %r450,%r449;
set.u32.eq.u16 %r453,%r448,43;
neg.s32 %r454,%r453;
cvt.u16.u32 %r456,%r450;
cvt.u16.u32 %r457,%r454;
or.b16 %r455,%r456,%r457;
.loc 1 708 10
cvt.u32.u16 %r458,%r455;
cvt.u16.u8 %r459,%r458;
setp.ne.u16 %r460,%r459,0;
@ %r460 bra $L17;
.loc 1 702 13
add.u64 %r32,%r426,1;
.loc 1 703 11
mov.u32 %r79,0;
bra $L18;
$L17:
.loc 1 709 15
add.u64 %r32,%r426,2;
.loc 1 708 11
mov.u32 %r79,%r383;
.loc 1 712 11
ld.s8 %r383,[%r426+2];
$L18:
.loc 1 712 30
cvt.u16.u32 %r463,%r383;
add.u16 %r462,%r463,-49;
.loc 1 712 10
cvt.u32.u16 %r465,%r462;
cvt.u16.u8 %r464,%r465;
setp.gt.u16 %r466,%r464,8;
@ %r466 bra $L159;
.loc 1 715 12
mov.u32 %r469,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r469;
call (%value_in),strtoul,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r470,[%value_in];
}
mov.u64 %r35,%r470;
.loc 1 716 11
ld.u64 %r32,[%frame];
.loc 1 720 11
ld.s8 %r383,[%r32];
bra $L19;
$L159:
.loc 1 704 13
mov.u64 %r35,0;
$L19:
.loc 1 720 10
cvt.u16.u32 %r471,%r383;
setp.ne.u16 %r472,%r471,69;
@ %r472 bra $L20;
.loc 1 747 15
ld.s8 %r383,[%r32+1];
.loc 1 722 17
add.u64 %r32,%r32,1;
bra $L21;
$L20:
.loc 1 733 15
setp.ne.u16 %r474,%r471,79;
@ %r474 bra $L21;
.loc 1 747 15
ld.s8 %r383,[%r32+1];
.loc 1 735 17
add.u64 %r32,%r32,1;
$L21:
.loc 1 747 7
cvt.u16.u32 %r475,%r383;
setp.eq.u16 %r476,%r475,90;
@ %r476 bra $L22;
setp.gt.s16 %r478,%r475,90;
@ %r478 bra $L23;
setp.eq.u16 %r480,%r475,77;
@ %r480 bra $L24;
setp.gt.s16 %r482,%r475,77;
@ %r482 bra $L25;
setp.eq.u16 %r484,%r475,68;
@ %r484 bra $L26;
setp.gt.s16 %r486,%r475,68;
@ %r486 bra $L27;
setp.eq.u16 %r488,%r475,66;
@ %r488 bra $L28;
setp.gt.s16 %r490,%r475,66;
@ %r490 bra $L29;
setp.eq.u16 %r492,%r475,37;
@ %r492 bra $L30;
setp.eq.u16 %r494,%r475,65;
@ %r494 bra $L31;
mov.u64 %r423,0;
bra $L11;
$L29:
setp.eq.u16 %r496,%r475,67;
@ %r496 bra $L32;
mov.u64 %r423,0;
bra $L11;
$L27:
setp.eq.u16 %r498,%r475,71;
@ %r498 bra $L33;
setp.gt.s16 %r500,%r475,71;
@ %r500 bra $L34;
setp.eq.u16 %r502,%r475,70;
@ %r502 bra $L35;
mov.u64 %r423,0;
bra $L11;
$L34:
setp.eq.u16 %r504,%r475,72;
@ %r504 bra $L36;
setp.eq.u16 %r506,%r475,73;
@ %r506 bra $L37;
mov.u64 %r423,0;
bra $L11;
$L25:
setp.eq.u16 %r508,%r475,85;
@ %r508 bra $L38;
setp.gt.s16 %r510,%r475,85;
@ %r510 bra $L39;
setp.eq.u16 %r512,%r475,83;
@ %r512 bra $L40;
setp.gt.s16 %r514,%r475,83;
@ %r514 bra $L41;
setp.eq.u16 %r516,%r475,80;
@ %r516 bra $L42;
setp.eq.u16 %r518,%r475,82;
@ %r518 bra $L43;
mov.u64 %r423,0;
bra $L11;
$L41:
setp.eq.u16 %r520,%r475,84;
@ %r520 bra $L44;
mov.u64 %r423,0;
bra $L11;
$L39:
setp.eq.u16 %r522,%r475,88;
@ %r522 bra $L45;
setp.eq.u16 %r524,%r475,89;
@ %r524 bra $L46;
setp.eq.u16 %r526,%r475,86;
@ %r526 bra $L47;
setp.eq.u16 %r528,%r475,87;
@ %r528 bra $L48;
mov.u64 %r423,0;
bra $L11;
$L23:
setp.eq.u16 %r530,%r475,110;
@ %r530 bra $L49;
setp.gt.s16 %r532,%r475,110;
@ %r532 bra $L50;
setp.eq.u16 %r534,%r475,103;
@ %r534 bra $L51;
setp.gt.s16 %r536,%r475,103;
@ %r536 bra $L52;
setp.eq.u16 %r538,%r475,99;
@ %r538 bra $L53;
setp.gt.s16 %r540,%r475,99;
@ %r540 bra $L54;
setp.eq.u16 %r542,%r475,97;
@ %r542 bra $L55;
setp.eq.u16 %r544,%r475,98;
@ %r544 bra $L56;
mov.u64 %r423,0;
bra $L11;
$L54:
add.u16 %r546,%r475,-100;
cvt.u32.u16 %r549,%r546;
cvt.u16.u8 %r548,%r549;
setp.gt.u16 %r550,%r548,1;
@ ! %r550 bra $L223;
bra $L160;
$L52:
setp.eq.u16 %r552,%r475,107;
@ %r552 bra $L58;
setp.gt.s16 %r554,%r475,107;
@ %r554 bra $L59;
setp.eq.u16 %r556,%r475,104;
@ %r556 bra $L56;
setp.eq.u16 %r558,%r475,106;
@ %r558 bra $L60;
mov.u64 %r423,0;
bra $L11;
$L59:
setp.eq.u16 %r560,%r475,108;
@ %r560 bra $L61;
setp.eq.u16 %r562,%r475,109;
@ %r562 bra $L62;
mov.u64 %r423,0;
bra $L11;
$L50:
setp.eq.u16 %r564,%r475,117;
@ %r564 bra $L63;
setp.gt.s16 %r566,%r475,117;
@ %r566 bra $L64;
setp.eq.u16 %r568,%r475,115;
@ %r568 bra $L65;
setp.gt.s16 %r570,%r475,115;
@ %r570 bra $L66;
setp.eq.u16 %r572,%r475,112;
@ %r572 bra $L42;
setp.eq.u16 %r574,%r475,114;
@ %r574 bra $L67;
mov.u64 %r423,0;
bra $L11;
$L66:
setp.eq.u16 %r576,%r475,116;
@ %r576 bra $L68;
mov.u64 %r423,0;
bra $L11;
$L64:
setp.eq.u16 %r578,%r475,121;
@ %r578 bra $L69;
setp.gt.s16 %r580,%r475,121;
@ %r580 bra $L70;
setp.eq.u16 %r582,%r475,119;
@ %r582 bra $L71;
setp.eq.u16 %r584,%r475,120;
@ %r584 bra $L72;
mov.u64 %r423,0;
bra $L11;
$L70:
setp.eq.u16 %r586,%r475,122;
@ %r586 bra $L73;
mov.u64 %r423,0;
bra $L11;
$L55:
.loc 1 750 4
cvta.const.u64 %r587,_C_time_locale;
ld.s32 %r588,[%r427+24];
add.u64 %r589,%r588,24;
shl.b64 %r590,%r589,3;
add.u64 %r591,%r587,%r590;
ld.u64 %r39,[%r591];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r39;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r593,[%value_in];
}
.loc 1 751 4
setp.eq.u64 %r594,%r593,0;
@ %r594 bra $L74;
.loc 1 753 11
setp.ge.u64 %r595,%r423,%r1325;
@ %r595 bra $L75;
add.u64 %r397,%r423,%r593;
mov.u64 %r41,%r423;
bra $L76;
$L77:
setp.ge.u64 %r596,%r41,%r1325;
@ %r596 bra $L75;
$L76:
.loc 1 754 10
add.u64 %r41,%r41,1;
.loc 1 754 21
sub.u64 %r597,%r41,%r423;
add.u64 %r598,%r39,%r597;
.loc 1 754 14
add.u64 %r599,%r424,%r41;
ld.u8 %r600,[%r598+-1];
st.u8 [%r599+-1],%r600;
.loc 1 751 4
setp.ne.u64 %r601,%r41,%r397;
@ %r601 bra $L77;
mov.u64 %r423,%r41;
bra $L74;
$L31:
.loc 1 760 4
cvta.const.u64 %r602,_C_time_locale;
ld.s32 %r603,[%r427+24];
add.u64 %r604,%r603,30;
shl.b64 %r605,%r604,3;
add.u64 %r606,%r602,%r605;
ld.u64 %r45,[%r606+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r609,[%value_in];
}
.loc 1 761 4
setp.eq.u64 %r610,%r609,0;
@ %r610 bra $L74;
.loc 1 763 11
setp.ge.u64 %r611,%r423,%r1325;
@ %r611 bra $L75;
add.u64 %r416,%r423,%r609;
mov.u64 %r49,%r423;
bra $L78;
$L79:
setp.ge.u64 %r612,%r49,%r1325;
@ %r612 bra $L75;
$L78:
.loc 1 764 10
add.u64 %r49,%r49,1;
.loc 1 764 21
sub.u64 %r613,%r49,%r423;
add.u64 %r614,%r45,%r613;
.loc 1 764 14
add.u64 %r615,%r424,%r49;
ld.u8 %r616,[%r614+-1];
st.u8 [%r615+-1],%r616;
.loc 1 761 4
setp.ne.u64 %r617,%r49,%r416;
@ %r617 bra $L79;
mov.u64 %r423,%r49;
bra $L74;
$L56:
.loc 1 771 4
cvta.const.u64 %r618,_C_time_locale;
ld.s32 %r619,[%r427+16];
shl.b64 %r620,%r619,3;
add.u64 %r621,%r618,%r620;
ld.u64 %r53,[%r621];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r53;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r623,[%value_in];
}
.loc 1 772 4
setp.eq.u64 %r624,%r623,0;
@ %r624 bra $L74;
.loc 1 774 11
setp.ge.u64 %r625,%r423,%r1325;
@ %r625 bra $L75;
add.u64 %r394,%r423,%r623;
mov.u64 %r55,%r423;
bra $L80;
$L81:
setp.ge.u64 %r626,%r55,%r1325;
@ %r626 bra $L75;
$L80:
.loc 1 775 10
add.u64 %r55,%r55,1;
.loc 1 775 21
sub.u64 %r627,%r55,%r423;
add.u64 %r628,%r53,%r627;
.loc 1 775 14
add.u64 %r629,%r424,%r55;
ld.u8 %r630,[%r628+-1];
st.u8 [%r629+-1],%r630;
.loc 1 772 4
setp.ne.u64 %r631,%r55,%r394;
@ %r631 bra $L81;
mov.u64 %r423,%r55;
bra $L74;
$L28:
.loc 1 781 4
cvta.const.u64 %r632,_C_time_locale;
ld.s32 %r633,[%r427+16];
add.u64 %r634,%r633,12;
shl.b64 %r635,%r634,3;
add.u64 %r636,%r632,%r635;
ld.u64 %r60,[%r636];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r60;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r638,[%value_in];
}
.loc 1 782 4
setp.eq.u64 %r639,%r638,0;
@ %r639 bra $L74;
.loc 1 784 11
setp.ge.u64 %r640,%r423,%r1325;
@ %r640 bra $L75;
add.u64 %r412,%r423,%r638;
mov.u64 %r63,%r423;
bra $L82;
$L83:
setp.ge.u64 %r641,%r63,%r1325;
@ %r641 bra $L75;
$L82:
.loc 1 785 10
add.u64 %r63,%r63,1;
.loc 1 785 21
sub.u64 %r642,%r63,%r423;
add.u64 %r643,%r60,%r642;
.loc 1 785 14
add.u64 %r644,%r424,%r63;
ld.u8 %r645,[%r643+-1];
st.u8 [%r644+-1],%r645;
.loc 1 782 4
setp.ne.u64 %r646,%r63,%r412;
@ %r646 bra $L83;
mov.u64 %r423,%r63;
bra $L74;
$L53:
.loc 1 796 6
cvta.const.u64 %r647,_C_time_locale;
ld.u64 %r66,[%r647+320];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r649,[%value_in];
}
.loc 1 797 4
bra $L84;
$L67:
.loc 1 799 4
cvta.const.u64 %r650,_C_time_locale;
ld.u64 %r66,[%r650+456];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r652,[%value_in];
}
.loc 1 800 4
bra $L84;
$L72:
.loc 1 807 6
cvta.const.u64 %r653,_C_time_locale;
ld.u64 %r66,[%r653+312];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r655,[%value_in];
}
.loc 1 808 4
bra $L84;
$L45:
.loc 1 815 6
cvta.const.u64 %r656,_C_time_locale;
ld.u64 %r66,[%r656+304];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r66;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r658,[%value_in];
}
$L84:
.loc 1 817 7
ld.s8 %r660,[%r66];
cvt.u16.u32 %r659,%r660;
setp.eq.u16 %r661,%r659,0;
@ %r661 bra $L74;
.loc 1 820 14
sub.u64 %r666,%r425,%r423;
add.u64 %r667,%r424,%r423;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r667;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r666;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r66;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r427;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r668,[%value_in];
}
.loc 1 820 12
cvt.u32.u64 %r71,%r668;
.loc 1 822 11
setp.le.s32 %r669,%r71,0;
@ %r669 bra $L75;
.loc 1 823 9
cvt.s64.s32 %r670,%r71;
add.u64 %r423,%r423,%r670;
bra $L74;
$L32:
.loc 1 859 18
ld.u32 %r73,[%r427+20];
.loc 1 871 9
max.u64 %r671,%r35,2;
.loc 1 859 28
set.u32.lt.s32 %r673,%r73,-1900;
cvt.s64.s32 %r672,%r673;
.loc 1 871 9
add.u64 %r421,%r671,%r672;
.loc 1 862 5
setp.lt.s32 %r675,%r73,0;
@ %r675 bra $L85;
.loc 1 861 22
div.s32 %r677,%r73,100;
.loc 1 862 5
add.u32 %r76,%r677,19;
.loc 1 863 6
setp.ne.u32 %r678,%r79,0;
@ %r678 bra $L86;
.loc 1 857 9
cvta.const.u64 %r85,$LC2;
.loc 1 858 9
cvta.const.u64 %r86,$LC0;
bra $L87;
$L85:
.loc 1 862 7
add.u32 %r680,%r73,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r680;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r681,[%value_in];
}
.loc 1 862 5
div.s32 %r76,%r681,100;
.loc 1 863 6
setp.eq.u32 %r682,%r79,0;
@ %r682 bra $L161;
.loc 1 866 19
set.u32.gt.s32 %r684,%r681,9999;
neg.s32 %r685,%r684;
.loc 1 866 33
cvt.u16.u32 %r687,%r79;
set.u32.eq.u16 %r688,%r687,43;
neg.s32 %r689,%r688;
.loc 1 866 26
cvt.u16.u32 %r691,%r685;
cvt.u16.u32 %r692,%r689;
and.b16 %r690,%r691,%r692;
.loc 1 866 10
cvt.u32.u16 %r693,%r690;
cvt.u16.u8 %r694,%r693;
setp.ne.u16 %r695,%r694,0;
@ %r695 bra $L162;
$L154:
.loc 1 858 9
cvta.const.u64 %r86,$LC0;
.loc 1 865 11
cvta.const.u64 %r85,$LC1;
bra $L88;
$L161:
.loc 1 858 9
cvta.const.u64 %r86,$LC0;
.loc 1 857 9
cvta.const.u64 %r85,$LC2;
bra $L88;
$L162:
.loc 1 867 13
cvta.const.u64 %r86,$LC3;
.loc 1 865 11
cvta.const.u64 %r85,$LC1;
$L88:
.loc 1 871 9
setp.ge.s32 %r696,%r73,-1900;
@ %r696 bra $L87;
cvta.const.u64 %r86,$LC4;
bra $L87;
$L177:
.loc 1 865 11
cvta.const.u64 %r85,$LC1;
.loc 1 867 13
cvta.const.u64 %r86,$LC3;
$L87:
.loc 1 871 9
sub.u64 %r700,%r425,%r423;
add.u64 %r701,%r424,%r423;
st.u32 [%stack+16],%r76;
st.u64 [%stack+8],%r421;
st.u64 [%stack],%r86;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r701;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r700;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r85;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r702,[%value_in];
}
.loc 1 874 13
setp.lt.s32 %r704,%r702,0;
@ %r704 bra $L75;
cvt.s64.s32 %r705,%r702;
add.u64 %r423,%r423,%r705;
setp.le.u64 %r706,%r425,%r423;
@ ! %r706 bra $L74;
bra $L75;
$L223:
.loc 1 901 10
ld.u32 %r89,[%r427+12];
setp.eq.u16 %r708,%r475,100;
@ %r708 bra $L163;
cvta.const.u64 %r92,$LC6;
bra $L89;
$L163:
cvta.const.u64 %r92,$LC5;
$L89:
sub.u64 %r712,%r425,%r423;
add.u64 %r713,%r424,%r423;
st.u32 [%stack],%r89;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r713;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r712;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r92;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r714,[%value_in];
}
.loc 1 904 4
setp.lt.s32 %r716,%r714,0;
@ %r716 bra $L75;
cvt.s64.s32 %r717,%r714;
add.u64 %r423,%r423,%r717;
setp.le.u64 %r718,%r425,%r423;
@ ! %r718 bra $L74;
bra $L75;
$L26:
.loc 1 911 11
ld.u32 %r95,[%r427+20];
.loc 1 908 10
setp.lt.s32 %r719,%r95,0;
@ %r719 bra $L90;
rem.s32 %r96,%r95,100;
bra $L91;
$L90:
.loc 1 912 8
add.u32 %r721,%r95,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r721;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r722,[%value_in];
}
.loc 1 908 10
rem.s32 %r96,%r722,100;
$L91:
sub.u64 %r726,%r425,%r423;
add.u64 %r727,%r424,%r423;
st.u32 [%stack+8],%r96;
ld.u32 %r728,[%r427+12];
st.u32 [%stack+4],%r728;
ld.u32 %r730,[%r427+16];
add.u32 %r729,%r730,1;
st.u32 [%stack],%r729;
cvta.const.u64 %r725,$LC7;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r727;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r726;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r725;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r731,[%value_in];
}
.loc 1 913 11
setp.lt.s32 %r733,%r731,0;
@ %r733 bra $L75;
cvt.s64.s32 %r734,%r731;
add.u64 %r423,%r423,%r734;
setp.le.u64 %r735,%r425,%r423;
@ ! %r735 bra $L74;
bra $L75;
$L35:
.loc 1 920 13
mov.u32 %r736,37;
st.u8 [%frame],%r736;
.loc 1 921 9
setp.eq.u32 %r737,%r79,0;
@ %r737 bra $L92;
.loc 1 922 15
cvt.u32.u32 %r738,%r79;
st.u8 [%frame+1],%r738;
max.u64 %r106,%r35,6;
.loc 1 929 12
add.u64 %r108,%r106,-6;
.loc 1 930 9
setp.ne.u64 %r739,%r106,6;
@ %r739 bra $L93;
$L95:
.loc 1 929 12
mov.u64 %r111,%r1328;
bra $L94;
$L92:
.loc 1 924 15
mov.u32 %r740,43;
st.u8 [%frame+1],%r740;
.loc 1 929 12
mov.u64 %r108,4;
$L93:
.loc 1 932 9
st.u64 [%stack],%r108;
cvta.const.u64 %r743,$LC8;
mov.u64 %r742,30;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1328;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r742;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r743;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r745,[%value_in];
}
.loc 1 933 6
setp.le.s32 %r747,%r745,0;
@ %r747 bra $L95;
.loc 1 934 9
cvt.s64.s32 %r749,%r745;
add.u64 %r111,%r1328,%r749;
$L94:
.loc 1 936 6
cvta.const.u64 %r751,$LC9;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r111;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r751;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r752,[%value_in];
}
.loc 1 937 12
sub.u64 %r757,%r425,%r423;
add.u64 %r758,%r424,%r423;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r758;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r757;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r427;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r759,[%value_in];
}
.loc 1 937 10
cvt.u32.u64 %r115,%r759;
.loc 1 939 9
setp.le.s32 %r760,%r115,0;
@ %r760 bra $L96;
.loc 1 940 14
cvt.s64.s32 %r761,%r115;
add.u64 %r423,%r423,%r761;
bra $L74;
$L96:
.loc 1 942 15
mov.u64 %r423,0;
bra $L11;
$L51:
ld.u32 %r369,[%r427+20];
.loc 1 949 19
ld.u32 %r765,[%r427+28];
ld.u32 %r766,[%r427+24];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r369;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r766;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r765;
call (%value_in),iso_year_adjust$isra$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r767,[%value_in];
}
mov.u32 %r117,%r767;
.loc 1 951 3
setp.lt.s32 %r768,%r369,0;
@ %r768 bra $L97;
rem.s32 %r119,%r369,100;
bra $L98;
$L97:
.loc 1 951 5
add.u32 %r770,%r369,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r770;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r771,[%value_in];
}
.loc 1 951 3
rem.s32 %r119,%r771,100;
$L98:
.loc 1 952 9
setp.ge.s32 %r772,%r767,0;
@ %r772 bra $L99;
.loc 1 952 21
ld.u32 %r773,[%r427+20];
setp.lt.s32 %r774,%r773,-1899;
.loc 1 953 10
selp.u32 %r117,1,%r767,%r774;
bra $L100;
$L99:
.loc 1 954 14
setp.eq.u32 %r775,%r767,0;
@ %r775 bra $L100;
.loc 1 954 26
ld.u32 %r776,[%r427+20];
setp.ge.s32 %r777,%r776,-1900;
.loc 1 955 10
selp.u32 %r117,%r767,-1,%r777;
$L100:
.loc 1 956 12
sub.u64 %r781,%r425,%r423;
add.u64 %r782,%r424,%r423;
.loc 1 957 15
add.u32 %r783,%r117,%r119;
.loc 1 957 25
rem.s32 %r785,%r783,100;
.loc 1 957 31
add.u32 %r786,%r785,100;
.loc 1 956 12
rem.s32 %r790,%r786,100;
st.u32 [%stack],%r790;
cvta.const.u64 %r780,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r782;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r781;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r780;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r791,[%value_in];
}
.loc 1 958 13
setp.lt.s32 %r793,%r791,0;
@ %r793 bra $L75;
cvt.s64.s32 %r794,%r791;
add.u64 %r423,%r423,%r794;
setp.le.u64 %r795,%r425,%r423;
@ ! %r795 bra $L74;
bra $L75;
$L33:
.loc 1 966 22
ld.u32 %r132,[%r427+20];
.loc 1 966 32
set.u32.lt.s32 %r797,%r132,-1900;
neg.s32 %r798,%r797;
cvt.u32.u32 %r796,%r798;
cvt.u32.u8 %r133,%r796;
.loc 1 966 10
mov.u32 %r134,%r133;
.loc 1 967 19
ld.u32 %r802,[%r427+28];
ld.u32 %r803,[%r427+24];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r132;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r803;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r802;
call (%value_in),iso_year_adjust$isra$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r804,[%value_in];
}
mov.u32 %r135,%r804;
.loc 1 970 8
setp.lt.s32 %r805,%r132,0;
@ %r805 bra $L101;
.loc 1 969 25
div.s32 %r807,%r132,100;
.loc 1 970 8
add.u32 %r137,%r807,19;
bra $L102;
$L101:
.loc 1 970 10
add.u32 %r809,%r132,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r809;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r810,[%value_in];
}
.loc 1 970 8
div.s32 %r137,%r810,100;
.loc 1 971 22
ld.u32 %r132,[%r427+20];
.loc 1 972 8
setp.lt.s32 %r811,%r132,0;
@ %r811 bra $L103;
$L102:
rem.s32 %r140,%r132,100;
bra $L104;
$L103:
.loc 1 972 10
add.u32 %r813,%r132,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r813;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r814,[%value_in];
}
.loc 1 972 8
rem.s32 %r140,%r814,100;
$L104:
.loc 1 973 9
setp.ge.s32 %r815,%r804,0;
@ %r815 bra $L105;
.loc 1 973 21
ld.u32 %r816,[%r427+20];
setp.lt.s32 %r817,%r816,-1899;
@ %r817 bra $L165;
bra $L224;
$L105:
.loc 1 975 22
set.u32.gt.s32 %r819,%r804,0;
neg.s32 %r820,%r819;
.loc 1 975 26
cvt.u16.u32 %r822,%r820;
cvt.u16.u32 %r823,%r133;
and.b16 %r821,%r822,%r823;
.loc 1 975 14
cvt.u32.u16 %r824,%r821;
cvt.u16.u8 %r825,%r824;
setp.ne.u16 %r826,%r825,0;
@ %r826 bra $L108;
bra $L106;
$L165:
.loc 1 974 22
mov.u32 %r135,1;
.loc 1 974 13
mov.u32 %r134,%r135;
$L106:
.loc 1 977 11
add.u32 %r47,%r135,%r140;
.loc 1 978 9
setp.ne.u32 %r827,%r47,-1;
@ %r827 bra $L109;
$L153:
.loc 1 981 3
add.u32 %r137,%r137,-1;
.loc 1 980 8
mov.u32 %r47,99;
bra $L110;
$L109:
.loc 1 983 14
setp.ne.u32 %r828,%r47,100;
@ %r828 bra $L110;
.loc 1 986 3
add.u32 %r137,%r137,1;
.loc 1 985 8
mov.u32 %r47,0;
$L110:
.loc 1 990 38
mad.lo.u32 %r390,%r137,100,%r47;
.loc 1 991 9
setp.eq.u32 %r830,%r134,0;
@ %r830 bra $L111;
$L157:
.loc 1 992 15
mov.u32 %r831,45;
st.u8 [%frame],%r831;
.loc 1 998 9
setp.eq.u64 %r832,%r35,0;
@ %r832 bra $L166;
$L113:
.loc 1 999 8
add.u64 %r35,%r35,-1;
mov.u64 %r378,%r1327;
bra $L112;
$L111:
.loc 1 993 19
cvt.u16.u32 %r834,%r79;
set.u32.eq.u16 %r835,%r834,43;
neg.s32 %r836,%r835;
.loc 1 993 40
set.u32.gt.u32 %r838,%r390,9999;
neg.s32 %r839,%r838;
.loc 1 993 30
cvt.u16.u32 %r841,%r836;
cvt.u16.u32 %r842,%r839;
and.b16 %r840,%r841,%r842;
.loc 1 993 14
cvt.u32.u16 %r843,%r840;
cvt.u16.u8 %r844,%r843;
setp.eq.u16 %r845,%r844,0;
@ %r845 bra $L167;
.loc 1 995 10
mov.u32 %r846,43;
st.u8 [%frame],%r846;
.loc 1 998 9
setp.ne.u64 %r847,%r35,0;
@ %r847 bra $L113;
bra $L225;
$L166:
mov.u64 %r378,%r1327;
bra $L112;
$L167:
.loc 1 988 24
mov.u64 %r378,%frame;
$L112:
.loc 1 1000 13
mov.u32 %r848,37;
st.u8 [%r378],%r848;
.loc 1 1001 9
setp.ne.u32 %r849,%r79,0;
@ %r849 bra $L115;
.loc 1 1000 10
add.u64 %r151,%r378,1;
bra $L116;
$L115:
.loc 1 1002 12
add.u64 %r151,%r378,2;
.loc 1 1002 15
mov.u32 %r850,48;
st.u8 [%r378+1],%r850;
$L116:
.loc 1 1003 6
cvta.const.u64 %r852,$LC10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r151;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r852;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r853,[%value_in];
}
.loc 1 1004 12
sub.u64 %r857,%r425,%r423;
add.u64 %r858,%r424,%r423;
st.u32 [%stack+8],%r390;
st.u64 [%stack],%r35;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r858;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r857;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r859,[%value_in];
}
.loc 1 1005 16
setp.lt.s32 %r861,%r859,0;
@ %r861 bra $L117;
.loc 1 1005 36
cvt.s64.s32 %r862,%r859;
add.u64 %r423,%r423,%r862;
.loc 1 1005 26
setp.gt.u64 %r863,%r425,%r423;
@ %r863 bra $L74;
$L117:
.loc 1 1006 22
mov.u64 %r423,0;
bra $L11;
$L156:
.loc 1 1022 10
sub.u64 %r867,%r425,%r423;
add.u64 %r868,%r424,%r423;
st.u32 [%stack],%r361;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r868;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r867;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r159;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r869,[%value_in];
}
.loc 1 1025 11
setp.lt.s32 %r871,%r869,0;
@ %r871 bra $L75;
cvt.s64.s32 %r872,%r869;
add.u64 %r423,%r423,%r872;
setp.le.u64 %r873,%r425,%r423;
@ ! %r873 bra $L74;
bra $L75;
$L155:
.loc 1 1035 11
rem.s32 %r163,%r65,12;
.loc 1 1041 14
cvt.u16.u32 %r874,%r383;
setp.eq.u16 %r875,%r874,73;
@ %r875 bra $L168;
cvta.const.u64 %r166,$LC6;
bra $L119;
$L168:
cvta.const.u64 %r166,$LC5;
$L119:
sub.u64 %r879,%r425,%r423;
add.u64 %r880,%r424,%r423;
st.u32 [%stack],%r163;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r880;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r879;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r166;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r881,[%value_in];
}
.loc 1 1043 6
setp.lt.s32 %r883,%r881,0;
@ %r883 bra $L75;
cvt.s64.s32 %r884,%r881;
add.u64 %r423,%r423,%r884;
setp.le.u64 %r885,%r425,%r423;
@ ! %r885 bra $L74;
bra $L75;
$L60:
.loc 1 1047 10
sub.u64 %r889,%r425,%r423;
add.u64 %r890,%r424,%r423;
ld.u32 %r892,[%r427+28];
add.u32 %r891,%r892,1;
st.u32 [%stack],%r891;
cvta.const.u64 %r888,$LC11;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r890;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r889;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r888;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r893,[%value_in];
}
.loc 1 1049 11
setp.lt.s32 %r895,%r893,0;
@ %r895 bra $L75;
cvt.s64.s32 %r896,%r893;
add.u64 %r423,%r423,%r896;
setp.le.u64 %r897,%r425,%r423;
@ ! %r897 bra $L74;
bra $L75;
$L62:
.loc 1 1057 12
sub.u64 %r901,%r425,%r423;
add.u64 %r902,%r424,%r423;
ld.u32 %r904,[%r427+16];
add.u32 %r903,%r904,1;
st.u32 [%stack],%r903;
cvta.const.u64 %r900,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r902;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r901;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r900;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r905,[%value_in];
}
.loc 1 1059 11
setp.lt.s32 %r907,%r905,0;
@ %r907 bra $L75;
cvt.s64.s32 %r908,%r905;
add.u64 %r423,%r423,%r908;
setp.le.u64 %r909,%r425,%r423;
@ ! %r909 bra $L74;
bra $L75;
$L24:
.loc 1 1067 12
sub.u64 %r913,%r425,%r423;
add.u64 %r914,%r424,%r423;
ld.u32 %r915,[%r427+4];
st.u32 [%stack],%r915;
cvta.const.u64 %r912,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r914;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r913;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r912;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r916,[%value_in];
}
.loc 1 1069 11
setp.lt.s32 %r918,%r916,0;
@ %r918 bra $L75;
cvt.s64.s32 %r919,%r916;
add.u64 %r423,%r423,%r919;
setp.le.u64 %r920,%r425,%r423;
@ ! %r920 bra $L74;
bra $L75;
$L49:
.loc 1 1072 7
setp.ge.u64 %r922,%r423,%r1325;
@ %r922 bra $L75;
.loc 1 1073 17
add.u64 %r923,%r424,%r423;
mov.u32 %r924,10;
st.u8 [%r923],%r924;
.loc 1 1073 13
add.u64 %r423,%r423,1;
.loc 1 1076 4
bra $L74;
$L42:
.loc 1 1079 4
cvta.const.u64 %r925,_C_time_locale;
ld.u32 %r927,[%r427+8];
set.u32.gt.s32 %r928,%r927,11;
neg.s32 %r929,%r928;
cvt.s64.s32 %r930,%r929;
add.u64 %r931,%r930,40;
shl.b64 %r932,%r931,3;
add.u64 %r933,%r925,%r932;
ld.u64 %r192,[%r933+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r192;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r936,[%value_in];
}
.loc 1 1080 4
setp.eq.u64 %r937,%r936,0;
@ %r937 bra $L74;
.loc 1 1082 11
setp.ge.u64 %r938,%r423,%r1325;
@ %r938 bra $L75;
add.u64 %r405,%r423,%r936;
mov.u64 %r203,%r423;
bra $L120;
$L123:
setp.le.u64 %r939,%r1325,%r203;
@ %r939 bra $L75;
$L120:
.loc 1 1083 38
sub.u64 %r940,%r203,%r423;
add.u64 %r941,%r192,%r940;
ld.s8 %r205,[%r941];
.loc 1 1083 14
ld.s8 %r943,[%r32];
cvt.u16.u32 %r942,%r943;
setp.ne.u16 %r944,%r942,80;
@ %r944 bra $L121;
.loc 1 1083 38
cvt.u32.u32 %r945,%r205;
cvt.u32.u8 %r195,%r945;
cvt.u64.u8 %r946,%r945;
add.u64 %r949,%r946,%r1326;
ld.u8 %r1330,[%r949];
mov.u16 %r952,%r1330;
and.b16 %r951,%r952,3;
cvt.u32.u16 %r955,%r951;
cvt.s32.s8 %r954,%r955;
cvt.u16.u32 %r953,%r954;
setp.ne.u16 %r956,%r953,1;
@ %r956 bra $L121;
add.u32 %r957,%r195,32;
.loc 1 1083 14
cvt.u32.u32 %r958,%r957;
cvt.s32.s8 %r205,%r958;
$L121:
.loc 1 1083 10
add.u64 %r203,%r203,1;
.loc 1 1083 14
add.u64 %r959,%r424,%r203;
cvt.u32.u32 %r960,%r205;
st.u8 [%r959+-1],%r960;
.loc 1 1080 4
setp.ne.u64 %r961,%r203,%r405;
@ %r961 bra $L123;
mov.u64 %r423,%r203;
bra $L74;
$L43:
.loc 1 1090 17
sub.u64 %r965,%r425,%r423;
add.u64 %r966,%r424,%r423;
ld.u32 %r967,[%r427+4];
st.u32 [%stack+4],%r967;
ld.u32 %r968,[%r427+8];
st.u32 [%stack],%r968;
cvta.const.u64 %r964,$LC12;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r966;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r965;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r964;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r969,[%value_in];
}
.loc 1 1092 11
setp.lt.s32 %r971,%r969,0;
@ %r971 bra $L75;
cvt.s64.s32 %r972,%r969;
add.u64 %r423,%r423,%r972;
setp.le.u64 %r973,%r425,%r423;
@ ! %r973 bra $L74;
bra $L75;
$L65:
.loc 1 1124 9
ld.u32 %r974,[%r427+32];
setp.lt.s32 %r975,%r974,0;
@ %r975 bra $L169;
.loc 1 1126 3
{
call __tz_lock;
}
.loc 1 1127 6
setp.ne.u32 %r976,%r118,0;
@ %r976 bra $L125;
.loc 1 1129 7
{
call _tzset_unlocked;
}
$L125:
.loc 1 1144 23
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r977,[%value_in];
}
.loc 1 1148 42
ld.u32 %r979,[%r427+32];
set.u32.gt.s32 %r980,%r979,0;
neg.s32 %r981,%r980;
.loc 1 1148 46
cvt.s64.s32 %r982,%r981;
shl.b64 %r984,%r982,2;
add.u64 %r985,%r984,%r982;
shl.b64 %r986,%r985,3;
add.u64 %r987,%r977,%r986;
.loc 1 1148 10
ld.u64 %r989,[%r987+40];
neg.s64 %r219,%r989;
.loc 1 1150 3
{
call __tz_unlock;
}
mov.u32 %r118,1;
bra $L124;
$L169:
.loc 1 1121 11
mov.u64 %r219,0;
$L124:
.loc 1 1153 28
ld.u32 %r220,[%r427+20];
.loc 1 1152 12
sub.u64 %r993,%r425,%r423;
add.u64 %r994,%r424,%r423;
.loc 1 1153 12
cvt.s64.s32 %r995,%r220;
.loc 1 1153 38
add.u64 %r996,%r995,-69;
.loc 1 1153 43
shr.s64 %r1000,%r996,63;
and.b64 %r1001,%r1000,3;
add.u64 %r1002,%r1001,%r996;
shr.s64 %r1003,%r1002,2;
.loc 1 1154 23
add.u32 %r1004,%r220,-1;
.loc 1 1154 27
div.s32 %r1006,%r1004,100;
cvt.s64.s32 %r1007,%r1006;
.loc 1 1154 5
sub.u64 %r1008,%r1003,%r1007;
.loc 1 1155 23
add.u32 %r1009,%r220,299;
.loc 1 1155 29
div.s32 %r1011,%r1009,400;
cvt.s64.s32 %r1012,%r1011;
.loc 1 1155 5
add.u64 %r1013,%r1008,%r1012;
.loc 1 1156 23
add.u32 %r1014,%r220,-70;
.loc 1 1156 28
mul.lo.u32 %r1015,%r1014,365;
cvt.s64.s32 %r1016,%r1015;
.loc 1 1156 5
add.u64 %r1017,%r1013,%r1016;
.loc 1 1156 40
ld.s32 %r1018,[%r427+28];
.loc 1 1156 33
add.u64 %r1019,%r1017,%r1018;
.loc 1 1156 50
add.u64 %r1021,%r1019,%r1019;
add.u64 %r1022,%r1021,%r1019;
shl.b64 %r1023,%r1022,3;
.loc 1 1157 17
ld.s32 %r1024,[%r427+8];
.loc 1 1157 10
add.u64 %r1025,%r1023,%r1024;
.loc 1 1157 27
shl.b64 %r1027,%r1025,4;
sub.u64 %r1028,%r1027,%r1025;
shl.b64 %r1029,%r1028,2;
.loc 1 1157 38
ld.s32 %r1030,[%r427+4];
.loc 1 1157 31
add.u64 %r1031,%r1029,%r1030;
.loc 1 1157 47
shl.b64 %r1033,%r1031,4;
sub.u64 %r1034,%r1033,%r1031;
shl.b64 %r1035,%r1034,2;
.loc 1 1158 15
ld.s32 %r1036,[%r427];
.loc 1 1158 8
add.u64 %r1037,%r1035,%r1036;
.loc 1 1152 12
sub.u64 %r1038,%r1037,%r219;
st.u64 [%stack],%r1038;
cvta.const.u64 %r992,$LC13;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r994;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r993;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r992;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1039,[%value_in];
}
.loc 1 1159 6
setp.lt.s32 %r1041,%r1039,0;
@ %r1041 bra $L75;
cvt.s64.s32 %r1042,%r1039;
add.u64 %r423,%r423,%r1042;
setp.le.u64 %r1043,%r425,%r423;
@ ! %r1043 bra $L74;
bra $L75;
$L40:
.loc 1 1168 12
sub.u64 %r1047,%r425,%r423;
add.u64 %r1048,%r424,%r423;
ld.u32 %r1049,[%r427];
st.u32 [%stack],%r1049;
cvta.const.u64 %r1046,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1048;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1047;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1046;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1050,[%value_in];
}
.loc 1 1170 11
setp.lt.s32 %r1052,%r1050,0;
@ %r1052 bra $L75;
cvt.s64.s32 %r1053,%r1050;
add.u64 %r423,%r423,%r1053;
setp.le.u64 %r1054,%r425,%r423;
@ ! %r1054 bra $L74;
bra $L75;
$L68:
.loc 1 1173 7
setp.ge.u64 %r1056,%r423,%r1325;
@ %r1056 bra $L75;
.loc 1 1174 17
add.u64 %r1057,%r424,%r423;
mov.u32 %r1058,9;
st.u8 [%r1057],%r1058;
.loc 1 1174 13
add.u64 %r423,%r423,1;
.loc 1 1177 4
bra $L74;
$L44:
.loc 1 1179 17
sub.u64 %r1062,%r425,%r423;
add.u64 %r1063,%r424,%r423;
ld.u32 %r1064,[%r427];
st.u32 [%stack+8],%r1064;
ld.u32 %r1065,[%r427+4];
st.u32 [%stack+4],%r1065;
ld.u32 %r1066,[%r427+8];
st.u32 [%stack],%r1066;
cvta.const.u64 %r1061,$LC14;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1063;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1062;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1061;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1067,[%value_in];
}
.loc 1 1181 11
setp.lt.s32 %r1069,%r1067,0;
@ %r1069 bra $L75;
cvt.s64.s32 %r1070,%r1067;
add.u64 %r423,%r423,%r1070;
setp.le.u64 %r1071,%r425,%r423;
@ ! %r1071 bra $L74;
bra $L75;
$L63:
.loc 1 1196 14
setp.ge.u64 %r1073,%r423,%r1325;
@ %r1073 bra $L75;
.loc 1 1198 24
ld.u32 %r272,[%r427+24];
.loc 1 696 13
add.u64 %r387,%r423,1;
.loc 1 696 7
add.u64 %r385,%r424,%r423;
.loc 1 1198 18
setp.ne.u32 %r1074,%r272,0;
@ %r1074 bra $L126;
.loc 1 1199 28
mov.u32 %r1075,55;
st.u8 [%r385],%r1075;
.loc 1 1199 24
mov.u64 %r423,%r387;
bra $L74;
$L126:
.loc 1 1201 38
cvt.u16.u32 %r1078,%r272;
add.u16 %r1077,%r1078,48;
.loc 1 1201 28
cvt.u32.u16 %r1079,%r1077;
st.u8 [%r385],%r1079;
.loc 1 1201 24
mov.u64 %r423,%r387;
bra $L74;
$L38:
.loc 1 1214 12
sub.u64 %r1083,%r425,%r423;
add.u64 %r1084,%r424,%r423;
.loc 1 1215 21
ld.u32 %r1086,[%r427+28];
add.u32 %r1085,%r1086,7;
.loc 1 1215 25
ld.u32 %r1088,[%r427+24];
sub.u32 %r1087,%r1085,%r1088;
.loc 1 1214 12
div.s32 %r1090,%r1087,7;
st.u32 [%stack],%r1090;
cvta.const.u64 %r1082,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1084;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1083;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1082;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1091,[%value_in];
}
.loc 1 1217 11
setp.lt.s32 %r1093,%r1091,0;
@ %r1093 bra $L75;
cvt.s64.s32 %r1094,%r1091;
add.u64 %r423,%r423,%r1094;
setp.le.u64 %r1095,%r425,%r423;
@ ! %r1095 bra $L74;
bra $L75;
$L47:
ld.u32 %r375,[%r427+20];
ld.u32 %r376,[%r427+24];
ld.u32 %r377,[%r427+28];
.loc 1 1221 19
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r375;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r376;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r377;
call (%value_in),iso_year_adjust$isra$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1099,[%value_in];
}
.loc 1 1222 55
setp.eq.u32 %r1100,%r376,0;
@ %r1100 bra $L170;
add.u32 %r286,%r376,-1;
bra $L127;
$L170:
mov.u32 %r286,6;
$L127:
.loc 1 1224 9
setp.gt.s32 %r1101,%r1099,0;
@ %r1101 bra $L171;
.loc 1 1226 14
setp.ne.u32 %r1102,%r1099,0;
@ %r1102 bra $L129;
.loc 1 1223 33
add.u32 %r1103,%r377,10;
.loc 1 1223 38
sub.u32 %r1104,%r1103,%r286;
.loc 1 1223 10
div.s32 %r289,%r1104,7;
bra $L128;
$L129:
.loc 1 1230 27
sub.u32 %r290,%r286,%r377;
.loc 1 1231 10
setp.lt.s32 %r1105,%r375,0;
selp.u32 %r291,1899,-101,%r1105;
add.u32 %r292,%r291,%r375;
and.b32 %r1106,%r292,3;
setp.ne.u32 %r1107,%r1106,0;
@ %r1107 bra $L131;
rem.s32 %r1109,%r292,100;
setp.ne.u32 %r1115,%r1109,0;
@ %r1115 bra $L173;
$L131:
rem.s32 %r1117,%r292,400;
set.u32.eq.u32 %r1124,%r1117,0;
neg.s32 %r297,%r1124;
bra $L132;
$L173:
mov.u32 %r297,1;
$L132:
.loc 1 1231 8
sub.u32 %r1126,%r290,%r297;
.loc 1 1230 13
setp.le.s32 %r1127,%r1126,4;
selp.u32 %r289,53,52,%r1127;
bra $L128;
$L171:
.loc 1 1225 8
mov.u32 %r289,1;
$L128:
.loc 1 1240 14
sub.u64 %r1131,%r425,%r423;
add.u64 %r1132,%r424,%r423;
st.u32 [%stack],%r289;
cvta.const.u64 %r1130,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1132;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1131;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1130;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1133,[%value_in];
}
.loc 1 1241 13
setp.lt.s32 %r1135,%r1133,0;
@ %r1135 bra $L75;
cvt.s64.s32 %r1136,%r1133;
add.u64 %r423,%r423,%r1136;
setp.le.u64 %r1137,%r425,%r423;
@ ! %r1137 bra $L74;
bra $L75;
$L71:
.loc 1 1255 7
setp.ge.u64 %r1139,%r423,%r1325;
@ %r1139 bra $L75;
.loc 1 1256 24
add.u64 %r1140,%r424,%r423;
.loc 1 1256 34
ld.u16 %r1144,[%r427+24];
add.u16 %r1143,%r1144,48;
.loc 1 1256 24
cvt.u32.u16 %r1145,%r1143;
st.u8 [%r1140],%r1145;
.loc 1 1256 20
add.u64 %r423,%r423,1;
.loc 1 1259 4
bra $L74;
$L48:
.loc 1 1262 23
ld.u32 %r310,[%r427+24];
.loc 1 1262 55
setp.eq.u32 %r1146,%r310,0;
@ %r1146 bra $L175;
add.u32 %r311,%r310,-1;
bra $L133;
$L175:
mov.u32 %r311,6;
$L133:
.loc 1 1269 14
sub.u64 %r1150,%r425,%r423;
add.u64 %r1151,%r424,%r423;
.loc 1 1263 29
ld.u32 %r1153,[%r427+28];
add.u32 %r1152,%r1153,7;
.loc 1 1263 33
sub.u32 %r1154,%r1152,%r311;
.loc 1 1263 11
div.s32 %r1156,%r1154,7;
.loc 1 1269 14
st.u32 [%stack],%r1156;
cvta.const.u64 %r1149,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1151;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1150;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1149;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1157,[%value_in];
}
.loc 1 1270 13
setp.lt.s32 %r1159,%r1157,0;
@ %r1159 bra $L75;
cvt.s64.s32 %r1160,%r1157;
add.u64 %r423,%r423,%r1160;
setp.le.u64 %r1161,%r425,%r423;
@ ! %r1161 bra $L74;
bra $L75;
$L69:
.loc 1 1284 21
ld.u32 %r320,[%r427+20];
.loc 1 1285 9
setp.lt.s32 %r1162,%r320,0;
@ %r1162 bra $L134;
rem.s32 %r321,%r320,100;
bra $L135;
$L134:
.loc 1 1285 11
add.u32 %r1164,%r320,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r1164;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r1165,[%value_in];
}
.loc 1 1285 9
rem.s32 %r321,%r1165,100;
$L135:
.loc 1 1291 13
sub.u64 %r1169,%r425,%r423;
add.u64 %r1170,%r424,%r423;
st.u32 [%stack],%r321;
cvta.const.u64 %r1168,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1170;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1169;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1168;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1171,[%value_in];
}
.loc 1 1294 15
setp.lt.s32 %r1173,%r1171,0;
@ %r1173 bra $L75;
cvt.s64.s32 %r1174,%r1171;
add.u64 %r423,%r423,%r1174;
setp.le.u64 %r1175,%r425,%r423;
@ ! %r1175 bra $L74;
bra $L75;
$L46:
.loc 1 1308 24
ld.u32 %r328,[%r427+20];
.loc 1 1312 11
setp.ge.s32 %r1176,%r328,-1900;
@ %r1176 bra $L136;
.loc 1 1314 12
mov.u32 %r1177,45;
st.u8 [%frame],%r1177;
.loc 1 1315 10
mov.u32 %r1178,-1900;
sub.u32 %r379,%r1178,%r328;
.loc 1 1322 11
setp.ne.u64 %r1179,%r35,0;
@ %r1179 bra $L137;
.loc 1 1314 9
mov.u64 %r381,%r1327;
bra $L138;
$L136:
.loc 1 1310 26
add.u32 %r379,%r328,1900;
.loc 1 1317 21
cvt.u16.u32 %r1181,%r79;
set.u32.eq.u16 %r1182,%r1181,43;
neg.s32 %r1183,%r1182;
.loc 1 1317 40
set.u32.gt.u32 %r1185,%r379,9999;
neg.s32 %r1186,%r1185;
.loc 1 1317 32
cvt.u16.u32 %r1188,%r1183;
cvt.u16.u32 %r1189,%r1186;
and.b16 %r1187,%r1188,%r1189;
.loc 1 1317 16
cvt.u32.u16 %r1190,%r1187;
cvt.u16.u8 %r1191,%r1190;
setp.eq.u16 %r1192,%r1191,0;
@ %r1192 bra $L176;
.loc 1 1319 12
mov.u32 %r1193,43;
st.u8 [%frame],%r1193;
.loc 1 1322 11
setp.eq.u64 %r1194,%r35,0;
@ %r1194 bra $L139;
$L137:
.loc 1 1323 3
add.u64 %r35,%r35,-1;
mov.u64 %r381,%r1327;
bra $L138;
$L176:
.loc 1 1307 26
mov.u64 %r381,%frame;
$L138:
.loc 1 1324 15
mov.u32 %r1195,37;
st.u8 [%r381],%r1195;
.loc 1 1325 11
setp.ne.u32 %r1196,%r79,0;
@ %r1196 bra $L140;
.loc 1 1324 12
add.u64 %r333,%r381,1;
bra $L141;
$L140:
.loc 1 1326 7
add.u64 %r333,%r381,2;
.loc 1 1326 10
mov.u32 %r1197,48;
st.u8 [%r381+1],%r1197;
$L141:
.loc 1 1327 8
cvta.const.u64 %r1199,$LC10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1199;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r1200,[%value_in];
}
.loc 1 1328 14
sub.u64 %r1204,%r425,%r423;
add.u64 %r1205,%r424,%r423;
st.u32 [%stack+8],%r379;
st.u64 [%stack],%r35;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1205;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1204;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1206,[%value_in];
}
.loc 1 1330 8
setp.lt.s32 %r1208,%r1206,0;
@ %r1208 bra $L142;
cvt.s64.s32 %r1209,%r1206;
add.u64 %r423,%r423,%r1209;
setp.gt.u64 %r1210,%r425,%r423;
@ %r1210 bra $L74;
$L142:
mov.u64 %r423,0;
bra $L11;
$L73:
.loc 1 1334 14
ld.u32 %r1211,[%r427+32];
setp.lt.s32 %r1212,%r1211,0;
@ %r1212 bra $L144;
.loc 1 1338 8
{
call __tz_lock;
}
.loc 1 1339 11
setp.ne.u32 %r1213,%r118,0;
@ %r1213 bra $L145;
.loc 1 1341 5
{
call _tzset_unlocked;
}
$L145:
.loc 1 1356 28
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r1214,[%value_in];
}
.loc 1 1360 47
ld.u32 %r1216,[%r427+32];
set.u32.gt.s32 %r1217,%r1216,0;
neg.s32 %r1218,%r1217;
.loc 1 1360 51
cvt.s64.s32 %r1219,%r1218;
shl.b64 %r1221,%r1219,2;
add.u64 %r1222,%r1221,%r1219;
shl.b64 %r1223,%r1222,3;
add.u64 %r1224,%r1214,%r1223;
.loc 1 1360 15
ld.u64 %r1226,[%r1224+40];
neg.s64 %r344,%r1226;
.loc 1 1362 8
{
call __tz_unlock;
}
.loc 1 1365 10
div.s64 %r1229,%r344,60;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1229;
call (%value_in),labs,(%out_arg1);
ld.param.u64 %r1230,[%value_in];
}
.loc 1 1363 14
sub.u64 %r1234,%r425,%r423;
add.u64 %r1235,%r424,%r423;
rem.s64 %r1237,%r1230,60;
st.u64 [%stack+8],%r1237;
div.s64 %r1239,%r344,3600;
st.u64 [%stack],%r1239;
cvta.const.u64 %r1233,$LC15;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1235;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1234;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1233;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),sniprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1240,[%value_in];
}
.loc 1 1366 15
setp.lt.s32 %r1242,%r1240,0;
@ %r1242 bra $L75;
cvt.s64.s32 %r1243,%r1240;
add.u64 %r423,%r423,%r1243;
setp.le.u64 %r1244,%r425,%r423;
@ %r1244 bra $L75;
mov.u32 %r118,1;
bra $L74;
$L22:
.loc 1 1370 7
ld.u32 %r1245,[%r427+32];
setp.lt.s32 %r1246,%r1245,0;
@ %r1246 bra $L144;
.loc 1 1375 8
{
call __tz_lock;
}
.loc 1 1376 11
setp.ne.u32 %r1247,%r118,0;
@ %r1247 bra $L146;
.loc 1 1378 5
{
call _tzset_unlocked;
}
$L146:
.loc 1 1389 9
cvta.global.u64 %r1248,_tzname;
.loc 1 1389 35
ld.u32 %r1250,[%r427+32];
set.u32.gt.s32 %r1251,%r1250,0;
neg.s32 %r1252,%r1251;
.loc 1 1389 9
cvt.s64.s32 %r1253,%r1252;
shl.b64 %r1254,%r1253,3;
add.u64 %r1255,%r1248,%r1254;
ld.u64 %r357,[%r1255];
.loc 1 1394 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r357;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r1257,[%value_in];
}
.loc 1 1395 8
setp.ne.u64 %r1258,%r1257,0;
@ %r1258 bra $L147;
mov.u64 %r380,%r423;
bra $L148;
$L150:
.loc 1 1397 8
setp.ge.u64 %r1259,%r360,%r1325;
@ %r1259 bra $L149;
$L151:
.loc 1 1398 14
add.u64 %r360,%r360,1;
.loc 1 1398 25
sub.u64 %r1260,%r360,%r423;
add.u64 %r1261,%r357,%r1260;
.loc 1 1398 18
add.u64 %r1262,%r424,%r360;
ld.u8 %r1263,[%r1261+-1];
st.u8 [%r1262+-1],%r1263;
.loc 1 1395 8
setp.ne.u64 %r1264,%r360,%r380;
@ %r1264 bra $L150;
bra $L148;
$L149:
.loc 1 1401 9
{
call __tz_unlock;
}
.loc 1 1402 16
mov.u64 %r423,0;
bra $L11;
$L147:
.loc 1 1397 8
setp.ge.u64 %r1265,%r423,%r1325;
@ %r1265 bra $L149;
add.u64 %r380,%r423,%r1257;
mov.u64 %r360,%r423;
bra $L151;
$L148:
.loc 1 1405 8
{
call __tz_unlock;
}
mov.u64 %r423,%r380;
mov.u32 %r118,1;
bra $L74;
$L30:
.loc 1 1409 7
setp.ge.u64 %r1267,%r423,%r1325;
@ %r1267 bra $L75;
.loc 1 1410 17
add.u64 %r1268,%r424,%r423;
mov.u32 %r1269,37;
st.u8 [%r1268],%r1269;
.loc 1 1410 13
add.u64 %r423,%r423,1;
$L74:
.loc 1 1417 10
ld.s8 %r1271,[%r32];
cvt.u16.u32 %r1270,%r1271;
setp.eq.u16 %r1272,%r1270,0;
@ %r1272 bra $L16;
$L144:
.loc 1 1418 8
add.u64 %r426,%r32,1;
.loc 1 693 13
bra $L12;
$L16:
.loc 1 1422 6
setp.eq.u64 %r1273,%r425,0;
@ %r1273 bra $L11;
.loc 1 1423 14
add.u64 %r1274,%r424,%r423;
mov.u32 %r1275,0;
st.u8 [%r1274],%r1275;
bra $L11;
$L160:
.loc 1 747 7
mov.u64 %r423,0;
bra $L11;
$L225:
.loc 1 1000 13
mov.u32 %r1277,37;
st.u8 [%frame+1],%r1277;
mov.u64 %r378,%r1327;
bra $L115;
$L224:
.loc 1 977 11
add.u32 %r47,%r804,%r140;
.loc 1 978 9
setp.eq.u32 %r1278,%r47,-1;
@ ! %r1278 bra $L110;
bra $L153;
$L139:
.loc 1 1324 15
mov.u32 %r1279,37;
st.u8 [%frame+1],%r1279;
.loc 1 1319 9
mov.u64 %r381,%r1327;
bra $L140;
$L86:
.loc 1 866 19
set.u32.gt.s32 %r1281,%r76,99;
neg.s32 %r1282,%r1281;
.loc 1 866 33
cvt.u16.u32 %r1284,%r79;
set.u32.eq.u16 %r1285,%r1284,43;
neg.s32 %r1286,%r1285;
.loc 1 866 26
cvt.u16.u32 %r1288,%r1282;
cvt.u16.u32 %r1289,%r1286;
and.b16 %r1287,%r1288,%r1289;
.loc 1 866 10
cvt.u32.u16 %r1290,%r1287;
cvt.u16.u8 %r1291,%r1290;
setp.ne.u16 %r1292,%r1291,0;
@ ! %r1292 bra $L154;
bra $L177;
$L61:
.loc 1 1034 18
ld.u32 %r65,[%r427+8];
.loc 1 1034 33
set.u32.ne.u32 %r1294,%r65,0;
neg.s32 %r1295,%r1294;
set.u32.ne.u32 %r1297,%r65,12;
neg.s32 %r1298,%r1297;
cvt.u16.u32 %r1300,%r1295;
cvt.u16.u32 %r1301,%r1298;
and.b16 %r1299,%r1300,%r1301;
.loc 1 1035 11
cvt.u32.u16 %r1302,%r1299;
cvt.u16.u8 %r1303,%r1302;
setp.ne.u16 %r1304,%r1303,0;
@ %r1304 bra $L155;
mov.u32 %r163,12;
.loc 1 1041 14
cvta.const.u64 %r166,$LC6;
bra $L119;
$L37:
.loc 1 1034 18
ld.u32 %r65,[%r427+8];
.loc 1 1034 33
set.u32.ne.u32 %r1306,%r65,0;
neg.s32 %r1307,%r1306;
set.u32.ne.u32 %r1309,%r65,12;
neg.s32 %r1310,%r1309;
cvt.u16.u32 %r1312,%r1307;
cvt.u16.u32 %r1313,%r1310;
and.b16 %r1311,%r1312,%r1313;
.loc 1 1035 11
cvt.u32.u16 %r1314,%r1311;
cvt.u16.u8 %r1315,%r1314;
setp.ne.u16 %r1316,%r1315,0;
@ %r1316 bra $L155;
mov.u32 %r163,12;
.loc 1 1041 14
cvta.const.u64 %r166,$LC5;
bra $L119;
$L36:
.loc 1 1022 10
ld.u32 %r361,[%r427+8];
cvta.const.u64 %r159,$LC5;
bra $L156;
$L58:
ld.u32 %r361,[%r427+8];
cvta.const.u64 %r159,$LC6;
bra $L156;
$L158:
.loc 1 990 38
mad.lo.u32 %r390,%r137,100,%r391;
bra $L157;
$L108:
.loc 1 977 11
add.u32 %r391,%r140,-1;
.loc 1 978 9
setp.ne.u32 %r1318,%r140,0;
@ %r1318 bra $L158;
.loc 1 981 3
add.u32 %r1319,%r137,-1;
.loc 1 990 38
mad.lo.u32 %r390,%r1319,100,99;
bra $L157;
$L11:
.loc 1 1426 1
mov.u64 %value,%r423;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strftime
.visible .func (.param .u64 %value_out) strftime (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 1445 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 1448 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strftime_l
.visible .func (.param .u64 %value_out) strftime_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 1465 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 1467 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strlcat.o/1612277262  0     0     100666  2593      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strlcat
.visible .func (.param .u64 %value_out) strlcat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strlcat.c"
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: strlcat
.visible .func (.param .u64 %value_out) strlcat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .pred %r38;
.reg .u16 %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .u64 %r45;
.reg .pred %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u64 %r49;
.reg .u32 %r50;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
mov.u64 %r36,%ar2;
.loc 1 55 15
setp.eq.u64 %r37,%r36,0;
@ %r37 bra $L10;
add.u64 %r30,%r34,%r36;
.loc 1 49 24
mov.u64 %r26,%r34;
bra $L3;
$L5:
.loc 1 56 18
add.u64 %r26,%r26,1;
.loc 1 55 15
setp.eq.u64 %r38,%r26,%r30;
@ %r38 bra $L4;
$L3:
.loc 1 55 25
ld.s8 %r40,[%r26];
cvt.u16.u32 %r39,%r40;
setp.ne.u16 %r41,%r39,0;
@ %r41 bra $L5;
$L4:
.loc 1 57 18
sub.u64 %r33,%r26,%r34;
.loc 1 58 11
sub.u64 %r27,%r36,%r33;
.loc 1 60 12
setp.eq.u64 %r42,%r36,%r33;
@ %r42 bra $L2;
.loc 1 62 16
ld.s8 %r25,[%r35];
.loc 1 62 15
setp.ne.u32 %r43,%r25,0;
@ %r43 bra $L12;
bra $L7;
$L10:
.loc 1 57 14
mov.u64 %r33,%r36;
$L2:
.loc 1 61 31
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r45,[%value_in];
}
.loc 1 61 29
add.u64 %r33,%r33,%r45;
bra $L1;
$L12:
.loc 1 62 15
mov.u64 %r29,%r35;
$L6:
.loc 1 63 20
setp.eq.u64 %r46,%r27,1;
@ %r46 bra $L9;
.loc 1 64 30
cvt.u32.u32 %r47,%r25;
st.u8 [%r26],%r47;
.loc 1 65 26
add.u64 %r27,%r27,-1;
.loc 1 64 27
add.u64 %r26,%r26,1;
$L9:
.loc 1 67 18
add.u64 %r29,%r29,1;
.loc 1 62 16
ld.s8 %r25,[%r29];
.loc 1 62 15
setp.ne.u32 %r48,%r25,0;
@ %r48 bra $L6;
.loc 1 71 26
sub.u64 %r49,%r29,%r35;
.loc 1 71 21
add.u64 %r33,%r33,%r49;
$L7:
.loc 1 69 12
mov.u32 %r50,0;
st.u8 [%r26],%r50;
$L1:
.loc 1 72 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strlcpy.o/1612277262  0     0     100666  2132      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strlcpy
.visible .func (.param .u64 %value_out) strlcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strlcpy.c"
// BEGIN GLOBAL FUNCTION DEF: strlcpy
.visible .func (.param .u64 %value_out) strlcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .u32 %r43;
.reg .pred %r44;
.reg .pred %r46;
.reg .u16 %r47;
.reg .u32 %r48;
.reg .pred %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
mov.u64 %r38,%ar0;
mov.u64 %r39,%ar1;
mov.u64 %r40,%ar2;
.loc 1 52 12
setp.eq.u64 %r41,%r40,0;
@ %r41 bra $L7;
.loc 1 52 20
add.u64 %r32,%r40,-1;
setp.eq.u64 %r42,%r40,1;
@ %r42 bra $L8;
mov.u64 %r35,%r38;
mov.u64 %r30,%r39;
.loc 1 56 17
add.u64 %r53,%r39,%r32;
$L5:
mov.u64 %r33,%r30;
add.u64 %r30,%r30,1;
mov.u64 %r29,%r30;
mov.u64 %r26,%r35;
add.u64 %r35,%r35,1;
mov.u64 %r38,%r35;
.loc 1 54 37
ld.s8 %r22,[%r33];
.loc 1 54 35
cvt.u32.u32 %r43,%r22;
st.u8 [%r26],%r43;
.loc 1 54 28
setp.eq.u32 %r44,%r22,0;
@ %r44 bra $L4;
.loc 1 56 17
setp.ne.u64 %r46,%r53,%r30;
@ %r46 bra $L5;
bra $L3;
$L7:
.loc 1 48 30
mov.u64 %r29,%r39;
$L2:
mov.u64 %r36,%r29;
$L6:
add.u64 %r36,%r36,1;
mov.u64 %r29,%r36;
.loc 1 63 23
ld.s8 %r48,[%r36+-1];
cvt.u16.u32 %r47,%r48;
setp.ne.u16 %r49,%r47,0;
@ %r49 bra $L6;
$L4:
.loc 1 67 18
sub.u64 %r51,%r29,%r39;
.loc 1 67 24
add.u64 %r50,%r51,-1;
bra $L14;
$L8:
.loc 1 48 30
mov.u64 %r29,%r39;
$L3:
.loc 1 62 28
mov.u32 %r52,0;
st.u8 [%r38],%r52;
bra $L2;
$L14:
.loc 1 68 1
mov.u64 %value,%r50;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strlen.o/ 1612277262  0     0     100666  2224      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strlen
.visible .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/strlen.c"
// BEGIN GLOBAL FUNCTION DEF: strlen
.visible .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r25;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .pred %r45;
.reg .u16 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .pred %r60;
.reg .u16 %r61;
.reg .u32 %r62;
.reg .pred %r63;
.reg .u16 %r64;
.reg .u32 %r65;
.reg .pred %r66;
mov.u64 %r43,%ar0;
.loc 1 60 10
and.b64 %r44,%r43,7;
.loc 1 60 9
setp.eq.u64 %r45,%r44,0;
@ %r45 bra $L10;
mov.u64 %r33,%r43;
$L5:
.loc 1 62 10
ld.s8 %r47,[%r33];
cvt.u16.u32 %r46,%r47;
setp.ne.u16 %r48,%r46,0;
@ %r48 bra $L3;
.loc 1 63 13
sub.u64 %r42,%r33,%r43;
bra $L1;
$L3:
.loc 1 64 10
add.u64 %r33,%r33,1;
.loc 1 60 10
and.b64 %r49,%r33,7;
.loc 1 60 9
setp.ne.u64 %r50,%r49,0;
@ %r50 bra $L5;
bra $L2;
$L10:
mov.u64 %r33,%r43;
$L2:
.loc 1 70 11
ld.u64 %r32,[%r33];
add.u64 %r51,%r32,-72340172838076673;
not.b64 %r52,%r32;
and.b64 %r53,%r51,%r52;
and.b64 %r54,%r53,-9187201950435737472;
.loc 1 70 9
setp.ne.u64 %r55,%r54,0;
@ %r55 bra $L6;
$L7:
.loc 1 71 17
add.u64 %r33,%r33,8;
.loc 1 70 11
ld.u64 %r25,[%r33];
add.u64 %r56,%r25,-72340172838076673;
not.b64 %r57,%r25;
and.b64 %r58,%r56,%r57;
and.b64 %r59,%r58,-9187201950435737472;
.loc 1 70 9
setp.eq.u64 %r60,%r59,0;
@ %r60 bra $L7;
$L6:
.loc 1 79 9
ld.s8 %r62,[%r33];
cvt.u16.u32 %r61,%r62;
setp.eq.u16 %r63,%r61,0;
@ %r63 bra $L8;
$L9:
.loc 1 80 8
add.u64 %r33,%r33,1;
.loc 1 79 9
ld.s8 %r65,[%r33];
cvt.u16.u32 %r64,%r65;
setp.ne.u16 %r66,%r64,0;
@ %r66 bra $L9;
$L8:
.loc 1 81 14
sub.u64 %r42,%r33,%r43;
$L1:
.loc 1 82 1
mov.u64 %value,%r42;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strlwr.o/ 1612277262  0     0     100666  1643      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strlwr
.visible .func (.param .u64 %value_out) strlwr (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/strlwr.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: strlwr
.visible .func (.param .u64 %value_out) strlwr (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r36;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u64 %r49;
.reg .u16 %r50;
mov.u64 %r30,%ar0;
.loc 1 35 11
ld.u8 %r26,[%r30];
.loc 1 35 3
setp.ne.u32 %r31,%r26,0;
@ ! %r31 bra $L7;
mov.u64 %r28,%r30;
cvta.const.u64 %r49,_ctype_+1;
$L2:
.loc 1 37 14
cvt.u32.u32 %r34,%r26;
cvt.u64.u8 %r33,%r34;
add.u64 %r36,%r49,%r33;
ld.u8 %r50,[%r36];
mov.u16 %r39,%r50;
and.b16 %r38,%r39,3;
cvt.u32.u16 %r42,%r38;
cvt.s32.s8 %r41,%r42;
cvt.u16.u32 %r40,%r41;
setp.ne.u16 %r43,%r40,1;
@ %r43 bra $L3;
.loc 1 37 12
cvt.u16.u32 %r45,%r26;
add.u16 %r44,%r45,32;
cvt.u32.u16 %r46,%r44;
cvt.u32.u8 %r26,%r46;
$L3:
cvt.u32.u32 %r47,%r26;
st.u8 [%r28],%r47;
.loc 1 35 28
add.u64 %r28,%r28,1;
.loc 1 35 11
ld.u8 %r26,[%r28];
.loc 1 35 3
setp.ne.u32 %r48,%r26,0;
@ %r48 bra $L2;
$L7:
.loc 1 40 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}

/1310           1612277262  0     0     100666  2494      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strncasecmp
.visible .func (.param .u32 %value_out) strncasecmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strncasecmp.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: strncasecmp
.visible .func (.param .u32 %value_out) strncasecmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r37;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .pred %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u64 %r49;
.reg .u16 %r51;
.reg .u16 %r52;
.reg .u16 %r53;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .pred %r56;
.reg .u64 %r57;
.reg .u32 %r58;
.reg .u64 %r60;
.reg .u16 %r62;
.reg .u16 %r63;
.reg .u16 %r64;
.reg .u32 %r65;
.reg .u32 %r66;
.reg .pred %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .u64 %r72;
.reg .u16 %r73;
mov.u64 %r42,%ar0;
mov.u64 %r43,%ar1;
mov.u64 %r44,%ar2;
.loc 1 45 3
setp.eq.u64 %r45,%r44,0;
@ %r45 bra $L6;
mov.u64 %r40,%r42;
mov.u64 %r39,%r43;
add.u64 %r37,%r40,%r44;
cvta.const.u64 %r72,_ctype_+1;
$L5:
.loc 1 47 22
ld.s8 %r30,[%r40];
cvt.u32.u32 %r47,%r30;
cvt.s64.s8 %r46,%r47;
add.u64 %r49,%r72,%r46;
ld.u8 %r73,[%r49];
mov.u16 %r52,%r73;
and.b16 %r51,%r52,3;
cvt.u32.u16 %r55,%r51;
cvt.s32.s8 %r54,%r55;
cvt.u16.u32 %r53,%r54;
setp.ne.u16 %r56,%r53,1;
@ %r56 bra $L3;
add.u32 %r30,%r30,32;
$L3:
.loc 1 48 22
ld.s8 %r31,[%r39];
cvt.u32.u32 %r58,%r31;
cvt.s64.s8 %r57,%r58;
add.u64 %r60,%r72,%r57;
ld.u8 %r73,[%r60];
mov.u16 %r63,%r73;
and.b16 %r62,%r63,3;
cvt.u32.u16 %r66,%r62;
cvt.s32.s8 %r65,%r66;
cvt.u16.u32 %r64,%r65;
setp.ne.u16 %r67,%r64,1;
@ %r67 bra $L4;
add.u32 %r31,%r31,32;
$L4:
.loc 1 49 15
sub.u32 %r41,%r30,%r31;
.loc 1 49 10
setp.ne.u32 %r68,%r30,%r31;
@ %r68 bra $L1;
.loc 1 49 32
setp.eq.u32 %r69,%r31,0;
@ %r69 bra $L1;
.loc 1 45 3
add.u64 %r40,%r40,1;
add.u64 %r39,%r39,1;
setp.ne.u64 %r70,%r37,%r40;
@ %r70 bra $L5;
bra $L1;
$L6:
cvt.u32.u64 %r41,%r44;
$L1:
.loc 1 53 1
mov.u32 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-strncat.o/1612277262  0     0     100666  2780      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strncat
.visible .func (.param .u64 %value_out) strncat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strncat.c"
// BEGIN GLOBAL FUNCTION DEF: strncat
.visible .func (.param .u64 %value_out) strncat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u16 %r56;
.reg .u32 %r57;
.reg .pred %r58;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u64 %r62;
.reg .pred %r63;
.reg .u16 %r64;
.reg .u32 %r65;
.reg .pred %r66;
.reg .pred %r67;
.reg .u32 %r68;
.reg .pred %r69;
.reg .u32 %r70;
.reg .pred %r71;
mov.u64 %r46,%ar0;
mov.u64 %r47,%ar1;
mov.u64 %r48,%ar2;
.loc 1 81 7
and.b64 %r49,%r46,7;
.loc 1 81 6
setp.ne.u64 %r50,%r49,0;
@ %r50 bra $L11;
.loc 1 84 15
ld.u64 %r30,[%r46];
not.b64 %r51,%r30;
add.u64 %r52,%r30,-72340172838076673;
and.b64 %r53,%r51,%r52;
and.b64 %r54,%r53,-9187201950435737472;
.loc 1 84 13
setp.eq.u64 %r55,%r54,0;
@ %r55 bra $L12;
mov.u64 %r35,%r46;
bra $L2;
$L11:
mov.u64 %r35,%r46;
$L2:
.loc 1 90 9
ld.s8 %r57,[%r35];
cvt.u16.u32 %r56,%r57;
setp.ne.u16 %r58,%r56,0;
@ %r58 bra $L4;
bra $L5;
$L12:
.loc 1 84 13
mov.u64 %r35,%r46;
$L3:
.loc 1 85 12
add.u64 %r35,%r35,8;
.loc 1 84 15
ld.u64 %r24,[%r35];
add.u64 %r59,%r24,-72340172838076673;
not.b64 %r60,%r24;
and.b64 %r61,%r59,%r60;
and.b64 %r62,%r61,-9187201950435737472;
.loc 1 84 13
setp.eq.u64 %r63,%r62,0;
@ %r63 bra $L3;
bra $L2;
$L4:
.loc 1 91 7
add.u64 %r35,%r35,1;
.loc 1 90 9
ld.s8 %r65,[%r35];
cvt.u16.u32 %r64,%r65;
setp.ne.u16 %r66,%r64,0;
@ %r66 bra $L4;
bra $L5;
$L9:
.loc 1 101 10
add.u64 %r33,%r33,1;
setp.ne.u64 %r67,%r40,%r41;
@ %r67 bra $L13;
.loc 1 102 6
mov.u32 %r68,0;
st.u8 [%r40],%r68;
bra $L7;
$L5:
mov.u64 %r34,%r35;
mov.u64 %r33,%r47;
add.u64 %r40,%r34,%r48;
bra $L6;
$L13:
mov.u64 %r34,%r41;
$L6:
.loc 1 99 9
setp.ne.u64 %r69,%r34,%r40;
@ ! %r69 bra $L7;
add.u64 %r41,%r34,1;
.loc 1 99 31
ld.s8 %r31,[%r33];
.loc 1 99 29
cvt.u32.u32 %r70,%r31;
st.u8 [%r34],%r70;
.loc 1 99 19
setp.ne.u32 %r71,%r31,0;
@ %r71 bra $L9;
$L7:
.loc 1 107 1
mov.u64 %value,%r46;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strncmp.o/1612277262  0     0     100666  3977      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strncmp
.visible .func (.param .u32 %value_out) strncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strncmp.c"
// BEGIN GLOBAL FUNCTION DEF: strncmp
.visible .func (.param .u32 %value_out) strncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r30;
.reg .u32 %r32;
.reg .u64 %r42;
.reg .u32 %r48;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .pred %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .pred %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .pred %r66;
.reg .pred %r67;
.reg .u64 %r68;
.reg .pred %r69;
.reg .u16 %r70;
.reg .u32 %r71;
.reg .u16 %r72;
.reg .pred %r73;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r79;
.reg .u32 %r80;
.reg .u16 %r81;
.reg .u16 %r82;
.reg .u16 %r83;
.reg .u32 %r84;
.reg .u16 %r85;
.reg .pred %r86;
.reg .u64 %r87;
.reg .u64 %r88;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .u32 %r94;
.reg .u32 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u16 %r98;
.reg .u32 %r99;
.reg .u16 %r100;
.reg .pred %r101;
.reg .u16 %r102;
.reg .u32 %r103;
.reg .u16 %r104;
.reg .pred %r105;
.reg .u32 %r106;
.reg .u32 %r107;
mov.u64 %r53,%ar0;
mov.u64 %r54,%ar1;
mov.u64 %r55,%ar2;
.loc 1 76 6
setp.eq.u64 %r56,%r55,0;
@ %r56 bra $L9;
.loc 1 80 8
or.b64 %r57,%r53,%r54;
and.b64 %r58,%r57,7;
.loc 1 80 6
setp.ne.u64 %r59,%r58,0;
@ %r59 bra $L3;
.loc 1 85 13
setp.gt.u64 %r60,%r55,7;
@ %r60 bra $L4;
bra $L3;
$L5:
.loc 1 87 13
add.u64 %r55,%r55,-8;
.loc 1 91 14
setp.eq.u64 %r61,%r55,0;
@ %r61 bra $L10;
.loc 1 91 25
add.u64 %r62,%r30,-72340172838076673;
not.b64 %r63,%r30;
and.b64 %r64,%r62,%r63;
and.b64 %r65,%r64,-9187201950435737472;
.loc 1 91 22
setp.ne.u64 %r66,%r65,0;
@ %r66 bra $L11;
.loc 1 94 13
add.u64 %r53,%r53,8;
.loc 1 95 13
add.u64 %r54,%r54,8;
.loc 1 85 13
setp.le.u64 %r67,%r55,7;
@ %r67 bra $L3;
$L4:
.loc 1 85 36
ld.u64 %r30,[%r53];
.loc 1 85 33
ld.u64 %r68,[%r54];
setp.eq.u64 %r69,%r30,%r68;
@ %r69 bra $L5;
$L3:
.loc 1 103 21
ld.s8 %r48,[%r53];
.loc 1 103 18
ld.s8 %r71,[%r54];
cvt.u16.u32 %r70,%r71;
cvt.u16.u32 %r72,%r48;
setp.ne.u16 %r73,%r70,%r72;
@ %r73 bra $L12;
.loc 1 107 18
set.u32.eq.u16 %r76,%r70,0;
neg.s32 %r77,%r76;
.loc 1 107 10
set.u32.eq.u64 %r79,%r55,1;
neg.s32 %r80,%r79;
.loc 1 107 18
cvt.u16.u32 %r82,%r77;
cvt.u16.u32 %r83,%r80;
or.b16 %r81,%r82,%r83;
cvt.u32.u16 %r84,%r81;
cvt.u16.u8 %r85,%r84;
setp.ne.u16 %r86,%r85,0;
@ %r86 bra $L13;
mov.u64 %r42,%r53;
bra $L7;
$L8:
not.b64 %r87,%r42;
add.u64 %r51,%r87,%r55;
.loc 1 107 10
add.u64 %r88,%r53,%r51;
set.u32.eq.u64 %r90,%r88,0;
neg.s32 %r91,%r90;
.loc 1 107 18
set.u32.eq.u16 %r94,%r102,0;
neg.s32 %r95,%r94;
cvt.u16.u32 %r97,%r91;
cvt.u16.u32 %r98,%r95;
or.b16 %r96,%r97,%r98;
cvt.u32.u16 %r99,%r96;
cvt.u16.u8 %r100,%r99;
setp.ne.u16 %r101,%r100,0;
@ %r101 bra $L14;
$L7:
.loc 1 109 9
add.u64 %r42,%r42,1;
.loc 1 110 9
add.u64 %r54,%r54,1;
.loc 1 103 21
ld.s8 %r32,[%r42];
.loc 1 103 18
ld.s8 %r103,[%r54];
cvt.u16.u32 %r102,%r103;
cvt.u16.u32 %r104,%r32;
setp.eq.u16 %r105,%r102,%r104;
@ %r105 bra $L8;
bra $L6;
$L12:
mov.u64 %r42,%r53;
$L6:
.loc 1 112 11
ld.u8 %r106,[%r42];
.loc 1 112 37
ld.u8 %r107,[%r54];
.loc 1 112 34
sub.u32 %r52,%r106,%r107;
bra $L1;
$L9:
.loc 1 77 12
cvt.u32.u64 %r52,%r55;
bra $L1;
$L10:
cvt.u32.u64 %r52,%r55;
bra $L1;
$L11:
mov.u32 %r52,0;
bra $L1;
$L13:
mov.u32 %r52,0;
bra $L1;
$L14:
mov.u32 %r52,0;
$L1:
.loc 1 114 1
mov.u32 %value,%r52;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-strncpy.o/1612277262  0     0     100666  2944      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strncpy
.visible .func (.param .u64 %value_out) strncpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strncpy.c"
// BEGIN GLOBAL FUNCTION DEF: strncpy
.visible .func (.param .u64 %value_out) strncpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r25;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r37;
.reg .u64 %r41;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u32 %r54;
.reg .u32 %r55;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .u16 %r61;
.reg .u32 %r62;
.reg .u16 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .pred %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .pred %r74;
.reg .u32 %r75;
.reg .pred %r76;
.reg .u64 %r78;
mov.u64 %r48,%ar0;
mov.u64 %r49,%ar1;
mov.u64 %r50,%ar2;
.loc 1 89 8
mov.u64 %r46,%r48;
or.b64 %r51,%r49,%r48;
and.b64 %r52,%r51,7;
.loc 1 89 6
set.u32.eq.u64 %r54,%r52,0;
neg.s32 %r55,%r54;
.loc 1 89 29
set.u32.gt.u64 %r57,%r50,7;
neg.s32 %r58,%r57;
cvt.u16.u32 %r60,%r55;
cvt.u16.u32 %r61,%r58;
and.b16 %r59,%r60,%r61;
cvt.u32.u16 %r62,%r59;
cvt.u16.u8 %r63,%r62;
setp.ne.u16 %r64,%r63,0;
@ %r64 bra $L2;
.loc 1 83 9
mov.u64 %r37,%r48;
bra $L3;
$L4:
.loc 1 98 10
add.u64 %r50,%r50,-8;
.loc 1 99 33
add.u64 %r49,%r49,8;
add.u64 %r46,%r46,8;
mov.u64 %r37,%r46;
.loc 1 99 19
st.u64 [%r45],%r25;
.loc 1 96 13
setp.le.u64 %r65,%r50,7;
@ %r65 bra $L3;
$L2:
mov.u64 %r45,%r46;
.loc 1 96 45
ld.u64 %r25,[%r49];
add.u64 %r66,%r25,-72340172838076673;
not.b64 %r67,%r25;
and.b64 %r68,%r66,%r67;
and.b64 %r69,%r68,-9187201950435737472;
.loc 1 96 41
setp.eq.u64 %r70,%r69,0;
@ %r70 bra $L4;
mov.u64 %r37,%r46;
bra $L3;
$L8:
.loc 1 108 7
add.u64 %r33,%r33,-1;
sub.u64 %r41,%r78,%r33;
.loc 1 109 21
ld.s8 %r31,[%r32];
.loc 1 109 19
cvt.u32.u32 %r71,%r31;
st.u8 [%r34],%r71;
.loc 1 109 10
add.u64 %r34,%r34,1;
add.u64 %r32,%r32,1;
setp.ne.u32 %r72,%r31,0;
@ %r72 bra $L5;
.loc 1 113 9
setp.ne.u64 %r73,%r33,0;
@ ! %r73 bra $L7;
.loc 1 114 12
cvt.u32.u32 %r75,%r31;
bra $L6;
$L3:
mov.u64 %r32,%r49;
mov.u64 %r34,%r37;
mov.u64 %r33,%r50;
add.u64 %r78,%r34,%r33;
$L5:
.loc 1 106 9
setp.ne.u64 %r74,%r33,0;
@ %r74 bra $L8;
bra $L7;
$L6:
.loc 1 114 12
st.u8 [%r41],%r75;
.loc 1 113 9
add.u64 %r41,%r41,1;
setp.ne.u64 %r76,%r78,%r41;
@ %r76 bra $L6;
$L7:
.loc 1 118 1
mov.u64 %value,%r48;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strnlen.o/1612277262  0     0     100666  1261      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strnlen
.visible .func (.param .u64 %value_out) strnlen (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strnlen.c"
// BEGIN GLOBAL FUNCTION DEF: strnlen
.visible .func (.param .u64 %value_out) strnlen (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .u16 %r32;
.reg .u32 %r33;
.reg .pred %r34;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 38 9
setp.ne.u64 %r30,%r29,0;
@ %r30 bra $L2;
mov.u64 %r27,%r29;
bra $L1;
$L5:
.loc 1 39 8
add.u64 %r25,%r25,1;
.loc 1 38 9
setp.ne.u64 %r31,%r24,%r25;
@ %r31 bra $L4;
.loc 1 41 14
sub.u64 %r27,%r24,%r28;
bra $L1;
$L2:
add.u64 %r24,%r28,%r29;
.loc 1 38 9
mov.u64 %r25,%r28;
$L4:
.loc 1 38 18
ld.s8 %r33,[%r25];
cvt.u16.u32 %r32,%r33;
setp.ne.u16 %r34,%r32,0;
@ %r34 bra $L5;
.loc 1 41 14
sub.u64 %r27,%r25,%r28;
$L1:
.loc 1 42 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strnstr.o/1612277262  0     0     100666  2831      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strnstr
.visible .func (.param .u64 %value_out) strnstr (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strnstr.c"
// BEGIN GLOBAL FUNCTION DECL: strnlen
.extern .func (.param .u64 %value_out) strnlen (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memmem
.extern .func (.param .u64 %value_out) memmem (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: strnstr
.visible .func (.param .u64 %value_out) strnstr (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r34;
.reg .pred %r35;
.reg .u64 %r36;
.reg .u16 %r37;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u64 %r44;
.reg .pred %r45;
.reg .u32 %r47;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .pred %r51;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
.loc 1 43 23
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
call (%value_in),strnlen,(%out_arg1,%out_arg2);
ld.param.u64 %r34,[%value_in];
}
.loc 1 45 6
setp.gt.u64 %r35,%r31,%r34;
@ %r35 bra $L2;
.loc 1 45 43
add.u64 %r36,%r30,%r34;
.loc 1 45 33
ld.s8 %r38,[%r36];
cvt.u16.u32 %r37,%r38;
setp.eq.u16 %r39,%r37,0;
@ %r39 bra $L2;
$L4:
.loc 1 50 10
mov.u64 %r28,0;
bra $L1;
$L2:
.loc 1 46 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r34;
call (%value_in),memmem,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r44,[%value_in];
}
mov.u64 %r28,%r44;
.loc 1 47 8
setp.eq.u64 %r45,%r28,0;
@ %r45 bra $L4;
.loc 1 47 37
sub.u64 %r49,%r28,%r29;
.loc 1 47 15
mov.u32 %r47,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r47;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r49;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r50,[%value_in];
}
.loc 1 47 11
setp.ne.u64 %r51,%r50,0;
@ %r51 bra $L4;
$L1:
.loc 1 51 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strpbrk.o/1612277262  0     0     100666  1795      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strpbrk
.visible .func (.param .u64 %value_out) strpbrk (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strpbrk.c"
// BEGIN GLOBAL FUNCTION DEF: strpbrk
.visible .func (.param .u64 %value_out) strpbrk (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u16 %r31;
.reg .u16 %r32;
.reg .pred %r33;
.reg .pred %r34;
.reg .u16 %r36;
.reg .u32 %r37;
.reg .pred %r38;
.reg .pred %r40;
.reg .pred %r41;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 32 8
ld.s8 %r22,[%r28];
.loc 1 32 6
setp.eq.u32 %r30,%r22,0;
@ ! %r30 bra $L13;
bra $L8;
$L9:
.loc 1 37 7
mov.u64 %r25,%r29;
mov.u32 %r23,%r26;
.loc 1 39 7
cvt.u16.u32 %r31,%r22;
$L5:
cvt.u16.u32 %r32,%r23;
setp.eq.u16 %r33,%r31,%r32;
@ %r33 bra $L4;
.loc 1 37 25
add.u64 %r25,%r25,1;
.loc 1 37 20
ld.s8 %r23,[%r25];
.loc 1 37 7
setp.ne.u32 %r34,%r23,0;
@ %r34 bra $L5;
bra $L6;
$L13:
.loc 1 37 20
ld.s8 %r26,[%r29];
setp.ne.u32 %r41,%r26,0;
$L7:
.loc 1 37 7
@ %r41 bra $L9;
mov.u64 %r25,%r29;
bra $L6;
$L4:
.loc 1 47 6
ld.s8 %r37,[%r25];
cvt.u16.u32 %r36,%r37;
setp.eq.u16 %r38,%r36,0;
selp.u64 %r27,0,%r28,%r38;
bra $L1;
$L8:
.loc 1 48 8
mov.u64 %r27,0;
bra $L1;
$L6:
.loc 1 44 9
add.u64 %r28,%r28,1;
.loc 1 35 10
ld.s8 %r22,[%r28];
.loc 1 35 9
setp.ne.u32 %r40,%r22,0;
@ %r40 bra $L7;
bra $L4;
$L1:
.loc 1 51 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}

/1331           1612277262  0     0     100666  50245     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: match_string
.func (.param .u32 %value_out) match_string (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/time/strptime.c"
// BEGIN GLOBAL FUNCTION DECL: strptime_l
.visible .func (.param .u64 %value_out) strptime_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strptime
.visible .func (.param .u64 %value_out) strptime (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: _C_time_locale
.extern .const .align 8 .u64 _C_time_locale[63];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strncasecmp_l
.extern .func (.param .u32 %value_out) strncasecmp_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtol_l
.extern .func (.param .u64 %value_out) strtol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DECL: strtoll_l
.extern .func (.param .u64 %value_out) strtoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: localtime_r
.extern .func (.param .u64 %value_out) localtime_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DEF: tm_year_base
.visible .const .align 4 .u32 tm_year_base[1] =
{1900 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[9] =
{37,89,45,37,109,45,37,100,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[6] =
{37,72,58,37,77,0 };
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[9] =
{37,109,47,37,100,47,37,121,0 };
// BEGIN VAR DEF: _DAYS_BEFORE_MONTH
.const .align 4 .u32 _DAYS_BEFORE_MONTH[12] =
{0,31,59,90,120,151,181,212,243,273,304,334 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[9] =
{37,72,58,37,77,58,37,83,0 };
// BEGIN FUNCTION DEF: match_string
.func (.param .u32 %value_out) match_string (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r30;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u32 %r45;
.reg .pred %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .pred %r49;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
mov.u64 %r36,%ar2;
.loc 1 80 21
ld.u64 %r30,[%r35];
.loc 1 80 5
setp.eq.u64 %r37,%r30,0;
@ %r37 bra $L2;
.loc 1 80 12
mov.u32 %r33,0;
$L5:
.loc 1 81 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r39,[%value_in];
}
.loc 1 83 6
cvt.u32.u64 %r40,%r39;
cvt.s64.s32 %r24,%r40;
ld.u64 %r42,[%r35];
ld.u64 %r41,[%r34];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r36;
call (%value_in),strncasecmp_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r45,[%value_in];
}
.loc 1 83 5
setp.ne.u32 %r46,%r45,0;
@ %r46 bra $L3;
.loc 1 84 11
ld.u64 %r48,[%r34];
add.u64 %r47,%r48,%r24;
st.u64 [%r34],%r47;
.loc 1 85 13
bra $L1;
$L3:
.loc 1 80 34
add.u32 %r33,%r33,1;
add.u64 %r35,%r35,8;
.loc 1 80 21
ld.u64 %r30,[%r35];
.loc 1 80 5
setp.ne.u64 %r49,%r30,0;
@ %r49 bra $L5;
$L2:
.loc 1 88 12
mov.u32 %r33,-1;
$L1:
.loc 1 89 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strptime_l
.visible .func (.param .u64 %value_out) strptime_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[24];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r27;
.reg .u64 %r39;
.reg .u64 %r50;
.reg .u64 %r57;
.reg .u64 %r61;
.reg .u64 %r65;
.reg .u64 %r70;
.reg .u64 %r75;
.reg .u64 %r77;
.reg .u32 %r80;
.reg .u64 %r100;
.reg .u64 %r102;
.reg .u64 %r109;
.reg .u64 %r114;
.reg .u64 %r118;
.reg .u64 %r122;
.reg .u64 %r126;
.reg .u64 %r136;
.reg .u64 %r140;
.reg .u64 %r143;
.reg .u64 %r146;
.reg .u64 %r149;
.reg .u32 %r154;
.reg .u32 %r157;
.reg .u32 %r159;
.reg .u32 %r161;
.reg .u32 %r162;
.reg .u32 %r164;
.reg .u32 %r168;
.reg .u32 %r170;
.reg .u32 %r172;
.reg .u64 %r175;
.reg .u64 %r179;
.reg .u32 %r180;
.reg .u32 %r181;
.reg .u32 %r182;
.reg .u32 %r185;
.reg .u32 %r187;
.reg .u64 %r193;
.reg .u32 %r194;
.reg .u32 %r195;
.reg .u32 %r196;
.reg .u32 %r199;
.reg .u32 %r200;
.reg .u32 %r201;
.reg .u32 %r204;
.reg .u32 %r205;
.reg .u32 %r206;
.reg .u32 %r207;
.reg .u32 %r208;
.reg .u32 %r209;
.reg .u32 %r210;
.reg .u32 %r211;
.reg .u32 %r212;
.reg .u32 %r213;
.reg .u32 %r214;
.reg .u32 %r228;
.reg .u32 %r229;
.reg .u32 %r230;
.reg .u32 %r234;
.reg .u32 %r235;
.reg .u32 %r239;
.reg .u32 %r242;
.reg .u32 %r246;
.reg .u32 %r247;
.reg .u32 %r248;
.reg .u32 %r252;
.reg .u32 %r259;
.reg .u32 %r262;
.reg .u32 %r263;
.reg .u32 %r267;
.reg .u32 %r268;
.reg .u32 %r269;
.reg .u32 %r273;
.reg .u64 %r275;
.reg .u32 %r283;
.reg .u64 %r287;
.reg .u64 %r292;
.reg .u64 %r293;
.reg .u64 %r294;
.reg .u64 %r295;
.reg .u64 %r296;
.reg .pred %r297;
.reg .u64 %r298;
.reg .u32 %r299;
.reg .u64 %r301;
.reg .u16 %r303;
.reg .u16 %r304;
.reg .u32 %r305;
.reg .u16 %r306;
.reg .u32 %r307;
.reg .pred %r308;
.reg .u64 %r309;
.reg .u64 %r311;
.reg .u16 %r313;
.reg .u16 %r314;
.reg .u32 %r315;
.reg .u16 %r316;
.reg .u32 %r317;
.reg .pred %r318;
.reg .u64 %r319;
.reg .u64 %r321;
.reg .u16 %r323;
.reg .u16 %r324;
.reg .u32 %r325;
.reg .u16 %r326;
.reg .u32 %r327;
.reg .pred %r328;
.reg .u16 %r329;
.reg .pred %r330;
.reg .pred %r331;
.reg .u16 %r333;
.reg .u32 %r334;
.reg .u32 %r335;
.reg .u32 %r338;
.reg .u32 %r339;
.reg .u16 %r340;
.reg .u16 %r341;
.reg .u16 %r342;
.reg .u32 %r343;
.reg .u16 %r344;
.reg .pred %r345;
.reg .u16 %r346;
.reg .pred %r347;
.reg .pred %r349;
.reg .pred %r351;
.reg .pred %r353;
.reg .pred %r355;
.reg .pred %r357;
.reg .pred %r359;
.reg .pred %r361;
.reg .pred %r362;
.reg .pred %r364;
.reg .pred %r366;
.reg .pred %r368;
.reg .pred %r370;
.reg .pred %r372;
.reg .pred %r374;
.reg .pred %r376;
.reg .pred %r378;
.reg .pred %r380;
.reg .pred %r382;
.reg .pred %r384;
.reg .pred %r386;
.reg .pred %r388;
.reg .pred %r390;
.reg .pred %r392;
.reg .pred %r394;
.reg .pred %r396;
.reg .pred %r398;
.reg .pred %r400;
.reg .pred %r402;
.reg .pred %r404;
.reg .pred %r406;
.reg .pred %r408;
.reg .pred %r410;
.reg .pred %r412;
.reg .pred %r414;
.reg .pred %r416;
.reg .pred %r418;
.reg .pred %r420;
.reg .pred %r422;
.reg .pred %r424;
.reg .pred %r426;
.reg .pred %r428;
.reg .pred %r430;
.reg .pred %r432;
.reg .pred %r434;
.reg .pred %r436;
.reg .pred %r438;
.reg .pred %r440;
.reg .pred %r442;
.reg .u32 %r448;
.reg .pred %r449;
.reg .u32 %r455;
.reg .pred %r456;
.reg .u32 %r462;
.reg .pred %r463;
.reg .u64 %r465;
.reg .u32 %r468;
.reg .pred %r469;
.reg .u32 %r472;
.reg .u64 %r475;
.reg .u64 %r476;
.reg .u64 %r477;
.reg .pred %r478;
.reg .u32 %r480;
.reg .u64 %r485;
.reg .u64 %r486;
.reg .u64 %r487;
.reg .u64 %r488;
.reg .pred %r489;
.reg .u64 %r491;
.reg .u64 %r494;
.reg .u64 %r495;
.reg .pred %r496;
.reg .u32 %r499;
.reg .u64 %r502;
.reg .u64 %r503;
.reg .u64 %r504;
.reg .pred %r505;
.reg .u64 %r507;
.reg .u64 %r510;
.reg .u64 %r511;
.reg .pred %r512;
.reg .u64 %r513;
.reg .pred %r514;
.reg .u32 %r517;
.reg .u64 %r520;
.reg .u64 %r521;
.reg .u64 %r522;
.reg .pred %r523;
.reg .u32 %r526;
.reg .u64 %r529;
.reg .u64 %r530;
.reg .u64 %r531;
.reg .pred %r532;
.reg .pred %r533;
.reg .u32 %r536;
.reg .u64 %r539;
.reg .u64 %r540;
.reg .u64 %r541;
.reg .pred %r542;
.reg .u32 %r543;
.reg .u32 %r546;
.reg .u64 %r549;
.reg .u64 %r550;
.reg .u64 %r551;
.reg .pred %r552;
.reg .u32 %r553;
.reg .u32 %r556;
.reg .u64 %r559;
.reg .u64 %r560;
.reg .u64 %r561;
.reg .pred %r562;
.reg .u16 %r563;
.reg .u32 %r564;
.reg .pred %r565;
.reg .u64 %r566;
.reg .u32 %r572;
.reg .pred %r573;
.reg .pred %r574;
.reg .pred %r575;
.reg .u32 %r576;
.reg .u32 %r577;
.reg .u64 %r582;
.reg .u64 %r583;
.reg .u64 %r584;
.reg .u64 %r585;
.reg .pred %r586;
.reg .u64 %r588;
.reg .u64 %r591;
.reg .u64 %r592;
.reg .pred %r593;
.reg .u64 %r594;
.reg .u64 %r595;
.reg .u32 %r596;
.reg .u32 %r599;
.reg .u64 %r602;
.reg .u64 %r603;
.reg .u64 %r604;
.reg .u64 %r605;
.reg .pred %r606;
.reg .u64 %r607;
.reg .u32 %r608;
.reg .pred %r609;
.reg .u64 %r610;
.reg .pred %r611;
.reg .u64 %r614;
.reg .pred %r615;
.reg .u64 %r616;
.reg .u64 %r617;
.reg .u32 %r620;
.reg .u64 %r623;
.reg .u64 %r624;
.reg .u64 %r625;
.reg .pred %r626;
.reg .u16 %r627;
.reg .u32 %r628;
.reg .pred %r629;
.reg .u64 %r630;
.reg .u64 %r632;
.reg .u64 %r635;
.reg .u64 %r636;
.reg .pred %r637;
.reg .u32 %r640;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u64 %r645;
.reg .pred %r646;
.reg .u32 %r647;
.reg .u32 %r650;
.reg .u64 %r653;
.reg .u64 %r654;
.reg .u64 %r655;
.reg .pred %r656;
.reg .u32 %r659;
.reg .u64 %r662;
.reg .u64 %r663;
.reg .u64 %r664;
.reg .pred %r665;
.reg .u32 %r666;
.reg .pred %r667;
.reg .u32 %r668;
.reg .pred %r669;
.reg .u32 %r671;
.reg .pred %r676;
.reg .u32 %r678;
.reg .pred %r683;
.reg .pred %r684;
.reg .u32 %r686;
.reg .u32 %r687;
.reg .u32 %r688;
.reg .u32 %r689;
.reg .pred %r690;
.reg .u32 %r691;
.reg .u32 %r694;
.reg .u64 %r697;
.reg .u64 %r698;
.reg .u64 %r699;
.reg .pred %r700;
.reg .u32 %r701;
.reg .pred %r702;
.reg .u32 %r703;
.reg .pred %r704;
.reg .u32 %r706;
.reg .pred %r711;
.reg .u32 %r713;
.reg .pred %r718;
.reg .pred %r719;
.reg .u32 %r720;
.reg .pred %r721;
.reg .u32 %r722;
.reg .u32 %r724;
.reg .u32 %r725;
.reg .u32 %r726;
.reg .u32 %r727;
.reg .u32 %r728;
.reg .pred %r729;
.reg .u32 %r730;
.reg .u32 %r733;
.reg .u64 %r736;
.reg .u64 %r737;
.reg .u64 %r738;
.reg .pred %r739;
.reg .u32 %r740;
.reg .pred %r741;
.reg .u32 %r742;
.reg .pred %r743;
.reg .u32 %r745;
.reg .pred %r750;
.reg .u32 %r752;
.reg .pred %r757;
.reg .pred %r758;
.reg .u32 %r759;
.reg .u32 %r760;
.reg .u32 %r761;
.reg .u32 %r763;
.reg .u32 %r765;
.reg .u32 %r766;
.reg .u32 %r767;
.reg .pred %r768;
.reg .u32 %r769;
.reg .u32 %r771;
.reg .u32 %r772;
.reg .u64 %r777;
.reg .u64 %r778;
.reg .u64 %r779;
.reg .u64 %r780;
.reg .pred %r781;
.reg .u64 %r786;
.reg .u64 %r787;
.reg .u64 %r788;
.reg .u64 %r789;
.reg .pred %r790;
.reg .u32 %r793;
.reg .u64 %r796;
.reg .u64 %r797;
.reg .u64 %r798;
.reg .pred %r799;
.reg .pred %r800;
.reg .u32 %r803;
.reg .u64 %r806;
.reg .u64 %r807;
.reg .u64 %r808;
.reg .pred %r809;
.reg .u32 %r810;
.reg .u16 %r811;
.reg .u32 %r812;
.reg .pred %r813;
.reg .u64 %r814;
.reg .u16 %r815;
.reg .u32 %r816;
.reg .pred %r817;
.reg .u16 %r818;
.reg .u32 %r819;
.reg .u16 %r820;
.reg .pred %r821;
.reg .u16 %r822;
.reg .u32 %r823;
.reg .u16 %r824;
.reg .pred %r825;
.reg .u64 %r826;
.reg .pred %r827;
.reg .u32 %r828;
.reg .pred %r829;
.reg .u32 %r830;
.reg .pred %r831;
.reg .u32 %r832;
.reg .pred %r833;
.reg .u64 %r834;
.reg .u64 %r835;
.reg .u64 %r836;
.reg .u64 %r837;
.reg .u32 %r838;
.reg .u32 %r839;
.reg .u32 %r840;
.reg .u32 %r841;
.reg .pred %r842;
.reg .u32 %r844;
.reg .pred %r850;
.reg .u32 %r852;
.reg .pred %r858;
.reg .pred %r859;
.reg .u32 %r860;
.reg .u32 %r861;
.reg .pred %r862;
.reg .pred %r863;
.reg .u32 %r865;
.reg .u32 %r866;
.reg .pred %r867;
.reg .u32 %r869;
.reg .pred %r875;
.reg .u32 %r877;
.reg .u32 %r884;
.reg .u32 %r886;
.reg .pred %r887;
.reg .pred %r888;
.reg .u32 %r889;
.reg .pred %r890;
.reg .u64 %r891;
.reg .u64 %r892;
.reg .u64 %r893;
.reg .u64 %r894;
.reg .u32 %r895;
.reg .u32 %r896;
.reg .u32 %r897;
.reg .u32 %r898;
.reg .pred %r899;
.reg .u32 %r901;
.reg .pred %r907;
.reg .u32 %r909;
.reg .pred %r915;
.reg .pred %r916;
.reg .u32 %r917;
.reg .pred %r918;
.reg .u32 %r919;
.reg .pred %r920;
.reg .u32 %r921;
.reg .pred %r922;
.reg .u32 %r924;
.reg .pred %r929;
.reg .u32 %r931;
.reg .pred %r936;
.reg .pred %r937;
.reg .u32 %r938;
.reg .u32 %r939;
.reg .u32 %r940;
.reg .u64 %r942;
.reg .u64 %r945;
.reg .u64 %r946;
.reg .u64 %r947;
.reg .u64 %r948;
.reg .u64 %r949;
.reg .u64 %r950;
.reg .u16 %r952;
mov.u64 %r293,%ar0;
st.u64 [%frame+16],%r293;
mov.u64 %r294,%ar1;
mov.u64 %r295,%ar2;
mov.u64 %r296,%ar3;
.loc 1 164 15
ld.s8 %r185,[%r294];
.loc 1 164 5
setp.eq.u32 %r297,%r185,0;
@ %r297 bra $L11;
.loc 1 161 9
mov.u32 %r181,0;
cvta.const.u64 %r942,_ctype_+1;
.loc 1 253 9
add.u64 %r945,%frame,8;
.loc 1 292 9
cvta.const.u64 %r946,_C_time_locale+328;
add.u64 %r947,%frame,16;
.loc 1 184 9
add.u64 %r948,%r946,-136;
.loc 1 177 9
add.u64 %r949,%r946,-80;
.loc 1 191 9
add.u64 %r950,%r946,-232;
$L87:
.loc 1 168 6
cvt.u32.u32 %r299,%r185;
cvt.u64.u8 %r298,%r299;
add.u64 %r301,%r942,%r298;
.loc 1 168 5
ld.u8 %r952,[%r301];
mov.u16 %r304,%r952;
and.b16 %r303,%r304,8;
cvt.u32.u16 %r305,%r303;
cvt.s32.s8 %r307,%r305;
cvt.u16.u32 %r306,%r307;
setp.eq.u16 %r308,%r306,0;
@ %r308 bra $L12;
.loc 1 169 13
ld.u64 %r193,[%frame+16];
ld.u8 %r309,[%r193];
add.u64 %r311,%r942,%r309;
.loc 1 169 12
ld.u8 %r952,[%r311];
mov.u16 %r314,%r952;
and.b16 %r313,%r314,8;
cvt.u32.u16 %r315,%r313;
cvt.s32.s8 %r317,%r315;
cvt.u16.u32 %r316,%r317;
setp.eq.u16 %r318,%r316,0;
@ %r318 bra $L109;
add.u64 %r287,%r193,1;
$L14:
.loc 1 170 3
mov.u64 %r27,%r287;
st.u64 [%frame+16],%r287;
.loc 1 169 12
add.u64 %r287,%r287,1;
.loc 1 169 13
ld.u8 %r319,[%r27];
add.u64 %r321,%r942,%r319;
.loc 1 169 12
ld.u8 %r952,[%r321];
mov.u16 %r324,%r952;
and.b16 %r323,%r324,8;
cvt.u32.u16 %r325,%r323;
cvt.s32.s8 %r327,%r325;
cvt.u16.u32 %r326,%r327;
setp.ne.u16 %r328,%r326,0;
@ %r328 bra $L14;
mov.u64 %r179,%r294;
bra $L13;
$L12:
.loc 1 171 12
cvt.u16.u32 %r329,%r185;
setp.ne.u16 %r330,%r329,37;
@ %r330 bra $L15;
.loc 1 171 31
ld.s8 %r180,[%r294+1];
.loc 1 171 22
setp.eq.u32 %r331,%r180,0;
@ %r331 bra $L15;
.loc 1 173 12
cvt.u16.u32 %r333,%r180;
set.u32.eq.u16 %r334,%r333,69;
neg.s32 %r335,%r334;
.loc 1 173 24
set.u32.eq.u16 %r338,%r333,79;
neg.s32 %r339,%r338;
.loc 1 173 19
cvt.u16.u32 %r341,%r335;
cvt.u16.u32 %r342,%r339;
or.b16 %r340,%r341,%r342;
.loc 1 173 9
cvt.u32.u16 %r343,%r340;
cvt.u16.u8 %r344,%r343;
setp.ne.u16 %r345,%r344,0;
@ %r345 bra $L16;
.loc 1 172 8
add.u64 %r179,%r294,1;
bra $L17;
$L16:
.loc 1 174 5
add.u64 %r179,%r294,2;
ld.s8 %r180,[%r294+2];
$L17:
.loc 1 175 6
cvt.u16.u32 %r346,%r180;
setp.eq.u16 %r347,%r346,90;
@ %r347 bra $L13;
setp.gt.s16 %r349,%r346,90;
@ %r349 bra $L18;
setp.eq.u16 %r351,%r346,77;
@ %r351 bra $L19;
setp.gt.s16 %r353,%r346,77;
@ %r353 bra $L20;
setp.eq.u16 %r355,%r346,67;
@ %r355 bra $L21;
setp.gt.s16 %r357,%r346,67;
@ %r357 bra $L22;
setp.eq.u16 %r359,%r346,65;
@ %r359 bra $L23;
setp.gt.s16 %r361,%r346,65;
@ %r361 bra $L24;
setp.eq.u32 %r362,%r180,0;
@ %r362 bra $L25;
setp.eq.u16 %r364,%r346,37;
@ %r364 bra $L26;
bra $L27;
$L24:
setp.eq.u16 %r366,%r346,66;
@ %r366 bra $L28;
bra $L27;
$L22:
setp.eq.u16 %r368,%r346,70;
@ %r368 bra $L29;
setp.gt.s16 %r370,%r346,70;
@ %r370 bra $L30;
setp.eq.u16 %r372,%r346,68;
@ %r372 bra $L31;
bra $L27;
$L30:
setp.eq.u16 %r374,%r346,72;
@ %r374 bra $L32;
setp.eq.u16 %r376,%r346,73;
@ %r376 bra $L33;
bra $L27;
$L20:
setp.eq.u16 %r378,%r346,86;
@ %r378 bra $L34;
setp.gt.s16 %r380,%r346,86;
@ %r380 bra $L35;
setp.eq.u16 %r382,%r346,84;
@ %r382 bra $L36;
setp.gt.s16 %r384,%r346,84;
@ %r384 bra $L37;
setp.eq.u16 %r386,%r346,82;
@ %r386 bra $L38;
setp.eq.u16 %r388,%r346,83;
@ %r388 bra $L39;
bra $L27;
$L37:
setp.eq.u16 %r390,%r346,85;
@ %r390 bra $L40;
bra $L27;
$L35:
setp.eq.u16 %r392,%r346,88;
@ %r392 bra $L41;
setp.eq.u16 %r394,%r346,89;
@ %r394 bra $L42;
setp.eq.u16 %r396,%r346,87;
@ %r396 bra $L43;
bra $L27;
$L18:
setp.eq.u16 %r398,%r346,112;
@ %r398 bra $L44;
setp.gt.s16 %r400,%r346,112;
@ %r400 bra $L45;
setp.eq.u16 %r402,%r346,106;
@ %r402 bra $L46;
setp.gt.s16 %r404,%r346,106;
@ %r404 bra $L47;
setp.eq.u16 %r406,%r346,99;
@ %r406 bra $L48;
setp.gt.s16 %r408,%r346,99;
@ %r408 bra $L49;
setp.eq.u16 %r410,%r346,97;
@ %r410 bra $L50;
setp.eq.u16 %r412,%r346,98;
@ %r412 bra $L51;
bra $L27;
$L49:
setp.le.s16 %r414,%r346,101;
@ %r414 bra $L52;
setp.eq.u16 %r416,%r346,104;
@ %r416 bra $L51;
bra $L27;
$L47:
setp.eq.u16 %r418,%r346,109;
@ %r418 bra $L53;
setp.gt.s16 %r420,%r346,109;
@ %r420 bra $L54;
setp.eq.u16 %r422,%r346,107;
@ %r422 bra $L32;
setp.eq.u16 %r424,%r346,108;
@ %r424 bra $L33;
bra $L27;
$L54:
setp.eq.u16 %r426,%r346,110;
@ %r426 bra $L55;
bra $L27;
$L45:
setp.eq.u16 %r428,%r346,117;
@ %r428 bra $L56;
setp.gt.s16 %r430,%r346,117;
@ %r430 bra $L57;
setp.eq.u16 %r432,%r346,115;
@ %r432 bra $L58;
setp.eq.u16 %r434,%r346,116;
@ %r434 bra $L59;
setp.eq.u16 %r436,%r346,114;
@ %r436 bra $L60;
bra $L27;
$L57:
setp.eq.u16 %r438,%r346,120;
@ %r438 bra $L61;
setp.eq.u16 %r440,%r346,121;
@ %r440 bra $L62;
setp.eq.u16 %r442,%r346,119;
@ %r442 bra $L63;
bra $L27;
$L23:
.loc 1 177 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r947;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r949;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r296;
call (%value_in),match_string,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r448,[%value_in];
}
.loc 1 178 6
setp.lt.s32 %r449,%r448,0;
@ %r449 bra $L68;
.loc 1 180 20
st.u32 [%r295+24],%r448;
.loc 1 181 7
or.b32 %r181,%r181,8;
.loc 1 182 3
bra $L13;
$L50:
.loc 1 184 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r947;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r948;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r296;
call (%value_in),match_string,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r455,[%value_in];
}
.loc 1 185 6
setp.lt.s32 %r456,%r455,0;
@ %r456 bra $L68;
.loc 1 187 20
st.u32 [%r295+24],%r455;
.loc 1 188 7
or.b32 %r181,%r181,8;
.loc 1 189 3
bra $L13;
$L28:
.loc 1 191 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r947;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r950;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r296;
call (%value_in),match_string,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r462,[%value_in];
}
.loc 1 192 6
setp.lt.s32 %r463,%r462,0;
@ %r463 bra $L68;
.loc 1 194 19
st.u32 [%r295+16],%r462;
.loc 1 195 7
or.b32 %r181,%r181,2;
.loc 1 196 3
bra $L13;
$L51:
.loc 1 199 9
cvta.const.u64 %r465,_C_time_locale;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r947;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r465;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r296;
call (%value_in),match_string,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r468,[%value_in];
}
.loc 1 200 6
setp.lt.s32 %r469,%r468,0;
@ %r469 bra $L68;
.loc 1 202 19
st.u32 [%r295+16],%r468;
.loc 1 203 7
or.b32 %r181,%r181,2;
.loc 1 204 3
bra $L13;
$L21:
.loc 1 206 9
ld.u64 %r475,[%frame+16];
mov.u32 %r472,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r475;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r472;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r476,[%value_in];
}
.loc 1 206 7
cvt.u32.u64 %r214,%r476;
.loc 1 207 9
ld.u64 %r39,[%frame+8];
.loc 1 207 6
ld.u64 %r477,[%frame+16];
setp.eq.u64 %r478,%r39,%r477;
@ %r478 bra $L68;
.loc 1 209 34
mad.lo.u32 %r480,%r214,100,-1900;
.loc 1 209 20
st.u32 [%r295+20],%r480;
.loc 1 210 7
st.u64 [%frame+16],%r39;
.loc 1 211 7
or.b32 %r181,%r181,4;
.loc 1 212 3
bra $L13;
$L48:
.loc 1 214 7
cvta.const.u64 %r485,_C_time_locale;
ld.u64 %r486,[%r485+320];
ld.u64 %r487,[%frame+16];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r487;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r486;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r488,[%value_in];
}
.loc 1 214 5
st.u64 [%frame+8],%r488;
.loc 1 215 6
setp.eq.u64 %r489,%r488,0;
@ %r489 bra $L68;
.loc 1 217 7
st.u64 [%frame+16],%r488;
.loc 1 218 7
or.b32 %r181,%r181,15;
.loc 1 219 3
bra $L13;
$L31:
.loc 1 221 7
ld.u64 %r494,[%frame+16];
cvta.const.u64 %r491,$LC0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r494;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r491;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r495,[%value_in];
}
.loc 1 221 5
st.u64 [%frame+8],%r495;
.loc 1 222 6
setp.eq.u64 %r496,%r495,0;
@ %r496 bra $L68;
.loc 1 224 7
st.u64 [%frame+16],%r495;
.loc 1 225 7
or.b32 %r181,%r181,7;
.loc 1 226 3
bra $L13;
$L52:
.loc 1 229 9
ld.u64 %r502,[%frame+16];
mov.u32 %r499,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r502;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r499;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r503,[%value_in];
}
.loc 1 229 7
cvt.u32.u64 %r201,%r503;
.loc 1 230 9
ld.u64 %r50,[%frame+8];
.loc 1 230 6
ld.u64 %r504,[%frame+16];
setp.eq.u64 %r505,%r50,%r504;
@ %r505 bra $L68;
.loc 1 232 20
st.u32 [%r295+12],%r201;
.loc 1 233 7
st.u64 [%frame+16],%r50;
.loc 1 234 7
or.b32 %r181,%r181,1;
.loc 1 235 3
bra $L13;
$L29:
.loc 1 237 7
ld.u64 %r510,[%frame+16];
cvta.const.u64 %r507,$LC1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r510;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r507;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r511,[%value_in];
}
.loc 1 237 5
st.u64 [%frame+8],%r511;
.loc 1 238 6
setp.eq.u64 %r512,%r511,0;
@ %r512 bra $L68;
.loc 1 238 17
ld.u64 %r513,[%frame+16];
setp.eq.u64 %r514,%r511,%r513;
@ %r514 bra $L68;
.loc 1 240 7
st.u64 [%frame+16],%r511;
.loc 1 241 7
or.b32 %r181,%r181,7;
.loc 1 242 3
bra $L13;
$L32:
.loc 1 245 9
ld.u64 %r520,[%frame+16];
mov.u32 %r517,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r520;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r517;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r521,[%value_in];
}
.loc 1 245 7
cvt.u32.u64 %r213,%r521;
.loc 1 246 9
ld.u64 %r57,[%frame+8];
.loc 1 246 6
ld.u64 %r522,[%frame+16];
setp.eq.u64 %r523,%r57,%r522;
@ %r523 bra $L68;
.loc 1 248 20
st.u32 [%r295+8],%r213;
.loc 1 249 7
st.u64 [%frame+16],%r57;
.loc 1 250 3
bra $L13;
$L33:
.loc 1 253 9
ld.u64 %r529,[%frame+16];
mov.u32 %r526,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r529;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r526;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r530,[%value_in];
}
.loc 1 253 7
cvt.u32.u64 %r212,%r530;
.loc 1 254 9
ld.u64 %r61,[%frame+8];
.loc 1 254 6
ld.u64 %r531,[%frame+16];
setp.eq.u64 %r532,%r61,%r531;
@ %r532 bra $L68;
.loc 1 256 6
setp.ne.u32 %r533,%r212,12;
.loc 1 257 24
selp.u32 %r212,%r212,0,%r533;
st.u32 [%r295+8],%r212;
.loc 1 260 7
st.u64 [%frame+16],%r61;
.loc 1 261 3
bra $L13;
$L46:
.loc 1 263 9
ld.u64 %r539,[%frame+16];
mov.u32 %r536,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r539;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r536;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r540,[%value_in];
}
.loc 1 263 7
cvt.u32.u64 %r200,%r540;
.loc 1 264 9
ld.u64 %r65,[%frame+8];
.loc 1 264 6
ld.u64 %r541,[%frame+16];
setp.eq.u64 %r542,%r65,%r541;
@ %r542 bra $L68;
.loc 1 266 26
add.u32 %r543,%r200,-1;
.loc 1 266 20
st.u32 [%r295+28],%r543;
.loc 1 267 7
st.u64 [%frame+16],%r65;
.loc 1 268 7
or.b32 %r181,%r181,16;
.loc 1 269 3
bra $L13;
$L53:
.loc 1 271 9
ld.u64 %r549,[%frame+16];
mov.u32 %r546,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r549;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r546;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r550,[%value_in];
}
.loc 1 271 7
cvt.u32.u64 %r199,%r550;
.loc 1 272 9
ld.u64 %r70,[%frame+8];
.loc 1 272 6
ld.u64 %r551,[%frame+16];
setp.eq.u64 %r552,%r70,%r551;
@ %r552 bra $L68;
.loc 1 274 25
add.u32 %r553,%r199,-1;
.loc 1 274 19
st.u32 [%r295+16],%r553;
.loc 1 275 7
st.u64 [%frame+16],%r70;
.loc 1 276 7
or.b32 %r181,%r181,2;
.loc 1 277 3
bra $L13;
$L19:
.loc 1 279 9
ld.u64 %r559,[%frame+16];
mov.u32 %r556,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r559;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r556;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r560,[%value_in];
}
.loc 1 279 7
cvt.u32.u64 %r211,%r560;
.loc 1 280 9
ld.u64 %r75,[%frame+8];
.loc 1 280 6
ld.u64 %r561,[%frame+16];
setp.eq.u64 %r562,%r75,%r561;
@ %r562 bra $L68;
.loc 1 282 19
st.u32 [%r295+4],%r211;
.loc 1 283 7
st.u64 [%frame+16],%r75;
.loc 1 284 3
bra $L13;
$L55:
.loc 1 286 7
ld.u64 %r77,[%frame+16];
.loc 1 286 6
ld.s8 %r564,[%r77];
cvt.u16.u32 %r563,%r564;
setp.ne.u16 %r565,%r563,10;
@ %r565 bra $L68;
.loc 1 287 7
add.u64 %r566,%r77,1;
st.u64 [%frame+16],%r566;
.loc 1 290 3
bra $L13;
$L44:
.loc 1 292 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r947;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r946;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r296;
call (%value_in),match_string,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r572,[%value_in];
}
.loc 1 293 6
setp.lt.s32 %r573,%r572,0;
@ %r573 bra $L68;
.loc 1 295 14
ld.u32 %r80,[%r295+8];
.loc 1 295 6
setp.ne.u32 %r574,%r80,0;
@ %r574 bra $L66;
.loc 1 296 10
setp.ne.u32 %r575,%r572,1;
@ %r575 bra $L13;
.loc 1 297 21
mov.u32 %r576,12;
st.u32 [%r295+8],%r576;
bra $L13;
$L66:
.loc 1 299 24
add.u32 %r577,%r80,12;
st.u32 [%r295+8],%r577;
bra $L13;
$L60:
.loc 1 302 7
cvta.const.u64 %r582,_C_time_locale;
ld.u64 %r583,[%r582+456];
ld.u64 %r584,[%frame+16];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r584;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r583;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r585,[%value_in];
}
.loc 1 302 5
st.u64 [%frame+8],%r585;
.loc 1 303 6
setp.eq.u64 %r586,%r585,0;
@ %r586 bra $L68;
.loc 1 305 7
st.u64 [%frame+16],%r585;
.loc 1 306 3
bra $L13;
$L38:
.loc 1 308 7
ld.u64 %r591,[%frame+16];
cvta.const.u64 %r588,$LC2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r591;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r588;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r592,[%value_in];
}
.loc 1 308 5
st.u64 [%frame+8],%r592;
.loc 1 309 6
setp.eq.u64 %r593,%r592,0;
@ %r593 bra $L68;
.loc 1 311 7
st.u64 [%frame+16],%r592;
.loc 1 312 3
bra $L13;
$L58:
.loc 1 319 20
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r594,[%value_in];
}
.loc 1 319 18
ld.u32 %r196,[%r594];
.loc 1 320 7
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r595,[%value_in];
}
.loc 1 320 13
mov.u32 %r596,0;
st.u32 [%r595],%r596;
.loc 1 321 13
ld.u64 %r602,[%frame+16];
mov.u32 %r599,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r602;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r599;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtoll_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r603,[%value_in];
}
.loc 1 322 9
st.u64 [%frame],%r603;
.loc 1 323 10
ld.u64 %r604,[%frame+8];
ld.u64 %r605,[%frame+16];
setp.ne.u64 %r606,%r604,%r605;
@ ! %r606 bra $L68;
.loc 1 324 7
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r607,[%value_in];
}
.loc 1 324 4
ld.u32 %r608,[%r607];
setp.ne.u32 %r609,%r608,0;
@ %r609 bra $L68;
.loc 1 325 4
ld.u64 %r610,[%frame];
setp.ne.u64 %r611,%r610,%r603;
@ %r611 bra $L68;
.loc 1 326 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r295;
call (%value_in),localtime_r,(%out_arg1,%out_arg2);
ld.param.u64 %r614,[%value_in];
}
.loc 1 326 4
setp.ne.u64 %r615,%r614,%r295;
@ %r615 bra $L68;
.loc 1 328 7
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r616,[%value_in];
}
.loc 1 328 13
st.u32 [%r616],%r196;
.loc 1 329 11
ld.u64 %r617,[%frame+8];
st.u64 [%frame+16],%r617;
.loc 1 330 11
mov.u32 %r181,31;
bra $L13;
$L39:
.loc 1 334 9
ld.u64 %r623,[%frame+16];
mov.u32 %r620,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r623;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r620;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r624,[%value_in];
}
.loc 1 334 7
cvt.u32.u64 %r210,%r624;
.loc 1 335 9
ld.u64 %r100,[%frame+8];
.loc 1 335 6
ld.u64 %r625,[%frame+16];
setp.eq.u64 %r626,%r100,%r625;
@ %r626 bra $L68;
.loc 1 337 19
st.u32 [%r295],%r210;
.loc 1 338 7
st.u64 [%frame+16],%r100;
.loc 1 339 3
bra $L13;
$L59:
.loc 1 341 7
ld.u64 %r102,[%frame+16];
.loc 1 341 6
ld.s8 %r628,[%r102];
cvt.u16.u32 %r627,%r628;
setp.ne.u16 %r629,%r627,9;
@ %r629 bra $L68;
.loc 1 342 7
add.u64 %r630,%r102,1;
st.u64 [%frame+16],%r630;
.loc 1 345 3
bra $L13;
$L36:
.loc 1 347 7
ld.u64 %r635,[%frame+16];
cvta.const.u64 %r632,$LC3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r635;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r632;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r636,[%value_in];
}
.loc 1 347 5
st.u64 [%frame+8],%r636;
.loc 1 348 6
setp.eq.u64 %r637,%r636,0;
@ %r637 bra $L68;
.loc 1 350 7
st.u64 [%frame+16],%r636;
.loc 1 351 3
bra $L13;
$L56:
.loc 1 353 9
ld.u64 %r643,[%frame+16];
mov.u32 %r640,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r643;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r640;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r644,[%value_in];
}
.loc 1 353 7
cvt.u32.u64 %r195,%r644;
.loc 1 354 9
ld.u64 %r109,[%frame+8];
.loc 1 354 6
ld.u64 %r645,[%frame+16];
setp.eq.u64 %r646,%r109,%r645;
@ %r646 bra $L68;
.loc 1 356 26
add.u32 %r647,%r195,-1;
.loc 1 356 20
st.u32 [%r295+24],%r647;
.loc 1 357 7
st.u64 [%frame+16],%r109;
.loc 1 358 7
or.b32 %r181,%r181,8;
.loc 1 359 3
bra $L13;
$L63:
.loc 1 361 9
ld.u64 %r653,[%frame+16];
mov.u32 %r650,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r653;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r650;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r654,[%value_in];
}
.loc 1 361 7
cvt.u32.u64 %r194,%r654;
.loc 1 362 9
ld.u64 %r114,[%frame+8];
.loc 1 362 6
ld.u64 %r655,[%frame+16];
setp.eq.u64 %r656,%r114,%r655;
@ %r656 bra $L68;
.loc 1 364 20
st.u32 [%r295+24],%r194;
.loc 1 365 7
st.u64 [%frame+16],%r114;
.loc 1 366 7
or.b32 %r181,%r181,8;
.loc 1 367 3
bra $L13;
$L40:
.loc 1 369 9
ld.u64 %r662,[%frame+16];
mov.u32 %r659,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r662;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r659;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r663,[%value_in];
}
.loc 1 369 7
cvt.u32.u64 %r208,%r663;
.loc 1 370 9
ld.u64 %r118,[%frame+8];
.loc 1 370 6
ld.u64 %r664,[%frame+16];
setp.eq.u64 %r665,%r118,%r664;
@ %r665 bra $L68;
.loc 1 97 11
ld.u32 %r666,[%r295+20];
add.u32 %r230,%r666,1899;
setp.le.s32 %r667,%r230,1969;
@ %r667 bra $L110;
.loc 1 95 9
mov.u32 %r234,4;
$L73:
.loc 1 98 13
add.u32 %r229,%r234,365;
.loc 1 70 23
and.b32 %r668,%r230,3;
.loc 1 70 28
setp.ne.u32 %r669,%r668,0;
@ %r669 bra $L71;
rem.s32 %r671,%r230,100;
setp.eq.u32 %r676,%r671,0;
@ %r676 bra $L72;
.loc 1 98 19
add.u32 %r229,%r234,366;
bra $L71;
$L72:
rem.s32 %r678,%r230,400;
.loc 1 70 50
setp.ne.u32 %r683,%r678,0;
@ %r683 bra $L71;
.loc 1 98 19
add.u32 %r229,%r234,366;
$L71:
.loc 1 98 6
rem.s32 %r234,%r229,7;
.loc 1 97 11
add.u32 %r230,%r230,-1;
setp.ne.u32 %r684,%r230,1969;
@ %r684 bra $L73;
bra $L70;
$L110:
.loc 1 95 9
mov.u32 %r234,4;
$L70:
.loc 1 112 29
shl.b32 %r686,%r208,3;
sub.u32 %r687,%r686,%r208;
.loc 1 112 33
ld.u32 %r689,[%r295+24];
add.u32 %r688,%r687,%r689;
.loc 1 112 52
sub.u32 %r228,%r688,%r234;
.loc 1 112 22
st.u32 [%r295+28],%r228;
.loc 1 113 8
setp.ge.s32 %r690,%r228,0;
@ %r690 bra $L74;
.loc 1 114 19
st.u32 [%r295+24],%r234;
.loc 1 115 19
mov.u32 %r691,0;
st.u32 [%r295+28],%r691;
$L74:
.loc 1 373 7
st.u64 [%frame+16],%r118;
.loc 1 374 7
or.b32 %r181,%r181,16;
.loc 1 375 3
bra $L13;
$L34:
.loc 1 377 9
ld.u64 %r697,[%frame+16];
mov.u32 %r694,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r697;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r694;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r698,[%value_in];
}
.loc 1 377 7
cvt.u32.u64 %r207,%r698;
.loc 1 378 9
ld.u64 %r122,[%frame+8];
.loc 1 378 6
ld.u64 %r699,[%frame+16];
setp.eq.u64 %r700,%r122,%r699;
@ %r700 bra $L68;
.loc 1 97 11
ld.u32 %r701,[%r295+20];
add.u32 %r248,%r701,1899;
setp.le.s32 %r702,%r248,1969;
@ %r702 bra $L111;
.loc 1 95 9
mov.u32 %r252,4;
$L78:
.loc 1 98 13
add.u32 %r247,%r252,365;
.loc 1 70 23
and.b32 %r703,%r248,3;
.loc 1 70 28
setp.ne.u32 %r704,%r703,0;
@ %r704 bra $L76;
rem.s32 %r706,%r248,100;
setp.eq.u32 %r711,%r706,0;
@ %r711 bra $L77;
.loc 1 98 19
add.u32 %r247,%r252,366;
bra $L76;
$L77:
rem.s32 %r713,%r248,400;
.loc 1 70 50
setp.ne.u32 %r718,%r713,0;
@ %r718 bra $L76;
.loc 1 98 19
add.u32 %r247,%r252,366;
$L76:
.loc 1 98 6
rem.s32 %r252,%r247,7;
.loc 1 97 11
add.u32 %r248,%r248,-1;
setp.ne.u32 %r719,%r248,1969;
@ %r719 bra $L78;
.loc 1 143 61
add.u32 %r720,%r252,6;
.loc 1 143 9
rem.s32 %r239,%r720,7;
.loc 1 146 8
setp.gt.s32 %r721,%r239,3;
.loc 1 147 9
selp.u32 %r242,0,7,%r721;
bra $L75;
$L111:
.loc 1 143 9
mov.u32 %r239,3;
.loc 1 147 9
mov.u32 %r242,7;
$L75:
.loc 1 149 39
add.u32 %r722,%r207,-1;
.loc 1 149 44
shl.b32 %r724,%r722,3;
sub.u32 %r725,%r724,%r722;
.loc 1 149 31
add.u32 %r726,%r725,%r242;
.loc 1 149 48
ld.u32 %r728,[%r295+24];
add.u32 %r727,%r726,%r728;
.loc 1 149 67
sub.u32 %r246,%r727,%r239;
.loc 1 149 22
st.u32 [%r295+28],%r246;
.loc 1 150 8
setp.ge.s32 %r729,%r246,0;
@ %r729 bra $L79;
.loc 1 151 19
st.u32 [%r295+24],%r239;
.loc 1 152 19
mov.u32 %r730,0;
st.u32 [%r295+28],%r730;
$L79:
.loc 1 381 7
st.u64 [%frame+16],%r122;
.loc 1 382 7
or.b32 %r181,%r181,16;
.loc 1 383 3
bra $L13;
$L43:
.loc 1 385 9
ld.u64 %r736,[%frame+16];
mov.u32 %r733,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r736;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r733;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r737,[%value_in];
}
.loc 1 385 7
cvt.u32.u64 %r205,%r737;
.loc 1 386 9
ld.u64 %r126,[%frame+8];
.loc 1 386 6
ld.u64 %r738,[%frame+16];
setp.eq.u64 %r739,%r126,%r738;
@ %r739 bra $L68;
.loc 1 97 11
ld.u32 %r740,[%r295+20];
add.u32 %r263,%r740,1899;
setp.le.s32 %r741,%r263,1969;
@ %r741 bra $L113;
.loc 1 95 9
mov.u32 %r267,4;
$L83:
.loc 1 98 13
add.u32 %r262,%r267,365;
.loc 1 70 23
and.b32 %r742,%r263,3;
.loc 1 70 28
setp.ne.u32 %r743,%r742,0;
@ %r743 bra $L81;
rem.s32 %r745,%r263,100;
setp.eq.u32 %r750,%r745,0;
@ %r750 bra $L82;
.loc 1 98 19
add.u32 %r262,%r267,366;
bra $L81;
$L82:
rem.s32 %r752,%r263,400;
.loc 1 70 50
setp.ne.u32 %r757,%r752,0;
@ %r757 bra $L81;
.loc 1 98 19
add.u32 %r262,%r267,366;
$L81:
.loc 1 98 6
rem.s32 %r267,%r262,7;
.loc 1 97 11
add.u32 %r263,%r263,-1;
setp.ne.u32 %r758,%r263,1969;
@ %r758 bra $L83;
.loc 1 127 61
add.u32 %r759,%r267,6;
.loc 1 127 9
rem.s32 %r283,%r759,7;
bra $L80;
$L113:
.loc 1 97 11
mov.u32 %r283,3;
$L80:
.loc 1 129 53
ld.u32 %r761,[%r295+24];
add.u32 %r760,%r761,6;
.loc 1 129 58
rem.s32 %r763,%r760,7;
.loc 1 129 29
shl.b32 %r765,%r205,3;
sub.u32 %r766,%r765,%r205;
.loc 1 129 33
add.u32 %r767,%r763,%r766;
.loc 1 129 62
sub.u32 %r259,%r767,%r283;
.loc 1 129 22
st.u32 [%r295+28],%r259;
.loc 1 130 8
setp.ge.s32 %r768,%r259,0;
@ %r768 bra $L84;
.loc 1 131 27
add.u32 %r769,%r283,1;
.loc 1 131 32
rem.s32 %r771,%r769,7;
.loc 1 131 19
st.u32 [%r295+24],%r771;
.loc 1 132 19
mov.u32 %r772,0;
st.u32 [%r295+28],%r772;
$L84:
.loc 1 389 7
st.u64 [%frame+16],%r126;
.loc 1 390 7
or.b32 %r181,%r181,16;
.loc 1 391 3
bra $L13;
$L61:
.loc 1 393 7
cvta.const.u64 %r777,_C_time_locale;
ld.u64 %r778,[%r777+312];
ld.u64 %r779,[%frame+16];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r779;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r778;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r780,[%value_in];
}
.loc 1 393 5
st.u64 [%frame+8],%r780;
.loc 1 394 6
setp.eq.u64 %r781,%r780,0;
@ %r781 bra $L68;
.loc 1 396 7
st.u64 [%frame+16],%r780;
.loc 1 397 7
or.b32 %r181,%r181,7;
.loc 1 398 3
bra $L13;
$L41:
.loc 1 400 7
cvta.const.u64 %r786,_C_time_locale;
ld.u64 %r787,[%r786+304];
ld.u64 %r788,[%frame+16];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r788;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r787;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r295;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r789,[%value_in];
}
.loc 1 400 5
st.u64 [%frame+8],%r789;
.loc 1 401 6
setp.eq.u64 %r790,%r789,0;
@ %r790 bra $L68;
.loc 1 403 7
st.u64 [%frame+16],%r789;
.loc 1 404 7
bra $L13;
$L62:
.loc 1 406 9
ld.u64 %r796,[%frame+16];
mov.u32 %r793,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r796;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r793;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r797,[%value_in];
}
.loc 1 406 7
cvt.u32.u64 %r182,%r797;
.loc 1 407 9
ld.u64 %r136,[%frame+8];
.loc 1 407 6
ld.u64 %r798,[%frame+16];
setp.eq.u64 %r799,%r136,%r798;
@ %r799 bra $L68;
.loc 1 409 6
setp.gt.s32 %r800,%r182,69;
@ %r800 bra $L85;
.loc 1 410 30
add.u32 %r182,%r182,100;
$L85:
st.u32 [%r295+20],%r182;
.loc 1 413 7
st.u64 [%frame+16],%r136;
.loc 1 414 7
or.b32 %r181,%r181,4;
.loc 1 415 3
bra $L13;
$L42:
.loc 1 417 9
ld.u64 %r806,[%frame+16];
mov.u32 %r803,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r806;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r945;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r803;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r296;
call (%value_in),strtol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r807,[%value_in];
}
.loc 1 417 7
cvt.u32.u64 %r204,%r807;
.loc 1 418 9
ld.u64 %r140,[%frame+8];
.loc 1 418 6
ld.u64 %r808,[%frame+16];
setp.eq.u64 %r809,%r140,%r808;
@ %r809 bra $L68;
.loc 1 420 26
add.u32 %r810,%r204,-1900;
.loc 1 420 20
st.u32 [%r295+20],%r810;
.loc 1 421 7
st.u64 [%frame+16],%r140;
.loc 1 422 7
or.b32 %r181,%r181,4;
.loc 1 423 3
bra $L13;
$L25:
.loc 1 428 3
add.u64 %r179,%r179,-1;
$L26:
.loc 1 431 7
ld.u64 %r143,[%frame+16];
.loc 1 431 6
ld.s8 %r812,[%r143];
cvt.u16.u32 %r811,%r812;
setp.ne.u16 %r813,%r811,37;
@ %r813 bra $L68;
.loc 1 432 7
add.u64 %r814,%r143,1;
st.u64 [%frame+16],%r814;
.loc 1 435 3
bra $L13;
$L27:
.loc 1 437 7
ld.u64 %r146,[%frame+16];
.loc 1 287 7
add.u64 %r275,%r146,1;
.loc 1 437 6
ld.s8 %r816,[%r146];
cvt.u16.u32 %r815,%r816;
setp.eq.u16 %r817,%r815,37;
@ %r817 bra $L86;
.loc 1 437 19
st.u64 [%frame+16],%r275;
ld.s8 %r819,[%r146+1];
cvt.u16.u32 %r818,%r819;
cvt.u16.u32 %r820,%r180;
setp.ne.u16 %r821,%r818,%r820;
@ %r821 bra $L68;
.loc 1 438 7
add.u64 %r275,%r146,2;
$L86:
st.u64 [%frame+16],%r275;
.loc 1 441 3
bra $L13;
$L15:
.loc 1 444 10
ld.u64 %r149,[%frame+16];
.loc 1 444 9
ld.s8 %r823,[%r149];
cvt.u16.u32 %r822,%r823;
cvt.u16.u32 %r824,%r185;
setp.ne.u16 %r825,%r822,%r824;
@ %r825 bra $L68;
.loc 1 445 3
add.u64 %r826,%r149,1;
st.u64 [%frame+16],%r826;
mov.u64 %r179,%r294;
bra $L13;
$L109:
.loc 1 169 12
mov.u64 %r179,%r294;
$L13:
.loc 1 164 35
add.u64 %r294,%r179,1;
.loc 1 164 15
ld.s8 %r185,[%r179+1];
.loc 1 164 5
setp.ne.u32 %r827,%r185,0;
@ %r827 bra $L87;
bra $L180;
$L68:
.loc 1 179 14
mov.u64 %r292,0;
bra $L10;
$L180:
.loc 1 451 14
and.b32 %r828,%r181,7;
.loc 1 451 8
setp.eq.u32 %r829,%r828,7;
@ %r829 bra $L90;
.loc 1 496 14
and.b32 %r209,%r181,28;
.loc 1 466 19
and.b32 %r830,%r181,20;
.loc 1 466 13
setp.eq.u32 %r831,%r830,20;
@ ! %r831 bra $L92;
bra $L91;
$L90:
.loc 1 454 12
and.b32 %r832,%r181,16;
.loc 1 454 5
setp.eq.u32 %r833,%r832,0;
@ %r833 bra $L93;
.loc 1 496 14
and.b32 %r209,%r181,28;
bra $L92;
$L93:
.loc 1 456 51
ld.u32 %r154,[%r295+16];
.loc 1 456 43
cvta.const.u64 %r834,_DAYS_BEFORE_MONTH;
cvt.s64.s32 %r835,%r154;
shl.b64 %r836,%r835,2;
add.u64 %r837,%r834,%r836;
.loc 1 457 3
ld.u32 %r838,[%r837];
ld.u32 %r839,[%r295+12];
add.u32 %r157,%r838,%r839;
.loc 1 456 23
st.u32 [%r295+28],%r157;
.loc 1 458 11
ld.u32 %r840,[%r295+20];
add.u32 %r159,%r840,1900;
.loc 1 70 23
and.b32 %r841,%r840,3;
.loc 1 70 28
setp.ne.u32 %r842,%r841,0;
@ %r842 bra $L94;
rem.s32 %r844,%r159,100;
setp.ne.u32 %r850,%r844,0;
@ %r850 bra $L95;
rem.s32 %r852,%r159,400;
.loc 1 70 50
setp.ne.u32 %r858,%r852,0;
@ %r858 bra $L94;
$L95:
.loc 1 459 3
setp.gt.s32 %r859,%r154,1;
@ %r859 bra $L96;
$L94:
.loc 1 461 19
add.u32 %r860,%r157,-1;
st.u32 [%r295+28],%r860;
$L96:
.loc 1 496 14
and.b32 %r861,%r181,28;
or.b32 %r209,%r861,16;
bra $L92;
$L91:
.loc 1 469 12
and.b32 %r161,%r181,2;
.loc 1 469 5
setp.ne.u32 %r862,%r161,0;
@ %r862 bra $L97;
.loc 1 471 17
ld.u32 %r162,[%r295+28];
.loc 1 471 9
setp.gt.s32 %r863,%r162,30;
@ %r863 bra $L98;
.loc 1 472 19
st.u32 [%r295+16],%r161;
bra $L97;
$L98:
.loc 1 474 14
ld.u32 %r865,[%r295+20];
add.u32 %r164,%r865,1900;
.loc 1 70 23
and.b32 %r866,%r865,3;
.loc 1 70 28
setp.ne.u32 %r867,%r866,0;
@ %r867 bra $L99;
rem.s32 %r869,%r164,100;
setp.ne.u32 %r875,%r869,0;
@ %r875 bra $L114;
.loc 1 70 50
rem.s32 %r877,%r164,400;
set.u32.eq.u32 %r884,%r877,0;
neg.s32 %r161,%r884;
bra $L99;
$L114:
.loc 1 70 28
mov.u32 %r161,1;
$L99:
cvta.const.u64 %r175,_DAYS_BEFORE_MONTH+12;
mov.u32 %r206,59;
.loc 1 476 10
mov.u32 %r187,2;
$L102:
.loc 1 477 52
add.u32 %r886,%r161,%r206;
.loc 1 477 10
setp.lt.s32 %r887,%r162,%r886;
@ %r887 bra $L100;
.loc 1 476 23
add.u32 %r187,%r187,1;
.loc 1 476 3
setp.eq.u32 %r888,%r187,12;
@ %r888 bra $L115;
.loc 1 477 48
ld.u32 %r206,[%r175];
add.u64 %r175,%r175,4;
bra $L102;
$L100:
.loc 1 480 23
add.u32 %r235,%r187,-1;
bra $L101;
$L115:
mov.u32 %r235,11;
$L101:
.loc 1 480 19
st.u32 [%r295+16],%r235;
$L97:
.loc 1 484 12
and.b32 %r889,%r181,1;
.loc 1 484 5
setp.ne.u32 %r890,%r889,0;
@ %r890 bra $L92;
.loc 1 487 31
ld.u32 %r168,[%r295+16];
.loc 1 487 23
cvta.const.u64 %r891,_DAYS_BEFORE_MONTH;
cvt.s64.s32 %r892,%r168;
shl.b64 %r893,%r892,2;
add.u64 %r894,%r891,%r893;
.loc 1 487 3
ld.u32 %r895,[%r295+28];
ld.u32 %r896,[%r894];
sub.u32 %r170,%r895,%r896;
.loc 1 486 23
st.u32 [%r295+12],%r170;
.loc 1 488 11
ld.u32 %r897,[%r295+20];
add.u32 %r172,%r897,1900;
.loc 1 70 23
and.b32 %r898,%r897,3;
.loc 1 70 28
setp.ne.u32 %r899,%r898,0;
@ %r899 bra $L103;
rem.s32 %r901,%r172,100;
setp.ne.u32 %r907,%r901,0;
@ %r907 bra $L104;
rem.s32 %r909,%r172,400;
.loc 1 70 50
setp.ne.u32 %r915,%r909,0;
@ %r915 bra $L103;
$L104:
.loc 1 489 3
setp.gt.s32 %r916,%r168,1;
@ %r916 bra $L92;
$L103:
.loc 1 491 19
add.u32 %r917,%r170,1;
st.u32 [%r295+12],%r917;
$L92:
.loc 1 496 8
setp.ne.u32 %r918,%r209,20;
@ %r918 bra $L11;
.loc 1 97 11
ld.u32 %r919,[%r295+20];
add.u32 %r269,%r919,1899;
setp.le.s32 %r920,%r269,1969;
@ %r920 bra $L116;
.loc 1 95 9
mov.u32 %r273,4;
$L108:
.loc 1 98 13
add.u32 %r268,%r273,365;
.loc 1 70 23
and.b32 %r921,%r269,3;
.loc 1 70 28
setp.ne.u32 %r922,%r921,0;
@ %r922 bra $L106;
rem.s32 %r924,%r269,100;
setp.eq.u32 %r929,%r924,0;
@ %r929 bra $L107;
.loc 1 98 19
add.u32 %r268,%r273,366;
bra $L106;
$L107:
rem.s32 %r931,%r269,400;
.loc 1 70 50
setp.ne.u32 %r936,%r931,0;
@ %r936 bra $L106;
.loc 1 98 19
add.u32 %r268,%r273,366;
$L106:
.loc 1 98 6
rem.s32 %r273,%r268,7;
.loc 1 97 11
add.u32 %r269,%r269,-1;
setp.ne.u32 %r937,%r269,1969;
@ %r937 bra $L108;
bra $L105;
$L116:
.loc 1 95 9
mov.u32 %r273,4;
$L105:
.loc 1 499 27
ld.u32 %r939,[%r295+28];
add.u32 %r938,%r273,%r939;
.loc 1 499 47
rem.s32 %r940,%r938,7;
.loc 1 499 19
st.u32 [%r295+24],%r940;
$L11:
.loc 1 502 12
ld.u64 %r292,[%frame+16];
$L10:
.loc 1 503 1
mov.u64 %value,%r292;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strptime
.visible .func (.param .u64 %value_out) strptime (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 508 10
cvta.global.u64 %r29,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),strptime_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r30,[%value_in];
}
.loc 1 509 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strrchr.o/1612277262  0     0     100666  1639      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strrchr
.visible .func (.param .u64 %value_out) strrchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strrchr.c"
// BEGIN GLOBAL FUNCTION DECL: strchr
.extern .func (.param .u64 %value_out) strchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: strrchr
.visible .func (.param .u64 %value_out) strrchr (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .pred %r26;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
.loc 1 38 6
setp.ne.u32 %r26,%r25,0;
@ %r26 bra $L6;
bra $L7;
$L4:
.loc 1 43 5
add.u64 %r24,%r29,1;
mov.u64 %r23,%r29;
bra $L2;
$L6:
.loc 1 36 15
mov.u64 %r23,0;
$L2:
.loc 1 40 17
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
call (%value_in),strchr,(%out_arg1,%out_arg2);
ld.param.u64 %r29,[%value_in];
}
.loc 1 40 13
setp.ne.u64 %r30,%r29,0;
@ %r30 bra $L4;
bra $L1;
$L7:
.loc 1 48 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r25;
call (%value_in),strchr,(%out_arg1,%out_arg2);
ld.param.u64 %r33,[%value_in];
}
mov.u64 %r23,%r33;
$L1:
.loc 1 52 1
mov.u64 %value,%r23;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strsep.o/ 1612277262  0     0     100666  1306      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strsep
.visible .func (.param .u64 %value_out) strsep (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strsep.c"
// BEGIN GLOBAL FUNCTION DECL: __strtok_r
.extern .func (.param .u64 %value_out) __strtok_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: strsep
.visible .func (.param .u64 %value_out) strsep (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r29;
.reg .u64 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 17 9
mov.u32 %r29,0;
ld.u64 %r26,[%r24];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r29;
call (%value_in),__strtok_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r30,[%value_in];
}
.loc 1 18 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
/1349           1612277262  0     0     100666  9305      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: strsignal
.visible .func (.param .u64 %value_out) strsignal (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/string/strsignal.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: siprintf
.extern .func (.param .u32 %value_out) siprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[20] =
{73,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[10] =
{73,110,116,101,114,114,117,112,116,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[25] =
{70,108,111,97,116,105,110,103,32,112,111,105,110,116,32,101,120,99,101,112,116,105,111,110,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[9] =
{69,77,84,32,116,114,97,112,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[7] =
{72,97,110,103,117,112,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[9] =
{73,79,84,32,116,114,97,112,0 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[21] =
{85,114,103,101,110,116,32,73,47,79,32,99,111,110,100,105,116,105,111,110,0 };
// BEGIN VAR DEF: $LC7
.const .align 1 .u8 $LC7[19] =
{83,101,103,109,101,110,116,97,116,105,111,110,32,102,97,117,108,116,0 };
// BEGIN VAR DEF: $LC8
.const .align 1 .u8 $LC8[16] =
{66,97,100,32,115,121,115,116,101,109,32,99,97,108,108,0 };
// BEGIN VAR DEF: $LC9
.const .align 1 .u8 $LC9[10] =
{66,117,115,32,101,114,114,111,114,0 };
// BEGIN VAR DEF: $LC10
.const .align 1 .u8 $LC10[22] =
{84,114,97,99,101,47,98,114,101,97,107,112,111,105,110,116,32,116,114,97,112,0 };
// BEGIN VAR DEF: $LC11
.const .align 1 .u8 $LC11[11] =
{84,101,114,109,105,110,97,116,101,100,0 };
// BEGIN VAR DEF: $LC12
.const .align 1 .u8 $LC12[7] =
{75,105,108,108,101,100,0 };
// BEGIN VAR DEF: $LC13
.const .align 1 .u8 $LC13[12] =
{65,108,97,114,109,32,99,108,111,99,107,0 };
// BEGIN VAR DEF: $LC14
.const .align 1 .u8 $LC14[5] =
{81,117,105,116,0 };
// BEGIN VAR DEF: $LC15
.const .align 1 .u8 $LC15[10] =
{67,111,110,116,105,110,117,101,100,0 };
// BEGIN VAR DEF: $LC16
.const .align 1 .u8 $LC16[13] =
{67,104,105,108,100,32,101,120,105,116,101,100,0 };
// BEGIN VAR DEF: $LC17
.const .align 1 .u8 $LC17[8] =
{83,116,111,112,112,101,100,0 };
// BEGIN VAR DEF: $LC18
.const .align 1 .u8 $LC18[25] =
{70,105,108,101,32,115,105,122,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0 };
// BEGIN VAR DEF: $LC19
.const .align 1 .u8 $LC19[24] =
{67,80,85,32,116,105,109,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0 };
// BEGIN VAR DEF: $LC30
.const .align 1 .u8 $LC30[18] =
{85,110,107,110,111,119,110,32,115,105,103,110,97,108,32,37,100,0 };
// BEGIN VAR DEF: $LC20
.const .align 1 .u8 $LC20[17] =
{83,116,111,112,112,101,100,32,40,115,105,103,110,97,108,41,0 };
// BEGIN VAR DEF: $LC21
.const .align 1 .u8 $LC21[24] =
{80,114,111,102,105,108,105,110,103,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0 };
// BEGIN VAR DEF: $LC22
.const .align 1 .u8 $LC22[22] =
{86,105,114,116,117,97,108,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0 };
// BEGIN VAR DEF: $LC23
.const .align 1 .u8 $LC23[22] =
{85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,49,0 };
// BEGIN VAR DEF: $LC24
.const .align 1 .u8 $LC24[13] =
{73,47,79,32,112,111,115,115,105,98,108,101,0 };
// BEGIN VAR DEF: $LC25
.const .align 1 .u8 $LC25[12] =
{66,114,111,107,101,110,32,112,105,112,101,0 };
// BEGIN VAR DEF: $LC26
.const .align 1 .u8 $LC26[15] =
{87,105,110,100,111,119,32,99,104,97,110,103,101,100,0 };
// BEGIN VAR DEF: $LC27
.const .align 1 .u8 $LC27[14] =
{82,101,115,111,117,114,99,101,32,108,111,115,116,0 };
// BEGIN VAR DEF: $LC28
.const .align 1 .u8 $LC28[20] =
{83,116,111,112,112,101,100,32,40,116,116,121,32,105,110,112,117,116,41,0 };
// BEGIN VAR DEF: $LC29
.const .align 1 .u8 $LC29[22] =
{85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,50,0 };
// BEGIN GLOBAL FUNCTION DEF: strsignal
.visible .func (.param .u64 %value_out) strsignal (.param .u32 %in_ar0)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u64 %r23;
.reg .u32 %r24;
.reg .pred %r25;
.reg .pred %r26;
.reg .pred %r27;
.reg .pred %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .pred %r32;
.reg .pred %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .pred %r37;
.reg .pred %r38;
.reg .pred %r39;
.reg .pred %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .pred %r47;
.reg .pred %r48;
.reg .pred %r49;
.reg .pred %r50;
.reg .pred %r51;
.reg .pred %r52;
.reg .pred %r53;
.reg .pred %r54;
.reg .pred %r55;
.reg .pred %r56;
.reg .pred %r57;
.reg .pred %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .pred %r61;
.reg .u64 %r62;
.reg .u64 %r64;
.reg .u32 %r65;
mov.u32 %r24,%ar0;
.loc 1 73 3
setp.eq.u32 %r25,%r24,16;
@ %r25 bra $L11;
setp.gt.s32 %r26,%r24,16;
@ %r26 bra $L3;
setp.eq.u32 %r27,%r24,8;
@ %r27 bra $L12;
setp.gt.s32 %r28,%r24,8;
@ %r28 bra $L4;
setp.eq.u32 %r29,%r24,4;
@ %r29 bra $L13;
setp.gt.s32 %r30,%r24,4;
@ %r30 bra $L5;
setp.eq.u32 %r31,%r24,2;
@ %r31 bra $L14;
setp.eq.u32 %r32,%r24,3;
@ %r32 bra $L15;
setp.eq.u32 %r33,%r24,1;
@ %r33 bra $L16;
bra $L6;
$L5:
setp.eq.u32 %r34,%r24,6;
@ %r34 bra $L17;
setp.eq.u32 %r35,%r24,7;
@ %r35 bra $L18;
setp.eq.u32 %r36,%r24,5;
@ %r36 bra $L19;
bra $L6;
$L4:
setp.eq.u32 %r37,%r24,12;
@ %r37 bra $L20;
setp.gt.s32 %r38,%r24,12;
@ %r38 bra $L7;
setp.eq.u32 %r39,%r24,10;
@ %r39 bra $L21;
setp.eq.u32 %r40,%r24,11;
@ %r40 bra $L22;
setp.eq.u32 %r41,%r24,9;
@ %r41 bra $L23;
bra $L6;
$L7:
setp.eq.u32 %r42,%r24,14;
@ %r42 bra $L24;
setp.eq.u32 %r43,%r24,15;
@ %r43 bra $L25;
setp.eq.u32 %r44,%r24,13;
@ %r44 bra $L26;
bra $L6;
$L3:
setp.eq.u32 %r45,%r24,25;
@ %r45 bra $L27;
setp.gt.s32 %r46,%r24,25;
@ %r46 bra $L8;
setp.eq.u32 %r47,%r24,20;
@ %r47 bra $L28;
setp.gt.s32 %r48,%r24,20;
@ %r48 bra $L9;
setp.eq.u32 %r49,%r24,18;
@ %r49 bra $L29;
setp.eq.u32 %r50,%r24,19;
@ %r50 bra $L30;
setp.eq.u32 %r51,%r24,17;
@ %r51 bra $L31;
bra $L6;
$L9:
setp.eq.u32 %r52,%r24,23;
@ %r52 bra $L32;
setp.eq.u32 %r53,%r24,24;
@ %r53 bra $L33;
setp.eq.u32 %r54,%r24,21;
@ %r54 bra $L34;
bra $L6;
$L8:
setp.eq.u32 %r55,%r24,29;
@ %r55 bra $L35;
setp.gt.s32 %r56,%r24,29;
@ %r56 bra $L10;
setp.eq.u32 %r57,%r24,27;
@ %r57 bra $L36;
setp.eq.u32 %r58,%r24,28;
@ %r58 bra $L37;
setp.eq.u32 %r59,%r24,26;
@ %r59 bra $L38;
bra $L6;
$L10:
setp.eq.u32 %r60,%r24,30;
@ %r60 bra $L39;
setp.eq.u32 %r61,%r24,31;
@ %r61 bra $L40;
$L6:
.loc 1 64 10
ld.global.u64 %r62,[_impure_ptr];
add.u64 %r23,%r62,288;
.loc 1 244 7
st.u32 [%stack],%r24;
cvta.const.u64 %r64,$LC30;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r64;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r65,[%value_in];
}
.loc 1 245 7
bra $L1;
$L11:
.loc 1 154 14
cvta.const.u64 %r23,$LC6;
bra $L1;
$L12:
.loc 1 114 14
cvta.const.u64 %r23,$LC2;
bra $L1;
$L13:
.loc 1 91 14
cvta.const.u64 %r23,$LC0;
bra $L1;
$L14:
.loc 1 73 3
cvta.const.u64 %r23,$LC1;
bra $L1;
$L15:
.loc 1 86 14
cvta.const.u64 %r23,$LC14;
bra $L1;
$L16:
.loc 1 76 14
cvta.const.u64 %r23,$LC4;
bra $L1;
$L17:
.loc 1 104 14
cvta.const.u64 %r23,$LC5;
bra $L1;
$L18:
.loc 1 109 14
cvta.const.u64 %r23,$LC3;
bra $L1;
$L19:
.loc 1 96 14
cvta.const.u64 %r23,$LC10;
bra $L1;
$L20:
.loc 1 134 14
cvta.const.u64 %r23,$LC8;
bra $L1;
$L21:
.loc 1 124 14
cvta.const.u64 %r23,$LC9;
bra $L1;
$L22:
.loc 1 129 14
cvta.const.u64 %r23,$LC7;
bra $L1;
$L23:
.loc 1 119 14
cvta.const.u64 %r23,$LC12;
bra $L1;
$L24:
.loc 1 144 14
cvta.const.u64 %r23,$LC13;
bra $L1;
$L25:
.loc 1 149 14
cvta.const.u64 %r23,$LC11;
bra $L1;
$L26:
.loc 1 139 14
cvta.const.u64 %r23,$LC25;
bra $L1;
$L27:
.loc 1 225 14
cvta.const.u64 %r23,$LC18;
bra $L1;
$L28:
.loc 1 177 14
cvta.const.u64 %r23,$LC16;
bra $L1;
$L29:
.loc 1 164 14
cvta.const.u64 %r23,$LC17;
bra $L1;
$L30:
.loc 1 169 14
cvta.const.u64 %r23,$LC15;
bra $L1;
$L31:
.loc 1 159 14
cvta.const.u64 %r23,$LC20;
bra $L1;
$L32:
.loc 1 195 14
cvta.const.u64 %r23,$LC24;
bra $L1;
$L33:
.loc 1 220 14
cvta.const.u64 %r23,$LC19;
bra $L1;
$L34:
.loc 1 182 14
cvta.const.u64 %r23,$LC28;
bra $L1;
$L35:
.loc 1 240 14
cvta.const.u64 %r23,$LC27;
bra $L1;
$L36:
.loc 1 235 14
cvta.const.u64 %r23,$LC21;
bra $L1;
$L37:
.loc 1 200 14
cvta.const.u64 %r23,$LC26;
bra $L1;
$L38:
.loc 1 230 14
cvta.const.u64 %r23,$LC22;
bra $L1;
$L39:
.loc 1 205 14
cvta.const.u64 %r23,$LC23;
bra $L1;
$L40:
.loc 1 210 14
cvta.const.u64 %r23,$LC29;
$L1:
.loc 1 249 1
mov.u64 %value,%r23;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strspn.o/ 1612277262  0     0     100666  1703      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strspn
.visible .func (.param .u64 %value_out) strspn (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strspn.c"
// BEGIN GLOBAL FUNCTION DEF: strspn
.visible .func (.param .u64 %value_out) strspn (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .pred %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .pred %r36;
.reg .pred %r37;
.reg .pred %r40;
.reg .pred %r41;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
.loc 1 39 10
ld.s8 %r25,[%r31];
.loc 1 39 9
setp.ne.u32 %r33,%r25,0;
@ %r33 bra $L2;
mov.u64 %r30,0;
bra $L1;
$L7:
.loc 1 41 7
mov.u64 %r26,%r32;
mov.u32 %r24,%r23;
.loc 1 43 7
cvt.u16.u32 %r35,%r25;
$L5:
cvt.u16.u32 %r34,%r24;
setp.eq.u16 %r36,%r34,%r35;
@ %r36 bra $L4;
.loc 1 41 25
add.u64 %r26,%r26,1;
.loc 1 41 20
ld.s8 %r24,[%r26];
.loc 1 41 7
setp.ne.u32 %r37,%r24,0;
@ %r37 bra $L5;
.loc 1 51 13
sub.u64 %r30,%r27,%r31;
bra $L1;
$L2:
.loc 1 41 20
ld.s8 %r23,[%r32];
mov.u64 %r27,%r31;
setp.ne.u32 %r41,%r23,0;
$L6:
.loc 1 41 7
@ %r41 bra $L7;
.loc 1 51 13
sub.u64 %r30,%r27,%r31;
bra $L1;
$L4:
.loc 1 48 9
add.u64 %r27,%r27,1;
.loc 1 39 10
ld.s8 %r25,[%r27];
.loc 1 39 9
setp.ne.u32 %r40,%r25,0;
@ %r40 bra $L6;
.loc 1 51 13
sub.u64 %r30,%r27,%r31;
$L1:
.loc 1 52 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strstr.o/ 1612277262  0     0     100666  22955     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: two_way_long_needle
.func (.param .u64 %value_out) two_way_long_needle (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/string/str-two-way.h"
// BEGIN GLOBAL FUNCTION DECL: strstr
.visible .func (.param .u64 %value_out) strstr (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 2 "../../../../../newlib/libc/string/strstr.c"
// BEGIN GLOBAL FUNCTION DECL: memcmp
.extern .func (.param .u32 %value_out) memcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strnlen
.extern .func (.param .u64 %value_out) strnlen (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strchr
.extern .func (.param .u64 %value_out) strchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN FUNCTION DEF: two_way_long_needle
.func (.param .u64 %value_out) two_way_long_needle (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[2048];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r45;
.reg .u64 %r55;
.reg .u64 %r60;
.reg .u64 %r62;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r68;
.reg .u64 %r69;
.reg .u64 %r72;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u64 %r84;
.reg .u64 %r91;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u64 %r103;
.reg .u64 %r104;
.reg .u64 %r106;
.reg .u64 %r107;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u64 %r112;
.reg .u64 %r116;
.reg .u64 %r118;
.reg .u64 %r120;
.reg .u64 %r121;
.reg .u64 %r122;
.reg .u64 %r123;
.reg .u64 %r124;
.reg .pred %r125;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .u64 %r128;
.reg .u16 %r129;
.reg .u16 %r130;
.reg .pred %r131;
.reg .pred %r134;
.reg .pred %r135;
.reg .pred %r136;
.reg .u64 %r137;
.reg .u64 %r138;
.reg .u64 %r139;
.reg .u16 %r140;
.reg .u16 %r141;
.reg .pred %r142;
.reg .pred %r145;
.reg .pred %r146;
.reg .pred %r147;
.reg .pred %r148;
.reg .pred %r149;
.reg .pred %r150;
.reg .u64 %r154;
.reg .u32 %r155;
.reg .pred %r156;
.reg .u64 %r158;
.reg .u64 %r159;
.reg .u64 %r160;
.reg .u64 %r162;
.reg .pred %r163;
.reg .u64 %r165;
.reg .u64 %r167;
.reg .u64 %r168;
.reg .u64 %r169;
.reg .pred %r170;
.reg .u32 %r172;
.reg .u32 %r173;
.reg .u32 %r175;
.reg .u32 %r176;
.reg .u16 %r177;
.reg .u16 %r178;
.reg .u16 %r179;
.reg .u32 %r180;
.reg .u16 %r181;
.reg .pred %r182;
.reg .pred %r183;
.reg .pred %r184;
.reg .u64 %r185;
.reg .u64 %r186;
.reg .u64 %r187;
.reg .u16 %r188;
.reg .u16 %r189;
.reg .pred %r190;
.reg .pred %r191;
.reg .u64 %r192;
.reg .u64 %r193;
.reg .u64 %r194;
.reg .u16 %r195;
.reg .u16 %r196;
.reg .pred %r197;
.reg .u64 %r198;
.reg .pred %r199;
.reg .u64 %r200;
.reg .pred %r201;
.reg .u64 %r205;
.reg .u64 %r206;
.reg .u64 %r207;
.reg .pred %r208;
.reg .u64 %r209;
.reg .u64 %r210;
.reg .u64 %r212;
.reg .u64 %r214;
.reg .u64 %r215;
.reg .u64 %r216;
.reg .pred %r217;
.reg .pred %r218;
.reg .pred %r219;
.reg .u64 %r220;
.reg .u64 %r221;
.reg .u64 %r222;
.reg .u16 %r223;
.reg .u16 %r224;
.reg .pred %r225;
.reg .pred %r226;
.reg .u64 %r227;
.reg .u64 %r228;
.reg .u64 %r229;
.reg .u16 %r230;
.reg .u16 %r231;
.reg .pred %r232;
.reg .u64 %r233;
.reg .pred %r234;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r240;
.reg .pred %r241;
.reg .pred %r243;
.reg .u64 %r244;
.reg .u64 %r246;
.reg .pred %r248;
.reg .u64 %r249;
.reg .u64 %r250;
.reg .u64 %r251;
.reg .u64 %r252;
.reg .u64 %r253;
.reg .u64 %r254;
.reg .u64 %r255;
mov.u64 %r121,%ar0;
mov.u64 %r122,%ar1;
mov.u64 %r123,%ar2;
mov.u64 %r124,%ar3;
.loc 1 115 9
setp.le.u64 %r125,%r124,1;
@ %r125 bra $L45;
.loc 1 113 5
mov.u64 %r112,0;
.loc 1 114 9
mov.u64 %r37,1;
.loc 1 114 5
mov.u64 %r68,%r37;
.loc 1 112 14
mov.u64 %r38,-1;
.loc 1 115 12
mov.u64 %r84,%r37;
$L7:
.loc 1 117 9
add.u64 %r126,%r123,%r84;
.loc 1 118 9
add.u64 %r127,%r123,%r38;
add.u64 %r128,%r127,%r68;
.loc 1 119 10
ld.u8 %r129,[%r126];
ld.u8 %r130,[%r128];
setp.ge.u16 %r131,%r129,%r130;
@ %r131 bra $L3;
.loc 1 124 6
sub.u64 %r37,%r84,%r38;
mov.u64 %r112,%r84;
.loc 1 123 6
mov.u64 %r68,1;
bra $L4;
$L3:
.loc 1 126 15
setp.ne.u16 %r134,%r129,%r130;
@ %r134 bra $L5;
.loc 1 129 7
setp.eq.u64 %r135,%r37,%r68;
@ %r135 bra $L6;
.loc 1 130 6
add.u64 %r68,%r68,1;
bra $L4;
$L6:
.loc 1 133 10
add.u64 %r112,%r112,%r37;
.loc 1 134 10
mov.u64 %r68,1;
bra $L4;
$L5:
.loc 1 140 18
mov.u64 %r38,%r112;
add.u64 %r112,%r112,1;
.loc 1 141 10
mov.u64 %r37,1;
.loc 1 141 6
mov.u64 %r68,%r37;
$L4:
.loc 1 115 12
add.u64 %r84,%r68,%r112;
.loc 1 115 9
setp.gt.u64 %r136,%r124,%r84;
@ %r136 bra $L7;
mov.u64 %r55,0;
mov.u64 %r76,1;
mov.u64 %r106,%r76;
mov.u64 %r107,-1;
mov.u64 %r94,%r76;
.loc 1 176 10
mov.u64 %r255,%r76;
$L12:
.loc 1 152 9
add.u64 %r137,%r123,%r94;
.loc 1 153 9
add.u64 %r138,%r123,%r106;
add.u64 %r139,%r138,%r107;
.loc 1 154 10
ld.u8 %r140,[%r137];
ld.u8 %r141,[%r139];
setp.le.u16 %r142,%r140,%r141;
@ %r142 bra $L8;
.loc 1 159 6
sub.u64 %r76,%r94,%r107;
mov.u64 %r55,%r94;
.loc 1 158 6
mov.u64 %r106,1;
bra $L9;
$L8:
.loc 1 161 15
setp.ne.u16 %r145,%r140,%r141;
@ %r145 bra $L10;
.loc 1 164 7
setp.eq.u64 %r146,%r76,%r106;
@ %r146 bra $L11;
.loc 1 165 6
add.u64 %r106,%r106,1;
bra $L9;
$L11:
.loc 1 168 10
add.u64 %r55,%r55,%r76;
.loc 1 169 10
mov.u64 %r106,1;
bra $L9;
$L10:
.loc 1 175 22
mov.u64 %r107,%r55;
add.u64 %r55,%r55,1;
.loc 1 176 10
mov.u64 %r76,%r255;
.loc 1 176 6
mov.u64 %r106,1;
$L9:
.loc 1 150 12
add.u64 %r94,%r55,%r106;
.loc 1 150 9
setp.gt.u64 %r147,%r124,%r94;
@ %r147 bra $L12;
.loc 1 182 22
add.u64 %r118,%r107,1;
.loc 1 182 39
add.u64 %r104,%r38,1;
.loc 1 182 6
setp.gt.u64 %r148,%r104,%r118;
selp.u64 %r37,%r37,%r76,%r148;
selp.u64 %r104,%r104,%r118,%r148;
bra $L2;
$L45:
.loc 1 149 9
mov.u64 %r37,1;
.loc 1 115 9
mov.u64 %r104,0;
$L2:
mov.u64 %r64,%frame;
add.u64 %r60,%frame,2048;
$L13:
.loc 1 312 20
st.u64 [%r64],%r124;
.loc 1 311 3
add.u64 %r64,%r64,8;
setp.ne.u64 %r149,%r60,%r64;
@ %r149 bra $L13;
add.u64 %r116,%r124,-1;
.loc 1 313 3
setp.ne.u64 %r150,%r124,0;
@ %r150 bra $L14;
$L18:
.loc 1 318 32
add.u64 %r154,%r123,%r37;
.loc 1 318 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r123;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r154;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r104;
call (%value_in),memcmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r155,[%value_in];
}
.loc 1 318 6
setp.eq.u32 %r156,%r155,0;
@ %r156 bra $L46;
bra $L62;
$L14:
add.u64 %r66,%r124,%r123;
.loc 1 313 3
mov.u64 %r91,%r123;
add.u64 %r251,%r123,%r116;
$L17:
.loc 1 314 44
ld.u8 %r158,[%r91];
shl.b64 %r159,%r158,3;
add.u64 %r160,%frame,%r159;
sub.u64 %r162,%r251,%r91;
st.u64 [%r160],%r162;
.loc 1 313 3
add.u64 %r91,%r91,1;
setp.ne.u64 %r163,%r66,%r91;
@ %r163 bra $L17;
bra $L18;
$L46:
.loc 1 323 14
mov.u64 %r93,0;
.loc 1 325 9
mov.u64 %r109,%r93;
.loc 1 353 10
add.u64 %r252,%r104,-1;
.loc 1 326 14
or.b64 %r253,%r124,2048;
$L15:
.loc 1 330 24
add.u64 %r250,%r121,%r109;
add.u64 %r165,%r250,%r116;
.loc 1 330 10
ld.u8 %r167,[%r165];
shl.b64 %r168,%r167,3;
add.u64 %r169,%frame,%r168;
ld.u64 %r65,[%r169];
.loc 1 331 7
setp.eq.u64 %r170,%r65,0;
@ %r170 bra $L19;
.loc 1 333 11
set.u32.ne.u64 %r172,%r93,0;
neg.s32 %r173,%r172;
.loc 1 333 19
set.u32.lt.u64 %r175,%r65,%r37;
neg.s32 %r176,%r175;
cvt.u16.u32 %r178,%r173;
cvt.u16.u32 %r179,%r176;
and.b16 %r177,%r178,%r179;
cvt.u32.u16 %r180,%r177;
cvt.u16.u8 %r181,%r180;
setp.eq.u16 %r182,%r181,0;
@ %r182 bra $L20;
.loc 1 338 11
sub.u64 %r65,%r124,%r37;
$L20:
.loc 1 341 10
add.u64 %r109,%r109,%r65;
.loc 1 340 15
mov.u64 %r93,0;
.loc 1 342 8
bra $L21;
$L19:
.loc 1 346 6
max.u64 %r79,%r104,%r93;
.loc 1 347 10
setp.lt.u64 %r183,%r79,%r116;
@ %r183 bra $L22;
bra $L23;
$L24:
.loc 1 349 6
add.u64 %r79,%r79,1;
.loc 1 347 10
setp.ge.u64 %r184,%r79,%r116;
@ %r184 bra $L23;
$L22:
.loc 1 347 34
add.u64 %r185,%r123,%r79;
.loc 1 348 9
add.u64 %r186,%r79,%r109;
add.u64 %r187,%r121,%r186;
.loc 1 347 30
ld.u8 %r188,[%r185];
ld.u8 %r189,[%r187];
setp.eq.u16 %r190,%r188,%r189;
@ %r190 bra $L24;
bra $L63;
$L27:
.loc 1 356 3
add.u64 %r80,%r69,-1;
.loc 1 354 14
setp.eq.u64 %r191,%r69,%r93;
@ %r191 bra $L47;
mov.u64 %r69,%r80;
$L43:
add.u64 %r103,%r69,1;
.loc 1 354 34
add.u64 %r192,%r123,%r69;
.loc 1 355 9
add.u64 %r193,%r69,%r109;
add.u64 %r194,%r121,%r193;
.loc 1 354 30
ld.u8 %r195,[%r192];
ld.u8 %r196,[%r194];
setp.eq.u16 %r197,%r195,%r196;
@ %r197 bra $L27;
bra $L26;
$L47:
.loc 1 354 26
mov.u64 %r103,%r93;
$L26:
.loc 1 357 27
add.u64 %r198,%r93,1;
.loc 1 357 11
setp.le.u64 %r199,%r198,%r103;
@ %r199 bra $L28;
.loc 1 358 10
mov.u64 %r120,%r250;
bra $L1;
$L28:
.loc 1 361 10
add.u64 %r109,%r109,%r37;
.loc 1 362 15
sub.u64 %r93,%r124,%r37;
$L21:
.loc 1 326 14
sub.u64 %r200,%r122,%r124;
.loc 1 326 13
setp.ge.u64 %r201,%r200,%r109;
@ %r201 bra $L15;
.loc 1 326 14
add.u64 %r205,%r121,%r122;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r205;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r253;
call (%value_in),strnlen,(%out_arg1,%out_arg2);
ld.param.u64 %r206,[%value_in];
}
add.u64 %r122,%r122,%r206;
sub.u64 %r207,%r122,%r124;
setp.ge.u64 %r208,%r207,%r109;
@ %r208 bra $L15;
$L42:
.loc 1 409 10
mov.u64 %r120,0;
bra $L1;
$L62:
.loc 1 376 16
sub.u64 %r210,%r124,%r104;
max.u64 %r209,%r210,%r104;
.loc 1 376 50
add.u64 %r45,%r209,1;
.loc 1 377 9
mov.u64 %r35,0;
.loc 1 378 14
or.b64 %r254,%r124,2048;
$L31:
.loc 1 382 24
add.u64 %r249,%r121,%r35;
add.u64 %r212,%r249,%r116;
.loc 1 382 10
ld.u8 %r214,[%r212];
shl.b64 %r215,%r214,3;
add.u64 %r216,%frame,%r215;
ld.u64 %r72,[%r216];
.loc 1 383 7
setp.ne.u64 %r217,%r72,0;
@ %r217 bra $L32;
.loc 1 391 10
setp.lt.u64 %r218,%r104,%r116;
@ %r218 bra $L48;
bra $L34;
$L32:
.loc 1 385 10
add.u64 %r35,%r35,%r72;
.loc 1 386 8
bra $L35;
$L36:
.loc 1 393 6
add.u64 %r74,%r74,1;
.loc 1 391 10
setp.ge.u64 %r219,%r74,%r116;
@ ! %r219 bra $L33;
bra $L34;
$L48:
mov.u64 %r74,%r104;
$L33:
.loc 1 391 34
add.u64 %r220,%r123,%r74;
.loc 1 392 9
add.u64 %r221,%r74,%r35;
add.u64 %r222,%r121,%r221;
.loc 1 391 30
ld.u8 %r223,[%r220];
ld.u8 %r224,[%r222];
setp.eq.u16 %r225,%r223,%r224;
@ %r225 bra $L36;
bra $L64;
$L39:
.loc 1 400 3
add.u64 %r75,%r75,-1;
.loc 1 398 14
setp.eq.u64 %r226,%r75,-1;
@ %r226 bra $L38;
$L44:
.loc 1 398 33
add.u64 %r227,%r123,%r75;
.loc 1 399 15
add.u64 %r228,%r75,%r35;
add.u64 %r229,%r121,%r228;
.loc 1 398 29
ld.u8 %r230,[%r227];
ld.u8 %r231,[%r229];
setp.eq.u16 %r232,%r230,%r231;
@ %r232 bra $L39;
bra $L65;
$L35:
.loc 1 378 14
sub.u64 %r233,%r122,%r124;
.loc 1 378 13
setp.le.u64 %r234,%r35,%r233;
@ %r234 bra $L31;
.loc 1 378 14
add.u64 %r238,%r121,%r122;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r254;
call (%value_in),strnlen,(%out_arg1,%out_arg2);
ld.param.u64 %r239,[%value_in];
}
add.u64 %r122,%r122,%r239;
sub.u64 %r240,%r122,%r124;
setp.le.u64 %r241,%r35,%r240;
@ %r241 bra $L31;
bra $L42;
$L23:
.loc 1 353 10
mov.u64 %r69,%r252;
.loc 1 354 14
setp.gt.u64 %r243,%r104,%r93;
@ %r243 bra $L43;
mov.u64 %r103,%r104;
bra $L26;
$L63:
sub.u64 %r244,%r109,%r104;
add.u64 %r62,%r244,1;
.loc 1 366 10
add.u64 %r109,%r62,%r79;
.loc 1 367 15
mov.u64 %r93,%r65;
bra $L21;
$L65:
.loc 1 403 10
add.u64 %r35,%r35,%r45;
bra $L35;
$L38:
.loc 1 402 10
mov.u64 %r120,%r249;
bra $L1;
$L64:
sub.u64 %r246,%r35,%r104;
add.u64 %r108,%r246,1;
.loc 1 406 8
add.u64 %r35,%r108,%r74;
bra $L35;
$L34:
.loc 1 397 10
add.u64 %r75,%r104,-1;
.loc 1 398 14
setp.ne.u64 %r248,%r104,0;
@ %r248 bra $L44;
bra $L38;
$L1:
.loc 1 410 1
mov.u64 %value,%r120;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strstr
.visible .func (.param .u64 %value_out) strstr (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.local .align 16 .b8 %frame_ar[64];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r35;
.reg .u64 %r45;
.reg .u64 %r47;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u32 %r62;
.reg .u32 %r64;
.reg .u32 %r66;
.reg .u32 %r68;
.reg .u32 %r72;
.reg .u32 %r75;
.reg .u32 %r82;
.reg .u32 %r85;
.reg .u32 %r99;
.reg .u32 %r101;
.reg .u32 %r103;
.reg .u32 %r105;
.reg .u64 %r109;
.reg .u32 %r111;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .pred %r117;
.reg .pred %r118;
.reg .u64 %r121;
.reg .pred %r122;
.reg .u32 %r123;
.reg .pred %r124;
.reg .u32 %r126;
.reg .u32 %r127;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u16 %r131;
.reg .u16 %r132;
.reg .u16 %r133;
.reg .u32 %r134;
.reg .u16 %r135;
.reg .pred %r136;
.reg .pred %r137;
.reg .pred %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .u32 %r142;
.reg .pred %r143;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .u32 %r148;
.reg .u32 %r149;
.reg .u16 %r150;
.reg .u16 %r151;
.reg .u16 %r152;
.reg .u32 %r153;
.reg .u16 %r154;
.reg .pred %r155;
.reg .pred %r156;
.reg .u16 %r157;
.reg .pred %r158;
.reg .u32 %r159;
.reg .u32 %r160;
.reg .u32 %r161;
.reg .u32 %r162;
.reg .u32 %r163;
.reg .pred %r164;
.reg .u32 %r166;
.reg .u32 %r167;
.reg .u32 %r169;
.reg .u32 %r170;
.reg .u16 %r171;
.reg .u16 %r172;
.reg .u16 %r173;
.reg .u32 %r174;
.reg .u16 %r175;
.reg .pred %r176;
.reg .pred %r177;
.reg .u64 %r179;
.reg .u64 %r182;
.reg .u64 %r183;
.reg .pred %r184;
.reg .pred %r185;
.reg .u64 %r186;
.reg .u64 %r189;
.reg .u32 %r190;
.reg .u32 %r191;
.reg .u64 %r192;
.reg .pred %r193;
.reg .u32 %r194;
.reg .u16 %r196;
.reg .u16 %r197;
.reg .u64 %r198;
.reg .u32 %r199;
.reg .u64 %r200;
.reg .u32 %r201;
.reg .u16 %r202;
.reg .u16 %r203;
.reg .u32 %r204;
.reg .pred %r205;
.reg .u64 %r206;
.reg .u16 %r208;
.reg .u16 %r209;
.reg .u64 %r210;
.reg .u32 %r211;
.reg .u64 %r212;
.reg .pred %r213;
.reg .u64 %r214;
.reg .u16 %r216;
.reg .u16 %r217;
.reg .u64 %r218;
.reg .u32 %r219;
.reg .u64 %r220;
.reg .u32 %r224;
.reg .pred %r225;
.reg .pred %r226;
.reg .u16 %r227;
.reg .pred %r228;
.reg .u64 %r230;
.reg .u64 %r231;
.reg .pred %r232;
.reg .u64 %r237;
.reg .u16 %r239;
mov.u64 %r115,%ar0;
mov.u64 %r116,%ar1;
.loc 2 151 9
ld.u8 %r22,[%r116];
.loc 2 151 6
setp.eq.u32 %r117,%r22,0;
@ %r117 bra $L86;
.loc 2 153 9
ld.u8 %r23,[%r116+1];
.loc 2 153 6
setp.ne.u32 %r118,%r23,0;
@ %r118 bra $L68;
.loc 2 154 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r115;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r22;
call (%value_in),strchr,(%out_arg1,%out_arg2);
ld.param.u64 %r121,[%value_in];
}
mov.u64 %r114,%r121;
bra $L66;
$L68:
.loc 2 155 9
ld.u8 %r25,[%r116+2];
.loc 2 155 6
setp.ne.u32 %r122,%r25,0;
@ %r122 bra $L69;
.loc 2 103 24
shl.b32 %r123,%r22,16;
.loc 2 103 31
or.b32 %r62,%r123,%r23;
.loc 2 106 10
ld.u8 %r68,[%r115];
.loc 2 106 3
setp.ne.u32 %r124,%r68,0;
@ %r124 bra $L87;
$L71:
.loc 2 108 36
mov.u64 %r114,0;
bra $L66;
$L87:
.loc 2 104 12
mov.u32 %r66,%r25;
$L70:
.loc 2 107 16
shl.b32 %r64,%r66,16;
.loc 2 107 10
or.b32 %r66,%r68,%r64;
mov.u64 %r109,%r115;
.loc 2 106 41
add.u64 %r115,%r115,1;
ld.u8 %r68,[%r115];
.loc 2 106 22
set.u32.ne.u32 %r126,%r62,%r66;
neg.s32 %r127,%r126;
.loc 2 106 33
set.u32.ne.u32 %r129,%r68,0;
neg.s32 %r130,%r129;
.loc 2 106 28
cvt.u16.u32 %r132,%r127;
cvt.u16.u32 %r133,%r130;
and.b16 %r131,%r132,%r133;
.loc 2 106 3
cvt.u32.u16 %r134,%r131;
cvt.u16.u8 %r135,%r134;
setp.ne.u16 %r136,%r135,0;
@ %r136 bra $L70;
.loc 2 108 36
setp.ne.u32 %r137,%r62,%r66;
@ %r137 bra $L71;
add.u64 %r114,%r109,-1;
bra $L66;
$L69:
.loc 2 157 9
ld.u8 %r26,[%r116+3];
.loc 2 157 6
setp.ne.u32 %r138,%r26,0;
@ %r138 bra $L72;
.loc 2 114 24
shl.b32 %r139,%r22,24;
.loc 2 114 40
shl.b32 %r140,%r23,16;
.loc 2 114 31
or.b32 %r141,%r139,%r140;
.loc 2 114 56
shl.b32 %r142,%r25,8;
.loc 2 114 47
or.b32 %r82,%r141,%r142;
.loc 2 117 10
ld.u8 %r75,[%r115];
.loc 2 117 3
setp.eq.u32 %r143,%r75,0;
@ %r143 bra $L71;
.loc 2 115 12
mov.u32 %r72,%r26;
$L73:
.loc 2 118 16
or.b32 %r85,%r75,%r72;
.loc 2 118 10
shl.b32 %r72,%r85,8;
mov.u64 %r113,%r115;
.loc 2 117 41
add.u64 %r115,%r115,1;
ld.u8 %r75,[%r115];
.loc 2 117 22
set.u32.ne.u32 %r145,%r82,%r72;
neg.s32 %r146,%r145;
.loc 2 117 33
set.u32.ne.u32 %r148,%r75,0;
neg.s32 %r149,%r148;
.loc 2 117 28
cvt.u16.u32 %r151,%r146;
cvt.u16.u32 %r152,%r149;
and.b16 %r150,%r151,%r152;
.loc 2 117 3
cvt.u32.u16 %r153,%r150;
cvt.u16.u8 %r154,%r153;
setp.ne.u16 %r155,%r154,0;
@ %r155 bra $L73;
.loc 2 119 36
setp.ne.u32 %r156,%r82,%r72;
@ %r156 bra $L71;
add.u64 %r114,%r113,-2;
bra $L66;
$L72:
.loc 2 159 6
ld.u8 %r157,[%r116+4];
setp.ne.u16 %r158,%r157,0;
@ %r158 bra $L74;
.loc 2 125 24
shl.b32 %r159,%r22,24;
.loc 2 125 40
shl.b32 %r160,%r23,16;
.loc 2 125 31
or.b32 %r161,%r159,%r160;
.loc 2 125 62
or.b32 %r162,%r161,%r26;
.loc 2 125 56
shl.b32 %r163,%r25,8;
.loc 2 125 62
or.b32 %r99,%r162,%r163;
.loc 2 128 10
ld.u8 %r105,[%r115];
.loc 2 128 3
setp.eq.u32 %r164,%r105,0;
@ %r164 bra $L71;
.loc 2 126 12
mov.u32 %r103,0;
$L75:
.loc 2 129 14
shl.b32 %r101,%r103,8;
.loc 2 129 8
or.b32 %r103,%r105,%r101;
mov.u64 %r35,%r115;
.loc 2 128 41
add.u64 %r115,%r115,1;
ld.u8 %r105,[%r115];
.loc 2 128 21
set.u32.ne.u32 %r166,%r105,0;
neg.s32 %r167,%r166;
.loc 2 128 32
set.u32.ne.u32 %r169,%r99,%r103;
neg.s32 %r170,%r169;
.loc 2 128 26
cvt.u16.u32 %r172,%r167;
cvt.u16.u32 %r173,%r170;
and.b16 %r171,%r172,%r173;
.loc 2 128 3
cvt.u32.u16 %r174,%r171;
cvt.u16.u8 %r175,%r174;
setp.ne.u16 %r176,%r175,0;
@ %r176 bra $L75;
.loc 2 130 36
setp.ne.u32 %r177,%r99,%r103;
@ %r177 bra $L71;
add.u64 %r114,%r35,-3;
bra $L66;
$L74:
.loc 2 162 19
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r116;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r179,[%value_in];
}
.loc 2 163 19
or.b64 %r182,%r179,512;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r115;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r182;
call (%value_in),strnlen,(%out_arg1,%out_arg2);
ld.param.u64 %r183,[%value_in];
}
.loc 2 166 6
setp.gt.u64 %r184,%r179,%r183;
@ %r184 bra $L71;
.loc 2 170 6
setp.gt.u64 %r185,%r179,254;
@ %r185 bra $L76;
.loc 2 173 46
sub.u64 %r186,%r183,%r179;
.loc 2 173 28
add.u64 %r47,%r115,%r186;
.loc 2 176 29
cvt.u32.u64 %r191,%r179;
add.u32 %r190,%r191,1;
.loc 2 176 7
mov.u64 %r189,64;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r190;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r189;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r192,[%value_in];
}
.loc 2 177 7
setp.ne.u64 %r193,%r179,0;
@ %r193 bra $L77;
$L80:
.loc 2 126 12
mov.u64 %r114,%r115;
bra $L78;
$L77:
.loc 2 178 41
cvt.u32.u64 %r194,%r179;
cvt.u32.u8 %r111,%r194;
mov.u64 %r112,%r116;
$L79:
.loc 2 178 14
ld.u8 %r239,[%r112];
mov.u16 %r197,%r239;
and.b16 %r196,%r197,63;
cvt.u32.u16 %r199,%r196;
cvt.u64.u8 %r198,%r199;
.loc 2 178 32
add.u64 %r200,%frame,%r198;
cvt.u32.u32 %r201,%r111;
st.u8 [%r200],%r201;
.loc 2 177 7
add.u64 %r112,%r112,1;
cvt.u16.u32 %r203,%r111;
add.u16 %r202,%r203,-1;
cvt.u32.u16 %r204,%r202;
cvt.u32.u8 %r111,%r204;
setp.ne.u32 %r205,%r111,0;
@ %r205 bra $L79;
bra $L80;
$L78:
.loc 2 182 6
add.u64 %r53,%r114,-1;
.loc 2 185 25
add.u64 %r206,%r53,%r179;
.loc 2 185 34
ld.u8 %r239,[%r206];
mov.u16 %r209,%r239;
and.b16 %r208,%r209,63;
cvt.u32.u16 %r211,%r208;
cvt.u64.u8 %r210,%r211;
.loc 2 185 22
add.u64 %r212,%frame,%r210;
.loc 2 185 11
ld.u8 %r54,[%r212];
.loc 2 186 12
add.u64 %r114,%r53,%r54;
.loc 2 186 4
setp.lt.u64 %r213,%r47,%r114;
@ %r213 bra $L81;
$L83:
.loc 2 188 22
add.u64 %r214,%r114,%r179;
.loc 2 188 31
ld.u8 %r239,[%r214];
mov.u16 %r217,%r239;
and.b16 %r216,%r217,63;
cvt.u32.u16 %r219,%r216;
cvt.u64.u8 %r218,%r219;
.loc 2 188 19
add.u64 %r220,%frame,%r218;
.loc 2 188 12
ld.u8 %r56,[%r220];
.loc 2 189 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r114;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r116;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r179;
call (%value_in),memcmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r224,[%value_in];
}
.loc 2 189 11
setp.eq.u32 %r225,%r224,0;
@ %r225 bra $L66;
.loc 2 186 34
add.u64 %r114,%r114,%r56;
.loc 2 186 4
setp.ge.u64 %r226,%r47,%r114;
@ %r226 bra $L83;
$L81:
.loc 2 192 11
add.u64 %r45,%r47,%r179;
.loc 2 192 7
ld.u8 %r227,[%r45];
setp.ne.u16 %r228,%r227,0;
@ %r228 bra $L84;
$L85:
.loc 2 193 13
mov.u64 %r114,0;
bra $L66;
$L84:
.loc 2 194 11
mov.u64 %r230,2048;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r230;
call (%value_in),strnlen,(%out_arg1,%out_arg2);
ld.param.u64 %r231,[%value_in];
}
.loc 2 194 8
add.u64 %r47,%r47,%r231;
.loc 2 196 7
setp.ge.u64 %r232,%r47,%r114;
@ %r232 bra $L78;
bra $L85;
$L76:
.loc 2 202 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r115;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r183;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r116;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r179;
call (%value_in),two_way_long_needle,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r237,[%value_in];
}
mov.u64 %r114,%r237;
bra $L66;
$L86:
mov.u64 %r114,%r115;
$L66:
.loc 2 203 1
mov.u64 %value,%r114;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strtod.o/ 1612277262  0     0     100666  70744     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _strtod_l
.visible .func (.param .f64 %value_out) _strtod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtod.c"
// BEGIN GLOBAL FUNCTION DECL: _strtod_r
.visible .func (.param .f64 %value_out) _strtod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strtod_l
.visible .func (.param .f64 %value_out) strtod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strtod
.visible .func (.param .f64 %value_out) strtod (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strtof_l
.visible .func (.param .f32 %value_out) strtof_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strtof
.visible .func (.param .f32 %value_out) strtof (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL VAR DECL: _C_numeric_locale
.extern .const .align 8 .u64 _C_numeric_locale[3];
// BEGIN GLOBAL VAR DECL: __mprec_bigtens
.extern .const .align 8 .u64 __mprec_bigtens[];
// BEGIN GLOBAL VAR DECL: __mprec_tens
.extern .const .align 8 .u64 __mprec_tens[];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __gethex
.extern .func (.param .u32 %value_out) __gethex (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4, .param .u32 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: __copybits
.extern .func __copybits (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _Bfree
.extern .func _Bfree (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __match
.extern .func (.param .u32 %value_out) __match (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __hexnan
.extern .func (.param .u32 %value_out) __hexnan (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: nan
.extern .func (.param .f64 %value_out) nan (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __s2b
.extern .func (.param .u64 %value_out) __s2b (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u32 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _Balloc
.extern .func (.param .u64 %value_out) _Balloc (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __d2b
.extern .func (.param .u64 %value_out) __d2b (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __i2b
.extern .func (.param .u64 %value_out) __i2b (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __pow5mult
.extern .func (.param .u64 %value_out) __pow5mult (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __multiply
.extern .func (.param .u64 %value_out) __multiply (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __lshift
.extern .func (.param .u64 %value_out) __lshift (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __mdiff
.extern .func (.param .u64 %value_out) __mdiff (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __mcmp
.extern .func (.param .u32 %value_out) __mcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __ulp
.extern .func (.param .f64 %value_out) __ulp (.param .f64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __ratio
.extern .func (.param .f64 %value_out) __ratio (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strncmp
.extern .func (.param .u32 %value_out) strncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: nanf
.extern .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
// BEGIN VAR DEF: tinytens
.const .align 8 .u64 tinytens[5] =
{4367597403136100796,4128101167230658355,3649340653511681853,2691949749288605597,1254259266780163907 };
// BEGIN VAR DEF: fpi$1
.const .align 4 .u32 fpi$1[5] =
{53,4294966222,971,1,0 };
// BEGIN VAR DEF: fpinan$0
.const .align 4 .u32 fpinan$0[5] =
{52,4294966222,971,1,0 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{110,102,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[6] =
{105,110,105,116,121,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[3] =
{97,110,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[1] =
{0 };
// BEGIN GLOBAL FUNCTION DEF: _strtod_l
.visible .func (.param .f64 %value_out) _strtod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u32 %r24;
.reg .u64 %r26;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u32 %r36;
.reg .u64 %r38;
.reg .u64 %r43;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u32 %r51;
.reg .f64 %r66;
.reg .u32 %r68;
.reg .u32 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u32 %r82;
.reg .f64 %r99;
.reg .f64 %r104;
.reg .f64 %r125;
.reg .u32 %r130;
.reg .u32 %r134;
.reg .u32 %r136;
.reg .u32 %r153;
.reg .u32 %r154;
.reg .u32 %r155;
.reg .u32 %r168;
.reg .u32 %r170;
.reg .u32 %r176;
.reg .u32 %r182;
.reg .u32 %r188;
.reg .f64 %r190;
.reg .f64 %r191;
.reg .f64 %r193;
.reg .f64 %r195;
.reg .f64 %r201;
.reg .f64 %r203;
.reg .f64 %r204;
.reg .f64 %r209;
.reg .u32 %r212;
.reg .u32 %r213;
.reg .u32 %r215;
.reg .u32 %r216;
.reg .u32 %r219;
.reg .u32 %r220;
.reg .u32 %r221;
.reg .u32 %r222;
.reg .u32 %r223;
.reg .u64 %r224;
.reg .u32 %r225;
.reg .u32 %r226;
.reg .u32 %r227;
.reg .f64 %r229;
.reg .u32 %r230;
.reg .f64 %r231;
.reg .u32 %r233;
.reg .u64 %r235;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .u32 %r238;
.reg .u32 %r239;
.reg .u32 %r240;
.reg .f64 %r241;
.reg .f64 %r242;
.reg .u32 %r244;
.reg .u64 %r246;
.reg .u32 %r252;
.reg .u64 %r256;
.reg .u32 %r257;
.reg .u32 %r258;
.reg .u32 %r259;
.reg .u32 %r260;
.reg .u32 %r261;
.reg .u32 %r263;
.reg .u32 %r264;
.reg .u32 %r265;
.reg .u32 %r266;
.reg .u32 %r268;
.reg .u32 %r269;
.reg .u32 %r270;
.reg .u32 %r271;
.reg .u32 %r272;
.reg .u32 %r273;
.reg .u32 %r277;
.reg .u32 %r278;
.reg .u32 %r279;
.reg .u32 %r281;
.reg .u32 %r285;
.reg .u32 %r286;
.reg .f64 %r289;
.reg .u32 %r290;
.reg .u64 %r291;
.reg .u32 %r293;
.reg .f64 %r306;
.reg .u32 %r310;
.reg .u32 %r315;
.reg .u32 %r319;
.reg .f64 %r324;
.reg .u64 %r326;
.reg .u64 %r329;
.reg .u32 %r330;
.reg .u64 %r331;
.reg .u32 %r332;
.reg .u32 %r333;
.reg .f64 %r334;
.reg .f64 %r336;
.reg .u64 %r337;
.reg .u64 %r340;
.reg .u64 %r344;
.reg .u32 %r346;
.reg .u64 %r348;
.reg .u32 %r353;
.reg .u32 %r354;
.reg .u64 %r355;
.reg .u64 %r356;
.reg .f64 %r359;
.reg .u64 %r360;
.reg .u64 %r361;
.reg .u64 %r362;
.reg .u64 %r363;
.reg .u64 %r364;
.reg .u64 %r367;
.reg .u16 %r368;
.reg .pred %r369;
.reg .pred %r371;
.reg .pred %r373;
.reg .pred %r375;
.reg .pred %r376;
.reg .pred %r378;
.reg .pred %r380;
.reg .pred %r381;
.reg .u16 %r382;
.reg .pred %r383;
.reg .u16 %r385;
.reg .u16 %r386;
.reg .u16 %r387;
.reg .u32 %r388;
.reg .u32 %r389;
.reg .pred %r390;
.reg .u64 %r393;
.reg .u64 %r398;
.reg .u64 %r399;
.reg .u64 %r400;
.reg .u32 %r401;
.reg .pred %r402;
.reg .pred %r403;
.reg .pred %r404;
.reg .pred %r405;
.reg .u32 %r407;
.reg .u64 %r411;
.reg .pred %r412;
.reg .u32 %r413;
.reg .pred %r414;
.reg .pred %r415;
.reg .pred %r416;
.reg .pred %r417;
.reg .pred %r418;
.reg .u64 %r422;
.reg .u64 %r423;
.reg .u64 %r424;
.reg .u32 %r429;
.reg .u32 %r430;
.reg .u32 %r431;
.reg .u32 %r432;
.reg .u32 %r433;
.reg .u64 %r434;
.reg .u64 %r435;
.reg .u64 %r436;
.reg .u32 %r440;
.reg .pred %r441;
.reg .u64 %r442;
.reg .u32 %r443;
.reg .u32 %r444;
.reg .u64 %r445;
.reg .u64 %r446;
.reg .u64 %r447;
.reg .u16 %r449;
.reg .pred %r450;
.reg .pred %r451;
.reg .u32 %r452;
.reg .pred %r454;
.reg .pred %r455;
.reg .u32 %r457;
.reg .u32 %r458;
.reg .u32 %r459;
.reg .u32 %r462;
.reg .u32 %r463;
.reg .u32 %r464;
.reg .pred %r467;
.reg .pred %r468;
.reg .u32 %r469;
.reg .pred %r470;
.reg .pred %r471;
.reg .pred %r472;
.reg .pred %r473;
.reg .u32 %r475;
.reg .u32 %r476;
.reg .pred %r478;
.reg .u32 %r480;
.reg .u32 %r481;
.reg .pred %r483;
.reg .pred %r484;
.reg .u32 %r486;
.reg .u32 %r487;
.reg .u32 %r488;
.reg .pred %r489;
.reg .u32 %r491;
.reg .u32 %r492;
.reg .u32 %r493;
.reg .u64 %r494;
.reg .u32 %r495;
.reg .pred %r496;
.reg .u32 %r497;
.reg .pred %r498;
.reg .u32 %r499;
.reg .u32 %r500;
.reg .pred %r501;
.reg .u64 %r502;
.reg .u16 %r503;
.reg .pred %r504;
.reg .pred %r506;
.reg .u64 %r507;
.reg .u32 %r508;
.reg .pred %r509;
.reg .pred %r510;
.reg .u64 %r511;
.reg .pred %r512;
.reg .u32 %r513;
.reg .pred %r514;
.reg .u64 %r515;
.reg .u32 %r516;
.reg .pred %r517;
.reg .u32 %r519;
.reg .u32 %r520;
.reg .u32 %r521;
.reg .u32 %r522;
.reg .pred %r523;
.reg .u64 %r524;
.reg .pred %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .u32 %r528;
.reg .pred %r529;
.reg .pred %r530;
.reg .pred %r531;
.reg .pred %r532;
.reg .pred %r533;
.reg .pred %r534;
.reg .pred %r535;
.reg .u64 %r537;
.reg .u64 %r538;
.reg .u32 %r539;
.reg .pred %r540;
.reg .u64 %r541;
.reg .u64 %r542;
.reg .u64 %r544;
.reg .u32 %r546;
.reg .pred %r547;
.reg .u64 %r548;
.reg .u64 %r549;
.reg .u64 %r551;
.reg .u64 %r552;
.reg .u32 %r553;
.reg .pred %r554;
.reg .u64 %r555;
.reg .u16 %r556;
.reg .u32 %r557;
.reg .pred %r558;
.reg .u64 %r560;
.reg .u32 %r563;
.reg .pred %r564;
.reg .u32 %r565;
.reg .u32 %r566;
.reg .u64 %r567;
.reg .u64 %r571;
.reg .u64 %r572;
.reg .u64 %r574;
.reg .f64 %r575;
.reg .pred %r576;
.reg .pred %r577;
.reg .pred %r578;
.reg .u64 %r579;
.reg .u32 %r580;
.reg .u64 %r581;
.reg .u64 %r582;
.reg .u64 %r583;
.reg .f64 %r584;
.reg .f64 %r585;
.reg .pred %r586;
.reg .pred %r587;
.reg .pred %r588;
.reg .pred %r589;
.reg .u64 %r590;
.reg .u64 %r591;
.reg .u64 %r592;
.reg .u64 %r593;
.reg .f64 %r594;
.reg .f64 %r595;
.reg .u32 %r596;
.reg .u32 %r597;
.reg .pred %r598;
.reg .u32 %r599;
.reg .u64 %r600;
.reg .u64 %r601;
.reg .u64 %r602;
.reg .u64 %r603;
.reg .f64 %r604;
.reg .f64 %r605;
.reg .f64 %r606;
.reg .u32 %r608;
.reg .u64 %r609;
.reg .u64 %r610;
.reg .u64 %r611;
.reg .f64 %r612;
.reg .pred %r613;
.reg .u64 %r614;
.reg .u32 %r615;
.reg .u64 %r616;
.reg .u64 %r617;
.reg .u64 %r618;
.reg .f64 %r619;
.reg .f64 %r620;
.reg .u32 %r621;
.reg .pred %r622;
.reg .pred %r623;
.reg .u64 %r624;
.reg .u64 %r625;
.reg .u64 %r626;
.reg .u64 %r627;
.reg .f64 %r628;
.reg .f64 %r629;
.reg .f64 %r630;
.reg .pred %r631;
.reg .pred %r632;
.reg .u32 %r633;
.reg .pred %r634;
.reg .u32 %r635;
.reg .pred %r636;
.reg .f64 %r637;
.reg .pred %r638;
.reg .pred %r639;
.reg .u64 %r640;
.reg .u32 %r641;
.reg .u32 %r642;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u64 %r645;
.reg .u64 %r648;
.reg .u64 %r649;
.reg .u64 %r650;
.reg .f64 %r651;
.reg .f64 %r652;
.reg .u64 %r654;
.reg .pred %r655;
.reg .pred %r656;
.reg .u32 %r657;
.reg .u64 %r658;
.reg .u64 %r659;
.reg .u64 %r660;
.reg .pred %r662;
.reg .pred %r663;
.reg .u64 %r664;
.reg .u64 %r665;
.reg .u64 %r666;
.reg .u64 %r667;
.reg .f64 %r668;
.reg .f64 %r669;
.reg .f64 %r670;
.reg .pred %r671;
.reg .pred %r672;
.reg .u32 %r674;
.reg .pred %r675;
.reg .f64 %r676;
.reg .pred %r677;
.reg .pred %r678;
.reg .u32 %r681;
.reg .u32 %r682;
.reg .pred %r683;
.reg .pred %r684;
.reg .pred %r686;
.reg .u32 %r689;
.reg .u32 %r690;
.reg .u32 %r691;
.reg .u32 %r692;
.reg .u32 %r693;
.reg .u64 %r694;
.reg .u64 %r695;
.reg .u64 %r696;
.reg .u32 %r698;
.reg .u32 %r699;
.reg .u32 %r700;
.reg .u32 %r701;
.reg .u64 %r702;
.reg .u64 %r703;
.reg .f64 %r705;
.reg .pred %r706;
.reg .u32 %r707;
.reg .u64 %r713;
.reg .pred %r714;
.reg .u32 %r715;
.reg .pred %r716;
.reg .u32 %r719;
.reg .u64 %r720;
.reg .pred %r721;
.reg .u64 %r725;
.reg .u64 %r726;
.reg .u64 %r727;
.reg .u64 %r729;
.reg .u64 %r730;
.reg .u64 %r736;
.reg .pred %r737;
.reg .u32 %r739;
.reg .u64 %r740;
.reg .pred %r741;
.reg .pred %r742;
.reg .u32 %r743;
.reg .u32 %r744;
.reg .u32 %r745;
.reg .pred %r746;
.reg .u32 %r747;
.reg .pred %r748;
.reg .u32 %r749;
.reg .u32 %r750;
.reg .u32 %r751;
.reg .u32 %r752;
.reg .u32 %r753;
.reg .pred %r754;
.reg .u64 %r759;
.reg .pred %r760;
.reg .u64 %r764;
.reg .u64 %r765;
.reg .pred %r766;
.reg .u64 %r769;
.reg .pred %r770;
.reg .u64 %r775;
.reg .u64 %r776;
.reg .pred %r777;
.reg .u64 %r781;
.reg .pred %r782;
.reg .pred %r783;
.reg .u64 %r787;
.reg .pred %r788;
.reg .pred %r789;
.reg .u64 %r793;
.reg .pred %r794;
.reg .u64 %r798;
.reg .u64 %r799;
.reg .pred %r800;
.reg .u32 %r801;
.reg .u32 %r804;
.reg .pred %r805;
.reg .pred %r806;
.reg .u64 %r807;
.reg .u64 %r808;
.reg .pred %r809;
.reg .u32 %r811;
.reg .u32 %r812;
.reg .pred %r813;
.reg .u32 %r814;
.reg .pred %r815;
.reg .u32 %r816;
.reg .pred %r817;
.reg .u32 %r820;
.reg .u64 %r821;
.reg .u32 %r824;
.reg .pred %r825;
.reg .pred %r826;
.reg .u64 %r828;
.reg .u32 %r829;
.reg .pred %r830;
.reg .pred %r832;
.reg .u32 %r833;
.reg .u32 %r834;
.reg .u32 %r835;
.reg .u32 %r836;
.reg .pred %r837;
.reg .u64 %r838;
.reg .pred %r839;
.reg .u32 %r840;
.reg .u32 %r841;
.reg .u64 %r842;
.reg .u64 %r847;
.reg .u64 %r848;
.reg .pred %r849;
.reg .pred %r852;
.reg .pred %r853;
.reg .u32 %r855;
.reg .u32 %r856;
.reg .u64 %r857;
.reg .u64 %r858;
.reg .pred %r862;
.reg .u64 %r863;
.reg .u32 %r864;
.reg .pred %r865;
.reg .u32 %r866;
.reg .u32 %r867;
.reg .pred %r868;
.reg .u64 %r869;
.reg .f64 %r872;
.reg .u32 %r874;
.reg .u32 %r875;
.reg .u32 %r876;
.reg .pred %r877;
.reg .u32 %r878;
.reg .u32 %r879;
.reg .u64 %r880;
.reg .u64 %r884;
.reg .f64 %r885;
.reg .f64 %r887;
.reg .u32 %r889;
.reg .u32 %r890;
.reg .u32 %r891;
.reg .pred %r892;
.reg .u32 %r893;
.reg .u32 %r894;
.reg .u64 %r895;
.reg .u64 %r899;
.reg .f64 %r900;
.reg .f64 %r903;
.reg .pred %r904;
.reg .pred %r905;
.reg .u64 %r906;
.reg .pred %r907;
.reg .pred %r908;
.reg .pred %r909;
.reg .pred %r910;
.reg .u64 %r911;
.reg .pred %r912;
.reg .u32 %r913;
.reg .u64 %r914;
.reg .u64 %r915;
.reg .u64 %r916;
.reg .f64 %r919;
.reg .u64 %r921;
.reg .u32 %r922;
.reg .pred %r923;
.reg .u64 %r924;
.reg .pred %r925;
.reg .u64 %r926;
.reg .u64 %r927;
.reg .u64 %r928;
.reg .u32 %r934;
.reg .u32 %r935;
.reg .u16 %r936;
.reg .u16 %r938;
.reg .u32 %r939;
.reg .u16 %r940;
.reg .pred %r941;
.reg .pred %r942;
.reg .u32 %r943;
.reg .pred %r944;
.reg .u64 %r945;
.reg .u32 %r946;
.reg .u32 %r947;
.reg .u32 %r948;
.reg .u64 %r949;
.reg .u64 %r950;
.reg .u64 %r951;
.reg .f64 %r954;
.reg .u32 %r957;
.reg .u32 %r959;
.reg .u32 %r960;
.reg .u16 %r964;
.reg .u16 %r965;
.reg .u32 %r967;
.reg .u16 %r968;
.reg .pred %r969;
.reg .u64 %r970;
.reg .pred %r971;
.reg .u64 %r972;
.reg .pred %r973;
.reg .pred %r974;
.reg .pred %r975;
.reg .pred %r976;
.reg .u64 %r979;
.reg .pred %r988;
.reg .u32 %r989;
.reg .pred %r1000;
.reg .u64 %r1001;
.reg .pred %r1002;
.reg .u32 %r1004;
.reg .u32 %r1005;
.reg .pred %r1006;
.reg .pred %r1007;
.reg .u32 %r1008;
.reg .u64 %r1009;
.reg .pred %r1010;
.reg .u32 %r1014;
.reg .pred %r1015;
.reg .u64 %r1016;
.reg .u32 %r1020;
.reg .pred %r1021;
.reg .u16 %r1022;
.reg .u16 %r1023;
.reg .u16 %r1024;
.reg .u32 %r1025;
.reg .u32 %r1026;
.reg .pred %r1027;
.reg .u64 %r1028;
.reg .pred %r1029;
.reg .u64 %r1030;
.reg .u32 %r1031;
.reg .u32 %r1032;
.reg .u64 %r1033;
.reg .pred %r1034;
.reg .u32 %r1035;
.reg .u64 %r1038;
.reg .u64 %r1039;
.reg .pred %r1040;
.reg .pred %r1041;
.reg .u32 %r1042;
.reg .u32 %r1043;
.reg .u16 %r1044;
.reg .u32 %r1045;
.reg .u32 %r1046;
.reg .u16 %r1047;
.reg .u32 %r1048;
.reg .u32 %r1049;
.reg .u16 %r1051;
mov.u64 %r360,%ar0;
mov.u64 %r361,%ar1;
mov.u64 %r362,%ar2;
mov.u64 %r363,%ar3;
.loc 1 256 11
mov.u64 %r364,0;
st.u64 [%frame+8],%r364;
.loc 1 266 14
ld.const.u64 %r246,[_C_numeric_locale];
.loc 1 267 16
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r246;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r367,[%value_in];
}
.loc 1 271 11
mov.u64 %r356,%r364;
.loc 1 272 8
st.u64 [%frame+16],%r361;
mov.u64 %r340,%r361;
$L9:
.loc 1 272 27
ld.s8 %r24,[%r340];
.loc 1 272 20
cvt.u16.u32 %r368,%r24;
setp.eq.u16 %r369,%r368,43;
@ %r369 bra $L159;
setp.gt.s16 %r371,%r368,43;
@ %r371 bra $L3;
setp.gt.s16 %r373,%r368,13;
@ %r373 bra $L4;
setp.gt.s16 %r375,%r368,8;
@ %r375 bra $L5;
setp.eq.u32 %r376,%r24,0;
@ %r376 bra $L6;
mov.u32 %r227,0;
.loc 1 270 13
mov.u32 %r226,%r227;
bra $L7;
$L4:
.loc 1 272 20
setp.eq.u16 %r378,%r368,32;
@ %r378 bra $L5;
mov.u32 %r227,0;
.loc 1 270 13
mov.u32 %r226,%r227;
bra $L7;
$L3:
.loc 1 272 20
setp.ne.u16 %r380,%r368,45;
@ %r380 bra $L160;
.loc 1 274 9
mov.u32 %r227,1;
bra $L2;
$L159:
.loc 1 272 20
mov.u32 %r227,0;
$L2:
.loc 1 277 9
add.u64 %r26,%r340,1;
.loc 1 277 7
st.u64 [%frame+16],%r26;
.loc 1 277 8
ld.s8 %r24,[%r340+1];
.loc 1 277 7
setp.ne.u32 %r381,%r24,0;
@ %r381 bra $L161;
bra $L6;
$L5:
.loc 1 272 16
add.u64 %r340,%r340,1;
st.u64 [%frame+16],%r340;
.loc 1 272 20
bra $L9;
$L160:
mov.u32 %r227,0;
bra $L8;
$L161:
mov.u64 %r340,%r26;
$L8:
.loc 1 293 5
cvt.u16.u32 %r382,%r24;
setp.ne.u16 %r383,%r382,48;
@ %r383 bra $L162;
.loc 1 299 3
ld.u8 %r1051,[%r340+1];
mov.u16 %r386,%r1051;
and.b16 %r385,%r386,-33;
cvt.u32.u16 %r389,%r385;
cvt.s32.s8 %r388,%r389;
cvt.u16.u32 %r387,%r388;
setp.ne.u16 %r390,%r387,88;
@ %r390 bra $L10;
.loc 1 316 16
add.u64 %r398,%frame,8;
add.u64 %r399,%frame,24;
add.u64 %r400,%frame,16;
cvta.const.u64 %r393,fpi$1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r400;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r393;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r399;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r398;
.param .u32 %out_arg6;
st.param.u32 [%out_arg6],%r227;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r363;
call (%value_in),__gethex,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u32 %r401,[%value_in];
}
.loc 1 316 62
and.b32 %r33,%r401,7;
setp.eq.u32 %r402,%r33,0;
@ %r402 bra $L163;
setp.ne.u32 %r403,%r33,6;
@ %r403 bra $L12;
.loc 1 304 8
add.u64 %r331,%r340,1;
.loc 1 1260 5
setp.eq.u64 %r404,%r362,0;
@ %r404 bra $L164;
.loc 1 1261 7
st.u64 [%r362],%r331;
mov.f64 %r359,0d0000000000000000;
bra $L1;
$L12:
.loc 1 324 9
ld.u64 %r34,[%frame+8];
.loc 1 324 8
setp.eq.u64 %r405,%r34,0;
@ %r405 bra $L14;
.loc 1 325 6
mov.u32 %r407,53;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r407;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r34;
call __copybits,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 326 6
ld.u64 %r411,[%frame+8];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call _Bfree,(%out_arg1,%out_arg2);
}
$L14:
.loc 1 211 2
setp.eq.u32 %r412,%r33,3;
@ %r412 bra $L15;
and.b32 %r413,%r401,4;
setp.ne.u32 %r414,%r413,0;
@ %r414 bra $L16;
setp.eq.u32 %r415,%r33,1;
@ %r415 bra $L17;
setp.eq.u32 %r416,%r33,2;
@ %r416 bra $L18;
bra $L19;
$L16:
setp.eq.u32 %r417,%r33,4;
@ %r417 bra $L20;
setp.eq.u32 %r418,%r33,5;
@ %r418 bra $L17;
bra $L19;
$L18:
.loc 1 219 9
ld.u32 %r422,[%frame+4];
shl.b64 %r423,%r422,32;
ld.u32 %r424,[%frame];
or.b64 %r356,%r424,%r423;
.loc 1 220 3
bra $L19;
$L17:
.loc 1 328 5
ld.u32 %r36,[%frame+24];
.loc 1 225 20
ld.u32 %r430,[%frame+4];
and.b32 %r429,%r430,-1048577;
.loc 1 225 49
add.u32 %r431,%r36,1075;
.loc 1 225 55
shl.b32 %r432,%r431,20;
.loc 1 225 33
or.b32 %r433,%r429,%r432;
.loc 1 225 9
cvt.u64.u32 %r434,%r433;
shl.b64 %r435,%r434,32;
ld.u32 %r436,[%frame];
or.b64 %r356,%r436,%r435;
.loc 1 226 3
bra $L19;
$L15:
.loc 1 229 9
mov.u64 %r356,9218868437227405312;
.loc 1 231 3
bra $L19;
$L20:
.loc 1 235 9
mov.u64 %r356,9223372036854775807;
$L19:
.loc 1 237 8
and.b32 %r440,%r401,8;
.loc 1 237 5
setp.ne.u32 %r441,%r440,0;
@ %r441 bra $L21;
.loc 1 1262 17
mov.b64 %r359,%r356;
bra $L22;
$L21:
.loc 1 238 9
shr.u64 %r442,%r356,32;
cvt.u32.u64 %r444,%r442;
or.b32 %r443,%r444,-2147483648;
cvt.u64.u32 %r445,%r443;
shl.b64 %r446,%r445,32;
and.b64 %r447,%r356,4294967295;
or.b64 %r356,%r447,%r446;
.loc 1 1262 17
mov.b64 %r359,%r356;
bra $L22;
$L163:
mov.f64 %r359,0d0000000000000000;
bra $L22;
$L10:
add.u64 %r80,%r340,1;
$L23:
.loc 1 335 10
mov.u64 %r340,%r80;
.loc 1 335 8
st.u64 [%frame+16],%r340;
add.u64 %r80,%r340,1;
.loc 1 335 9
ld.s8 %r24,[%r340];
.loc 1 335 8
cvt.u16.u32 %r449,%r24;
setp.eq.u16 %r450,%r449,48;
@ %r450 bra $L23;
.loc 1 336 6
setp.eq.u32 %r451,%r24,0;
@ %r451 bra $L165;
.loc 1 334 7
mov.u32 %r226,1;
bra $L7;
$L162:
.loc 1 270 13
mov.u32 %r226,0;
$L7:
.loc 1 347 6
cvt.u32.u64 %r452,%r367;
cvt.s64.s32 %r344,%r452;
.loc 1 341 35
add.u32 %r1031,%r24,-48;
setp.gt.u32 %r454,%r1031,9;
@ %r454 bra $L24;
add.u64 %r224,%r340,1;
.loc 1 340 8
mov.u32 %r233,0;
.loc 1 340 4
mov.u32 %r230,%r233;
.loc 1 341 9
mov.u32 %r252,%r233;
$L27:
.loc 1 342 6
setp.gt.s32 %r455,%r252,8;
@ %r455 bra $L25;
.loc 1 343 10
shl.b32 %r457,%r230,2;
add.u32 %r458,%r457,%r230;
add.u32 %r459,%r458,%r458;
.loc 1 343 6
add.u32 %r230,%r1031,%r459;
bra $L26;
$L25:
.loc 1 345 10
shl.b32 %r462,%r233,2;
add.u32 %r463,%r462,%r233;
add.u32 %r464,%r463,%r463;
.loc 1 345 6
add.u32 %r233,%r1031,%r464;
$L26:
.loc 1 341 50
add.u32 %r252,%r252,1;
.loc 1 341 55
mov.u64 %r43,%r224;
st.u64 [%frame+16],%r224;
.loc 1 341 24
ld.s8 %r24,[%r224];
.loc 1 341 35
add.u64 %r224,%r224,1;
add.u32 %r1031,%r24,-48;
setp.le.u32 %r467,%r1031,9;
@ %r467 bra $L27;
bra $L306;
$L153:
add.u64 %r291,%r329,1;
.loc 1 270 18
mov.u32 %r154,%r1014;
$L29:
.loc 1 353 7
add.u32 %r154,%r154,1;
.loc 1 352 22
st.u64 [%frame+16],%r291;
ld.s8 %r219,[%r291];
.loc 1 352 4
add.u64 %r291,%r291,1;
setp.eq.u32 %r468,%r219,48;
@ %r468 bra $L29;
$L154:
.loc 1 354 16
add.u32 %r469,%r219,-49;
.loc 1 354 7
setp.gt.u32 %r470,%r469,8;
@ %r470 bra $L166;
.loc 1 355 8
ld.u64 %r340,[%frame+16];
.loc 1 365 10
add.u32 %r330,%r219,-48;
.loc 1 366 8
add.u32 %r225,%r154,1;
mov.u64 %r45,%r340;
.loc 1 340 8
mov.u32 %r233,0;
.loc 1 366 8
mov.u32 %r252,1;
.loc 1 340 4
mov.u32 %r230,%r233;
bra $L31;
$L32:
.loc 1 364 6
add.u32 %r154,%r154,1;
.loc 1 365 10
mov.u32 %r330,%r495;
.loc 1 362 36
ld.u64 %r45,[%frame+16];
.loc 1 365 7
setp.eq.u32 %r471,%r495,0;
@ %r471 bra $L33;
.loc 1 368 12
add.u32 %r1035,%r252,1;
.loc 1 366 8
add.u32 %r225,%r225,%r154;
.loc 1 367 5
setp.eq.u32 %r472,%r154,1;
@ %r472 bra $L167;
add.u32 %r315,%r252,%r154;
add.u32 %r176,%r315,-1;
$L37:
mov.u32 %r222,%r252;
.loc 1 368 12
mov.u32 %r252,%r1035;
.loc 1 368 9
setp.gt.u32 %r473,%r222,8;
@ %r473 bra $L35;
.loc 1 369 9
shl.b32 %r475,%r230,2;
add.u32 %r476,%r475,%r230;
add.u32 %r230,%r476,%r476;
bra $L36;
$L35:
.loc 1 370 14
setp.gt.s32 %r478,%r1035,16;
@ %r478 bra $L36;
.loc 1 371 9
shl.b32 %r480,%r233,2;
add.u32 %r481,%r480,%r233;
add.u32 %r233,%r481,%r481;
$L36:
.loc 1 367 5
setp.ne.u32 %r483,%r1035,%r176;
@ ! %r483 bra $L307;
add.u32 %r1035,%r1035,1;
bra $L37;
$L307:
.loc 1 372 11
mov.u32 %r252,%r315;
bra $L34;
$L167:
.loc 1 367 5
mov.u32 %r176,%r252;
mov.u32 %r252,%r1035;
$L34:
.loc 1 372 8
setp.gt.s32 %r484,%r176,8;
@ %r484 bra $L38;
$L31:
.loc 1 373 12
shl.b32 %r486,%r230,2;
add.u32 %r487,%r486,%r230;
add.u32 %r488,%r487,%r487;
.loc 1 373 8
add.u32 %r230,%r330,%r488;
.loc 1 376 8
mov.u32 %r154,0;
bra $L33;
$L38:
.loc 1 374 13
setp.gt.s32 %r489,%r252,16;
@ %r489 bra $L168;
.loc 1 375 12
shl.b32 %r491,%r233,2;
add.u32 %r492,%r491,%r233;
add.u32 %r493,%r492,%r492;
.loc 1 375 8
add.u32 %r233,%r495,%r493;
.loc 1 376 8
mov.u32 %r154,0;
bra $L33;
$L168:
mov.u32 %r154,0;
$L33:
.loc 1 362 36
add.u64 %r494,%r45,1;
.loc 1 362 33
st.u64 [%frame+16],%r494;
ld.s8 %r219,[%r45+1];
$L156:
.loc 1 362 18
add.u32 %r495,%r219,-48;
.loc 1 362 3
setp.le.u32 %r496,%r495,9;
@ %r496 bra $L32;
.loc 1 349 9
mov.u32 %r244,1;
.loc 1 380 2
bra $L30;
$L166:
.loc 1 341 14
mov.u32 %r225,%r1014;
mov.u32 %r252,%r225;
.loc 1 340 8
mov.u32 %r233,0;
.loc 1 340 4
mov.u32 %r230,%r233;
.loc 1 349 9
mov.u32 %r244,1;
$L30:
.loc 1 382 20
and.b32 %r497,%r219,-33;
.loc 1 382 5
setp.ne.u32 %r498,%r497,69;
@ %r498 bra $L169;
.loc 1 383 18
or.b32 %r499,%r252,%r154;
or.b32 %r500,%r499,%r226;
.loc 1 383 6
setp.eq.u32 %r501,%r500,0;
@ %r501 bra $L6;
bra $L158;
$L182:
.loc 1 341 50
mov.u32 %r346,%r252;
.loc 1 270 18
mov.u32 %r154,0;
.loc 1 341 14
mov.u32 %r225,%r154;
.loc 1 270 26
mov.u32 %r244,%r154;
$L158:
.loc 1 386 7
ld.u64 %r361,[%frame+16];
.loc 1 388 15
add.u64 %r502,%r361,1;
.loc 1 388 3
st.u64 [%frame+16],%r502;
.loc 1 388 14
ld.s8 %r68,[%r361+1];
.loc 1 388 3
cvt.u16.u32 %r503,%r68;
setp.eq.u16 %r504,%r503,43;
@ %r504 bra $L170;
setp.eq.u16 %r506,%r503,45;
@ %r506 bra $L171;
.loc 1 388 12
mov.u32 %r219,%r68;
.loc 1 387 9
mov.u32 %r221,0;
bra $L42;
$L170:
.loc 1 388 3
mov.u32 %r221,0;
bra $L41;
$L171:
.loc 1 390 11
mov.u32 %r221,1;
$L41:
.loc 1 392 10
add.u64 %r507,%r361,2;
.loc 1 392 7
st.u64 [%frame+16],%r507;
ld.s8 %r219,[%r361+2];
$L42:
.loc 1 394 16
add.u32 %r508,%r219,-48;
.loc 1 394 6
setp.gt.u32 %r509,%r508,9;
@ %r509 bra $L43;
.loc 1 395 9
setp.ne.u32 %r510,%r219,48;
@ %r510 bra $L44;
ld.u64 %r511,[%frame+16];
add.u64 %r46,%r511,1;
$L45:
.loc 1 396 7
st.u64 [%frame+16],%r46;
.loc 1 396 9
ld.s8 %r219,[%r46];
.loc 1 395 9
add.u64 %r46,%r46,1;
setp.eq.u32 %r512,%r219,48;
@ %r512 bra $L45;
$L44:
.loc 1 397 16
add.u32 %r513,%r219,-49;
.loc 1 397 7
setp.gt.u32 %r514,%r513,8;
@ %r514 bra $L172;
.loc 1 398 7
add.u32 %r257,%r219,-48;
.loc 1 399 8
ld.u64 %r256,[%frame+16];
.loc 1 400 17
add.u64 %r515,%r256,1;
.loc 1 400 10
st.u64 [%frame+16],%r515;
.loc 1 400 16
ld.s8 %r219,[%r256+1];
.loc 1 400 29
add.u32 %r516,%r219,-48;
setp.gt.u32 %r517,%r516,9;
@ %r517 bra $L46;
add.u64 %r28,%r256,2;
$L47:
.loc 1 401 12
shl.b32 %r519,%r257,2;
add.u32 %r520,%r519,%r257;
add.u32 %r521,%r520,%r520;
.loc 1 401 15
add.u32 %r79,%r521,%r219;
.loc 1 401 8
add.u32 %r257,%r79,-48;
.loc 1 400 17
mov.u64 %r81,%r28;
.loc 1 400 10
st.u64 [%frame+16],%r28;
.loc 1 400 16
ld.s8 %r219,[%r28];
.loc 1 400 29
add.u64 %r28,%r28,1;
add.u32 %r522,%r219,-48;
setp.le.u32 %r523,%r522,9;
@ %r523 bra $L47;
.loc 1 402 11
sub.u64 %r524,%r81,%r256;
.loc 1 402 8
setp.gt.s64 %r525,%r524,8;
@ %r525 bra $L173;
$L46:
min.s32 %r220,%r257,19999;
bra $L48;
$L173:
.loc 1 406 8
mov.u32 %r220,19999;
$L48:
.loc 1 409 8
setp.eq.u32 %r526,%r221,0;
@ %r526 bra $L39;
.loc 1 410 8
neg.s32 %r220,%r220;
bra $L39;
$L43:
.loc 1 416 6
st.u64 [%frame+16],%r361;
.loc 1 381 4
mov.u32 %r220,0;
bra $L39;
$L169:
mov.u32 %r220,0;
bra $L39;
$L172:
.loc 1 413 7
mov.u32 %r220,0;
$L39:
.loc 1 418 5
setp.ne.u32 %r527,%r252,0;
@ %r527 bra $L174;
.loc 1 419 11
or.b32 %r528,%r226,%r154;
.loc 1 419 6
setp.eq.u32 %r529,%r528,0;
@ %r529 bra $L50;
.loc 1 1262 17
mov.f64 %r359,0d0000000000000000;
bra $L22;
$L50:
.loc 1 425 7
setp.ne.u32 %r530,%r244,0;
@ %r530 bra $L6;
.loc 1 426 5
setp.eq.u32 %r531,%r219,105;
@ %r531 bra $L51;
setp.gt.s32 %r532,%r219,105;
@ %r532 bra $L52;
setp.eq.u32 %r533,%r219,73;
@ %r533 bra $L51;
setp.eq.u32 %r534,%r219,78;
@ %r534 bra $L53;
bra $L6;
$L52:
setp.eq.u32 %r535,%r219,110;
@ %r535 bra $L53;
bra $L6;
$L51:
.loc 1 429 9
add.u64 %r538,%frame,16;
cvta.const.u64 %r537,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r538;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r537;
call (%value_in),__match,(%out_arg1,%out_arg2);
ld.param.u32 %r539,[%value_in];
}
.loc 1 429 8
setp.eq.u32 %r540,%r539,0;
@ %r540 bra $L6;
.loc 1 430 6
ld.u64 %r542,[%frame+16];
add.u64 %r541,%r542,-1;
st.u64 [%frame+16],%r541;
.loc 1 431 11
cvta.const.u64 %r544,$LC1;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r538;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r544;
call (%value_in),__match,(%out_arg1,%out_arg2);
ld.param.u32 %r546,[%value_in];
}
.loc 1 431 9
setp.ne.u32 %r547,%r546,0;
@ %r547 bra $L54;
.loc 1 432 7
ld.u64 %r549,[%frame+16];
add.u64 %r548,%r549,1;
st.u64 [%frame+16],%r548;
$L54:
.loc 1 437 6
mov.f64 %r359,0d7ff0000000000000;
bra $L22;
$L53:
.loc 1 442 9
add.u64 %r552,%frame,16;
cvta.const.u64 %r551,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r552;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r551;
call (%value_in),__match,(%out_arg1,%out_arg2);
ld.param.u32 %r553,[%value_in];
}
.loc 1 442 8
setp.eq.u32 %r554,%r553,0;
@ %r554 bra $L6;
.loc 1 444 10
ld.u64 %r555,[%frame+16];
.loc 1 444 9
ld.s8 %r557,[%r555];
cvt.u16.u32 %r556,%r557;
setp.ne.u16 %r558,%r556,40;
@ %r558 bra $L56;
.loc 1 445 10
cvta.const.u64 %r560,fpinan$0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r552;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r560;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
call (%value_in),__hexnan,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r563,[%value_in];
}
.loc 1 445 7
setp.ne.u32 %r564,%r563,5;
@ %r564 bra $L56;
.loc 1 447 31
ld.u32 %r566,[%frame+4];
or.b32 %r565,%r566,2146435072;
.loc 1 447 18
cvt.u64.u32 %r567,%r565;
.loc 1 449 18
ld.u32 %r571,[%frame];
shl.b64 %r572,%r567,32;
or.b64 %r356,%r572,%r571;
.loc 1 1262 17
mov.b64 %r359,%r356;
.loc 1 449 18
bra $L22;
$L56:
.loc 1 454 18
cvta.const.u64 %r574,$LC3;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r574;
call (%value_in),nan,(%out_arg1);
ld.param.f64 %r575,[%value_in];
}
mov.f64 %r359,%r575;
bra $L22;
$L6:
.loc 1 1260 5
setp.ne.u64 %r576,%r362,0;
@ %r576 bra $L57;
.loc 1 1262 26
mov.f64 %r359,0d0000000000000000;
bra $L1;
$L57:
.loc 1 1261 7
st.u64 [%r362],%r361;
.loc 1 1262 26
mov.f64 %r359,0d0000000000000000;
bra $L1;
$L174:
mov.u32 %r354,%r252;
mov.u32 %r252,%r346;
$L49:
.loc 1 468 9
sub.u32 %r258,%r220,%r225;
.loc 1 475 5
setp.ne.u32 %r577,%r252,0;
selp.u32 %r252,%r252,%r354,%r577;
.loc 1 477 4
min.s32 %r260,%r354,16;
.loc 1 478 11
cvt.rn.f64.u32 %r99,%r230;
mov.b64 %r356,%r99;
.loc 1 479 5
setp.le.s32 %r578,%r354,9;
@ %r578 bra $L59;
.loc 1 484 18
cvta.const.u64 %r579,__mprec_tens;
.loc 1 484 21
add.u32 %r580,%r260,-9;
.loc 1 484 18
cvt.s64.s32 %r581,%r580;
shl.b64 %r582,%r581,3;
add.u64 %r583,%r579,%r582;
.loc 1 484 37
cvt.rn.f64.u32 %r584,%r233;
ld.f64 %r585,[%r583];
fma.rn.f64 %r104,%r99,%r585,%r584;
.loc 1 484 12
mov.b64 %r356,%r104;
$L59:
.loc 1 487 5
setp.gt.s32 %r586,%r354,15;
@ %r586 bra $L60;
.loc 1 494 6
setp.ne.u32 %r587,%r258,0;
@ %r587 bra $L61;
.loc 1 1262 17
mov.b64 %r359,%r356;
bra $L22;
$L61:
.loc 1 496 6
setp.le.s32 %r588,%r258,0;
@ %r588 bra $L62;
.loc 1 497 7
setp.gt.s32 %r589,%r258,22;
@ %r589 bra $L63;
.loc 1 508 16
cvta.const.u64 %r590,__mprec_tens;
cvt.s64.s32 %r591,%r258;
shl.b64 %r592,%r591,3;
add.u64 %r593,%r590,%r592;
ld.f64 %r594,[%r593];
mov.b64 %r595,%r356;
mul.f64 %r359,%r594,%r595;
.loc 1 509 5
bra $L22;
$L63:
.loc 1 513 22
mov.u32 %r597,37;
sub.u32 %r596,%r597,%r354;
.loc 1 513 7
setp.lt.s32 %r598,%r596,%r258;
@ %r598 bra $L64;
.loc 1 512 6
mov.u32 %r599,15;
sub.u32 %r261,%r599,%r354;
.loc 1 525 21
cvta.const.u64 %r600,__mprec_tens;
cvt.s64.s32 %r601,%r261;
shl.b64 %r602,%r601,3;
add.u64 %r603,%r600,%r602;
.loc 1 525 14
ld.f64 %r605,[%r603];
mov.b64 %r606,%r356;
mul.f64 %r604,%r605,%r606;
.loc 1 524 7
sub.u32 %r608,%r258,%r261;
.loc 1 538 16
cvt.s64.s32 %r609,%r608;
shl.b64 %r610,%r609,3;
add.u64 %r611,%r600,%r610;
ld.f64 %r612,[%r611];
mul.f64 %r359,%r604,%r612;
.loc 1 540 5
bra $L22;
$L62:
.loc 1 544 11
setp.lt.s32 %r613,%r258,-22;
@ %r613 bra $L60;
.loc 1 552 15
cvta.const.u64 %r614,__mprec_tens;
sub.u32 %r615,%r225,%r220;
cvt.s64.s32 %r616,%r615;
shl.b64 %r617,%r616,3;
add.u64 %r618,%r614,%r617;
mov.b64 %r619,%r356;
ld.f64 %r620,[%r618];
div.rn.f64 %r359,%r619,%r620;
.loc 1 553 4
bra $L22;
$L60:
.loc 1 557 11
sub.u32 %r621,%r354,%r260;
.loc 1 557 5
add.u32 %r263,%r621,%r258;
.loc 1 581 5
setp.le.s32 %r622,%r263,0;
@ %r622 bra $L65;
$L152:
.loc 1 582 11
and.b32 %r269,%r263,15;
.loc 1 582 6
setp.eq.u32 %r623,%r269,0;
@ %r623 bra $L66;
.loc 1 583 20
cvta.const.u64 %r624,__mprec_tens;
cvt.s64.s32 %r625,%r269;
shl.b64 %r626,%r625,3;
add.u64 %r627,%r624,%r626;
.loc 1 583 13
ld.f64 %r629,[%r627];
mov.b64 %r630,%r356;
mul.f64 %r628,%r629,%r630;
mov.b64 %r356,%r628;
$L66:
.loc 1 584 10
and.b32 %r270,%r263,-16;
.loc 1 584 6
setp.eq.u32 %r631,%r270,0;
@ %r631 bra $L67;
.loc 1 585 7
setp.le.s32 %r632,%r270,308;
@ %r632 bra $L68;
$L73:
.loc 1 588 17
mov.u32 %r633,34;
st.u32 [%r360],%r633;
mov.f64 %r359,0d7ff0000000000000;
bra $L22;
$L68:
.loc 1 628 7
shr.s32 %r273,%r270,4;
.loc 1 629 4
setp.le.s32 %r634,%r270,16;
@ %r634 bra $L175;
mov.b64 %r324,%r356;
cvta.const.u64 %r1028,__mprec_bigtens;
mov.u64 %r337,%r1028;
mov.u32 %r293,0;
.loc 1 629 10
mov.u32 %r272,%r293;
.loc 1 631 15
mov.u32 %r1048,1;
$L71:
.loc 1 630 12
and.b32 %r635,%r273,1;
.loc 1 630 8
setp.eq.u32 %r636,%r635,0;
@ %r636 bra $L70;
.loc 1 631 15
ld.f64 %r637,[%r337];
mul.f64 %r324,%r324,%r637;
mov.u32 %r293,%r1048;
$L70:
.loc 1 629 24
add.u32 %r272,%r272,1;
.loc 1 629 31
shr.s32 %r273,%r273,1;
.loc 1 629 4
add.u64 %r337,%r337,8;
setp.ne.u32 %r638,%r273,1;
@ %r638 bra $L71;
setp.eq.u32 %r639,%r293,0;
@ %r639 bra $L69;
mov.b64 %r356,%r324;
bra $L69;
$L175:
.loc 1 629 10
mov.u32 %r272,0;
cvta.const.u64 %r1028,__mprec_bigtens;
$L69:
.loc 1 633 15
shr.u64 %r640,%r356,32;
cvt.u32.u64 %r642,%r640;
add.u32 %r641,%r642,-55574528;
cvt.u64.u32 %r643,%r641;
shl.b64 %r644,%r643,32;
and.b64 %r645,%r356,4294967295;
or.b64 %r356,%r645,%r644;
.loc 1 634 23
cvt.s64.s32 %r648,%r272;
shl.b64 %r649,%r648,3;
add.u64 %r650,%r1028,%r649;
.loc 1 634 13
ld.f64 %r651,[%r650];
mov.b64 %r652,%r356;
mul.f64 %r125,%r651,%r652;
mov.b64 %r356,%r125;
shr.u64 %r654,%r356,32;
cvt.u32.u64 %r259,%r654;
.loc 1 635 11
and.b32 %r271,%r259,2146435072;
.loc 1 635 7
setp.gt.u32 %r655,%r271,2090860544;
@ %r655 bra $L73;
.loc 1 638 7
setp.le.u32 %r656,%r271,2089811968;
@ %r656 bra $L74;
.loc 1 643 16
mov.u64 %r356,9218868437227405311;
.loc 1 566 8
mov.u32 %r130,0;
bra $L75;
$L74:
.loc 1 647 16
add.u32 %r657,%r259,55574528;
cvt.u64.u32 %r658,%r657;
shl.b64 %r659,%r658,32;
and.b64 %r660,%r356,4294967295;
or.b64 %r356,%r660,%r659;
.loc 1 566 8
mov.u32 %r130,0;
bra $L75;
$L65:
.loc 1 650 10
setp.eq.u32 %r662,%r263,0;
@ %r662 bra $L67;
.loc 1 651 6
neg.s32 %r264,%r263;
.loc 1 652 11
and.b32 %r265,%r264,15;
.loc 1 652 6
setp.eq.u32 %r663,%r265,0;
@ %r663 bra $L76;
.loc 1 653 20
cvta.const.u64 %r664,__mprec_tens;
cvt.s64.s32 %r665,%r265;
shl.b64 %r666,%r665,3;
add.u64 %r667,%r664,%r666;
.loc 1 653 13
mov.b64 %r669,%r356;
ld.f64 %r670,[%r667];
div.rn.f64 %r668,%r669,%r670;
mov.b64 %r356,%r668;
$L76:
.loc 1 654 10
shr.s32 %r268,%r264,4;
.loc 1 654 6
setp.eq.u32 %r671,%r268,0;
@ %r671 bra $L67;
.loc 1 655 7
setp.gt.s32 %r672,%r268,31;
@ %r672 bra $L77;
.loc 1 658 11
and.b32 %r130,%r268,16;
.loc 1 658 7
setp.eq.u32 %r1034,%r130,0;
@ %r1034 bra $L78;
.loc 1 659 11
mov.u32 %r130,106;
setp.eq.u32 %r1034,1,0;
$L78:
mov.b64 %r231,%r356;
cvta.const.u64 %r23,tinytens;
mov.u32 %r82,0;
.loc 1 662 15
mov.u32 %r1049,1;
$L80:
.loc 1 661 12
and.b32 %r674,%r268,1;
.loc 1 661 8
setp.eq.u32 %r675,%r674,0;
@ %r675 bra $L79;
.loc 1 662 15
ld.f64 %r676,[%r23];
mul.f64 %r231,%r231,%r676;
mov.u32 %r82,%r1049;
$L79:
.loc 1 660 31
shr.s32 %r268,%r268,1;
.loc 1 660 4
add.u64 %r23,%r23,8;
setp.ne.u32 %r677,%r268,0;
@ %r677 bra $L80;
setp.eq.u32 %r678,%r82,0;
@ %r678 bra $L81;
mov.b64 %r356,%r231;
$L81:
.loc 1 663 7
@ %r1034 bra $L82;
.loc 1 663 34
shr.u64 %r1030,%r356,32;
cvt.u32.u64 %r134,%r1030;
.loc 1 664 7
shr.u32 %r681,%r134,20;
and.b32 %r136,%r681,2047;
.loc 1 663 30
mov.u32 %r682,107;
sub.u32 %r266,%r682,%r136;
.loc 1 663 14
setp.le.s32 %r683,%r266,0;
@ %r683 bra $L82;
.loc 1 666 8
setp.le.s32 %r684,%r266,31;
@ %r684 bra $L83;
.loc 1 668 17
and.b64 %r356,%r356,-4294967296;
.loc 1 670 9
setp.le.s32 %r686,%r266,52;
@ %r686 bra $L84;
.loc 1 671 18
mov.u64 %r356,247697979505377280;
bra $L82;
$L84:
.loc 1 673 37
mov.u32 %r690,75;
sub.u32 %r689,%r690,%r136;
.loc 1 673 32
mov.u32 %r692,-1;
shl.b32 %r691,%r692,%r689;
.loc 1 673 18
and.b32 %r693,%r691,%r134;
cvt.u64.u32 %r694,%r693;
shl.b64 %r695,%r694,32;
and.b64 %r696,%r356,4294967295;
or.b64 %r356,%r696,%r695;
bra $L82;
$L83:
.loc 1 677 31
mov.u32 %r699,-1;
shl.b32 %r698,%r699,%r266;
.loc 1 677 17
cvt.u32.u64 %r701,%r356;
and.b32 %r700,%r698,%r701;
cvt.u64.u32 %r702,%r700;
and.b64 %r703,%r356,-4294967296;
or.b64 %r356,%r703,%r702;
$L82:
.loc 1 691 8
mov.b64 %r705,%r356;
setp.neu.f64 %r706,%r705,0d0000000000000000;
@ %r706 bra $L75;
$L77:
.loc 1 695 18
mov.u32 %r707,34;
st.u32 [%r360],%r707;
mov.f64 %r359,0d0000000000000000;
bra $L22;
$L67:
.loc 1 566 8
mov.u32 %r130,0;
$L75:
.loc 1 720 8
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r340;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r252;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r354;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r230;
call (%value_in),__s2b,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r713,[%value_in];
}
.loc 1 721 5
setp.eq.u64 %r714,%r713,0;
@ %r714 bra $L73;
setp.ge.s32 %r716,%r258,0;
@ %r716 bra $L85;
.loc 1 741 14
sub.u32 %r715,%r225,%r220;
bra $L86;
$L85:
mov.u32 %r715,0;
$L86:
max.s32 %r353,%r258,0;
.loc 1 269 8
mov.u64 %r237,0;
.loc 1 269 13
mov.u64 %r236,%r237;
.loc 1 728 3
add.u64 %r1038,%r713,16;
.loc 1 729 8
add.u64 %r1039,%frame,24;
.loc 1 796 6
setp.le.s32 %r1040,%r715,0;
.loc 1 811 6
setp.gt.s32 %r1041,%r258,0;
.loc 1 1189 6
set.u32.eq.u32 %r1042,%r130,0;
neg.s32 %r1043,%r1042;
.loc 1 1191 6
cvt.u16.u32 %r1044,%r1043;
.loc 1 1126 8
set.u32.ne.u32 %r1045,%r130,0;
neg.s32 %r1046,%r1045;
.loc 1 1126 14
cvt.u16.u32 %r1047,%r1046;
$L149:
.loc 1 725 8
ld.u32 %r719,[%r713+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r719;
call (%value_in),_Balloc,(%out_arg1,%out_arg2);
ld.param.u64 %r720,[%value_in];
}
mov.u64 %r235,%r720;
.loc 1 726 6
setp.eq.u64 %r721,%r235,0;
@ %r721 bra $L87;
.loc 1 728 3
ld.s32 %r725,[%r713+20];
add.u64 %r726,%r725,2;
shl.b64 %r727,%r726,2;
add.u64 %r729,%r235,16;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r729;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1038;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r727;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r730,[%value_in];
}
.loc 1 729 8
mov.b64 %r336,%r356;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r336;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1039;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call (%value_in),__d2b,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r736,[%value_in];
}
mov.u64 %r326,%r736;
.loc 1 729 6
st.u64 [%frame+8],%r326;
.loc 1 730 6
setp.eq.u64 %r737,%r326,0;
@ %r737 bra $L88;
.loc 1 732 8
mov.u32 %r739,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r739;
call (%value_in),__i2b,(%out_arg1,%out_arg2);
ld.param.u64 %r740,[%value_in];
}
mov.u64 %r236,%r740;
.loc 1 733 6
setp.ne.u64 %r741,%r236,0;
@ %r741 bra $L89;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L89:
.loc 1 744 11
ld.u32 %r153,[%frame+24];
.loc 1 744 6
setp.lt.s32 %r742,%r153,0;
@ %r742 bra $L90;
.loc 1 745 8
add.u32 %r212,%r153,%r715;
mov.u32 %r215,%r353;
bra $L91;
$L90:
.loc 1 747 8
sub.u32 %r215,%r353,%r153;
mov.u32 %r212,%r715;
$L91:
.loc 1 757 9
ld.u32 %r155,[%frame];
.loc 1 756 5
sub.u32 %r743,%r153,%r130;
.loc 1 757 9
add.u32 %r744,%r743,%r155;
.loc 1 757 5
add.u32 %r277,%r744,-1;
.loc 1 758 5
mov.u32 %r745,54;
sub.u32 %r223,%r745,%r155;
.loc 1 759 6
setp.ge.s32 %r746,%r277,-1022;
@ %r746 bra $L176;
.loc 1 760 6
mov.u32 %r747,-1022;
sub.u32 %r278,%r747,%r277;
.loc 1 761 6
sub.u32 %r223,%r223,%r278;
.loc 1 762 7
setp.gt.s32 %r748,%r278,31;
@ %r748 bra $L93;
.loc 1 763 9
mov.u32 %r749,1;
shl.b32 %r238,%r749,%r278;
.loc 1 755 8
mov.u32 %r239,0;
bra $L92;
$L93:
.loc 1 765 21
mov.u32 %r751,-1054;
sub.u32 %r750,%r751,%r277;
.loc 1 765 10
mov.u32 %r752,1;
shl.b32 %r239,%r752,%r750;
.loc 1 754 7
mov.u32 %r238,%r752;
bra $L92;
$L176:
.loc 1 755 8
mov.u32 %r239,0;
.loc 1 754 7
mov.u32 %r238,1;
$L92:
.loc 1 783 7
add.u32 %r213,%r212,%r223;
.loc 1 784 7
add.u32 %r279,%r215,%r223;
.loc 1 786 7
add.u32 %r216,%r130,%r279;
min.s32 %r753,%r212,%r213;
min.s32 %r32,%r753,%r216;
.loc 1 791 6
setp.le.s32 %r754,%r32,0;
@ %r754 bra $L94;
.loc 1 792 8
sub.u32 %r213,%r213,%r32;
.loc 1 793 8
sub.u32 %r216,%r216,%r32;
.loc 1 794 8
sub.u32 %r212,%r212,%r32;
$L94:
.loc 1 796 6
@ %r1040 bra $L95;
.loc 1 797 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r740;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r715;
call (%value_in),__pow5mult,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r759,[%value_in];
}
mov.u64 %r236,%r759;
.loc 1 798 7
setp.ne.u64 %r760,%r236,0;
@ %r760 bra $L96;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L96:
.loc 1 800 10
ld.u64 %r764,[%frame+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r764;
call (%value_in),__multiply,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r765,[%value_in];
}
.loc 1 801 7
setp.ne.u64 %r766,%r765,0;
@ %r766 bra $L97;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L97:
.loc 1 803 4
ld.u64 %r769,[%frame+8];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r769;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 804 7
st.u64 [%frame+8],%r765;
$L95:
.loc 1 806 6
setp.gt.s32 %r770,%r213,0;
@ %r770 bra $L98;
$L101:
.loc 1 811 6
@ ! %r1041 bra $L100;
bra $L99;
$L98:
.loc 1 807 9
ld.u64 %r775,[%frame+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r775;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r213;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r776,[%value_in];
}
mov.u64 %r326,%r776;
.loc 1 807 7
st.u64 [%frame+8],%r326;
.loc 1 808 7
setp.eq.u64 %r777,%r326,0;
@ ! %r777 bra $L101;
bra $L88;
$L99:
.loc 1 812 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r720;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r353;
call (%value_in),__pow5mult,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r781,[%value_in];
}
mov.u64 %r235,%r781;
.loc 1 813 7
setp.ne.u64 %r782,%r235,0;
@ %r782 bra $L100;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L100:
.loc 1 816 6
setp.le.s32 %r783,%r216,0;
@ %r783 bra $L102;
.loc 1 817 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r235;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r216;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r787,[%value_in];
}
mov.u64 %r235,%r787;
.loc 1 818 7
setp.ne.u64 %r788,%r235,0;
@ %r788 bra $L102;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L102:
.loc 1 821 6
setp.le.s32 %r789,%r212,0;
@ %r789 bra $L103;
.loc 1 822 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r212;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r793,[%value_in];
}
mov.u64 %r236,%r793;
.loc 1 823 7
setp.ne.u64 %r794,%r236,0;
@ %r794 bra $L103;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L103:
.loc 1 826 11
ld.u64 %r798,[%frame+8];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r798;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r235;
call (%value_in),__mdiff,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r799,[%value_in];
}
mov.u64 %r237,%r799;
.loc 1 827 6
setp.ne.u64 %r800,%r237,0;
@ %r800 bra $L104;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L104:
.loc 1 829 9
ld.u32 %r281,[%r799+16];
.loc 1 830 16
mov.u32 %r801,0;
st.u32 [%r799+16],%r801;
.loc 1 831 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r237;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r804,[%value_in];
}
.loc 1 925 6
setp.ge.s32 %r805,%r804,0;
@ %r805 bra $L105;
.loc 1 929 7
setp.ne.u32 %r806,%r281,0;
@ %r806 bra $L106;
.loc 1 929 28
mov.b64 %r808,%r336;
and.b64 %r807,%r808,4503599627370495;
setp.eq.u64 %r809,%r807,0;
@ %r809 bra $L107;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
setp.eq.u32 %r1034,%r130,0;
bra $L108;
$L107:
.loc 1 932 9
shr.u64 %r1030,%r356,32;
.loc 1 932 20
cvt.u32.u64 %r812,%r1030;
and.b32 %r811,%r812,2146435072;
.loc 1 932 5
setp.gt.u32 %r813,%r811,112197632;
@ %r813 bra $L109;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
setp.eq.u32 %r1034,%r130,0;
bra $L108;
$L109:
.loc 1 944 7
ld.u32 %r814,[%r237+24];
setp.ne.u32 %r815,%r814,0;
@ %r815 bra $L110;
.loc 1 944 22
ld.u32 %r816,[%r237+20];
setp.gt.s32 %r817,%r816,1;
@ %r817 bra $L110;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
setp.eq.u32 %r1034,%r130,0;
bra $L108;
$L110:
.loc 1 951 12
mov.u32 %r820,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r799;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r820;
call (%value_in),__lshift,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r821,[%value_in];
}
mov.u64 %r237,%r821;
.loc 1 952 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r237;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
call (%value_in),__mcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r824,[%value_in];
}
.loc 1 952 7
setp.gt.s32 %r825,%r824,0;
@ %r825 bra $L111;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
setp.eq.u32 %r1034,%r130,0;
bra $L108;
$L105:
.loc 1 956 6
setp.ne.u32 %r826,%r804,0;
@ %r826 bra $L112;
.loc 1 958 7
setp.eq.u32 %r1029,%r281,0;
@ %r1029 bra $L113;
.loc 1 959 10
shr.u64 %r828,%r356,32;
cvt.u32.u64 %r168,%r828;
.loc 1 959 21
and.b32 %r829,%r168,1048575;
.loc 1 959 8
setp.ne.u32 %r830,%r829,1048575;
@ ! %r830 bra $L308;
setp.eq.u32 %r1034,%r130,0;
bra $L114;
$L308:
.loc 1 960 10
cvt.u32.u64 %r170,%r356;
.loc 1 963 59
setp.eq.u32 %r1034,%r130,0;
@ %r1034 bra $L177;
.loc 1 962 17
and.b32 %r290,%r168,2146435072;
.loc 1 962 11
setp.gt.u32 %r832,%r290,111149056;
@ %r832 bra $L178;
.loc 1 963 43
shr.u32 %r833,%r290,20;
.loc 1 963 40
mov.u32 %r835,107;
sub.u32 %r834,%r835,%r833;
.loc 1 963 59
mov.u32 %r836,-1;
shl.b32 %r240,%r836,%r834;
bra $L115;
$L177:
mov.u32 %r240,-1;
bra $L115;
$L178:
mov.u32 %r240,-1;
$L115:
.loc 1 960 6
setp.ne.u32 %r837,%r170,%r240;
@ %r837 bra $L114;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
.loc 1 967 9
mov.b64 %r838,%r336;
setp.eq.u64 %r839,%r838,9218868437227405311;
@ %r839 bra $L88;
.loc 1 969 31
and.b32 %r840,%r168,2146435072;
.loc 1 970 7
add.u32 %r841,%r840,1048576;
.loc 1 969 17
cvt.u64.u32 %r842,%r841;
.loc 1 976 17
shl.b64 %r356,%r842,32;
.loc 1 1262 17
mov.b64 %r336,%r356;
.loc 1 981 6
bra $L108;
$L113:
.loc 1 984 40
mov.b64 %r848,%r336;
and.b64 %r847,%r848,4503599627370495;
.loc 1 984 12
setp.ne.u64 %r849,%r847,0;
@ ! %r849 bra $L309;
setp.eq.u32 %r1034,%r130,0;
bra $L114;
$L309:
shr.u64 %r1030,%r356,32;
$L111:
.loc 1 1102 7
cvt.u32.u64 %r332,%r1030;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
mov.u64 %r1033,%r326;
.loc 1 1002 8
setp.eq.u32 %r1034,%r130,0;
@ ! %r1034 bra $L310;
and.b32 %r1032,%r332,2146435072;
bra $L116;
$L310:
.loc 1 1003 8
and.b32 %r1032,%r332,2146435072;
.loc 1 1004 9
setp.gt.s32 %r852,%r1032,112197632;
@ %r852 bra $L116;
.loc 1 1005 10
setp.gt.s32 %r853,%r1032,57671680;
@ %r853 bra $L117;
bra $L118;
$L116:
.loc 1 1014 33
add.u32 %r855,%r1032,-1048576;
.loc 1 1016 20
or.b32 %r856,%r855,1048575;
.loc 1 1016 16
cvt.u64.u32 %r857,%r856;
shl.b64 %r858,%r857,32;
.loc 1 1018 16
or.b64 %r356,%r858,4294967295;
.loc 1 1262 17
mov.b64 %r336,%r356;
.loc 1 1023 5
bra $L108;
$L114:
.loc 1 1028 7
setp.eq.u32 %r862,%r239,0;
@ %r862 bra $L119;
.loc 1 1029 11
shr.u64 %r863,%r356,32;
cvt.u32.u64 %r182,%r863;
.loc 1 1029 22
and.b32 %r864,%r182,%r239;
.loc 1 1029 8
setp.ne.u32 %r865,%r864,0;
@ %r865 bra $L120;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L108;
$L119:
.loc 1 1032 26
cvt.u32.u64 %r867,%r356;
and.b32 %r866,%r238,%r867;
.loc 1 1032 12
setp.ne.u32 %r868,%r866,0;
@ %r868 bra $L121;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L108;
$L121:
.loc 1 1102 7
shr.u64 %r869,%r356,32;
cvt.u32.u64 %r182,%r869;
$L120:
.loc 1 1039 7
@ %r1029 bra $L122;
.loc 1 191 14
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r336;
call (%value_in),__ulp,(%out_arg1);
ld.param.f64 %r872,[%value_in];
}
mov.f64 %r306,%r872;
.loc 1 192 12
@ %r1034 bra $L123;
.loc 1 192 62
shr.u32 %r874,%r182,20;
and.b32 %r875,%r874,2047;
.loc 1 192 36
mov.u32 %r876,107;
sub.u32 %r310,%r876,%r875;
.loc 1 192 20
setp.le.s32 %r877,%r310,0;
@ %r877 bra $L123;
.loc 1 194 43
shl.b32 %r878,%r310,20;
.loc 1 194 27
add.u32 %r879,%r878,1072693248;
.loc 1 194 19
cvt.u64.u32 %r880,%r879;
.loc 1 196 19
shl.b64 %r884,%r880,32;
.loc 1 198 19
mov.b64 %r885,%r884;
mul.f64 %r306,%r306,%r885;
$L123:
.loc 1 1041 14
add.f64 %r336,%r336,%r306;
mov.b64 %r356,%r336;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L108;
$L122:
.loc 1 191 14
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r336;
call (%value_in),__ulp,(%out_arg1);
ld.param.f64 %r887,[%value_in];
}
mov.f64 %r66,%r887;
.loc 1 192 12
@ %r1034 bra $L124;
.loc 1 192 62
shr.u32 %r889,%r182,20;
and.b32 %r890,%r889,2047;
.loc 1 192 36
mov.u32 %r891,107;
sub.u32 %r319,%r891,%r890;
.loc 1 192 20
setp.le.s32 %r892,%r319,0;
@ %r892 bra $L125;
.loc 1 194 43
shl.b32 %r893,%r319,20;
.loc 1 194 27
add.u32 %r894,%r893,1072693248;
.loc 1 194 19
cvt.u64.u32 %r895,%r894;
.loc 1 196 19
shl.b64 %r899,%r895,32;
.loc 1 198 19
mov.b64 %r900,%r899;
mul.f64 %r66,%r66,%r900;
bra $L125;
$L112:
.loc 1 1063 15
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r799;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
call (%value_in),__ratio,(%out_arg1,%out_arg2);
ld.param.f64 %r903,[%value_in];
}
.loc 1 1063 6
setp.le.f64 %r904,%r903,0d4000000000000000;
@ ! %r904 bra $L311;
.loc 1 1064 7
setp.eq.u32 %r905,%r281,0;
@ %r905 bra $L128;
.loc 1 1065 24
mov.u64 %r355,4607182418800017408;
.loc 1 1065 10
mov.f64 %r229,0d3ff0000000000000;
bra $L129;
$L128:
mov.b64 %r38,%r336;
.loc 1 1066 24
and.b64 %r906,%r38,4503599627370495;
.loc 1 1066 12
setp.eq.u64 %r907,%r906,0;
@ %r907 bra $L130;
.loc 1 1068 8
setp.eq.u64 %r908,%r38,1;
@ ! %r908 bra $L312;
ld.u64 %r1033,[%frame+8];
bra $L118;
$L312:
.loc 1 1072 17
mov.u64 %r355,-4616189618054758400;
.loc 1 1071 10
mov.f64 %r229,0d3ff0000000000000;
bra $L129;
$L130:
.loc 1 1078 8
setp.lt.f64 %r909,%r903,0d3ff0000000000000;
@ %r909 bra $L179;
.loc 1 1081 11
mul.f64 %r229,%r903,0d3fe0000000000000;
.loc 1 1082 19
neg.f64 %r334,%r229;
bra $L131;
$L179:
mov.f64 %r334,0dbfe0000000000000;
.loc 1 1079 11
mov.f64 %r229,0d3fe0000000000000;
$L131:
.loc 1 1082 17
mov.b64 %r355,%r334;
bra $L129;
$L311:
.loc 1 1086 9
mul.f64 %r229,%r903,0d3fe0000000000000;
.loc 1 1087 31
setp.ne.u32 %r910,%r281,0;
@ %r910 bra $L180;
neg.f64 %r241,%r229;
bra $L132;
$L180:
mov.f64 %r241,%r229;
$L132:
.loc 1 1087 16
mov.b64 %r355,%r241;
$L129:
.loc 1 1102 7
shr.u64 %r911,%r356,32;
cvt.u32.u64 %r188,%r911;
.loc 1 1102 5
and.b32 %r285,%r188,2146435072;
.loc 1 1106 6
setp.ne.u32 %r912,%r285,2145386496;
@ %r912 bra $L133;
.loc 1 1108 15
add.u32 %r913,%r188,-55574528;
cvt.u64.u32 %r914,%r913;
shl.b64 %r915,%r914,32;
and.b64 %r916,%r356,4294967295;
or.b64 %r356,%r916,%r915;
.loc 1 1109 10
mov.b64 %r190,%r355;
.loc 1 1109 24
mov.b64 %r191,%r356;
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r191;
call (%value_in),__ulp,(%out_arg1);
ld.param.f64 %r919,[%value_in];
}
.loc 1 1110 13
fma.rn.f64 %r193,%r190,%r919,%r191;
mov.b64 %r356,%r193;
shr.u64 %r921,%r356,32;
cvt.u32.u64 %r51,%r921;
.loc 1 1111 20
and.b32 %r922,%r51,2146435072;
.loc 1 1111 7
setp.le.u32 %r923,%r922,2090860543;
@ %r923 bra $L134;
.loc 1 1113 8
mov.b64 %r924,%r336;
setp.ne.u64 %r925,%r924,9218868437227405311;
@ %r925 bra $L135;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L88;
$L135:
.loc 1 1117 16
mov.u64 %r356,9218868437227405311;
.loc 1 1119 5
bra $L136;
$L134:
.loc 1 1122 16
add.u32 %r333,%r51,55574528;
cvt.u64.u32 %r926,%r333;
shl.b64 %r927,%r926,32;
and.b64 %r928,%r356,4294967295;
or.b64 %r356,%r928,%r927;
bra $L137;
$L133:
.loc 1 1126 19
set.u32.le.u32 %r934,%r285,111149056;
neg.s32 %r935,%r934;
.loc 1 1126 14
cvt.u16.u32 %r938,%r935;
and.b16 %r936,%r1047,%r938;
.loc 1 1126 7
cvt.u32.u16 %r939,%r936;
cvt.u16.u8 %r940,%r939;
setp.eq.u16 %r941,%r940,0;
@ %r941 bra $L138;
.loc 1 1127 8
setp.le.f64 %r942,%r229,0d41dfffffffc00000;
@ ! %r942 bra $L139;
.loc 1 1128 13
cvt.rzi.u32.f64 %r286,%r229;
.loc 1 1130 11
max.u32 %r943,%r286,1;
cvt.rn.f64.u32 %r229,%r943;
.loc 1 1131 33
setp.ne.u32 %r944,%r281,0;
@ %r944 bra $L181;
neg.f64 %r242,%r229;
bra $L141;
$L181:
mov.f64 %r242,%r229;
$L141:
.loc 1 1131 18
mov.b64 %r355,%r242;
$L139:
.loc 1 1133 19
shr.u64 %r945,%r355,32;
cvt.u32.u64 %r947,%r945;
add.u32 %r946,%r947,112197632;
sub.u32 %r948,%r946,%r285;
cvt.u64.u32 %r949,%r948;
shl.b64 %r950,%r949,32;
and.b64 %r951,%r355,4294967295;
or.b64 %r355,%r951,%r950;
$L138:
.loc 1 1135 10
mov.b64 %r201,%r355;
.loc 1 1135 24
{
.param .f64 %value_in;
.param .f64 %out_arg1;
st.param.f64 [%out_arg1],%r336;
call (%value_in),__ulp,(%out_arg1);
ld.param.f64 %r954,[%value_in];
}
.loc 1 1136 13
fma.rn.f64 %r203,%r201,%r954,%r336;
mov.b64 %r356,%r203;
shr.u64 %r1030,%r356,32;
cvt.u32.u64 %r333,%r1030;
$L137:
.loc 1 1186 5
and.b32 %r957,%r333,2146435072;
.loc 1 1191 6
set.u32.eq.u32 %r959,%r957,%r285;
neg.s32 %r960,%r959;
cvt.u16.u32 %r965,%r960;
and.b16 %r964,%r965,%r1044;
cvt.u32.u16 %r967,%r964;
cvt.u16.u8 %r968,%r967;
setp.eq.u16 %r969,%r968,0;
@ %r969 bra $L136;
.loc 1 1199 14
cvt.rzi.s64.f64 %r970,%r229;
.loc 1 1203 9
cvt.rn.f64.s64 %r204,%r970;
sub.f64 %r289,%r229,%r204;
.loc 1 1205 7
setp.ne.u32 %r971,%r281,0;
@ %r971 bra $L142;
.loc 1 1205 28
and.b64 %r972,%r356,4503599627370495;
setp.eq.u64 %r973,%r972,0;
@ %r973 bra $L143;
$L142:
.loc 1 1206 8
setp.lt.f64 %r974,%r289,0d3fdfffff94a03595;
@ ! %r974 bra $L313;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L146;
$L313:
.loc 1 1206 25
setp.gt.f64 %r975,%r289,0d3fe0000035afe535;
@ ! %r975 bra $L136;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L146;
$L143:
.loc 1 1209 12
setp.lt.f64 %r976,%r289,0d3fcfffff94a03595;
@ ! %r976 bra $L136;
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L146;
$L136:
.loc 1 1214 3
ld.u64 %r979,[%frame+8];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r979;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1215 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r235;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1216 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1217 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r799;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 725 6
bra $L149;
$L106:
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
setp.eq.u32 %r1034,%r130,0;
$L108:
.loc 1 1233 5
@ %r1034 bra $L146;
$L117:
.loc 1 1238 12
mul.f64 %r209,%r336,0d3950000000000000;
mov.b64 %r356,%r209;
.loc 1 1241 6
setp.ne.u64 %r988,%r356,0;
@ %r988 bra $L146;
.loc 1 1242 16
mov.u32 %r989,34;
st.u32 [%r360],%r989;
$L146:
.loc 1 1254 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r326;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1255 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r235;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1256 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r236;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1257 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r713;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1258 2
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r360;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r237;
call _Bfree,(%out_arg1,%out_arg2);
}
.loc 1 1262 17
mov.b64 %r359,%r356;
bra $L22;
$L165:
mov.f64 %r359,0d0000000000000000;
$L22:
.loc 1 1260 5
setp.eq.u64 %r1000,%r362,0;
@ %r1000 bra $L150;
.loc 1 1261 7
ld.u64 %r1001,[%frame+16];
st.u64 [%r362],%r1001;
$L150:
.loc 1 1262 26
setp.eq.u32 %r1002,%r227,0;
@ %r1002 bra $L1;
neg.f64 %r359,%r359;
bra $L1;
$L164:
.loc 1 1260 5
mov.f64 %r359,0d0000000000000000;
.loc 1 1262 26
bra $L1;
$L87:
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
$L88:
.loc 1 588 17
mov.u32 %r1004,34;
st.u32 [%r360],%r1004;
.loc 1 610 16
mov.u64 %r356,9218868437227405312;
bra $L146;
$L118:
.loc 1 693 15
mov.u64 %r356,0;
.loc 1 695 18
mov.u32 %r1005,34;
st.u32 [%r360],%r1005;
.loc 1 1254 2
mov.u64 %r326,%r1033;
bra $L146;
$L125:
.loc 1 1048 14
sub.f64 %r336,%r336,%r66;
.loc 1 1053 8
setp.eq.f64 %r1006,%r336,0d0000000000000000;
@ ! %r1006 bra $L314;
ld.u64 %r1033,[%frame+8];
bra $L118;
$L314:
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L117;
$L124:
.loc 1 1048 14
sub.f64 %r195,%r336,%r887;
mov.b64 %r356,%r195;
.loc 1 1053 8
setp.eq.f64 %r1007,%r195,0d0000000000000000;
@ ! %r1007 bra $L315;
ld.u64 %r1033,[%frame+8];
bra $L118;
$L315:
.loc 1 1254 2
ld.u64 %r326,[%frame+8];
bra $L146;
$L64:
.loc 1 557 11
sub.u32 %r1008,%r354,%r260;
.loc 1 557 5
add.u32 %r263,%r1008,%r258;
bra $L152;
$L155:
.loc 1 350 11
ld.u64 %r1009,[%frame+16];
add.u64 %r329,%r1009,%r344;
st.u64 [%frame+16],%r329;
.loc 1 350 5
ld.s8 %r219,[%r329];
.loc 1 352 4
setp.eq.u32 %r1010,%r219,48;
@ %r1010 bra $L153;
.loc 1 270 18
mov.u32 %r154,%r1014;
bra $L154;
$L24:
.loc 1 347 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r340;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r246;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r344;
call (%value_in),strncmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1014,[%value_in];
}
mov.u32 %r346,%r1014;
.loc 1 347 5
setp.eq.u32 %r1015,%r346,0;
@ %r1015 bra $L155;
.loc 1 341 22
mov.u32 %r219,%r24;
.loc 1 341 9
mov.u32 %r346,0;
.loc 1 340 8
mov.u32 %r233,%r346;
.loc 1 340 4
mov.u32 %r230,%r346;
.loc 1 270 18
mov.u32 %r154,%r346;
.loc 1 341 14
mov.u32 %r225,%r346;
.loc 1 341 9
mov.u32 %r252,%r346;
.loc 1 270 26
mov.u32 %r244,%r346;
bra $L30;
$L157:
.loc 1 350 11
ld.u64 %r1016,[%frame+16];
add.u64 %r348,%r1016,%r344;
st.u64 [%frame+16],%r348;
.loc 1 350 5
ld.s8 %r219,[%r348];
.loc 1 341 50
mov.u32 %r346,%r252;
.loc 1 341 14
mov.u32 %r225,%r154;
bra $L156;
$L306:
.loc 1 347 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r43;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r246;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r344;
call (%value_in),strncmp,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1020,[%value_in];
}
mov.u32 %r154,%r1020;
.loc 1 347 5
setp.eq.u32 %r1021,%r1020,0;
@ %r1021 bra $L157;
.loc 1 382 5
cvt.u16.u32 %r1023,%r24;
and.b16 %r1022,%r1023,-33;
cvt.u32.u16 %r1026,%r1022;
cvt.s32.s8 %r1025,%r1026;
cvt.u16.u32 %r1024,%r1025;
setp.eq.u16 %r1027,%r1024,69;
@ %r1027 bra $L182;
.loc 1 341 50
mov.u32 %r354,%r252;
.loc 1 341 14
mov.u32 %r225,0;
.loc 1 381 4
mov.u32 %r220,%r225;
bra $L49;
$L1:
.loc 1 1263 1
mov.f64 %value,%r359;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtod_r
.visible .func (.param .f64 %value_out) _strtod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .f64 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 1270 10
cvta.global.u64 %r29,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r30,[%value_in];
}
.loc 1 1271 1
mov.f64 %value,%r30;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtod_l
.visible .func (.param .f64 %value_out) strtod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .f64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 1278 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r32,[%value_in];
}
.loc 1 1279 1
mov.f64 %value,%r32;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtod
.visible .func (.param .f64 %value_out) strtod (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .f64 %r31;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 1284 10
ld.global.u64 %r30,[_impure_ptr];
cvta.global.u64 %r29,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r31,[%value_in];
}
.loc 1 1285 1
mov.f64 %value,%r31;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtof_l
.visible .func (.param .f32 %value_out) strtof_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .f32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r37;
.reg .f64 %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u32 %r43;
.reg .pred %r44;
.reg .u64 %r45;
.reg .f32 %r46;
.reg .u64 %r47;
.reg .f32 %r48;
.reg .f32 %r49;
.reg .pred %r50;
.reg .f64 %r51;
.reg .pred %r52;
.reg .u64 %r53;
.reg .u32 %r54;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
mov.u64 %r32,%ar2;
.loc 1 1290 16
ld.global.u64 %r37,[_impure_ptr];
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r32;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r38,[%value_in];
}
.loc 1 1291 6
setp.num.f64 %r39,%r38,%r38;
@ %r39 bra $L320;
.loc 1 1292 12
mov.b64 %r40,%r38;
shr.u64 %r41,%r40,63;
cvt.u32.u64 %r43,%r41;
.loc 1 1292 39
setp.eq.u32 %r44,%r43,0;
@ %r44 bra $L321;
.loc 1 1292 29
cvta.const.u64 %r45,$LC3;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r46,[%value_in];
}
.loc 1 1292 39
neg.f32 %r29,%r46;
bra $L319;
$L321:
.loc 1 1292 41
cvta.const.u64 %r47,$LC3;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r47;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r48,[%value_in];
}
mov.f32 %r29,%r48;
bra $L319;
$L320:
.loc 1 1293 9
cvt.rn.f32.f64 %r29,%r38;
.loc 1 1295 7
abs.f32 %r49,%r29;
.loc 1 1295 6
setp.leu.f32 %r50,%r49,0f7f7fffff;
@ %r50 bra $L319;
.loc 1 1295 26
abs.f64 %r51,%r38;
.loc 1 1295 22
setp.leu.f64 %r52,%r51,0d7fefffffffffffff;
@ ! %r52 bra $L319;
.loc 1 1296 20
ld.global.u64 %r53,[_impure_ptr];
mov.u32 %r54,34;
st.u32 [%r53],%r54;
$L319:
.loc 1 1299 1
mov.f32 %value,%r29;
st.param.f32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtof
.visible .func (.param .f32 %value_out) strtof (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .f32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .f64 %r37;
.reg .pred %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u64 %r44;
.reg .f32 %r45;
.reg .u64 %r46;
.reg .f32 %r47;
.reg .f32 %r48;
.reg .pred %r49;
.reg .f64 %r50;
.reg .pred %r51;
.reg .u64 %r52;
.reg .u32 %r53;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 1305 16
ld.global.u64 %r36,[_impure_ptr];
cvta.global.u64 %r35,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r35;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r37,[%value_in];
}
.loc 1 1306 6
setp.num.f64 %r38,%r37,%r37;
@ %r38 bra $L326;
.loc 1 1307 12
mov.b64 %r39,%r37;
shr.u64 %r40,%r39,63;
cvt.u32.u64 %r42,%r40;
.loc 1 1307 39
setp.eq.u32 %r43,%r42,0;
@ %r43 bra $L327;
.loc 1 1307 29
cvta.const.u64 %r44,$LC3;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r44;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r45,[%value_in];
}
.loc 1 1307 39
neg.f32 %r29,%r45;
bra $L325;
$L327:
.loc 1 1307 41
cvta.const.u64 %r46,$LC3;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r47,[%value_in];
}
mov.f32 %r29,%r47;
bra $L325;
$L326:
.loc 1 1308 9
cvt.rn.f32.f64 %r29,%r37;
.loc 1 1310 7
abs.f32 %r48,%r29;
.loc 1 1310 6
setp.leu.f32 %r49,%r48,0f7f7fffff;
@ %r49 bra $L325;
.loc 1 1310 26
abs.f64 %r50,%r37;
.loc 1 1310 22
setp.leu.f64 %r51,%r50,0d7fefffffffffffff;
@ ! %r51 bra $L325;
.loc 1 1311 20
ld.global.u64 %r52,[_impure_ptr];
mov.u32 %r53,34;
st.u32 [%r52],%r53;
$L325:
.loc 1 1314 1
mov.f32 %value,%r29;
st.param.f32 [%value_out],%value;
ret;
}
lib_a-strtodg.o/1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

/1368           1612277262  0     0     100666  11323     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _strtoimax_l$constprop$0
.func (.param .u64 %value_out) _strtoimax_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtoimax.c"
// BEGIN GLOBAL FUNCTION DECL: _strtoimax_r
.visible .func (.param .u64 %value_out) _strtoimax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoimax_l
.visible .func (.param .u64 %value_out) strtoimax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoimax
.visible .func (.param .u64 %value_out) strtoimax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN FUNCTION DEF: _strtoimax_l$constprop$0
.func (.param .u64 %value_out) _strtoimax_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u32 %r35;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u32 %r43;
.reg .u32 %r49;
.reg .u64 %r51;
.reg .u64 %r57;
.reg .u64 %r61;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u32 %r69;
.reg .u64 %r70;
.reg .u32 %r71;
.reg .u64 %r73;
.reg .u16 %r75;
.reg .u16 %r76;
.reg .u32 %r77;
.reg .u16 %r78;
.reg .u32 %r79;
.reg .pred %r80;
.reg .u16 %r81;
.reg .pred %r82;
.reg .pred %r84;
.reg .u32 %r85;
.reg .pred %r86;
.reg .u16 %r87;
.reg .pred %r88;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u16 %r92;
.reg .u32 %r93;
.reg .u32 %r94;
.reg .pred %r95;
.reg .pred %r96;
.reg .u32 %r97;
.reg .pred %r98;
.reg .u32 %r99;
.reg .pred %r100;
.reg .u64 %r101;
.reg .u64 %r103;
.reg .u32 %r104;
.reg .u16 %r105;
.reg .u16 %r106;
.reg .u32 %r107;
.reg .u16 %r108;
.reg .pred %r109;
.reg .u16 %r111;
.reg .u16 %r113;
.reg .u32 %r114;
.reg .pred %r115;
.reg .u16 %r116;
.reg .u32 %r118;
.reg .u16 %r119;
.reg .u16 %r121;
.reg .u32 %r122;
.reg .pred %r123;
.reg .u16 %r124;
.reg .u32 %r126;
.reg .pred %r127;
.reg .u32 %r129;
.reg .u32 %r131;
.reg .u32 %r132;
.reg .u16 %r134;
.reg .u16 %r135;
.reg .u16 %r136;
.reg .u32 %r137;
.reg .u16 %r138;
.reg .pred %r139;
.reg .u32 %r141;
.reg .u32 %r142;
.reg .u32 %r144;
.reg .u32 %r145;
.reg .u16 %r146;
.reg .u16 %r147;
.reg .u16 %r148;
.reg .u32 %r149;
.reg .u16 %r150;
.reg .pred %r151;
.reg .u64 %r152;
.reg .u32 %r153;
.reg .pred %r154;
.reg .u32 %r155;
.reg .pred %r156;
.reg .u32 %r157;
.reg .pred %r158;
.reg .pred %r159;
.reg .pred %r161;
.reg .pred %r162;
.reg .u64 %r163;
.reg .u32 %r164;
.reg .u32 %r165;
.reg .u16 %r166;
mov.u64 %r66,%ar0;
mov.u64 %r67,%ar1;
mov.u64 %r68,%ar2;
mov.u32 %r69,%ar3;
mov.u64 %r61,%r67;
cvta.const.u64 %r163,_ctype_+1;
$L2:
mov.u64 %r22,%r61;
add.u64 %r31,%r61,1;
mov.u64 %r61,%r31;
.loc 1 75 5
ld.s8 %r30,[%r22];
.loc 1 76 11
cvt.u32.u32 %r71,%r30;
cvt.s64.s8 %r70,%r71;
add.u64 %r73,%r163,%r70;
.loc 1 76 2
ld.u8 %r166,[%r73];
mov.u16 %r76,%r166;
and.b16 %r75,%r76,8;
cvt.u32.u16 %r77,%r75;
cvt.s32.s8 %r79,%r77;
cvt.u16.u32 %r78,%r79;
setp.ne.u16 %r80,%r78,0;
@ %r80 bra $L2;
.loc 1 77 5
cvt.u16.u32 %r81,%r30;
setp.ne.u16 %r82,%r81,45;
@ %r82 bra $L3;
.loc 1 79 5
ld.s8 %r30,[%r31];
.loc 1 79 9
add.u64 %r31,%r22,2;
.loc 1 78 7
mov.u32 %r35,1;
bra $L4;
$L3:
.loc 1 82 6
setp.ne.u16 %r84,%r81,43;
@ %r84 bra $L23;
.loc 1 83 6
ld.s8 %r30,[%r61];
.loc 1 83 10
add.u64 %r31,%r22,2;
.loc 1 81 7
mov.u32 %r35,0;
bra $L4;
$L23:
mov.u32 %r35,0;
$L4:
.loc 1 85 12
and.b32 %r85,%r69,-17;
.loc 1 85 5
setp.ne.u32 %r86,%r85,0;
@ %r86 bra $L5;
.loc 1 85 32
cvt.u16.u32 %r87,%r30;
setp.ne.u16 %r88,%r87,48;
@ %r88 bra $L6;
.loc 1 86 29
ld.u8 %r166,[%r31];
mov.u16 %r91,%r166;
and.b16 %r90,%r91,-33;
.loc 1 86 15
cvt.u32.u16 %r94,%r90;
cvt.s32.s8 %r93,%r94;
cvt.u16.u32 %r92,%r93;
setp.ne.u16 %r95,%r92,88;
@ %r95 bra $L7;
.loc 1 87 5
ld.s8 %r30,[%r31+1];
.loc 1 88 5
add.u64 %r31,%r31,2;
mov.u64 %r57,16;
.loc 1 89 8
cvt.u32.u64 %r69,%r57;
bra $L8;
$L7:
.loc 1 91 5
setp.eq.u32 %r96,%r69,0;
@ %r96 bra $L24;
$L5:
.loc 1 94 15
add.u32 %r97,%r69,-2;
.loc 1 94 5
setp.gt.u32 %r98,%r97,34;
@ %r98 bra $L9;
.loc 1 116 18
cvt.s64.s32 %r57,%r69;
bra $L8;
$L9:
.loc 1 142 16
mov.u32 %r99,22;
st.u32 [%r66],%r99;
.loc 1 145 5
setp.ne.u64 %r100,%r68,0;
@ %r100 bra $L25;
mov.u64 %r65,%r68;
bra $L1;
$L24:
.loc 1 91 5
mov.u64 %r57,8;
.loc 1 92 23
cvt.u32.u64 %r69,%r57;
bra $L8;
$L29:
.loc 1 91 5
mov.u64 %r57,10;
.loc 1 92 23
cvt.u32.u64 %r69,%r57;
$L8:
.loc 1 115 40
cvt.s64.s32 %r101,%r35;
add.u64 %r37,%r101,9223372036854775807;
.loc 1 116 18
rem.u64 %r103,%r37,%r57;
.loc 1 116 9
cvt.u32.u64 %r39,%r103;
.loc 1 117 9
div.u64 %r40,%r37,%r57;
mov.u64 %r64,%r31;
.loc 1 67 15
mov.u32 %r49,0;
.loc 1 64 12
mov.u64 %r51,0;
.loc 1 130 8
mov.u32 %r164,-1;
.loc 1 132 8
mov.u32 %r165,1;
$L17:
.loc 1 119 16
cvt.u32.u32 %r104,%r30;
cvt.u16.u8 %r106,%r104;
add.u16 %r105,%r106,-48;
cvt.u32.u16 %r107,%r105;
.loc 1 119 6
cvt.u16.u8 %r108,%r107;
setp.gt.u16 %r109,%r108,9;
@ %r109 bra $L12;
.loc 1 120 6
cvt.s32.s8 %r43,%r107;
bra $L13;
$L12:
.loc 1 121 21
add.u16 %r111,%r106,-65;
.loc 1 121 11
cvt.u32.u16 %r114,%r111;
cvt.u16.u8 %r113,%r114;
setp.gt.u16 %r115,%r113,25;
@ %r115 bra $L14;
.loc 1 122 6
add.u16 %r116,%r106,-55;
cvt.u32.u16 %r118,%r116;
cvt.s32.s8 %r43,%r118;
bra $L13;
$L14:
.loc 1 123 21
add.u16 %r119,%r106,-97;
.loc 1 123 11
cvt.u32.u16 %r122,%r119;
cvt.u16.u8 %r121,%r122;
setp.gt.u16 %r123,%r121,25;
@ %r123 bra $L15;
.loc 1 124 6
add.u16 %r124,%r106,-87;
cvt.u32.u16 %r126,%r124;
cvt.s32.s8 %r43,%r126;
$L13:
.loc 1 127 6
setp.ge.s32 %r127,%r43,%r69;
@ %r127 bra $L15;
.loc 1 129 11
shr.u32 %r129,%r49,31;
.loc 1 129 22
set.u32.lt.u64 %r131,%r40,%r51;
neg.s32 %r132,%r131;
.loc 1 129 15
cvt.u16.u32 %r135,%r129;
cvt.u16.u32 %r136,%r132;
or.b16 %r134,%r135,%r136;
.loc 1 129 6
cvt.u32.u16 %r137,%r134;
cvt.u16.u8 %r138,%r137;
setp.ne.u16 %r139,%r138,0;
@ %r139 bra $L26;
.loc 1 129 31
set.u32.eq.u64 %r141,%r40,%r51;
neg.s32 %r142,%r141;
.loc 1 129 49
set.u32.lt.s32 %r144,%r39,%r43;
neg.s32 %r145,%r144;
cvt.u16.u32 %r147,%r142;
cvt.u16.u32 %r148,%r145;
and.b16 %r146,%r147,%r148;
cvt.u32.u16 %r149,%r146;
cvt.u16.u8 %r150,%r149;
setp.ne.u16 %r151,%r150,0;
@ %r151 bra $L27;
.loc 1 134 8
cvt.u32.u32 %r153,%r43;
cvt.s64.s8 %r152,%r153;
mad.lo.u64 %r51,%r51,%r57,%r152;
.loc 1 132 8
mov.u32 %r49,%r165;
bra $L16;
$L26:
.loc 1 130 8
mov.u32 %r49,%r164;
bra $L16;
$L27:
mov.u32 %r49,%r164;
$L16:
.loc 1 118 14
ld.s8 %r30,[%r64];
add.u64 %r64,%r64,1;
.loc 1 119 6
bra $L17;
$L15:
.loc 1 137 5
setp.ne.u32 %r154,%r49,-1;
@ %r154 bra $L18;
.loc 1 139 16
mov.u32 %r155,34;
st.u32 [%r66],%r155;
bra $L19;
$L18:
.loc 1 140 12
setp.ne.u32 %r156,%r49,0;
@ %r156 bra $L20;
$L21:
.loc 1 142 16
mov.u32 %r157,22;
st.u32 [%r66],%r157;
.loc 1 147 9
mov.u64 %r65,%r51;
.loc 1 145 5
setp.ne.u64 %r158,%r68,0;
@ ! %r158 bra $L1;
bra $L10;
$L20:
.loc 1 143 12
setp.eq.u32 %r159,%r35,0;
@ %r159 bra $L28;
.loc 1 144 7
neg.s64 %r37,%r51;
bra $L19;
$L22:
.loc 1 146 13
add.u64 %r67,%r64,-1;
bra $L10;
$L25:
.loc 1 145 5
mov.u64 %r65,0;
$L10:
.loc 1 146 11
st.u64 [%r68],%r67;
.loc 1 147 9
bra $L1;
$L28:
mov.u64 %r37,%r51;
$L19:
mov.u64 %r65,%r37;
.loc 1 145 5
setp.ne.u64 %r161,%r68,0;
@ %r161 bra $L22;
bra $L1;
$L6:
.loc 1 91 5
setp.eq.u32 %r162,%r69,0;
@ %r162 bra $L29;
bra $L5;
$L1:
.loc 1 148 1
mov.u64 %value,%r65;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtoimax_r
.visible .func (.param .u64 %value_out) _strtoimax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 154 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoimax_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 155 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoimax_l
.visible .func (.param .u64 %value_out) strtoimax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 163 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoimax_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
.loc 1 164 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoimax
.visible .func (.param .u64 %value_out) strtoimax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 169 9
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoimax_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 170 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strtok.o/ 1612277262  0     0     100666  1447      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strtok
.visible .func (.param .u64 %value_out) strtok (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/strtok.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __strtok_r
.extern .func (.param .u64 %value_out) __strtok_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: strtok
.visible .func (.param .u64 %value_out) strtok (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 88 9
ld.global.u64 %r32,[_impure_ptr];
add.u64 %r31,%r32,152;
mov.u32 %r30,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r26;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r31;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r30;
call (%value_in),__strtok_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
.loc 1 89 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

/1387           1612277262  0     0     100666  3803      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __strtok_r
.visible .func (.param .u64 %value_out) __strtok_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/string/strtok_r.c"
// BEGIN GLOBAL FUNCTION DECL: strtok_r
.visible .func (.param .u64 %value_out) strtok_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: __strtok_r
.visible .func (.param .u64 %value_out) __strtok_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r33;
.reg .u64 %r35;
.reg .u64 %r38;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .pred %r47;
.reg .u32 %r49;
.reg .pred %r50;
.reg .pred %r51;
.reg .u64 %r52;
.reg .pred %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .pred %r56;
.reg .pred %r58;
mov.u64 %r41,%ar0;
mov.u64 %r42,%ar1;
mov.u64 %r43,%ar2;
mov.u32 %r44,%ar3;
.loc 1 43 5
setp.ne.u64 %r45,%r41,0;
@ %r45 bra $L2;
.loc 1 43 22
ld.u64 %r41,[%r43];
.loc 1 43 16
setp.eq.u64 %r46,%r41,0;
@ %r46 bra $L11;
$L2:
mov.u64 %r38,%r41;
.loc 1 53 7
setp.ne.u32 %r58,%r44,0;
$L5:
mov.u64 %r40,%r38;
add.u64 %r38,%r38,1;
.loc 1 50 4
ld.s8 %r28,[%r40];
.loc 1 51 2
mov.u64 %r35,%r42;
bra $L4;
$L6:
.loc 1 52 6
add.u64 %r35,%r35,1;
setp.ne.u32 %r47,%r28,%r29;
@ %r47 bra $L4;
.loc 1 53 7
@ %r58 bra $L5;
.loc 1 57 12
st.u64 [%r43],%r38;
.loc 1 58 11
mov.u32 %r49,0;
st.u8 [%r40],%r49;
.loc 1 59 15
bra $L1;
$L4:
.loc 1 51 34
ld.s8 %r29,[%r35];
.loc 1 51 2
setp.ne.u32 %r50,%r29,0;
@ %r50 bra $L6;
.loc 1 64 5
setp.ne.u32 %r51,%r28,0;
@ %r51 bra $L7;
.loc 1 65 10
mov.u64 %r52,0;
st.u64 [%r43],%r52;
.loc 1 66 10
mov.u64 %r40,%r52;
bra $L1;
$L7:
add.u64 %r33,%r38,1;
mov.u64 %r27,%r33;
.loc 1 75 5
ld.s8 %r30,[%r38];
mov.u64 %r22,%r42;
$L10:
.loc 1 78 12
ld.s8 %r31,[%r22];
.loc 1 78 7
setp.ne.u32 %r53,%r30,%r31;
@ %r53 bra $L8;
.loc 1 79 8
setp.eq.u32 %r54,%r30,0;
@ %r54 bra $L12;
.loc 1 82 12
mov.u32 %r55,0;
st.u8 [%r33+-1],%r55;
bra $L9;
$L12:
.loc 1 80 8
mov.u64 %r27,0;
$L9:
.loc 1 83 12
st.u64 [%r43],%r27;
.loc 1 84 12
bra $L1;
$L8:
.loc 1 86 3
add.u64 %r22,%r22,1;
setp.ne.u32 %r56,%r31,0;
@ %r56 bra $L10;
mov.u64 %r38,%r33;
bra $L7;
$L11:
.loc 1 44 10
mov.u64 %r40,%r41;
$L1:
.loc 1 89 1
mov.u64 %value,%r40;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtok_r
.visible .func (.param .u64 %value_out) strtok_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r29;
.reg .u64 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 96 9
mov.u32 %r29,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r29;
call (%value_in),__strtok_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r30,[%value_in];
}
.loc 1 97 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strtol.o/ 1612277262  0     0     100666  12524     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _strtol_l$part$0
.func (.param .u64 %value_out) _strtol_l$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtol.c"
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.visible .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtol_l
.visible .func (.param .u64 %value_out) strtol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtol
.visible .func (.param .u64 %value_out) strtol (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN FUNCTION DEF: _strtol_l$part$0
.func (.param .u64 %value_out) _strtol_l$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u32 %r31;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u32 %r39;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u32 %r45;
.reg .u32 %r48;
.reg .u64 %r50;
.reg .u64 %r60;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .u64 %r72;
.reg .u16 %r74;
.reg .u16 %r75;
.reg .u32 %r76;
.reg .u16 %r77;
.reg .u32 %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .pred %r84;
.reg .u16 %r86;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .u32 %r89;
.reg .pred %r90;
.reg .pred %r91;
.reg .u64 %r93;
.reg .u32 %r94;
.reg .pred %r95;
.reg .u32 %r96;
.reg .pred %r97;
.reg .u32 %r98;
.reg .pred %r99;
.reg .pred %r100;
.reg .u32 %r102;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .u16 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .u32 %r110;
.reg .u16 %r111;
.reg .pred %r112;
.reg .u32 %r114;
.reg .u32 %r115;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u16 %r119;
.reg .u16 %r120;
.reg .u16 %r121;
.reg .u32 %r122;
.reg .u16 %r123;
.reg .pred %r124;
.reg .u64 %r125;
.reg .pred %r126;
.reg .u32 %r127;
.reg .pred %r128;
.reg .pred %r129;
.reg .pred %r130;
.reg .pred %r131;
.reg .pred %r133;
.reg .u64 %r134;
.reg .u32 %r135;
.reg .u32 %r136;
.reg .u16 %r137;
mov.u64 %r65,%ar0;
mov.u64 %r66,%ar1;
mov.u64 %r67,%ar2;
mov.u32 %r68,%ar3;
mov.u64 %r35,%r66;
cvta.const.u64 %r134,_ctype_+1;
$L2:
mov.u64 %r22,%r35;
add.u64 %r36,%r35,1;
mov.u64 %r35,%r36;
.loc 1 150 7
ld.u8 %r23,[%r22];
.loc 1 151 11
cvt.u32.u32 %r70,%r23;
cvt.u64.u8 %r69,%r70;
add.u64 %r72,%r134,%r69;
.loc 1 151 2
ld.u8 %r137,[%r72];
mov.u16 %r75,%r137;
and.b16 %r74,%r75,8;
cvt.u32.u16 %r76,%r74;
cvt.s32.s8 %r78,%r76;
cvt.u16.u32 %r77,%r78;
setp.ne.u16 %r79,%r77,0;
@ %r79 bra $L2;
.loc 1 150 5
mov.u32 %r31,%r23;
.loc 1 152 5
setp.ne.u32 %r80,%r31,45;
@ %r80 bra $L3;
.loc 1 154 5
ld.u8 %r31,[%r36];
.loc 1 154 9
add.u64 %r36,%r22,2;
mov.u64 %r62,-9223372036854775808;
.loc 1 153 7
mov.u32 %r39,1;
bra $L4;
$L3:
.loc 1 155 12
setp.ne.u32 %r81,%r31,43;
@ %r81 bra $L20;
.loc 1 156 5
ld.u8 %r31,[%r35];
.loc 1 156 9
add.u64 %r36,%r22,2;
.loc 1 156 5
mov.u64 %r62,9223372036854775807;
.loc 1 137 15
mov.u32 %r39,0;
bra $L4;
$L20:
mov.u64 %r62,9223372036854775807;
mov.u32 %r39,0;
$L4:
.loc 1 157 12
and.b32 %r82,%r68,-17;
.loc 1 157 5
setp.eq.u32 %r83,%r82,0;
@ %r83 bra $L5;
.loc 1 184 20
cvt.s64.s32 %r63,%r68;
bra $L6;
$L5:
.loc 1 157 32
setp.ne.u32 %r84,%r31,48;
@ %r84 bra $L7;
.loc 1 158 29
ld.u8 %r137,[%r36];
mov.u16 %r87,%r137;
and.b16 %r86,%r87,-33;
.loc 1 158 15
cvt.u32.u16 %r89,%r86;
cvt.u16.u8 %r88,%r89;
setp.ne.u16 %r90,%r88,88;
@ %r90 bra $L8;
.loc 1 159 5
ld.u8 %r31,[%r36+1];
.loc 1 160 5
add.u64 %r36,%r36,2;
mov.u64 %r63,16;
.loc 1 161 8
cvt.u32.u64 %r68,%r63;
bra $L6;
$L8:
.loc 1 163 5
setp.eq.u32 %r91,%r68,0;
@ %r91 bra $L21;
.loc 1 184 20
cvt.s64.s32 %r63,%r68;
bra $L6;
$L21:
.loc 1 163 5
mov.u64 %r63,8;
.loc 1 164 23
cvt.u32.u64 %r68,%r63;
bra $L6;
$L24:
.loc 1 163 5
mov.u64 %r63,10;
.loc 1 164 23
cvt.u32.u64 %r68,%r63;
$L6:
.loc 1 184 18
rem.u64 %r93,%r62,%r63;
.loc 1 184 9
cvt.u32.u64 %r41,%r93;
.loc 1 185 9
div.u64 %r42,%r62,%r63;
mov.u64 %r60,%r36;
.loc 1 186 20
mov.u32 %r48,0;
.loc 1 186 11
mov.u64 %r50,0;
.loc 1 198 8
mov.u32 %r135,-1;
.loc 1 200 8
mov.u32 %r136,1;
$L14:
.loc 1 187 16
add.u32 %r94,%r31,-48;
.loc 1 187 6
setp.gt.u32 %r95,%r94,9;
@ %r95 bra $L9;
.loc 1 188 6
mov.u32 %r45,%r94;
bra $L10;
$L9:
.loc 1 189 21
add.u32 %r96,%r31,-65;
.loc 1 189 11
setp.gt.u32 %r97,%r96,25;
@ %r97 bra $L11;
.loc 1 190 6
add.u32 %r45,%r31,-55;
bra $L10;
$L11:
.loc 1 191 21
add.u32 %r98,%r31,-97;
.loc 1 191 11
setp.gt.u32 %r99,%r98,25;
@ %r99 bra $L12;
.loc 1 192 6
add.u32 %r45,%r31,-87;
$L10:
.loc 1 195 6
setp.le.s32 %r100,%r68,%r45;
@ %r100 bra $L12;
.loc 1 197 11
shr.u32 %r102,%r48,31;
.loc 1 197 22
set.u32.lt.u64 %r104,%r42,%r50;
neg.s32 %r105,%r104;
.loc 1 197 15
cvt.u16.u32 %r108,%r102;
cvt.u16.u32 %r109,%r105;
or.b16 %r107,%r108,%r109;
.loc 1 197 6
cvt.u32.u16 %r110,%r107;
cvt.u16.u8 %r111,%r110;
setp.ne.u16 %r112,%r111,0;
@ %r112 bra $L22;
.loc 1 197 39
set.u32.eq.u64 %r114,%r42,%r50;
neg.s32 %r115,%r114;
.loc 1 197 54
set.u32.lt.s32 %r117,%r41,%r45;
neg.s32 %r118,%r117;
.loc 1 197 49
cvt.u16.u32 %r120,%r115;
cvt.u16.u32 %r121,%r118;
and.b16 %r119,%r120,%r121;
.loc 1 197 31
cvt.u32.u16 %r122,%r119;
cvt.u16.u8 %r123,%r122;
setp.ne.u16 %r124,%r123,0;
@ %r124 bra $L23;
.loc 1 202 8
cvt.s64.s32 %r125,%r45;
mad.lo.u64 %r50,%r50,%r63,%r125;
.loc 1 200 8
mov.u32 %r48,%r136;
bra $L13;
$L22:
.loc 1 198 8
mov.u32 %r48,%r135;
bra $L13;
$L23:
mov.u32 %r48,%r135;
$L13:
.loc 1 186 28
ld.u8 %r31,[%r60];
add.u64 %r60,%r60,1;
.loc 1 187 6
bra $L14;
$L12:
.loc 1 205 5
setp.ne.u32 %r126,%r48,-1;
@ %r126 bra $L15;
.loc 1 207 16
mov.u32 %r127,34;
st.u32 [%r65],%r127;
.loc 1 210 5
setp.ne.u64 %r128,%r67,0;
@ %r128 bra $L16;
.loc 1 206 7
mov.u64 %r50,%r62;
bra $L28;
$L15:
.loc 1 208 12
setp.eq.u32 %r129,%r39,0;
@ %r129 bra $L18;
.loc 1 209 7
neg.s64 %r50,%r50;
$L18:
.loc 1 210 5
setp.eq.u64 %r130,%r67,0;
@ %r130 bra $L28;
.loc 1 211 13
setp.eq.u32 %r131,%r48,0;
@ %r131 bra $L19;
mov.u64 %r62,%r50;
$L16:
add.u64 %r66,%r60,-1;
mov.u64 %r50,%r62;
$L19:
.loc 1 211 11
st.u64 [%r67],%r66;
bra $L28;
$L7:
.loc 1 163 5
setp.eq.u32 %r133,%r68,0;
@ %r133 bra $L24;
.loc 1 184 20
cvt.s64.s32 %r63,%r68;
bra $L6;
$L28:
.loc 1 213 1
mov.u64 %value,%r50;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtol_r
.visible .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .pred %r43;
.reg .u64 %r44;
.reg .u32 %r45;
.reg .u64 %r50;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u64 %r30,%ar2;
mov.u32 %r31,%ar3;
.loc 1 139 28
set.u32.gt.u32 %r33,%r31,36;
neg.s32 %r34,%r33;
.loc 1 139 23
set.u32.eq.u32 %r36,%r31,1;
neg.s32 %r37,%r36;
.loc 1 139 28
cvt.u16.u32 %r39,%r34;
cvt.u16.u32 %r40,%r37;
or.b16 %r38,%r39,%r40;
cvt.u32.u16 %r41,%r38;
cvt.u16.u8 %r42,%r41;
setp.eq.u16 %r43,%r42,0;
@ %r43 bra $L37;
.loc 1 140 3
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r44,[%value_in];
}
.loc 1 140 9
mov.u32 %r45,22;
st.u32 [%r44],%r45;
.loc 1 141 10
mov.u64 %r27,0;
bra $L36;
$L37:
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r31;
call (%value_in),_strtol_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r50,[%value_in];
}
mov.u64 %r27,%r50;
$L36:
.loc 1 222 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtol_l
.visible .func (.param .u64 %value_out) strtol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u32 %r42;
.reg .u16 %r43;
.reg .pred %r44;
.reg .u64 %r45;
.reg .u32 %r46;
.reg .u64 %r51;
.reg .u64 %r52;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u32 %r31,%ar2;
.loc 1 139 28
set.u32.gt.u32 %r34,%r31,36;
neg.s32 %r35,%r34;
.loc 1 139 23
set.u32.eq.u32 %r37,%r31,1;
neg.s32 %r38,%r37;
.loc 1 139 28
cvt.u16.u32 %r40,%r35;
cvt.u16.u32 %r41,%r38;
or.b16 %r39,%r40,%r41;
cvt.u32.u16 %r42,%r39;
cvt.u16.u8 %r43,%r42;
setp.eq.u16 %r44,%r43,0;
@ %r44 bra $L40;
.loc 1 140 3
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r45,[%value_in];
}
.loc 1 140 9
mov.u32 %r46,22;
st.u32 [%r45],%r46;
.loc 1 141 10
mov.u64 %r28,0;
bra $L39;
$L40:
ld.global.u64 %r51,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r51;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r31;
call (%value_in),_strtol_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r52,[%value_in];
}
mov.u64 %r28,%r52;
$L39:
.loc 1 231 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtol
.visible .func (.param .u64 %value_out) strtol (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r31;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .pred %r43;
.reg .u64 %r44;
.reg .u32 %r45;
.reg .u64 %r50;
.reg .u64 %r51;
mov.u64 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u32 %r31,%ar2;
.loc 1 139 28
set.u32.gt.u32 %r33,%r31,36;
neg.s32 %r34,%r33;
.loc 1 139 23
set.u32.eq.u32 %r36,%r31,1;
neg.s32 %r37,%r36;
.loc 1 139 28
cvt.u16.u32 %r39,%r34;
cvt.u16.u32 %r40,%r37;
or.b16 %r38,%r39,%r40;
cvt.u32.u16 %r41,%r38;
cvt.u16.u8 %r42,%r41;
setp.eq.u16 %r43,%r42,0;
@ %r43 bra $L43;
.loc 1 140 3
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r44,[%value_in];
}
.loc 1 140 9
mov.u32 %r45,22;
st.u32 [%r44],%r45;
.loc 1 141 10
mov.u64 %r28,0;
bra $L42;
$L43:
ld.global.u64 %r50,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r50;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r31;
call (%value_in),_strtol_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r51,[%value_in];
}
mov.u64 %r28,%r51;
$L42:
.loc 1 239 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strtold.o/1612277262  0     0     100666  3749      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _strtold_r
.visible .func (.param .f64 %value_out) _strtold_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/strtold.c"
// BEGIN GLOBAL FUNCTION DECL: strtold_l
.visible .func (.param .f64 %value_out) strtold_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strtold
.visible .func (.param .f64 %value_out) strtold (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: _strtod_l
.extern .func (.param .f64 %value_out) _strtod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: _strtold_r
.visible .func (.param .f64 %value_out) _strtold_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .f64 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 67 10
cvta.global.u64 %r29,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r30,[%value_in];
}
.loc 1 74 1
mov.f64 %value,%r30;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtold_l
.visible .func (.param .f64 %value_out) strtold_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .f64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 81 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r32,[%value_in];
}
.loc 1 88 1
mov.f64 %value,%r32;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtold
.visible .func (.param .f64 %value_out) strtold (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .f64 %r31;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 95 10
ld.global.u64 %r30,[_impure_ptr];
cvta.global.u64 %r29,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r31,[%value_in];
}
.loc 1 102 1
mov.f64 %value,%r31;
st.param.f64 [%value_out],%value;
ret;
}

lib_a-strtoll.o/1612277262  0     0     100666  10261     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _strtoll_l$constprop$0
.func (.param .u64 %value_out) _strtoll_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtoll.c"
// BEGIN GLOBAL FUNCTION DECL: _strtoll_r
.visible .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoll_l
.visible .func (.param .u64 %value_out) strtoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoll
.visible .func (.param .u64 %value_out) strtoll (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN FUNCTION DEF: _strtoll_l$constprop$0
.func (.param .u64 %value_out) _strtoll_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .u32 %r42;
.reg .u32 %r45;
.reg .u32 %r48;
.reg .u64 %r50;
.reg .u64 %r60;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .u64 %r72;
.reg .u16 %r74;
.reg .u16 %r75;
.reg .u32 %r76;
.reg .u16 %r77;
.reg .u32 %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .pred %r84;
.reg .u16 %r86;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .u32 %r89;
.reg .pred %r90;
.reg .pred %r91;
.reg .u64 %r93;
.reg .u32 %r94;
.reg .pred %r95;
.reg .u32 %r96;
.reg .pred %r97;
.reg .u32 %r98;
.reg .pred %r99;
.reg .pred %r100;
.reg .u32 %r102;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .u16 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .u32 %r110;
.reg .u16 %r111;
.reg .pred %r112;
.reg .u32 %r114;
.reg .u32 %r115;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u16 %r119;
.reg .u16 %r120;
.reg .u16 %r121;
.reg .u32 %r122;
.reg .u16 %r123;
.reg .pred %r124;
.reg .u64 %r125;
.reg .pred %r126;
.reg .u32 %r127;
.reg .pred %r128;
.reg .pred %r129;
.reg .pred %r130;
.reg .pred %r131;
.reg .pred %r133;
.reg .u64 %r134;
.reg .u32 %r135;
.reg .u32 %r136;
.reg .u16 %r137;
mov.u64 %r65,%ar0;
mov.u64 %r66,%ar1;
mov.u64 %r67,%ar2;
mov.u32 %r68,%ar3;
mov.u64 %r34,%r66;
cvta.const.u64 %r134,_ctype_+1;
$L2:
mov.u64 %r22,%r34;
add.u64 %r35,%r34,1;
mov.u64 %r34,%r35;
.loc 1 147 7
ld.u8 %r23,[%r22];
.loc 1 148 11
cvt.u32.u32 %r70,%r23;
cvt.u64.u8 %r69,%r70;
add.u64 %r72,%r134,%r69;
.loc 1 148 2
ld.u8 %r137,[%r72];
mov.u16 %r75,%r137;
and.b16 %r74,%r75,8;
cvt.u32.u16 %r76,%r74;
cvt.s32.s8 %r78,%r76;
cvt.u16.u32 %r77,%r78;
setp.ne.u16 %r79,%r77,0;
@ %r79 bra $L2;
.loc 1 147 5
mov.u32 %r42,%r23;
.loc 1 149 5
setp.ne.u32 %r80,%r42,45;
@ %r80 bra $L3;
.loc 1 151 5
ld.u8 %r42,[%r35];
.loc 1 151 9
add.u64 %r35,%r22,2;
mov.u64 %r62,-9223372036854775808;
.loc 1 150 7
mov.u32 %r38,1;
bra $L4;
$L3:
.loc 1 152 12
setp.ne.u32 %r81,%r42,43;
@ %r81 bra $L20;
.loc 1 153 5
ld.u8 %r42,[%r34];
.loc 1 153 9
add.u64 %r35,%r22,2;
.loc 1 153 5
mov.u64 %r62,9223372036854775807;
.loc 1 139 15
mov.u32 %r38,0;
bra $L4;
$L20:
mov.u64 %r62,9223372036854775807;
mov.u32 %r38,0;
$L4:
.loc 1 154 12
and.b32 %r82,%r68,-17;
.loc 1 154 5
setp.eq.u32 %r83,%r82,0;
@ %r83 bra $L5;
.loc 1 181 20
cvt.s64.s32 %r63,%r68;
bra $L6;
$L5:
.loc 1 154 32
setp.ne.u32 %r84,%r42,48;
@ %r84 bra $L7;
.loc 1 155 29
ld.u8 %r137,[%r35];
mov.u16 %r87,%r137;
and.b16 %r86,%r87,-33;
.loc 1 155 15
cvt.u32.u16 %r89,%r86;
cvt.u16.u8 %r88,%r89;
setp.ne.u16 %r90,%r88,88;
@ %r90 bra $L8;
.loc 1 156 5
ld.u8 %r42,[%r35+1];
.loc 1 157 5
add.u64 %r35,%r35,2;
mov.u64 %r63,16;
.loc 1 158 8
cvt.u32.u64 %r68,%r63;
bra $L6;
$L8:
.loc 1 160 5
setp.eq.u32 %r91,%r68,0;
@ %r91 bra $L21;
.loc 1 181 20
cvt.s64.s32 %r63,%r68;
bra $L6;
$L21:
.loc 1 160 5
mov.u64 %r63,8;
.loc 1 161 23
cvt.u32.u64 %r68,%r63;
bra $L6;
$L24:
.loc 1 160 5
mov.u64 %r63,10;
.loc 1 161 23
cvt.u32.u64 %r68,%r63;
$L6:
.loc 1 181 18
rem.u64 %r93,%r62,%r63;
.loc 1 181 9
cvt.u32.u64 %r40,%r93;
.loc 1 182 9
div.u64 %r41,%r62,%r63;
mov.u64 %r60,%r35;
.loc 1 183 20
mov.u32 %r48,0;
.loc 1 183 11
mov.u64 %r50,0;
.loc 1 195 8
mov.u32 %r135,-1;
.loc 1 197 8
mov.u32 %r136,1;
$L14:
.loc 1 184 16
add.u32 %r94,%r42,-48;
.loc 1 184 6
setp.gt.u32 %r95,%r94,9;
@ %r95 bra $L9;
.loc 1 185 6
mov.u32 %r45,%r94;
bra $L10;
$L9:
.loc 1 186 21
add.u32 %r96,%r42,-65;
.loc 1 186 11
setp.gt.u32 %r97,%r96,25;
@ %r97 bra $L11;
.loc 1 187 6
add.u32 %r45,%r42,-55;
bra $L10;
$L11:
.loc 1 188 21
add.u32 %r98,%r42,-97;
.loc 1 188 11
setp.gt.u32 %r99,%r98,25;
@ %r99 bra $L12;
.loc 1 189 6
add.u32 %r45,%r42,-87;
$L10:
.loc 1 192 6
setp.le.s32 %r100,%r68,%r45;
@ %r100 bra $L12;
.loc 1 194 24
shr.u32 %r102,%r48,31;
.loc 1 194 35
set.u32.lt.u64 %r104,%r41,%r50;
neg.s32 %r105,%r104;
.loc 1 194 28
cvt.u16.u32 %r108,%r102;
cvt.u16.u32 %r109,%r105;
or.b16 %r107,%r108,%r109;
.loc 1 194 19
cvt.u32.u16 %r110,%r107;
cvt.u16.u8 %r111,%r110;
setp.ne.u16 %r112,%r111,0;
@ %r112 bra $L22;
.loc 1 194 52
set.u32.eq.u64 %r114,%r41,%r50;
neg.s32 %r115,%r114;
.loc 1 194 67
set.u32.lt.s32 %r117,%r40,%r45;
neg.s32 %r118,%r117;
.loc 1 194 62
cvt.u16.u32 %r120,%r115;
cvt.u16.u32 %r121,%r118;
and.b16 %r119,%r120,%r121;
.loc 1 194 44
cvt.u32.u16 %r122,%r119;
cvt.u16.u8 %r123,%r122;
setp.ne.u16 %r124,%r123,0;
@ %r124 bra $L23;
.loc 1 199 8
cvt.s64.s32 %r125,%r45;
mad.lo.u64 %r50,%r50,%r63,%r125;
.loc 1 197 8
mov.u32 %r48,%r136;
bra $L13;
$L22:
.loc 1 195 8
mov.u32 %r48,%r135;
bra $L13;
$L23:
mov.u32 %r48,%r135;
$L13:
.loc 1 183 28
ld.u8 %r42,[%r60];
add.u64 %r60,%r60,1;
.loc 1 184 6
bra $L14;
$L12:
.loc 1 202 5
setp.ne.u32 %r126,%r48,-1;
@ %r126 bra $L15;
.loc 1 204 16
mov.u32 %r127,34;
st.u32 [%r65],%r127;
.loc 1 207 5
setp.ne.u64 %r128,%r67,0;
@ %r128 bra $L16;
.loc 1 203 7
mov.u64 %r50,%r62;
bra $L28;
$L15:
.loc 1 205 12
setp.eq.u32 %r129,%r38,0;
@ %r129 bra $L18;
.loc 1 206 7
neg.s64 %r50,%r50;
$L18:
.loc 1 207 5
setp.eq.u64 %r130,%r67,0;
@ %r130 bra $L28;
.loc 1 208 13
setp.eq.u32 %r131,%r48,0;
@ %r131 bra $L19;
mov.u64 %r62,%r50;
$L16:
add.u64 %r66,%r60,-1;
mov.u64 %r50,%r62;
$L19:
.loc 1 208 11
st.u64 [%r67],%r66;
.loc 1 209 9
bra $L28;
$L7:
.loc 1 160 5
setp.eq.u32 %r133,%r68,0;
@ %r133 bra $L24;
.loc 1 181 20
cvt.s64.s32 %r63,%r68;
bra $L6;
$L28:
.loc 1 210 1
mov.u64 %value,%r50;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtoll_r
.visible .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 218 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoll_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 219 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoll_l
.visible .func (.param .u64 %value_out) strtoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 227 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoll_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
.loc 1 228 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoll
.visible .func (.param .u64 %value_out) strtoll (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 235 9
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoll_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 236 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

/1405           1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-strtorx.o/1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

lib_a-strtoul.o/1612277262  0     0     100666  10700     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _strtoul_l$constprop$0
.func (.param .u64 %value_out) _strtoul_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtoul.c"
// BEGIN GLOBAL FUNCTION DECL: _strtoul_r
.visible .func (.param .u64 %value_out) _strtoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoul_l
.visible .func (.param .u64 %value_out) strtoul_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoul
.visible .func (.param .u64 %value_out) strtoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN FUNCTION DEF: _strtoul_l$constprop$0
.func (.param .u64 %value_out) _strtoul_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u32 %r42;
.reg .u32 %r45;
.reg .u32 %r56;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r60;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .u64 %r72;
.reg .u16 %r74;
.reg .u16 %r75;
.reg .u32 %r76;
.reg .u16 %r77;
.reg .u32 %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u64 %r84;
.reg .u64 %r87;
.reg .pred %r88;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u16 %r92;
.reg .u32 %r93;
.reg .pred %r94;
.reg .pred %r95;
.reg .u64 %r96;
.reg .u64 %r99;
.reg .u32 %r100;
.reg .pred %r101;
.reg .u32 %r102;
.reg .pred %r103;
.reg .u32 %r104;
.reg .pred %r105;
.reg .pred %r106;
.reg .u32 %r108;
.reg .u32 %r110;
.reg .u32 %r111;
.reg .u16 %r113;
.reg .u16 %r114;
.reg .u16 %r115;
.reg .u32 %r116;
.reg .u16 %r117;
.reg .pred %r118;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u32 %r123;
.reg .u32 %r124;
.reg .u16 %r125;
.reg .u16 %r126;
.reg .u16 %r127;
.reg .u32 %r128;
.reg .u16 %r129;
.reg .pred %r130;
.reg .u64 %r131;
.reg .pred %r132;
.reg .u32 %r133;
.reg .pred %r134;
.reg .pred %r135;
.reg .pred %r136;
.reg .pred %r137;
.reg .pred %r139;
.reg .u64 %r140;
.reg .u64 %r143;
.reg .u64 %r144;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .u16 %r147;
mov.u64 %r65,%ar0;
mov.u64 %r66,%ar1;
mov.u64 %r67,%ar2;
mov.u32 %r68,%ar3;
mov.u64 %r34,%r66;
cvta.const.u64 %r144,_ctype_+1;
$L2:
mov.u64 %r22,%r34;
add.u64 %r35,%r34,1;
mov.u64 %r34,%r35;
.loc 1 143 7
ld.u8 %r23,[%r22];
.loc 1 144 11
cvt.u32.u32 %r70,%r23;
cvt.u64.u8 %r69,%r70;
add.u64 %r72,%r144,%r69;
.loc 1 144 2
ld.u8 %r147,[%r72];
mov.u16 %r75,%r147;
and.b16 %r74,%r75,8;
cvt.u32.u16 %r76,%r74;
cvt.s32.s8 %r78,%r76;
cvt.u16.u32 %r77,%r78;
setp.ne.u16 %r79,%r77,0;
@ %r79 bra $L2;
.loc 1 143 5
mov.u32 %r39,%r23;
.loc 1 145 5
setp.ne.u32 %r80,%r39,45;
@ %r80 bra $L3;
.loc 1 147 5
ld.u8 %r39,[%r35];
.loc 1 147 9
add.u64 %r35,%r22,2;
.loc 1 146 7
mov.u32 %r56,1;
bra $L4;
$L3:
.loc 1 148 12
setp.ne.u32 %r81,%r39,43;
@ %r81 bra $L20;
.loc 1 149 5
ld.u8 %r39,[%r34];
.loc 1 149 9
add.u64 %r35,%r22,2;
.loc 1 137 15
mov.u32 %r56,0;
bra $L4;
$L20:
mov.u32 %r56,0;
$L4:
.loc 1 150 12
and.b32 %r82,%r68,-17;
.loc 1 150 5
setp.eq.u32 %r83,%r82,0;
@ %r83 bra $L5;
.loc 1 158 38
cvt.s64.s32 %r59,%r68;
.loc 1 158 9
mov.u64 %r84,-1;
div.u64 %r58,%r84,%r59;
.loc 1 159 36
rem.u64 %r87,%r84,%r59;
.loc 1 159 9
cvt.u32.u64 %r60,%r87;
bra $L6;
$L5:
.loc 1 150 32
setp.ne.u32 %r88,%r39,48;
@ %r88 bra $L7;
.loc 1 151 29
ld.u8 %r147,[%r35];
mov.u16 %r91,%r147;
and.b16 %r90,%r91,-33;
.loc 1 151 15
cvt.u32.u16 %r93,%r90;
cvt.u16.u8 %r92,%r93;
setp.ne.u16 %r94,%r92,88;
@ %r94 bra $L8;
.loc 1 152 5
ld.u8 %r39,[%r35+1];
.loc 1 153 5
add.u64 %r35,%r35,2;
mov.u32 %r60,15;
mov.u64 %r58,1152921504606846975;
mov.u64 %r59,16;
.loc 1 154 8
cvt.u32.u64 %r68,%r59;
bra $L6;
$L8:
.loc 1 156 5
setp.eq.u32 %r95,%r68,0;
@ %r95 bra $L21;
.loc 1 158 38
cvt.s64.s32 %r59,%r68;
.loc 1 158 9
mov.u64 %r96,-1;
div.u64 %r58,%r96,%r59;
.loc 1 159 36
rem.u64 %r99,%r96,%r59;
.loc 1 159 9
cvt.u32.u64 %r60,%r99;
bra $L6;
$L21:
.loc 1 156 5
mov.u32 %r60,7;
mov.u64 %r58,2305843009213693951;
mov.u64 %r59,8;
.loc 1 157 23
cvt.u32.u64 %r68,%r59;
bra $L6;
$L25:
.loc 1 156 5
mov.u32 %r60,5;
mov.u64 %r58,1844674407370955161;
mov.u64 %r59,10;
.loc 1 157 23
cvt.u32.u64 %r68,%r59;
$L6:
mov.u64 %r37,%r35;
.loc 1 160 20
mov.u32 %r45,0;
.loc 1 160 11
mov.u64 %r64,0;
.loc 1 172 8
mov.u32 %r145,-1;
.loc 1 174 8
mov.u32 %r146,1;
$L14:
.loc 1 161 16
add.u32 %r100,%r39,-48;
.loc 1 161 6
setp.gt.u32 %r101,%r100,9;
@ %r101 bra $L9;
.loc 1 162 6
mov.u32 %r42,%r100;
bra $L10;
$L9:
.loc 1 163 21
add.u32 %r102,%r39,-65;
.loc 1 163 11
setp.gt.u32 %r103,%r102,25;
@ %r103 bra $L11;
.loc 1 164 6
add.u32 %r42,%r39,-55;
bra $L10;
$L11:
.loc 1 165 21
add.u32 %r104,%r39,-97;
.loc 1 165 11
setp.gt.u32 %r105,%r104,25;
@ %r105 bra $L12;
.loc 1 166 6
add.u32 %r42,%r39,-87;
$L10:
.loc 1 169 6
setp.le.s32 %r106,%r68,%r42;
@ %r106 bra $L12;
.loc 1 171 24
shr.u32 %r108,%r45,31;
.loc 1 171 35
set.u32.gt.u64 %r110,%r64,%r58;
neg.s32 %r111,%r110;
.loc 1 171 28
cvt.u16.u32 %r114,%r108;
cvt.u16.u32 %r115,%r111;
or.b16 %r113,%r114,%r115;
.loc 1 171 19
cvt.u32.u16 %r116,%r113;
cvt.u16.u8 %r117,%r116;
setp.ne.u16 %r118,%r117,0;
@ %r118 bra $L22;
.loc 1 171 52
set.u32.eq.u64 %r120,%r64,%r58;
neg.s32 %r121,%r120;
.loc 1 171 67
set.u32.gt.s32 %r123,%r42,%r60;
neg.s32 %r124,%r123;
.loc 1 171 62
cvt.u16.u32 %r126,%r121;
cvt.u16.u32 %r127,%r124;
and.b16 %r125,%r126,%r127;
.loc 1 171 44
cvt.u32.u16 %r128,%r125;
cvt.u16.u8 %r129,%r128;
setp.ne.u16 %r130,%r129,0;
@ %r130 bra $L23;
.loc 1 176 8
cvt.s64.s32 %r131,%r42;
mad.lo.u64 %r64,%r64,%r59,%r131;
.loc 1 174 8
mov.u32 %r45,%r146;
bra $L13;
$L22:
.loc 1 172 8
mov.u32 %r45,%r145;
bra $L13;
$L23:
mov.u32 %r45,%r145;
$L13:
.loc 1 160 28
ld.u8 %r39,[%r37];
add.u64 %r37,%r37,1;
.loc 1 161 6
bra $L14;
$L12:
.loc 1 179 5
setp.ne.u32 %r132,%r45,-1;
@ %r132 bra $L15;
.loc 1 181 16
mov.u32 %r133,34;
st.u32 [%r65],%r133;
.loc 1 184 5
setp.ne.u64 %r134,%r67,0;
@ %r134 bra $L24;
.loc 1 180 7
mov.u64 %r64,-1;
bra $L1;
$L15:
.loc 1 182 12
setp.eq.u32 %r135,%r56,0;
@ %r135 bra $L18;
.loc 1 183 7
neg.s64 %r64,%r64;
$L18:
.loc 1 184 5
setp.eq.u64 %r136,%r67,0;
@ %r136 bra $L1;
.loc 1 185 13
setp.eq.u32 %r137,%r45,0;
@ %r137 bra $L19;
bra $L16;
$L24:
.loc 1 180 7
mov.u64 %r64,-1;
$L16:
.loc 1 185 13
add.u64 %r66,%r37,-1;
$L19:
.loc 1 185 11
st.u64 [%r67],%r66;
.loc 1 186 9
bra $L1;
$L7:
.loc 1 156 5
setp.eq.u32 %r139,%r68,0;
@ %r139 bra $L25;
.loc 1 158 38
cvt.s64.s32 %r59,%r68;
.loc 1 158 9
mov.u64 %r140,-1;
div.u64 %r58,%r140,%r59;
.loc 1 159 36
rem.u64 %r143,%r140,%r59;
.loc 1 159 9
cvt.u32.u64 %r60,%r143;
bra $L6;
$L1:
.loc 1 187 1
mov.u64 %value,%r64;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtoul_r
.visible .func (.param .u64 %value_out) _strtoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 195 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoul_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 196 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoul_l
.visible .func (.param .u64 %value_out) strtoul_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 204 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoul_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
.loc 1 205 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoul
.visible .func (.param .u64 %value_out) strtoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 212 9
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoul_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 213 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
/1424           1612277262  0     0     100666  10719     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _strtoull_l$constprop$0
.func (.param .u64 %value_out) _strtoull_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtoull.c"
// BEGIN GLOBAL FUNCTION DECL: _strtoull_r
.visible .func (.param .u64 %value_out) _strtoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoull_l
.visible .func (.param .u64 %value_out) strtoull_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoull
.visible .func (.param .u64 %value_out) strtoull (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN FUNCTION DEF: _strtoull_l$constprop$0
.func (.param .u64 %value_out) _strtoull_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u32 %r42;
.reg .u32 %r45;
.reg .u32 %r56;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r60;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .u64 %r72;
.reg .u16 %r74;
.reg .u16 %r75;
.reg .u32 %r76;
.reg .u16 %r77;
.reg .u32 %r78;
.reg .pred %r79;
.reg .pred %r80;
.reg .pred %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u64 %r84;
.reg .u64 %r87;
.reg .pred %r88;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u16 %r92;
.reg .u32 %r93;
.reg .pred %r94;
.reg .pred %r95;
.reg .u64 %r96;
.reg .u64 %r99;
.reg .u32 %r100;
.reg .pred %r101;
.reg .u32 %r102;
.reg .pred %r103;
.reg .u32 %r104;
.reg .pred %r105;
.reg .pred %r106;
.reg .u32 %r108;
.reg .u32 %r110;
.reg .u32 %r111;
.reg .u16 %r113;
.reg .u16 %r114;
.reg .u16 %r115;
.reg .u32 %r116;
.reg .u16 %r117;
.reg .pred %r118;
.reg .u32 %r120;
.reg .u32 %r121;
.reg .u32 %r123;
.reg .u32 %r124;
.reg .u16 %r125;
.reg .u16 %r126;
.reg .u16 %r127;
.reg .u32 %r128;
.reg .u16 %r129;
.reg .pred %r130;
.reg .u64 %r131;
.reg .pred %r132;
.reg .u32 %r133;
.reg .pred %r134;
.reg .pred %r135;
.reg .pred %r136;
.reg .pred %r137;
.reg .pred %r139;
.reg .u64 %r140;
.reg .u64 %r143;
.reg .u64 %r144;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .u16 %r147;
mov.u64 %r65,%ar0;
mov.u64 %r66,%ar1;
mov.u64 %r67,%ar2;
mov.u32 %r68,%ar3;
mov.u64 %r34,%r66;
cvta.const.u64 %r144,_ctype_+1;
$L2:
mov.u64 %r22,%r34;
add.u64 %r35,%r34,1;
mov.u64 %r34,%r35;
.loc 1 141 7
ld.u8 %r23,[%r22];
.loc 1 142 11
cvt.u32.u32 %r70,%r23;
cvt.u64.u8 %r69,%r70;
add.u64 %r72,%r144,%r69;
.loc 1 142 2
ld.u8 %r147,[%r72];
mov.u16 %r75,%r147;
and.b16 %r74,%r75,8;
cvt.u32.u16 %r76,%r74;
cvt.s32.s8 %r78,%r76;
cvt.u16.u32 %r77,%r78;
setp.ne.u16 %r79,%r77,0;
@ %r79 bra $L2;
.loc 1 141 5
mov.u32 %r39,%r23;
.loc 1 143 5
setp.ne.u32 %r80,%r39,45;
@ %r80 bra $L3;
.loc 1 145 5
ld.u8 %r39,[%r35];
.loc 1 145 9
add.u64 %r35,%r22,2;
.loc 1 144 7
mov.u32 %r56,1;
bra $L4;
$L3:
.loc 1 146 12
setp.ne.u32 %r81,%r39,43;
@ %r81 bra $L20;
.loc 1 147 5
ld.u8 %r39,[%r34];
.loc 1 147 9
add.u64 %r35,%r22,2;
.loc 1 135 15
mov.u32 %r56,0;
bra $L4;
$L20:
mov.u32 %r56,0;
$L4:
.loc 1 148 12
and.b32 %r82,%r68,-17;
.loc 1 148 5
setp.eq.u32 %r83,%r82,0;
@ %r83 bra $L5;
.loc 1 156 48
cvt.s64.s32 %r59,%r68;
.loc 1 156 9
mov.u64 %r84,-1;
div.u64 %r58,%r84,%r59;
.loc 1 157 46
rem.u64 %r87,%r84,%r59;
.loc 1 157 9
cvt.u32.u64 %r60,%r87;
bra $L6;
$L5:
.loc 1 148 32
setp.ne.u32 %r88,%r39,48;
@ %r88 bra $L7;
.loc 1 149 29
ld.u8 %r147,[%r35];
mov.u16 %r91,%r147;
and.b16 %r90,%r91,-33;
.loc 1 149 15
cvt.u32.u16 %r93,%r90;
cvt.u16.u8 %r92,%r93;
setp.ne.u16 %r94,%r92,88;
@ %r94 bra $L8;
.loc 1 150 5
ld.u8 %r39,[%r35+1];
.loc 1 151 5
add.u64 %r35,%r35,2;
mov.u32 %r60,15;
mov.u64 %r58,1152921504606846975;
mov.u64 %r59,16;
.loc 1 152 8
cvt.u32.u64 %r68,%r59;
bra $L6;
$L8:
.loc 1 154 5
setp.eq.u32 %r95,%r68,0;
@ %r95 bra $L21;
.loc 1 156 48
cvt.s64.s32 %r59,%r68;
.loc 1 156 9
mov.u64 %r96,-1;
div.u64 %r58,%r96,%r59;
.loc 1 157 46
rem.u64 %r99,%r96,%r59;
.loc 1 157 9
cvt.u32.u64 %r60,%r99;
bra $L6;
$L21:
.loc 1 154 5
mov.u32 %r60,7;
mov.u64 %r58,2305843009213693951;
mov.u64 %r59,8;
.loc 1 155 23
cvt.u32.u64 %r68,%r59;
bra $L6;
$L25:
.loc 1 154 5
mov.u32 %r60,5;
mov.u64 %r58,1844674407370955161;
mov.u64 %r59,10;
.loc 1 155 23
cvt.u32.u64 %r68,%r59;
$L6:
mov.u64 %r37,%r35;
.loc 1 158 20
mov.u32 %r45,0;
.loc 1 158 11
mov.u64 %r64,0;
.loc 1 170 8
mov.u32 %r145,-1;
.loc 1 172 8
mov.u32 %r146,1;
$L14:
.loc 1 159 16
add.u32 %r100,%r39,-48;
.loc 1 159 6
setp.gt.u32 %r101,%r100,9;
@ %r101 bra $L9;
.loc 1 160 6
mov.u32 %r42,%r100;
bra $L10;
$L9:
.loc 1 161 21
add.u32 %r102,%r39,-65;
.loc 1 161 11
setp.gt.u32 %r103,%r102,25;
@ %r103 bra $L11;
.loc 1 162 6
add.u32 %r42,%r39,-55;
bra $L10;
$L11:
.loc 1 163 21
add.u32 %r104,%r39,-97;
.loc 1 163 11
setp.gt.u32 %r105,%r104,25;
@ %r105 bra $L12;
.loc 1 164 6
add.u32 %r42,%r39,-87;
$L10:
.loc 1 167 6
setp.le.s32 %r106,%r68,%r42;
@ %r106 bra $L12;
.loc 1 169 24
shr.u32 %r108,%r45,31;
.loc 1 169 35
set.u32.gt.u64 %r110,%r64,%r58;
neg.s32 %r111,%r110;
.loc 1 169 28
cvt.u16.u32 %r114,%r108;
cvt.u16.u32 %r115,%r111;
or.b16 %r113,%r114,%r115;
.loc 1 169 19
cvt.u32.u16 %r116,%r113;
cvt.u16.u8 %r117,%r116;
setp.ne.u16 %r118,%r117,0;
@ %r118 bra $L22;
.loc 1 169 52
set.u32.eq.u64 %r120,%r64,%r58;
neg.s32 %r121,%r120;
.loc 1 169 67
set.u32.gt.s32 %r123,%r42,%r60;
neg.s32 %r124,%r123;
.loc 1 169 62
cvt.u16.u32 %r126,%r121;
cvt.u16.u32 %r127,%r124;
and.b16 %r125,%r126,%r127;
.loc 1 169 44
cvt.u32.u16 %r128,%r125;
cvt.u16.u8 %r129,%r128;
setp.ne.u16 %r130,%r129,0;
@ %r130 bra $L23;
.loc 1 174 8
cvt.s64.s32 %r131,%r42;
mad.lo.u64 %r64,%r64,%r59,%r131;
.loc 1 172 8
mov.u32 %r45,%r146;
bra $L13;
$L22:
.loc 1 170 8
mov.u32 %r45,%r145;
bra $L13;
$L23:
mov.u32 %r45,%r145;
$L13:
.loc 1 158 28
ld.u8 %r39,[%r37];
add.u64 %r37,%r37,1;
.loc 1 159 6
bra $L14;
$L12:
.loc 1 177 5
setp.ne.u32 %r132,%r45,-1;
@ %r132 bra $L15;
.loc 1 179 16
mov.u32 %r133,34;
st.u32 [%r65],%r133;
.loc 1 182 5
setp.ne.u64 %r134,%r67,0;
@ %r134 bra $L24;
.loc 1 178 7
mov.u64 %r64,-1;
bra $L1;
$L15:
.loc 1 180 12
setp.eq.u32 %r135,%r56,0;
@ %r135 bra $L18;
.loc 1 181 7
neg.s64 %r64,%r64;
$L18:
.loc 1 182 5
setp.eq.u64 %r136,%r67,0;
@ %r136 bra $L1;
.loc 1 183 13
setp.eq.u32 %r137,%r45,0;
@ %r137 bra $L19;
bra $L16;
$L24:
.loc 1 178 7
mov.u64 %r64,-1;
$L16:
.loc 1 183 13
add.u64 %r66,%r37,-1;
$L19:
.loc 1 183 11
st.u64 [%r67],%r66;
.loc 1 184 9
bra $L1;
$L7:
.loc 1 154 5
setp.eq.u32 %r139,%r68,0;
@ %r139 bra $L25;
.loc 1 156 48
cvt.s64.s32 %r59,%r68;
.loc 1 156 9
mov.u64 %r140,-1;
div.u64 %r58,%r140,%r59;
.loc 1 157 46
rem.u64 %r143,%r140,%r59;
.loc 1 157 9
cvt.u32.u64 %r60,%r143;
bra $L6;
$L1:
.loc 1 185 1
mov.u64 %value,%r64;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtoull_r
.visible .func (.param .u64 %value_out) _strtoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 193 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoull_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 194 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoull_l
.visible .func (.param .u64 %value_out) strtoull_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 202 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoull_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
.loc 1 203 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoull
.visible .func (.param .u64 %value_out) strtoull (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 210 9
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoull_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 211 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

/1442           1612277262  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

/1462           1612277262  0     0     100666  11335     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _strtoumax_l$constprop$0
.func (.param .u64 %value_out) _strtoumax_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/strtoumax.c"
// BEGIN GLOBAL FUNCTION DECL: _strtoumax_r
.visible .func (.param .u64 %value_out) _strtoumax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoumax_l
.visible .func (.param .u64 %value_out) strtoumax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strtoumax
.visible .func (.param .u64 %value_out) strtoumax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN FUNCTION DEF: _strtoumax_l$constprop$0
.func (.param .u64 %value_out) _strtoumax_l$constprop$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u32 %r28;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u64 %r35;
.reg .u32 %r40;
.reg .u32 %r46;
.reg .u64 %r53;
.reg .u32 %r54;
.reg .u64 %r56;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u32 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r70;
.reg .u16 %r72;
.reg .u16 %r73;
.reg .u32 %r74;
.reg .u16 %r75;
.reg .u32 %r76;
.reg .pred %r77;
.reg .u16 %r78;
.reg .pred %r79;
.reg .pred %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u16 %r84;
.reg .pred %r85;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .u16 %r89;
.reg .u32 %r90;
.reg .u32 %r91;
.reg .pred %r92;
.reg .pred %r93;
.reg .u32 %r94;
.reg .pred %r95;
.reg .u64 %r96;
.reg .u64 %r99;
.reg .u32 %r100;
.reg .pred %r101;
.reg .u32 %r102;
.reg .u16 %r103;
.reg .u16 %r104;
.reg .u32 %r105;
.reg .u16 %r106;
.reg .pred %r107;
.reg .u16 %r109;
.reg .u16 %r111;
.reg .u32 %r112;
.reg .pred %r113;
.reg .u16 %r114;
.reg .u32 %r116;
.reg .u16 %r117;
.reg .u16 %r119;
.reg .u32 %r120;
.reg .pred %r121;
.reg .u16 %r122;
.reg .u32 %r124;
.reg .pred %r125;
.reg .u32 %r127;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u16 %r132;
.reg .u16 %r133;
.reg .u16 %r134;
.reg .u32 %r135;
.reg .u16 %r136;
.reg .pred %r137;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u16 %r144;
.reg .u16 %r145;
.reg .u16 %r146;
.reg .u32 %r147;
.reg .u16 %r148;
.reg .pred %r149;
.reg .u64 %r150;
.reg .u32 %r151;
.reg .pred %r152;
.reg .u32 %r153;
.reg .pred %r154;
.reg .u32 %r155;
.reg .pred %r156;
.reg .pred %r157;
.reg .pred %r159;
.reg .pred %r160;
.reg .u64 %r161;
.reg .u32 %r162;
.reg .u32 %r163;
.reg .u16 %r164;
mov.u64 %r63,%ar0;
mov.u64 %r64,%ar1;
mov.u64 %r65,%ar2;
mov.u32 %r66,%ar3;
mov.u64 %r31,%r64;
cvta.const.u64 %r161,_ctype_+1;
$L2:
mov.u64 %r22,%r31;
add.u64 %r33,%r31,1;
mov.u64 %r31,%r33;
.loc 1 73 5
ld.s8 %r32,[%r22];
.loc 1 74 11
cvt.u32.u32 %r68,%r32;
cvt.s64.s8 %r67,%r68;
add.u64 %r70,%r161,%r67;
.loc 1 74 2
ld.u8 %r164,[%r70];
mov.u16 %r73,%r164;
and.b16 %r72,%r73,8;
cvt.u32.u16 %r74,%r72;
cvt.s32.s8 %r76,%r74;
cvt.u16.u32 %r75,%r76;
setp.ne.u16 %r77,%r75,0;
@ %r77 bra $L2;
.loc 1 75 5
cvt.u16.u32 %r78,%r32;
setp.ne.u16 %r79,%r78,45;
@ %r79 bra $L3;
.loc 1 77 5
ld.s8 %r32,[%r33];
.loc 1 77 9
add.u64 %r33,%r22,2;
.loc 1 76 7
mov.u32 %r54,1;
bra $L4;
$L3:
.loc 1 80 6
setp.ne.u16 %r81,%r78,43;
@ %r81 bra $L23;
.loc 1 81 6
ld.s8 %r32,[%r31];
.loc 1 81 10
add.u64 %r33,%r22,2;
.loc 1 79 7
mov.u32 %r54,0;
bra $L4;
$L23:
mov.u32 %r54,0;
$L4:
.loc 1 83 12
and.b32 %r82,%r66,-17;
.loc 1 83 5
setp.ne.u32 %r83,%r82,0;
@ %r83 bra $L5;
.loc 1 83 32
cvt.u16.u32 %r84,%r32;
setp.ne.u16 %r85,%r84,48;
@ %r85 bra $L6;
.loc 1 84 29
ld.u8 %r164,[%r33];
mov.u16 %r88,%r164;
and.b16 %r87,%r88,-33;
.loc 1 84 15
cvt.u32.u16 %r91,%r87;
cvt.s32.s8 %r90,%r91;
cvt.u16.u32 %r89,%r90;
setp.ne.u16 %r92,%r89,88;
@ %r92 bra $L7;
.loc 1 85 5
ld.s8 %r32,[%r33+1];
.loc 1 86 5
add.u64 %r33,%r33,2;
mov.u32 %r28,15;
mov.u64 %r53,1152921504606846975;
mov.u64 %r56,16;
.loc 1 87 8
cvt.u32.u64 %r66,%r56;
bra $L8;
$L7:
.loc 1 89 5
setp.eq.u32 %r93,%r66,0;
@ %r93 bra $L24;
$L5:
.loc 1 92 15
add.u32 %r94,%r66,-2;
.loc 1 92 5
setp.gt.u32 %r95,%r94,34;
@ %r95 bra $L9;
.loc 1 95 23
cvt.s64.s32 %r56,%r66;
.loc 1 95 9
mov.u64 %r96,-1;
div.u64 %r53,%r96,%r56;
.loc 1 96 23
rem.u64 %r99,%r96,%r56;
.loc 1 96 9
cvt.u32.u64 %r28,%r99;
bra $L8;
$L9:
.loc 1 121 16
mov.u32 %r100,22;
st.u32 [%r63],%r100;
.loc 1 124 5
setp.ne.u64 %r101,%r65,0;
@ %r101 bra $L25;
.loc 1 91 6
mov.u64 %r62,%r65;
bra $L1;
$L24:
.loc 1 89 5
mov.u32 %r28,7;
mov.u64 %r53,2305843009213693951;
mov.u64 %r56,8;
.loc 1 90 23
cvt.u32.u64 %r66,%r56;
bra $L8;
$L28:
.loc 1 89 5
mov.u32 %r28,5;
mov.u64 %r53,1844674407370955161;
mov.u64 %r56,10;
.loc 1 90 23
cvt.u32.u64 %r66,%r56;
$L8:
mov.u64 %r35,%r33;
.loc 1 91 12
mov.u32 %r46,0;
.loc 1 91 6
mov.u64 %r62,0;
.loc 1 109 8
mov.u32 %r162,-1;
.loc 1 111 8
mov.u32 %r163,1;
$L17:
.loc 1 98 16
cvt.u32.u32 %r102,%r32;
cvt.u16.u8 %r104,%r102;
add.u16 %r103,%r104,-48;
cvt.u32.u16 %r105,%r103;
.loc 1 98 6
cvt.u16.u8 %r106,%r105;
setp.gt.u16 %r107,%r106,9;
@ %r107 bra $L12;
.loc 1 99 6
cvt.s32.s8 %r40,%r105;
bra $L13;
$L12:
.loc 1 100 21
add.u16 %r109,%r104,-65;
.loc 1 100 11
cvt.u32.u16 %r112,%r109;
cvt.u16.u8 %r111,%r112;
setp.gt.u16 %r113,%r111,25;
@ %r113 bra $L14;
.loc 1 101 6
add.u16 %r114,%r104,-55;
cvt.u32.u16 %r116,%r114;
cvt.s32.s8 %r40,%r116;
bra $L13;
$L14:
.loc 1 102 21
add.u16 %r117,%r104,-97;
.loc 1 102 11
cvt.u32.u16 %r120,%r117;
cvt.u16.u8 %r119,%r120;
setp.gt.u16 %r121,%r119,25;
@ %r121 bra $L15;
.loc 1 103 6
add.u16 %r122,%r104,-87;
cvt.u32.u16 %r124,%r122;
cvt.s32.s8 %r40,%r124;
$L13:
.loc 1 106 6
setp.ge.s32 %r125,%r40,%r66;
@ %r125 bra $L15;
.loc 1 108 11
shr.u32 %r127,%r46,31;
.loc 1 108 22
set.u32.gt.u64 %r129,%r62,%r53;
neg.s32 %r130,%r129;
.loc 1 108 15
cvt.u16.u32 %r133,%r127;
cvt.u16.u32 %r134,%r130;
or.b16 %r132,%r133,%r134;
.loc 1 108 6
cvt.u32.u16 %r135,%r132;
cvt.u16.u8 %r136,%r135;
setp.ne.u16 %r137,%r136,0;
@ %r137 bra $L26;
.loc 1 108 31
set.u32.eq.u64 %r139,%r62,%r53;
neg.s32 %r140,%r139;
.loc 1 108 49
set.u32.gt.s32 %r142,%r40,%r28;
neg.s32 %r143,%r142;
cvt.u16.u32 %r145,%r140;
cvt.u16.u32 %r146,%r143;
and.b16 %r144,%r145,%r146;
cvt.u32.u16 %r147,%r144;
cvt.u16.u8 %r148,%r147;
setp.ne.u16 %r149,%r148,0;
@ %r149 bra $L27;
.loc 1 113 8
cvt.u32.u32 %r151,%r40;
cvt.s64.s8 %r150,%r151;
mad.lo.u64 %r62,%r62,%r56,%r150;
.loc 1 111 8
mov.u32 %r46,%r163;
bra $L16;
$L26:
.loc 1 109 8
mov.u32 %r46,%r162;
bra $L16;
$L27:
mov.u32 %r46,%r162;
$L16:
.loc 1 97 14
ld.s8 %r32,[%r35];
add.u64 %r35,%r35,1;
.loc 1 98 6
bra $L17;
$L15:
.loc 1 116 5
setp.ne.u32 %r152,%r46,-1;
@ %r152 bra $L18;
.loc 1 118 16
mov.u32 %r153,34;
st.u32 [%r63],%r153;
.loc 1 117 7
mov.u64 %r62,-1;
bra $L19;
$L18:
.loc 1 119 12
setp.ne.u32 %r154,%r46,0;
@ %r154 bra $L20;
$L21:
.loc 1 121 16
mov.u32 %r155,22;
st.u32 [%r63],%r155;
.loc 1 124 5
setp.ne.u64 %r156,%r65,0;
@ ! %r156 bra $L1;
bra $L10;
$L20:
.loc 1 122 12
setp.eq.u32 %r157,%r54,0;
@ %r157 bra $L19;
.loc 1 123 7
neg.s64 %r62,%r62;
bra $L19;
$L22:
.loc 1 125 13
add.u64 %r64,%r35,-1;
bra $L10;
$L25:
.loc 1 91 6
mov.u64 %r62,0;
$L10:
.loc 1 125 11
st.u64 [%r65],%r64;
.loc 1 126 9
bra $L1;
$L19:
.loc 1 124 5
setp.ne.u64 %r159,%r65,0;
@ %r159 bra $L22;
bra $L1;
$L6:
.loc 1 89 5
setp.eq.u32 %r160,%r66,0;
@ %r160 bra $L28;
bra $L5;
$L1:
.loc 1 127 1
mov.u64 %value,%r62;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _strtoumax_r
.visible .func (.param .u64 %value_out) _strtoumax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 133 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoumax_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 134 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoumax_l
.visible .func (.param .u64 %value_out) strtoumax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 142 9
ld.global.u64 %r32,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoumax_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r33,[%value_in];
}
.loc 1 143 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: strtoumax
.visible .func (.param .u64 %value_out) strtoumax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 148 9
ld.global.u64 %r31,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
call (%value_in),_strtoumax_l$constprop$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 149 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-strupr.o/ 1612277262  0     0     100666  1644      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strupr
.visible .func (.param .u64 %value_out) strupr (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/strupr.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: strupr
.visible .func (.param .u64 %value_out) strupr (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .u64 %r36;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u16 %r44;
.reg .u16 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u64 %r49;
.reg .u16 %r50;
mov.u64 %r30,%ar0;
.loc 1 35 11
ld.u8 %r26,[%r30];
.loc 1 35 3
setp.ne.u32 %r31,%r26,0;
@ ! %r31 bra $L7;
mov.u64 %r28,%r30;
cvta.const.u64 %r49,_ctype_+1;
$L2:
.loc 1 37 14
cvt.u32.u32 %r34,%r26;
cvt.u64.u8 %r33,%r34;
add.u64 %r36,%r49,%r33;
ld.u8 %r50,[%r36];
mov.u16 %r39,%r50;
and.b16 %r38,%r39,3;
cvt.u32.u16 %r42,%r38;
cvt.s32.s8 %r41,%r42;
cvt.u16.u32 %r40,%r41;
setp.ne.u16 %r43,%r40,2;
@ %r43 bra $L3;
.loc 1 37 12
cvt.u16.u32 %r45,%r26;
add.u16 %r44,%r45,-32;
cvt.u32.u16 %r46,%r44;
cvt.u32.u8 %r26,%r46;
$L3:
cvt.u32.u32 %r47,%r26;
st.u8 [%r28],%r47;
.loc 1 35 28
add.u64 %r28,%r28,1;
.loc 1 35 11
ld.u8 %r26,[%r28];
.loc 1 35 3
setp.ne.u32 %r48,%r26,0;
@ %r48 bra $L2;
$L7:
.loc 1 40 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-strxfrm.o/1612277262  0     0     100666  1935      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: strxfrm
.visible .func (.param .u64 %value_out) strxfrm (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/strxfrm.c"
// BEGIN GLOBAL FUNCTION DEF: strxfrm
.visible .func (.param .u64 %value_out) strxfrm (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r28;
.reg .u64 %r32;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u32 %r43;
.reg .pred %r44;
.reg .pred %r45;
.reg .u16 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u64 %r49;
.reg .u16 %r50;
.reg .u32 %r51;
.reg .pred %r52;
.reg .u64 %r54;
mov.u64 %r36,%ar0;
mov.u64 %r37,%ar1;
mov.u64 %r38,%ar2;
.loc 1 55 9
setp.eq.u64 %r39,%r38,0;
@ %r39 bra $L6;
.loc 1 54 7
mov.u64 %r35,0;
add.u64 %r54,%r37,1;
$L4:
add.u64 %r32,%r54,%r35;
.loc 1 57 20
add.u64 %r41,%r37,%r35;
ld.s8 %r22,[%r41];
.loc 1 57 18
add.u64 %r42,%r36,%r35;
cvt.u32.u32 %r43,%r22;
st.u8 [%r42],%r43;
.loc 1 57 10
setp.eq.u32 %r44,%r22,0;
@ %r44 bra $L1;
.loc 1 58 9
add.u64 %r35,%r35,1;
.loc 1 55 9
setp.ne.u64 %r45,%r38,%r35;
@ %r45 bra $L4;
bra $L2;
$L6:
mov.u64 %r32,%r37;
$L2:
.loc 1 62 9
ld.s8 %r47,[%r32];
cvt.u16.u32 %r46,%r47;
setp.eq.u16 %r48,%r46,0;
@ %r48 bra $L7;
mov.u64 %r28,%r32;
$L5:
.loc 1 64 7
add.u64 %r28,%r28,1;
add.u64 %r49,%r28,%r38;
sub.u64 %r35,%r49,%r32;
.loc 1 62 9
ld.s8 %r51,[%r28];
cvt.u16.u32 %r50,%r51;
setp.ne.u16 %r52,%r50,0;
@ %r52 bra $L5;
bra $L1;
$L7:
mov.u64 %r35,%r38;
$L1:
.loc 1 69 1
mov.u64 %value,%r35;
st.param.u64 [%value_out],%value;
ret;
}

/1481           1612277262  0     0     100666  48062     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __ssprint_r
.visible .func (.param .u32 %value_out) __ssprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vfprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _svfiprintf_r
.visible .func (.param .u32 %value_out) _svfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _realloc_r
.extern .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memmove
.extern .func (.param .u64 %value_out) memmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: zeroes$0
.const .align 1 .u8 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 1 .u8 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// BEGIN GLOBAL FUNCTION DEF: __ssprint_r
.visible .func (.param .u32 %value_out) __ssprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r40;
.reg .u64 %r46;
.reg .u32 %r49;
.reg .u64 %r50;
.reg .u32 %r51;
.reg .u32 %r54;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r60;
.reg .u32 %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .u16 %r70;
.reg .u16 %r71;
.reg .pred %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u32 %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u32 %r79;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .pred %r83;
.reg .u32 %r84;
.reg .u32 %r85;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .pred %r89;
.reg .u64 %r92;
.reg .pred %r93;
.reg .u32 %r94;
.reg .u64 %r98;
.reg .u64 %r99;
.reg .u16 %r100;
.reg .u16 %r101;
.reg .u16 %r102;
.reg .u64 %r106;
.reg .pred %r107;
.reg .u64 %r110;
.reg .u32 %r111;
.reg .u32 %r112;
.reg .pred %r113;
.reg .u64 %r117;
.reg .u32 %r118;
.reg .u64 %r119;
.reg .u64 %r120;
.reg .pred %r121;
.reg .u16 %r122;
.reg .u16 %r123;
.reg .u64 %r124;
.reg .u32 %r125;
mov.u64 %r62,%ar0;
mov.u64 %r63,%ar1;
mov.u64 %r64,%ar2;
.loc 1 277 5
ld.u64 %r65,[%r64+16];
setp.eq.u64 %r66,%r65,0;
@ %r66 bra $L2;
.loc 1 274 6
ld.u64 %r40,[%r64];
.loc 1 292 20
ld.u64 %r60,[%r63];
.loc 1 288 5
ld.u32 %r49,[%r63+12];
.loc 1 272 23
mov.u64 %r34,0;
.loc 1 275 6
mov.u64 %r35,%r34;
bra $L3;
$L2:
.loc 1 278 19
mov.u32 %r67,0;
st.u32 [%r64+8],%r67;
.loc 1 279 10
mov.u32 %r61,%r67;
bra $L1;
$L5:
.loc 1 284 6
ld.u64 %r34,[%r40];
.loc 1 285 8
ld.u64 %r35,[%r40+8];
.loc 1 286 7
add.u64 %r40,%r40,16;
$L3:
.loc 1 283 9
setp.eq.u64 %r68,%r35,0;
@ %r68 bra $L5;
.loc 1 289 11
cvt.s64.s32 %r57,%r49;
.loc 1 289 6
setp.lt.u64 %r69,%r35,%r57;
@ %r69 bra $L6;
.loc 1 289 21
ld.s16 %r23,[%r63+16];
.loc 1 289 16
cvt.u16.u32 %r71,%r23;
and.b16 %r70,%r71,1152;
setp.ne.u16 %r72,%r70,0;
@ %r72 bra $L7;
.loc 1 334 11
cvt.u32.u64 %r73,%r35;
cvt.s64.s32 %r56,%r73;
bra $L8;
$L7:
.loc 1 292 34
ld.u64 %r24,[%r63+24];
.loc 1 292 25
sub.u64 %r25,%r60,%r24;
.loc 1 292 8
cvt.u32.u64 %r54,%r25;
.loc 1 300 32
ld.u32 %r74,[%r63+32];
add.u32 %r76,%r74,%r74;
add.u32 %r77,%r76,%r74;
.loc 1 300 8
shr.u32 %r78,%r77,31;
add.u32 %r79,%r78,%r77;
shr.s32 %r51,%r79,1;
.loc 1 301 16
cvt.s64.s32 %r28,%r51;
.loc 1 301 25
cvt.s64.s32 %r29,%r54;
.loc 1 301 31
add.u64 %r81,%r35,1;
add.u64 %r82,%r81,%r29;
.loc 1 301 7
setp.ge.u64 %r83,%r28,%r82;
@ %r83 bra $L9;
.loc 1 302 28
cvt.u32.u64 %r85,%r35;
add.u32 %r84,%r85,1;
add.u32 %r51,%r84,%r54;
.loc 1 306 28
cvt.s64.s32 %r28,%r51;
$L9:
.loc 1 303 7
cvt.u16.u32 %r88,%r23;
and.b16 %r87,%r88,1024;
setp.eq.u16 %r89,%r87,0;
@ %r89 bra $L10;
.loc 1 306 28
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r62;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r92,[%value_in];
}
mov.u64 %r50,%r92;
.loc 1 307 8
setp.ne.u64 %r93,%r92,0;
@ %r93 bra $L11;
.loc 1 309 18
mov.u32 %r94,12;
st.u32 [%r62],%r94;
.loc 1 310 6
bra $L12;
$L11:
.loc 1 312 5
ld.u64 %r98,[%r63+24];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r50;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r98;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r99,[%value_in];
}
.loc 1 313 16
ld.u16 %r101,[%r63+16];
and.b16 %r100,%r101,-1153;
or.b16 %r102,%r100,128;
st.u16 [%r63+16],%r102;
bra $L13;
$L10:
.loc 1 317 28
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r62;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r106,[%value_in];
}
mov.u64 %r50,%r106;
.loc 1 319 8
setp.ne.u64 %r107,%r106,0;
@ %r107 bra $L13;
.loc 1 321 6
ld.u64 %r110,[%r63+24];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r62;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r110;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 324 18
mov.u32 %r111,12;
st.u32 [%r62],%r111;
.loc 1 325 6
bra $L12;
$L13:
.loc 1 328 18
st.u64 [%r63+24],%r50;
.loc 1 329 17
add.u64 %r60,%r50,%r29;
.loc 1 329 11
st.u64 [%r63],%r60;
.loc 1 330 18
st.u32 [%r63+32],%r51;
.loc 1 331 6
cvt.u32.u64 %r49,%r35;
.loc 1 332 21
sub.u32 %r112,%r51,%r54;
.loc 1 332 11
st.u32 [%r63+12],%r112;
.loc 1 334 11
cvt.s64.s32 %r56,%r49;
.loc 1 334 6
setp.le.u64 %r113,%r56,%r35;
@ %r113 bra $L15;
$L6:
.loc 1 335 6
cvt.u32.u64 %r49,%r35;
.loc 1 334 11
cvt.s64.s32 %r56,%r49;
mov.u64 %r57,%r56;
bra $L8;
$L15:
mov.u64 %r57,%r56;
$L8:
.loc 1 336 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r60;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r34;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r57;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r117,[%value_in];
}
.loc 1 337 10
ld.u32 %r118,[%r63+12];
sub.u32 %r49,%r118,%r49;
st.u32 [%r63+12],%r49;
.loc 1 338 10
ld.u64 %r119,[%r63];
add.u64 %r60,%r119,%r57;
st.u64 [%r63],%r60;
.loc 1 340 5
add.u64 %r34,%r34,%r56;
.loc 1 341 7
sub.u64 %r35,%r35,%r56;
.loc 1 342 34
ld.u64 %r120,[%r64+16];
sub.u64 %r46,%r120,%r56;
st.u64 [%r64+16],%r46;
.loc 1 342 9
setp.ne.u64 %r121,%r46,0;
@ %r121 bra $L3;
bra $L2;
$L12:
.loc 1 349 14
ld.u16 %r123,[%r63+16];
or.b16 %r122,%r123,64;
st.u16 [%r63+16],%r122;
.loc 1 350 18
mov.u64 %r124,0;
st.u64 [%r64+16],%r124;
.loc 1 351 19
cvt.u32.u64 %r125,%r124;
st.u32 [%r64+8],%r125;
.loc 1 352 10
mov.u32 %r61,-1;
$L1:
.loc 1 353 1
mov.u32 %value,%r61;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _svfiprintf_r
.visible .func (.param .u32 %value_out) _svfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[208];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r29;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r36;
.reg .u64 %r50;
.reg .u32 %r54;
.reg .u32 %r66;
.reg .u32 %r90;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .u64 %r105;
.reg .u64 %r111;
.reg .u64 %r116;
.reg .u64 %r118;
.reg .u64 %r122;
.reg .u32 %r123;
.reg .u32 %r130;
.reg .u64 %r131;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u32 %r135;
.reg .u32 %r136;
.reg .u64 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u64 %r140;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .u32 %r146;
.reg .u64 %r148;
.reg .u64 %r149;
.reg .u64 %r150;
.reg .u64 %r151;
.reg .u64 %r153;
.reg .u64 %r154;
.reg .u64 %r156;
.reg .u64 %r157;
.reg .u64 %r159;
.reg .u32 %r160;
.reg .u32 %r162;
.reg .u32 %r163;
.reg .u64 %r168;
.reg .u64 %r169;
.reg .u64 %r170;
.reg .u64 %r171;
.reg .u64 %r173;
.reg .u64 %r174;
.reg .u64 %r175;
.reg .u64 %r176;
.reg .u64 %r177;
.reg .u64 %r178;
.reg .u64 %r179;
.reg .u64 %r180;
.reg .u64 %r181;
.reg .u64 %r182;
.reg .u64 %r184;
.reg .u64 %r185;
.reg .u64 %r187;
.reg .u64 %r188;
.reg .u64 %r189;
.reg .u64 %r190;
.reg .u64 %r192;
.reg .u64 %r193;
.reg .u32 %r195;
.reg .u32 %r196;
.reg .u32 %r197;
.reg .u32 %r198;
.reg .u32 %r199;
.reg .u64 %r204;
.reg .u32 %r205;
.reg .u32 %r206;
.reg .u64 %r207;
.reg .u32 %r209;
.reg .u64 %r211;
.reg .u64 %r212;
.reg .u64 %r213;
.reg .u64 %r214;
.reg .u64 %r216;
.reg .u32 %r217;
.reg .u32 %r218;
.reg .u32 %r222;
.reg .u64 %r223;
.reg .u64 %r224;
.reg .u64 %r225;
.reg .u64 %r226;
.reg .u16 %r235;
.reg .u16 %r236;
.reg .pred %r237;
.reg .u64 %r238;
.reg .pred %r239;
.reg .u64 %r241;
.reg .u64 %r242;
.reg .pred %r243;
.reg .u32 %r244;
.reg .u32 %r245;
.reg .u64 %r246;
.reg .u32 %r247;
.reg .u16 %r249;
.reg .u32 %r250;
.reg .u32 %r251;
.reg .u32 %r254;
.reg .u32 %r255;
.reg .u16 %r256;
.reg .u16 %r257;
.reg .u16 %r258;
.reg .u32 %r259;
.reg .u16 %r260;
.reg .pred %r261;
.reg .u16 %r263;
.reg .u32 %r264;
.reg .u32 %r265;
.reg .u32 %r268;
.reg .u32 %r269;
.reg .u16 %r270;
.reg .u16 %r271;
.reg .u16 %r272;
.reg .u32 %r273;
.reg .u16 %r274;
.reg .pred %r275;
.reg .u64 %r276;
.reg .pred %r277;
.reg .u64 %r278;
.reg .u64 %r279;
.reg .u32 %r280;
.reg .pred %r281;
.reg .u32 %r286;
.reg .pred %r287;
.reg .pred %r288;
.reg .u32 %r289;
.reg .pred %r290;
.reg .pred %r291;
.reg .pred %r292;
.reg .pred %r293;
.reg .pred %r294;
.reg .pred %r295;
.reg .pred %r296;
.reg .pred %r297;
.reg .pred %r298;
.reg .pred %r299;
.reg .pred %r300;
.reg .pred %r301;
.reg .pred %r302;
.reg .u32 %r303;
.reg .pred %r304;
.reg .pred %r305;
.reg .pred %r306;
.reg .pred %r307;
.reg .pred %r308;
.reg .pred %r309;
.reg .pred %r310;
.reg .pred %r311;
.reg .pred %r312;
.reg .pred %r313;
.reg .pred %r314;
.reg .pred %r315;
.reg .pred %r316;
.reg .pred %r317;
.reg .pred %r318;
.reg .pred %r319;
.reg .pred %r320;
.reg .pred %r321;
.reg .pred %r322;
.reg .u32 %r323;
.reg .pred %r324;
.reg .u32 %r325;
.reg .pred %r326;
.reg .pred %r327;
.reg .pred %r328;
.reg .pred %r329;
.reg .u32 %r331;
.reg .u32 %r332;
.reg .u32 %r333;
.reg .pred %r334;
.reg .u32 %r336;
.reg .u32 %r337;
.reg .u32 %r338;
.reg .pred %r341;
.reg .u16 %r342;
.reg .pred %r343;
.reg .u32 %r344;
.reg .u32 %r345;
.reg .pred %r346;
.reg .u32 %r347;
.reg .u32 %r348;
.reg .pred %r349;
.reg .u32 %r350;
.reg .pred %r351;
.reg .u32 %r352;
.reg .pred %r353;
.reg .u16 %r354;
.reg .pred %r357;
.reg .u32 %r358;
.reg .pred %r359;
.reg .u32 %r360;
.reg .u64 %r361;
.reg .u32 %r362;
.reg .pred %r363;
.reg .u64 %r364;
.reg .u32 %r365;
.reg .pred %r366;
.reg .u64 %r367;
.reg .u32 %r368;
.reg .pred %r369;
.reg .u32 %r370;
.reg .pred %r371;
.reg .u32 %r372;
.reg .pred %r373;
.reg .u32 %r374;
.reg .pred %r375;
.reg .u16 %r376;
.reg .u32 %r377;
.reg .u32 %r378;
.reg .u32 %r379;
.reg .pred %r380;
.reg .pred %r381;
.reg .u32 %r383;
.reg .u64 %r385;
.reg .u64 %r386;
.reg .pred %r387;
.reg .u64 %r388;
.reg .u64 %r390;
.reg .u32 %r391;
.reg .pred %r392;
.reg .u32 %r393;
.reg .pred %r394;
.reg .u32 %r395;
.reg .pred %r396;
.reg .u16 %r397;
.reg .pred %r398;
.reg .u32 %r399;
.reg .u32 %r400;
.reg .pred %r401;
.reg .u32 %r402;
.reg .pred %r403;
.reg .u32 %r404;
.reg .pred %r405;
.reg .u16 %r406;
.reg .u32 %r407;
.reg .pred %r408;
.reg .pred %r409;
.reg .u32 %r410;
.reg .u32 %r411;
.reg .pred %r412;
.reg .u32 %r414;
.reg .u32 %r415;
.reg .u32 %r417;
.reg .u32 %r418;
.reg .u16 %r419;
.reg .u16 %r420;
.reg .u16 %r421;
.reg .u32 %r422;
.reg .u16 %r423;
.reg .pred %r424;
.reg .pred %r425;
.reg .pred %r426;
.reg .u16 %r428;
.reg .u16 %r429;
.reg .u16 %r431;
.reg .u32 %r433;
.reg .pred %r435;
.reg .u16 %r437;
.reg .u32 %r438;
.reg .u32 %r439;
.reg .u16 %r441;
.reg .u16 %r442;
.reg .u16 %r444;
.reg .u16 %r445;
.reg .u32 %r447;
.reg .u16 %r448;
.reg .pred %r449;
.reg .u64 %r452;
.reg .u32 %r453;
.reg .u64 %r456;
.reg .pred %r457;
.reg .u16 %r459;
.reg .u16 %r460;
.reg .u32 %r461;
.reg .u64 %r463;
.reg .u16 %r465;
.reg .u16 %r466;
.reg .u32 %r467;
.reg .pred %r470;
.reg .u64 %r473;
.reg .u64 %r474;
.reg .u64 %r475;
.reg .u32 %r476;
.reg .pred %r477;
.reg .u64 %r480;
.reg .pred %r481;
.reg .pred %r482;
.reg .u32 %r483;
.reg .pred %r484;
.reg .u32 %r485;
.reg .pred %r486;
.reg .u32 %r487;
.reg .pred %r488;
.reg .pred %r490;
.reg .pred %r491;
.reg .pred %r492;
.reg .u64 %r494;
.reg .pred %r495;
.reg .u32 %r500;
.reg .pred %r501;
.reg .pred %r502;
.reg .pred %r504;
.reg .u32 %r509;
.reg .pred %r510;
.reg .u16 %r511;
.reg .u32 %r512;
.reg .pred %r513;
.reg .u64 %r515;
.reg .pred %r516;
.reg .u32 %r521;
.reg .pred %r522;
.reg .u64 %r525;
.reg .pred %r526;
.reg .u32 %r531;
.reg .pred %r532;
.reg .pred %r533;
.reg .pred %r534;
.reg .pred %r535;
.reg .u64 %r537;
.reg .pred %r538;
.reg .u32 %r543;
.reg .pred %r544;
.reg .pred %r545;
.reg .pred %r547;
.reg .u32 %r552;
.reg .pred %r553;
.reg .pred %r554;
.reg .pred %r555;
.reg .u64 %r557;
.reg .pred %r558;
.reg .u32 %r563;
.reg .pred %r564;
.reg .pred %r565;
.reg .pred %r567;
.reg .u32 %r572;
.reg .pred %r573;
.reg .u32 %r574;
.reg .pred %r575;
.reg .u32 %r580;
.reg .pred %r581;
.reg .u32 %r582;
.reg .pred %r583;
.reg .pred %r584;
.reg .pred %r585;
.reg .u64 %r587;
.reg .pred %r588;
.reg .u32 %r593;
.reg .pred %r594;
.reg .pred %r595;
.reg .pred %r597;
.reg .u32 %r602;
.reg .pred %r603;
.reg .u32 %r604;
.reg .pred %r605;
.reg .u32 %r606;
.reg .u32 %r611;
.reg .pred %r612;
.reg .u64 %r613;
.reg .pred %r614;
.reg .u64 %r618;
.reg .u32 %r619;
.reg .u16 %r620;
.reg .u16 %r621;
.reg .pred %r622;
.reg .pred %r624;
.reg .pred %r625;
.reg .u32 %r627;
.reg .u32 %r628;
.reg .u32 %r630;
.reg .u32 %r631;
.reg .u16 %r632;
.reg .u16 %r633;
.reg .u16 %r634;
.reg .u32 %r635;
.reg .u16 %r636;
.reg .pred %r637;
.reg .pred %r638;
.reg .u64 %r639;
.reg .u64 %r641;
.reg .u32 %r642;
.reg .u32 %r658;
.reg .u64 %r659;
.reg .u64 %r660;
.reg .u64 %r661;
mov.u64 %r223,%ar0;
mov.u64 %r224,%ar1;
mov.u64 %r225,%ar2;
mov.u64 %r226,%ar3;
.loc 1 869 12
ld.u16 %r236,[%r224+16];
and.b16 %r235,%r236,128;
setp.eq.u16 %r237,%r235,0;
@ %r237 bra $L20;
.loc 1 869 33
ld.u64 %r238,[%r224+24];
setp.ne.u64 %r239,%r238,0;
@ %r239 bra $L20;
.loc 1 871 28
mov.u64 %r241,64;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r241;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r242,[%value_in];
}
.loc 1 871 26
st.u64 [%r224],%r242;
.loc 1 871 17
st.u64 [%r224+24],%r242;
.loc 1 872 6
setp.ne.u64 %r243,%r242,0;
@ %r243 bra $L21;
.loc 1 874 17
mov.u32 %r244,12;
st.u32 [%r223],%r244;
.loc 1 875 11
mov.u32 %r222,-1;
bra $L19;
$L21:
.loc 1 877 17
cvt.u32.u64 %r245,%r241;
st.u32 [%r224+32],%r245;
$L20:
.loc 1 883 14
st.u64 [%frame+168],%frame;
.loc 1 884 16
mov.u64 %r246,0;
st.u64 [%frame+184],%r246;
.loc 1 885 17
cvt.u32.u64 %r247,%r246;
st.u32 [%frame+176],%r247;
.loc 1 883 21
mov.u64 %r140,%frame;
.loc 1 707 8
mov.u64 %r34,%r246;
.loc 1 887 6
cvt.u32.u64 %r222,%r34;
.loc 1 918 4
add.u64 %r659,%frame,168;
.loc 1 1687 4
add.u64 %r660,%frame,192;
.loc 1 1685 4
add.u64 %r661,%frame,194;
$L23:
.loc 1 914 24
ld.s8 %r142,[%r225];
.loc 1 914 37
cvt.u16.u32 %r249,%r142;
set.u32.ne.u16 %r250,%r249,0;
neg.s32 %r251,%r250;
set.u32.ne.u16 %r254,%r249,37;
neg.s32 %r255,%r254;
cvt.u16.u32 %r257,%r251;
cvt.u16.u32 %r258,%r255;
and.b16 %r256,%r257,%r258;
.loc 1 914 23
cvt.u32.u16 %r259,%r256;
cvt.u16.u8 %r260,%r259;
setp.eq.u16 %r261,%r260,0;
@ %r261 bra $L147;
mov.u64 %r150,%r225;
$L25:
mov.u64 %r169,%r150;
.loc 1 915 25
add.u64 %r150,%r150,1;
.loc 1 914 24
ld.s8 %r142,[%r150];
.loc 1 914 37
cvt.u16.u32 %r263,%r142;
set.u32.ne.u16 %r264,%r263,0;
neg.s32 %r265,%r264;
set.u32.ne.u16 %r268,%r263,37;
neg.s32 %r269,%r268;
cvt.u16.u32 %r271,%r265;
cvt.u16.u32 %r272,%r269;
and.b16 %r270,%r271,%r272;
.loc 1 914 23
cvt.u32.u16 %r273,%r270;
cvt.u16.u8 %r274,%r273;
setp.ne.u16 %r275,%r274,0;
@ %r275 bra $L25;
.loc 1 917 16
sub.u64 %r276,%r150,%r225;
.loc 1 917 10
cvt.u32.u64 %r143,%r276;
.loc 1 917 6
setp.eq.u32 %r277,%r143,0;
@ %r277 bra $L24;
.loc 1 918 4
st.u64 [%r140],%r225;
cvt.s64.s32 %r29,%r143;
st.u64 [%r140+8],%r29;
ld.u64 %r279,[%frame+184];
add.u64 %r278,%r279,%r29;
st.u64 [%frame+184],%r278;
ld.u32 %r280,[%frame+176];
add.u32 %r33,%r280,1;
st.u32 [%frame+176],%r33;
setp.gt.s32 %r281,%r33,7;
@ %r281 bra $L26;
add.u64 %r140,%r140,16;
bra $L27;
$L26:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r286,[%value_in];
}
setp.ne.u32 %r287,%r286,0;
@ %r287 bra $L28;
mov.u64 %r140,%frame;
$L27:
.loc 1 919 8
add.u32 %r222,%r222,%r143;
.loc 1 925 21
ld.s8 %r142,[%r169+1];
bra $L24;
$L147:
.loc 1 914 23
mov.u64 %r150,%r225;
$L24:
.loc 1 925 20
setp.eq.u32 %r288,%r142,0;
@ %r288 bra $L29;
.loc 1 929 6
add.u64 %r225,%r150,1;
.loc 1 935 8
mov.u32 %r289,0;
st.u8 [%frame+194],%r289;
.loc 1 947 14
ld.s8 %r218,[%r150+1];
mov.u32 %r54,0;
mov.u32 %r66,%r54;
.loc 1 934 8
mov.u32 %r135,-1;
.loc 1 933 9
mov.u32 %r134,%r54;
.loc 1 931 9
mov.u32 %r132,%r54;
.loc 1 1060 6
mov.u32 %r658,%r54;
bra $L30;
$L148:
.loc 1 1007 10
mov.u64 %r226,%r174;
$L30:
.loc 1 947 18
add.u64 %r225,%r225,1;
.loc 1 947 12
mov.u32 %r130,%r218;
$L31:
.loc 1 948 11
setp.eq.u32 %r290,%r130,88;
@ %r290 bra $L32;
setp.gt.s32 %r291,%r130,88;
@ %r291 bra $L33;
setp.eq.u32 %r292,%r130,46;
@ %r292 bra $L34;
setp.gt.s32 %r293,%r130,46;
@ %r293 bra $L35;
setp.eq.u32 %r294,%r130,42;
@ %r294 bra $L36;
setp.gt.s32 %r295,%r130,42;
@ %r295 bra $L37;
setp.eq.u32 %r296,%r130,32;
@ %r296 bra $L38;
setp.eq.u32 %r297,%r130,35;
@ %r297 bra $L39;
bra $L236;
$L37:
setp.eq.u32 %r298,%r130,43;
@ %r298 bra $L41;
setp.eq.u32 %r299,%r130,45;
@ %r299 bra $L42;
bra $L43;
$L35:
setp.eq.u32 %r300,%r130,68;
@ %r300 bra $L44;
setp.gt.s32 %r301,%r130,68;
@ %r301 bra $L45;
setp.eq.u32 %r302,%r130,48;
@ %r302 bra $L46;
add.u32 %r303,%r130,-49;
setp.gt.u32 %r304,%r303,8;
@ %r304 bra $L43;
mov.u64 %r179,%r225;
.loc 1 1077 6
mov.u32 %r134,0;
add.u32 %r642,%r130,-48;
bra $L47;
$L45:
.loc 1 948 11
setp.eq.u32 %r305,%r130,79;
@ %r305 bra $L48;
setp.eq.u32 %r306,%r130,85;
@ %r306 bra $L49;
bra $L43;
$L33:
setp.eq.u32 %r307,%r130,111;
@ %r307 bra $L50;
setp.gt.s32 %r308,%r130,111;
@ %r308 bra $L51;
setp.eq.u32 %r309,%r130,105;
@ %r309 bra $L52;
setp.gt.s32 %r310,%r130,105;
@ %r310 bra $L53;
setp.eq.u32 %r311,%r130,100;
@ %r311 bra $L52;
setp.eq.u32 %r312,%r130,104;
@ %r312 bra $L54;
setp.eq.u32 %r313,%r130,99;
@ %r313 bra $L55;
bra $L43;
$L53:
setp.eq.u32 %r314,%r130,108;
@ %r314 bra $L56;
setp.eq.u32 %r315,%r130,110;
@ %r315 bra $L57;
bra $L43;
$L51:
setp.eq.u32 %r316,%r130,115;
@ %r316 bra $L58;
setp.gt.s32 %r317,%r130,115;
@ %r317 bra $L59;
setp.eq.u32 %r318,%r130,112;
@ %r318 bra $L60;
setp.eq.u32 %r319,%r130,113;
@ %r319 bra $L61;
bra $L43;
$L59:
setp.eq.u32 %r320,%r130,117;
@ %r320 bra $L62;
setp.ne.u32 %r321,%r130,120;
@ %r321 bra $L43;
setp.eq.u32 %r322,%r54,0;
@ %r322 bra $L63;
cvt.u32.u32 %r323,%r66;
st.u8 [%frame+194],%r323;
$L63:
.loc 1 1538 10
cvta.const.u64 %r34,$LC1;
bra $L64;
$L52:
setp.eq.u32 %r324,%r54,0;
@ %r324 bra $L66;
cvt.u32.u32 %r325,%r66;
st.u8 [%frame+194],%r325;
bra $L66;
$L42:
.loc 1 1022 14
ld.s8 %r218,[%r225];
bra $L67;
$L38:
ld.s8 %r218,[%r225];
.loc 1 964 7
setp.ne.u32 %r326,%r66,0;
selp.u32 %r54,%r54,1,%r326;
selp.u32 %r66,%r66,32,%r326;
bra $L30;
$L39:
.loc 1 968 10
or.b32 %r132,%r132,1;
.loc 1 947 14
ld.s8 %r218,[%r225];
.loc 1 969 4
bra $L30;
$L36:
.loc 1 1007 10
add.u64 %r174,%r226,4;
ld.u32 %r134,[%r226];
.loc 1 1022 14
ld.s8 %r218,[%r225];
.loc 1 1011 7
setp.ge.s32 %r327,%r134,0;
@ %r327 bra $L148;
.loc 1 1013 10
neg.s32 %r134,%r134;
.loc 1 1007 10
mov.u64 %r226,%r174;
$L67:
.loc 1 1016 10
or.b32 %r132,%r132,4;
.loc 1 1017 4
bra $L30;
$L41:
.loc 1 947 14
ld.s8 %r218,[%r225];
.loc 1 1020 4
mov.u32 %r54,1;
.loc 1 1019 9
mov.u32 %r66,%r130;
.loc 1 1020 4
bra $L30;
$L34:
.loc 1 1022 18
add.u64 %r159,%r225,1;
.loc 1 1022 12
ld.s8 %r130,[%r225];
.loc 1 1022 7
setp.eq.u32 %r328,%r130,42;
@ %r328 bra $L69;
.loc 1 1061 11
add.u32 %r642,%r130,-48;
.loc 1 1061 10
setp.le.u32 %r329,%r642,9;
@ %r329 bra $L70;
.loc 1 1022 18
mov.u64 %r225,%r159;
.loc 1 1060 6
mov.u32 %r135,%r658;
bra $L31;
$L69:
.loc 1 1052 10
ld.u32 %r160,[%r226];
max.s32 %r135,%r160,-1;
.loc 1 947 14
ld.s8 %r218,[%r225+1];
.loc 1 1052 10
add.u64 %r226,%r226,4;
.loc 1 1022 18
mov.u64 %r225,%r159;
.loc 1 1058 5
bra $L30;
$L70:
mov.u64 %r36,%r159;
.loc 1 1060 6
mov.u32 %r135,%r658;
$L72:
.loc 1 1062 12
shl.b32 %r331,%r135,2;
add.u32 %r332,%r331,%r135;
add.u32 %r333,%r332,%r332;
.loc 1 1062 7
add.u32 %r135,%r333,%r642;
mov.u64 %r213,%r36;
add.u64 %r36,%r36,1;
mov.u64 %r225,%r36;
.loc 1 1063 8
ld.s8 %r130,[%r213];
.loc 1 1061 11
add.u32 %r642,%r130,-48;
.loc 1 1061 10
setp.le.u32 %r334,%r642,9;
@ %r334 bra $L72;
bra $L31;
$L46:
.loc 1 1073 10
or.b32 %r132,%r132,128;
.loc 1 947 14
ld.s8 %r218,[%r225];
.loc 1 1074 4
bra $L30;
$L47:
.loc 1 1079 12
shl.b32 %r336,%r134,2;
add.u32 %r337,%r336,%r134;
add.u32 %r338,%r337,%r337;
.loc 1 1079 7
add.u32 %r134,%r642,%r338;
mov.u64 %r148,%r179;
add.u64 %r179,%r179,1;
mov.u64 %r225,%r179;
.loc 1 1080 8
ld.s8 %r130,[%r148];
.loc 1 1081 13
add.u32 %r642,%r130,-48;
.loc 1 1081 4
setp.le.u32 %r341,%r642,9;
@ %r341 bra $L47;
bra $L31;
$L54:
.loc 1 1107 11
or.b32 %r132,%r132,64;
.loc 1 947 14
ld.s8 %r218,[%r225];
.loc 1 1108 4
bra $L30;
$L56:
.loc 1 1111 8
ld.s8 %r218,[%r225];
.loc 1 1111 7
cvt.u16.u32 %r342,%r218;
setp.ne.u16 %r343,%r342,108;
@ %r343 bra $L73;
.loc 1 1113 11
or.b32 %r132,%r132,32;
.loc 1 947 14
ld.s8 %r218,[%r225+1];
.loc 1 1112 8
add.u64 %r225,%r225,1;
bra $L30;
$L73:
.loc 1 1116 11
or.b32 %r132,%r132,16;
bra $L30;
$L61:
.loc 1 1119 10
or.b32 %r132,%r132,32;
.loc 1 947 14
ld.s8 %r218,[%r225];
.loc 1 1120 4
bra $L30;
$L55:
.loc 1 1178 9
ld.u32 %r344,[%r226];
st.u8 [%frame+128],%r344;
.loc 1 1181 9
mov.u32 %r345,0;
st.u8 [%frame+194],%r345;
.loc 1 1178 11
add.u64 %r226,%r226,4;
.loc 1 1182 4
mov.u32 %r139,1;
.loc 1 1179 10
mov.u32 %r136,%r139;
.loc 1 1162 7
add.u64 %r131,%frame,128;
.loc 1 1182 4
bra $L74;
$L44:
setp.eq.u32 %r346,%r54,0;
@ %r346 bra $L75;
cvt.u32.u32 %r347,%r66;
st.u8 [%frame+194],%r347;
$L75:
.loc 1 1184 10
or.b32 %r132,%r132,16;
$L66:
.loc 1 1188 13
and.b32 %r348,%r132,32;
setp.eq.u32 %r349,%r348,0;
@ %r349 bra $L76;
add.u64 %r175,%r226,7;
and.b64 %r187,%r175,-8;
add.u64 %r226,%r187,8;
ld.u64 %r50,[%r187];
mov.u64 %r137,%r50;
bra $L77;
$L76:
and.b32 %r350,%r132,16;
setp.eq.u32 %r351,%r350,0;
@ %r351 bra $L78;
add.u64 %r177,%r226,7;
and.b64 %r176,%r177,-8;
add.u64 %r226,%r176,8;
ld.u64 %r50,[%r176];
mov.u64 %r137,%r50;
bra $L77;
$L78:
.loc 1 1007 10
ld.u32 %r198,[%r226];
add.u64 %r226,%r226,4;
.loc 1 1188 13
and.b32 %r352,%r132,64;
setp.eq.u32 %r353,%r352,0;
@ %r353 bra $L79;
cvt.u16.u32 %r354,%r198;
cvt.s64.s16 %r137,%r354;
.loc 1 1190 8
mov.u64 %r50,%r137;
bra $L77;
$L79:
.loc 1 1188 13
cvt.s64.s32 %r137,%r198;
.loc 1 1190 8
mov.u64 %r50,%r137;
$L77:
.loc 1 1190 7
setp.ge.s64 %r357,%r50,0;
@ %r357 bra $L80;
.loc 1 1196 12
neg.s64 %r137,%r137;
.loc 1 1197 10
mov.u32 %r358,45;
st.u8 [%frame+194],%r358;
mov.u32 %r199,45;
.loc 1 1199 9
mov.u32 %r138,1;
bra $L81;
$L57:
setp.eq.u32 %r359,%r54,0;
@ %r359 bra $L82;
cvt.u32.u32 %r360,%r66;
st.u8 [%frame+194],%r360;
$L82:
.loc 1 1188 13
add.u64 %r361,%r226,7;
and.b64 %r192,%r361,-8;
ld.u64 %r193,[%r192];
add.u64 %r226,%r192,8;
.loc 1 1387 14
and.b32 %r362,%r132,32;
.loc 1 1387 7
setp.eq.u32 %r363,%r362,0;
@ %r363 bra $L83;
.loc 1 1388 34
cvt.s64.s32 %r364,%r222;
st.u64 [%r193],%r364;
bra $L23;
$L83:
.loc 1 1391 14
and.b32 %r365,%r132,16;
.loc 1 1391 7
setp.eq.u32 %r366,%r365,0;
@ %r366 bra $L85;
.loc 1 1392 34
cvt.s64.s32 %r367,%r222;
st.u64 [%r193],%r367;
bra $L23;
$L85:
.loc 1 1393 19
and.b32 %r368,%r132,64;
.loc 1 1393 12
setp.eq.u32 %r369,%r368,0;
@ %r369 bra $L86;
.loc 1 1394 35
st.u16 [%r193],%r222;
bra $L23;
$L86:
.loc 1 1400 33
st.u32 [%r193],%r222;
bra $L23;
$L48:
.loc 1 1403 10
or.b32 %r132,%r132,16;
$L50:
.loc 1 1406 13
and.b32 %r370,%r132,32;
setp.eq.u32 %r371,%r370,0;
@ %r371 bra $L87;
add.u64 %r156,%r226,7;
and.b64 %r168,%r156,-8;
add.u64 %r226,%r168,8;
ld.u64 %r137,[%r168];
.loc 1 1407 9
mov.u32 %r138,0;
bra $L88;
$L87:
.loc 1 1406 13
and.b32 %r372,%r132,16;
setp.eq.u32 %r373,%r372,0;
@ %r373 bra $L89;
add.u64 %r153,%r226,7;
and.b64 %r154,%r153,-8;
add.u64 %r226,%r154,8;
ld.u64 %r137,[%r154];
.loc 1 1407 9
mov.u32 %r138,%r370;
bra $L88;
$L89:
.loc 1 1007 10
ld.u32 %r197,[%r226];
add.u64 %r226,%r226,4;
.loc 1 1406 13
and.b32 %r374,%r132,64;
setp.eq.u32 %r375,%r374,0;
@ %r375 bra $L90;
cvt.u16.u32 %r376,%r197;
cvt.u64.u16 %r137,%r376;
.loc 1 1407 9
mov.u32 %r138,%r372;
bra $L88;
$L90:
.loc 1 1406 13
cvt.u64.u32 %r137,%r197;
.loc 1 1407 9
mov.u32 %r138,%r374;
bra $L88;
$L60:
.loc 1 1421 25
add.u64 %r173,%r226,7;
and.b64 %r182,%r173,-8;
add.u64 %r226,%r182,8;
.loc 1 1421 11
ld.u64 %r137,[%r182];
.loc 1 1424 10
or.b32 %r132,%r132,2;
.loc 1 1425 10
mov.u32 %r377,48;
st.u8 [%frame+192],%r377;
.loc 1 1426 10
mov.u32 %r378,120;
st.u8 [%frame+193],%r378;
.loc 1 1423 10
cvta.const.u64 %r34,$LC1;
.loc 1 1422 9
mov.u32 %r138,2;
.loc 1 1427 4
bra $L88;
$L58:
.loc 1 1432 7
add.u64 %r189,%r226,7;
and.b64 %r190,%r189,-8;
add.u64 %r226,%r190,8;
ld.u64 %r131,[%r190];
.loc 1 1436 9
mov.u32 %r379,0;
st.u8 [%frame+194],%r379;
.loc 1 1442 7
setp.ne.u64 %r380,%r131,0;
@ %r380 bra $L91;
.loc 1 1444 39
min.u32 %r136,%r135,6;
mov.u32 %r139,%r136;
.loc 1 1443 8
cvta.const.u64 %r131,$LC2;
bra $L74;
$L91:
.loc 1 1511 7
setp.eq.u32 %r381,%r135,-1;
@ %r381 bra $L92;
.loc 1 1517 15
cvt.s64.s32 %r385,%r135;
mov.u32 %r383,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r131;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r383;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r385;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r386,[%value_in];
}
.loc 1 1519 8
setp.eq.u64 %r387,%r386,0;
@ %r387 bra $L93;
.loc 1 1520 15
sub.u64 %r388,%r386,%r131;
.loc 1 1520 11
cvt.u32.u64 %r136,%r388;
.loc 1 1674 7
ld.s8 %r199,[%frame+194];
mov.u32 %r133,%r132;
.loc 1 932 9
mov.u32 %r135,%r383;
bra $L94;
$L92:
.loc 1 1524 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r131;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r390,[%value_in];
}
.loc 1 1524 10
cvt.u32.u64 %r136,%r390;
.loc 1 1674 7
ld.s8 %r199,[%frame+194];
mov.u32 %r133,%r132;
.loc 1 932 9
mov.u32 %r135,0;
bra $L94;
$L49:
.loc 1 1528 10
or.b32 %r132,%r132,16;
$L62:
.loc 1 1531 13
and.b32 %r391,%r132,32;
setp.eq.u32 %r392,%r391,0;
@ %r392 bra $L95;
add.u64 %r180,%r226,7;
and.b64 %r185,%r180,-8;
add.u64 %r226,%r185,8;
ld.u64 %r137,[%r185];
.loc 1 1532 9
mov.u32 %r138,1;
bra $L88;
$L95:
.loc 1 1531 13
and.b32 %r393,%r132,16;
setp.eq.u32 %r394,%r393,0;
@ %r394 bra $L96;
add.u64 %r188,%r226,7;
and.b64 %r184,%r188,-8;
add.u64 %r226,%r184,8;
ld.u64 %r137,[%r184];
.loc 1 1532 9
mov.u32 %r138,1;
bra $L88;
$L96:
.loc 1 1007 10
ld.u32 %r196,[%r226];
add.u64 %r226,%r226,4;
.loc 1 1531 13
and.b32 %r395,%r132,64;
setp.eq.u32 %r396,%r395,0;
@ %r396 bra $L97;
cvt.u16.u32 %r397,%r196;
cvt.u64.u16 %r137,%r397;
.loc 1 1532 9
mov.u32 %r138,1;
bra $L88;
$L97:
.loc 1 1531 13
cvt.u64.u32 %r137,%r196;
.loc 1 1532 9
mov.u32 %r138,1;
bra $L88;
$L32:
setp.eq.u32 %r398,%r54,0;
@ %r398 bra $L98;
cvt.u32.u32 %r399,%r66;
st.u8 [%frame+194],%r399;
$L98:
.loc 1 1535 10
cvta.const.u64 %r34,$LC0;
$L64:
.loc 1 1539 17
and.b32 %r400,%r132,32;
setp.eq.u32 %r401,%r400,0;
@ %r401 bra $L99;
add.u64 %r171,%r226,7;
and.b64 %r170,%r171,-8;
add.u64 %r226,%r170,8;
ld.u64 %r137,[%r170];
bra $L100;
$L99:
and.b32 %r402,%r132,16;
setp.eq.u32 %r403,%r402,0;
@ %r403 bra $L101;
add.u64 %r178,%r226,7;
and.b64 %r151,%r178,-8;
add.u64 %r226,%r151,8;
ld.u64 %r137,[%r151];
bra $L100;
$L101:
.loc 1 1007 10
ld.u32 %r195,[%r226];
add.u64 %r226,%r226,4;
.loc 1 1539 17
and.b32 %r404,%r132,64;
setp.eq.u32 %r405,%r404,0;
@ %r405 bra $L102;
cvt.u16.u32 %r406,%r195;
cvt.u64.u16 %r137,%r406;
bra $L100;
$L102:
cvt.u64.u32 %r137,%r195;
$L100:
.loc 1 1542 14
and.b32 %r407,%r132,1;
.loc 1 1542 7
setp.eq.u32 %r408,%r407,0;
@ %r408 bra $L149;
.loc 1 1542 20
setp.eq.u64 %r409,%r137,0;
@ %r409 bra $L150;
.loc 1 1543 11
mov.u32 %r410,48;
st.u8 [%frame+192],%r410;
.loc 1 1544 11
st.u8 [%frame+193],%r130;
.loc 1 1545 11
or.b32 %r132,%r132,2;
.loc 1 1540 9
mov.u32 %r138,2;
bra $L88;
$L149:
mov.u32 %r138,2;
bra $L88;
$L150:
mov.u32 %r138,2;
$L88:
.loc 1 1552 16
mov.u32 %r411,0;
st.u8 [%frame+194],%r411;
mov.u32 %r199,0;
$L81:
.loc 1 1558 14
setp.eq.u32 %r412,%r135,-1;
@ %r412 bra $L103;
.loc 1 1559 11
and.b32 %r133,%r132,-129;
.loc 1 1567 15
set.u32.ne.u64 %r414,%r137,0;
neg.s32 %r415,%r414;
.loc 1 1567 28
set.u32.ne.u32 %r417,%r135,0;
neg.s32 %r418,%r417;
.loc 1 1567 20
cvt.u16.u32 %r420,%r415;
cvt.u16.u32 %r421,%r418;
or.b16 %r419,%r420,%r421;
.loc 1 1567 7
cvt.u32.u16 %r422,%r419;
cvt.u16.u8 %r423,%r422;
setp.eq.u16 %r424,%r423,0;
@ %r424 bra $L104;
.loc 1 1559 11
mov.u32 %r132,%r133;
$L103:
setp.eq.u32 %r425,%r138,1;
@ %r425 bra $L105;
setp.eq.u32 %r426,%r138,2;
@ %r426 bra $L151;
mov.u64 %r131,%r659;
$L107:
mov.u64 %r181,%r131;
.loc 1 1576 13
add.u64 %r131,%r131,-1;
.loc 1 1576 15
cvt.u16.u64 %r429,%r137;
and.b16 %r428,%r429,7;
add.u16 %r431,%r428,48;
cvt.u32.u16 %r433,%r431;
cvt.s32.s8 %r90,%r433;
.loc 1 1576 13
st.u8 [%r131],%r433;
.loc 1 1577 14
shr.u64 %r137,%r137,3;
.loc 1 1578 6
setp.ne.u64 %r435,%r137,0;
@ %r435 bra $L107;
.loc 1 1580 22
cvt.u16.u32 %r437,%r90;
set.u32.ne.u16 %r438,%r437,48;
neg.s32 %r439,%r438;
.loc 1 1580 9
cvt.u16.u32 %r442,%r132;
and.b16 %r441,%r442,1;
.loc 1 1580 22
cvt.u16.u32 %r445,%r439;
and.b16 %r444,%r445,%r441;
cvt.u32.u16 %r447,%r444;
cvt.u16.u8 %r448,%r447;
setp.ne.u16 %r449,%r448,0;
@ %r449 bra $L108;
.loc 1 1644 21
sub.u64 %r452,%r659,%r131;
.loc 1 1644 9
cvt.u32.u64 %r136,%r452;
mov.u32 %r133,%r132;
bra $L94;
$L108:
.loc 1 1581 13
add.u64 %r157,%r181,-2;
mov.u32 %r453,48;
st.u8 [%r131+-1],%r453;
.loc 1 1644 21
sub.u64 %r456,%r659,%r157;
.loc 1 1644 9
cvt.u32.u64 %r136,%r456;
mov.u32 %r133,%r132;
.loc 1 1581 13
mov.u64 %r131,%r157;
bra $L94;
$L157:
.loc 1 1559 11
mov.u32 %r132,%r133;
$L105:
.loc 1 1586 9
setp.gt.u64 %r457,%r137,9;
@ %r457 bra $L152;
.loc 1 1587 15
cvt.u16.u64 %r460,%r137;
add.u16 %r459,%r460,48;
.loc 1 1587 13
cvt.u32.u16 %r461,%r459;
st.u8 [%frame+167],%r461;
.loc 1 1588 7
mov.u32 %r133,%r132;
mov.u32 %r136,1;
.loc 1 1587 13
add.u64 %r131,%frame,167;
.loc 1 1588 7
bra $L94;
$L152:
.loc 1 1566 7
mov.u64 %r131,%r659;
$L110:
.loc 1 1594 14
add.u64 %r131,%r131,-1;
.loc 1 1594 16
rem.u64 %r463,%r137,10;
cvt.u16.u64 %r466,%r463;
add.u16 %r465,%r466,48;
.loc 1 1594 14
cvt.u32.u16 %r467,%r465;
st.u8 [%r131],%r467;
mov.u64 %r149,%r137;
.loc 1 1615 15
div.u64 %r137,%r137,10;
.loc 1 1616 6
setp.gt.u64 %r470,%r149,9;
@ %r470 bra $L110;
.loc 1 1644 21
sub.u64 %r473,%r659,%r131;
.loc 1 1644 9
cvt.u32.u64 %r136,%r473;
mov.u32 %r133,%r132;
bra $L94;
$L151:
mov.u64 %r131,%r659;
$L106:
.loc 1 1621 13
add.u64 %r131,%r131,-1;
.loc 1 1621 28
and.b64 %r474,%r137,15;
.loc 1 1621 20
add.u64 %r475,%r34,%r474;
.loc 1 1621 13
ld.u8 %r476,[%r475];
st.u8 [%r131],%r476;
.loc 1 1622 14
shr.u64 %r137,%r137,4;
.loc 1 1623 6
setp.ne.u64 %r477,%r137,0;
@ %r477 bra $L106;
.loc 1 1644 21
sub.u64 %r480,%r659,%r131;
.loc 1 1644 9
cvt.u32.u64 %r136,%r480;
mov.u32 %r133,%r132;
bra $L94;
$L104:
.loc 1 1641 32
setp.ne.u32 %r481,%r138,0;
@ %r481 bra $L153;
.loc 1 1641 55
and.b32 %r136,%r132,1;
.loc 1 1641 45
setp.eq.u32 %r482,%r136,0;
@ %r482 bra $L154;
.loc 1 1642 32
mov.u32 %r483,48;
st.u8 [%frame+167],%r483;
mov.u32 %r135,%r138;
add.u64 %r131,%frame,167;
bra $L94;
$L153:
mov.u32 %r135,0;
mov.u32 %r136,%r135;
.loc 1 1566 7
add.u64 %r131,%frame,168;
bra $L94;
$L154:
mov.u32 %r135,%r138;
add.u64 %r131,%frame,168;
bra $L94;
$L236:
setp.eq.u32 %r484,%r54,0;
@ %r484 bra $L111;
$L145:
cvt.u32.u32 %r485,%r66;
st.u8 [%frame+194],%r485;
$L111:
.loc 1 1648 7
setp.eq.u32 %r486,%r130,0;
@ %r486 bra $L29;
$L146:
.loc 1 1652 8
st.u8 [%frame+128],%r130;
.loc 1 1654 9
mov.u32 %r487,0;
st.u8 [%frame+194],%r487;
.loc 1 1655 4
mov.u32 %r139,1;
.loc 1 1653 9
mov.u32 %r136,%r139;
.loc 1 1651 7
add.u64 %r131,%frame,128;
.loc 1 1655 4
bra $L74;
$L93:
.loc 1 1674 7
ld.s8 %r199,[%frame+194];
mov.u32 %r136,%r135;
mov.u32 %r133,%r132;
.loc 1 932 9
cvt.u32.u64 %r135,%r386;
$L94:
.loc 1 1673 10
max.s32 %r139,%r135,%r136;
.loc 1 1674 6
setp.eq.u32 %r488,%r199,0;
@ %r488 bra $L112;
.loc 1 1675 10
add.u32 %r139,%r139,1;
$L112:
.loc 1 1676 13
and.b32 %r102,%r133,2;
.loc 1 1676 6
setp.eq.u32 %r638,%r102,0;
@ %r638 bra $L113;
.loc 1 1677 10
add.u32 %r139,%r139,2;
$L113:
.loc 1 1680 14
and.b32 %r103,%r133,132;
.loc 1 1685 4
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
.loc 1 1680 6
setp.ne.u32 %r490,%r103,0;
@ %r490 bra $L114;
.loc 1 1681 4
sub.u32 %r146,%r134,%r139;
setp.le.s32 %r491,%r146,0;
@ %r491 bra $L114;
setp.le.s32 %r492,%r146,16;
@ ! %r492 bra $L237;
cvta.const.u64 %r641,blanks$1;
bra $L115;
$L237:
cvta.const.u64 %r641,blanks$1;
$L118:
st.u64 [%r140],%r641;
mov.u64 %r494,16;
st.u64 [%r140+8],%r494;
add.u64 %r204,%r204,16;
st.u64 [%frame+184],%r204;
add.u32 %r205,%r205,1;
st.u32 [%frame+176],%r205;
setp.gt.s32 %r495,%r205,7;
@ %r495 bra $L116;
add.u64 %r140,%r140,16;
bra $L117;
$L116:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r500,[%value_in];
}
setp.ne.u32 %r501,%r500,0;
@ %r501 bra $L28;
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
mov.u64 %r140,%frame;
$L117:
add.u32 %r146,%r146,-16;
setp.gt.s32 %r502,%r146,16;
@ %r502 bra $L118;
$L115:
st.u64 [%r140],%r641;
cvt.s64.s32 %r105,%r146;
st.u64 [%r140+8],%r105;
add.u64 %r204,%r204,%r105;
st.u64 [%frame+184],%r204;
add.u32 %r205,%r205,1;
st.u32 [%frame+176],%r205;
setp.gt.s32 %r504,%r205,7;
@ %r504 bra $L119;
add.u64 %r140,%r140,16;
bra $L114;
$L119:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r509,[%value_in];
}
setp.ne.u32 %r510,%r509,0;
@ %r510 bra $L28;
.loc 1 1685 4
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
.loc 1 1681 4
mov.u64 %r140,%frame;
$L114:
.loc 1 1685 4
add.u32 %r209,%r205,1;
add.u64 %r211,%r140,16;
.loc 1 1684 6
ld.s8 %r512,[%frame+194];
cvt.u16.u32 %r511,%r512;
setp.eq.u16 %r513,%r511,0;
@ %r513 bra $L120;
.loc 1 1685 4
st.u64 [%r140],%r661;
mov.u64 %r515,1;
st.u64 [%r140+8],%r515;
add.u64 %r204,%r204,1;
st.u64 [%frame+184],%r204;
st.u32 [%frame+176],%r209;
setp.gt.s32 %r516,%r209,7;
@ %r516 bra $L121;
.loc 1 1687 4
add.u32 %r206,%r205,2;
add.u64 %r207,%r140,32;
mov.u32 %r205,%r209;
mov.u32 %r209,%r206;
.loc 1 1685 4
mov.u64 %r140,%r211;
.loc 1 1687 4
mov.u64 %r211,%r207;
bra $L120;
$L121:
.loc 1 1685 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r521,[%value_in];
}
setp.ne.u32 %r522,%r521,0;
@ %r522 bra $L28;
.loc 1 1687 4
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
add.u32 %r209,%r205,1;
add.u64 %r211,%frame,16;
.loc 1 1685 4
mov.u64 %r140,%frame;
$L120:
.loc 1 1686 6
@ %r638 bra $L122;
.loc 1 1687 4
st.u64 [%r140],%r660;
mov.u64 %r525,2;
st.u64 [%r140+8],%r525;
add.u64 %r204,%r204,2;
st.u64 [%frame+184],%r204;
st.u32 [%frame+176],%r209;
setp.gt.s32 %r526,%r209,7;
@ %r526 bra $L123;
.loc 1 1760 3
mov.u32 %r205,%r209;
add.u32 %r209,%r209,1;
.loc 1 1687 4
mov.u64 %r140,%r211;
.loc 1 1760 3
add.u64 %r211,%r211,16;
bra $L122;
$L123:
.loc 1 1687 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r531,[%value_in];
}
setp.ne.u32 %r532,%r531,0;
@ %r532 bra $L28;
.loc 1 1760 3
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
add.u32 %r209,%r205,1;
add.u64 %r211,%frame,16;
.loc 1 1687 4
mov.u64 %r140,%frame;
$L122:
.loc 1 1690 6
setp.ne.u32 %r533,%r103,128;
@ %r533 bra $L124;
.loc 1 1691 4
sub.u32 %r144,%r134,%r139;
setp.le.s32 %r534,%r144,0;
@ %r534 bra $L124;
setp.le.s32 %r535,%r144,16;
@ %r535 bra $L155;
cvta.const.u64 %r639,zeroes$0;
$L128:
st.u64 [%r140],%r639;
mov.u64 %r537,16;
st.u64 [%r140+8],%r537;
add.u64 %r204,%r204,16;
st.u64 [%frame+184],%r204;
add.u32 %r205,%r205,1;
st.u32 [%frame+176],%r205;
setp.gt.s32 %r538,%r205,7;
@ %r538 bra $L126;
add.u64 %r140,%r140,16;
bra $L127;
$L126:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r543,[%value_in];
}
setp.ne.u32 %r544,%r543,0;
@ %r544 bra $L28;
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
mov.u64 %r140,%frame;
$L127:
add.u32 %r144,%r144,-16;
setp.gt.s32 %r545,%r144,16;
@ %r545 bra $L128;
add.u32 %r205,%r205,1;
add.u64 %r212,%r140,16;
bra $L125;
$L155:
mov.u64 %r212,%r211;
mov.u32 %r205,%r209;
cvta.const.u64 %r639,zeroes$0;
$L125:
st.u64 [%r140],%r639;
cvt.s64.s32 %r111,%r144;
st.u64 [%r140+8],%r111;
add.u64 %r204,%r204,%r111;
st.u64 [%frame+184],%r204;
st.u32 [%frame+176],%r205;
setp.gt.s32 %r547,%r205,7;
@ %r547 bra $L129;
.loc 1 1760 3
add.u32 %r209,%r205,1;
add.u64 %r211,%r212,16;
.loc 1 1691 4
mov.u64 %r140,%r212;
bra $L124;
$L129:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r552,[%value_in];
}
setp.ne.u32 %r553,%r552,0;
@ %r553 bra $L28;
.loc 1 1760 3
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
add.u32 %r209,%r205,1;
add.u64 %r211,%frame,16;
.loc 1 1691 4
mov.u64 %r140,%frame;
$L124:
.loc 1 1694 3
sub.u32 %r162,%r135,%r136;
setp.le.s32 %r554,%r162,0;
@ %r554 bra $L130;
setp.le.s32 %r555,%r162,16;
@ %r555 bra $L156;
cvta.const.u64 %r639,zeroes$0;
$L134:
st.u64 [%r140],%r639;
mov.u64 %r557,16;
st.u64 [%r140+8],%r557;
add.u64 %r204,%r204,16;
st.u64 [%frame+184],%r204;
add.u32 %r205,%r205,1;
st.u32 [%frame+176],%r205;
setp.gt.s32 %r558,%r205,7;
@ %r558 bra $L132;
add.u64 %r140,%r140,16;
bra $L133;
$L132:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r563,[%value_in];
}
setp.ne.u32 %r564,%r563,0;
@ %r564 bra $L28;
ld.u64 %r204,[%frame+184];
ld.u32 %r205,[%frame+176];
mov.u64 %r140,%frame;
$L133:
add.u32 %r162,%r162,-16;
setp.gt.s32 %r565,%r162,16;
@ %r565 bra $L134;
add.u32 %r209,%r205,1;
add.u64 %r214,%r140,16;
bra $L131;
$L156:
mov.u64 %r214,%r211;
cvta.const.u64 %r639,zeroes$0;
$L131:
st.u64 [%r140],%r639;
cvt.s64.s32 %r116,%r162;
st.u64 [%r140+8],%r116;
add.u64 %r204,%r204,%r116;
st.u64 [%frame+184],%r204;
st.u32 [%frame+176],%r209;
setp.gt.s32 %r567,%r209,7;
@ %r567 bra $L135;
.loc 1 1760 3
add.u32 %r209,%r209,1;
add.u64 %r211,%r214,16;
.loc 1 1694 3
mov.u64 %r140,%r214;
bra $L130;
$L135:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r572,[%value_in];
}
setp.ne.u32 %r573,%r572,0;
@ %r573 bra $L28;
.loc 1 1760 3
ld.u64 %r204,[%frame+184];
ld.u32 %r574,[%frame+176];
add.u32 %r209,%r574,1;
add.u64 %r211,%frame,16;
.loc 1 1694 3
mov.u64 %r140,%frame;
$L130:
.loc 1 1760 3
st.u64 [%r140],%r131;
cvt.s64.s32 %r118,%r136;
st.u64 [%r140+8],%r118;
add.u64 %r216,%r118,%r204;
st.u64 [%frame+184],%r216;
st.u32 [%frame+176],%r209;
setp.le.s32 %r575,%r209,7;
@ %r575 bra $L136;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r580,[%value_in];
}
setp.ne.u32 %r581,%r580,0;
@ %r581 bra $L28;
.loc 1 1769 3
ld.u64 %r216,[%frame+184];
.loc 1 1760 3
mov.u64 %r211,%frame;
$L136:
.loc 1 1763 13
and.b32 %r582,%r133,4;
.loc 1 1763 6
setp.eq.u32 %r583,%r582,0;
@ %r583 bra $L137;
.loc 1 1764 4
sub.u32 %r163,%r134,%r139;
setp.le.s32 %r584,%r163,0;
@ %r584 bra $L137;
ld.u32 %r217,[%frame+176];
setp.le.s32 %r585,%r163,16;
@ ! %r585 bra $L238;
cvta.const.u64 %r641,blanks$1;
bra $L138;
$L238:
cvta.const.u64 %r641,blanks$1;
$L141:
st.u64 [%r211],%r641;
mov.u64 %r587,16;
st.u64 [%r211+8],%r587;
add.u64 %r216,%r216,16;
st.u64 [%frame+184],%r216;
add.u32 %r217,%r217,1;
st.u32 [%frame+176],%r217;
setp.gt.s32 %r588,%r217,7;
@ %r588 bra $L139;
add.u64 %r211,%r211,16;
bra $L140;
$L139:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r593,[%value_in];
}
setp.ne.u32 %r594,%r593,0;
@ %r594 bra $L28;
ld.u64 %r216,[%frame+184];
ld.u32 %r217,[%frame+176];
mov.u64 %r211,%frame;
$L140:
add.u32 %r163,%r163,-16;
setp.gt.s32 %r595,%r163,16;
@ %r595 bra $L141;
$L138:
st.u64 [%r211],%r641;
cvt.s64.s32 %r122,%r163;
st.u64 [%r211+8],%r122;
add.u64 %r216,%r216,%r122;
st.u64 [%frame+184],%r216;
add.u32 %r123,%r217,1;
st.u32 [%frame+176],%r123;
setp.le.s32 %r597,%r123,7;
@ %r597 bra $L137;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r602,[%value_in];
}
setp.ne.u32 %r603,%r602,0;
@ %r603 bra $L28;
.loc 1 1769 3
ld.u64 %r216,[%frame+184];
$L137:
.loc 1 1767 33
max.s32 %r604,%r134,%r139;
.loc 1 1767 7
add.u32 %r222,%r222,%r604;
.loc 1 1769 3
setp.ne.u64 %r605,%r216,0;
@ %r605 bra $L142;
$L143:
mov.u32 %r606,0;
st.u32 [%frame+176],%r606;
mov.u64 %r140,%frame;
bra $L23;
$L142:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r659;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r611,[%value_in];
}
setp.ne.u32 %r612,%r611,0;
@ ! %r612 bra $L143;
bra $L28;
$L29:
.loc 1 1777 2
ld.u64 %r613,[%frame+184];
setp.eq.u64 %r614,%r613,0;
@ %r614 bra $L28;
add.u64 %r618,%frame,168;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r223;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r224;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r618;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r619,[%value_in];
}
$L28:
.loc 1 1784 31
ld.u16 %r621,[%r224+16];
and.b16 %r620,%r621,64;
setp.eq.u16 %r622,%r620,0;
selp.u32 %r222,%r222,-1,%r622;
bra $L19;
$L74:
.loc 1 932 9
mov.u32 %r133,%r132;
mov.u32 %r135,0;
bra $L112;
$L80:
.loc 1 964 8
ld.s8 %r199,[%frame+194];
.loc 1 1558 14
setp.ne.u32 %r624,%r135,-1;
@ %r624 bra $L144;
bra $L105;
$L43:
setp.ne.u32 %r625,%r54,0;
@ ! %r625 bra $L146;
bra $L145;
$L144:
.loc 1 1559 11
and.b32 %r133,%r132,-129;
.loc 1 1567 28
set.u32.ne.u32 %r627,%r135,0;
neg.s32 %r628,%r627;
.loc 1 1567 15
set.u32.ne.u64 %r630,%r137,0;
neg.s32 %r631,%r630;
.loc 1 1567 20
cvt.u16.u32 %r633,%r628;
cvt.u16.u32 %r634,%r631;
or.b16 %r632,%r633,%r634;
.loc 1 1567 7
cvt.u32.u16 %r635,%r632;
cvt.u16.u8 %r636,%r635;
setp.ne.u16 %r637,%r636,0;
@ %r637 bra $L157;
mov.u32 %r135,0;
mov.u32 %r136,%r135;
.loc 1 1566 7
add.u64 %r131,%frame,168;
bra $L94;
$L19:
.loc 1 1786 1
mov.u32 %value,%r222;
st.param.u32 [%value_out],%value;
ret;
}
/1501           1612277262  0     0     100666  53275     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _sungetc_r
.visible .func (.param .u32 %value_out) _sungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vfscanf.c"
// BEGIN GLOBAL FUNCTION DECL: __ssrefill_r
.visible .func (.param .u32 %value_out) __ssrefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _sfread_r
.visible .func (.param .u64 %value_out) _sfread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: __ssvfiscanf_r
.visible .func (.param .u32 %value_out) __ssvfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DECL: __submore
.extern .func (.param .u32 %value_out) __submore (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.extern .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoul_r
.extern .func (.param .u64 %value_out) _strtoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sccl
.extern .func (.param .u64 %value_out) __sccl (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _strtoull_r
.extern .func (.param .u64 %value_out) _strtoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoll_r
.extern .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN GLOBAL FUNCTION DEF: _sungetc_r
.visible .func (.param .u32 %value_out) _sungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r28;
.reg .u64 %r32;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u64 %r42;
.reg .u32 %r43;
.reg .u64 %r44;
.reg .pred %r45;
.reg .u16 %r46;
.reg .u16 %r47;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u32 %r51;
.reg .pred %r52;
.reg .u64 %r53;
.reg .u32 %r55;
.reg .u32 %r56;
.reg .u32 %r59;
.reg .pred %r60;
.reg .pred %r61;
.reg .pred %r62;
.reg .u32 %r63;
.reg .pred %r64;
.reg .u64 %r65;
.reg .u32 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r70;
.reg .u32 %r71;
mov.u64 %r42,%ar0;
mov.u32 %r43,%ar1;
mov.u64 %r44,%ar2;
.loc 1 267 6
setp.ne.u32 %r45,%r43,-1;
@ %r45 bra $L2;
$L6:
.loc 1 268 12
mov.u32 %r41,-1;
bra $L1;
$L2:
.loc 1 271 14
ld.u16 %r47,[%r44+16];
and.b16 %r46,%r47,-33;
st.u16 [%r44+16],%r46;
.loc 1 272 7
cvt.u32.u32 %r48,%r43;
and.b32 %r41,%r43,255;
.loc 1 281 13
ld.u32 %r40,[%r44+8];
.loc 1 279 6
ld.u64 %r49,[%r44+88];
setp.eq.u64 %r50,%r49,0;
@ %r50 bra $L4;
.loc 1 281 10
ld.u32 %r51,[%r44+96];
setp.le.s32 %r52,%r51,%r40;
@ %r52 bra $L5;
$L7:
.loc 1 285 12
ld.u64 %r28,[%r44];
.loc 1 285 8
add.u64 %r53,%r28,-1;
.loc 1 285 17
st.u64 [%r44],%r53;
st.u8 [%r28+-1],%r48;
.loc 1 286 13
ld.u32 %r56,[%r44+8];
add.u32 %r55,%r56,1;
st.u32 [%r44+8],%r55;
.loc 1 287 14
bra $L1;
$L5:
.loc 1 281 38
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r42;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r44;
call (%value_in),__submore,(%out_arg1,%out_arg2);
ld.param.u32 %r59,[%value_in];
}
.loc 1 281 35
setp.ne.u32 %r60,%r59,0;
@ ! %r60 bra $L7;
bra $L6;
$L4:
.loc 1 296 14
ld.u64 %r32,[%r44+24];
.loc 1 296 34
ld.u64 %r39,[%r44];
.loc 1 296 6
setp.eq.u64 %r61,%r32,0;
@ %r61 bra $L8;
.loc 1 296 29
setp.ge.u64 %r62,%r32,%r39;
@ %r62 bra $L8;
.loc 1 296 64
ld.u8 %r63,[%r39+-1];
.loc 1 296 55
setp.ne.u32 %r64,%r63,%r41;
@ %r64 bra $L8;
.loc 1 298 13
add.u64 %r65,%r39,-1;
st.u64 [%r44],%r65;
.loc 1 299 13
add.u32 %r66,%r40,1;
st.u32 [%r44+8],%r66;
.loc 1 300 14
bra $L1;
$L8:
.loc 1 308 11
st.u32 [%r44+112],%r40;
.loc 1 309 11
st.u64 [%r44+104],%r39;
.loc 1 310 19
add.u64 %r67,%r44,116;
.loc 1 310 17
st.u64 [%r44+88],%r67;
.loc 1 311 17
mov.u32 %r68,3;
st.u32 [%r44+96],%r68;
.loc 1 312 37
st.u8 [%r44+118],%r48;
.loc 1 313 12
add.u64 %r70,%r44,118;
.loc 1 313 10
st.u64 [%r44],%r70;
.loc 1 314 10
mov.u32 %r71,1;
st.u32 [%r44+8],%r71;
$L1:
.loc 1 316 1
mov.u32 %value,%r41;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ssrefill_r
.visible .func (.param .u32 %value_out) __ssrefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u64 %r37;
.reg .pred %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 327 7
ld.u64 %r22,[%r31+88];
.loc 1 327 6
setp.eq.u64 %r32,%r22,0;
@ %r32 bra $L13;
.loc 1 329 7
add.u64 %r33,%r31,116;
setp.eq.u64 %r34,%r22,%r33;
@ %r34 bra $L14;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
call _free_r,(%out_arg1,%out_arg2);
}
$L14:
mov.u64 %r37,0;
st.u64 [%r31+88],%r37;
.loc 1 330 23
ld.u32 %r24,[%r31+112];
.loc 1 330 19
st.u32 [%r31+8],%r24;
.loc 1 330 10
setp.eq.u32 %r38,%r24,0;
@ %r38 bra $L13;
.loc 1 332 18
ld.u64 %r39,[%r31+104];
st.u64 [%r31],%r39;
.loc 1 333 11
cvt.u32.u64 %r29,%r37;
bra $L12;
$L13:
.loc 1 338 10
ld.u64 %r40,[%r31+24];
st.u64 [%r31],%r40;
.loc 1 339 10
mov.u32 %r41,0;
st.u32 [%r31+8],%r41;
.loc 1 340 14
ld.u16 %r43,[%r31+16];
or.b16 %r42,%r43,32;
st.u16 [%r31+16],%r42;
mov.u32 %r29,-1;
$L12:
.loc 1 342 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _sfread_r
.visible .func (.param .u64 %value_out) _sfread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u64 %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .pred %r50;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u32 %r57;
.reg .pred %r58;
.reg .pred %r60;
.reg .u64 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .u64 %r66;
.reg .u32 %r67;
.reg .u16 %r68;
.reg .u16 %r69;
.reg .u64 %r70;
.reg .u64 %r71;
.reg .pred %r72;
.reg .u64 %r76;
.reg .u32 %r77;
.reg .u32 %r78;
.reg .u32 %r79;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r83;
mov.u64 %r45,%ar0;
mov.u64 %r46,%ar1;
mov.u64 %r47,%ar2;
mov.u64 %r48,%ar3;
mov.u64 %r49,%ar4;
.loc 1 356 14
mul.lo.u64 %r44,%r48,%r47;
.loc 1 356 6
setp.eq.u64 %r50,%r44,0;
@ ! %r50 bra $L40;
bra $L22;
$L29:
.loc 1 362 9
mov.u64 %r22,%r44;
.loc 1 329 7
add.u64 %r83,%r49,116;
$L27:
.loc 1 364 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r35;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r54,[%value_in];
}
.loc 1 365 14
ld.u64 %r56,[%r49];
add.u64 %r55,%r56,%r27;
st.u64 [%r49],%r55;
.loc 1 366 14
mov.u32 %r57,0;
st.u32 [%r49+8],%r57;
.loc 1 367 9
add.u64 %r46,%r46,%r27;
mov.u64 %r43,%r22;
.loc 1 368 13
sub.u64 %r22,%r22,%r27;
.loc 1 327 7
ld.u64 %r37,[%r49+88];
.loc 1 327 6
setp.eq.u64 %r58,%r37,0;
@ %r58 bra $L25;
.loc 1 329 7
setp.eq.u64 %r60,%r37,%r83;
@ %r60 bra $L26;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r37;
call _free_r,(%out_arg1,%out_arg2);
}
$L26:
mov.u64 %r63,0;
st.u64 [%r49+88],%r63;
.loc 1 330 23
ld.u32 %r39,[%r49+112];
.loc 1 330 19
st.u32 [%r49+8],%r39;
.loc 1 330 10
setp.eq.u32 %r64,%r39,0;
@ %r64 bra $L25;
.loc 1 332 22
ld.u64 %r35,[%r49+104];
.loc 1 332 18
st.u64 [%r49],%r35;
.loc 1 362 21
cvt.s64.s32 %r27,%r39;
.loc 1 362 9
setp.lt.u64 %r65,%r27,%r22;
@ %r65 bra $L27;
bra $L28;
$L25:
.loc 1 338 10
ld.u64 %r66,[%r49+24];
st.u64 [%r49],%r66;
.loc 1 339 10
mov.u32 %r67,0;
st.u32 [%r49+8],%r67;
.loc 1 340 14
ld.u16 %r69,[%r49+16];
or.b16 %r68,%r69,32;
st.u16 [%r49+16],%r68;
.loc 1 372 25
add.u64 %r70,%r44,%r27;
sub.u64 %r71,%r70,%r43;
.loc 1 372 34
div.u64 %r44,%r71,%r47;
bra $L22;
$L40:
.loc 1 362 21
ld.s32 %r27,[%r49+8];
.loc 1 375 41
ld.u64 %r35,[%r49];
.loc 1 362 9
setp.gt.u64 %r72,%r44,%r27;
@ %r72 bra $L29;
mov.u64 %r22,%r44;
$L28:
.loc 1 375 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r35;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r22;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r76,[%value_in];
}
.loc 1 376 10
ld.u32 %r78,[%r49+8];
cvt.u32.u64 %r79,%r22;
sub.u32 %r77,%r78,%r79;
st.u32 [%r49+8],%r77;
.loc 1 377 10
ld.u64 %r81,[%r49];
add.u64 %r80,%r81,%r22;
st.u64 [%r49],%r80;
.loc 1 378 10
mov.u64 %r44,%r48;
$L22:
.loc 1 379 1
mov.u64 %value,%r44;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ssvfiscanf_r
.visible .func (.param .u32 %value_out) __ssvfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[304];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r34;
.reg .u32 %r41;
.reg .u32 %r66;
.reg .u64 %r67;
.reg .u64 %r75;
.reg .u32 %r90;
.reg .u32 %r107;
.reg .u64 %r130;
.reg .u32 %r131;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .u64 %r154;
.reg .u64 %r163;
.reg .u64 %r164;
.reg .u64 %r165;
.reg .u32 %r166;
.reg .u64 %r167;
.reg .u32 %r168;
.reg .u32 %r169;
.reg .u32 %r170;
.reg .u32 %r171;
.reg .u64 %r180;
.reg .u64 %r185;
.reg .u32 %r187;
.reg .u64 %r189;
.reg .u64 %r196;
.reg .u64 %r197;
.reg .u32 %r199;
.reg .u64 %r200;
.reg .u64 %r201;
.reg .u32 %r203;
.reg .u32 %r204;
.reg .u64 %r208;
.reg .u64 %r209;
.reg .u64 %r212;
.reg .u64 %r213;
.reg .u32 %r215;
.reg .u64 %r219;
.reg .u32 %r221;
.reg .u64 %r225;
.reg .u32 %r227;
.reg .u64 %r233;
.reg .u32 %r235;
.reg .u32 %r240;
.reg .u64 %r241;
.reg .u64 %r245;
.reg .u32 %r247;
.reg .u64 %r251;
.reg .u32 %r253;
.reg .u64 %r254;
.reg .u64 %r258;
.reg .u32 %r260;
.reg .u64 %r265;
.reg .u32 %r267;
.reg .u64 %r271;
.reg .u32 %r273;
.reg .u64 %r279;
.reg .u64 %r281;
.reg .u64 %r285;
.reg .u64 %r286;
.reg .u64 %r291;
.reg .u64 %r292;
.reg .u64 %r294;
.reg .u64 %r296;
.reg .u64 %r304;
.reg .u64 %r306;
.reg .u64 %r307;
.reg .u64 %r308;
.reg .u64 %r314;
.reg .u32 %r318;
.reg .u64 %r319;
.reg .u64 %r320;
.reg .u32 %r323;
.reg .u64 %r324;
.reg .u64 %r325;
.reg .u64 %r327;
.reg .u64 %r328;
.reg .u64 %r329;
.reg .u32 %r330;
.reg .u32 %r331;
.reg .u32 %r332;
.reg .u64 %r333;
.reg .u64 %r334;
.reg .u64 %r335;
.reg .u64 %r336;
.reg .u16 %r337;
.reg .u16 %r338;
.reg .pred %r339;
.reg .u16 %r340;
.reg .u32 %r342;
.reg .u32 %r343;
.reg .pred %r344;
.reg .pred %r345;
.reg .u64 %r346;
.reg .u32 %r347;
.reg .u64 %r349;
.reg .u16 %r351;
.reg .u16 %r352;
.reg .u32 %r353;
.reg .u16 %r354;
.reg .u32 %r355;
.reg .pred %r356;
.reg .pred %r357;
.reg .pred %r358;
.reg .pred %r360;
.reg .u64 %r363;
.reg .pred %r364;
.reg .u64 %r365;
.reg .u32 %r366;
.reg .u16 %r367;
.reg .u16 %r368;
.reg .u64 %r369;
.reg .u64 %r371;
.reg .u16 %r373;
.reg .u16 %r374;
.reg .u32 %r375;
.reg .u16 %r376;
.reg .u32 %r377;
.reg .pred %r378;
.reg .u32 %r379;
.reg .u64 %r380;
.reg .pred %r381;
.reg .u16 %r382;
.reg .pred %r383;
.reg .pred %r385;
.reg .pred %r387;
.reg .pred %r389;
.reg .pred %r391;
.reg .pred %r393;
.reg .pred %r395;
.reg .pred %r397;
.reg .pred %r399;
.reg .pred %r401;
.reg .pred %r403;
.reg .pred %r405;
.reg .pred %r407;
.reg .pred %r409;
.reg .pred %r411;
.reg .pred %r413;
.reg .pred %r415;
.reg .pred %r417;
.reg .pred %r419;
.reg .pred %r421;
.reg .pred %r423;
.reg .pred %r425;
.reg .pred %r427;
.reg .pred %r429;
.reg .pred %r431;
.reg .pred %r433;
.reg .u32 %r434;
.reg .pred %r435;
.reg .pred %r436;
.reg .pred %r438;
.reg .u64 %r441;
.reg .pred %r442;
.reg .u64 %r443;
.reg .u32 %r444;
.reg .u16 %r445;
.reg .u16 %r446;
.reg .u16 %r447;
.reg .u16 %r448;
.reg .pred %r449;
.reg .u32 %r450;
.reg .u32 %r451;
.reg .u64 %r452;
.reg .u32 %r454;
.reg .u32 %r455;
.reg .u32 %r457;
.reg .u32 %r458;
.reg .u16 %r459;
.reg .u16 %r460;
.reg .u16 %r461;
.reg .u32 %r462;
.reg .u16 %r463;
.reg .pred %r464;
.reg .u32 %r465;
.reg .pred %r466;
.reg .u16 %r467;
.reg .pred %r468;
.reg .u32 %r469;
.reg .pred %r470;
.reg .u32 %r471;
.reg .pred %r472;
.reg .u32 %r473;
.reg .pred %r474;
.reg .u64 %r476;
.reg .u64 %r477;
.reg .u64 %r478;
.reg .u64 %r479;
.reg .u32 %r480;
.reg .u64 %r483;
.reg .u32 %r484;
.reg .pred %r485;
.reg .u64 %r486;
.reg .u32 %r487;
.reg .pred %r488;
.reg .u32 %r489;
.reg .pred %r490;
.reg .u64 %r491;
.reg .u32 %r492;
.reg .pred %r493;
.reg .u64 %r494;
.reg .u32 %r495;
.reg .pred %r496;
.reg .pred %r497;
.reg .pred %r499;
.reg .u64 %r502;
.reg .pred %r503;
.reg .u64 %r504;
.reg .u64 %r505;
.reg .u32 %r506;
.reg .u16 %r507;
.reg .u16 %r508;
.reg .u32 %r509;
.reg .pred %r510;
.reg .u64 %r511;
.reg .u64 %r513;
.reg .u16 %r515;
.reg .u16 %r516;
.reg .u32 %r517;
.reg .u16 %r518;
.reg .u32 %r519;
.reg .pred %r520;
.reg .u32 %r521;
.reg .pred %r522;
.reg .pred %r523;
.reg .pred %r525;
.reg .u64 %r528;
.reg .pred %r529;
.reg .u64 %r530;
.reg .u32 %r531;
.reg .u16 %r532;
.reg .u16 %r533;
.reg .u64 %r534;
.reg .u64 %r536;
.reg .u16 %r538;
.reg .u16 %r539;
.reg .u32 %r540;
.reg .u16 %r541;
.reg .u32 %r542;
.reg .pred %r543;
.reg .pred %r544;
.reg .pred %r545;
.reg .pred %r546;
.reg .u32 %r547;
.reg .pred %r548;
.reg .u32 %r549;
.reg .pred %r550;
.reg .u64 %r551;
.reg .pred %r552;
.reg .pred %r554;
.reg .u64 %r557;
.reg .pred %r558;
.reg .u32 %r559;
.reg .pred %r560;
.reg .u64 %r561;
.reg .u32 %r562;
.reg .u16 %r563;
.reg .u16 %r564;
.reg .pred %r565;
.reg .u32 %r566;
.reg .u32 %r567;
.reg .u64 %r568;
.reg .u32 %r569;
.reg .u64 %r571;
.reg .u64 %r572;
.reg .u64 %r575;
.reg .pred %r576;
.reg .u32 %r577;
.reg .pred %r578;
.reg .u64 %r580;
.reg .u64 %r581;
.reg .u32 %r582;
.reg .pred %r583;
.reg .pred %r584;
.reg .u32 %r585;
.reg .u64 %r586;
.reg .pred %r587;
.reg .u32 %r588;
.reg .u64 %r589;
.reg .pred %r590;
.reg .pred %r591;
.reg .pred %r592;
.reg .pred %r594;
.reg .u64 %r597;
.reg .pred %r598;
.reg .u64 %r599;
.reg .u32 %r600;
.reg .u16 %r601;
.reg .u16 %r602;
.reg .u64 %r604;
.reg .u64 %r605;
.reg .u16 %r606;
.reg .u32 %r607;
.reg .pred %r608;
.reg .pred %r609;
.reg .u32 %r610;
.reg .u32 %r611;
.reg .u64 %r612;
.reg .u32 %r613;
.reg .pred %r614;
.reg .u32 %r615;
.reg .u32 %r616;
.reg .u64 %r617;
.reg .u32 %r618;
.reg .u64 %r619;
.reg .pred %r620;
.reg .u32 %r621;
.reg .pred %r622;
.reg .pred %r623;
.reg .pred %r625;
.reg .u64 %r628;
.reg .pred %r629;
.reg .u64 %r630;
.reg .u32 %r631;
.reg .u16 %r632;
.reg .u16 %r633;
.reg .pred %r634;
.reg .u64 %r636;
.reg .u64 %r637;
.reg .u16 %r638;
.reg .u32 %r639;
.reg .pred %r640;
.reg .u64 %r641;
.reg .pred %r642;
.reg .u32 %r643;
.reg .pred %r644;
.reg .u64 %r645;
.reg .u64 %r647;
.reg .u16 %r649;
.reg .u16 %r650;
.reg .u32 %r651;
.reg .u32 %r652;
.reg .pred %r653;
.reg .pred %r654;
.reg .u32 %r655;
.reg .u64 %r656;
.reg .pred %r657;
.reg .u32 %r658;
.reg .u64 %r659;
.reg .pred %r660;
.reg .pred %r661;
.reg .pred %r662;
.reg .pred %r664;
.reg .u64 %r667;
.reg .pred %r668;
.reg .u64 %r669;
.reg .u32 %r670;
.reg .u16 %r671;
.reg .u16 %r672;
.reg .u64 %r673;
.reg .u64 %r675;
.reg .u16 %r677;
.reg .u16 %r678;
.reg .u32 %r679;
.reg .u16 %r680;
.reg .u32 %r681;
.reg .pred %r682;
.reg .pred %r683;
.reg .u32 %r684;
.reg .u32 %r685;
.reg .u64 %r686;
.reg .u32 %r687;
.reg .pred %r688;
.reg .u32 %r689;
.reg .u32 %r690;
.reg .u64 %r691;
.reg .u32 %r692;
.reg .u64 %r693;
.reg .pred %r694;
.reg .u64 %r695;
.reg .u32 %r696;
.reg .pred %r697;
.reg .pred %r698;
.reg .pred %r700;
.reg .u64 %r703;
.reg .pred %r704;
.reg .u64 %r705;
.reg .u32 %r706;
.reg .u16 %r707;
.reg .u16 %r708;
.reg .u64 %r709;
.reg .u64 %r710;
.reg .u64 %r712;
.reg .u16 %r714;
.reg .u16 %r715;
.reg .u32 %r716;
.reg .u16 %r717;
.reg .u32 %r718;
.reg .pred %r719;
.reg .u64 %r720;
.reg .u32 %r721;
.reg .u64 %r722;
.reg .pred %r723;
.reg .u32 %r724;
.reg .u16 %r725;
.reg .pred %r726;
.reg .pred %r728;
.reg .pred %r730;
.reg .pred %r732;
.reg .u16 %r733;
.reg .u16 %r736;
.reg .u32 %r738;
.reg .u16 %r739;
.reg .pred %r740;
.reg .u64 %r741;
.reg .u64 %r742;
.reg .u64 %r743;
.reg .u64 %r744;
.reg .pred %r746;
.reg .pred %r748;
.reg .pred %r750;
.reg .pred %r752;
.reg .pred %r754;
.reg .pred %r756;
.reg .u32 %r757;
.reg .pred %r758;
.reg .pred %r759;
.reg .u32 %r760;
.reg .pred %r761;
.reg .pred %r762;
.reg .u64 %r763;
.reg .u64 %r764;
.reg .u64 %r765;
.reg .u64 %r766;
.reg .pred %r767;
.reg .pred %r768;
.reg .u32 %r769;
.reg .pred %r770;
.reg .u32 %r771;
.reg .pred %r772;
.reg .u32 %r773;
.reg .u32 %r774;
.reg .pred %r775;
.reg .u64 %r776;
.reg .pred %r777;
.reg .pred %r779;
.reg .u64 %r782;
.reg .pred %r783;
.reg .u64 %r784;
.reg .u64 %r785;
.reg .u32 %r786;
.reg .u16 %r787;
.reg .u16 %r788;
.reg .pred %r789;
.reg .u32 %r790;
.reg .pred %r791;
.reg .pred %r793;
.reg .u32 %r797;
.reg .u32 %r798;
.reg .pred %r800;
.reg .u32 %r801;
.reg .pred %r802;
.reg .u32 %r803;
.reg .u64 %r806;
.reg .u64 %r809;
.reg .u64 %r810;
.reg .u32 %r811;
.reg .pred %r812;
.reg .u32 %r813;
.reg .pred %r814;
.reg .u64 %r815;
.reg .u32 %r816;
.reg .pred %r817;
.reg .u64 %r818;
.reg .u32 %r819;
.reg .pred %r820;
.reg .u64 %r821;
.reg .pred %r822;
.reg .u64 %r828;
.reg .u64 %r834;
.reg .u64 %r835;
.reg .u64 %r836;
.reg .u64 %r838;
.reg .u32 %r839;
.reg .u32 %r840;
.reg .pred %r841;
.reg .u16 %r842;
.reg .u16 %r843;
.reg .pred %r844;
.reg .u64 %r846;
.reg .u64 %r856;
.reg .u64 %r857;
.reg .u16 %r858;
mov.u64 %r333,%ar0;
mov.u64 %r334,%ar1;
mov.u64 %r335,%ar2;
mov.u64 %r336,%ar3;
.loc 1 591 3
ld.u16 %r338,[%r334+16];
and.b16 %r337,%r338,8192;
setp.ne.u16 %r339,%r337,0;
@ %r339 bra $L42;
or.b16 %r340,%r338,8192;
st.u16 [%r334+16],%r340;
ld.u32 %r343,[%r334+172];
and.b32 %r342,%r343,-8193;
st.u32 [%r334+172],%r342;
$L42:
.loc 1 602 12
ld.u8 %r28,[%r335];
.loc 1 611 11
add.u64 %r180,%r335,1;
.loc 1 613 10
setp.eq.u32 %r344,%r28,0;
@ %r344 bra $L169;
mov.u64 %r67,0;
cvt.u32.u64 %r169,%r67;
cvt.u32.u64 %r141,%r67;
cvt.u32.u64 %r332,%r67;
cvta.const.u64 %r846,_ctype_+1;
.loc 1 329 7
add.u64 %r856,%r334,116;
.loc 1 1342 11
add.u64 %r857,%frame,256;
bra $L44;
$L50:
.loc 1 602 12
ld.u8 %r28,[%r180];
.loc 1 611 11
add.u64 %r180,%r180,1;
.loc 1 613 10
setp.eq.u32 %r345,%r28,0;
@ %r345 bra $L41;
$L44:
.loc 1 615 26
cvt.u32.u32 %r347,%r28;
cvt.u64.u8 %r346,%r347;
add.u64 %r349,%r846,%r346;
.loc 1 615 23
ld.u8 %r858,[%r349];
mov.u16 %r352,%r858;
and.b16 %r351,%r352,8;
cvt.u32.u16 %r353,%r351;
cvt.s32.s8 %r355,%r353;
cvt.u16.u32 %r354,%r355;
setp.eq.u16 %r356,%r354,0;
@ %r356 bra $L45;
.loc 1 619 12
ld.u32 %r41,[%r334+8];
$L51:
.loc 1 619 11
setp.gt.s32 %r357,%r41,0;
@ %r357 bra $L46;
.loc 1 327 7
ld.u64 %r213,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r358,%r213,0;
@ %r358 bra $L47;
.loc 1 329 7
setp.eq.u64 %r360,%r213,%r856;
@ %r360 bra $L48;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r213;
call _free_r,(%out_arg1,%out_arg2);
}
$L48:
mov.u64 %r363,0;
st.u64 [%r334+88],%r363;
.loc 1 330 23
ld.u32 %r215,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r215;
.loc 1 330 10
setp.eq.u32 %r364,%r215,0;
@ %r364 bra $L47;
.loc 1 332 22
ld.u64 %r329,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r329;
bra $L49;
$L47:
.loc 1 338 10
ld.u64 %r365,[%r334+24];
st.u64 [%r334],%r365;
.loc 1 339 10
mov.u32 %r366,0;
st.u32 [%r334+8],%r366;
.loc 1 340 14
ld.u16 %r368,[%r334+16];
or.b16 %r367,%r368,32;
st.u16 [%r334+16],%r367;
bra $L50;
$L46:
.loc 1 619 28
ld.u64 %r329,[%r334];
$L49:
ld.u8 %r369,[%r329];
add.u64 %r371,%r846,%r369;
.loc 1 619 24
ld.u8 %r858,[%r371];
mov.u16 %r374,%r858;
and.b16 %r373,%r374,8;
cvt.u32.u16 %r375,%r373;
cvt.s32.s8 %r377,%r375;
cvt.u16.u32 %r376,%r377;
setp.eq.u16 %r378,%r376,0;
@ %r378 bra $L50;
.loc 1 621 13
add.u32 %r141,%r141,1;
.loc 1 621 23
ld.u32 %r379,[%r334+8];
add.u32 %r41,%r379,-1;
st.u32 [%r334+8],%r41;
.loc 1 621 33
add.u64 %r380,%r329,1;
st.u64 [%r334],%r380;
.loc 1 619 11
bra $L51;
$L45:
.loc 1 625 10
setp.ne.u32 %r381,%r28,37;
@ %r381 bra $L52;
.loc 1 640 11
ld.u8 %r330,[%r180];
mov.u64 %r25,%r180;
.loc 1 628 13
mov.u32 %r166,0;
.loc 1 627 13
mov.u64 %r163,0;
bra $L53;
$L308:
.loc 1 640 11
ld.u8 %r330,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r180;
.loc 1 663 10
mov.u32 %r166,16;
.loc 1 640 11
mov.u64 %r163,0;
$L53:
.loc 1 640 15
add.u64 %r180,%r25,1;
.loc 1 642 7
cvt.u16.u32 %r382,%r330;
setp.eq.u16 %r383,%r382,100;
@ %r383 bra $L170;
setp.gt.u16 %r385,%r382,100;
@ %r385 bra $L55;
setp.eq.u16 %r387,%r382,76;
@ %r387 bra $L56;
setp.gt.u16 %r389,%r382,76;
@ %r389 bra $L57;
setp.gt.u16 %r391,%r382,57;
@ %r391 bra $L58;
setp.gt.u16 %r393,%r382,47;
@ %r393 bra $L59;
setp.eq.u16 %r395,%r382,37;
@ %r395 bra $L52;
setp.eq.u16 %r397,%r382,42;
@ %r397 bra $L60;
bra $L41;
$L58:
setp.eq.u16 %r399,%r382,68;
@ %r399 bra $L61;
bra $L41;
$L57:
setp.eq.u16 %r401,%r382,91;
@ %r401 bra $L62;
setp.gt.u16 %r403,%r382,91;
@ %r403 bra $L63;
setp.eq.u16 %r405,%r382,79;
@ %r405 bra $L64;
setp.eq.u16 %r407,%r382,88;
@ %r407 bra $L65;
bra $L41;
$L63:
setp.eq.u16 %r409,%r382,99;
@ %r409 bra $L66;
bra $L41;
$L55:
setp.eq.u16 %r411,%r382,111;
@ %r411 bra $L171;
setp.gt.u16 %r413,%r382,111;
@ %r413 bra $L67;
setp.eq.u16 %r415,%r382,108;
@ %r415 bra $L68;
setp.gt.u16 %r417,%r382,108;
@ %r417 bra $L69;
setp.eq.u16 %r419,%r382,104;
@ %r419 bra $L70;
setp.eq.u16 %r421,%r382,105;
@ %r421 bra $L172;
bra $L41;
$L69:
setp.eq.u16 %r423,%r382,110;
@ %r423 bra $L71;
bra $L41;
$L67:
setp.eq.u16 %r425,%r382,115;
@ %r425 bra $L173;
setp.gt.u16 %r427,%r382,115;
@ %r427 bra $L72;
setp.eq.u16 %r429,%r382,112;
@ %r429 bra $L73;
bra $L41;
$L72:
setp.eq.u16 %r431,%r382,117;
@ %r431 bra $L174;
setp.eq.u16 %r433,%r382,120;
@ %r433 bra $L65;
bra $L41;
$L52:
.loc 1 649 11
ld.u32 %r434,[%r334+8];
setp.gt.s32 %r435,%r434,0;
@ %r435 bra $L74;
.loc 1 327 7
ld.u64 %r219,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r436,%r219,0;
@ %r436 bra $L75;
.loc 1 329 7
setp.eq.u64 %r438,%r219,%r856;
@ %r438 bra $L76;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call _free_r,(%out_arg1,%out_arg2);
}
$L76:
mov.u64 %r441,0;
st.u64 [%r334+88],%r441;
.loc 1 330 23
ld.u32 %r221,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r221;
.loc 1 330 10
setp.eq.u32 %r442,%r221,0;
@ %r442 bra $L75;
.loc 1 332 22
ld.u64 %r328,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r328;
bra $L77;
$L75:
.loc 1 338 10
ld.u64 %r443,[%r334+24];
st.u64 [%r334],%r443;
.loc 1 339 10
mov.u32 %r444,0;
st.u32 [%r334+8],%r444;
.loc 1 340 14
ld.u16 %r446,[%r334+16];
or.b16 %r445,%r446,32;
st.u16 [%r334+16],%r445;
bra $L78;
$L74:
.loc 1 651 15
ld.u64 %r328,[%r334];
$L77:
.loc 1 651 11
ld.u8 %r447,[%r328];
ld.u8 %r448,[%r180+-1];
setp.ne.u16 %r449,%r447,%r448;
@ %r449 bra $L41;
.loc 1 653 14
ld.u32 %r451,[%r334+8];
add.u32 %r450,%r451,-1;
st.u32 [%r334+8],%r450;
.loc 1 653 24
add.u64 %r452,%r328,1;
st.u64 [%r334],%r452;
.loc 1 654 13
add.u32 %r141,%r141,1;
bra $L50;
$L60:
.loc 1 660 7
set.u32.ne.u32 %r454,%r166,0;
neg.s32 %r455,%r454;
.loc 1 661 8
set.u32.ne.u64 %r457,%r163,0;
neg.s32 %r458,%r457;
cvt.u16.u32 %r460,%r455;
cvt.u16.u32 %r461,%r458;
or.b16 %r459,%r460,%r461;
cvt.u32.u16 %r462,%r459;
cvt.u16.u8 %r463,%r462;
setp.ne.u16 %r464,%r463,0;
@ ! %r464 bra $L308;
bra $L41;
$L68:
.loc 1 666 14
and.b32 %r465,%r166,15;
.loc 1 666 7
setp.ne.u32 %r466,%r465,0;
@ %r466 bra $L41;
.loc 1 669 8
ld.u8 %r330,[%r25+1];
.loc 1 669 7
cvt.u16.u32 %r467,%r330;
setp.ne.u16 %r468,%r467,108;
@ %r468 bra $L80;
.loc 1 672 14
or.b32 %r166,%r166,2;
.loc 1 640 11
ld.u8 %r330,[%r25+2];
.loc 1 671 8
add.u64 %r25,%r25,2;
bra $L53;
$L80:
.loc 1 676 12
or.b32 %r166,%r166,1;
.loc 1 640 15
mov.u64 %r25,%r180;
bra $L53;
$L56:
.loc 1 679 14
and.b32 %r469,%r166,15;
.loc 1 679 7
setp.ne.u32 %r470,%r469,0;
@ %r470 bra $L41;
.loc 1 681 10
or.b32 %r166,%r166,2;
.loc 1 640 11
ld.u8 %r330,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r180;
.loc 1 682 4
bra $L53;
$L70:
.loc 1 684 14
and.b32 %r471,%r166,15;
.loc 1 684 7
setp.ne.u32 %r472,%r471,0;
@ %r472 bra $L41;
.loc 1 694 12
or.b32 %r166,%r166,4;
.loc 1 640 11
ld.u8 %r330,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r180;
.loc 1 695 4
bra $L53;
$L59:
.loc 1 760 14
and.b32 %r473,%r166,143;
.loc 1 760 7
setp.ne.u32 %r474,%r473,0;
@ %r474 bra $L41;
.loc 1 762 18
shl.b64 %r476,%r163,2;
add.u64 %r477,%r476,%r163;
add.u64 %r478,%r477,%r477;
.loc 1 762 23
cvt.u32.u32 %r480,%r330;
cvt.u64.u8 %r479,%r480;
add.u64 %r279,%r478,%r479;
.loc 1 762 10
add.u64 %r163,%r279,-48;
.loc 1 640 11
ld.u8 %r330,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r180;
.loc 1 763 4
bra $L53;
$L61:
.loc 1 789 10
or.b32 %r166,%r166,1;
.loc 1 793 9
mov.u64 %r67,_strtol_r;
.loc 1 794 9
mov.u32 %r169,10;
.loc 1 792 6
mov.u32 %r204,3;
bra $L54;
$L64:
.loc 1 804 10
or.b32 %r166,%r166,1;
.loc 1 808 9
mov.u64 %r67,_strtoul_r;
.loc 1 809 9
mov.u32 %r169,8;
.loc 1 807 6
mov.u32 %r204,3;
bra $L54;
$L65:
.loc 1 820 10
or.b32 %r166,%r166,512;
.loc 1 822 9
mov.u64 %r67,_strtoul_r;
.loc 1 823 9
mov.u32 %r169,16;
.loc 1 821 6
mov.u32 %r204,3;
.loc 1 824 4
bra $L54;
$L62:
.loc 1 852 21
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r180;
call (%value_in),__sccl,(%out_arg1,%out_arg2);
ld.param.u64 %r483,[%value_in];
}
mov.u64 %r180,%r483;
.loc 1 853 10
or.b32 %r166,%r166,64;
.loc 1 854 6
mov.u32 %r204,1;
.loc 1 855 4
bra $L54;
$L66:
.loc 1 864 10
or.b32 %r166,%r166,64;
.loc 1 865 6
mov.u32 %r204,0;
.loc 1 866 4
bra $L54;
$L73:
.loc 1 869 10
or.b32 %r166,%r166,544;
.loc 1 871 9
mov.u64 %r67,_strtoul_r;
.loc 1 872 9
mov.u32 %r169,16;
.loc 1 870 6
mov.u32 %r204,3;
.loc 1 873 4
bra $L54;
$L71:
.loc 1 876 14
and.b32 %r484,%r166,16;
.loc 1 876 7
setp.ne.u32 %r485,%r484,0;
@ %r485 bra $L50;
.loc 1 888 11
add.u64 %r486,%r336,7;
and.b64 %r306,%r486,-8;
add.u64 %r336,%r306,8;
ld.u64 %r307,[%r306];
.loc 1 886 14
and.b32 %r487,%r166,4;
.loc 1 886 7
setp.eq.u32 %r488,%r487,0;
@ %r488 bra $L82;
.loc 1 889 12
st.u16 [%r307],%r141;
bra $L50;
$L82:
.loc 1 891 19
and.b32 %r489,%r166,1;
.loc 1 891 12
setp.eq.u32 %r490,%r489,0;
@ %r490 bra $L83;
.loc 1 894 12
cvt.s64.s32 %r491,%r141;
st.u64 [%r307],%r491;
bra $L50;
$L83:
.loc 1 897 19
and.b32 %r492,%r166,2;
.loc 1 897 12
setp.eq.u32 %r493,%r492,0;
@ %r493 bra $L84;
.loc 1 900 13
cvt.s64.s32 %r494,%r141;
st.u64 [%r307],%r494;
bra $L50;
$L84:
.loc 1 906 12
st.u32 [%r307],%r141;
bra $L50;
$L170:
.loc 1 642 7
mov.u64 %r67,_strtol_r;
mov.u32 %r169,10;
mov.u32 %r204,3;
bra $L54;
$L171:
.loc 1 808 9
mov.u64 %r67,_strtoul_r;
.loc 1 809 9
mov.u32 %r169,8;
.loc 1 807 6
mov.u32 %r204,3;
bra $L54;
$L172:
.loc 1 799 9
mov.u64 %r67,_strtol_r;
.loc 1 800 9
mov.u32 %r169,0;
.loc 1 798 6
mov.u32 %r204,3;
bra $L54;
$L173:
.loc 1 848 6
mov.u32 %r204,2;
bra $L54;
$L174:
.loc 1 814 9
mov.u64 %r67,_strtoul_r;
.loc 1 815 9
mov.u32 %r169,10;
.loc 1 813 6
mov.u32 %r204,3;
$L54:
.loc 1 917 10
ld.u32 %r495,[%r334+8];
setp.gt.s32 %r496,%r495,0;
@ %r496 bra $L85;
.loc 1 327 7
ld.u64 %r225,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r497,%r225,0;
@ %r497 bra $L86;
.loc 1 329 7
setp.eq.u64 %r499,%r225,%r856;
@ %r499 bra $L87;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r225;
call _free_r,(%out_arg1,%out_arg2);
}
$L87:
mov.u64 %r502,0;
st.u64 [%r334+88],%r502;
.loc 1 330 23
ld.u32 %r227,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r227;
.loc 1 330 10
setp.eq.u32 %r503,%r227,0;
@ %r503 bra $L86;
.loc 1 332 18
ld.u64 %r504,[%r334+104];
st.u64 [%r334],%r504;
bra $L85;
$L86:
.loc 1 338 10
ld.u64 %r505,[%r334+24];
st.u64 [%r334],%r505;
.loc 1 339 10
mov.u32 %r506,0;
st.u32 [%r334+8],%r506;
.loc 1 340 14
ld.u16 %r508,[%r334+16];
or.b16 %r507,%r508,32;
st.u16 [%r334+16],%r507;
bra $L78;
$L85:
.loc 1 924 18
and.b32 %r509,%r166,64;
.loc 1 924 10
setp.ne.u32 %r510,%r509,0;
@ %r510 bra $L88;
.loc 1 926 11
ld.u64 %r296,[%r334];
ld.u8 %r511,[%r296];
add.u64 %r513,%r846,%r511;
.loc 1 926 10
ld.u8 %r858,[%r513];
mov.u16 %r516,%r858;
and.b16 %r515,%r516,8;
cvt.u32.u16 %r517,%r515;
cvt.s32.s8 %r519,%r517;
cvt.u16.u32 %r518,%r519;
setp.eq.u16 %r520,%r518,0;
@ %r520 bra $L88;
$L93:
.loc 1 928 13
add.u32 %r141,%r141,1;
.loc 1 929 12
ld.u32 %r521,[%r334+8];
add.u32 %r66,%r521,-1;
.loc 1 929 11
st.u32 [%r334+8],%r66;
setp.le.s32 %r522,%r66,0;
@ %r522 bra $L89;
.loc 1 930 9
add.u64 %r296,%r296,1;
st.u64 [%r334],%r296;
bra $L90;
$L89:
.loc 1 327 7
ld.u64 %r233,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r523,%r233,0;
@ %r523 bra $L91;
.loc 1 329 7
setp.eq.u64 %r525,%r233,%r856;
@ %r525 bra $L92;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r233;
call _free_r,(%out_arg1,%out_arg2);
}
$L92:
mov.u64 %r528,0;
st.u64 [%r334+88],%r528;
.loc 1 330 23
ld.u32 %r235,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r235;
.loc 1 330 10
setp.eq.u32 %r529,%r235,0;
@ %r529 bra $L91;
.loc 1 332 22
ld.u64 %r296,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r296;
bra $L90;
$L91:
.loc 1 338 10
ld.u64 %r530,[%r334+24];
st.u64 [%r334],%r530;
.loc 1 339 10
mov.u32 %r531,0;
st.u32 [%r334+8],%r531;
.loc 1 340 14
ld.u16 %r533,[%r334+16];
or.b16 %r532,%r533,32;
st.u16 [%r334+16],%r532;
bra $L78;
$L90:
.loc 1 926 11
ld.u8 %r534,[%r296];
add.u64 %r536,%r846,%r534;
.loc 1 926 10
ld.u8 %r858,[%r536];
mov.u16 %r539,%r858;
and.b16 %r538,%r539,8;
cvt.u32.u16 %r540,%r538;
cvt.s32.s8 %r542,%r540;
cvt.u16.u32 %r541,%r542;
setp.ne.u16 %r543,%r541,0;
@ %r543 bra $L93;
$L88:
.loc 1 945 7
setp.eq.u32 %r544,%r204,2;
@ %r544 bra $L94;
setp.eq.u32 %r545,%r204,3;
@ %r545 bra $L95;
setp.eq.u32 %r546,%r204,1;
@ %r546 bra $L96;
max.u64 %r209,%r163,1;
.loc 1 1017 14
and.b32 %r547,%r166,16;
.loc 1 1017 7
setp.eq.u32 %r548,%r547,0;
@ %r548 bra $L97;
.loc 1 1022 12
ld.u32 %r240,[%r334+8];
.loc 1 1146 25
ld.u64 %r241,[%r334];
.loc 1 1022 8
cvt.u32.u64 %r549,%r209;
setp.ge.s32 %r550,%r240,%r549;
@ %r550 bra $L175;
.loc 1 327 7
ld.u64 %r212,[%r334+88];
.loc 1 1019 15
mov.u64 %r208,0;
$L101:
.loc 1 1024 13
cvt.s64.s32 %r75,%r240;
mov.u64 %r294,%r208;
add.u64 %r208,%r208,%r75;
mov.u64 %r281,%r209;
.loc 1 1025 15
sub.u64 %r209,%r209,%r75;
.loc 1 1026 16
add.u64 %r551,%r241,%r75;
st.u64 [%r334],%r551;
.loc 1 327 6
setp.eq.u64 %r552,%r212,0;
@ %r552 bra $L99;
.loc 1 329 7
setp.eq.u64 %r554,%r212,%r856;
@ %r554 bra $L100;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r212;
call _free_r,(%out_arg1,%out_arg2);
}
$L100:
mov.u64 %r557,0;
st.u64 [%r334+88],%r557;
.loc 1 330 23
ld.u32 %r240,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r240;
.loc 1 330 10
setp.eq.u32 %r558,%r240,0;
@ %r558 bra $L99;
.loc 1 332 22
ld.u64 %r241,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r241;
mov.u64 %r212,%r557;
.loc 1 1022 8
cvt.u32.u64 %r559,%r209;
setp.lt.s32 %r560,%r240,%r559;
@ %r560 bra $L101;
.loc 1 1036 13
add.u64 %r208,%r281,%r294;
bra $L98;
$L99:
.loc 1 338 10
ld.u64 %r561,[%r334+24];
st.u64 [%r334],%r561;
.loc 1 339 10
mov.u32 %r562,0;
st.u32 [%r334+8],%r562;
.loc 1 340 14
ld.u16 %r564,[%r334+16];
or.b16 %r563,%r564,32;
st.u16 [%r334+16],%r563;
.loc 1 1029 9
setp.eq.u64 %r565,%r208,0;
@ ! %r565 bra $L103;
bra $L78;
$L175:
.loc 1 1022 8
mov.u64 %r208,%r209;
$L98:
.loc 1 1037 16
cvt.u32.u64 %r567,%r209;
sub.u32 %r566,%r240,%r567;
st.u32 [%r334+8],%r566;
.loc 1 1038 16
add.u64 %r568,%r241,%r209;
st.u64 [%r334],%r568;
$L103:
.loc 1 1042 14
cvt.u32.u64 %r569,%r208;
add.u32 %r141,%r141,%r569;
bra $L50;
$L97:
.loc 1 1053 5
add.u64 %r285,%r336,7;
and.b64 %r292,%r285,-8;
add.u64 %r336,%r292,8;
.loc 1 1054 12
mov.u64 %r572,1;
ld.u64 %r571,[%r292];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r571;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r572;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r209;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r334;
call (%value_in),_sfread_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r575,[%value_in];
}
.loc 1 1055 11
setp.eq.u64 %r576,%r575,0;
@ %r576 bra $L78;
.loc 1 1060 14
cvt.u32.u64 %r577,%r575;
add.u32 %r141,%r141,%r577;
.loc 1 1061 17
add.u32 %r332,%r332,1;
bra $L50;
$L96:
.loc 1 1067 7
setp.ne.u64 %r578,%r163,0;
.loc 1 1068 12
selp.u64 %r163,%r163,-1,%r578;
.loc 1 1146 25
ld.u64 %r320,[%r334];
.loc 1 1146 21
ld.u8 %r580,[%r320];
add.u64 %r581,%frame,%r580;
ld.s8 %r323,[%r581];
.loc 1 1143 14
and.b32 %r582,%r166,16;
.loc 1 1143 7
setp.eq.u32 %r583,%r582,0;
@ %r583 bra $L105;
.loc 1 1146 14
setp.eq.u32 %r584,%r323,0;
@ %r584 bra $L41;
.loc 1 1148 16
ld.u32 %r585,[%r334+8];
add.u32 %r90,%r585,-1;
st.u32 [%r334+8],%r90;
.loc 1 1148 26
add.u64 %r586,%r320,1;
st.u64 [%r334],%r586;
.loc 1 1149 8
add.u64 %r185,%r163,-1;
setp.eq.u64 %r587,%r163,1;
@ ! %r587 bra $L107;
bra $L106;
$L112:
.loc 1 1148 6
add.u32 %r204,%r204,1;
.loc 1 1148 16
ld.u32 %r588,[%r334+8];
add.u32 %r90,%r588,-1;
st.u32 [%r334+8],%r90;
.loc 1 1148 26
add.u64 %r589,%r325,1;
st.u64 [%r334],%r589;
.loc 1 1149 8
add.u64 %r185,%r185,-1;
setp.eq.u64 %r590,%r185,0;
@ %r590 bra $L106;
$L107:
.loc 1 1151 8
setp.gt.s32 %r591,%r90,0;
@ %r591 bra $L108;
.loc 1 327 7
ld.u64 %r245,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r592,%r245,0;
@ %r592 bra $L109;
.loc 1 329 7
setp.eq.u64 %r594,%r245,%r856;
@ %r594 bra $L110;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r245;
call _free_r,(%out_arg1,%out_arg2);
}
$L110:
mov.u64 %r597,0;
st.u64 [%r334+88],%r597;
.loc 1 330 23
ld.u32 %r247,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r247;
.loc 1 330 10
setp.eq.u32 %r598,%r247,0;
@ %r598 bra $L109;
.loc 1 332 22
ld.u64 %r325,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r325;
bra $L111;
$L109:
.loc 1 338 10
ld.u64 %r599,[%r334+24];
st.u64 [%r334],%r599;
.loc 1 339 10
mov.u32 %r600,0;
st.u32 [%r334+8],%r600;
.loc 1 340 14
ld.u16 %r602,[%r334+16];
or.b16 %r601,%r602,32;
st.u16 [%r334+16],%r601;
bra $L106;
$L108:
.loc 1 1146 25
ld.u64 %r325,[%r334];
$L111:
.loc 1 1146 21
ld.u8 %r604,[%r325];
add.u64 %r605,%frame,%r604;
.loc 1 1146 14
ld.s8 %r607,[%r605];
cvt.u16.u32 %r606,%r607;
setp.ne.u16 %r608,%r606,0;
@ %r608 bra $L112;
$L106:
.loc 1 1160 14
add.u32 %r141,%r141,%r204;
bra $L50;
$L105:
.loc 1 1172 10
add.u64 %r254,%r336,7;
and.b64 %r167,%r254,-8;
add.u64 %r336,%r167,8;
ld.u64 %r201,[%r167];
.loc 1 1173 14
setp.eq.u32 %r609,%r323,0;
@ %r609 bra $L41;
.loc 1 1175 11
ld.u32 %r611,[%r334+8];
add.u32 %r610,%r611,-1;
st.u32 [%r334+8],%r610;
.loc 1 1176 19
add.u64 %r612,%r320,1;
st.u64 [%r334],%r612;
.loc 1 1176 7
add.u64 %r23,%r201,1;
.loc 1 1176 10
ld.u8 %r613,[%r320];
st.u8 [%r201],%r613;
.loc 1 1180 8
setp.eq.u64 %r614,%r163,1;
@ %r614 bra $L113;
mov.u64 %r304,%r23;
bra $L114;
$L119:
.loc 1 1175 11
ld.u32 %r616,[%r334+8];
add.u32 %r615,%r616,-1;
st.u32 [%r334+8],%r615;
.loc 1 1176 19
add.u64 %r617,%r324,1;
st.u64 [%r334],%r617;
add.u64 %r304,%r304,1;
.loc 1 1176 10
ld.u8 %r618,[%r324];
st.u8 [%r23],%r618;
.loc 1 1180 8
add.u64 %r619,%r201,%r163;
setp.eq.u64 %r620,%r619,%r304;
@ %r620 bra $L176;
$L114:
mov.u64 %r23,%r304;
.loc 1 1182 8
ld.u32 %r621,[%r334+8];
setp.gt.s32 %r622,%r621,0;
@ %r622 bra $L115;
.loc 1 327 7
ld.u64 %r251,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r623,%r251,0;
@ %r623 bra $L116;
.loc 1 329 7
setp.eq.u64 %r625,%r251,%r856;
@ %r625 bra $L117;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r251;
call _free_r,(%out_arg1,%out_arg2);
}
$L117:
mov.u64 %r628,0;
st.u64 [%r334+88],%r628;
.loc 1 330 23
ld.u32 %r253,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r253;
.loc 1 330 10
setp.eq.u32 %r629,%r253,0;
@ %r629 bra $L116;
.loc 1 332 22
ld.u64 %r324,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r324;
bra $L118;
$L116:
.loc 1 338 10
ld.u64 %r630,[%r334+24];
st.u64 [%r334],%r630;
.loc 1 339 10
mov.u32 %r631,0;
st.u32 [%r334+8],%r631;
.loc 1 340 14
ld.u16 %r633,[%r334+16];
or.b16 %r632,%r633,32;
st.u16 [%r334+16],%r632;
.loc 1 1184 12
setp.eq.u64 %r634,%r201,%r304;
@ ! %r634 bra $L113;
bra $L78;
$L115:
.loc 1 1173 25
ld.u64 %r324,[%r334];
$L118:
.loc 1 1173 21
ld.u8 %r636,[%r324];
add.u64 %r637,%frame,%r636;
.loc 1 1173 14
ld.s8 %r639,[%r637];
cvt.u16.u32 %r638,%r639;
setp.ne.u16 %r640,%r638,0;
@ %r640 bra $L119;
bra $L113;
$L176:
.loc 1 1176 7
mov.u64 %r23,%r304;
$L113:
.loc 1 1189 14
sub.u64 %r641,%r23,%r201;
.loc 1 1189 10
cvt.u32.u64 %r203,%r641;
.loc 1 1190 11
setp.eq.u32 %r642,%r203,0;
@ %r642 bra $L41;
.loc 1 1192 11
mov.u32 %r643,0;
st.u8 [%r23],%r643;
.loc 1 1196 17
add.u32 %r332,%r332,1;
.loc 1 1197 14
add.u32 %r141,%r141,%r203;
bra $L50;
$L94:
.loc 1 1203 7
setp.ne.u64 %r644,%r163,0;
.loc 1 1204 12
selp.u64 %r163,%r163,-1,%r644;
.loc 1 1146 25
ld.u64 %r308,[%r334];
.loc 1 1283 16
ld.u8 %r645,[%r308];
add.u64 %r647,%r846,%r645;
ld.u8 %r858,[%r647];
mov.u16 %r650,%r858;
and.b16 %r649,%r650,8;
cvt.u32.u16 %r651,%r649;
cvt.s32.s8 %r331,%r651;
.loc 1 1280 14
and.b32 %r652,%r166,16;
.loc 1 1280 7
setp.eq.u32 %r653,%r652,0;
@ %r653 bra $L121;
.loc 1 1283 14
setp.ne.u32 %r654,%r331,0;
@ %r654 bra $L50;
.loc 1 1285 16
ld.u32 %r655,[%r334+8];
add.u32 %r107,%r655,-1;
st.u32 [%r334+8],%r107;
.loc 1 1285 26
add.u64 %r656,%r308,1;
st.u64 [%r334],%r656;
.loc 1 1286 8
add.u64 %r200,%r163,-1;
setp.ne.u64 %r657,%r163,1;
@ %r657 bra $L177;
.loc 1 1291 14
add.u32 %r141,%r141,1;
bra $L50;
$L128:
.loc 1 1285 6
add.u32 %r199,%r199,1;
.loc 1 1285 16
ld.u32 %r658,[%r334+8];
add.u32 %r107,%r658,-1;
st.u32 [%r334+8],%r107;
.loc 1 1285 26
add.u64 %r659,%r319,1;
st.u64 [%r334],%r659;
.loc 1 1286 8
add.u64 %r200,%r200,-1;
setp.ne.u64 %r660,%r200,0;
@ %r660 bra $L123;
.loc 1 1291 14
add.u32 %r141,%r141,%r199;
bra $L50;
$L177:
.loc 1 1285 6
mov.u32 %r199,1;
$L123:
.loc 1 1288 8
setp.gt.s32 %r661,%r107,0;
@ %r661 bra $L124;
.loc 1 327 7
ld.u64 %r258,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r662,%r258,0;
@ %r662 bra $L125;
.loc 1 329 7
setp.eq.u64 %r664,%r258,%r856;
@ %r664 bra $L126;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r258;
call _free_r,(%out_arg1,%out_arg2);
}
$L126:
mov.u64 %r667,0;
st.u64 [%r334+88],%r667;
.loc 1 330 23
ld.u32 %r260,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r260;
.loc 1 330 10
setp.eq.u32 %r668,%r260,0;
@ %r668 bra $L125;
.loc 1 332 22
ld.u64 %r319,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r319;
bra $L127;
$L125:
.loc 1 338 10
ld.u64 %r669,[%r334+24];
st.u64 [%r334],%r669;
.loc 1 339 10
mov.u32 %r670,0;
st.u32 [%r334+8],%r670;
.loc 1 340 14
ld.u16 %r672,[%r334+16];
or.b16 %r671,%r672,32;
st.u16 [%r334+16],%r671;
.loc 1 1291 14
add.u32 %r141,%r141,%r199;
bra $L50;
$L124:
.loc 1 1283 16
ld.u64 %r319,[%r334];
$L127:
ld.u8 %r673,[%r319];
add.u64 %r675,%r846,%r673;
.loc 1 1283 14
ld.u8 %r858,[%r675];
mov.u16 %r678,%r858;
and.b16 %r677,%r678,8;
cvt.u32.u16 %r679,%r677;
cvt.s32.s8 %r681,%r679;
cvt.u16.u32 %r680,%r681;
setp.eq.u16 %r682,%r680,0;
@ %r682 bra $L128;
.loc 1 1291 14
add.u32 %r141,%r141,%r199;
bra $L50;
$L121:
.loc 1 1303 6
add.u64 %r34,%r336,7;
and.b64 %r286,%r34,-8;
add.u64 %r336,%r286,8;
ld.u64 %r197,[%r286];
.loc 1 1305 14
setp.ne.u32 %r683,%r331,0;
@ %r683 bra $L178;
.loc 1 1307 11
ld.u32 %r685,[%r334+8];
add.u32 %r684,%r685,-1;
st.u32 [%r334+8],%r684;
.loc 1 1308 19
add.u64 %r686,%r308,1;
st.u64 [%r334],%r686;
.loc 1 1308 7
add.u64 %r164,%r197,1;
.loc 1 1308 10
ld.u8 %r687,[%r308];
st.u8 [%r197],%r687;
.loc 1 1312 8
setp.eq.u64 %r688,%r163,1;
@ ! %r688 bra $L309;
bra $L179;
$L136:
.loc 1 1307 11
ld.u32 %r690,[%r334+8];
add.u32 %r689,%r690,-1;
st.u32 [%r334+8],%r689;
.loc 1 1308 19
add.u64 %r691,%r314,1;
st.u64 [%r334],%r691;
add.u64 %r291,%r291,1;
.loc 1 1308 10
ld.u8 %r692,[%r314];
st.u8 [%r164],%r692;
.loc 1 1312 8
add.u64 %r693,%r197,%r163;
setp.ne.u64 %r694,%r693,%r291;
@ %r694 bra $L131;
.loc 1 1321 19
sub.u64 %r695,%r291,%r197;
.loc 1 1321 14
cvt.u32.u64 %r318,%r695;
mov.u64 %r164,%r291;
bra $L129;
$L309:
mov.u64 %r291,%r164;
$L131:
mov.u64 %r164,%r291;
.loc 1 1314 8
ld.u32 %r696,[%r334+8];
setp.gt.s32 %r697,%r696,0;
@ %r697 bra $L132;
.loc 1 327 7
ld.u64 %r265,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r698,%r265,0;
@ %r698 bra $L133;
.loc 1 329 7
setp.eq.u64 %r700,%r265,%r856;
@ %r700 bra $L134;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r265;
call _free_r,(%out_arg1,%out_arg2);
}
$L134:
mov.u64 %r703,0;
st.u64 [%r334+88],%r703;
.loc 1 330 23
ld.u32 %r267,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r267;
.loc 1 330 10
setp.eq.u32 %r704,%r267,0;
@ %r704 bra $L133;
.loc 1 332 22
ld.u64 %r314,[%r334+104];
.loc 1 332 18
st.u64 [%r334],%r314;
bra $L135;
$L133:
.loc 1 338 10
ld.u64 %r705,[%r334+24];
st.u64 [%r334],%r705;
.loc 1 339 10
mov.u32 %r706,0;
st.u32 [%r334+8],%r706;
.loc 1 340 14
ld.u16 %r708,[%r334+16];
or.b16 %r707,%r708,32;
st.u16 [%r334+16],%r707;
.loc 1 1321 19
sub.u64 %r709,%r291,%r197;
.loc 1 1321 14
cvt.u32.u64 %r318,%r709;
bra $L129;
$L132:
.loc 1 1305 16
ld.u64 %r314,[%r334];
$L135:
ld.u8 %r710,[%r314];
add.u64 %r712,%r846,%r710;
.loc 1 1305 14
ld.u8 %r858,[%r712];
mov.u16 %r715,%r858;
and.b16 %r714,%r715,8;
cvt.u32.u16 %r716,%r714;
cvt.s32.s8 %r718,%r716;
cvt.u16.u32 %r717,%r718;
setp.eq.u16 %r719,%r717,0;
@ %r719 bra $L136;
.loc 1 1321 19
sub.u64 %r720,%r291,%r197;
.loc 1 1321 14
cvt.u32.u64 %r318,%r720;
bra $L129;
$L178:
.loc 1 1303 6
mov.u64 %r164,%r197;
.loc 1 1305 14
mov.u32 %r318,%r652;
bra $L129;
$L179:
.loc 1 1312 8
cvt.u32.u64 %r318,%r163;
$L129:
.loc 1 1317 11
mov.u32 %r721,0;
st.u8 [%r164],%r721;
.loc 1 1321 14
add.u32 %r141,%r141,%r318;
.loc 1 1322 17
add.u32 %r332,%r332,1;
bra $L50;
$L95:
.loc 1 1335 14
add.u64 %r722,%r163,-1;
.loc 1 1335 7
setp.le.u64 %r723,%r722,38;
@ %r723 bra $L180;
.loc 1 1338 19
cvt.u32.u64 %r724,%r163;
add.u32 %r170,%r724,-39;
.loc 1 1339 14
mov.u64 %r163,39;
bra $L137;
$L180:
.loc 1 1329 13
mov.u32 %r170,0;
$L137:
.loc 1 1341 10
or.b32 %r168,%r166,3456;
.loc 1 1330 8
mov.u32 %r171,0;
.loc 1 1342 11
mov.u64 %r165,%r857;
$L157:
.loc 1 1344 15
ld.u64 %r130,[%r334];
.loc 1 1344 12
ld.u8 %r131,[%r130];
cvt.u16.u32 %r725,%r131;
setp.gt.u16 %r726,%r725,57;
@ %r726 bra $L138;
setp.gt.u16 %r728,%r725,55;
@ %r728 bra $L139;
setp.eq.u16 %r730,%r725,48;
@ %r730 bra $L140;
setp.gt.u16 %r732,%r725,48;
@ %r732 bra $L141;
add.u16 %r733,%r725,-43;
and.b16 %r736,%r733,-3;
cvt.u32.u16 %r738,%r736;
cvt.u16.u8 %r739,%r738;
setp.eq.u16 %r740,%r739,0;
@ ! %r740 bra $L143;
bra $L142;
$L141:
.loc 1 1390 19
cvta.const.u64 %r741,basefix$0;
cvt.s64.s32 %r742,%r169;
add.u64 %r743,%r742,%r742;
add.u64 %r744,%r741,%r743;
ld.s16 %r169,[%r744];
.loc 1 1391 11
and.b32 %r168,%r168,-2945;
.loc 1 1392 5
bra $L144;
$L138:
setp.gt.u16 %r746,%r725,102;
@ %r746 bra $L145;
setp.gt.u16 %r748,%r725,96;
@ %r748 bra $L146;
setp.gt.u16 %r750,%r725,70;
@ %r750 bra $L147;
setp.gt.u16 %r752,%r725,64;
@ ! %r752 bra $L143;
bra $L146;
$L147:
setp.eq.u16 %r754,%r725,88;
@ %r754 bra $L148;
bra $L143;
$L145:
setp.eq.u16 %r756,%r725,120;
@ %r756 bra $L148;
bra $L143;
$L140:
.loc 1 1361 18
and.b32 %r757,%r168,2048;
.loc 1 1361 8
setp.eq.u32 %r758,%r757,0;
@ %r758 bra $L144;
.loc 1 1363 8
setp.ne.u32 %r759,%r169,0;
@ %r759 bra $L149;
.loc 1 1366 15
or.b32 %r168,%r168,512;
.loc 1 1365 14
mov.u32 %r169,8;
$L149:
.loc 1 1368 15
and.b32 %r760,%r168,1024;
.loc 1 1368 8
setp.eq.u32 %r761,%r760,0;
@ %r761 bra $L150;
.loc 1 1370 15
and.b32 %r168,%r168,-1409;
.loc 1 1371 9
bra $L144;
$L150:
.loc 1 1373 11
and.b32 %r168,%r168,-897;
.loc 1 1374 8
setp.eq.u32 %r762,%r170,0;
@ %r762 bra $L151;
.loc 1 1376 19
add.u32 %r170,%r170,-1;
.loc 1 1377 14
add.u64 %r163,%r163,1;
$L151:
.loc 1 1379 5
add.u32 %r171,%r171,1;
.loc 1 1380 5
bra $L152;
$L139:
.loc 1 1397 19
cvta.const.u64 %r763,basefix$0;
cvt.s64.s32 %r764,%r169;
add.u64 %r765,%r764,%r764;
add.u64 %r766,%r763,%r765;
ld.s16 %r169,[%r766];
.loc 1 1398 8
setp.le.s32 %r767,%r169,8;
@ %r767 bra $L143;
.loc 1 1400 11
and.b32 %r168,%r168,-2945;
.loc 1 1401 5
bra $L144;
$L146:
.loc 1 1417 8
setp.le.s32 %r768,%r169,10;
@ %r768 bra $L143;
.loc 1 1419 11
and.b32 %r168,%r168,-2945;
.loc 1 1420 5
bra $L144;
$L142:
.loc 1 1425 15
and.b32 %r769,%r168,128;
.loc 1 1425 8
setp.eq.u32 %r770,%r769,0;
@ %r770 bra $L143;
.loc 1 1427 15
and.b32 %r168,%r168,-129;
.loc 1 1428 9
bra $L144;
$L148:
.loc 1 1435 16
and.b32 %r771,%r168,1536;
.loc 1 1435 8
setp.ne.u32 %r772,%r771,512;
@ %r772 bra $L143;
.loc 1 1438 15
and.b32 %r187,%r168,-513;
.loc 1 1442 15
or.b32 %r168,%r187,1280;
.loc 1 1437 14
mov.u32 %r169,16;
$L144:
.loc 1 1457 13
cvt.u32.u32 %r773,%r131;
st.u8 [%r165],%r773;
.loc 1 1457 10
add.u64 %r165,%r165,1;
$L152:
.loc 1 1459 12
ld.u32 %r774,[%r334+8];
add.u32 %r140,%r774,-1;
.loc 1 1459 11
st.u32 [%r334+8],%r140;
setp.le.s32 %r775,%r140,0;
@ %r775 bra $L153;
.loc 1 1460 9
add.u64 %r776,%r130,1;
st.u64 [%r334],%r776;
bra $L154;
$L153:
.loc 1 327 7
ld.u64 %r271,[%r334+88];
.loc 1 327 6
setp.eq.u64 %r777,%r271,0;
@ %r777 bra $L155;
.loc 1 329 7
setp.eq.u64 %r779,%r271,%r856;
@ %r779 bra $L156;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r271;
call _free_r,(%out_arg1,%out_arg2);
}
$L156:
mov.u64 %r782,0;
st.u64 [%r334+88],%r782;
.loc 1 330 23
ld.u32 %r273,[%r334+112];
.loc 1 330 19
st.u32 [%r334+8],%r273;
.loc 1 330 10
setp.eq.u32 %r783,%r273,0;
@ %r783 bra $L155;
.loc 1 332 18
ld.u64 %r784,[%r334+104];
st.u64 [%r334],%r784;
bra $L154;
$L155:
.loc 1 338 10
ld.u64 %r785,[%r334+24];
st.u64 [%r334],%r785;
.loc 1 339 10
mov.u32 %r786,0;
st.u32 [%r334+8],%r786;
.loc 1 340 14
ld.u16 %r788,[%r334+16];
or.b16 %r787,%r788,32;
st.u16 [%r334+16],%r787;
bra $L143;
$L154:
.loc 1 1342 30
add.u64 %r163,%r163,-1;
.loc 1 1342 4
setp.ne.u64 %r789,%r163,0;
@ %r789 bra $L157;
$L143:
.loc 1 1473 14
and.b32 %r790,%r168,256;
.loc 1 1473 7
setp.eq.u32 %r791,%r790,0;
@ %r791 bra $L158;
.loc 1 1475 11
setp.le.u64 %r793,%r165,%r857;
@ %r793 bra $L159;
.loc 1 1476 3
add.u64 %r189,%r165,-1;
ld.s8 %r797,[%r165+-1];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r797;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r334;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r798,[%value_in];
}
mov.u64 %r165,%r189;
$L159:
.loc 1 1477 11
setp.eq.u64 %r800,%r165,%r857;
@ %r800 bra $L41;
$L158:
.loc 1 1480 15
and.b32 %r801,%r168,16;
.loc 1 1480 7
setp.ne.u32 %r802,%r801,0;
@ %r802 bra $L160;
.loc 1 1484 11
cvt.u32.u32 %r803,%r801;
st.u8 [%r165],%r803;
.loc 1 1485 15
mov.u64 %r806,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r857;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r806;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r169;
call (%value_in),%r67,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r809,[%value_in];
}
.loc 1 888 11
add.u64 %r810,%r336,7;
and.b64 %r327,%r810,-8;
add.u64 %r336,%r327,8;
.loc 1 1486 18
and.b32 %r811,%r168,32;
.loc 1 1486 11
setp.eq.u32 %r812,%r811,0;
@ %r812 bra $L161;
.loc 1 1488 12
ld.u64 %r196,[%r327];
.loc 1 1498 11
st.u64 [%r196],%r809;
bra $L162;
$L161:
.loc 1 1507 23
and.b32 %r813,%r168,4;
.loc 1 1507 16
setp.eq.u32 %r814,%r813,0;
@ %r814 bra $L163;
.loc 1 1510 9
ld.u64 %r815,[%r327];
st.u16 [%r815],%r809;
bra $L162;
$L163:
.loc 1 1512 23
and.b32 %r816,%r168,1;
.loc 1 1512 16
setp.eq.u32 %r817,%r816,0;
@ %r817 bra $L164;
.loc 1 1515 9
ld.u64 %r818,[%r327];
st.u64 [%r818],%r809;
bra $L162;
$L164:
.loc 1 1518 23
and.b32 %r819,%r168,2;
.loc 1 1518 16
setp.eq.u32 %r820,%r819,0;
@ %r820 bra $L165;
.loc 1 1521 8
mov.u64 %r821,_strtoul_r;
setp.ne.u64 %r822,%r67,%r821;
@ %r822 bra $L166;
.loc 1 1522 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r857;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r806;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r169;
call (%value_in),_strtoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r828,[%value_in];
}
.loc 1 1526 10
mov.u64 %r154,%r828;
bra $L167;
$L166:
.loc 1 1524 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r333;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r857;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r806;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r169;
call (%value_in),_strtoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r834,[%value_in];
}
mov.u64 %r154,%r834;
$L167:
.loc 1 1526 10
ld.u64 %r835,[%r327];
st.u64 [%r835],%r154;
bra $L162;
$L165:
.loc 1 1532 9
ld.u64 %r836,[%r327];
st.u32 [%r836],%r809;
$L162:
.loc 1 1534 17
add.u32 %r332,%r332,1;
$L160:
.loc 1 1536 15
sub.u64 %r838,%r165,%r857;
.loc 1 1536 10
add.u32 %r839,%r171,%r141;
cvt.u32.u64 %r840,%r838;
add.u32 %r141,%r839,%r840;
.loc 1 1537 4
bra $L50;
$L78:
.loc 1 1905 63
setp.eq.u32 %r841,%r332,0;
@ %r841 bra $L181;
.loc 1 1905 25
ld.u16 %r843,[%r334+16];
and.b16 %r842,%r843,64;
setp.ne.u16 %r844,%r842,0;
.loc 1 1905 63
selp.u32 %r332,-1,%r332,%r844;
bra $L41;
$L169:
.loc 1 613 10
mov.u32 %r332,%r28;
bra $L41;
$L181:
.loc 1 1905 63
mov.u32 %r332,-1;
$L43:
$L168:
$L41:
.loc 1 1914 1
mov.u32 %value,%r332;
st.param.u32 [%value_out],%value;
ret;
}

/1520           1612277262  0     0     100666  47044     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _svfiwprintf_r
.visible .func (.param .u32 %value_out) _svfiwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfwprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __ssprint_r
.extern .func (.param .u32 %value_out) __ssprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: btowc
.extern .func (.param .u32 %value_out) btowc (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcslen
.extern .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 4 .u32 $LC0[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC1
.const .align 4 .u32 $LC1[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC2
.const .align 4 .u32 $LC2[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: zeroes$0
.const .align 4 .u32 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 4 .u32 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// BEGIN GLOBAL FUNCTION DEF: _svfiwprintf_r
.visible .func (.param .u32 %value_out) _svfiwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[336];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r31;
.reg .u64 %r33;
.reg .u32 %r36;
.reg .u64 %r56;
.reg .u32 %r79;
.reg .u32 %r107;
.reg .u32 %r108;
.reg .u32 %r121;
.reg .u32 %r122;
.reg .u64 %r125;
.reg .u64 %r133;
.reg .u32 %r134;
.reg .u64 %r138;
.reg .u64 %r142;
.reg .u64 %r147;
.reg .u32 %r148;
.reg .u32 %r149;
.reg .u32 %r155;
.reg .u64 %r156;
.reg .u32 %r158;
.reg .u32 %r159;
.reg .u64 %r160;
.reg .u32 %r161;
.reg .u32 %r162;
.reg .u32 %r163;
.reg .u64 %r164;
.reg .u32 %r165;
.reg .u64 %r166;
.reg .u64 %r167;
.reg .u32 %r168;
.reg .u64 %r170;
.reg .u64 %r174;
.reg .u32 %r175;
.reg .u32 %r176;
.reg .u64 %r177;
.reg .u32 %r179;
.reg .u64 %r183;
.reg .u64 %r184;
.reg .u64 %r186;
.reg .u64 %r187;
.reg .u64 %r189;
.reg .u64 %r190;
.reg .u64 %r191;
.reg .u32 %r197;
.reg .u32 %r198;
.reg .u32 %r199;
.reg .u64 %r200;
.reg .u64 %r202;
.reg .u32 %r203;
.reg .u64 %r208;
.reg .u64 %r210;
.reg .u64 %r212;
.reg .u64 %r213;
.reg .u64 %r214;
.reg .u64 %r215;
.reg .u64 %r217;
.reg .u64 %r218;
.reg .u64 %r219;
.reg .u64 %r220;
.reg .u64 %r221;
.reg .u64 %r222;
.reg .u64 %r223;
.reg .u64 %r224;
.reg .u64 %r225;
.reg .u64 %r226;
.reg .u64 %r227;
.reg .u64 %r228;
.reg .u64 %r229;
.reg .u64 %r230;
.reg .u32 %r231;
.reg .u64 %r233;
.reg .u32 %r234;
.reg .u64 %r236;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u32 %r240;
.reg .u32 %r241;
.reg .u64 %r250;
.reg .u64 %r251;
.reg .u64 %r252;
.reg .u32 %r253;
.reg .u32 %r254;
.reg .u64 %r255;
.reg .u32 %r257;
.reg .u64 %r259;
.reg .u64 %r260;
.reg .u64 %r261;
.reg .u64 %r263;
.reg .u32 %r264;
.reg .u32 %r270;
.reg .u32 %r271;
.reg .u32 %r272;
.reg .u64 %r273;
.reg .u64 %r274;
.reg .u64 %r275;
.reg .u64 %r276;
.reg .u16 %r281;
.reg .u16 %r282;
.reg .pred %r283;
.reg .u64 %r284;
.reg .pred %r285;
.reg .u64 %r287;
.reg .u64 %r288;
.reg .pred %r289;
.reg .u32 %r290;
.reg .u32 %r291;
.reg .u64 %r293;
.reg .u32 %r294;
.reg .u32 %r296;
.reg .u32 %r297;
.reg .u32 %r299;
.reg .u32 %r300;
.reg .u16 %r301;
.reg .u16 %r302;
.reg .u16 %r303;
.reg .u32 %r304;
.reg .u16 %r305;
.reg .pred %r306;
.reg .u32 %r308;
.reg .u32 %r309;
.reg .u32 %r311;
.reg .u32 %r312;
.reg .u16 %r313;
.reg .u16 %r314;
.reg .u16 %r315;
.reg .u32 %r316;
.reg .u16 %r317;
.reg .pred %r318;
.reg .u64 %r319;
.reg .u64 %r321;
.reg .pred %r322;
.reg .u64 %r323;
.reg .u64 %r324;
.reg .u64 %r325;
.reg .u32 %r326;
.reg .pred %r327;
.reg .u32 %r332;
.reg .pred %r333;
.reg .u16 %r334;
.reg .u16 %r335;
.reg .pred %r336;
.reg .u32 %r337;
.reg .pred %r338;
.reg .pred %r339;
.reg .pred %r340;
.reg .pred %r341;
.reg .pred %r342;
.reg .pred %r343;
.reg .pred %r344;
.reg .pred %r345;
.reg .pred %r346;
.reg .pred %r347;
.reg .pred %r348;
.reg .pred %r349;
.reg .pred %r350;
.reg .u32 %r351;
.reg .pred %r352;
.reg .pred %r353;
.reg .pred %r354;
.reg .pred %r355;
.reg .pred %r356;
.reg .pred %r357;
.reg .pred %r358;
.reg .pred %r359;
.reg .pred %r360;
.reg .pred %r361;
.reg .pred %r362;
.reg .pred %r363;
.reg .pred %r364;
.reg .pred %r365;
.reg .pred %r366;
.reg .pred %r367;
.reg .pred %r368;
.reg .pred %r369;
.reg .pred %r370;
.reg .u32 %r371;
.reg .pred %r372;
.reg .u32 %r374;
.reg .u32 %r375;
.reg .u32 %r376;
.reg .u32 %r377;
.reg .u32 %r378;
.reg .pred %r379;
.reg .u32 %r381;
.reg .u32 %r382;
.reg .u32 %r383;
.reg .u32 %r384;
.reg .u32 %r385;
.reg .pred %r386;
.reg .pred %r387;
.reg .pred %r388;
.reg .u32 %r389;
.reg .pred %r390;
.reg .u32 %r391;
.reg .u32 %r392;
.reg .pred %r393;
.reg .u16 %r394;
.reg .u16 %r395;
.reg .u32 %r396;
.reg .u32 %r397;
.reg .pred %r399;
.reg .u32 %r400;
.reg .pred %r401;
.reg .u32 %r402;
.reg .pred %r403;
.reg .u32 %r404;
.reg .pred %r405;
.reg .pred %r410;
.reg .u32 %r411;
.reg .pred %r412;
.reg .u64 %r413;
.reg .u32 %r414;
.reg .pred %r415;
.reg .u64 %r416;
.reg .u64 %r417;
.reg .u32 %r418;
.reg .pred %r419;
.reg .u64 %r420;
.reg .u64 %r421;
.reg .u32 %r422;
.reg .pred %r423;
.reg .u64 %r424;
.reg .u64 %r425;
.reg .u32 %r426;
.reg .pred %r427;
.reg .u32 %r428;
.reg .pred %r429;
.reg .u32 %r430;
.reg .pred %r431;
.reg .u16 %r432;
.reg .u32 %r433;
.reg .u32 %r434;
.reg .u32 %r435;
.reg .pred %r436;
.reg .pred %r437;
.reg .pred %r438;
.reg .u32 %r440;
.reg .u64 %r442;
.reg .pred %r443;
.reg .u64 %r445;
.reg .pred %r446;
.reg .u64 %r449;
.reg .u64 %r450;
.reg .u64 %r451;
.reg .pred %r452;
.reg .u16 %r453;
.reg .u16 %r454;
.reg .u64 %r456;
.reg .u32 %r457;
.reg .pred %r458;
.reg .u32 %r459;
.reg .u64 %r461;
.reg .u32 %r462;
.reg .u64 %r463;
.reg .u64 %r465;
.reg .u32 %r466;
.reg .pred %r467;
.reg .u32 %r469;
.reg .u64 %r471;
.reg .u64 %r472;
.reg .pred %r473;
.reg .u64 %r474;
.reg .u64 %r476;
.reg .u32 %r477;
.reg .u64 %r479;
.reg .u32 %r480;
.reg .pred %r481;
.reg .u32 %r482;
.reg .pred %r483;
.reg .u32 %r484;
.reg .pred %r485;
.reg .u16 %r486;
.reg .pred %r487;
.reg .u32 %r488;
.reg .pred %r489;
.reg .u32 %r490;
.reg .pred %r491;
.reg .u32 %r492;
.reg .pred %r493;
.reg .u16 %r494;
.reg .u32 %r495;
.reg .pred %r496;
.reg .pred %r497;
.reg .u32 %r498;
.reg .u32 %r499;
.reg .pred %r500;
.reg .u32 %r502;
.reg .u32 %r503;
.reg .u32 %r505;
.reg .u32 %r506;
.reg .u16 %r507;
.reg .u16 %r508;
.reg .u16 %r509;
.reg .u32 %r510;
.reg .u16 %r511;
.reg .pred %r512;
.reg .pred %r513;
.reg .pred %r514;
.reg .u32 %r515;
.reg .u32 %r516;
.reg .pred %r517;
.reg .u32 %r519;
.reg .u32 %r520;
.reg .u16 %r522;
.reg .u16 %r523;
.reg .u16 %r525;
.reg .u16 %r526;
.reg .u32 %r528;
.reg .u16 %r529;
.reg .pred %r530;
.reg .u64 %r532;
.reg .u64 %r534;
.reg .u32 %r535;
.reg .u64 %r537;
.reg .u64 %r539;
.reg .pred %r540;
.reg .u32 %r541;
.reg .u32 %r542;
.reg .u64 %r544;
.reg .u32 %r545;
.reg .u32 %r546;
.reg .pred %r549;
.reg .u64 %r551;
.reg .u64 %r553;
.reg .u64 %r554;
.reg .u64 %r555;
.reg .u64 %r556;
.reg .u32 %r557;
.reg .pred %r558;
.reg .u64 %r560;
.reg .u64 %r562;
.reg .pred %r563;
.reg .pred %r564;
.reg .u32 %r565;
.reg .pred %r566;
.reg .pred %r567;
.reg .u32 %r568;
.reg .pred %r569;
.reg .pred %r571;
.reg .pred %r572;
.reg .pred %r573;
.reg .u64 %r575;
.reg .pred %r576;
.reg .u32 %r581;
.reg .pred %r582;
.reg .pred %r583;
.reg .u64 %r585;
.reg .pred %r586;
.reg .u32 %r591;
.reg .pred %r592;
.reg .u32 %r593;
.reg .pred %r594;
.reg .u64 %r596;
.reg .pred %r597;
.reg .u32 %r602;
.reg .pred %r603;
.reg .u64 %r606;
.reg .pred %r607;
.reg .u32 %r612;
.reg .pred %r613;
.reg .pred %r614;
.reg .pred %r615;
.reg .pred %r616;
.reg .u64 %r618;
.reg .pred %r619;
.reg .u32 %r624;
.reg .pred %r625;
.reg .pred %r626;
.reg .u64 %r628;
.reg .pred %r629;
.reg .u32 %r634;
.reg .pred %r635;
.reg .pred %r636;
.reg .pred %r637;
.reg .u64 %r639;
.reg .pred %r640;
.reg .u32 %r645;
.reg .pred %r646;
.reg .pred %r647;
.reg .u64 %r649;
.reg .pred %r650;
.reg .u32 %r655;
.reg .pred %r656;
.reg .u32 %r657;
.reg .u64 %r658;
.reg .pred %r659;
.reg .u32 %r664;
.reg .pred %r665;
.reg .u32 %r666;
.reg .pred %r667;
.reg .pred %r668;
.reg .pred %r669;
.reg .u64 %r671;
.reg .pred %r672;
.reg .u32 %r677;
.reg .pred %r678;
.reg .pred %r679;
.reg .u64 %r681;
.reg .pred %r682;
.reg .u32 %r687;
.reg .pred %r688;
.reg .u32 %r689;
.reg .pred %r690;
.reg .u32 %r691;
.reg .pred %r692;
.reg .u32 %r697;
.reg .pred %r698;
.reg .u64 %r701;
.reg .pred %r702;
.reg .u64 %r706;
.reg .u32 %r707;
.reg .pred %r708;
.reg .u16 %r709;
.reg .u16 %r710;
.reg .u16 %r711;
.reg .u16 %r712;
.reg .pred %r713;
.reg .u16 %r714;
.reg .u16 %r715;
.reg .u16 %r718;
.reg .u16 %r719;
.reg .pred %r720;
.reg .pred %r722;
.reg .pred %r723;
.reg .u32 %r725;
.reg .u32 %r726;
.reg .u32 %r728;
.reg .u32 %r729;
.reg .u16 %r730;
.reg .u16 %r731;
.reg .u16 %r732;
.reg .u32 %r733;
.reg .u16 %r734;
.reg .pred %r735;
.reg .pred %r736;
.reg .u64 %r737;
.reg .u64 %r738;
.reg .pred %r739;
.reg .u64 %r740;
.reg .u64 %r757;
.reg .u64 %r758;
.reg .u64 %r759;
.reg .u64 %r760;
.reg .u32 %r761;
mov.u64 %r273,%ar0;
mov.u64 %r274,%ar1;
mov.u64 %r275,%ar2;
mov.u64 %r276,%ar3;
.loc 1 612 12
ld.u16 %r282,[%r274+16];
and.b16 %r281,%r282,128;
setp.eq.u16 %r283,%r281,0;
@ %r283 bra $L2;
.loc 1 612 33
ld.u64 %r284,[%r274+24];
setp.ne.u64 %r285,%r284,0;
@ %r285 bra $L2;
.loc 1 614 28
mov.u64 %r287,64;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r287;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r288,[%value_in];
}
.loc 1 614 26
st.u64 [%r274],%r288;
.loc 1 614 17
st.u64 [%r274+24],%r288;
.loc 1 615 6
setp.ne.u64 %r289,%r288,0;
@ %r289 bra $L3;
.loc 1 617 17
mov.u32 %r290,12;
st.u32 [%r273],%r290;
.loc 1 618 11
mov.u32 %r272,-1;
bra $L1;
$L3:
.loc 1 620 17
cvt.u32.u64 %r291,%r287;
st.u32 [%r274+32],%r291;
$L2:
.loc 1 626 14
add.u64 %r740,%frame,160;
st.u64 [%frame+288],%r740;
.loc 1 627 16
mov.u64 %r293,0;
st.u64 [%frame+304],%r293;
.loc 1 628 17
cvt.u32.u64 %r294,%r293;
st.u32 [%frame+296],%r294;
.loc 1 626 21
mov.u64 %r164,%r740;
.loc 1 435 11
mov.u64 %r33,%r293;
.loc 1 630 6
cvt.u32.u64 %r272,%r33;
.loc 1 647 4
add.u64 %r757,%frame,288;
.loc 1 1438 4
add.u64 %r758,%frame,312;
.loc 1 1436 4
add.u64 %r759,%frame,320;
.loc 1 1424 10
mov.u64 %r760,%r33;
.loc 1 656 9
cvt.u32.u64 %r761,%r33;
$L5:
.loc 1 644 24
ld.u32 %r175,[%r275];
.loc 1 644 38
set.u32.ne.u32 %r296,%r175,37;
neg.s32 %r297,%r296;
set.u32.ne.u32 %r299,%r175,0;
neg.s32 %r300,%r299;
cvt.u16.u32 %r302,%r297;
cvt.u16.u32 %r303,%r300;
and.b16 %r301,%r302,%r303;
.loc 1 644 23
cvt.u32.u16 %r304,%r301;
cvt.u16.u8 %r305,%r304;
setp.eq.u16 %r306,%r305,0;
@ %r306 bra $L144;
mov.u64 %r174,%r275;
$L7:
mov.u64 %r191,%r174;
.loc 1 645 21
add.u64 %r174,%r174,4;
.loc 1 644 24
ld.u32 %r175,[%r174];
.loc 1 644 38
set.u32.ne.u32 %r308,%r175,0;
neg.s32 %r309,%r308;
set.u32.ne.u32 %r311,%r175,37;
neg.s32 %r312,%r311;
cvt.u16.u32 %r314,%r309;
cvt.u16.u32 %r315,%r312;
and.b16 %r313,%r314,%r315;
.loc 1 644 23
cvt.u32.u16 %r316,%r313;
cvt.u16.u8 %r317,%r316;
setp.ne.u16 %r318,%r317,0;
@ %r318 bra $L7;
.loc 1 646 16
sub.u64 %r319,%r174,%r275;
shr.s64 %r321,%r319,2;
.loc 1 646 10
cvt.u32.u64 %r176,%r321;
.loc 1 646 6
setp.eq.u32 %r322,%r176,0;
@ %r322 bra $L6;
.loc 1 647 4
st.u64 [%r164],%r275;
cvt.s64.s32 %r323,%r176;
shl.b64 %r31,%r323,2;
st.u64 [%r164+8],%r31;
ld.u64 %r325,[%frame+304];
add.u64 %r324,%r325,%r31;
st.u64 [%frame+304],%r324;
ld.u32 %r326,[%frame+296];
add.u32 %r36,%r326,1;
st.u32 [%frame+296],%r36;
setp.le.s32 %r327,%r36,7;
@ %r327 bra $L8;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r332,[%value_in];
}
setp.eq.u32 %r333,%r332,0;
@ %r333 bra $L145;
ld.u16 %r335,[%r274+16];
and.b16 %r334,%r335,64;
cvt.s32.s16 %r270,%r334;
bra $L10;
$L8:
add.u64 %r164,%r164,16;
bra $L9;
$L145:
mov.u64 %r164,%r740;
$L9:
.loc 1 648 8
add.u32 %r272,%r272,%r176;
.loc 1 650 21
ld.u32 %r175,[%r191+4];
bra $L6;
$L144:
.loc 1 644 23
mov.u64 %r174,%r275;
$L6:
.loc 1 650 20
setp.eq.u32 %r336,%r175,0;
@ %r336 bra $L11;
.loc 1 653 6
add.u64 %r275,%r174,4;
.loc 1 659 8
mov.u32 %r337,0;
st.u32 [%frame+320],%r337;
.loc 1 671 14
ld.u32 %r271,[%r174+4];
mov.u32 %r165,%r337;
mov.u32 %r168,%r337;
.loc 1 658 8
mov.u32 %r159,-1;
.loc 1 657 9
mov.u32 %r158,%r337;
.loc 1 655 9
mov.u32 %r108,%r337;
bra $L12;
$L146:
.loc 1 747 10
mov.u64 %r276,%r217;
$L12:
.loc 1 671 18
add.u64 %r275,%r275,4;
.loc 1 671 12
mov.u32 %r155,%r271;
$L13:
.loc 1 672 11
setp.eq.u32 %r338,%r155,100;
@ %r338 bra $L14;
setp.gt.u32 %r339,%r155,100;
@ %r339 bra $L15;
setp.eq.u32 %r340,%r155,46;
@ %r340 bra $L16;
setp.gt.u32 %r341,%r155,46;
@ %r341 bra $L17;
setp.eq.u32 %r342,%r155,42;
@ %r342 bra $L18;
setp.gt.u32 %r343,%r155,42;
@ %r343 bra $L19;
setp.eq.u32 %r344,%r155,32;
@ %r344 bra $L20;
setp.eq.u32 %r345,%r155,35;
@ %r345 bra $L21;
bra $L237;
$L19:
setp.eq.u32 %r346,%r155,43;
@ %r346 bra $L23;
setp.eq.u32 %r347,%r155,45;
@ %r347 bra $L24;
bra $L25;
$L17:
setp.eq.u32 %r348,%r155,88;
@ %r348 bra $L26;
setp.gt.u32 %r349,%r155,88;
@ %r349 bra $L27;
setp.eq.u32 %r350,%r155,48;
@ %r350 bra $L28;
add.u32 %r351,%r155,-49;
setp.gt.u32 %r352,%r351,8;
@ %r352 bra $L25;
mov.u64 %r170,%r275;
.loc 1 817 6
mov.u32 %r158,0;
bra $L29;
$L27:
.loc 1 672 11
setp.eq.u32 %r353,%r155,99;
@ %r353 bra $L30;
bra $L25;
$L15:
setp.eq.u32 %r354,%r155,112;
@ %r354 bra $L31;
setp.gt.u32 %r355,%r155,112;
@ %r355 bra $L32;
setp.eq.u32 %r356,%r155,108;
@ %r356 bra $L33;
setp.gt.u32 %r357,%r155,108;
@ %r357 bra $L34;
setp.eq.u32 %r358,%r155,104;
@ %r358 bra $L35;
setp.eq.u32 %r359,%r155,105;
@ %r359 bra $L14;
bra $L25;
$L34:
setp.eq.u32 %r360,%r155,110;
@ %r360 bra $L36;
setp.eq.u32 %r361,%r155,111;
@ %r361 bra $L37;
bra $L25;
$L32:
setp.eq.u32 %r362,%r155,117;
@ %r362 bra $L38;
setp.gt.u32 %r363,%r155,117;
@ %r363 bra $L39;
setp.eq.u32 %r364,%r155,113;
@ %r364 bra $L40;
setp.eq.u32 %r365,%r155,115;
@ %r365 bra $L41;
bra $L25;
$L39:
setp.ne.u32 %r366,%r155,120;
@ %r366 bra $L25;
setp.eq.u32 %r367,%r165,0;
@ %r367 bra $L42;
st.u32 [%frame+320],%r168;
$L42:
.loc 1 1291 10
cvta.const.u64 %r33,$LC0;
bra $L43;
$L24:
.loc 1 762 14
ld.u32 %r271,[%r275];
bra $L44;
$L20:
ld.u32 %r271,[%r275];
.loc 1 704 7
setp.ne.u32 %r368,%r168,0;
selp.u32 %r165,%r165,1,%r368;
selp.u32 %r168,%r168,32,%r368;
bra $L12;
$L21:
.loc 1 708 10
or.b32 %r108,%r108,1;
.loc 1 671 14
ld.u32 %r271,[%r275];
.loc 1 709 4
bra $L12;
$L18:
.loc 1 747 10
add.u64 %r217,%r276,4;
ld.u32 %r158,[%r276];
.loc 1 762 14
ld.u32 %r271,[%r275];
.loc 1 751 7
setp.ge.s32 %r369,%r158,0;
@ %r369 bra $L146;
.loc 1 753 10
neg.s32 %r158,%r158;
.loc 1 747 10
mov.u64 %r276,%r217;
$L44:
.loc 1 756 10
or.b32 %r108,%r108,4;
.loc 1 757 4
bra $L12;
$L23:
.loc 1 671 14
ld.u32 %r271,[%r275];
.loc 1 760 4
mov.u32 %r165,1;
.loc 1 759 9
mov.u32 %r168,%r155;
.loc 1 760 4
bra $L12;
$L16:
.loc 1 762 18
add.u64 %r202,%r275,4;
.loc 1 762 12
ld.u32 %r155,[%r275];
.loc 1 762 7
setp.eq.u32 %r370,%r155,42;
@ %r370 bra $L46;
.loc 1 801 11
add.u32 %r371,%r155,-48;
.loc 1 801 10
setp.le.u32 %r372,%r371,9;
@ %r372 bra $L47;
.loc 1 762 18
mov.u64 %r275,%r202;
.loc 1 801 10
mov.u32 %r159,%r337;
bra $L13;
$L46:
.loc 1 792 10
ld.u32 %r203,[%r276];
max.s32 %r159,%r203,-1;
.loc 1 671 14
ld.u32 %r271,[%r275+4];
.loc 1 792 10
add.u64 %r276,%r276,4;
.loc 1 762 18
mov.u64 %r275,%r202;
.loc 1 798 5
bra $L12;
$L47:
mov.u64 %r177,%r202;
.loc 1 800 6
mov.u32 %r197,%r337;
$L49:
.loc 1 802 12
shl.b32 %r374,%r197,2;
add.u32 %r375,%r374,%r197;
add.u32 %r376,%r375,%r375;
.loc 1 802 16
add.u32 %r377,%r376,-48;
add.u32 %r197,%r377,%r155;
mov.u64 %r251,%r177;
add.u64 %r275,%r177,4;
mov.u64 %r177,%r275;
.loc 1 803 8
ld.u32 %r155,[%r251];
.loc 1 801 11
add.u32 %r378,%r155,-48;
.loc 1 801 10
setp.le.u32 %r379,%r378,9;
@ %r379 bra $L49;
.loc 1 805 9
max.s32 %r159,%r197,-1;
.loc 1 806 4
bra $L13;
$L28:
.loc 1 813 10
or.b32 %r108,%r108,128;
.loc 1 671 14
ld.u32 %r271,[%r275];
.loc 1 814 4
bra $L12;
$L29:
.loc 1 819 12
shl.b32 %r381,%r158,2;
add.u32 %r382,%r381,%r158;
add.u32 %r383,%r382,%r382;
.loc 1 819 16
add.u32 %r384,%r383,-48;
add.u32 %r158,%r384,%r155;
mov.u64 %r187,%r170;
add.u64 %r170,%r170,4;
mov.u64 %r275,%r170;
.loc 1 820 8
ld.u32 %r155,[%r187];
.loc 1 821 13
add.u32 %r385,%r155,-48;
.loc 1 821 4
setp.le.u32 %r386,%r385,9;
@ %r386 bra $L29;
bra $L13;
$L35:
.loc 1 847 11
or.b32 %r108,%r108,64;
.loc 1 671 14
ld.u32 %r271,[%r275];
.loc 1 848 4
bra $L12;
$L33:
.loc 1 851 8
ld.u32 %r271,[%r275];
.loc 1 851 7
setp.ne.u32 %r387,%r271,108;
@ %r387 bra $L51;
.loc 1 853 11
or.b32 %r108,%r108,32;
.loc 1 671 14
ld.u32 %r271,[%r275+4];
.loc 1 852 8
add.u64 %r275,%r275,4;
bra $L12;
$L51:
.loc 1 856 11
or.b32 %r108,%r108,16;
bra $L12;
$L40:
.loc 1 859 10
or.b32 %r108,%r108,32;
.loc 1 671 14
ld.u32 %r271,[%r275];
.loc 1 860 4
bra $L12;
$L30:
setp.eq.u32 %r388,%r165,0;
@ %r388 bra $L52;
st.u32 [%frame+320],%r168;
$L52:
.loc 1 747 10
add.u64 %r239,%r276,4;
.loc 1 903 30
and.b32 %r389,%r108,16;
.loc 1 903 19
setp.ne.u32 %r390,%r389,0;
@ %r390 bra $L53;
.loc 1 904 17
ld.u32 %r391,[%r276];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r391;
call (%value_in),btowc,(%out_arg1);
ld.param.u32 %r392,[%value_in];
}
.loc 1 905 8
setp.ne.u32 %r393,%r392,-1;
@ %r393 bra $L54;
.loc 1 906 20
ld.u16 %r395,[%r274+16];
or.b16 %r394,%r395,64;
st.u16 [%r274+16],%r394;
.loc 1 1536 31
mov.u32 %r272,%r392;
bra $L1;
$L54:
.loc 1 909 11
st.u32 [%frame],%r392;
.loc 1 903 42
bra $L55;
$L53:
.loc 1 913 11
ld.u32 %r396,[%r276];
st.u32 [%frame],%r396;
$L55:
.loc 1 915 10
mov.u32 %r397,0;
st.u32 [%frame+4],%r397;
.loc 1 917 9
st.u32 [%frame+320],%r397;
.loc 1 918 4
mov.u64 %r276,%r239;
mov.u32 %r162,1;
.loc 1 916 9
mov.u32 %r163,%r162;
.loc 1 902 7
mov.u64 %r156,%frame;
.loc 1 918 4
bra $L56;
$L14:
setp.eq.u32 %r399,%r165,0;
@ %r399 bra $L57;
st.u32 [%frame+320],%r168;
$L57:
.loc 1 921 13
and.b32 %r400,%r108,32;
setp.eq.u32 %r401,%r400,0;
@ %r401 bra $L58;
add.u64 %r229,%r276,7;
and.b64 %r228,%r229,-8;
add.u64 %r276,%r228,8;
ld.u64 %r56,[%r228];
mov.u64 %r160,%r56;
bra $L59;
$L58:
and.b32 %r402,%r108,16;
setp.eq.u32 %r403,%r402,0;
@ %r403 bra $L60;
add.u64 %r223,%r276,7;
and.b64 %r208,%r223,-8;
add.u64 %r276,%r208,8;
ld.u64 %r56,[%r208];
mov.u64 %r160,%r56;
bra $L59;
$L60:
.loc 1 747 10
add.u64 %r238,%r276,4;
.loc 1 921 13
and.b32 %r404,%r108,64;
setp.eq.u32 %r405,%r404,0;
@ %r405 bra $L61;
ld.s16 %r160,[%r276];
.loc 1 923 8
mov.u64 %r56,%r160;
.loc 1 921 13
mov.u64 %r276,%r238;
bra $L59;
$L61:
ld.s32 %r160,[%r276];
.loc 1 923 8
mov.u64 %r56,%r160;
.loc 1 921 13
mov.u64 %r276,%r238;
$L59:
.loc 1 923 7
setp.ge.s64 %r410,%r56,0;
@ %r410 bra $L62;
.loc 1 929 12
neg.s64 %r160,%r160;
.loc 1 930 10
mov.u32 %r411,45;
st.u32 [%frame+320],%r411;
mov.u32 %r241,%r411;
.loc 1 932 9
mov.u32 %r161,1;
bra $L63;
$L36:
setp.eq.u32 %r412,%r165,0;
@ %r412 bra $L64;
st.u32 [%frame+320],%r168;
$L64:
.loc 1 921 13
add.u64 %r413,%r276,7;
and.b64 %r236,%r413,-8;
add.u64 %r276,%r236,8;
.loc 1 1132 14
and.b32 %r414,%r108,32;
.loc 1 1132 7
setp.eq.u32 %r415,%r414,0;
@ %r415 bra $L65;
.loc 1 1133 34
ld.u64 %r416,[%r236];
cvt.s64.s32 %r417,%r272;
st.u64 [%r416],%r417;
bra $L5;
$L65:
.loc 1 1136 14
and.b32 %r418,%r108,16;
.loc 1 1136 7
setp.eq.u32 %r419,%r418,0;
@ %r419 bra $L67;
.loc 1 1137 34
ld.u64 %r420,[%r236];
cvt.s64.s32 %r421,%r272;
st.u64 [%r420],%r421;
bra $L5;
$L67:
.loc 1 1138 19
and.b32 %r422,%r108,64;
.loc 1 1138 12
setp.eq.u32 %r423,%r422,0;
@ %r423 bra $L68;
.loc 1 1139 35
ld.u64 %r424,[%r236];
st.u16 [%r424],%r272;
bra $L5;
$L68:
.loc 1 1145 33
ld.u64 %r425,[%r236];
st.u32 [%r425],%r272;
bra $L5;
$L37:
.loc 1 1148 13
and.b32 %r426,%r108,32;
setp.eq.u32 %r427,%r426,0;
@ %r427 bra $L69;
add.u64 %r190,%r276,7;
and.b64 %r212,%r190,-8;
add.u64 %r276,%r212,8;
ld.u64 %r160,[%r212];
.loc 1 1149 9
mov.u32 %r161,0;
bra $L70;
$L69:
.loc 1 1148 13
and.b32 %r428,%r108,16;
setp.eq.u32 %r429,%r428,0;
@ %r429 bra $L71;
add.u64 %r224,%r276,7;
and.b64 %r213,%r224,-8;
add.u64 %r276,%r213,8;
ld.u64 %r160,[%r213];
.loc 1 1149 9
mov.u32 %r161,0;
bra $L70;
$L71:
.loc 1 747 10
ld.u32 %r234,[%r276];
add.u64 %r276,%r276,4;
.loc 1 1148 13
and.b32 %r430,%r108,64;
setp.eq.u32 %r431,%r430,0;
@ %r431 bra $L72;
cvt.u16.u32 %r432,%r234;
cvt.u64.u16 %r160,%r432;
.loc 1 1149 9
mov.u32 %r161,0;
bra $L70;
$L72:
.loc 1 1148 13
cvt.u64.u32 %r160,%r234;
.loc 1 1149 9
mov.u32 %r161,%r430;
bra $L70;
$L31:
.loc 1 1163 25
add.u64 %r226,%r276,7;
and.b64 %r214,%r226,-8;
add.u64 %r276,%r214,8;
ld.u64 %r160,[%r214];
.loc 1 1166 10
or.b32 %r108,%r108,2;
.loc 1 1167 10
mov.u32 %r433,48;
st.u32 [%frame+312],%r433;
.loc 1 1168 10
mov.u32 %r434,120;
st.u32 [%frame+316],%r434;
.loc 1 1165 10
cvta.const.u64 %r33,$LC0;
.loc 1 1164 9
mov.u32 %r161,2;
.loc 1 1169 4
bra $L70;
$L41:
.loc 1 1174 7
add.u64 %r227,%r276,7;
and.b64 %r189,%r227,-8;
add.u64 %r276,%r189,8;
ld.u64 %r156,[%r189];
.loc 1 1178 9
mov.u32 %r435,0;
st.u32 [%frame+320],%r435;
.loc 1 1184 7
setp.ne.u64 %r436,%r156,0;
@ %r436 bra $L73;
.loc 1 1186 39
min.u32 %r163,%r159,6;
mov.u32 %r162,%r163;
.loc 1 1185 8
cvta.const.u64 %r156,$LC2;
bra $L56;
$L73:
.loc 1 1242 30
and.b32 %r79,%r108,16;
.loc 1 1242 19
setp.ne.u32 %r437,%r79,0;
@ %r437 bra $L74;
.loc 1 1246 8
setp.eq.u32 %r438,%r159,-1;
@ %r438 bra $L75;
.loc 1 1247 16
cvt.s64.s32 %r167,%r159;
mov.u32 %r440,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r156;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r440;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r167;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r442,[%value_in];
}
.loc 1 1248 27
setp.eq.u64 %r443,%r442,0;
@ %r443 bra $L76;
.loc 1 1248 21
sub.u64 %r167,%r442,%r156;
bra $L76;
$L75:
.loc 1 1250 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r156;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r445,[%value_in];
}
mov.u64 %r167,%r445;
$L76:
.loc 1 1251 8
setp.le.u64 %r446,%r167,39;
@ %r446 bra $L77;
.loc 1 1252 64
add.u64 %r449,%r167,1;
.loc 1 1252 39
shl.b64 %r450,%r449,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r450;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r451,[%value_in];
}
mov.u64 %r183,%r451;
.loc 1 1252 12
setp.ne.u64 %r452,%r451,0;
@ %r452 bra $L147;
.loc 1 1254 18
ld.u16 %r454,[%r274+16];
or.b16 %r453,%r454,64;
st.u16 [%r274+16],%r453;
.loc 1 1536 31
mov.u32 %r272,-1;
bra $L1;
$L77:
.loc 1 1260 5
setp.eq.u64 %r736,%r167,0;
@ %r736 bra $L148;
mov.u64 %r166,%r760;
.loc 1 1259 9
mov.u64 %r183,%frame;
bra $L78;
$L147:
mov.u64 %r166,%r183;
setp.eq.u64 %r736,%r167,0;
$L78:
mov.u64 %r184,%r183;
mov.u64 %r186,0;
$L80:
.loc 1 1261 20
add.u64 %r456,%r156,%r186;
ld.s8 %r457,[%r456];
st.u32 [%r184],%r457;
.loc 1 1260 5
add.u64 %r186,%r186,1;
add.u64 %r184,%r184,4;
setp.gt.u64 %r458,%r167,%r186;
@ %r458 bra $L80;
.loc 1 1260 35
@ %r736 bra $L81;
add.u64 %r461,%r167,-1;
cvt.u32.u64 %r462,%r461;
add.u32 %r459,%r462,1;
bra $L82;
$L81:
mov.u32 %r459,1;
$L82:
mov.u32 %r163,%r459;
.loc 1 1260 25
selp.u64 %r463,1,%r167,%r736;
.loc 1 1262 7
shl.b64 %r465,%r463,2;
add.u64 %r233,%r183,%r465;
mov.u32 %r162,%r163;
mov.u64 %r156,%r183;
bra $L79;
$L148:
.loc 1 1260 5
mov.u32 %r162,%r79;
.loc 1 1260 15
mov.u32 %r163,%r79;
.loc 1 1260 5
mov.u64 %r233,%frame;
mov.u64 %r166,%r760;
.loc 1 1259 9
mov.u64 %r156,%frame;
$L79:
.loc 1 1262 14
mov.u32 %r466,0;
st.u32 [%r233],%r466;
.loc 1 1425 7
ld.u32 %r241,[%frame+320];
.loc 1 656 9
mov.u32 %r159,%r79;
.loc 1 1242 42
mov.u32 %r148,%r108;
bra $L85;
$L74:
.loc 1 1265 12
setp.eq.u32 %r467,%r159,-1;
@ %r467 bra $L86;
.loc 1 1271 18
cvt.s64.s32 %r471,%r159;
mov.u32 %r469,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r156;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r469;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r471;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r472,[%value_in];
}
mov.u64 %r166,%r472;
.loc 1 1273 8
setp.eq.u64 %r473,%r166,0;
@ %r473 bra $L87;
.loc 1 1274 15
sub.u64 %r474,%r166,%r156;
shr.s64 %r476,%r474,2;
cvt.u32.u64 %r477,%r476;
min.s32 %r163,%r159,%r477;
.loc 1 1425 7
ld.u32 %r241,[%frame+320];
.loc 1 1424 10
max.s32 %r162,%r163,0;
mov.u32 %r148,%r108;
mov.u64 %r166,%r760;
.loc 1 656 9
mov.u32 %r159,%r761;
bra $L85;
$L86:
.loc 1 1280 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r156;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r479,[%value_in];
}
.loc 1 1280 10
cvt.u32.u64 %r163,%r479;
.loc 1 1425 7
ld.u32 %r241,[%frame+320];
.loc 1 1424 10
max.s32 %r162,%r163,0;
mov.u32 %r148,%r108;
mov.u64 %r166,%r760;
.loc 1 656 9
mov.u32 %r159,%r761;
bra $L85;
$L38:
.loc 1 1284 13
and.b32 %r480,%r108,32;
setp.eq.u32 %r481,%r480,0;
@ %r481 bra $L88;
add.u64 %r215,%r276,7;
and.b64 %r221,%r215,-8;
add.u64 %r276,%r221,8;
ld.u64 %r160,[%r221];
.loc 1 1285 9
mov.u32 %r161,1;
bra $L70;
$L88:
.loc 1 1284 13
and.b32 %r482,%r108,16;
setp.eq.u32 %r483,%r482,0;
@ %r483 bra $L89;
add.u64 %r225,%r276,7;
and.b64 %r210,%r225,-8;
add.u64 %r276,%r210,8;
ld.u64 %r160,[%r210];
.loc 1 1285 9
mov.u32 %r161,1;
bra $L70;
$L89:
.loc 1 747 10
ld.u32 %r231,[%r276];
add.u64 %r276,%r276,4;
.loc 1 1284 13
and.b32 %r484,%r108,64;
setp.eq.u32 %r485,%r484,0;
@ %r485 bra $L90;
cvt.u16.u32 %r486,%r231;
cvt.u64.u16 %r160,%r486;
.loc 1 1285 9
mov.u32 %r161,1;
bra $L70;
$L90:
.loc 1 1284 13
cvt.u64.u32 %r160,%r231;
.loc 1 1285 9
mov.u32 %r161,1;
bra $L70;
$L26:
setp.eq.u32 %r487,%r165,0;
@ %r487 bra $L91;
st.u32 [%frame+320],%r168;
$L91:
.loc 1 1288 10
cvta.const.u64 %r33,$LC1;
$L43:
.loc 1 1292 17
and.b32 %r488,%r108,32;
setp.eq.u32 %r489,%r488,0;
@ %r489 bra $L92;
add.u64 %r222,%r276,7;
and.b64 %r220,%r222,-8;
add.u64 %r276,%r220,8;
ld.u64 %r160,[%r220];
bra $L93;
$L92:
and.b32 %r490,%r108,16;
setp.eq.u32 %r491,%r490,0;
@ %r491 bra $L94;
add.u64 %r219,%r276,7;
and.b64 %r218,%r219,-8;
add.u64 %r276,%r218,8;
ld.u64 %r160,[%r218];
bra $L93;
$L94:
.loc 1 747 10
ld.u32 %r240,[%r276];
add.u64 %r276,%r276,4;
.loc 1 1292 17
and.b32 %r492,%r108,64;
setp.eq.u32 %r493,%r492,0;
@ %r493 bra $L95;
cvt.u16.u32 %r494,%r240;
cvt.u64.u16 %r160,%r494;
bra $L93;
$L95:
cvt.u64.u32 %r160,%r240;
$L93:
.loc 1 1295 14
and.b32 %r495,%r108,1;
.loc 1 1295 7
setp.eq.u32 %r496,%r495,0;
@ %r496 bra $L149;
.loc 1 1295 20
setp.eq.u64 %r497,%r160,0;
@ %r497 bra $L150;
.loc 1 1296 11
mov.u32 %r498,48;
st.u32 [%frame+312],%r498;
.loc 1 1297 11
st.u32 [%frame+316],%r155;
.loc 1 1298 11
or.b32 %r108,%r108,2;
.loc 1 1293 9
mov.u32 %r161,2;
bra $L70;
$L149:
mov.u32 %r161,2;
bra $L70;
$L150:
mov.u32 %r161,2;
$L70:
.loc 1 1305 16
mov.u32 %r499,0;
st.u32 [%frame+320],%r499;
mov.u32 %r241,%r499;
$L63:
.loc 1 1311 14
setp.eq.u32 %r500,%r159,-1;
@ %r500 bra $L96;
.loc 1 1312 11
and.b32 %r148,%r108,-129;
.loc 1 1320 15
set.u32.ne.u64 %r502,%r160,0;
neg.s32 %r503,%r502;
.loc 1 1320 28
set.u32.ne.u32 %r505,%r159,0;
neg.s32 %r506,%r505;
.loc 1 1320 20
cvt.u16.u32 %r508,%r503;
cvt.u16.u32 %r509,%r506;
or.b16 %r507,%r508,%r509;
.loc 1 1320 7
cvt.u32.u16 %r510,%r507;
cvt.u16.u8 %r511,%r510;
setp.eq.u16 %r512,%r511,0;
@ %r512 bra $L97;
.loc 1 1312 11
mov.u32 %r108,%r148;
$L96:
setp.eq.u32 %r513,%r161,1;
@ %r513 bra $L98;
setp.eq.u32 %r514,%r161,2;
@ %r514 bra $L151;
mov.u64 %r156,%r740;
$L100:
mov.u64 %r230,%r156;
.loc 1 1329 13
add.u64 %r156,%r156,-4;
.loc 1 1329 15
cvt.u32.u64 %r516,%r160;
and.b32 %r515,%r516,7;
add.u32 %r107,%r515,48;
.loc 1 1329 13
st.u32 [%r156],%r107;
.loc 1 1330 14
shr.u64 %r160,%r160,3;
.loc 1 1331 6
setp.ne.u64 %r517,%r160,0;
@ %r517 bra $L100;
.loc 1 1333 22
set.u32.ne.u32 %r519,%r107,48;
neg.s32 %r520,%r519;
.loc 1 1333 9
cvt.u16.u32 %r523,%r108;
and.b16 %r522,%r523,1;
.loc 1 1333 22
cvt.u16.u32 %r526,%r520;
and.b16 %r525,%r526,%r522;
cvt.u32.u16 %r528,%r525;
cvt.u16.u8 %r529,%r528;
setp.ne.u16 %r530,%r529,0;
@ %r530 bra $L101;
.loc 1 1395 21
sub.u64 %r532,%r740,%r156;
shr.s64 %r534,%r532,2;
.loc 1 1395 9
cvt.u32.u64 %r163,%r534;
mov.u32 %r148,%r108;
bra $L102;
$L101:
.loc 1 1334 13
add.u64 %r200,%r230,-8;
mov.u32 %r535,48;
st.u32 [%r156+-4],%r535;
.loc 1 1395 21
sub.u64 %r537,%r740,%r200;
shr.s64 %r539,%r537,2;
.loc 1 1395 9
cvt.u32.u64 %r163,%r539;
mov.u32 %r148,%r108;
.loc 1 1334 13
mov.u64 %r156,%r200;
bra $L102;
$L157:
.loc 1 1312 11
mov.u32 %r108,%r148;
$L98:
.loc 1 1339 9
setp.gt.u64 %r540,%r160,9;
@ %r540 bra $L152;
.loc 1 1340 15
cvt.u32.u64 %r542,%r160;
add.u32 %r541,%r542,48;
.loc 1 1340 13
st.u32 [%frame+156],%r541;
.loc 1 1341 7
mov.u32 %r148,%r108;
mov.u32 %r163,1;
.loc 1 1340 13
add.u64 %r156,%frame,156;
.loc 1 1341 7
bra $L102;
$L152:
.loc 1 1319 7
mov.u64 %r156,%r740;
$L103:
.loc 1 1347 14
add.u64 %r156,%r156,-4;
.loc 1 1347 16
rem.u64 %r544,%r160,10;
cvt.u32.u64 %r546,%r544;
add.u32 %r545,%r546,48;
.loc 1 1347 14
st.u32 [%r156],%r545;
mov.u64 %r250,%r160;
.loc 1 1366 15
div.u64 %r160,%r160,10;
.loc 1 1367 6
setp.gt.u64 %r549,%r250,9;
@ %r549 bra $L103;
.loc 1 1395 21
sub.u64 %r551,%r740,%r156;
shr.s64 %r553,%r551,2;
.loc 1 1395 9
cvt.u32.u64 %r163,%r553;
mov.u32 %r148,%r108;
bra $L102;
$L151:
mov.u64 %r156,%r740;
$L99:
.loc 1 1372 13
add.u64 %r156,%r156,-4;
.loc 1 1372 28
and.b64 %r554,%r160,15;
.loc 1 1372 20
shl.b64 %r555,%r554,2;
add.u64 %r556,%r33,%r555;
.loc 1 1372 13
ld.u32 %r557,[%r556];
st.u32 [%r156],%r557;
.loc 1 1373 14
shr.u64 %r160,%r160,4;
.loc 1 1374 6
setp.ne.u64 %r558,%r160,0;
@ %r558 bra $L99;
.loc 1 1395 21
sub.u64 %r560,%r740,%r156;
shr.s64 %r562,%r560,2;
.loc 1 1395 9
cvt.u32.u64 %r163,%r562;
mov.u32 %r148,%r108;
bra $L102;
$L97:
.loc 1 1392 32
setp.ne.u32 %r563,%r161,0;
@ %r563 bra $L153;
.loc 1 1392 55
and.b32 %r163,%r108,1;
.loc 1 1392 45
setp.eq.u32 %r564,%r163,0;
@ %r564 bra $L154;
.loc 1 1393 32
mov.u32 %r565,48;
st.u32 [%frame+156],%r565;
mov.u32 %r159,%r161;
add.u64 %r156,%frame,156;
bra $L102;
$L153:
mov.u32 %r159,0;
mov.u32 %r163,%r159;
.loc 1 1319 7
mov.u64 %r156,%r740;
bra $L102;
$L154:
mov.u32 %r159,%r161;
mov.u64 %r156,%r740;
$L102:
.loc 1 1424 10
max.s32 %r162,%r159,%r163;
mov.u64 %r166,%r760;
bra $L85;
$L237:
setp.eq.u32 %r566,%r165,0;
@ %r566 bra $L104;
$L142:
st.u32 [%frame+320],%r168;
$L104:
.loc 1 1399 7
setp.eq.u32 %r567,%r155,0;
@ %r567 bra $L11;
$L143:
.loc 1 1403 8
st.u32 [%frame],%r155;
.loc 1 1405 9
mov.u32 %r568,0;
st.u32 [%frame+320],%r568;
.loc 1 1406 4
mov.u32 %r162,1;
.loc 1 1404 9
mov.u32 %r163,%r162;
.loc 1 1402 7
mov.u64 %r156,%frame;
.loc 1 1406 4
bra $L56;
$L87:
.loc 1 1425 7
ld.u32 %r241,[%frame+320];
mov.u32 %r162,%r159;
mov.u32 %r163,%r159;
mov.u32 %r148,%r108;
.loc 1 656 9
cvt.u32.u64 %r159,%r166;
$L85:
.loc 1 1425 6
setp.eq.u32 %r569,%r241,0;
@ %r569 bra $L105;
.loc 1 1426 10
add.u32 %r162,%r162,1;
$L105:
.loc 1 1427 13
and.b32 %r121,%r148,2;
.loc 1 1427 6
setp.eq.u32 %r739,%r121,0;
@ %r739 bra $L106;
.loc 1 1428 10
add.u32 %r162,%r162,2;
$L106:
.loc 1 1431 14
and.b32 %r122,%r148,132;
.loc 1 1436 4
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
.loc 1 1431 6
setp.ne.u32 %r571,%r122,0;
@ %r571 bra $L107;
.loc 1 1432 4
sub.u32 %r198,%r158,%r162;
setp.le.s32 %r572,%r198,0;
@ %r572 bra $L107;
setp.le.s32 %r573,%r198,16;
@ ! %r573 bra $L238;
cvta.const.u64 %r738,blanks$1;
bra $L108;
$L238:
cvta.const.u64 %r738,blanks$1;
$L112:
st.u64 [%r164],%r738;
mov.u64 %r575,64;
st.u64 [%r164+8],%r575;
add.u64 %r252,%r252,64;
st.u64 [%frame+304],%r252;
add.u32 %r253,%r253,1;
st.u32 [%frame+296],%r253;
setp.gt.s32 %r576,%r253,7;
@ %r576 bra $L109;
add.u64 %r164,%r164,16;
bra $L110;
$L109:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r581,[%value_in];
}
setp.ne.u32 %r582,%r581,0;
@ %r582 bra $L111;
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
mov.u64 %r164,%r740;
$L110:
add.u32 %r198,%r198,-16;
setp.gt.s32 %r583,%r198,16;
@ %r583 bra $L112;
$L108:
st.u64 [%r164],%r738;
cvt.s64.s32 %r585,%r198;
shl.b64 %r125,%r585,2;
st.u64 [%r164+8],%r125;
add.u64 %r252,%r252,%r125;
st.u64 [%frame+304],%r252;
add.u32 %r253,%r253,1;
st.u32 [%frame+296],%r253;
setp.gt.s32 %r586,%r253,7;
@ %r586 bra $L113;
add.u64 %r164,%r164,16;
bra $L107;
$L113:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r591,[%value_in];
}
setp.ne.u32 %r592,%r591,0;
@ %r592 bra $L111;
.loc 1 1436 4
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
.loc 1 1432 4
mov.u64 %r164,%r740;
$L107:
.loc 1 1436 4
add.u32 %r257,%r253,1;
add.u64 %r259,%r164,16;
.loc 1 1435 6
ld.u32 %r593,[%frame+320];
setp.eq.u32 %r594,%r593,0;
@ %r594 bra $L114;
.loc 1 1436 4
st.u64 [%r164],%r759;
mov.u64 %r596,4;
st.u64 [%r164+8],%r596;
add.u64 %r252,%r252,4;
st.u64 [%frame+304],%r252;
st.u32 [%frame+296],%r257;
setp.gt.s32 %r597,%r257,7;
@ %r597 bra $L115;
.loc 1 1438 4
add.u32 %r254,%r253,2;
add.u64 %r255,%r164,32;
mov.u32 %r253,%r257;
mov.u32 %r257,%r254;
.loc 1 1436 4
mov.u64 %r164,%r259;
.loc 1 1438 4
mov.u64 %r259,%r255;
bra $L114;
$L115:
.loc 1 1436 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r602,[%value_in];
}
setp.ne.u32 %r603,%r602,0;
@ %r603 bra $L111;
.loc 1 1438 4
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
add.u32 %r257,%r253,1;
add.u64 %r259,%frame,176;
.loc 1 1436 4
mov.u64 %r164,%r740;
$L114:
.loc 1 1437 6
@ %r739 bra $L116;
.loc 1 1438 4
st.u64 [%r164],%r758;
mov.u64 %r606,8;
st.u64 [%r164+8],%r606;
add.u64 %r252,%r252,8;
st.u64 [%frame+304],%r252;
st.u32 [%frame+296],%r257;
setp.gt.s32 %r607,%r257,7;
@ %r607 bra $L117;
.loc 1 1512 3
mov.u32 %r253,%r257;
add.u32 %r257,%r257,1;
.loc 1 1438 4
mov.u64 %r164,%r259;
.loc 1 1512 3
add.u64 %r259,%r259,16;
bra $L116;
$L117:
.loc 1 1438 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r612,[%value_in];
}
setp.ne.u32 %r613,%r612,0;
@ %r613 bra $L111;
.loc 1 1512 3
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
add.u32 %r257,%r253,1;
add.u64 %r259,%frame,176;
.loc 1 1438 4
mov.u64 %r164,%r740;
$L116:
.loc 1 1441 6
setp.ne.u32 %r614,%r122,128;
@ %r614 bra $L118;
.loc 1 1442 4
sub.u32 %r179,%r158,%r162;
setp.le.s32 %r615,%r179,0;
@ %r615 bra $L118;
setp.le.s32 %r616,%r179,16;
@ %r616 bra $L155;
cvta.const.u64 %r737,zeroes$0;
$L122:
st.u64 [%r164],%r737;
mov.u64 %r618,64;
st.u64 [%r164+8],%r618;
add.u64 %r252,%r252,64;
st.u64 [%frame+304],%r252;
add.u32 %r253,%r253,1;
st.u32 [%frame+296],%r253;
setp.gt.s32 %r619,%r253,7;
@ %r619 bra $L120;
add.u64 %r164,%r164,16;
bra $L121;
$L120:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r624,[%value_in];
}
setp.ne.u32 %r625,%r624,0;
@ %r625 bra $L111;
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
mov.u64 %r164,%r740;
$L121:
add.u32 %r179,%r179,-16;
setp.gt.s32 %r626,%r179,16;
@ %r626 bra $L122;
add.u32 %r253,%r253,1;
add.u64 %r260,%r164,16;
bra $L119;
$L155:
mov.u64 %r260,%r259;
mov.u32 %r253,%r257;
cvta.const.u64 %r737,zeroes$0;
$L119:
st.u64 [%r164],%r737;
cvt.s64.s32 %r628,%r179;
shl.b64 %r133,%r628,2;
st.u64 [%r164+8],%r133;
add.u64 %r252,%r252,%r133;
st.u64 [%frame+304],%r252;
st.u32 [%frame+296],%r253;
setp.gt.s32 %r629,%r253,7;
@ %r629 bra $L123;
.loc 1 1512 3
add.u32 %r257,%r253,1;
add.u64 %r259,%r260,16;
.loc 1 1442 4
mov.u64 %r164,%r260;
bra $L118;
$L123:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r634,[%value_in];
}
setp.ne.u32 %r635,%r634,0;
@ %r635 bra $L111;
.loc 1 1512 3
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
add.u32 %r257,%r253,1;
add.u64 %r259,%frame,176;
.loc 1 1442 4
mov.u64 %r164,%r740;
$L118:
.loc 1 1445 3
sub.u32 %r199,%r159,%r163;
setp.le.s32 %r636,%r199,0;
@ %r636 bra $L124;
setp.le.s32 %r637,%r199,16;
@ %r637 bra $L156;
cvta.const.u64 %r737,zeroes$0;
$L128:
st.u64 [%r164],%r737;
mov.u64 %r639,64;
st.u64 [%r164+8],%r639;
add.u64 %r252,%r252,64;
st.u64 [%frame+304],%r252;
add.u32 %r253,%r253,1;
st.u32 [%frame+296],%r253;
setp.gt.s32 %r640,%r253,7;
@ %r640 bra $L126;
add.u64 %r164,%r164,16;
bra $L127;
$L126:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r645,[%value_in];
}
setp.ne.u32 %r646,%r645,0;
@ %r646 bra $L111;
ld.u64 %r252,[%frame+304];
ld.u32 %r253,[%frame+296];
mov.u64 %r164,%r740;
$L127:
add.u32 %r199,%r199,-16;
setp.gt.s32 %r647,%r199,16;
@ %r647 bra $L128;
add.u32 %r257,%r253,1;
add.u64 %r261,%r164,16;
bra $L125;
$L156:
mov.u64 %r261,%r259;
cvta.const.u64 %r737,zeroes$0;
$L125:
st.u64 [%r164],%r737;
cvt.s64.s32 %r649,%r199;
shl.b64 %r138,%r649,2;
st.u64 [%r164+8],%r138;
add.u64 %r252,%r252,%r138;
st.u64 [%frame+304],%r252;
st.u32 [%frame+296],%r257;
setp.gt.s32 %r650,%r257,7;
@ %r650 bra $L129;
.loc 1 1512 3
add.u32 %r257,%r257,1;
add.u64 %r259,%r261,16;
.loc 1 1445 3
mov.u64 %r164,%r261;
bra $L124;
$L129:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r655,[%value_in];
}
setp.ne.u32 %r656,%r655,0;
@ %r656 bra $L111;
.loc 1 1512 3
ld.u64 %r252,[%frame+304];
ld.u32 %r657,[%frame+296];
add.u32 %r257,%r657,1;
add.u64 %r259,%frame,176;
.loc 1 1445 3
mov.u64 %r164,%r740;
$L124:
.loc 1 1512 3
st.u64 [%r164],%r156;
cvt.s64.s32 %r658,%r163;
shl.b64 %r142,%r658,2;
st.u64 [%r164+8],%r142;
add.u64 %r263,%r142,%r252;
st.u64 [%frame+304],%r263;
st.u32 [%frame+296],%r257;
setp.le.s32 %r659,%r257,7;
@ %r659 bra $L130;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r664,[%value_in];
}
setp.ne.u32 %r665,%r664,0;
@ %r665 bra $L111;
.loc 1 1521 3
ld.u64 %r263,[%frame+304];
.loc 1 1512 3
mov.u64 %r259,%r740;
$L130:
.loc 1 1515 13
and.b32 %r666,%r148,4;
.loc 1 1515 6
setp.eq.u32 %r667,%r666,0;
@ %r667 bra $L131;
.loc 1 1516 4
sub.u32 %r134,%r158,%r162;
setp.le.s32 %r668,%r134,0;
@ %r668 bra $L131;
ld.u32 %r264,[%frame+296];
setp.le.s32 %r669,%r134,16;
@ ! %r669 bra $L239;
cvta.const.u64 %r738,blanks$1;
bra $L132;
$L239:
cvta.const.u64 %r738,blanks$1;
$L135:
st.u64 [%r259],%r738;
mov.u64 %r671,64;
st.u64 [%r259+8],%r671;
add.u64 %r263,%r263,64;
st.u64 [%frame+304],%r263;
add.u32 %r264,%r264,1;
st.u32 [%frame+296],%r264;
setp.gt.s32 %r672,%r264,7;
@ %r672 bra $L133;
add.u64 %r259,%r259,16;
bra $L134;
$L133:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r677,[%value_in];
}
setp.ne.u32 %r678,%r677,0;
@ %r678 bra $L111;
ld.u64 %r263,[%frame+304];
ld.u32 %r264,[%frame+296];
mov.u64 %r259,%r740;
$L134:
add.u32 %r134,%r134,-16;
setp.gt.s32 %r679,%r134,16;
@ %r679 bra $L135;
$L132:
st.u64 [%r259],%r738;
cvt.s64.s32 %r681,%r134;
shl.b64 %r147,%r681,2;
st.u64 [%r259+8],%r147;
add.u64 %r263,%r263,%r147;
st.u64 [%frame+304],%r263;
add.u32 %r149,%r264,1;
st.u32 [%frame+296],%r149;
setp.le.s32 %r682,%r149,7;
@ %r682 bra $L131;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r687,[%value_in];
}
setp.ne.u32 %r688,%r687,0;
@ %r688 bra $L111;
.loc 1 1521 3
ld.u64 %r263,[%frame+304];
$L131:
.loc 1 1519 33
max.s32 %r689,%r158,%r162;
.loc 1 1519 7
add.u32 %r272,%r272,%r689;
.loc 1 1521 3
setp.ne.u64 %r690,%r263,0;
@ %r690 bra $L136;
$L138:
mov.u32 %r691,0;
st.u32 [%frame+296],%r691;
.loc 1 1523 20
setp.ne.u64 %r692,%r166,0;
@ %r692 bra $L137;
.loc 1 1521 3
mov.u64 %r164,%r740;
bra $L5;
$L136:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r757;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r697,[%value_in];
}
setp.ne.u32 %r698,%r697,0;
@ ! %r698 bra $L138;
bra $L111;
$L137:
.loc 1 1524 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r166;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 1521 3
mov.u64 %r164,%r740;
bra $L5;
$L11:
.loc 1 1529 2
ld.u64 %r701,[%frame+304];
setp.eq.u64 %r702,%r701,0;
@ %r702 bra $L139;
add.u64 %r706,%frame,288;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r274;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r706;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r707,[%value_in];
}
setp.eq.u32 %r708,%r707,0;
@ %r708 bra $L139;
ld.u16 %r710,[%r274+16];
and.b16 %r709,%r710,64;
cvt.s32.s16 %r270,%r709;
bra $L10;
$L139:
ld.u16 %r712,[%r274+16];
and.b16 %r711,%r712,64;
cvt.s32.s16 %r270,%r711;
bra $L10;
$L111:
.loc 1 1531 5
setp.ne.u64 %r713,%r166,0;
@ %r713 bra $L140;
ld.u16 %r715,[%r274+16];
and.b16 %r714,%r715,64;
cvt.s32.s16 %r270,%r714;
bra $L10;
$L140:
.loc 1 1532 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r273;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r166;
call _free_r,(%out_arg1,%out_arg2);
}
ld.u16 %r719,[%r274+16];
and.b16 %r718,%r719,64;
cvt.s32.s16 %r270,%r718;
$L10:
.loc 1 1536 31
setp.eq.u32 %r720,%r270,0;
selp.u32 %r272,%r272,-1,%r720;
bra $L1;
$L56:
.loc 1 656 9
mov.u32 %r148,%r108;
mov.u64 %r166,%r760;
mov.u32 %r159,%r761;
bra $L105;
$L62:
.loc 1 704 8
ld.u32 %r241,[%frame+320];
.loc 1 1311 14
setp.ne.u32 %r722,%r159,-1;
@ %r722 bra $L141;
bra $L98;
$L25:
setp.ne.u32 %r723,%r165,0;
@ ! %r723 bra $L143;
bra $L142;
$L141:
.loc 1 1312 11
and.b32 %r148,%r108,-129;
.loc 1 1320 28
set.u32.ne.u32 %r725,%r159,0;
neg.s32 %r726,%r725;
.loc 1 1320 15
set.u32.ne.u64 %r728,%r160,0;
neg.s32 %r729,%r728;
.loc 1 1320 20
cvt.u16.u32 %r731,%r726;
cvt.u16.u32 %r732,%r729;
or.b16 %r730,%r731,%r732;
.loc 1 1320 7
cvt.u32.u16 %r733,%r730;
cvt.u16.u8 %r734,%r733;
setp.ne.u16 %r735,%r734,0;
@ %r735 bra $L157;
mov.u32 %r159,0;
mov.u32 %r163,%r159;
.loc 1 1319 7
mov.u64 %r156,%r740;
bra $L102;
$L1:
.loc 1 1538 1
mov.u32 %value,%r272;
st.param.u32 [%value_out],%value;
ret;
}
/1541           1612277262  0     0     100666  51650     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _sungetwc_r$isra$0
.func _sungetwc_r$isra$0 (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vfwscanf.c"
// BEGIN GLOBAL FUNCTION DECL: __ssvfiwscanf_r
.visible .func (.param .u32 %value_out) __ssvfiwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __submore
.extern .func (.param .u32 %value_out) __submore (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: iswspace
.extern .func (.param .u32 %value_out) iswspace (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __ssrefill_r
.extern .func (.param .u32 %value_out) __ssrefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _wcstoul_r
.extern .func (.param .u64 %value_out) _wcstoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstol_r
.extern .func (.param .u64 %value_out) _wcstol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcrtomb_r
.extern .func (.param .u64 %value_out) _wcrtomb_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcrtomb
.extern .func (.param .u64 %value_out) wcrtomb (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstoull_r
.extern .func (.param .u64 %value_out) _wcstoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstoll_r
.extern .func (.param .u64 %value_out) _wcstoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN FUNCTION DEF: _sungetwc_r$isra$0
.func _sungetwc_r$isra$0 (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r27;
.reg .u64 %r34;
.reg .u64 %r44;
.reg .u32 %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .pred %r49;
.reg .u16 %r50;
.reg .u16 %r51;
.reg .u64 %r52;
.reg .pred %r53;
.reg .u32 %r54;
.reg .pred %r55;
.reg .u64 %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u32 %r61;
.reg .pred %r62;
.reg .pred %r63;
.reg .pred %r64;
.reg .u32 %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .u64 %r71;
.reg .u32 %r72;
mov.u64 %r46,%ar0;
mov.u32 %r47,%ar1;
mov.u64 %r48,%ar2;
.loc 1 269 6
setp.ne.u32 %r49,%r47,-1;
@ ! %r49 bra $L1;
.loc 1 273 14
ld.u16 %r51,[%r48+16];
and.b16 %r50,%r51,-33;
st.u16 [%r48+16],%r50;
.loc 1 282 13
ld.u32 %r45,[%r48+8];
.loc 1 280 6
ld.u64 %r52,[%r48+88];
setp.eq.u64 %r53,%r52,0;
@ %r53 bra $L4;
.loc 1 282 10
ld.u32 %r54,[%r48+96];
setp.le.s32 %r55,%r54,%r45;
@ %r55 bra $L5;
$L7:
.loc 1 286 14
ld.u64 %r27,[%r48];
add.u64 %r56,%r27,-4;
st.u64 [%r48],%r56;
.loc 1 287 15
st.u8 [%r27+-4],%r47;
.loc 1 288 14
ld.u32 %r58,[%r48+8];
add.u32 %r57,%r58,4;
st.u32 [%r48+8],%r57;
.loc 1 289 14
bra $L1;
$L5:
.loc 1 282 38
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r48;
call (%value_in),__submore,(%out_arg1,%out_arg2);
ld.param.u32 %r61,[%value_in];
}
.loc 1 282 35
setp.ne.u32 %r62,%r61,0;
@ ! %r62 bra $L7;
bra $L1;
$L4:
.loc 1 298 14
ld.u64 %r34,[%r48+24];
.loc 1 298 34
ld.u64 %r44,[%r48];
.loc 1 298 6
setp.eq.u64 %r63,%r34,0;
@ %r63 bra $L8;
.loc 1 298 29
setp.ge.u64 %r64,%r34,%r44;
@ %r64 bra $L8;
.loc 1 299 7
ld.u32 %r65,[%r44+-4];
setp.ne.u32 %r66,%r47,%r65;
@ %r66 bra $L8;
.loc 1 301 14
add.u64 %r67,%r44,-4;
st.u64 [%r48],%r67;
.loc 1 302 14
add.u32 %r68,%r45,4;
st.u32 [%r48+8],%r68;
.loc 1 303 14
bra $L1;
$L8:
.loc 1 311 11
st.u32 [%r48+112],%r45;
.loc 1 312 11
st.u64 [%r48+104],%r44;
.loc 1 313 19
add.u64 %r69,%r48,116;
.loc 1 313 17
st.u64 [%r48+88],%r69;
.loc 1 314 17
mov.u32 %r70,3;
st.u32 [%r48+96],%r70;
.loc 1 315 12
add.u64 %r71,%r48,115;
.loc 1 315 10
st.u64 [%r48],%r71;
.loc 1 316 23
st.u32 [%r48+115],%r47;
.loc 1 317 10
mov.u32 %r72,2;
st.u32 [%r48+8],%r72;
$L1:
.loc 1 319 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ssvfiwscanf_r
.visible .func (.param .u32 %value_out) __ssvfiwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r26;
.reg .u32 %r28;
.reg .u32 %r35;
.reg .u32 %r47;
.reg .u64 %r49;
.reg .u64 %r52;
.reg .u32 %r68;
.reg .u32 %r71;
.reg .u32 %r74;
.reg .u32 %r86;
.reg .u64 %r95;
.reg .u32 %r103;
.reg .u64 %r104;
.reg .u64 %r105;
.reg .u64 %r108;
.reg .u32 %r109;
.reg .u32 %r110;
.reg .u32 %r111;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u64 %r117;
.reg .u64 %r120;
.reg .u64 %r122;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .u32 %r128;
.reg .u32 %r134;
.reg .u64 %r142;
.reg .u64 %r146;
.reg .u64 %r148;
.reg .u64 %r150;
.reg .u64 %r153;
.reg .u32 %r154;
.reg .u32 %r163;
.reg .u64 %r168;
.reg .u32 %r171;
.reg .u64 %r173;
.reg .u32 %r174;
.reg .u64 %r181;
.reg .u32 %r182;
.reg .u32 %r188;
.reg .u64 %r190;
.reg .u32 %r191;
.reg .u32 %r197;
.reg .u64 %r199;
.reg .u32 %r200;
.reg .u32 %r206;
.reg .u64 %r208;
.reg .u32 %r209;
.reg .u32 %r215;
.reg .u64 %r217;
.reg .u32 %r218;
.reg .u32 %r224;
.reg .u64 %r226;
.reg .u32 %r227;
.reg .u32 %r233;
.reg .u64 %r235;
.reg .u32 %r236;
.reg .u32 %r242;
.reg .u32 %r243;
.reg .u64 %r245;
.reg .u32 %r246;
.reg .u32 %r252;
.reg .u64 %r254;
.reg .u32 %r255;
.reg .u64 %r261;
.reg .u32 %r262;
.reg .u64 %r264;
.reg .u32 %r265;
.reg .u64 %r272;
.reg .u32 %r273;
.reg .u32 %r277;
.reg .u32 %r279;
.reg .u64 %r286;
.reg .u64 %r287;
.reg .u32 %r288;
.reg .u64 %r290;
.reg .u64 %r291;
.reg .u32 %r292;
.reg .u64 %r294;
.reg .u64 %r295;
.reg .u64 %r298;
.reg .u64 %r299;
.reg .u32 %r300;
.reg .u64 %r302;
.reg .u64 %r303;
.reg .u64 %r305;
.reg .u64 %r306;
.reg .u64 %r307;
.reg .u64 %r308;
.reg .u64 %r309;
.reg .u64 %r310;
.reg .u64 %r311;
.reg .u64 %r312;
.reg .u32 %r314;
.reg .u32 %r315;
.reg .u32 %r316;
.reg .u64 %r317;
.reg .u64 %r318;
.reg .u64 %r319;
.reg .u64 %r320;
.reg .u16 %r321;
.reg .u16 %r322;
.reg .pred %r323;
.reg .u16 %r324;
.reg .u32 %r326;
.reg .u32 %r327;
.reg .pred %r328;
.reg .pred %r329;
.reg .u32 %r331;
.reg .pred %r332;
.reg .pred %r333;
.reg .u32 %r336;
.reg .pred %r337;
.reg .u64 %r338;
.reg .u32 %r339;
.reg .pred %r341;
.reg .u32 %r343;
.reg .pred %r344;
.reg .pred %r345;
.reg .pred %r346;
.reg .pred %r347;
.reg .pred %r348;
.reg .pred %r349;
.reg .pred %r350;
.reg .pred %r351;
.reg .pred %r352;
.reg .u32 %r353;
.reg .pred %r354;
.reg .pred %r355;
.reg .pred %r356;
.reg .pred %r357;
.reg .pred %r358;
.reg .pred %r359;
.reg .pred %r360;
.reg .pred %r361;
.reg .pred %r362;
.reg .pred %r363;
.reg .pred %r364;
.reg .pred %r365;
.reg .pred %r366;
.reg .pred %r367;
.reg .pred %r368;
.reg .pred %r369;
.reg .pred %r370;
.reg .u32 %r373;
.reg .pred %r374;
.reg .u64 %r375;
.reg .u32 %r376;
.reg .pred %r378;
.reg .pred %r379;
.reg .u32 %r384;
.reg .u32 %r385;
.reg .u32 %r387;
.reg .u32 %r388;
.reg .u16 %r389;
.reg .u16 %r390;
.reg .u16 %r391;
.reg .u32 %r392;
.reg .u16 %r393;
.reg .pred %r394;
.reg .u32 %r395;
.reg .pred %r396;
.reg .pred %r397;
.reg .u32 %r398;
.reg .pred %r399;
.reg .u32 %r400;
.reg .pred %r401;
.reg .u64 %r403;
.reg .u64 %r404;
.reg .u64 %r405;
.reg .u64 %r406;
.reg .pred %r407;
.reg .pred %r408;
.reg .u32 %r410;
.reg .u32 %r411;
.reg .u32 %r413;
.reg .u32 %r414;
.reg .u16 %r415;
.reg .u16 %r416;
.reg .u16 %r417;
.reg .u32 %r418;
.reg .u16 %r419;
.reg .pred %r420;
.reg .u32 %r422;
.reg .u32 %r423;
.reg .u32 %r425;
.reg .u32 %r426;
.reg .u16 %r427;
.reg .u16 %r428;
.reg .u16 %r429;
.reg .u32 %r430;
.reg .u16 %r431;
.reg .pred %r432;
.reg .pred %r433;
.reg .pred %r434;
.reg .u32 %r435;
.reg .pred %r436;
.reg .u64 %r437;
.reg .u32 %r438;
.reg .pred %r439;
.reg .u32 %r440;
.reg .pred %r441;
.reg .u64 %r442;
.reg .u32 %r443;
.reg .pred %r444;
.reg .u64 %r445;
.reg .pred %r446;
.reg .u32 %r449;
.reg .pred %r450;
.reg .u64 %r451;
.reg .u32 %r452;
.reg .pred %r454;
.reg .u32 %r456;
.reg .pred %r457;
.reg .pred %r460;
.reg .pred %r461;
.reg .u32 %r464;
.reg .pred %r465;
.reg .pred %r466;
.reg .u64 %r467;
.reg .u32 %r468;
.reg .pred %r471;
.reg .u32 %r475;
.reg .u64 %r476;
.reg .u64 %r478;
.reg .u64 %r484;
.reg .pred %r485;
.reg .pred %r486;
.reg .u32 %r487;
.reg .pred %r488;
.reg .pred %r490;
.reg .pred %r491;
.reg .u32 %r494;
.reg .pred %r495;
.reg .pred %r496;
.reg .u64 %r497;
.reg .u32 %r498;
.reg .pred %r501;
.reg .u64 %r503;
.reg .u32 %r505;
.reg .pred %r506;
.reg .pred %r507;
.reg .u32 %r510;
.reg .pred %r511;
.reg .u64 %r512;
.reg .u32 %r513;
.reg .pred %r515;
.reg .pred %r516;
.reg .u64 %r521;
.reg .pred %r522;
.reg .u64 %r526;
.reg .pred %r527;
.reg .pred %r528;
.reg .pred %r529;
.reg .pred %r530;
.reg .u32 %r533;
.reg .pred %r534;
.reg .u64 %r535;
.reg .u32 %r536;
.reg .pred %r538;
.reg .pred %r539;
.reg .u64 %r544;
.reg .pred %r545;
.reg .u64 %r549;
.reg .pred %r550;
.reg .u64 %r551;
.reg .u64 %r553;
.reg .pred %r554;
.reg .u32 %r555;
.reg .u32 %r558;
.reg .u64 %r559;
.reg .u64 %r561;
.reg .u64 %r567;
.reg .pred %r568;
.reg .pred %r569;
.reg .u32 %r570;
.reg .pred %r571;
.reg .pred %r573;
.reg .u32 %r576;
.reg .pred %r577;
.reg .u64 %r578;
.reg .u32 %r579;
.reg .pred %r581;
.reg .pred %r582;
.reg .u64 %r587;
.reg .pred %r588;
.reg .u64 %r592;
.reg .pred %r593;
.reg .u32 %r595;
.reg .pred %r596;
.reg .u32 %r597;
.reg .pred %r598;
.reg .u32 %r599;
.reg .u32 %r600;
.reg .u32 %r601;
.reg .pred %r602;
.reg .u32 %r605;
.reg .pred %r606;
.reg .u64 %r607;
.reg .u32 %r608;
.reg .pred %r610;
.reg .pred %r611;
.reg .u32 %r613;
.reg .pred %r614;
.reg .u32 %r615;
.reg .pred %r616;
.reg .u32 %r617;
.reg .u32 %r618;
.reg .u32 %r619;
.reg .pred %r620;
.reg .u32 %r623;
.reg .pred %r624;
.reg .u64 %r625;
.reg .u32 %r626;
.reg .pred %r628;
.reg .pred %r629;
.reg .u32 %r631;
.reg .pred %r632;
.reg .u32 %r633;
.reg .u32 %r636;
.reg .u64 %r637;
.reg .u64 %r639;
.reg .u64 %r644;
.reg .pred %r645;
.reg .pred %r646;
.reg .u32 %r647;
.reg .pred %r648;
.reg .pred %r650;
.reg .u32 %r653;
.reg .pred %r654;
.reg .u64 %r655;
.reg .u32 %r656;
.reg .pred %r658;
.reg .pred %r659;
.reg .u32 %r661;
.reg .pred %r662;
.reg .u32 %r664;
.reg .u64 %r665;
.reg .pred %r666;
.reg .u64 %r667;
.reg .pred %r668;
.reg .u32 %r671;
.reg .pred %r672;
.reg .u64 %r673;
.reg .pred %r675;
.reg .pred %r676;
.reg .pred %r677;
.reg .pred %r678;
.reg .u32 %r679;
.reg .u32 %r680;
.reg .pred %r681;
.reg .u64 %r682;
.reg .u64 %r683;
.reg .u64 %r684;
.reg .u64 %r685;
.reg .pred %r686;
.reg .pred %r687;
.reg .pred %r688;
.reg .pred %r689;
.reg .pred %r690;
.reg .pred %r691;
.reg .pred %r692;
.reg .u32 %r693;
.reg .pred %r694;
.reg .u64 %r695;
.reg .u64 %r696;
.reg .u64 %r697;
.reg .u64 %r698;
.reg .pred %r699;
.reg .pred %r700;
.reg .u32 %r701;
.reg .pred %r702;
.reg .u32 %r703;
.reg .pred %r704;
.reg .u32 %r705;
.reg .pred %r706;
.reg .u64 %r707;
.reg .pred %r708;
.reg .pred %r709;
.reg .pred %r713;
.reg .u32 %r714;
.reg .pred %r715;
.reg .pred %r716;
.reg .u32 %r720;
.reg .u32 %r721;
.reg .pred %r722;
.reg .u32 %r726;
.reg .pred %r727;
.reg .u64 %r731;
.reg .u64 %r733;
.reg .u64 %r734;
.reg .u32 %r735;
.reg .pred %r736;
.reg .u32 %r737;
.reg .pred %r738;
.reg .u64 %r739;
.reg .u32 %r740;
.reg .pred %r741;
.reg .u64 %r742;
.reg .u32 %r743;
.reg .pred %r744;
.reg .u64 %r745;
.reg .pred %r746;
.reg .u64 %r751;
.reg .u64 %r756;
.reg .u64 %r757;
.reg .u64 %r758;
.reg .u64 %r759;
.reg .u64 %r761;
.reg .u32 %r762;
.reg .pred %r763;
.reg .u16 %r764;
.reg .u16 %r765;
.reg .pred %r766;
.reg .pred %r792;
.reg .pred %r793;
.reg .pred %r794;
.reg .pred %r796;
.reg .pred %r797;
.reg .pred %r798;
.reg .pred %r799;
.reg .u64 %r800;
mov.u64 %r317,%ar0;
mov.u64 %r318,%ar1;
mov.u64 %r319,%ar2;
mov.u64 %r320,%ar3;
.loc 1 553 3
ld.u16 %r322,[%r318+16];
and.b16 %r321,%r322,8192;
setp.ne.u16 %r323,%r321,0;
@ %r323 bra $L13;
or.b16 %r324,%r322,8192;
st.u16 [%r318+16],%r324;
ld.u32 %r327,[%r318+172];
or.b32 %r326,%r327,8192;
st.u32 [%r318+172],%r326;
$L13:
.loc 1 560 15
add.u64 %r122,%r319,4;
.loc 1 560 9
ld.u32 %r103,[%r319];
.loc 1 561 10
setp.eq.u32 %r328,%r103,0;
@ %r328 bra $L163;
mov.u64 %r49,0;
cvt.u32.u64 %r314,%r49;
cvt.u32.u64 %r47,%r49;
cvt.u32.u64 %r316,%r49;
mov.u64 %r108,%r49;
.loc 1 1115 8
add.u64 %r800,%frame,160;
bra $L15;
$L164:
mov.u64 %r52,%r122;
bra $L18;
$L165:
mov.u64 %r52,%r122;
bra $L18;
$L172:
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L173:
mov.u64 %r52,%r122;
bra $L18;
$L175:
mov.u64 %r52,%r122;
bra $L18;
$L178:
mov.u32 %r47,%r279;
mov.u64 %r52,%r122;
bra $L18;
$L179:
mov.u32 %r47,%r279;
mov.u64 %r52,%r122;
bra $L18;
$L181:
mov.u64 %r52,%r122;
$L18:
.loc 1 560 15
add.u64 %r122,%r52,4;
.loc 1 560 9
ld.u32 %r103,[%r52];
.loc 1 561 10
setp.eq.u32 %r329,%r103,0;
@ %r329 bra $L12;
$L15:
.loc 1 563 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r103;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r331,[%value_in];
}
mov.u32 %r28,%r331;
.loc 1 563 10
setp.eq.u32 %r332,%r28,0;
@ %r332 bra $L16;
$L19:
.loc 1 329 9
ld.u32 %r171,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r333,%r171,0;
@ %r333 bra $L17;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r336,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r337,%r336,0;
@ %r337 bra $L164;
.loc 1 333 10
ld.u32 %r171,[%r318+8];
$L17:
.loc 1 331 23
ld.u64 %r173,[%r318];
.loc 1 331 6
ld.u32 %r174,[%r173];
.loc 1 332 10
add.u64 %r338,%r173,4;
st.u64 [%r318],%r338;
.loc 1 333 10
add.u32 %r339,%r171,-4;
st.u32 [%r318+8],%r339;
.loc 1 565 10
setp.eq.u32 %r341,%r174,-1;
@ %r341 bra $L165;
.loc 1 565 49
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r174;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r343,[%value_in];
}
.loc 1 565 46
setp.ne.u32 %r344,%r343,0;
@ %r344 bra $L19;
bra $L298;
$L16:
.loc 1 571 10
setp.ne.u32 %r345,%r103,37;
@ %r345 bra $L21;
.loc 1 586 11
ld.u32 %r300,[%r122];
.loc 1 574 13
mov.u32 %r110,%r28;
.loc 1 586 11
mov.u64 %r26,%r122;
.loc 1 573 13
mov.u64 %r104,0;
bra $L22;
$L300:
.loc 1 586 11
ld.u32 %r300,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r122;
.loc 1 606 10
mov.u32 %r110,16;
.loc 1 586 11
mov.u64 %r104,0;
$L22:
.loc 1 586 15
add.u64 %r122,%r26,4;
.loc 1 588 7
setp.eq.u32 %r346,%r300,104;
@ %r346 bra $L23;
setp.gt.s32 %r347,%r300,104;
@ %r347 bra $L24;
setp.eq.u32 %r348,%r300,76;
@ %r348 bra $L25;
setp.gt.s32 %r349,%r300,76;
@ %r349 bra $L26;
setp.eq.u32 %r350,%r300,42;
@ %r350 bra $L27;
setp.gt.s32 %r351,%r300,42;
@ %r351 bra $L28;
setp.eq.u32 %r352,%r300,37;
@ %r352 bra $L21;
bra $L12;
$L28:
add.u32 %r353,%r300,-48;
setp.gt.u32 %r354,%r353,9;
@ ! %r354 bra $L299;
bra $L12;
$L26:
setp.eq.u32 %r355,%r300,99;
@ %r355 bra $L30;
setp.gt.s32 %r356,%r300,99;
@ %r356 bra $L31;
setp.eq.u32 %r357,%r300,88;
@ %r357 bra $L32;
setp.eq.u32 %r358,%r300,91;
@ %r358 bra $L33;
bra $L12;
$L31:
setp.eq.u32 %r359,%r300,100;
@ %r359 bra $L166;
bra $L12;
$L24:
setp.eq.u32 %r360,%r300,111;
@ %r360 bra $L167;
setp.gt.s32 %r361,%r300,111;
@ %r361 bra $L36;
setp.eq.u32 %r362,%r300,108;
@ %r362 bra $L37;
setp.eq.u32 %r363,%r300,110;
@ %r363 bra $L38;
setp.eq.u32 %r364,%r300,105;
@ %r364 bra $L168;
bra $L12;
$L36:
setp.eq.u32 %r365,%r300,115;
@ %r365 bra $L169;
setp.gt.s32 %r366,%r300,115;
@ %r366 bra $L39;
setp.eq.u32 %r367,%r300,112;
@ %r367 bra $L40;
bra $L12;
$L39:
setp.eq.u32 %r368,%r300,117;
@ %r368 bra $L170;
setp.eq.u32 %r369,%r300,120;
@ %r369 bra $L32;
bra $L12;
$L21:
.loc 1 329 9
ld.u32 %r68,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r370,%r68,0;
@ %r370 bra $L41;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r373,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r374,%r373,0;
@ %r374 bra $L44;
.loc 1 333 10
ld.u32 %r68,[%r318+8];
$L41:
.loc 1 331 23
ld.u64 %r181,[%r318];
.loc 1 331 6
ld.u32 %r182,[%r181];
.loc 1 332 10
add.u64 %r375,%r181,4;
st.u64 [%r318],%r375;
.loc 1 333 10
add.u32 %r376,%r68,-4;
st.u32 [%r318+8],%r376;
.loc 1 592 7
setp.eq.u32 %r378,%r182,-1;
@ %r378 bra $L44;
.loc 1 594 7
setp.eq.u32 %r379,%r103,%r182;
@ %r379 bra $L43;
.loc 1 596 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r182;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 597 8
bra $L44;
$L43:
.loc 1 599 9
add.u32 %r47,%r47,1;
.loc 1 600 4
mov.u64 %r52,%r122;
bra $L18;
$L27:
.loc 1 604 8
set.u32.ne.u64 %r384,%r104,0;
neg.s32 %r385,%r384;
.loc 1 603 7
set.u32.ne.u32 %r387,%r110,0;
neg.s32 %r388,%r387;
.loc 1 604 8
cvt.u16.u32 %r390,%r385;
cvt.u16.u32 %r391,%r388;
or.b16 %r389,%r390,%r391;
cvt.u32.u16 %r392,%r389;
cvt.u16.u8 %r393,%r392;
setp.ne.u16 %r394,%r393,0;
@ ! %r394 bra $L300;
bra $L12;
$L37:
.loc 1 609 14
and.b32 %r395,%r110,15;
.loc 1 609 7
setp.ne.u32 %r396,%r395,0;
@ %r396 bra $L12;
.loc 1 612 8
ld.u32 %r300,[%r26+4];
.loc 1 612 7
setp.ne.u32 %r397,%r300,108;
@ %r397 bra $L46;
.loc 1 615 14
or.b32 %r110,%r110,2;
.loc 1 586 11
ld.u32 %r300,[%r26+8];
.loc 1 614 8
add.u64 %r26,%r26,8;
bra $L22;
$L46:
.loc 1 619 12
or.b32 %r110,%r110,1;
.loc 1 586 15
mov.u64 %r26,%r122;
bra $L22;
$L25:
.loc 1 622 14
and.b32 %r398,%r110,15;
.loc 1 622 7
setp.ne.u32 %r399,%r398,0;
@ %r399 bra $L12;
.loc 1 624 10
or.b32 %r110,%r110,2;
.loc 1 586 11
ld.u32 %r300,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r122;
.loc 1 625 4
bra $L22;
$L23:
.loc 1 637 12
or.b32 %r110,%r110,4;
.loc 1 586 11
ld.u32 %r300,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r122;
.loc 1 638 4
bra $L22;
$L299:
.loc 1 703 14
and.b32 %r400,%r110,143;
.loc 1 703 7
setp.ne.u32 %r401,%r400,0;
@ %r401 bra $L12;
.loc 1 705 18
shl.b64 %r403,%r104,2;
add.u64 %r404,%r403,%r104;
add.u64 %r405,%r404,%r404;
add.u64 %r117,%r405,-48;
.loc 1 705 23
cvt.u64.u32 %r406,%r300;
.loc 1 705 10
add.u64 %r104,%r406,%r117;
.loc 1 586 11
ld.u32 %r300,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r122;
.loc 1 706 4
bra $L22;
$L32:
.loc 1 749 10
or.b32 %r110,%r110,512;
.loc 1 751 9
mov.u64 %r49,_wcstoul_r;
.loc 1 752 9
mov.u32 %r28,16;
.loc 1 753 4
bra $L35;
$L33:
.loc 1 781 8
ld.u32 %r35,[%r26+4];
.loc 1 781 7
setp.ne.u32 %r407,%r35,94;
@ %r407 bra $L48;
.loc 1 784 8
add.u64 %r122,%r26,8;
.loc 1 789 8
ld.u32 %r35,[%r26+8];
.loc 1 783 17
mov.u32 %r28,1;
$L48:
.loc 1 790 9
add.u64 %r52,%r122,4;
.loc 1 789 7
setp.ne.u32 %r408,%r35,93;
@ %r408 bra $L171;
.loc 1 791 11
ld.u32 %r35,[%r122+4];
.loc 1 790 9
mov.u64 %r126,%r52;
.loc 1 792 9
add.u64 %r52,%r122,8;
bra $L49;
$L171:
mov.u64 %r126,%r122;
$L49:
.loc 1 791 24
set.u32.ne.u32 %r410,%r35,93;
neg.s32 %r411,%r410;
set.u32.ne.u32 %r413,%r35,0;
neg.s32 %r414,%r413;
cvt.u16.u32 %r416,%r411;
cvt.u16.u32 %r417,%r414;
and.b16 %r415,%r416,%r417;
.loc 1 791 10
cvt.u32.u16 %r418,%r415;
cvt.u16.u8 %r419,%r418;
setp.eq.u16 %r420,%r419,0;
@ %r420 bra $L50;
$L51:
mov.u64 %r127,%r126;
.loc 1 792 9
add.u64 %r126,%r126,4;
.loc 1 791 11
ld.u32 %r128,[%r126];
.loc 1 791 24
set.u32.ne.u32 %r422,%r128,0;
neg.s32 %r423,%r422;
set.u32.ne.u32 %r425,%r128,93;
neg.s32 %r426,%r425;
cvt.u16.u32 %r428,%r423;
cvt.u16.u32 %r429,%r426;
and.b16 %r427,%r428,%r429;
.loc 1 791 10
cvt.u32.u16 %r430,%r427;
cvt.u16.u8 %r431,%r430;
setp.ne.u16 %r432,%r431,0;
@ %r432 bra $L51;
.loc 1 794 7
add.u64 %r52,%r127,8;
$L50:
.loc 1 965 7
setp.eq.u64 %r433,%r104,0;
.loc 1 966 12
selp.u64 %r104,-1,%r104,%r433;
.loc 1 991 27
sub.u64 %r503,%r126,%r122;
shr.s64 %r299,%r503,2;
.loc 1 968 27
and.b32 %r505,%r110,17;
.loc 1 968 7
setp.eq.u32 %r506,%r505,17;
@ ! %r506 bra $L301;
bra $L176;
$L30:
max.u64 %r105,%r104,1;
and.b32 %r163,%r110,1;
and.b32 %r315,%r110,16;
.loc 1 879 14
setp.ne.u32 %r434,%r163,0;
@ %r434 bra $L54;
bra $L302;
$L40:
.loc 1 811 10
or.b32 %r110,%r110,544;
.loc 1 813 9
mov.u64 %r49,_wcstoul_r;
.loc 1 814 9
mov.u32 %r28,16;
.loc 1 815 4
bra $L35;
$L38:
.loc 1 818 14
and.b32 %r435,%r110,16;
.loc 1 818 7
setp.ne.u32 %r436,%r435,0;
@ %r436 bra $L172;
.loc 1 830 11
add.u64 %r437,%r320,7;
and.b64 %r148,%r437,-8;
ld.u64 %r146,[%r148];
add.u64 %r320,%r148,8;
.loc 1 828 14
and.b32 %r438,%r110,4;
.loc 1 828 7
setp.eq.u32 %r439,%r438,0;
@ %r439 bra $L56;
.loc 1 831 12
st.u16 [%r146],%r47;
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L56:
.loc 1 833 19
and.b32 %r440,%r110,1;
.loc 1 833 12
setp.eq.u32 %r441,%r440,0;
@ %r441 bra $L57;
.loc 1 836 12
cvt.s64.s32 %r442,%r47;
st.u64 [%r146],%r442;
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L57:
.loc 1 839 19
and.b32 %r443,%r110,2;
.loc 1 839 12
setp.eq.u32 %r444,%r443,0;
@ %r444 bra $L58;
.loc 1 842 13
cvt.s64.s32 %r445,%r47;
st.u64 [%r146],%r445;
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L58:
.loc 1 848 12
st.u32 [%r146],%r47;
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L166:
.loc 1 725 9
mov.u64 %r49,_wcstol_r;
.loc 1 726 9
mov.u32 %r314,10;
.loc 1 724 6
mov.u32 %r242,3;
bra $L59;
$L169:
.loc 1 588 7
mov.u32 %r242,2;
bra $L59;
$L61:
.loc 1 863 11
add.u32 %r47,%r47,1;
$L59:
.loc 1 329 9
ld.u32 %r188,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r446,%r188,0;
@ %r446 bra $L60;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r449,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r450,%r449,0;
@ %r450 bra $L44;
.loc 1 333 10
ld.u32 %r188,[%r318+8];
$L60:
.loc 1 331 23
ld.u64 %r190,[%r318];
.loc 1 331 6
ld.u32 %r191,[%r190];
.loc 1 332 10
add.u64 %r451,%r190,4;
st.u64 [%r318],%r451;
.loc 1 333 10
add.u32 %r452,%r188,-4;
st.u32 [%r318+8],%r452;
.loc 1 862 10
setp.eq.u32 %r454,%r191,-1;
@ %r454 bra $L44;
.loc 1 862 50
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r191;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r456,[%value_in];
}
.loc 1 862 47
setp.ne.u32 %r457,%r456,0;
@ %r457 bra $L61;
bra $L303;
$L54:
.loc 1 887 11
setp.ne.u32 %r796,%r315,0;
@ %r796 bra $L63;
.loc 1 894 5
add.u64 %r306,%r320,7;
and.b64 %r305,%r306,-8;
add.u64 %r320,%r305,8;
ld.u64 %r108,[%r305];
$L63:
.loc 1 904 11
mov.u64 %r294,0;
bra $L64;
$L69:
.loc 1 898 8
@ %r796 bra $L65;
.loc 1 904 14
st.u32 [%r108],%r200;
.loc 1 904 11
add.u64 %r108,%r108,4;
$L65:
add.u32 %r288,%r292,1;
.loc 1 896 14
add.u64 %r294,%r294,1;
setp.eq.u64 %r460,%r105,%r294;
@ %r460 bra $L66;
$L64:
cvt.u32.u64 %r292,%r294;
cvt.u32.u64 %r288,%r294;
.loc 1 329 9
ld.u32 %r197,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r461,%r197,0;
@ %r461 bra $L67;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r464,[%value_in];
}
.loc 1 329 19
setp.eq.u32 %r465,%r464,0;
@ %r465 bra $L68;
$L70:
.loc 1 908 11
setp.eq.u32 %r466,%r288,0;
@ ! %r466 bra $L66;
bra $L44;
$L68:
.loc 1 333 10
ld.u32 %r197,[%r318+8];
$L67:
.loc 1 331 23
ld.u64 %r199,[%r318];
.loc 1 331 6
ld.u32 %r200,[%r199];
.loc 1 332 10
add.u64 %r467,%r199,4;
st.u64 [%r318],%r467;
.loc 1 333 10
add.u32 %r468,%r197,-4;
st.u32 [%r318+8],%r468;
.loc 1 896 28
setp.ne.u32 %r471,%r200,-1;
@ %r471 bra $L69;
bra $L70;
$L66:
.loc 1 910 14
add.u32 %r47,%r47,%r288;
.loc 1 914 11
@ %r796 bra $L173;
.loc 1 915 12
add.u32 %r316,%r316,1;
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L302:
.loc 1 925 11
setp.ne.u32 %r796,%r315,0;
@ %r796 bra $L174;
.loc 1 932 7
add.u64 %r310,%r320,7;
and.b64 %r309,%r310,-8;
add.u64 %r320,%r309,8;
ld.u64 %r112,[%r309];
bra $L71;
$L174:
.loc 1 926 7
add.u64 %r112,%frame,168;
$L71:
.loc 1 934 8
mov.u64 %r476,8;
mov.u32 %r475,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r800;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r475;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r476;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r478,[%value_in];
}
bra $L72;
$L79:
.loc 1 937 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r112;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r209;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r800;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r484,[%value_in];
}
.loc 1 938 8
setp.eq.u64 %r485,%r484,-1;
@ %r485 bra $L44;
.loc 1 941 8
setp.ne.u64 %r486,%r484,0;
@ %r486 bra $L73;
.loc 1 941 20
ld.u32 %r487,[%frame+160];
setp.eq.u32 %r488,%r487,-4;
@ %r488 bra $L74;
$L73:
.loc 1 942 12
add.u64 %r105,%r105,-1;
$L74:
.loc 1 943 8
@ %r796 bra $L75;
.loc 1 948 13
add.u64 %r112,%r112,%r484;
$L75:
.loc 1 950 6
add.u32 %r163,%r163,1;
.loc 1 935 14
setp.eq.u64 %r490,%r105,0;
@ %r490 bra $L76;
$L72:
.loc 1 329 9
ld.u32 %r206,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r491,%r206,0;
@ %r491 bra $L77;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r494,[%value_in];
}
.loc 1 329 19
setp.eq.u32 %r495,%r494,0;
@ %r495 bra $L78;
$L80:
.loc 1 952 11
setp.eq.u32 %r496,%r163,0;
@ ! %r496 bra $L76;
bra $L44;
$L78:
.loc 1 333 10
ld.u32 %r206,[%r318+8];
$L77:
.loc 1 331 23
ld.u64 %r208,[%r318];
.loc 1 331 6
ld.u32 %r209,[%r208];
.loc 1 332 10
add.u64 %r497,%r208,4;
st.u64 [%r318],%r497;
.loc 1 333 10
add.u32 %r498,%r206,-4;
st.u32 [%r318+8],%r498;
.loc 1 935 26
setp.ne.u32 %r501,%r209,-1;
@ %r501 bra $L79;
bra $L80;
$L76:
.loc 1 954 14
add.u32 %r47,%r47,%r163;
.loc 1 958 11
@ %r796 bra $L175;
.loc 1 959 12
add.u32 %r316,%r316,1;
.loc 1 586 15
mov.u64 %r52,%r122;
bra $L18;
$L87:
add.u64 %r291,%r291,1;
bra $L81;
$L176:
mov.u64 %r291,0;
.loc 1 971 14
setp.eq.u32 %r797,%r28,0;
$L81:
cvt.u32.u64 %r109,%r291;
.loc 1 329 9
ld.u32 %r215,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r507,%r215,0;
@ %r507 bra $L83;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r510,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r511,%r510,0;
@ %r511 bra $L156;
.loc 1 333 10
ld.u32 %r215,[%r318+8];
$L83:
.loc 1 331 23
ld.u64 %r217,[%r318];
.loc 1 331 6
ld.u32 %r218,[%r217];
.loc 1 332 10
add.u64 %r512,%r217,4;
st.u64 [%r318],%r512;
.loc 1 333 10
add.u32 %r513,%r215,-4;
st.u32 [%r318+8],%r513;
.loc 1 971 14
setp.eq.u32 %r515,%r218,-1;
@ %r515 bra $L156;
.loc 1 972 8
setp.eq.u64 %r516,%r104,%r291;
@ %r516 bra $L85;
.loc 1 971 14
@ %r797 bra $L86;
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r122;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r218;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r299;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r521,[%value_in];
}
.loc 1 972 24
setp.eq.u64 %r522,%r521,0;
@ %r522 bra $L87;
bra $L85;
$L86:
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r122;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r218;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r299;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r526,[%value_in];
}
.loc 1 972 24
setp.ne.u64 %r527,%r526,0;
@ %r527 bra $L87;
bra $L85;
$L156:
.loc 1 976 11
setp.eq.u32 %r528,%r109,0;
@ ! %r528 bra $L88;
bra $L12;
$L301:
and.b32 %r109,%r110,1;
.loc 1 979 12
setp.eq.u32 %r529,%r109,0;
@ %r529 bra $L89;
.loc 1 989 10
add.u64 %r150,%r320,7;
and.b64 %r120,%r150,-8;
add.u64 %r320,%r120,8;
ld.u64 %r153,[%r120];
mov.u64 %r290,%r153;
.loc 1 990 14
setp.eq.u32 %r798,%r28,0;
bra $L90;
$L95:
.loc 1 993 10
st.u32 [%r290],%r227;
add.u64 %r104,%r104,-1;
add.u64 %r290,%r290,4;
$L90:
mov.u64 %r108,%r290;
.loc 1 329 9
ld.u32 %r224,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r530,%r224,0;
@ %r530 bra $L91;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r533,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r534,%r533,0;
@ %r534 bra $L157;
.loc 1 333 10
ld.u32 %r224,[%r318+8];
$L91:
.loc 1 331 23
ld.u64 %r226,[%r318];
.loc 1 331 6
ld.u32 %r227,[%r226];
.loc 1 332 10
add.u64 %r535,%r226,4;
st.u64 [%r318],%r535;
.loc 1 333 10
add.u32 %r536,%r224,-4;
st.u32 [%r318+8],%r536;
.loc 1 990 14
setp.eq.u32 %r538,%r227,-1;
@ %r538 bra $L157;
.loc 1 991 8
setp.eq.u64 %r539,%r104,0;
@ %r539 bra $L93;
.loc 1 990 14
@ %r798 bra $L94;
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r122;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r227;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r299;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r544,[%value_in];
}
.loc 1 991 24
setp.eq.u64 %r545,%r544,0;
@ %r545 bra $L95;
bra $L93;
$L94:
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r122;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r227;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r299;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r549,[%value_in];
}
.loc 1 991 24
setp.ne.u64 %r550,%r549,0;
@ %r550 bra $L95;
bra $L93;
$L157:
.loc 1 1000 14
sub.u64 %r551,%r290,%r153;
shr.s64 %r553,%r551,2;
.loc 1 1000 10
cvt.u32.u64 %r109,%r553;
.loc 1 1001 11
setp.eq.u32 %r554,%r109,0;
@ %r554 bra $L12;
.loc 1 1003 11
mov.u32 %r555,0;
st.u32 [%r290],%r555;
.loc 1 1007 17
add.u32 %r316,%r316,1;
bra $L88;
$L89:
and.b32 %r74,%r110,16;
.loc 1 1017 11
setp.ne.u32 %r794,%r74,0;
@ %r794 bra $L177;
.loc 1 1024 7
add.u64 %r311,%r320,7;
and.b64 %r312,%r311,-8;
add.u64 %r320,%r312,8;
ld.u64 %r113,[%r312];
bra $L96;
$L177:
.loc 1 1018 7
add.u64 %r113,%frame,168;
$L96:
.loc 1 1026 8
mov.u64 %r559,8;
mov.u32 %r558,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r800;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r558;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r559;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r561,[%value_in];
}
.loc 1 1027 14
setp.eq.u32 %r799,%r28,0;
bra $L97;
$L105:
.loc 1 1030 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r113;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r236;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r800;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r567,[%value_in];
}
.loc 1 1031 8
setp.eq.u64 %r568,%r567,-1;
@ %r568 bra $L44;
.loc 1 1034 8
setp.ne.u64 %r569,%r567,0;
@ %r569 bra $L98;
.loc 1 1034 20
ld.u32 %r570,[%frame+160];
setp.eq.u32 %r571,%r570,-4;
@ %r571 bra $L99;
$L98:
.loc 1 1035 12
add.u64 %r104,%r104,-1;
$L99:
.loc 1 1036 8
@ %r794 bra $L100;
.loc 1 1038 13
add.u64 %r113,%r113,%r567;
$L100:
.loc 1 1043 6
add.u32 %r109,%r109,1;
$L97:
.loc 1 329 9
ld.u32 %r233,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r573,%r233,0;
@ %r573 bra $L101;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r576,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r577,%r576,0;
@ %r577 bra $L158;
.loc 1 333 10
ld.u32 %r233,[%r318+8];
$L101:
.loc 1 331 23
ld.u64 %r235,[%r318];
.loc 1 331 6
ld.u32 %r236,[%r235];
.loc 1 332 10
add.u64 %r578,%r235,4;
st.u64 [%r318],%r578;
.loc 1 333 10
add.u32 %r579,%r233,-4;
st.u32 [%r318+8],%r579;
.loc 1 1027 14
setp.eq.u32 %r581,%r236,-1;
@ %r581 bra $L158;
.loc 1 1028 8
setp.eq.u64 %r582,%r104,0;
@ %r582 bra $L103;
.loc 1 1027 14
@ %r799 bra $L104;
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r122;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r236;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r299;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r587,[%value_in];
}
.loc 1 1028 22
setp.eq.u64 %r588,%r587,0;
@ %r588 bra $L105;
bra $L103;
$L104:
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r122;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r236;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r299;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r592,[%value_in];
}
.loc 1 1028 22
setp.ne.u64 %r593,%r592,0;
@ %r593 bra $L105;
bra $L103;
$L158:
.loc 1 1047 11
@ %r794 bra $L88;
.loc 1 1049 10
mov.u32 %r595,0;
st.u8 [%r113],%r595;
.loc 1 1053 14
add.u32 %r316,%r316,1;
$L88:
.loc 1 1056 10
add.u32 %r47,%r47,%r109;
.loc 1 1057 4
bra $L18;
$L161:
.loc 1 1061 7
setp.ne.u64 %r596,%r104,0;
.loc 1 1062 19
selp.u64 %r104,%r104,-1,%r596;
.loc 1 1063 27
and.b32 %r597,%r110,17;
.loc 1 1063 7
setp.ne.u32 %r598,%r597,17;
@ %r598 bra $L107;
mov.u64 %r286,%r104;
cvt.u32.u64 %r600,%r286;
add.u32 %r599,%r47,%r600;
$L110:
cvt.u32.u64 %r601,%r286;
sub.u32 %r279,%r599,%r601;
.loc 1 329 9
ld.u32 %r243,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r602,%r243,0;
@ %r602 bra $L108;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r605,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r606,%r605,0;
@ %r606 bra $L178;
.loc 1 333 10
ld.u32 %r243,[%r318+8];
$L108:
.loc 1 331 23
ld.u64 %r245,[%r318];
.loc 1 331 6
ld.u32 %r246,[%r245];
.loc 1 332 10
add.u64 %r607,%r245,4;
st.u64 [%r318],%r607;
.loc 1 333 10
add.u32 %r608,%r243,-4;
st.u32 [%r318+8],%r608;
.loc 1 1065 14
setp.eq.u32 %r610,%r246,-1;
@ %r610 bra $L179;
.loc 1 1066 8
setp.eq.u64 %r611,%r286,0;
@ %r611 bra $L109;
.loc 1 1066 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r246;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r613,[%value_in];
}
.loc 1 1066 24
add.u64 %r286,%r286,-1;
setp.eq.u32 %r614,%r613,0;
@ %r614 bra $L110;
bra $L109;
$L107:
.loc 1 1071 19
and.b32 %r615,%r110,1;
.loc 1 1071 12
setp.eq.u32 %r616,%r615,0;
@ %r616 bra $L111;
.loc 1 1081 10
add.u64 %r303,%r320,7;
and.b64 %r302,%r303,-8;
add.u64 %r320,%r302,8;
ld.u64 %r168,[%r302];
.loc 1 1082 14
mov.u64 %r261,%r104;
cvt.u32.u64 %r618,%r261;
add.u32 %r617,%r47,%r618;
bra $L112;
$L116:
.loc 1 1085 10
st.u32 [%r168],%r255;
add.u64 %r168,%r168,4;
$L112:
cvt.u32.u64 %r619,%r261;
sub.u32 %r154,%r617,%r619;
mov.u64 %r108,%r168;
.loc 1 329 9
ld.u32 %r252,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r620,%r252,0;
@ %r620 bra $L113;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r623,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r624,%r623,0;
@ %r624 bra $L159;
.loc 1 333 10
ld.u32 %r252,[%r318+8];
$L113:
.loc 1 331 23
ld.u64 %r254,[%r318];
.loc 1 331 6
ld.u32 %r255,[%r254];
.loc 1 332 10
add.u64 %r625,%r254,4;
st.u64 [%r318],%r625;
.loc 1 333 10
add.u32 %r626,%r252,-4;
st.u32 [%r318+8],%r626;
.loc 1 1082 14
setp.eq.u32 %r628,%r255,-1;
@ %r628 bra $L159;
.loc 1 1083 8
setp.eq.u64 %r629,%r261,0;
@ %r629 bra $L115;
.loc 1 1083 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r255;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r631,[%value_in];
}
.loc 1 1083 24
add.u64 %r261,%r261,-1;
setp.eq.u32 %r632,%r631,0;
@ %r632 bra $L116;
bra $L115;
$L159:
.loc 1 1093 11
mov.u32 %r633,0;
st.u32 [%r168],%r633;
.loc 1 1097 17
add.u32 %r316,%r316,1;
mov.u32 %r47,%r154;
mov.u64 %r52,%r122;
bra $L18;
$L111:
.loc 1 1107 18
and.b32 %r71,%r110,16;
.loc 1 1107 11
setp.ne.u32 %r793,%r71,0;
@ %r793 bra $L180;
.loc 1 1114 7
add.u64 %r308,%r320,7;
and.b64 %r307,%r308,-8;
add.u64 %r320,%r307,8;
ld.u64 %r114,[%r307];
bra $L117;
$L180:
.loc 1 1108 7
add.u64 %r114,%frame,168;
$L117:
.loc 1 1115 8
mov.u64 %r637,8;
mov.u32 %r636,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r800;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r636;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r637;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r639,[%value_in];
}
.loc 1 1116 14
bra $L118;
$L125:
.loc 1 1119 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r114;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r265;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r800;
call (%value_in),wcrtomb,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r644,[%value_in];
}
.loc 1 1120 8
setp.eq.u64 %r645,%r644,-1;
@ %r645 bra $L44;
.loc 1 1123 8
setp.ne.u64 %r646,%r644,0;
@ %r646 bra $L119;
.loc 1 1123 20
ld.u32 %r647,[%frame+160];
setp.eq.u32 %r648,%r647,-4;
@ %r648 bra $L120;
$L119:
.loc 1 1124 12
add.u64 %r104,%r104,-1;
$L120:
.loc 1 1125 8
@ %r793 bra $L121;
.loc 1 1127 13
add.u64 %r114,%r114,%r644;
$L121:
.loc 1 1132 10
add.u32 %r47,%r47,1;
$L118:
.loc 1 329 9
ld.u32 %r262,[%r318+8];
.loc 1 329 6
setp.gt.s32 %r650,%r262,0;
@ %r650 bra $L122;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r653,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r654,%r653,0;
@ %r654 bra $L160;
.loc 1 333 10
ld.u32 %r262,[%r318+8];
$L122:
.loc 1 331 23
ld.u64 %r264,[%r318];
.loc 1 331 6
ld.u32 %r265,[%r264];
.loc 1 332 10
add.u64 %r655,%r264,4;
st.u64 [%r318],%r655;
.loc 1 333 10
add.u32 %r656,%r262,-4;
st.u32 [%r318+8],%r656;
.loc 1 1116 14
setp.eq.u32 %r658,%r265,-1;
@ %r658 bra $L160;
.loc 1 1117 8
setp.eq.u64 %r659,%r104,0;
@ %r659 bra $L124;
.loc 1 1117 26
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r265;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r661,[%value_in];
}
.loc 1 1117 22
setp.eq.u32 %r662,%r661,0;
@ %r662 bra $L125;
bra $L124;
$L160:
.loc 1 1136 11
@ %r793 bra $L181;
.loc 1 1138 10
mov.u32 %r664,0;
st.u8 [%r114],%r664;
.loc 1 1142 14
add.u32 %r316,%r316,1;
mov.u64 %r52,%r122;
bra $L18;
$L305:
.loc 1 1150 19
add.u64 %r665,%r104,-1;
.loc 1 1150 7
setp.le.u64 %r666,%r665,38;
.loc 1 1151 12
selp.u64 %r104,%r104,39,%r666;
.loc 1 1152 10
or.b32 %r111,%r110,1408;
.loc 1 329 9
ld.u32 %r277,[%r318+8];
mov.u64 %r298,%frame;
shl.b64 %r667,%r104,2;
add.u64 %r295,%r667,%frame;
$L144:
mov.u64 %r108,%r298;
.loc 1 329 6
setp.gt.s32 %r668,%r277,0;
@ %r668 bra $L127;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r318;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r671,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r672,%r671,0;
@ %r672 bra $L128;
.loc 1 333 10
ld.u32 %r277,[%r318+8];
$L127:
.loc 1 331 23
ld.u64 %r272,[%r318];
.loc 1 331 6
ld.u32 %r273,[%r272];
.loc 1 332 10
add.u64 %r673,%r272,4;
st.u64 [%r318],%r673;
.loc 1 333 10
add.u32 %r277,%r277,-4;
st.u32 [%r318+8],%r277;
setp.gt.u32 %r675,%r273,57;
@ %r675 bra $L129;
setp.gt.u32 %r676,%r273,55;
@ %r676 bra $L130;
setp.eq.u32 %r677,%r273,48;
@ %r677 bra $L131;
setp.gt.u32 %r678,%r273,48;
@ %r678 bra $L132;
add.u32 %r679,%r273,-43;
and.b32 %r680,%r679,-3;
setp.eq.u32 %r681,%r680,0;
@ ! %r681 bra $L134;
bra $L133;
$L132:
.loc 1 1191 19
cvta.const.u64 %r682,basefix$0;
cvt.s64.s32 %r683,%r314;
add.u64 %r684,%r683,%r683;
add.u64 %r685,%r682,%r684;
ld.s16 %r314,[%r685];
.loc 1 1192 11
and.b32 %r111,%r111,-897;
.loc 1 1193 5
bra $L135;
$L129:
setp.gt.u32 %r686,%r273,102;
@ %r686 bra $L136;
setp.gt.u32 %r687,%r273,96;
@ %r687 bra $L137;
setp.gt.u32 %r688,%r273,70;
@ %r688 bra $L138;
setp.gt.u32 %r689,%r273,64;
@ ! %r689 bra $L134;
bra $L137;
$L138:
setp.eq.u32 %r690,%r273,88;
@ %r690 bra $L139;
bra $L134;
$L136:
setp.eq.u32 %r691,%r273,120;
@ %r691 bra $L139;
bra $L304;
$L131:
.loc 1 1172 8
setp.ne.u32 %r692,%r314,0;
@ %r692 bra $L141;
.loc 1 1175 15
or.b32 %r111,%r111,512;
.loc 1 1174 14
mov.u32 %r314,8;
$L141:
.loc 1 1177 15
and.b32 %r693,%r111,1024;
.loc 1 1177 8
setp.eq.u32 %r694,%r693,0;
@ %r694 bra $L142;
.loc 1 1178 13
and.b32 %r111,%r111,-1409;
bra $L135;
$L142:
.loc 1 1180 13
and.b32 %r111,%r111,-897;
bra $L135;
$L130:
.loc 1 1198 19
cvta.const.u64 %r695,basefix$0;
cvt.s64.s32 %r696,%r314;
add.u64 %r697,%r696,%r696;
add.u64 %r698,%r695,%r697;
ld.s16 %r314,[%r698];
.loc 1 1199 8
setp.le.s32 %r699,%r314,8;
@ %r699 bra $L134;
.loc 1 1201 11
and.b32 %r111,%r111,-897;
.loc 1 1202 5
bra $L135;
$L137:
.loc 1 1218 8
setp.le.s32 %r700,%r314,10;
@ %r700 bra $L134;
.loc 1 1220 11
and.b32 %r111,%r111,-897;
.loc 1 1221 5
bra $L135;
$L133:
.loc 1 1226 15
and.b32 %r701,%r111,128;
.loc 1 1226 8
setp.eq.u32 %r702,%r701,0;
@ %r702 bra $L134;
.loc 1 1228 15
and.b32 %r134,%r111,-129;
.loc 1 1229 15
or.b32 %r111,%r134,65536;
.loc 1 1230 9
bra $L135;
$L139:
.loc 1 1237 16
and.b32 %r703,%r111,512;
.loc 1 1237 8
setp.eq.u32 %r704,%r703,0;
@ %r704 bra $L134;
.loc 1 1237 52
and.b32 %r705,%r111,65536;
.loc 1 1237 41
setp.ne.u32 %r706,%r705,0;
selp.u64 %r115,8,4,%r706;
add.u64 %r707,%frame,%r115;
.loc 1 1237 25
setp.ne.u64 %r708,%r298,%r707;
@ %r708 bra $L134;
.loc 1 1240 15
and.b32 %r111,%r111,-513;
.loc 1 1239 14
mov.u32 %r314,16;
.loc 1 1241 9
bra $L135;
$L304:
.loc 1 1250 11
setp.eq.u32 %r709,%r273,-1;
@ %r709 bra $L128;
$L134:
.loc 1 1251 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r273;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L128;
$L135:
add.u64 %r298,%r298,4;
.loc 1 1257 13
st.u32 [%r108],%r273;
.loc 1 1153 4
setp.ne.u64 %r713,%r295,%r298;
@ %r713 bra $L144;
.loc 1 1257 10
mov.u64 %r108,%r295;
$L128:
.loc 1 1267 14
and.b32 %r714,%r111,256;
.loc 1 1267 7
setp.eq.u32 %r715,%r714,0;
@ %r715 bra $L145;
.loc 1 1269 11
setp.ge.u64 %r716,%frame,%r108;
@ %r716 bra $L12;
.loc 1 1270 3
ld.u32 %r720,[%r108+-4];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r720;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L12;
$L145:
.loc 1 1273 9
ld.u32 %r86,[%r108+-4];
.loc 1 1274 23
and.b32 %r721,%r86,-33;
.loc 1 1274 7
setp.ne.u32 %r722,%r721,88;
@ %r722 bra $L146;
.loc 1 1276 8
add.u64 %r108,%r108,-4;
.loc 1 1277 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r86;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
$L146:
.loc 1 1279 15
and.b32 %r726,%r111,16;
.loc 1 1279 7
setp.ne.u32 %r727,%r726,0;
@ %r727 bra $L147;
.loc 1 1283 11
st.u32 [%r108],%r726;
.loc 1 1284 15
mov.u64 %r731,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r731;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r314;
call (%value_in),%r49,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r733,[%value_in];
}
.loc 1 830 11
add.u64 %r734,%r320,7;
and.b64 %r287,%r734,-8;
add.u64 %r320,%r287,8;
.loc 1 1285 18
and.b32 %r735,%r111,32;
.loc 1 1285 11
setp.eq.u32 %r736,%r735,0;
@ %r736 bra $L148;
.loc 1 1287 12
ld.u64 %r142,[%r287];
.loc 1 1297 11
st.u64 [%r142],%r733;
bra $L149;
$L148:
.loc 1 1306 23
and.b32 %r737,%r111,4;
.loc 1 1306 16
setp.eq.u32 %r738,%r737,0;
@ %r738 bra $L150;
.loc 1 1309 9
ld.u64 %r739,[%r287];
st.u16 [%r739],%r733;
bra $L149;
$L150:
.loc 1 1311 23
and.b32 %r740,%r111,1;
.loc 1 1311 16
setp.eq.u32 %r741,%r740,0;
@ %r741 bra $L151;
.loc 1 1314 9
ld.u64 %r742,[%r287];
st.u64 [%r742],%r733;
bra $L149;
$L151:
.loc 1 1317 23
and.b32 %r743,%r111,2;
.loc 1 1317 16
setp.eq.u32 %r744,%r743,0;
@ %r744 bra $L152;
.loc 1 1320 8
mov.u64 %r745,_wcstoul_r;
setp.ne.u64 %r746,%r49,%r745;
@ %r746 bra $L153;
.loc 1 1321 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r731;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r314;
call (%value_in),_wcstoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r751,[%value_in];
}
.loc 1 1325 10
mov.u64 %r95,%r751;
bra $L154;
$L153:
.loc 1 1323 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r731;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r314;
call (%value_in),_wcstoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r756,[%value_in];
}
mov.u64 %r95,%r756;
$L154:
.loc 1 1325 10
ld.u64 %r757,[%r287];
st.u64 [%r757],%r95;
bra $L149;
$L152:
.loc 1 1331 9
ld.u64 %r758,[%r287];
st.u32 [%r758],%r733;
$L149:
.loc 1 1333 17
add.u32 %r316,%r316,1;
$L147:
.loc 1 1335 15
sub.u64 %r759,%r108,%frame;
shr.s64 %r761,%r759,2;
.loc 1 1335 10
cvt.u32.u64 %r762,%r761;
add.u32 %r47,%r47,%r762;
.loc 1 1336 4
mov.u64 %r52,%r122;
bra $L18;
$L44:
.loc 1 1656 63
setp.eq.u32 %r763,%r316,0;
@ %r763 bra $L183;
.loc 1 1656 25
ld.u16 %r765,[%r318+16];
and.b16 %r764,%r765,64;
setp.ne.u16 %r766,%r764,0;
.loc 1 1656 63
selp.u32 %r316,-1,%r316,%r766;
bra $L12;
$L163:
.loc 1 561 10
mov.u32 %r316,%r103;
bra $L12;
$L183:
.loc 1 1656 63
mov.u32 %r316,-1;
bra $L12;
$L14:
$L155:
$L298:
.loc 1 568 6
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r174;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u64 %r52,%r122;
bra $L18;
$L85:
.loc 1 975 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r218;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L156;
$L93:
.loc 1 999 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r227;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L157;
$L103:
.loc 1 1046 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r236;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L158;
$L109:
.loc 1 1069 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r246;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u32 %r47,%r279;
mov.u64 %r52,%r122;
bra $L18;
$L115:
.loc 1 1092 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r255;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L159;
$L124:
.loc 1 1135 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r265;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L160;
$L303:
.loc 1 866 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r317;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r191;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r318;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 872 7
setp.eq.u32 %r792,%r242,2;
@ ! %r792 bra $L305;
bra $L161;
$L167:
.loc 1 588 7
mov.u64 %r49,_wcstoul_r;
mov.u32 %r28,8;
bra $L35;
$L168:
.loc 1 731 9
mov.u64 %r49,_wcstol_r;
bra $L35;
$L170:
.loc 1 743 9
mov.u64 %r49,_wcstoul_r;
.loc 1 744 9
mov.u32 %r28,10;
$L35:
mov.u32 %r314,%r28;
mov.u32 %r242,3;
bra $L59;
$L12:
.loc 1 1665 1
mov.u32 %value,%r316;
st.param.u32 [%value_out],%value;
ret;
}
/1561           1612277262  0     0     100666  82992     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _svfprintf_r
.visible .func (.param .u32 %value_out) _svfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __ssprint_r
.extern .func (.param .u32 %value_out) __ssprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.extern .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN VAR DEF: blanks$1
.const .align 1 .u8 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[4] =
{73,78,70,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[4] =
{105,110,102,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[4] =
{110,97,110,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: zeroes$0
.const .align 1 .u8 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[4] =
{78,65,78,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC7
.const .align 1 .u8 $LC7[2] =
{48,0 };
// BEGIN GLOBAL FUNCTION DEF: _svfprintf_r
.visible .func (.param .u32 %value_out) _svfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[224];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .f64 %r28;
.reg .u64 %r33;
.reg .u32 %r37;
.reg .u64 %r39;
.reg .u64 %r47;
.reg .u64 %r54;
.reg .u64 %r64;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r119;
.reg .u32 %r120;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u64 %r135;
.reg .u32 %r136;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .u32 %r144;
.reg .u64 %r148;
.reg .u32 %r150;
.reg .u64 %r154;
.reg .u32 %r155;
.reg .u64 %r158;
.reg .u32 %r160;
.reg .u32 %r163;
.reg .u64 %r166;
.reg .u32 %r169;
.reg .u64 %r172;
.reg .u32 %r173;
.reg .u32 %r175;
.reg .u32 %r177;
.reg .u64 %r184;
.reg .u64 %r186;
.reg .u32 %r187;
.reg .u64 %r189;
.reg .u32 %r190;
.reg .u32 %r192;
.reg .u32 %r194;
.reg .u64 %r196;
.reg .u32 %r197;
.reg .u64 %r198;
.reg .u32 %r201;
.reg .u32 %r204;
.reg .u32 %r207;
.reg .u64 %r208;
.reg .u32 %r210;
.reg .u32 %r213;
.reg .u64 %r216;
.reg .u32 %r217;
.reg .u32 %r219;
.reg .u64 %r222;
.reg .u64 %r224;
.reg .u32 %r226;
.reg .u64 %r228;
.reg .u64 %r231;
.reg .u64 %r235;
.reg .u32 %r236;
.reg .u64 %r242;
.reg .f64 %r243;
.reg .u64 %r244;
.reg .u32 %r245;
.reg .u64 %r247;
.reg .u32 %r248;
.reg .u32 %r249;
.reg .u32 %r250;
.reg .u32 %r251;
.reg .u32 %r252;
.reg .u32 %r253;
.reg .u64 %r254;
.reg .u32 %r255;
.reg .u64 %r256;
.reg .u64 %r257;
.reg .u64 %r259;
.reg .u64 %r261;
.reg .u64 %r265;
.reg .u32 %r270;
.reg .u32 %r271;
.reg .u32 %r272;
.reg .u64 %r274;
.reg .u32 %r275;
.reg .u32 %r277;
.reg .u64 %r278;
.reg .u32 %r279;
.reg .u32 %r280;
.reg .u64 %r283;
.reg .u32 %r284;
.reg .u64 %r285;
.reg .u64 %r290;
.reg .u64 %r292;
.reg .u64 %r295;
.reg .u64 %r296;
.reg .u64 %r297;
.reg .u32 %r298;
.reg .u32 %r305;
.reg .u32 %r307;
.reg .u32 %r308;
.reg .u64 %r309;
.reg .u32 %r310;
.reg .u32 %r312;
.reg .u32 %r313;
.reg .u64 %r314;
.reg .u32 %r318;
.reg .u64 %r321;
.reg .u64 %r323;
.reg .u64 %r328;
.reg .u64 %r337;
.reg .u64 %r339;
.reg .u64 %r340;
.reg .u32 %r341;
.reg .u64 %r342;
.reg .u64 %r343;
.reg .u64 %r345;
.reg .u64 %r346;
.reg .u64 %r348;
.reg .u64 %r350;
.reg .u64 %r351;
.reg .u64 %r352;
.reg .u64 %r353;
.reg .u64 %r355;
.reg .u64 %r357;
.reg .u64 %r358;
.reg .u64 %r359;
.reg .u64 %r360;
.reg .u64 %r361;
.reg .u64 %r365;
.reg .u64 %r366;
.reg .u32 %r368;
.reg .u32 %r369;
.reg .u32 %r370;
.reg .u64 %r372;
.reg .u32 %r373;
.reg .u32 %r375;
.reg .u32 %r378;
.reg .u32 %r379;
.reg .u32 %r381;
.reg .u32 %r382;
.reg .u32 %r387;
.reg .u64 %r388;
.reg .u32 %r389;
.reg .u32 %r390;
.reg .u32 %r391;
.reg .u32 %r392;
.reg .u32 %r393;
.reg .u64 %r394;
.reg .u64 %r398;
.reg .u32 %r399;
.reg .u32 %r401;
.reg .u64 %r402;
.reg .u32 %r403;
.reg .u32 %r404;
.reg .u32 %r405;
.reg .u32 %r406;
.reg .u32 %r407;
.reg .u32 %r412;
.reg .u32 %r413;
.reg .u64 %r414;
.reg .u64 %r415;
.reg .u64 %r416;
.reg .u64 %r417;
.reg .u64 %r428;
.reg .u64 %r430;
.reg .u16 %r431;
.reg .u16 %r432;
.reg .pred %r433;
.reg .u64 %r434;
.reg .pred %r435;
.reg .u64 %r437;
.reg .u64 %r438;
.reg .pred %r439;
.reg .u32 %r440;
.reg .u32 %r441;
.reg .u64 %r442;
.reg .u32 %r443;
.reg .u16 %r445;
.reg .u32 %r446;
.reg .u32 %r447;
.reg .u32 %r450;
.reg .u32 %r451;
.reg .u16 %r452;
.reg .u16 %r453;
.reg .u16 %r454;
.reg .u32 %r455;
.reg .u16 %r456;
.reg .pred %r457;
.reg .u16 %r459;
.reg .u32 %r460;
.reg .u32 %r461;
.reg .u32 %r464;
.reg .u32 %r465;
.reg .u16 %r466;
.reg .u16 %r467;
.reg .u16 %r468;
.reg .u32 %r469;
.reg .u16 %r470;
.reg .pred %r471;
.reg .u64 %r472;
.reg .pred %r473;
.reg .u64 %r474;
.reg .u64 %r475;
.reg .u32 %r476;
.reg .pred %r477;
.reg .u32 %r482;
.reg .pred %r483;
.reg .pred %r484;
.reg .u32 %r485;
.reg .pred %r486;
.reg .pred %r487;
.reg .pred %r488;
.reg .pred %r489;
.reg .pred %r490;
.reg .pred %r491;
.reg .pred %r492;
.reg .pred %r493;
.reg .pred %r494;
.reg .pred %r495;
.reg .pred %r496;
.reg .pred %r497;
.reg .pred %r498;
.reg .u32 %r499;
.reg .pred %r500;
.reg .pred %r501;
.reg .pred %r502;
.reg .u32 %r503;
.reg .pred %r504;
.reg .pred %r505;
.reg .pred %r506;
.reg .pred %r507;
.reg .pred %r508;
.reg .pred %r509;
.reg .pred %r510;
.reg .pred %r511;
.reg .pred %r512;
.reg .pred %r513;
.reg .pred %r514;
.reg .pred %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .pred %r518;
.reg .pred %r519;
.reg .pred %r520;
.reg .pred %r521;
.reg .pred %r522;
.reg .pred %r523;
.reg .u32 %r524;
.reg .pred %r525;
.reg .u32 %r526;
.reg .pred %r527;
.reg .pred %r528;
.reg .pred %r529;
.reg .pred %r530;
.reg .u32 %r532;
.reg .u32 %r533;
.reg .u32 %r534;
.reg .pred %r535;
.reg .u32 %r537;
.reg .u32 %r538;
.reg .u32 %r539;
.reg .pred %r542;
.reg .u16 %r543;
.reg .pred %r544;
.reg .u32 %r545;
.reg .u32 %r546;
.reg .pred %r547;
.reg .u32 %r548;
.reg .u32 %r549;
.reg .pred %r550;
.reg .u32 %r551;
.reg .pred %r552;
.reg .u32 %r553;
.reg .pred %r554;
.reg .u16 %r555;
.reg .pred %r558;
.reg .u32 %r559;
.reg .pred %r560;
.reg .u32 %r561;
.reg .u64 %r562;
.reg .f64 %r565;
.reg .pred %r566;
.reg .pred %r567;
.reg .pred %r568;
.reg .u32 %r569;
.reg .pred %r570;
.reg .u64 %r571;
.reg .u64 %r572;
.reg .u32 %r574;
.reg .pred %r575;
.reg .u32 %r576;
.reg .pred %r577;
.reg .pred %r578;
.reg .u32 %r580;
.reg .u32 %r581;
.reg .u32 %r583;
.reg .u32 %r584;
.reg .u16 %r585;
.reg .u16 %r586;
.reg .u16 %r587;
.reg .u32 %r588;
.reg .u16 %r589;
.reg .pred %r590;
.reg .u64 %r591;
.reg .u64 %r592;
.reg .u32 %r593;
.reg .pred %r594;
.reg .pred %r595;
.reg .pred %r596;
.reg .u32 %r599;
.reg .u64 %r607;
.reg .u32 %r608;
.reg .u64 %r609;
.reg .u64 %r610;
.reg .pred %r611;
.reg .pred %r612;
.reg .u64 %r613;
.reg .u32 %r614;
.reg .pred %r615;
.reg .u64 %r616;
.reg .u32 %r619;
.reg .u32 %r620;
.reg .u32 %r622;
.reg .u32 %r623;
.reg .u16 %r624;
.reg .u16 %r625;
.reg .u16 %r626;
.reg .u32 %r627;
.reg .u16 %r628;
.reg .pred %r629;
.reg .pred %r630;
.reg .pred %r631;
.reg .u32 %r632;
.reg .u32 %r633;
.reg .pred %r634;
.reg .u32 %r636;
.reg .u16 %r638;
.reg .u16 %r639;
.reg .u32 %r640;
.reg .pred %r643;
.reg .u16 %r645;
.reg .u16 %r646;
.reg .u32 %r647;
.reg .pred %r651;
.reg .u32 %r653;
.reg .pred %r656;
.reg .u64 %r662;
.reg .u64 %r663;
.reg .u64 %r665;
.reg .u32 %r666;
.reg .u16 %r668;
.reg .u16 %r669;
.reg .u32 %r670;
.reg .pred %r671;
.reg .pred %r672;
.reg .u32 %r674;
.reg .pred %r675;
.reg .pred %r676;
.reg .u32 %r677;
.reg .pred %r679;
.reg .pred %r682;
.reg .u32 %r683;
.reg .pred %r684;
.reg .u32 %r687;
.reg .pred %r688;
.reg .u32 %r689;
.reg .pred %r691;
.reg .u32 %r692;
.reg .pred %r693;
.reg .u32 %r694;
.reg .u64 %r695;
.reg .u32 %r696;
.reg .pred %r697;
.reg .u64 %r698;
.reg .u32 %r699;
.reg .pred %r700;
.reg .u64 %r701;
.reg .u32 %r702;
.reg .pred %r703;
.reg .u32 %r704;
.reg .pred %r705;
.reg .u32 %r706;
.reg .pred %r707;
.reg .u32 %r708;
.reg .pred %r709;
.reg .u16 %r710;
.reg .u32 %r711;
.reg .u32 %r712;
.reg .u32 %r713;
.reg .pred %r714;
.reg .pred %r715;
.reg .u32 %r717;
.reg .u64 %r719;
.reg .u64 %r720;
.reg .pred %r721;
.reg .u64 %r722;
.reg .u64 %r724;
.reg .u32 %r725;
.reg .pred %r726;
.reg .u32 %r727;
.reg .pred %r728;
.reg .u32 %r729;
.reg .pred %r730;
.reg .u16 %r731;
.reg .pred %r732;
.reg .u32 %r733;
.reg .u32 %r734;
.reg .pred %r735;
.reg .u32 %r736;
.reg .pred %r737;
.reg .u32 %r738;
.reg .pred %r739;
.reg .u16 %r740;
.reg .u32 %r741;
.reg .pred %r742;
.reg .pred %r743;
.reg .u32 %r744;
.reg .u32 %r745;
.reg .pred %r746;
.reg .u32 %r748;
.reg .u32 %r749;
.reg .u32 %r751;
.reg .u32 %r752;
.reg .u16 %r753;
.reg .u16 %r754;
.reg .u16 %r755;
.reg .u32 %r756;
.reg .u16 %r757;
.reg .pred %r758;
.reg .pred %r759;
.reg .pred %r760;
.reg .u16 %r762;
.reg .u16 %r763;
.reg .u16 %r765;
.reg .u32 %r767;
.reg .pred %r769;
.reg .u16 %r771;
.reg .u32 %r772;
.reg .u32 %r773;
.reg .u16 %r775;
.reg .u16 %r776;
.reg .u16 %r778;
.reg .u16 %r779;
.reg .u32 %r781;
.reg .u16 %r782;
.reg .pred %r783;
.reg .u64 %r786;
.reg .u32 %r787;
.reg .u64 %r790;
.reg .pred %r791;
.reg .u16 %r793;
.reg .u16 %r794;
.reg .u32 %r795;
.reg .u64 %r797;
.reg .u16 %r799;
.reg .u16 %r800;
.reg .u32 %r801;
.reg .pred %r804;
.reg .u64 %r807;
.reg .u64 %r808;
.reg .u64 %r809;
.reg .u32 %r810;
.reg .pred %r811;
.reg .u64 %r814;
.reg .pred %r815;
.reg .pred %r816;
.reg .u32 %r817;
.reg .pred %r818;
.reg .u32 %r819;
.reg .pred %r820;
.reg .u32 %r821;
.reg .pred %r822;
.reg .pred %r824;
.reg .pred %r825;
.reg .pred %r826;
.reg .u64 %r828;
.reg .pred %r829;
.reg .u32 %r834;
.reg .pred %r835;
.reg .pred %r836;
.reg .pred %r838;
.reg .u32 %r843;
.reg .pred %r844;
.reg .u16 %r845;
.reg .u32 %r846;
.reg .pred %r847;
.reg .u64 %r849;
.reg .u32 %r850;
.reg .pred %r851;
.reg .u32 %r856;
.reg .pred %r857;
.reg .u64 %r860;
.reg .u32 %r861;
.reg .pred %r862;
.reg .u32 %r867;
.reg .pred %r868;
.reg .pred %r869;
.reg .pred %r870;
.reg .pred %r871;
.reg .u64 %r873;
.reg .pred %r874;
.reg .u32 %r879;
.reg .pred %r880;
.reg .pred %r881;
.reg .pred %r883;
.reg .u32 %r888;
.reg .pred %r889;
.reg .pred %r890;
.reg .pred %r891;
.reg .u64 %r893;
.reg .pred %r894;
.reg .u32 %r899;
.reg .pred %r900;
.reg .pred %r901;
.reg .pred %r903;
.reg .u32 %r908;
.reg .pred %r909;
.reg .u32 %r910;
.reg .pred %r911;
.reg .u32 %r912;
.reg .pred %r913;
.reg .u32 %r918;
.reg .pred %r919;
.reg .pred %r920;
.reg .pred %r921;
.reg .u64 %r922;
.reg .u64 %r923;
.reg .u32 %r924;
.reg .pred %r925;
.reg .u32 %r930;
.reg .pred %r931;
.reg .u32 %r932;
.reg .pred %r933;
.reg .u32 %r934;
.reg .pred %r935;
.reg .u32 %r936;
.reg .pred %r937;
.reg .u32 %r942;
.reg .pred %r943;
.reg .pred %r944;
.reg .pred %r945;
.reg .u64 %r947;
.reg .pred %r948;
.reg .u32 %r953;
.reg .pred %r954;
.reg .pred %r955;
.reg .pred %r957;
.reg .u32 %r962;
.reg .pred %r963;
.reg .pred %r964;
.reg .u64 %r965;
.reg .u64 %r966;
.reg .u32 %r967;
.reg .pred %r968;
.reg .u32 %r973;
.reg .pred %r974;
.reg .u32 %r975;
.reg .pred %r976;
.reg .u32 %r977;
.reg .pred %r978;
.reg .u32 %r979;
.reg .pred %r980;
.reg .u32 %r985;
.reg .pred %r986;
.reg .pred %r987;
.reg .pred %r988;
.reg .u64 %r990;
.reg .pred %r991;
.reg .u32 %r996;
.reg .pred %r997;
.reg .pred %r998;
.reg .pred %r1000;
.reg .u32 %r1005;
.reg .pred %r1006;
.reg .pred %r1007;
.reg .u32 %r1012;
.reg .pred %r1013;
.reg .pred %r1014;
.reg .u32 %r1015;
.reg .pred %r1016;
.reg .u32 %r1021;
.reg .pred %r1022;
.reg .pred %r1023;
.reg .pred %r1024;
.reg .u64 %r1026;
.reg .pred %r1027;
.reg .u32 %r1032;
.reg .pred %r1033;
.reg .pred %r1034;
.reg .pred %r1036;
.reg .u32 %r1041;
.reg .pred %r1042;
.reg .pred %r1043;
.reg .u32 %r1044;
.reg .pred %r1045;
.reg .u32 %r1046;
.reg .pred %r1047;
.reg .u32 %r1052;
.reg .pred %r1053;
.reg .pred %r1054;
.reg .u64 %r1055;
.reg .u64 %r1056;
.reg .u32 %r1057;
.reg .pred %r1058;
.reg .u32 %r1063;
.reg .pred %r1064;
.reg .u32 %r1065;
.reg .pred %r1066;
.reg .pred %r1067;
.reg .u64 %r1069;
.reg .pred %r1070;
.reg .u32 %r1075;
.reg .pred %r1076;
.reg .pred %r1077;
.reg .pred %r1079;
.reg .u32 %r1084;
.reg .pred %r1085;
.reg .pred %r1086;
.reg .u32 %r1087;
.reg .pred %r1088;
.reg .u64 %r1089;
.reg .pred %r1090;
.reg .u32 %r1095;
.reg .pred %r1096;
.reg .pred %r1097;
.reg .u32 %r1102;
.reg .pred %r1103;
.reg .pred %r1104;
.reg .u64 %r1105;
.reg .pred %r1106;
.reg .u32 %r1111;
.reg .pred %r1112;
.reg .u32 %r1113;
.reg .pred %r1114;
.reg .pred %r1115;
.reg .u64 %r1117;
.reg .pred %r1118;
.reg .u32 %r1123;
.reg .pred %r1124;
.reg .pred %r1125;
.reg .pred %r1127;
.reg .u32 %r1132;
.reg .pred %r1133;
.reg .u32 %r1134;
.reg .u64 %r1135;
.reg .pred %r1136;
.reg .u32 %r1141;
.reg .pred %r1142;
.reg .u32 %r1143;
.reg .pred %r1145;
.reg .u32 %r1150;
.reg .pred %r1151;
.reg .u32 %r1152;
.reg .pred %r1153;
.reg .pred %r1154;
.reg .pred %r1155;
.reg .u64 %r1157;
.reg .pred %r1158;
.reg .u32 %r1163;
.reg .pred %r1164;
.reg .pred %r1165;
.reg .pred %r1167;
.reg .u32 %r1172;
.reg .pred %r1173;
.reg .u32 %r1174;
.reg .pred %r1175;
.reg .u32 %r1176;
.reg .u32 %r1181;
.reg .pred %r1182;
.reg .u64 %r1183;
.reg .pred %r1184;
.reg .u64 %r1188;
.reg .u32 %r1189;
.reg .u16 %r1190;
.reg .u16 %r1191;
.reg .pred %r1192;
.reg .u32 %r1194;
.reg .pred %r1195;
.reg .pred %r1196;
.reg .u32 %r1199;
.reg .u64 %r1207;
.reg .u16 %r1209;
.reg .u32 %r1210;
.reg .u32 %r1211;
.reg .u32 %r1212;
.reg .u32 %r1214;
.reg .u32 %r1215;
.reg .u16 %r1216;
.reg .u16 %r1217;
.reg .u16 %r1218;
.reg .u32 %r1219;
.reg .u16 %r1220;
.reg .pred %r1221;
.reg .u64 %r1222;
.reg .u32 %r1225;
.reg .u64 %r1233;
.reg .pred %r1235;
.reg .u64 %r1236;
.reg .u32 %r1237;
.reg .pred %r1238;
.reg .u32 %r1241;
.reg .u32 %r1242;
.reg .u64 %r1249;
.reg .u64 %r1250;
.reg .u64 %r1251;
.reg .u32 %r1252;
.reg .pred %r1253;
.reg .u32 %r1255;
.reg .u32 %r1256;
.reg .u32 %r1258;
.reg .u32 %r1259;
.reg .u16 %r1260;
.reg .u16 %r1261;
.reg .u16 %r1262;
.reg .u32 %r1263;
.reg .u16 %r1264;
.reg .pred %r1265;
.reg .u32 %r1267;
.reg .u32 %r1270;
.reg .pred %r1271;
.reg .u64 %r1272;
.reg .u64 %r1273;
.reg .pred %r1274;
.reg .u32 %r1297;
.reg .u64 %r1298;
.reg .u64 %r1299;
.reg .u64 %r1300;
.reg .u64 %r1301;
.reg .u32 %r1302;
.reg .u64 %r1303;
.reg .u64 %r1304;
.reg .u64 %r1305;
.reg .u32 %r1306;
.reg .u64 %r1307;
.reg .u64 %r1308;
.reg .u64 %r1309;
mov.u64 %r414,%ar0;
mov.u64 %r415,%ar1;
mov.u64 %r416,%ar2;
mov.u64 %r417,%ar3;
.loc 1 685 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r428,[%value_in];
}
.loc 1 685 8
ld.u64 %r265,[%r428];
.loc 1 686 20
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r265;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r430,[%value_in];
}
.loc 1 869 12
ld.u16 %r432,[%r415+16];
and.b16 %r431,%r432,128;
setp.eq.u16 %r433,%r431,0;
@ %r433 bra $L2;
.loc 1 869 33
ld.u64 %r434,[%r415+24];
setp.ne.u64 %r435,%r434,0;
@ %r435 bra $L2;
.loc 1 871 28
mov.u64 %r437,64;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r437;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r438,[%value_in];
}
.loc 1 871 26
st.u64 [%r415],%r438;
.loc 1 871 17
st.u64 [%r415+24],%r438;
.loc 1 872 6
setp.ne.u64 %r439,%r438,0;
@ %r439 bra $L3;
.loc 1 874 17
mov.u32 %r440,12;
st.u32 [%r414],%r440;
.loc 1 875 11
mov.u32 %r413,-1;
bra $L1;
$L3:
.loc 1 877 17
cvt.u32.u64 %r441,%r437;
st.u32 [%r415+32],%r441;
$L2:
.loc 1 883 14
st.u64 [%frame+168],%frame;
.loc 1 884 16
mov.u64 %r442,0;
st.u64 [%frame+184],%r442;
.loc 1 885 17
cvt.u32.u64 %r443,%r442;
st.u32 [%frame+176],%r443;
.loc 1 696 6
cvt.u32.u64 %r68,%r442;
.loc 1 688 42
mov.f64 %r28,0d0000000000000000;
.loc 1 883 21
mov.u64 %r257,%frame;
.loc 1 707 8
mov.u64 %r256,%r442;
.loc 1 691 6
cvt.u32.u64 %r252,%r256;
.loc 1 887 6
cvt.u32.u64 %r413,%r256;
.loc 1 918 4
add.u64 %r1298,%frame,168;
.loc 1 1756 5
add.u64 %r1299,%frame,200;
.loc 1 1687 4
add.u64 %r1300,%frame,216;
.loc 1 1685 4
add.u64 %r1301,%frame,218;
.loc 1 1328 11
cvt.u32.u64 %r1302,%r430;
.loc 1 1910 4
add.u64 %r1303,%frame,199;
add.u64 %r1304,%frame,202;
.loc 1 1916 36
add.u64 %r1305,%frame,201;
.loc 1 1340 21
add.u32 %r1306,%r1302,1;
.loc 1 1873 11
add.u64 %r1307,%frame,192;
add.u64 %r1308,%frame,208;
add.u64 %r1309,%frame,212;
$L5:
.loc 1 914 24
ld.s8 %r270,[%r416];
.loc 1 914 37
cvt.u16.u32 %r445,%r270;
set.u32.ne.u16 %r446,%r445,37;
neg.s32 %r447,%r446;
set.u32.ne.u16 %r450,%r445,0;
neg.s32 %r451,%r450;
cvt.u16.u32 %r453,%r447;
cvt.u16.u32 %r454,%r451;
and.b16 %r452,%r453,%r454;
.loc 1 914 23
cvt.u32.u16 %r455,%r452;
cvt.u16.u8 %r456,%r455;
setp.eq.u16 %r457,%r456,0;
@ %r457 bra $L243;
mov.u64 %r244,%r416;
$L7:
mov.u64 %r274,%r244;
.loc 1 915 25
add.u64 %r244,%r244,1;
.loc 1 914 24
ld.s8 %r270,[%r244];
.loc 1 914 37
cvt.u16.u32 %r459,%r270;
set.u32.ne.u16 %r460,%r459,0;
neg.s32 %r461,%r460;
set.u32.ne.u16 %r464,%r459,37;
neg.s32 %r465,%r464;
cvt.u16.u32 %r467,%r461;
cvt.u16.u32 %r468,%r465;
and.b16 %r466,%r467,%r468;
.loc 1 914 23
cvt.u32.u16 %r469,%r466;
cvt.u16.u8 %r470,%r469;
setp.ne.u16 %r471,%r470,0;
@ %r471 bra $L7;
.loc 1 917 16
sub.u64 %r472,%r244,%r416;
.loc 1 917 10
cvt.u32.u64 %r271,%r472;
.loc 1 917 6
setp.eq.u32 %r473,%r271,0;
@ %r473 bra $L6;
.loc 1 918 4
st.u64 [%r257],%r416;
cvt.s64.s32 %r33,%r271;
st.u64 [%r257+8],%r33;
ld.u64 %r475,[%frame+184];
add.u64 %r474,%r475,%r33;
st.u64 [%frame+184],%r474;
ld.u32 %r476,[%frame+176];
add.u32 %r37,%r476,1;
st.u32 [%frame+176],%r37;
setp.gt.s32 %r477,%r37,7;
@ %r477 bra $L8;
add.u64 %r257,%r257,16;
bra $L9;
$L8:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r482,[%value_in];
}
setp.ne.u32 %r483,%r482,0;
@ %r483 bra $L10;
mov.u64 %r257,%frame;
$L9:
.loc 1 919 8
add.u32 %r413,%r413,%r271;
.loc 1 925 21
ld.s8 %r270,[%r274+1];
bra $L6;
$L243:
.loc 1 914 23
mov.u64 %r244,%r416;
$L6:
.loc 1 925 20
setp.eq.u32 %r484,%r270,0;
@ %r484 bra $L11;
.loc 1 929 6
add.u64 %r416,%r244,1;
.loc 1 935 8
mov.u32 %r485,0;
st.u8 [%frame+218],%r485;
.loc 1 947 14
ld.s8 %r406,[%r244+1];
mov.u32 %r275,0;
mov.u32 %r277,%r275;
.loc 1 934 8
mov.u32 %r251,-1;
.loc 1 933 9
mov.u32 %r250,%r275;
.loc 1 931 9
mov.u32 %r248,%r275;
.loc 1 1060 6
mov.u32 %r1297,%r275;
bra $L12;
$L244:
.loc 1 1007 10
mov.u64 %r417,%r166;
$L12:
.loc 1 947 18
add.u64 %r416,%r416,1;
.loc 1 947 12
mov.u32 %r245,%r406;
$L13:
.loc 1 948 11
setp.eq.u32 %r486,%r245,85;
@ %r486 bra $L14;
setp.gt.s32 %r487,%r245,85;
@ %r487 bra $L15;
setp.eq.u32 %r488,%r245,46;
@ %r488 bra $L16;
setp.gt.s32 %r489,%r245,46;
@ %r489 bra $L17;
setp.eq.u32 %r490,%r245,42;
@ %r490 bra $L18;
setp.gt.s32 %r491,%r245,42;
@ %r491 bra $L19;
setp.eq.u32 %r492,%r245,32;
@ %r492 bra $L20;
setp.eq.u32 %r493,%r245,35;
@ %r493 bra $L21;
bra $L364;
$L19:
setp.eq.u32 %r494,%r245,43;
@ %r494 bra $L23;
setp.eq.u32 %r495,%r245,45;
@ %r495 bra $L24;
bra $L25;
$L17:
setp.eq.u32 %r496,%r245,68;
@ %r496 bra $L26;
setp.gt.s32 %r497,%r245,68;
@ %r497 bra $L27;
setp.eq.u32 %r498,%r245,48;
@ %r498 bra $L28;
add.u32 %r499,%r245,-49;
setp.gt.u32 %r500,%r499,8;
@ %r500 bra $L25;
mov.u64 %r285,%r416;
.loc 1 1077 6
mov.u32 %r250,0;
add.u32 %r1267,%r245,-48;
bra $L29;
$L27:
.loc 1 948 11
setp.eq.u32 %r501,%r245,76;
@ %r501 bra $L30;
setp.gt.s32 %r502,%r245,76;
@ %r502 bra $L31;
and.b32 %r503,%r245,-3;
setp.eq.u32 %r504,%r503,69;
@ ! %r504 bra $L25;
bra $L32;
$L31:
setp.eq.u32 %r505,%r245,79;
@ %r505 bra $L33;
bra $L25;
$L15:
setp.eq.u32 %r506,%r245,110;
@ %r506 bra $L34;
setp.gt.s32 %r507,%r245,110;
@ %r507 bra $L35;
setp.gt.s32 %r508,%r245,103;
@ %r508 bra $L36;
setp.gt.s32 %r509,%r245,100;
@ %r509 bra $L32;
setp.eq.u32 %r510,%r245,99;
@ %r510 bra $L37;
setp.eq.u32 %r511,%r245,100;
@ %r511 bra $L38;
setp.eq.u32 %r512,%r245,88;
@ %r512 bra $L39;
bra $L25;
$L36:
setp.eq.u32 %r513,%r245,105;
@ %r513 bra $L38;
setp.eq.u32 %r514,%r245,108;
@ %r514 bra $L40;
setp.eq.u32 %r515,%r245,104;
@ %r515 bra $L41;
bra $L25;
$L35:
setp.eq.u32 %r516,%r245,115;
@ %r516 bra $L42;
setp.gt.s32 %r517,%r245,115;
@ %r517 bra $L43;
setp.eq.u32 %r518,%r245,112;
@ %r518 bra $L44;
setp.eq.u32 %r519,%r245,113;
@ %r519 bra $L45;
setp.eq.u32 %r520,%r245,111;
@ %r520 bra $L46;
bra $L25;
$L43:
setp.eq.u32 %r521,%r245,117;
@ %r521 bra $L47;
setp.eq.u32 %r522,%r245,120;
@ %r522 bra $L48;
bra $L25;
$L38:
setp.eq.u32 %r523,%r275,0;
@ %r523 bra $L50;
cvt.u32.u32 %r524,%r277;
st.u8 [%frame+218],%r524;
bra $L50;
$L48:
setp.eq.u32 %r525,%r275,0;
@ %r525 bra $L51;
cvt.u32.u32 %r526,%r277;
st.u8 [%frame+218],%r526;
$L51:
.loc 1 1538 10
cvta.const.u64 %r256,$LC4;
bra $L52;
$L24:
.loc 1 1022 14
ld.s8 %r406,[%r416];
bra $L53;
$L20:
ld.s8 %r406,[%r416];
.loc 1 964 7
setp.ne.u32 %r527,%r277,0;
selp.u32 %r275,%r275,1,%r527;
selp.u32 %r277,%r277,32,%r527;
bra $L12;
$L21:
.loc 1 968 10
or.b32 %r248,%r248,1;
.loc 1 947 14
ld.s8 %r406,[%r416];
.loc 1 969 4
bra $L12;
$L18:
.loc 1 1007 10
add.u64 %r166,%r417,4;
ld.u32 %r250,[%r417];
.loc 1 1022 14
ld.s8 %r406,[%r416];
.loc 1 1011 7
setp.ge.s32 %r528,%r250,0;
@ %r528 bra $L244;
.loc 1 1013 10
neg.s32 %r250,%r250;
.loc 1 1007 10
mov.u64 %r417,%r166;
$L53:
.loc 1 1016 10
or.b32 %r248,%r248,4;
.loc 1 1017 4
bra $L12;
$L23:
.loc 1 947 14
ld.s8 %r406,[%r416];
.loc 1 1020 4
mov.u32 %r275,1;
.loc 1 1019 9
mov.u32 %r277,%r245;
.loc 1 1020 4
bra $L12;
$L16:
.loc 1 1022 18
add.u64 %r296,%r416,1;
.loc 1 1022 12
ld.s8 %r245,[%r416];
.loc 1 1022 7
setp.eq.u32 %r529,%r245,42;
@ %r529 bra $L55;
.loc 1 1061 11
add.u32 %r1267,%r245,-48;
.loc 1 1061 10
setp.le.u32 %r530,%r1267,9;
@ %r530 bra $L56;
.loc 1 1022 18
mov.u64 %r416,%r296;
.loc 1 1060 6
mov.u32 %r251,%r1297;
bra $L13;
$L55:
.loc 1 1052 10
ld.u32 %r298,[%r417];
max.s32 %r251,%r298,-1;
.loc 1 947 14
ld.s8 %r406,[%r416+1];
.loc 1 1052 10
add.u64 %r417,%r417,4;
.loc 1 1022 18
mov.u64 %r416,%r296;
.loc 1 1058 5
bra $L12;
$L56:
mov.u64 %r290,%r296;
.loc 1 1060 6
mov.u32 %r251,%r1297;
$L58:
.loc 1 1062 12
shl.b32 %r532,%r251,2;
add.u32 %r533,%r532,%r251;
add.u32 %r534,%r533,%r533;
.loc 1 1062 7
add.u32 %r251,%r534,%r1267;
mov.u64 %r47,%r290;
add.u64 %r290,%r290,1;
mov.u64 %r416,%r290;
.loc 1 1063 8
ld.s8 %r245,[%r47];
.loc 1 1061 11
add.u32 %r1267,%r245,-48;
.loc 1 1061 10
setp.le.u32 %r535,%r1267,9;
@ %r535 bra $L58;
bra $L13;
$L28:
.loc 1 1073 10
or.b32 %r248,%r248,128;
.loc 1 947 14
ld.s8 %r406,[%r416];
.loc 1 1074 4
bra $L12;
$L29:
.loc 1 1079 12
shl.b32 %r537,%r250,2;
add.u32 %r538,%r537,%r250;
add.u32 %r539,%r538,%r538;
.loc 1 1079 7
add.u32 %r250,%r1267,%r539;
mov.u64 %r64,%r285;
add.u64 %r285,%r285,1;
mov.u64 %r416,%r285;
.loc 1 1080 8
ld.s8 %r245,[%r64];
.loc 1 1081 13
add.u32 %r1267,%r245,-48;
.loc 1 1081 4
setp.le.u32 %r542,%r1267,9;
@ %r542 bra $L29;
bra $L13;
$L30:
.loc 1 1097 10
or.b32 %r248,%r248,8;
.loc 1 947 14
ld.s8 %r406,[%r416];
.loc 1 1098 4
bra $L12;
$L41:
.loc 1 1107 11
or.b32 %r248,%r248,64;
.loc 1 947 14
ld.s8 %r406,[%r416];
.loc 1 1108 4
bra $L12;
$L40:
.loc 1 1111 8
ld.s8 %r406,[%r416];
.loc 1 1111 7
cvt.u16.u32 %r543,%r406;
setp.ne.u16 %r544,%r543,108;
@ %r544 bra $L59;
.loc 1 1113 11
or.b32 %r248,%r248,32;
.loc 1 947 14
ld.s8 %r406,[%r416+1];
.loc 1 1112 8
add.u64 %r416,%r416,1;
bra $L12;
$L59:
.loc 1 1116 11
or.b32 %r248,%r248,16;
bra $L12;
$L45:
.loc 1 1119 10
or.b32 %r248,%r248,32;
.loc 1 947 14
ld.s8 %r406,[%r416];
.loc 1 1120 4
bra $L12;
$L37:
.loc 1 1178 9
ld.u32 %r545,[%r417];
st.u8 [%frame+128],%r545;
.loc 1 1181 9
mov.u32 %r546,0;
st.u8 [%frame+218],%r546;
.loc 1 1178 11
add.u64 %r417,%r417,4;
.loc 1 1182 4
mov.u32 %r341,1;
.loc 1 1179 10
mov.u32 %r226,%r341;
.loc 1 1162 7
add.u64 %r247,%frame,128;
.loc 1 1182 4
bra $L60;
$L26:
setp.eq.u32 %r547,%r275,0;
@ %r547 bra $L61;
cvt.u32.u32 %r548,%r277;
st.u8 [%frame+218],%r548;
$L61:
.loc 1 1184 10
or.b32 %r248,%r248,16;
$L50:
.loc 1 1188 13
and.b32 %r549,%r248,32;
setp.eq.u32 %r550,%r549,0;
@ %r550 bra $L62;
add.u64 %r342,%r417,7;
and.b64 %r39,%r342,-8;
add.u64 %r417,%r39,8;
ld.u64 %r54,[%r39];
mov.u64 %r254,%r54;
bra $L63;
$L62:
and.b32 %r551,%r248,16;
setp.eq.u32 %r552,%r551,0;
@ %r552 bra $L64;
add.u64 %r309,%r417,7;
and.b64 %r343,%r309,-8;
add.u64 %r417,%r343,8;
ld.u64 %r54,[%r343];
mov.u64 %r254,%r54;
bra $L63;
$L64:
.loc 1 1007 10
ld.u32 %r381,[%r417];
add.u64 %r417,%r417,4;
.loc 1 1188 13
and.b32 %r553,%r248,64;
setp.eq.u32 %r554,%r553,0;
@ %r554 bra $L65;
cvt.u16.u32 %r555,%r381;
cvt.s64.s16 %r254,%r555;
.loc 1 1190 8
mov.u64 %r54,%r254;
bra $L63;
$L65:
.loc 1 1188 13
cvt.s64.s32 %r254,%r381;
.loc 1 1190 8
mov.u64 %r54,%r254;
$L63:
.loc 1 1190 7
setp.ge.s64 %r558,%r54,0;
@ %r558 bra $L66;
.loc 1 1196 12
neg.s64 %r254,%r254;
.loc 1 1197 10
mov.u32 %r559,45;
st.u8 [%frame+218],%r559;
mov.u32 %r382,45;
.loc 1 1199 9
mov.u32 %r255,1;
bra $L67;
$L32:
setp.eq.u32 %r560,%r275,0;
@ %r560 bra $L68;
cvt.u32.u32 %r561,%r277;
st.u8 [%frame+218],%r561;
$L68:
.loc 1 1188 13
add.u64 %r562,%r417,7;
and.b64 %r372,%r562,-8;
add.u64 %r417,%r372,8;
.loc 1 1214 25
ld.f64 %r28,[%r372];
.loc 1 1225 8
abs.f64 %r565,%r28;
setp.leu.f64 %r566,%r565,0d7fefffffffffffff;
@ %r566 bra $L71;
.loc 1 1226 8
setp.lt.f64 %r567,%r28,0d0000000000000000;
@ %r567 bra $L72;
.loc 1 1674 7
ld.s8 %r382,[%frame+218];
bra $L73;
$L71:
.loc 1 1236 7
setp.nan.f64 %r568,%r28,%r28;
@ ! %r568 bra $L365;
bra $L74;
$L72:
.loc 1 1227 11
mov.u32 %r569,45;
st.u8 [%frame+218],%r569;
mov.u32 %r382,45;
$L73:
.loc 1 1228 8
setp.le.s32 %r570,%r245,71;
@ %r570 bra $L245;
.loc 1 1231 9
cvta.const.u64 %r247,$LC1;
bra $L76;
$L245:
.loc 1 1229 9
cvta.const.u64 %r247,$LC0;
$L76:
.loc 1 1233 11
and.b32 %r249,%r248,-129;
.loc 1 1234 5
mov.u32 %r341,3;
.loc 1 1232 10
mov.u32 %r226,%r341;
.loc 1 932 9
mov.u32 %r251,0;
.loc 1 937 8
mov.u32 %r253,%r251;
.loc 1 1234 5
bra $L77;
$L74:
.loc 1 1237 9
mov.b64 %r571,%r28;
shr.u64 %r572,%r571,63;
cvt.u32.u64 %r574,%r572;
.loc 1 1237 8
setp.ne.u32 %r575,%r574,0;
@ %r575 bra $L78;
.loc 1 1674 7
ld.s8 %r382,[%frame+218];
bra $L79;
$L78:
.loc 1 1238 11
mov.u32 %r576,45;
st.u8 [%frame+218],%r576;
mov.u32 %r382,45;
$L79:
.loc 1 1239 8
setp.le.s32 %r577,%r245,71;
@ %r577 bra $L246;
.loc 1 1242 9
cvta.const.u64 %r247,$LC3;
bra $L80;
$L246:
.loc 1 1240 9
cvta.const.u64 %r247,$LC2;
$L80:
.loc 1 1244 11
and.b32 %r249,%r248,-129;
.loc 1 1245 5
mov.u32 %r341,3;
.loc 1 1243 10
mov.u32 %r226,%r341;
.loc 1 932 9
mov.u32 %r251,0;
.loc 1 937 8
mov.u32 %r253,%r251;
.loc 1 1245 5
bra $L77;
$L365:
.loc 1 1304 32
and.b32 %r373,%r245,-33;
.loc 1 1302 7
setp.eq.u32 %r578,%r251,-1;
@ %r578 bra $L247;
.loc 1 1304 40
set.u32.eq.u32 %r580,%r251,0;
neg.s32 %r581,%r580;
.loc 1 1304 32
set.u32.eq.u32 %r583,%r373,71;
neg.s32 %r584,%r583;
.loc 1 1304 40
cvt.u16.u32 %r586,%r581;
cvt.u16.u32 %r587,%r584;
and.b16 %r585,%r586,%r587;
cvt.u32.u16 %r588,%r585;
cvt.u16.u8 %r589,%r588;
setp.ne.u16 %r590,%r589,0;
@ %r590 bra $L82;
bra $L81;
$L247:
.loc 1 1303 10
mov.u32 %r251,6;
$L81:
.loc 1 1308 10
or.b32 %r249,%r248,256;
.loc 1 1807 6
mov.b64 %r591,%r28;
shr.u64 %r592,%r591,32;
.loc 1 1807 5
cvt.u32.u64 %r593,%r592;
setp.ge.s32 %r594,%r593,0;
@ %r594 bra $L248;
bra $L241;
$L262:
.loc 1 1305 10
mov.u32 %r251,1;
$L241:
.loc 1 1808 9
neg.f64 %r243,%r28;
.loc 1 1809 9
mov.u32 %r219,45;
bra $L83;
$L248:
mov.f64 %r243,%r28;
.loc 1 1811 9
mov.u32 %r219,0;
$L83:
.loc 1 1860 5
setp.eq.u32 %r595,%r373,70;
@ %r595 bra $L84;
.loc 1 1867 6
setp.ne.u32 %r596,%r373,69;
@ %r596 bra $L85;
.loc 1 1868 11
add.u32 %r318,%r251,1;
.loc 1 1873 11
mov.u32 %r599,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r243;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r599;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r318;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1309;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1308;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1307;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r607,[%value_in];
}
mov.u64 %r247,%r607;
setp.eq.u32 %r1271,1,1;
bra $L86;
$L375:
.loc 1 1880 10
ld.u32 %r375,[%frame+212];
bra $L87;
$L233:
.loc 1 1879 23
mov.u32 %r608,1;
sub.u32 %r375,%r608,%r251;
.loc 1 1879 12
st.u32 [%frame+212],%r375;
$L87:
.loc 1 1880 10
cvt.s64.s32 %r609,%r375;
.loc 1 1880 7
add.u64 %r610,%r609,%r283;
add.u64 %r321,%r1207,%r610;
setp.eq.u32 %r1271,1,1;
$L235:
.loc 1 1882 6
setp.eq.f64 %r611,%r243,0d0000000000000000;
@ %r611 bra $L249;
.loc 1 1884 14
ld.u64 %r292,[%frame+192];
.loc 1 1884 9
setp.ge.u64 %r612,%r292,%r321;
@ %r612 bra $L88;
.loc 1 1885 11
mov.u32 %r614,48;
$L89:
.loc 1 1885 8
add.u64 %r613,%r292,1;
st.u64 [%frame+192],%r613;
.loc 1 1885 11
st.u8 [%r292],%r614;
.loc 1 1884 14
ld.u64 %r292,[%frame+192];
.loc 1 1884 9
setp.gt.u64 %r615,%r321,%r292;
@ %r615 bra $L89;
bra $L88;
$L376:
.loc 1 1887 16
ld.u64 %r616,[%frame+192];
sub.u64 %r323,%r616,%r247;
.loc 1 1887 10
cvt.u32.u64 %r68,%r323;
.loc 1 1314 14
ld.u32 %r253,[%frame+212];
bra $L90;
$L249:
mov.u64 %r292,%r321;
$L88:
.loc 1 1887 16
sub.u64 %r323,%r292,%r247;
.loc 1 1887 10
cvt.u32.u64 %r68,%r323;
.loc 1 1314 14
ld.u32 %r253,[%frame+212];
.loc 1 1313 7
@ %r1271 bra $L91;
$L90:
.loc 1 1314 8
set.u32.lt.s32 %r619,%r253,-3;
neg.s32 %r620,%r619;
.loc 1 1314 20
set.u32.lt.s32 %r622,%r251,%r253;
neg.s32 %r623,%r622;
cvt.u16.u32 %r625,%r620;
cvt.u16.u32 %r626,%r623;
or.b16 %r624,%r625,%r626;
cvt.u32.u16 %r627,%r624;
cvt.u16.u8 %r628,%r627;
setp.eq.u16 %r629,%r628,0;
@ %r629 bra $L92;
.loc 1 1315 9
add.u32 %r245,%r245,-2;
bra $L93;
$L91:
.loc 1 1323 7
setp.eq.u32 %r630,%r245,102;
@ %r630 bra $L94;
$L93:
.loc 1 1324 5
add.u32 %r67,%r253,-1;
st.u32 [%frame+212],%r67;
.loc 1 1903 7
st.u8 [%frame+200],%r245;
.loc 1 1904 5
setp.ge.s32 %r631,%r67,0;
@ %r631 bra $L250;
.loc 1 1905 7
mov.u32 %r632,1;
sub.u32 %r67,%r632,%r253;
.loc 1 1906 8
mov.u32 %r280,45;
bra $L95;
$L250:
.loc 1 1909 8
mov.u32 %r280,43;
$L95:
cvt.u32.u32 %r633,%r280;
st.u8 [%frame+201],%r633;
.loc 1 1911 5
setp.le.s32 %r634,%r67,9;
@ %r634 bra $L96;
.loc 1 1910 4
mov.u64 %r328,%r1303;
$L97:
mov.u64 %r353,%r328;
.loc 1 1913 9
add.u64 %r328,%r353,-1;
.loc 1 1913 11
rem.s32 %r636,%r67,10;
cvt.u16.u32 %r639,%r636;
add.u16 %r638,%r639,48;
.loc 1 1913 9
cvt.u32.u16 %r640,%r638;
st.u8 [%r328],%r640;
mov.u32 %r307,%r67;
.loc 1 1914 17
div.s32 %r67,%r67,10;
.loc 1 1914 3
setp.gt.s32 %r643,%r307,99;
@ %r643 bra $L97;
.loc 1 1915 8
add.u64 %r198,%r353,-2;
.loc 1 1915 10
cvt.u16.u32 %r646,%r67;
add.u16 %r645,%r646,48;
cvt.u32.u16 %r647,%r645;
cvt.s32.s8 %r379,%r647;
.loc 1 1915 8
st.u8 [%r328+-1],%r647;
.loc 1 1916 3
setp.ge.u64 %r651,%r198,%r1303;
@ %r651 bra $L251;
mov.u64 %r297,%r1304;
$L100:
.loc 1 1916 43
add.u64 %r198,%r198,1;
.loc 1 1916 39
cvt.u32.u32 %r653,%r379;
st.u8 [%r297],%r653;
.loc 1 1916 3
add.u64 %r297,%r297,1;
setp.ne.u64 %r656,%r198,%r1303;
@ %r656 bra $L99;
.loc 1 1916 36
sub.u64 %r662,%r1305,%r353;
add.u64 %r663,%r1304,%r662;
.loc 1 1923 12
sub.u64 %r665,%r663,%r1299;
cvt.u32.u64 %r252,%r665;
bra $L98;
$L99:
.loc 1 1916 41
ld.s8 %r379,[%r198];
bra $L100;
$L96:
.loc 1 1920 9
mov.u32 %r666,48;
st.u8 [%frame+202],%r666;
.loc 1 1921 10
cvt.u16.u32 %r669,%r67;
add.u16 %r668,%r669,48;
.loc 1 1921 8
cvt.u32.u16 %r670,%r668;
st.u8 [%frame+203],%r670;
mov.u32 %r252,4;
bra $L98;
$L251:
.loc 1 1916 3
mov.u32 %r252,2;
$L98:
.loc 1 1326 10
add.u32 %r226,%r252,%r68;
.loc 1 1327 8
setp.gt.s32 %r671,%r68,1;
@ %r671 bra $L101;
and.b32 %r253,%r248,1;
.loc 1 1327 18
setp.ne.u32 %r672,%r253,0;
@ %r672 bra $L101;
.loc 1 1673 10
max.s32 %r341,%r226,0;
bra $L102;
$L101:
.loc 1 1328 11
add.u32 %r226,%r226,%r1302;
.loc 1 1673 10
max.s32 %r341,%r226,0;
.loc 1 937 8
mov.u32 %r253,0;
bra $L102;
$L94:
and.b32 %r674,%r248,1;
or.b32 %r378,%r674,%r251;
.loc 1 1334 9
setp.le.s32 %r675,%r253,0;
@ %r675 bra $L103;
.loc 1 1336 16
setp.eq.u32 %r676,%r378,0;
@ %r676 bra $L252;
.loc 1 1337 13
add.u32 %r677,%r253,%r1302;
add.u32 %r226,%r677,%r251;
.loc 1 1673 10
max.s32 %r341,%r226,0;
bra $L102;
$L103:
.loc 1 1339 20
setp.eq.u32 %r679,%r378,0;
@ %r679 bra $L253;
.loc 1 1340 21
add.u32 %r226,%r1306,%r251;
.loc 1 1673 10
max.s32 %r341,%r226,0;
.loc 1 1339 12
bra $L102;
$L92:
.loc 1 1342 15
setp.gt.s32 %r682,%r68,%r253;
@ %r682 bra $L105;
.loc 1 1344 9
and.b32 %r683,%r248,1;
setp.ne.u32 %r684,%r683,0;
@ %r684 bra $L106;
.loc 1 1673 10
max.s32 %r341,%r253,0;
mov.u32 %r226,%r253;
mov.u32 %r245,103;
bra $L102;
$L106:
.loc 1 1345 12
add.u32 %r226,%r253,%r1302;
.loc 1 1673 10
max.s32 %r341,%r226,0;
mov.u32 %r245,103;
bra $L102;
$L105:
.loc 1 1347 18
cvt.u32.u64 %r687,%r323;
add.u32 %r226,%r1302,%r687;
.loc 1 1348 9
setp.le.s32 %r688,%r253,0;
@ %r688 bra $L107;
.loc 1 1673 10
max.s32 %r341,%r226,0;
mov.u32 %r245,103;
bra $L102;
$L107:
.loc 1 1349 17
sub.u32 %r689,%r226,%r253;
.loc 1 1349 12
add.u32 %r226,%r689,1;
.loc 1 1673 10
max.s32 %r341,%r226,0;
mov.u32 %r245,103;
bra $L102;
$L252:
mov.u32 %r341,%r253;
.loc 1 1314 14
mov.u32 %r226,%r253;
bra $L102;
$L253:
mov.u32 %r341,1;
.loc 1 1339 12
mov.u32 %r226,%r341;
$L102:
.loc 1 1372 7
setp.eq.u32 %r691,%r219,0;
@ %r691 bra $L108;
.loc 1 1373 10
mov.u32 %r692,45;
st.u8 [%frame+218],%r692;
.loc 1 932 9
mov.u32 %r251,0;
bra $L109;
$L34:
setp.eq.u32 %r693,%r275,0;
@ %r693 bra $L110;
cvt.u32.u32 %r694,%r277;
st.u8 [%frame+218],%r694;
$L110:
.loc 1 1188 13
add.u64 %r695,%r417,7;
and.b64 %r365,%r695,-8;
ld.u64 %r366,[%r365];
add.u64 %r417,%r365,8;
.loc 1 1387 14
and.b32 %r696,%r248,32;
.loc 1 1387 7
setp.eq.u32 %r697,%r696,0;
@ %r697 bra $L111;
.loc 1 1388 34
cvt.s64.s32 %r698,%r413;
st.u64 [%r366],%r698;
bra $L5;
$L111:
.loc 1 1391 14
and.b32 %r699,%r248,16;
.loc 1 1391 7
setp.eq.u32 %r700,%r699,0;
@ %r700 bra $L113;
.loc 1 1392 34
cvt.s64.s32 %r701,%r413;
st.u64 [%r366],%r701;
bra $L5;
$L113:
.loc 1 1393 19
and.b32 %r702,%r248,64;
.loc 1 1393 12
setp.eq.u32 %r703,%r702,0;
@ %r703 bra $L114;
.loc 1 1394 35
st.u16 [%r366],%r413;
bra $L5;
$L114:
.loc 1 1400 33
st.u32 [%r366],%r413;
bra $L5;
$L33:
.loc 1 1403 10
or.b32 %r248,%r248,16;
$L46:
.loc 1 1406 13
and.b32 %r704,%r248,32;
setp.eq.u32 %r705,%r704,0;
@ %r705 bra $L115;
add.u64 %r339,%r417,7;
and.b64 %r351,%r339,-8;
add.u64 %r417,%r351,8;
ld.u64 %r254,[%r351];
.loc 1 1407 9
mov.u32 %r255,0;
bra $L116;
$L115:
.loc 1 1406 13
and.b32 %r706,%r248,16;
setp.eq.u32 %r707,%r706,0;
@ %r707 bra $L117;
add.u64 %r346,%r417,7;
and.b64 %r345,%r346,-8;
add.u64 %r417,%r345,8;
ld.u64 %r254,[%r345];
.loc 1 1407 9
mov.u32 %r255,%r704;
bra $L116;
$L117:
.loc 1 1007 10
ld.u32 %r370,[%r417];
add.u64 %r417,%r417,4;
.loc 1 1406 13
and.b32 %r708,%r248,64;
setp.eq.u32 %r709,%r708,0;
@ %r709 bra $L118;
cvt.u16.u32 %r710,%r370;
cvt.u64.u16 %r254,%r710;
.loc 1 1407 9
mov.u32 %r255,%r706;
bra $L116;
$L118:
.loc 1 1406 13
cvt.u64.u32 %r254,%r370;
.loc 1 1407 9
mov.u32 %r255,%r708;
bra $L116;
$L44:
.loc 1 1421 25
add.u64 %r361,%r417,7;
and.b64 %r357,%r361,-8;
add.u64 %r417,%r357,8;
.loc 1 1421 11
ld.u64 %r254,[%r357];
.loc 1 1424 10
or.b32 %r248,%r248,2;
.loc 1 1425 10
mov.u32 %r711,48;
st.u8 [%frame+216],%r711;
.loc 1 1426 10
mov.u32 %r712,120;
st.u8 [%frame+217],%r712;
.loc 1 1423 10
cvta.const.u64 %r256,$LC4;
.loc 1 1422 9
mov.u32 %r255,2;
.loc 1 1426 15
mov.u32 %r245,120;
.loc 1 1427 4
bra $L116;
$L42:
.loc 1 1432 7
add.u64 %r359,%r417,7;
and.b64 %r360,%r359,-8;
add.u64 %r417,%r360,8;
ld.u64 %r247,[%r360];
.loc 1 1436 9
mov.u32 %r713,0;
st.u8 [%frame+218],%r713;
.loc 1 1442 7
setp.ne.u64 %r714,%r247,0;
@ %r714 bra $L119;
.loc 1 1444 39
min.u32 %r226,%r251,6;
mov.u32 %r341,%r226;
.loc 1 1443 8
cvta.const.u64 %r247,$LC6;
bra $L60;
$L119:
.loc 1 1511 7
setp.eq.u32 %r715,%r251,-1;
@ %r715 bra $L120;
.loc 1 1517 15
cvt.s64.s32 %r719,%r251;
mov.u32 %r717,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r247;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r717;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r719;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r720,[%value_in];
}
.loc 1 1519 8
setp.ne.u64 %r721,%r720,0;
@ %r721 bra $L121;
.loc 1 1674 7
ld.s8 %r382,[%frame+218];
mov.u32 %r341,%r251;
mov.u32 %r226,%r251;
mov.u32 %r249,%r248;
.loc 1 932 9
cvt.u32.u64 %r251,%r720;
.loc 1 937 8
mov.u32 %r253,%r251;
bra $L77;
$L121:
.loc 1 1520 15
sub.u64 %r722,%r720,%r247;
.loc 1 1520 11
cvt.u32.u64 %r226,%r722;
.loc 1 1674 7
ld.s8 %r382,[%frame+218];
.loc 1 1673 10
max.s32 %r341,%r226,0;
mov.u32 %r249,%r248;
.loc 1 932 9
mov.u32 %r251,%r717;
.loc 1 937 8
mov.u32 %r253,%r251;
bra $L77;
$L120:
.loc 1 1524 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r247;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r724,[%value_in];
}
.loc 1 1524 10
cvt.u32.u64 %r226,%r724;
.loc 1 1674 7
ld.s8 %r382,[%frame+218];
.loc 1 1673 10
max.s32 %r341,%r226,0;
mov.u32 %r249,%r248;
.loc 1 932 9
mov.u32 %r251,0;
.loc 1 937 8
mov.u32 %r253,%r251;
bra $L77;
$L14:
.loc 1 1528 10
or.b32 %r248,%r248,16;
$L47:
.loc 1 1531 13
and.b32 %r725,%r248,32;
setp.eq.u32 %r726,%r725,0;
@ %r726 bra $L122;
add.u64 %r337,%r417,7;
and.b64 %r340,%r337,-8;
add.u64 %r417,%r340,8;
ld.u64 %r254,[%r340];
.loc 1 1532 9
mov.u32 %r255,1;
bra $L116;
$L122:
.loc 1 1531 13
and.b32 %r727,%r248,16;
setp.eq.u32 %r728,%r727,0;
@ %r728 bra $L123;
add.u64 %r348,%r417,7;
and.b64 %r350,%r348,-8;
add.u64 %r417,%r350,8;
ld.u64 %r254,[%r350];
.loc 1 1532 9
mov.u32 %r255,1;
bra $L116;
$L123:
.loc 1 1007 10
ld.u32 %r369,[%r417];
add.u64 %r417,%r417,4;
.loc 1 1531 13
and.b32 %r729,%r248,64;
setp.eq.u32 %r730,%r729,0;
@ %r730 bra $L124;
cvt.u16.u32 %r731,%r369;
cvt.u64.u16 %r254,%r731;
.loc 1 1532 9
mov.u32 %r255,1;
bra $L116;
$L124:
.loc 1 1531 13
cvt.u64.u32 %r254,%r369;
.loc 1 1532 9
mov.u32 %r255,1;
bra $L116;
$L39:
setp.eq.u32 %r732,%r275,0;
@ %r732 bra $L125;
cvt.u32.u32 %r733,%r277;
st.u8 [%frame+218],%r733;
$L125:
.loc 1 1535 10
cvta.const.u64 %r256,$LC5;
$L52:
.loc 1 1539 17
and.b32 %r734,%r248,32;
setp.eq.u32 %r735,%r734,0;
@ %r735 bra $L126;
add.u64 %r355,%r417,7;
and.b64 %r352,%r355,-8;
add.u64 %r417,%r352,8;
ld.u64 %r254,[%r352];
bra $L127;
$L126:
and.b32 %r736,%r248,16;
setp.eq.u32 %r737,%r736,0;
@ %r737 bra $L128;
add.u64 %r358,%r417,7;
and.b64 %r314,%r358,-8;
add.u64 %r417,%r314,8;
ld.u64 %r254,[%r314];
bra $L127;
$L128:
.loc 1 1007 10
ld.u32 %r368,[%r417];
add.u64 %r417,%r417,4;
.loc 1 1539 17
and.b32 %r738,%r248,64;
setp.eq.u32 %r739,%r738,0;
@ %r739 bra $L129;
cvt.u16.u32 %r740,%r368;
cvt.u64.u16 %r254,%r740;
bra $L127;
$L129:
cvt.u64.u32 %r254,%r368;
$L127:
.loc 1 1542 14
and.b32 %r741,%r248,1;
.loc 1 1542 7
setp.eq.u32 %r742,%r741,0;
@ %r742 bra $L254;
.loc 1 1542 20
setp.eq.u64 %r743,%r254,0;
@ %r743 bra $L255;
.loc 1 1543 11
mov.u32 %r744,48;
st.u8 [%frame+216],%r744;
.loc 1 1544 11
st.u8 [%frame+217],%r245;
.loc 1 1545 11
or.b32 %r248,%r248,2;
.loc 1 1540 9
mov.u32 %r255,2;
bra $L116;
$L254:
mov.u32 %r255,2;
bra $L116;
$L255:
mov.u32 %r255,2;
$L116:
.loc 1 1552 16
mov.u32 %r745,0;
st.u8 [%frame+218],%r745;
mov.u32 %r382,0;
$L67:
.loc 1 1558 14
setp.eq.u32 %r746,%r251,-1;
@ %r746 bra $L130;
.loc 1 1559 11
and.b32 %r249,%r248,-129;
.loc 1 1567 15
set.u32.ne.u64 %r748,%r254,0;
neg.s32 %r749,%r748;
.loc 1 1567 28
set.u32.ne.u32 %r751,%r251,0;
neg.s32 %r752,%r751;
.loc 1 1567 20
cvt.u16.u32 %r754,%r749;
cvt.u16.u32 %r755,%r752;
or.b16 %r753,%r754,%r755;
.loc 1 1567 7
cvt.u32.u16 %r756,%r753;
cvt.u16.u8 %r757,%r756;
setp.eq.u16 %r758,%r757,0;
@ %r758 bra $L131;
.loc 1 1559 11
mov.u32 %r248,%r249;
$L130:
setp.eq.u32 %r759,%r255,1;
@ %r759 bra $L132;
setp.eq.u32 %r760,%r255,2;
@ %r760 bra $L256;
mov.u64 %r247,%r1298;
$L134:
mov.u64 %r278,%r247;
.loc 1 1576 13
add.u64 %r247,%r247,-1;
.loc 1 1576 15
cvt.u16.u64 %r763,%r254;
and.b16 %r762,%r763,7;
add.u16 %r765,%r762,48;
cvt.u32.u16 %r767,%r765;
cvt.s32.s8 %r119,%r767;
.loc 1 1576 13
st.u8 [%r247],%r767;
.loc 1 1577 14
shr.u64 %r254,%r254,3;
.loc 1 1578 6
setp.ne.u64 %r769,%r254,0;
@ %r769 bra $L134;
.loc 1 1580 22
cvt.u16.u32 %r771,%r119;
set.u32.ne.u16 %r772,%r771,48;
neg.s32 %r773,%r772;
.loc 1 1580 9
cvt.u16.u32 %r776,%r248;
and.b16 %r775,%r776,1;
.loc 1 1580 22
cvt.u16.u32 %r779,%r773;
and.b16 %r778,%r779,%r775;
cvt.u32.u16 %r781,%r778;
cvt.u16.u8 %r782,%r781;
setp.ne.u16 %r783,%r782,0;
@ %r783 bra $L135;
.loc 1 1644 21
sub.u64 %r786,%r1298,%r247;
.loc 1 1644 9
cvt.u32.u64 %r226,%r786;
mov.u32 %r249,%r248;
bra $L136;
$L135:
.loc 1 1581 13
add.u64 %r295,%r278,-2;
mov.u32 %r787,48;
st.u8 [%r247+-1],%r787;
.loc 1 1644 21
sub.u64 %r790,%r1298,%r295;
.loc 1 1644 9
cvt.u32.u64 %r226,%r790;
mov.u32 %r249,%r248;
.loc 1 1581 13
mov.u64 %r247,%r295;
bra $L136;
$L263:
.loc 1 1559 11
mov.u32 %r248,%r249;
$L132:
.loc 1 1586 9
setp.gt.u64 %r791,%r254,9;
@ %r791 bra $L257;
.loc 1 1587 15
cvt.u16.u64 %r794,%r254;
add.u16 %r793,%r794,48;
.loc 1 1587 13
cvt.u32.u16 %r795,%r793;
st.u8 [%frame+167],%r795;
.loc 1 1588 7
mov.u32 %r249,%r248;
mov.u32 %r226,1;
.loc 1 1587 13
add.u64 %r247,%frame,167;
.loc 1 1588 7
bra $L136;
$L257:
.loc 1 1566 7
mov.u64 %r247,%r1298;
$L137:
.loc 1 1594 14
add.u64 %r247,%r247,-1;
.loc 1 1594 16
rem.u64 %r797,%r254,10;
cvt.u16.u64 %r800,%r797;
add.u16 %r799,%r800,48;
.loc 1 1594 14
cvt.u32.u16 %r801,%r799;
st.u8 [%r247],%r801;
mov.u64 %r242,%r254;
.loc 1 1615 15
div.u64 %r254,%r254,10;
.loc 1 1616 6
setp.gt.u64 %r804,%r242,9;
@ %r804 bra $L137;
.loc 1 1644 21
sub.u64 %r807,%r1298,%r247;
.loc 1 1644 9
cvt.u32.u64 %r226,%r807;
mov.u32 %r249,%r248;
bra $L136;
$L256:
mov.u64 %r247,%r1298;
$L133:
.loc 1 1621 13
add.u64 %r247,%r247,-1;
.loc 1 1621 28
and.b64 %r808,%r254,15;
.loc 1 1621 20
add.u64 %r809,%r256,%r808;
.loc 1 1621 13
ld.u8 %r810,[%r809];
st.u8 [%r247],%r810;
.loc 1 1622 14
shr.u64 %r254,%r254,4;
.loc 1 1623 6
setp.ne.u64 %r811,%r254,0;
@ %r811 bra $L133;
.loc 1 1644 21
sub.u64 %r814,%r1298,%r247;
.loc 1 1644 9
cvt.u32.u64 %r226,%r814;
mov.u32 %r249,%r248;
bra $L136;
$L131:
.loc 1 1641 32
setp.ne.u32 %r815,%r255,0;
@ %r815 bra $L258;
.loc 1 1641 55
and.b32 %r226,%r248,1;
.loc 1 1641 45
setp.eq.u32 %r816,%r226,0;
@ %r816 bra $L259;
.loc 1 1642 32
mov.u32 %r817,48;
st.u8 [%frame+167],%r817;
mov.u32 %r251,%r255;
add.u64 %r247,%frame,167;
bra $L136;
$L258:
mov.u32 %r251,0;
mov.u32 %r226,%r251;
.loc 1 1566 7
add.u64 %r247,%frame,168;
bra $L136;
$L259:
mov.u32 %r251,%r255;
add.u64 %r247,%frame,168;
$L136:
.loc 1 1673 10
max.s32 %r341,%r251,%r226;
.loc 1 937 8
mov.u32 %r253,0;
bra $L77;
$L364:
setp.eq.u32 %r818,%r275,0;
@ %r818 bra $L138;
$L237:
cvt.u32.u32 %r819,%r277;
st.u8 [%frame+218],%r819;
$L138:
.loc 1 1648 7
setp.eq.u32 %r820,%r245,0;
@ %r820 bra $L11;
$L238:
.loc 1 1652 8
st.u8 [%frame+128],%r245;
.loc 1 1654 9
mov.u32 %r821,0;
st.u8 [%frame+218],%r821;
.loc 1 1655 4
mov.u32 %r341,1;
.loc 1 1653 9
mov.u32 %r226,%r341;
.loc 1 1651 7
add.u64 %r247,%frame,128;
.loc 1 1655 4
bra $L60;
$L108:
.loc 1 1674 7
ld.s8 %r382,[%frame+218];
.loc 1 932 9
mov.u32 %r251,%r219;
$L77:
.loc 1 1674 6
setp.eq.u32 %r822,%r382,0;
@ %r822 bra $L139;
$L109:
.loc 1 1675 10
add.u32 %r341,%r341,1;
$L139:
.loc 1 1676 13
and.b32 %r132,%r249,2;
.loc 1 1676 6
setp.eq.u32 %r1274,%r132,0;
@ %r1274 bra $L140;
.loc 1 1677 10
add.u32 %r341,%r341,2;
$L140:
.loc 1 1680 14
and.b32 %r133,%r249,132;
.loc 1 1685 4
ld.u64 %r388,[%frame+184];
.loc 1 1680 6
setp.ne.u32 %r824,%r133,0;
@ %r824 bra $L141;
.loc 1 1681 4
sub.u32 %r141,%r250,%r341;
setp.le.s32 %r825,%r141,0;
@ %r825 bra $L141;
ld.u32 %r387,[%frame+176];
setp.le.s32 %r826,%r141,16;
@ ! %r826 bra $L366;
cvta.const.u64 %r1273,blanks$1;
bra $L142;
$L366:
cvta.const.u64 %r1273,blanks$1;
$L145:
st.u64 [%r257],%r1273;
mov.u64 %r828,16;
st.u64 [%r257+8],%r828;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r387,%r387,1;
st.u32 [%frame+176],%r387;
setp.gt.s32 %r829,%r387,7;
@ %r829 bra $L143;
add.u64 %r257,%r257,16;
bra $L144;
$L143:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r834,[%value_in];
}
setp.ne.u32 %r835,%r834,0;
@ %r835 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r387,[%frame+176];
mov.u64 %r257,%frame;
$L144:
add.u32 %r141,%r141,-16;
setp.gt.s32 %r836,%r141,16;
@ %r836 bra $L145;
$L142:
st.u64 [%r257],%r1273;
cvt.s64.s32 %r135,%r141;
st.u64 [%r257+8],%r135;
add.u64 %r388,%r388,%r135;
st.u64 [%frame+184],%r388;
add.u32 %r136,%r387,1;
st.u32 [%frame+176],%r136;
setp.gt.s32 %r838,%r136,7;
@ %r838 bra $L146;
add.u64 %r257,%r257,16;
bra $L141;
$L146:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r843,[%value_in];
}
setp.ne.u32 %r844,%r843,0;
@ %r844 bra $L10;
.loc 1 1685 4
ld.u64 %r388,[%frame+184];
.loc 1 1681 4
mov.u64 %r257,%frame;
$L141:
.loc 1 1684 6
ld.s8 %r846,[%frame+218];
cvt.u16.u32 %r845,%r846;
setp.eq.u16 %r847,%r845,0;
@ %r847 bra $L147;
.loc 1 1685 4
st.u64 [%r257],%r1301;
mov.u64 %r849,1;
st.u64 [%r257+8],%r849;
add.u64 %r388,%r388,1;
st.u64 [%frame+184],%r388;
ld.u32 %r850,[%frame+176];
add.u32 %r140,%r850,1;
st.u32 [%frame+176],%r140;
setp.gt.s32 %r851,%r140,7;
@ %r851 bra $L148;
add.u64 %r257,%r257,16;
bra $L147;
$L148:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r856,[%value_in];
}
setp.ne.u32 %r857,%r856,0;
@ %r857 bra $L10;
.loc 1 1687 4
ld.u64 %r388,[%frame+184];
.loc 1 1685 4
mov.u64 %r257,%frame;
$L147:
.loc 1 1686 6
@ %r1274 bra $L149;
.loc 1 1687 4
st.u64 [%r257],%r1300;
mov.u64 %r860,2;
st.u64 [%r257+8],%r860;
add.u64 %r388,%r388,2;
st.u64 [%frame+184],%r388;
ld.u32 %r861,[%frame+176];
add.u32 %r144,%r861,1;
st.u32 [%frame+176],%r144;
setp.gt.s32 %r862,%r144,7;
@ %r862 bra $L150;
add.u64 %r257,%r257,16;
bra $L149;
$L150:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r867,[%value_in];
}
setp.ne.u32 %r868,%r867,0;
@ %r868 bra $L10;
.loc 1 1699 4
ld.u64 %r388,[%frame+184];
.loc 1 1687 4
mov.u64 %r257,%frame;
$L149:
.loc 1 1690 6
setp.ne.u32 %r869,%r133,128;
@ %r869 bra $L151;
.loc 1 1691 4
sub.u32 %r305,%r250,%r341;
setp.le.s32 %r870,%r305,0;
@ %r870 bra $L151;
ld.u32 %r389,[%frame+176];
setp.le.s32 %r871,%r305,16;
@ ! %r871 bra $L367;
cvta.const.u64 %r1272,zeroes$0;
bra $L152;
$L367:
cvta.const.u64 %r1272,zeroes$0;
$L155:
st.u64 [%r257],%r1272;
mov.u64 %r873,16;
st.u64 [%r257+8],%r873;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r389,%r389,1;
st.u32 [%frame+176],%r389;
setp.gt.s32 %r874,%r389,7;
@ %r874 bra $L153;
add.u64 %r257,%r257,16;
bra $L154;
$L153:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r879,[%value_in];
}
setp.ne.u32 %r880,%r879,0;
@ %r880 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r389,[%frame+176];
mov.u64 %r257,%frame;
$L154:
add.u32 %r305,%r305,-16;
setp.gt.s32 %r881,%r305,16;
@ %r881 bra $L155;
$L152:
st.u64 [%r257],%r1272;
cvt.s64.s32 %r148,%r305;
st.u64 [%r257+8],%r148;
add.u64 %r388,%r388,%r148;
st.u64 [%frame+184],%r388;
add.u32 %r150,%r389,1;
st.u32 [%frame+176],%r150;
setp.gt.s32 %r883,%r150,7;
@ %r883 bra $L156;
add.u64 %r257,%r257,16;
bra $L151;
$L156:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r888,[%value_in];
}
setp.ne.u32 %r889,%r888,0;
@ %r889 bra $L10;
.loc 1 1699 4
ld.u64 %r388,[%frame+184];
.loc 1 1691 4
mov.u64 %r257,%frame;
$L151:
.loc 1 1694 3
sub.u32 %r284,%r251,%r226;
setp.le.s32 %r890,%r284,0;
@ %r890 bra $L157;
ld.u32 %r390,[%frame+176];
setp.le.s32 %r891,%r284,16;
@ ! %r891 bra $L368;
cvta.const.u64 %r1272,zeroes$0;
bra $L158;
$L368:
cvta.const.u64 %r1272,zeroes$0;
$L161:
st.u64 [%r257],%r1272;
mov.u64 %r893,16;
st.u64 [%r257+8],%r893;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r390,%r390,1;
st.u32 [%frame+176],%r390;
setp.gt.s32 %r894,%r390,7;
@ %r894 bra $L159;
add.u64 %r257,%r257,16;
bra $L160;
$L159:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r899,[%value_in];
}
setp.ne.u32 %r900,%r899,0;
@ %r900 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r390,[%frame+176];
mov.u64 %r257,%frame;
$L160:
add.u32 %r284,%r284,-16;
setp.gt.s32 %r901,%r284,16;
@ %r901 bra $L161;
$L158:
st.u64 [%r257],%r1272;
cvt.s64.s32 %r154,%r284;
st.u64 [%r257+8],%r154;
add.u64 %r388,%r388,%r154;
st.u64 [%frame+184],%r388;
add.u32 %r155,%r390,1;
st.u32 [%frame+176],%r155;
setp.gt.s32 %r903,%r155,7;
@ %r903 bra $L162;
add.u64 %r257,%r257,16;
bra $L157;
$L162:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r908,[%value_in];
}
setp.ne.u32 %r909,%r908,0;
@ %r909 bra $L10;
.loc 1 1699 4
ld.u64 %r388,[%frame+184];
.loc 1 1694 3
mov.u64 %r257,%frame;
$L157:
.loc 1 1698 14
and.b32 %r910,%r249,256;
.loc 1 1698 6
setp.ne.u32 %r911,%r910,0;
@ %r911 bra $L163;
.loc 1 1699 4
st.u64 [%r257],%r247;
cvt.s64.s32 %r158,%r226;
st.u64 [%r257+8],%r158;
add.u64 %r388,%r388,%r158;
st.u64 [%frame+184],%r388;
ld.u32 %r912,[%frame+176];
add.u32 %r160,%r912,1;
st.u32 [%frame+176],%r160;
setp.gt.s32 %r913,%r160,7;
@ %r913 bra $L164;
add.u64 %r257,%r257,16;
bra $L165;
$L164:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r918,[%value_in];
}
setp.ne.u32 %r919,%r918,0;
@ %r919 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1699 4
mov.u64 %r257,%frame;
bra $L165;
$L163:
.loc 1 1701 7
setp.le.s32 %r920,%r245,101;
@ %r920 bra $L166;
.loc 1 1702 8
setp.neu.f64 %r921,%r28,0d0000000000000000;
@ %r921 bra $L167;
.loc 1 1704 6
cvta.const.u64 %r922,$LC7;
st.u64 [%r257],%r922;
mov.u64 %r923,1;
st.u64 [%r257+8],%r923;
add.u64 %r388,%r388,1;
st.u64 [%frame+184],%r388;
ld.u32 %r924,[%frame+176];
add.u32 %r163,%r924,1;
st.u32 [%frame+176],%r163;
setp.gt.s32 %r925,%r163,7;
@ %r925 bra $L168;
add.u64 %r257,%r257,16;
bra $L169;
$L168:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r930,[%value_in];
}
setp.ne.u32 %r931,%r930,0;
@ %r931 bra $L10;
.loc 1 1706 7
ld.u64 %r388,[%frame+184];
.loc 1 1704 6
mov.u64 %r257,%frame;
$L169:
.loc 1 1705 9
ld.u32 %r932,[%frame+212];
setp.lt.s32 %r933,%r932,%r68;
@ %r933 bra $L170;
.loc 1 1705 31
and.b32 %r934,%r249,1;
.loc 1 1705 22
setp.eq.u32 %r935,%r934,0;
@ %r935 bra $L165;
$L170:
.loc 1 1706 7
st.u64 [%r257],%r265;
st.u64 [%r257+8],%r430;
add.u64 %r388,%r388,%r430;
st.u64 [%frame+184],%r388;
ld.u32 %r936,[%frame+176];
add.u32 %r169,%r936,1;
st.u32 [%frame+176],%r169;
setp.gt.s32 %r937,%r169,7;
@ %r937 bra $L171;
add.u64 %r257,%r257,16;
bra $L172;
$L171:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r942,[%value_in];
}
setp.ne.u32 %r943,%r942,0;
@ %r943 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1706 7
mov.u64 %r257,%frame;
$L172:
.loc 1 1707 7
add.u32 %r120,%r68,-1;
setp.le.s32 %r944,%r120,0;
@ %r944 bra $L165;
ld.u32 %r404,[%frame+176];
setp.le.s32 %r945,%r120,16;
@ ! %r945 bra $L369;
cvta.const.u64 %r1272,zeroes$0;
bra $L173;
$L369:
cvta.const.u64 %r1272,zeroes$0;
$L176:
st.u64 [%r257],%r1272;
mov.u64 %r947,16;
st.u64 [%r257+8],%r947;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r404,%r404,1;
st.u32 [%frame+176],%r404;
setp.gt.s32 %r948,%r404,7;
@ %r948 bra $L174;
add.u64 %r257,%r257,16;
bra $L175;
$L174:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r953,[%value_in];
}
setp.ne.u32 %r954,%r953,0;
@ %r954 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r404,[%frame+176];
mov.u64 %r257,%frame;
$L175:
add.u32 %r120,%r120,-16;
setp.gt.s32 %r955,%r120,16;
@ %r955 bra $L176;
$L173:
st.u64 [%r257],%r1272;
cvt.s64.s32 %r172,%r120;
st.u64 [%r257+8],%r172;
add.u64 %r388,%r388,%r172;
st.u64 [%frame+184],%r388;
add.u32 %r173,%r404,1;
st.u32 [%frame+176],%r173;
setp.gt.s32 %r957,%r173,7;
@ %r957 bra $L177;
add.u64 %r257,%r257,16;
bra $L165;
$L177:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r962,[%value_in];
}
setp.ne.u32 %r963,%r962,0;
@ %r963 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1707 7
mov.u64 %r257,%frame;
bra $L165;
$L167:
.loc 1 1709 21
ld.u32 %r175,[%frame+212];
.loc 1 1709 15
setp.gt.s32 %r964,%r175,0;
@ %r964 bra $L178;
.loc 1 1710 6
cvta.const.u64 %r965,$LC7;
st.u64 [%r257],%r965;
mov.u64 %r966,1;
st.u64 [%r257+8],%r966;
add.u64 %r388,%r388,1;
st.u64 [%frame+184],%r388;
ld.u32 %r967,[%frame+176];
add.u32 %r177,%r967,1;
st.u32 [%frame+176],%r177;
setp.gt.s32 %r968,%r177,7;
@ %r968 bra $L179;
add.u64 %r257,%r257,16;
bra $L180;
$L179:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r973,[%value_in];
}
setp.ne.u32 %r974,%r973,0;
@ %r974 bra $L10;
.loc 1 1711 10
ld.u32 %r175,[%frame+212];
.loc 1 1712 7
ld.u64 %r388,[%frame+184];
.loc 1 1710 6
mov.u64 %r257,%frame;
$L180:
.loc 1 1711 15
or.b32 %r975,%r68,%r175;
setp.ne.u32 %r976,%r975,0;
@ %r976 bra $L181;
.loc 1 1711 32
and.b32 %r977,%r249,1;
.loc 1 1711 23
setp.ne.u32 %r978,%r977,0;
@ %r978 bra $L182;
bra $L165;
$L181:
.loc 1 1712 7
st.u64 [%r257],%r265;
st.u64 [%r257+8],%r430;
add.u64 %r402,%r430,%r388;
st.u64 [%frame+184],%r402;
ld.u32 %r979,[%frame+176];
add.u32 %r403,%r979,1;
st.u32 [%frame+176],%r403;
setp.gt.s32 %r980,%r403,7;
@ %r980 bra $L183;
add.u64 %r259,%r257,16;
bra $L184;
$L183:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r985,[%value_in];
}
setp.ne.u32 %r986,%r985,0;
@ %r986 bra $L10;
.loc 1 1713 7
ld.u32 %r175,[%frame+212];
.loc 1 1714 7
ld.u64 %r402,[%frame+184];
ld.u32 %r403,[%frame+176];
.loc 1 1712 7
mov.u64 %r259,%frame;
$L184:
.loc 1 1713 7
setp.ge.s32 %r987,%r175,0;
@ %r987 bra $L185;
neg.s32 %r279,%r175;
setp.ge.s32 %r988,%r175,-16;
@ ! %r988 bra $L370;
cvta.const.u64 %r1272,zeroes$0;
bra $L186;
$L370:
cvta.const.u64 %r1272,zeroes$0;
$L189:
st.u64 [%r259],%r1272;
mov.u64 %r990,16;
st.u64 [%r259+8],%r990;
add.u64 %r402,%r402,16;
st.u64 [%frame+184],%r402;
add.u32 %r403,%r403,1;
st.u32 [%frame+176],%r403;
setp.gt.s32 %r991,%r403,7;
@ %r991 bra $L187;
add.u64 %r259,%r259,16;
bra $L188;
$L187:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r996,[%value_in];
}
setp.ne.u32 %r997,%r996,0;
@ %r997 bra $L10;
ld.u64 %r402,[%frame+184];
ld.u32 %r403,[%frame+176];
mov.u64 %r259,%frame;
$L188:
add.u32 %r279,%r279,-16;
setp.gt.s32 %r998,%r279,16;
@ %r998 bra $L189;
$L186:
st.u64 [%r259],%r1272;
cvt.s64.s32 %r184,%r279;
st.u64 [%r259+8],%r184;
add.u64 %r402,%r402,%r184;
st.u64 [%frame+184],%r402;
add.u32 %r403,%r403,1;
st.u32 [%frame+176],%r403;
setp.gt.s32 %r1000,%r403,7;
@ %r1000 bra $L190;
add.u64 %r259,%r259,16;
bra $L185;
$L190:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1005,[%value_in];
}
setp.ne.u32 %r1006,%r1005,0;
@ %r1006 bra $L10;
.loc 1 1714 7
ld.u64 %r402,[%frame+184];
ld.u32 %r403,[%frame+176];
.loc 1 1713 7
mov.u64 %r259,%frame;
$L185:
.loc 1 1714 7
st.u64 [%r259],%r247;
cvt.s64.s32 %r186,%r68;
st.u64 [%r259+8],%r186;
add.u64 %r388,%r186,%r402;
st.u64 [%frame+184],%r388;
add.u32 %r187,%r403,1;
st.u32 [%frame+176],%r187;
setp.gt.s32 %r1007,%r187,7;
@ %r1007 bra $L191;
add.u64 %r257,%r259,16;
bra $L165;
$L191:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1012,[%value_in];
}
setp.ne.u32 %r1013,%r1012,0;
@ %r1013 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1714 7
mov.u64 %r257,%frame;
bra $L165;
$L178:
min.s32 %r25,%r253,%r68;
.loc 1 1718 6
setp.le.s32 %r1014,%r25,0;
@ %r1014 bra $L192;
st.u64 [%r257],%r247;
cvt.s64.s32 %r189,%r25;
st.u64 [%r257+8],%r189;
add.u64 %r388,%r388,%r189;
st.u64 [%frame+184],%r388;
ld.u32 %r1015,[%frame+176];
add.u32 %r192,%r1015,1;
st.u32 [%frame+176],%r192;
setp.gt.s32 %r1016,%r192,7;
@ %r1016 bra $L193;
add.u64 %r257,%r257,16;
bra $L192;
$L193:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1021,[%value_in];
}
setp.ne.u32 %r1022,%r1021,0;
@ %r1022 bra $L10;
.loc 1 1740 10
ld.u64 %r388,[%frame+184];
.loc 1 1718 6
mov.u64 %r257,%frame;
$L192:
max.s32 %r194,%r25,0;
sub.u32 %r310,%r253,%r194;
setp.le.s32 %r1023,%r310,0;
@ %r1023 bra $L194;
ld.u32 %r399,[%frame+176];
setp.le.s32 %r1024,%r310,16;
@ ! %r1024 bra $L371;
cvta.const.u64 %r1272,zeroes$0;
bra $L195;
$L371:
cvta.const.u64 %r1272,zeroes$0;
$L198:
st.u64 [%r257],%r1272;
mov.u64 %r1026,16;
st.u64 [%r257+8],%r1026;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r399,%r399,1;
st.u32 [%frame+176],%r399;
setp.gt.s32 %r1027,%r399,7;
@ %r1027 bra $L196;
add.u64 %r257,%r257,16;
bra $L197;
$L196:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1032,[%value_in];
}
setp.ne.u32 %r1033,%r1032,0;
@ %r1033 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r399,[%frame+176];
mov.u64 %r257,%frame;
$L197:
add.u32 %r310,%r310,-16;
setp.gt.s32 %r1034,%r310,16;
@ %r1034 bra $L198;
$L195:
st.u64 [%r257],%r1272;
cvt.s64.s32 %r196,%r310;
st.u64 [%r257+8],%r196;
add.u64 %r388,%r388,%r196;
st.u64 [%frame+184],%r388;
add.u32 %r197,%r399,1;
st.u32 [%frame+176],%r197;
setp.gt.s32 %r1036,%r197,7;
@ %r1036 bra $L199;
add.u64 %r257,%r257,16;
bra $L194;
$L199:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1041,[%value_in];
}
setp.ne.u32 %r1042,%r1041,0;
@ %r1042 bra $L10;
.loc 1 1740 10
ld.u64 %r388,[%frame+184];
.loc 1 1718 6
mov.u64 %r257,%frame;
$L194:
.loc 1 1739 15
ld.u32 %r201,[%frame+212];
.loc 1 1739 9
setp.lt.s32 %r1043,%r201,%r68;
@ %r1043 bra $L200;
.loc 1 1739 31
and.b32 %r1044,%r249,1;
.loc 1 1739 22
setp.eq.u32 %r1045,%r1044,0;
@ %r1045 bra $L201;
$L200:
.loc 1 1740 10
st.u64 [%r257],%r265;
st.u64 [%r257+8],%r430;
add.u64 %r388,%r388,%r430;
st.u64 [%frame+184],%r388;
ld.u32 %r1046,[%frame+176];
add.u32 %r204,%r1046,1;
st.u32 [%frame+176],%r204;
setp.gt.s32 %r1047,%r204,7;
@ %r1047 bra $L202;
add.u64 %r257,%r257,16;
bra $L203;
$L202:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1052,[%value_in];
}
setp.ne.u32 %r1053,%r1052,0;
@ %r1053 bra $L10;
.loc 1 1741 6
ld.u32 %r201,[%frame+212];
ld.u64 %r388,[%frame+184];
.loc 1 1740 10
mov.u64 %r257,%frame;
$L203:
.loc 1 1741 6
sub.u32 %r312,%r68,%r253;
sub.u32 %r207,%r68,%r201;
min.s32 %r24,%r207,%r312;
setp.le.s32 %r1054,%r24,0;
@ %r1054 bra $L204;
.loc 1 1720 9
cvt.s64.s32 %r1055,%r253;
add.u64 %r1056,%r247,%r1055;
.loc 1 1741 6
st.u64 [%r257],%r1056;
cvt.s64.s32 %r208,%r24;
st.u64 [%r257+8],%r208;
add.u64 %r388,%r388,%r208;
st.u64 [%frame+184],%r388;
ld.u32 %r1057,[%frame+176];
add.u32 %r210,%r1057,1;
st.u32 [%frame+176],%r210;
setp.gt.s32 %r1058,%r210,7;
@ %r1058 bra $L205;
add.u64 %r257,%r257,16;
bra $L204;
$L205:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1063,[%value_in];
}
setp.ne.u32 %r1064,%r1063,0;
@ %r1064 bra $L10;
ld.u32 %r1065,[%frame+212];
sub.u32 %r207,%r68,%r1065;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1741 6
mov.u64 %r257,%frame;
$L204:
max.s32 %r213,%r24,0;
sub.u32 %r313,%r207,%r213;
setp.le.s32 %r1066,%r313,0;
@ %r1066 bra $L165;
ld.u32 %r401,[%frame+176];
setp.le.s32 %r1067,%r313,16;
@ ! %r1067 bra $L372;
cvta.const.u64 %r1272,zeroes$0;
bra $L206;
$L372:
cvta.const.u64 %r1272,zeroes$0;
$L209:
st.u64 [%r257],%r1272;
mov.u64 %r1069,16;
st.u64 [%r257+8],%r1069;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r401,%r401,1;
st.u32 [%frame+176],%r401;
setp.gt.s32 %r1070,%r401,7;
@ %r1070 bra $L207;
add.u64 %r257,%r257,16;
bra $L208;
$L207:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1075,[%value_in];
}
setp.ne.u32 %r1076,%r1075,0;
@ %r1076 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r401,[%frame+176];
mov.u64 %r257,%frame;
$L208:
add.u32 %r313,%r313,-16;
setp.gt.s32 %r1077,%r313,16;
@ %r1077 bra $L209;
$L206:
st.u64 [%r257],%r1272;
cvt.s64.s32 %r216,%r313;
st.u64 [%r257+8],%r216;
add.u64 %r388,%r388,%r216;
st.u64 [%frame+184],%r388;
add.u32 %r217,%r401,1;
st.u32 [%frame+176],%r217;
setp.gt.s32 %r1079,%r217,7;
@ %r1079 bra $L210;
add.u64 %r257,%r257,16;
bra $L165;
$L210:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1084,[%value_in];
}
setp.ne.u32 %r1085,%r1084,0;
@ %r1085 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1741 6
mov.u64 %r257,%frame;
bra $L165;
$L166:
.loc 1 1704 6
add.u64 %r222,%r388,1;
.loc 1 1699 4
ld.u32 %r407,[%frame+176];
add.u32 %r391,%r407,1;
add.u64 %r261,%r257,16;
.loc 1 1745 8
setp.gt.s32 %r1086,%r68,1;
@ %r1086 bra $L211;
.loc 1 1745 27
and.b32 %r1087,%r249,1;
.loc 1 1745 18
setp.eq.u32 %r1088,%r1087,0;
@ %r1088 bra $L212;
$L211:
.loc 1 1746 6
st.u64 [%r257],%r247;
mov.u64 %r1089,1;
st.u64 [%r257+8],%r1089;
st.u64 [%frame+184],%r222;
st.u32 [%frame+176],%r391;
setp.le.s32 %r1090,%r391,7;
@ %r1090 bra $L213;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1095,[%value_in];
}
setp.ne.u32 %r1096,%r1095,0;
@ %r1096 bra $L10;
.loc 1 1748 6
ld.u64 %r222,[%frame+184];
ld.u32 %r391,[%frame+176];
.loc 1 1746 6
mov.u64 %r261,%frame;
$L213:
.loc 1 1748 6
st.u64 [%r261],%r265;
st.u64 [%r261+8],%r430;
add.u64 %r222,%r222,%r430;
st.u64 [%frame+184],%r222;
add.u32 %r393,%r391,1;
st.u32 [%frame+176],%r393;
setp.gt.s32 %r1097,%r393,7;
@ %r1097 bra $L214;
add.u64 %r261,%r261,16;
bra $L215;
$L214:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1102,[%value_in];
}
setp.ne.u32 %r1103,%r1102,0;
@ %r1103 bra $L10;
.loc 1 1750 7
ld.u64 %r222,[%frame+184];
ld.u32 %r393,[%frame+176];
.loc 1 1748 6
mov.u64 %r261,%frame;
$L215:
.loc 1 1750 7
add.u32 %r392,%r393,1;
mov.u32 %r1270,%r392;
.loc 1 1707 7
add.u32 %r308,%r68,-1;
.loc 1 1750 7
add.u64 %r257,%r261,16;
.loc 1 1749 9
setp.eq.f64 %r1104,%r28,0d0000000000000000;
@ %r1104 bra $L216;
.loc 1 1747 8
add.u64 %r1105,%r247,1;
.loc 1 1750 7
st.u64 [%r261],%r1105;
cvt.s64.s32 %r224,%r308;
st.u64 [%r261+8],%r224;
add.u64 %r222,%r222,%r224;
st.u64 [%frame+184],%r222;
st.u32 [%frame+176],%r392;
setp.gt.s32 %r1106,%r392,7;
@ %r1106 bra $L217;
.loc 1 1756 5
add.u32 %r392,%r393,2;
add.u64 %r398,%r261,32;
.loc 1 1750 7
mov.u64 %r261,%r257;
.loc 1 1756 5
mov.u64 %r257,%r398;
bra $L218;
$L217:
.loc 1 1750 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1111,[%value_in];
}
setp.ne.u32 %r1112,%r1111,0;
@ %r1112 bra $L10;
.loc 1 1756 5
ld.u64 %r222,[%frame+184];
ld.u32 %r1113,[%frame+176];
add.u32 %r392,%r1113,1;
add.u64 %r257,%frame,16;
.loc 1 1750 7
mov.u64 %r261,%frame;
bra $L218;
$L216:
.loc 1 1753 7
setp.le.s32 %r1114,%r308,0;
@ %r1114 bra $L218;
setp.le.s32 %r1115,%r308,16;
@ %r1115 bra $L260;
cvta.const.u64 %r1272,zeroes$0;
$L222:
st.u64 [%r261],%r1272;
mov.u64 %r1117,16;
st.u64 [%r261+8],%r1117;
add.u64 %r222,%r222,16;
st.u64 [%frame+184],%r222;
mov.u32 %r393,%r1270;
st.u32 [%frame+176],%r393;
setp.gt.s32 %r1118,%r393,7;
@ %r1118 bra $L220;
add.u64 %r261,%r261,16;
bra $L221;
$L220:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1123,[%value_in];
}
setp.ne.u32 %r1124,%r1123,0;
@ %r1124 bra $L10;
ld.u64 %r222,[%frame+184];
ld.u32 %r393,[%frame+176];
mov.u64 %r261,%frame;
$L221:
add.u32 %r308,%r308,-16;
setp.gt.s32 %r1125,%r308,16;
@ ! %r1125 bra $L373;
add.u32 %r1270,%r393,1;
bra $L222;
$L373:
add.u32 %r392,%r393,1;
add.u64 %r394,%r261,16;
bra $L219;
$L260:
mov.u64 %r394,%r257;
cvta.const.u64 %r1272,zeroes$0;
$L219:
st.u64 [%r261],%r1272;
cvt.s64.s32 %r228,%r308;
st.u64 [%r261+8],%r228;
add.u64 %r222,%r222,%r228;
st.u64 [%frame+184],%r222;
st.u32 [%frame+176],%r392;
setp.gt.s32 %r1127,%r392,7;
@ %r1127 bra $L223;
.loc 1 1756 5
add.u32 %r392,%r392,1;
add.u64 %r257,%r394,16;
.loc 1 1753 7
mov.u64 %r261,%r394;
bra $L218;
$L223:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1132,[%value_in];
}
setp.ne.u32 %r1133,%r1132,0;
@ %r1133 bra $L10;
.loc 1 1756 5
ld.u64 %r222,[%frame+184];
ld.u32 %r1134,[%frame+176];
add.u32 %r392,%r1134,1;
add.u64 %r257,%frame,16;
.loc 1 1753 7
mov.u64 %r261,%frame;
bra $L218;
$L212:
.loc 1 1755 6
st.u64 [%r257],%r247;
mov.u64 %r1135,1;
st.u64 [%r257+8],%r1135;
st.u64 [%frame+184],%r222;
st.u32 [%frame+176],%r391;
setp.gt.s32 %r1136,%r391,7;
@ %r1136 bra $L224;
.loc 1 1756 5
add.u32 %r392,%r407,2;
add.u64 %r257,%r257,32;
bra $L218;
$L224:
.loc 1 1755 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1141,[%value_in];
}
setp.ne.u32 %r1142,%r1141,0;
@ %r1142 bra $L10;
.loc 1 1756 5
ld.u64 %r222,[%frame+184];
ld.u32 %r1143,[%frame+176];
add.u32 %r392,%r1143,1;
add.u64 %r257,%frame,16;
.loc 1 1755 6
mov.u64 %r261,%frame;
$L218:
.loc 1 1756 5
st.u64 [%r261],%r1299;
cvt.s64.s32 %r231,%r252;
st.u64 [%r261+8],%r231;
add.u64 %r388,%r231,%r222;
st.u64 [%frame+184],%r388;
st.u32 [%frame+176],%r392;
setp.le.s32 %r1145,%r392,7;
@ %r1145 bra $L165;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1150,[%value_in];
}
setp.ne.u32 %r1151,%r1150,0;
@ %r1151 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
.loc 1 1756 5
mov.u64 %r257,%frame;
$L165:
.loc 1 1763 13
and.b32 %r1152,%r249,4;
.loc 1 1763 6
setp.eq.u32 %r1153,%r1152,0;
@ %r1153 bra $L225;
.loc 1 1764 4
sub.u32 %r190,%r250,%r341;
setp.le.s32 %r1154,%r190,0;
@ %r1154 bra $L225;
ld.u32 %r405,[%frame+176];
setp.le.s32 %r1155,%r190,16;
@ ! %r1155 bra $L374;
cvta.const.u64 %r1273,blanks$1;
bra $L226;
$L374:
cvta.const.u64 %r1273,blanks$1;
$L229:
st.u64 [%r257],%r1273;
mov.u64 %r1157,16;
st.u64 [%r257+8],%r1157;
add.u64 %r388,%r388,16;
st.u64 [%frame+184],%r388;
add.u32 %r405,%r405,1;
st.u32 [%frame+176],%r405;
setp.gt.s32 %r1158,%r405,7;
@ %r1158 bra $L227;
add.u64 %r257,%r257,16;
bra $L228;
$L227:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1163,[%value_in];
}
setp.ne.u32 %r1164,%r1163,0;
@ %r1164 bra $L10;
ld.u64 %r388,[%frame+184];
ld.u32 %r405,[%frame+176];
mov.u64 %r257,%frame;
$L228:
add.u32 %r190,%r190,-16;
setp.gt.s32 %r1165,%r190,16;
@ %r1165 bra $L229;
$L226:
st.u64 [%r257],%r1273;
cvt.s64.s32 %r235,%r190;
st.u64 [%r257+8],%r235;
add.u64 %r388,%r388,%r235;
st.u64 [%frame+184],%r388;
add.u32 %r236,%r405,1;
st.u32 [%frame+176],%r236;
setp.le.s32 %r1167,%r236,7;
@ %r1167 bra $L225;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1172,[%value_in];
}
setp.ne.u32 %r1173,%r1172,0;
@ %r1173 bra $L10;
.loc 1 1769 3
ld.u64 %r388,[%frame+184];
$L225:
.loc 1 1767 33
max.s32 %r1174,%r250,%r341;
.loc 1 1767 7
add.u32 %r413,%r413,%r1174;
.loc 1 1769 3
setp.ne.u64 %r1175,%r388,0;
@ %r1175 bra $L230;
$L231:
mov.u32 %r1176,0;
st.u32 [%frame+176],%r1176;
mov.u64 %r257,%frame;
bra $L5;
$L230:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1298;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1181,[%value_in];
}
setp.ne.u32 %r1182,%r1181,0;
@ ! %r1182 bra $L231;
bra $L10;
$L11:
.loc 1 1777 2
ld.u64 %r1183,[%frame+184];
setp.eq.u64 %r1184,%r1183,0;
@ %r1184 bra $L10;
add.u64 %r1188,%frame,168;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r415;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1188;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1189,[%value_in];
}
$L10:
.loc 1 1784 31
ld.u16 %r1191,[%r415+16];
and.b16 %r1190,%r1191,64;
setp.eq.u16 %r1192,%r1190,0;
selp.u32 %r413,%r413,-1,%r1192;
bra $L1;
$L182:
.loc 1 1712 7
st.u64 [%r257],%r265;
st.u64 [%r257+8],%r430;
add.u64 %r402,%r430,%r388;
st.u64 [%frame+184],%r402;
ld.u32 %r1194,[%frame+176];
add.u32 %r403,%r1194,1;
st.u32 [%frame+176],%r403;
setp.gt.s32 %r1195,%r403,7;
@ %r1195 bra $L183;
add.u64 %r259,%r257,16;
bra $L185;
$L60:
.loc 1 932 9
mov.u32 %r249,%r248;
mov.u32 %r251,0;
mov.u32 %r253,%r251;
bra $L139;
$L66:
.loc 1 964 8
ld.s8 %r382,[%frame+218];
.loc 1 1558 14
setp.ne.u32 %r1196,%r251,-1;
@ %r1196 bra $L232;
bra $L132;
$L84:
.loc 1 1873 11
mov.u32 %r1199,3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r243;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1199;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r251;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1309;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1308;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1307;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r1207,[%value_in];
}
mov.u64 %r247,%r1207;
.loc 1 1876 15
cvt.s64.s32 %r283,%r251;
.loc 1 1878 7
ld.s8 %r1210,[%r1207];
cvt.u16.u32 %r1209,%r1210;
set.u32.eq.u16 %r1211,%r1209,48;
neg.s32 %r1212,%r1211;
.loc 1 1878 23
set.u32.neu.f64 %r1214,%r243,0d0000000000000000;
neg.s32 %r1215,%r1214;
cvt.u16.u32 %r1217,%r1212;
cvt.u16.u32 %r1218,%r1215;
and.b16 %r1216,%r1217,%r1218;
cvt.u32.u16 %r1219,%r1216;
cvt.u16.u8 %r1220,%r1219;
setp.ne.u16 %r1221,%r1220,0;
@ ! %r1221 bra $L375;
bra $L233;
$L261:
.loc 1 1875 5
mov.u32 %r318,%r251;
$L86:
.loc 1 1876 15
cvt.s64.s32 %r1222,%r318;
.loc 1 1876 6
add.u64 %r321,%r247,%r1222;
bra $L235;
$L85:
.loc 1 1873 11
mov.u32 %r1225,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r243;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1225;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r251;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1309;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1308;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1307;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r1233,[%value_in];
}
mov.u64 %r247,%r1233;
.loc 1 1875 5
setp.ne.u32 %r1271,%r373,71;
@ %r1271 bra $L261;
mov.u32 %r412,%r251;
bra $L236;
$L201:
.loc 1 1741 6
sub.u32 %r272,%r68,%r253;
sub.u32 %r207,%r68,%r201;
min.s32 %r24,%r272,%r207;
bra $L204;
$L25:
setp.ne.u32 %r1235,%r275,0;
@ ! %r1235 bra $L238;
bra $L237;
$L239:
.loc 1 1876 15
cvt.s64.s32 %r1236,%r412;
.loc 1 1876 6
add.u64 %r321,%r247,%r1236;
setp.ne.u32 %r1271,%r373,71;
bra $L235;
$L236:
.loc 1 1875 31
and.b32 %r1237,%r248,1;
setp.ne.u32 %r1238,%r1237,0;
@ ! %r1238 bra $L376;
bra $L239;
$L377:
.loc 1 1873 11
mov.u32 %r1242,1;
mov.u32 %r1241,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r414;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r28;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1241;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r1242;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1309;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1308;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1307;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r1249,[%value_in];
}
mov.u64 %r247,%r1249;
mov.f64 %r243,%r28;
.loc 1 1305 10
mov.u32 %r412,%r1242;
.loc 1 1811 9
mov.u32 %r219,0;
.loc 1 1305 10
mov.u32 %r251,%r412;
bra $L236;
$L82:
.loc 1 1308 10
or.b32 %r249,%r248,256;
.loc 1 1807 6
mov.b64 %r1250,%r28;
shr.u64 %r1251,%r1250,32;
.loc 1 1807 5
cvt.u32.u64 %r1252,%r1251;
setp.lt.s32 %r1253,%r1252,0;
@ ! %r1253 bra $L377;
bra $L262;
$L232:
.loc 1 1559 11
and.b32 %r249,%r248,-129;
.loc 1 1567 28
set.u32.ne.u32 %r1255,%r251,0;
neg.s32 %r1256,%r1255;
.loc 1 1567 15
set.u32.ne.u64 %r1258,%r254,0;
neg.s32 %r1259,%r1258;
.loc 1 1567 20
cvt.u16.u32 %r1261,%r1256;
cvt.u16.u32 %r1262,%r1259;
or.b16 %r1260,%r1261,%r1262;
.loc 1 1567 7
cvt.u32.u16 %r1263,%r1260;
cvt.u16.u8 %r1264,%r1263;
setp.ne.u16 %r1265,%r1264,0;
@ %r1265 bra $L263;
mov.u32 %r251,0;
mov.u32 %r226,%r251;
.loc 1 1566 7
add.u64 %r247,%frame,168;
bra $L136;
$L1:
.loc 1 1786 1
mov.u32 %value,%r413;
st.param.u32 [%value_out],%value;
ret;
}
/1580           1612277262  0     0     100666  57629     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: __ssvfscanf_r
.visible .func (.param .u32 %value_out) __ssvfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfscanf.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DECL: __ssrefill_r
.extern .func (.param .u32 %value_out) __ssrefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.extern .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoul_r
.extern .func (.param .u64 %value_out) _strtoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sccl
.extern .func (.param .u64 %value_out) __sccl (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _sfread_r
.extern .func (.param .u64 %value_out) _sfread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _sungetc_r
.extern .func (.param .u32 %value_out) _sungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtoull_r
.extern .func (.param .u64 %value_out) _strtoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoll_r
.extern .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: sprintf
.extern .func (.param .u32 %value_out) sprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtod_r
.extern .func (.param .f64 %value_out) _strtod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: nanf
.extern .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[1] =
{0 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[5] =
{101,37,108,100,0 };
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN GLOBAL FUNCTION DEF: __ssvfscanf_r
.visible .func (.param .u32 %value_out) __ssvfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[608];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r27;
.reg .u64 %r33;
.reg .u32 %r40;
.reg .u64 %r44;
.reg .u32 %r67;
.reg .u64 %r68;
.reg .u64 %r77;
.reg .u32 %r94;
.reg .u64 %r98;
.reg .u64 %r109;
.reg .u32 %r116;
.reg .u64 %r119;
.reg .u64 %r132;
.reg .u64 %r142;
.reg .u32 %r143;
.reg .u32 %r152;
.reg .u64 %r166;
.reg .u64 %r176;
.reg .u32 %r177;
.reg .u32 %r200;
.reg .u32 %r206;
.reg .u32 %r207;
.reg .u32 %r235;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r240;
.reg .u64 %r241;
.reg .u64 %r242;
.reg .u32 %r243;
.reg .u64 %r244;
.reg .u32 %r245;
.reg .u32 %r246;
.reg .u32 %r247;
.reg .u64 %r248;
.reg .u32 %r249;
.reg .u32 %r250;
.reg .u64 %r251;
.reg .u64 %r252;
.reg .u64 %r253;
.reg .u64 %r254;
.reg .u32 %r255;
.reg .u32 %r256;
.reg .u32 %r257;
.reg .u64 %r266;
.reg .u64 %r268;
.reg .u32 %r273;
.reg .u64 %r275;
.reg .u64 %r280;
.reg .u64 %r283;
.reg .u32 %r286;
.reg .u32 %r288;
.reg .u32 %r289;
.reg .u64 %r291;
.reg .u64 %r300;
.reg .u64 %r301;
.reg .u32 %r303;
.reg .u64 %r304;
.reg .u64 %r306;
.reg .u32 %r308;
.reg .u32 %r309;
.reg .u64 %r310;
.reg .u64 %r311;
.reg .u32 %r315;
.reg .u64 %r317;
.reg .u64 %r319;
.reg .u64 %r321;
.reg .u64 %r322;
.reg .u64 %r323;
.reg .u64 %r324;
.reg .u64 %r332;
.reg .u32 %r335;
.reg .u64 %r343;
.reg .u32 %r347;
.reg .u32 %r360;
.reg .u64 %r361;
.reg .u64 %r362;
.reg .u64 %r363;
.reg .u64 %r366;
.reg .u64 %r373;
.reg .u64 %r374;
.reg .u32 %r377;
.reg .u64 %r378;
.reg .u64 %r379;
.reg .u64 %r380;
.reg .u64 %r381;
.reg .u16 %r382;
.reg .u16 %r383;
.reg .pred %r384;
.reg .u16 %r385;
.reg .u32 %r387;
.reg .u32 %r388;
.reg .pred %r389;
.reg .pred %r390;
.reg .u64 %r391;
.reg .u32 %r392;
.reg .u64 %r394;
.reg .u16 %r396;
.reg .u16 %r397;
.reg .u32 %r398;
.reg .pred %r399;
.reg .pred %r400;
.reg .u64 %r401;
.reg .u64 %r403;
.reg .u16 %r405;
.reg .u16 %r406;
.reg .u32 %r407;
.reg .u16 %r408;
.reg .u32 %r409;
.reg .pred %r410;
.reg .u32 %r413;
.reg .pred %r414;
.reg .u32 %r415;
.reg .u64 %r416;
.reg .pred %r417;
.reg .u16 %r418;
.reg .pred %r419;
.reg .pred %r421;
.reg .pred %r423;
.reg .pred %r425;
.reg .pred %r427;
.reg .pred %r429;
.reg .pred %r431;
.reg .pred %r433;
.reg .pred %r435;
.reg .pred %r437;
.reg .pred %r439;
.reg .pred %r441;
.reg .pred %r443;
.reg .pred %r445;
.reg .pred %r447;
.reg .pred %r449;
.reg .pred %r451;
.reg .pred %r453;
.reg .pred %r455;
.reg .pred %r457;
.reg .pred %r459;
.reg .pred %r461;
.reg .pred %r463;
.reg .pred %r465;
.reg .pred %r467;
.reg .pred %r469;
.reg .pred %r471;
.reg .pred %r473;
.reg .pred %r475;
.reg .u32 %r476;
.reg .pred %r477;
.reg .u16 %r478;
.reg .u16 %r479;
.reg .pred %r480;
.reg .u32 %r483;
.reg .pred %r484;
.reg .u32 %r485;
.reg .u32 %r486;
.reg .u64 %r487;
.reg .u32 %r489;
.reg .u32 %r490;
.reg .u32 %r492;
.reg .u32 %r493;
.reg .u16 %r494;
.reg .u16 %r495;
.reg .u16 %r496;
.reg .u32 %r497;
.reg .u16 %r498;
.reg .pred %r499;
.reg .u32 %r500;
.reg .pred %r501;
.reg .u16 %r502;
.reg .pred %r503;
.reg .u32 %r504;
.reg .pred %r505;
.reg .u32 %r506;
.reg .pred %r507;
.reg .u32 %r508;
.reg .pred %r509;
.reg .u64 %r511;
.reg .u64 %r512;
.reg .u64 %r513;
.reg .u64 %r514;
.reg .u32 %r515;
.reg .u64 %r519;
.reg .u32 %r520;
.reg .pred %r521;
.reg .u64 %r522;
.reg .u32 %r523;
.reg .pred %r524;
.reg .u32 %r525;
.reg .pred %r526;
.reg .u64 %r527;
.reg .u32 %r528;
.reg .pred %r529;
.reg .u64 %r530;
.reg .u32 %r531;
.reg .pred %r532;
.reg .u32 %r533;
.reg .pred %r534;
.reg .u32 %r537;
.reg .pred %r538;
.reg .u64 %r539;
.reg .u64 %r541;
.reg .u16 %r543;
.reg .u16 %r544;
.reg .u32 %r545;
.reg .u16 %r546;
.reg .u32 %r547;
.reg .pred %r548;
.reg .u32 %r549;
.reg .pred %r550;
.reg .u32 %r553;
.reg .pred %r554;
.reg .u64 %r555;
.reg .u64 %r557;
.reg .u16 %r559;
.reg .u16 %r560;
.reg .u32 %r561;
.reg .u16 %r562;
.reg .u32 %r563;
.reg .pred %r564;
.reg .pred %r565;
.reg .pred %r566;
.reg .pred %r567;
.reg .pred %r568;
.reg .u32 %r569;
.reg .pred %r570;
.reg .u32 %r571;
.reg .pred %r572;
.reg .u64 %r573;
.reg .u32 %r576;
.reg .pred %r577;
.reg .pred %r578;
.reg .u32 %r579;
.reg .u64 %r581;
.reg .u32 %r582;
.reg .u64 %r584;
.reg .u64 %r585;
.reg .u64 %r588;
.reg .pred %r589;
.reg .u32 %r590;
.reg .pred %r591;
.reg .u64 %r593;
.reg .u64 %r595;
.reg .u32 %r596;
.reg .pred %r597;
.reg .pred %r598;
.reg .u32 %r599;
.reg .u64 %r600;
.reg .pred %r601;
.reg .u32 %r602;
.reg .u64 %r603;
.reg .pred %r604;
.reg .pred %r605;
.reg .u64 %r607;
.reg .u64 %r609;
.reg .u16 %r610;
.reg .u32 %r611;
.reg .pred %r612;
.reg .u32 %r615;
.reg .pred %r616;
.reg .pred %r617;
.reg .u32 %r618;
.reg .u32 %r619;
.reg .u64 %r620;
.reg .u32 %r621;
.reg .pred %r622;
.reg .u32 %r623;
.reg .u32 %r624;
.reg .u64 %r625;
.reg .u32 %r626;
.reg .u64 %r627;
.reg .pred %r628;
.reg .u32 %r629;
.reg .pred %r630;
.reg .u32 %r633;
.reg .pred %r634;
.reg .pred %r635;
.reg .u64 %r637;
.reg .u64 %r639;
.reg .u16 %r640;
.reg .u32 %r641;
.reg .pred %r642;
.reg .u64 %r643;
.reg .pred %r644;
.reg .u32 %r645;
.reg .pred %r646;
.reg .u64 %r647;
.reg .u64 %r649;
.reg .u16 %r651;
.reg .u16 %r652;
.reg .u32 %r653;
.reg .u32 %r654;
.reg .pred %r655;
.reg .pred %r656;
.reg .u32 %r657;
.reg .u64 %r658;
.reg .pred %r659;
.reg .u32 %r660;
.reg .u64 %r661;
.reg .pred %r662;
.reg .pred %r663;
.reg .u32 %r666;
.reg .pred %r667;
.reg .u64 %r668;
.reg .u64 %r670;
.reg .u16 %r672;
.reg .u16 %r673;
.reg .u32 %r674;
.reg .u16 %r675;
.reg .u32 %r676;
.reg .pred %r677;
.reg .pred %r678;
.reg .u32 %r679;
.reg .u32 %r680;
.reg .u64 %r681;
.reg .u32 %r682;
.reg .pred %r683;
.reg .u32 %r684;
.reg .u32 %r685;
.reg .u64 %r686;
.reg .u32 %r687;
.reg .u64 %r688;
.reg .pred %r689;
.reg .u64 %r690;
.reg .u32 %r691;
.reg .pred %r692;
.reg .u32 %r695;
.reg .pred %r696;
.reg .u64 %r697;
.reg .u64 %r698;
.reg .u64 %r700;
.reg .u16 %r702;
.reg .u16 %r703;
.reg .u32 %r704;
.reg .u16 %r705;
.reg .u32 %r706;
.reg .pred %r707;
.reg .u64 %r708;
.reg .u32 %r709;
.reg .u64 %r710;
.reg .pred %r711;
.reg .u32 %r712;
.reg .u16 %r713;
.reg .pred %r714;
.reg .pred %r716;
.reg .pred %r718;
.reg .pred %r720;
.reg .u16 %r721;
.reg .u16 %r724;
.reg .u32 %r726;
.reg .u16 %r727;
.reg .pred %r728;
.reg .u64 %r729;
.reg .u64 %r730;
.reg .u64 %r731;
.reg .u64 %r732;
.reg .pred %r734;
.reg .pred %r736;
.reg .pred %r738;
.reg .pred %r740;
.reg .pred %r742;
.reg .pred %r744;
.reg .u32 %r745;
.reg .pred %r746;
.reg .pred %r747;
.reg .u32 %r748;
.reg .pred %r749;
.reg .pred %r750;
.reg .u64 %r751;
.reg .u64 %r752;
.reg .u64 %r753;
.reg .u64 %r754;
.reg .pred %r755;
.reg .pred %r756;
.reg .u32 %r757;
.reg .pred %r758;
.reg .u32 %r759;
.reg .pred %r760;
.reg .u32 %r761;
.reg .u32 %r762;
.reg .pred %r763;
.reg .u64 %r764;
.reg .u32 %r767;
.reg .pred %r768;
.reg .pred %r769;
.reg .u32 %r770;
.reg .pred %r771;
.reg .pred %r772;
.reg .u32 %r776;
.reg .u32 %r777;
.reg .pred %r778;
.reg .u32 %r779;
.reg .pred %r780;
.reg .u32 %r781;
.reg .u64 %r784;
.reg .u64 %r786;
.reg .u64 %r787;
.reg .u32 %r788;
.reg .pred %r789;
.reg .u32 %r790;
.reg .pred %r791;
.reg .u64 %r792;
.reg .u32 %r793;
.reg .pred %r794;
.reg .u64 %r795;
.reg .u32 %r796;
.reg .pred %r797;
.reg .u64 %r798;
.reg .pred %r799;
.reg .u64 %r804;
.reg .u64 %r809;
.reg .u64 %r810;
.reg .u64 %r811;
.reg .u64 %r812;
.reg .u32 %r813;
.reg .u32 %r814;
.reg .u64 %r816;
.reg .u64 %r817;
.reg .pred %r818;
.reg .u32 %r819;
.reg .u16 %r820;
.reg .pred %r821;
.reg .pred %r823;
.reg .pred %r825;
.reg .pred %r827;
.reg .pred %r829;
.reg .u16 %r830;
.reg .u16 %r833;
.reg .u32 %r835;
.reg .u16 %r836;
.reg .pred %r837;
.reg .pred %r839;
.reg .pred %r841;
.reg .pred %r843;
.reg .pred %r845;
.reg .pred %r847;
.reg .pred %r849;
.reg .pred %r851;
.reg .pred %r853;
.reg .pred %r855;
.reg .pred %r857;
.reg .pred %r859;
.reg .pred %r861;
.reg .pred %r863;
.reg .pred %r865;
.reg .pred %r867;
.reg .pred %r869;
.reg .pred %r871;
.reg .u32 %r872;
.reg .pred %r873;
.reg .pred %r874;
.reg .u32 %r875;
.reg .pred %r876;
.reg .u32 %r877;
.reg .pred %r878;
.reg .u16 %r880;
.reg .u32 %r881;
.reg .u32 %r882;
.reg .u32 %r884;
.reg .u32 %r885;
.reg .u16 %r886;
.reg .u16 %r887;
.reg .u16 %r888;
.reg .u32 %r889;
.reg .u16 %r890;
.reg .pred %r891;
.reg .u32 %r892;
.reg .pred %r893;
.reg .pred %r895;
.reg .u16 %r897;
.reg .u32 %r898;
.reg .u32 %r899;
.reg .u32 %r902;
.reg .u32 %r903;
.reg .u16 %r904;
.reg .u16 %r905;
.reg .u16 %r906;
.reg .u32 %r907;
.reg .u16 %r908;
.reg .pred %r909;
.reg .u16 %r911;
.reg .u32 %r913;
.reg .u16 %r915;
.reg .pred %r916;
.reg .u16 %r918;
.reg .u32 %r919;
.reg .u32 %r920;
.reg .u32 %r922;
.reg .u32 %r923;
.reg .u16 %r924;
.reg .u16 %r925;
.reg .u16 %r926;
.reg .u32 %r927;
.reg .u16 %r928;
.reg .pred %r929;
.reg .u32 %r930;
.reg .pred %r931;
.reg .u32 %r932;
.reg .u16 %r933;
.reg .u16 %r934;
.reg .u16 %r936;
.reg .u32 %r938;
.reg .u16 %r939;
.reg .pred %r940;
.reg .u16 %r941;
.reg .u32 %r943;
.reg .u16 %r944;
.reg .pred %r945;
.reg .u16 %r946;
.reg .pred %r947;
.reg .u16 %r948;
.reg .pred %r949;
.reg .u32 %r950;
.reg .pred %r951;
.reg .u32 %r952;
.reg .pred %r953;
.reg .pred %r954;
.reg .u32 %r955;
.reg .pred %r956;
.reg .u16 %r957;
.reg .u16 %r958;
.reg .pred %r959;
.reg .u32 %r960;
.reg .pred %r961;
.reg .u32 %r962;
.reg .u32 %r963;
.reg .pred %r964;
.reg .u64 %r965;
.reg .u32 %r968;
.reg .pred %r969;
.reg .pred %r970;
.reg .pred %r971;
.reg .u32 %r972;
.reg .pred %r973;
.reg .pred %r974;
.reg .u32 %r978;
.reg .u32 %r979;
.reg .pred %r980;
.reg .u32 %r981;
.reg .pred %r982;
.reg .u16 %r983;
.reg .pred %r984;
.reg .u32 %r985;
.reg .pred %r987;
.reg .pred %r988;
.reg .u32 %r992;
.reg .u32 %r993;
.reg .u32 %r994;
.reg .u32 %r995;
.reg .u32 %r996;
.reg .u16 %r998;
.reg .u16 %r999;
.reg .u16 %r1000;
.reg .u16 %r1003;
.reg .u16 %r1005;
.reg .u16 %r1006;
.reg .u32 %r1007;
.reg .u32 %r1008;
.reg .pred %r1009;
.reg .u32 %r1013;
.reg .u32 %r1014;
.reg .pred %r1015;
.reg .u32 %r1016;
.reg .pred %r1017;
.reg .u32 %r1018;
.reg .pred %r1019;
.reg .pred %r1020;
.reg .u32 %r1024;
.reg .u32 %r1025;
.reg .pred %r1026;
.reg .u16 %r1027;
.reg .u16 %r1028;
.reg .u16 %r1029;
.reg .u32 %r1030;
.reg .u32 %r1031;
.reg .pred %r1032;
.reg .u32 %r1036;
.reg .u32 %r1040;
.reg .u32 %r1041;
.reg .pred %r1042;
.reg .u32 %r1043;
.reg .u32 %r1044;
.reg .pred %r1045;
.reg .pred %r1046;
.reg .pred %r1047;
.reg .u64 %r1050;
.reg .u32 %r1051;
.reg .u64 %r1052;
.reg .u64 %r1053;
.reg .pred %r1055;
.reg .u64 %r1057;
.reg .u32 %r1058;
.reg .u64 %r1062;
.reg .f64 %r1063;
.reg .u64 %r1064;
.reg .u32 %r1065;
.reg .pred %r1066;
.reg .u64 %r1067;
.reg .u32 %r1068;
.reg .pred %r1069;
.reg .pred %r1070;
.reg .u64 %r1071;
.reg .f32 %r1072;
.reg .f32 %r1073;
.reg .pred %r1074;
.reg .u16 %r1075;
.reg .u16 %r1076;
.reg .pred %r1077;
.reg .u32 %r1079;
.reg .pred %r1080;
.reg .u64 %r1082;
.reg .u64 %r1083;
.reg .u64 %r1084;
.reg .u16 %r1085;
mov.u64 %r378,%ar0;
mov.u64 %r379,%ar1;
mov.u64 %r380,%ar2;
mov.u64 %r381,%ar3;
.loc 1 591 3
ld.u16 %r383,[%r379+16];
and.b16 %r382,%r383,8192;
setp.ne.u16 %r384,%r382,0;
@ %r384 bra $L2;
or.b16 %r385,%r383,8192;
st.u16 [%r379+16],%r385;
ld.u32 %r388,[%r379+172];
and.b32 %r387,%r388,-8193;
st.u32 [%r379+172],%r387;
$L2:
.loc 1 602 12
ld.u8 %r27,[%r380];
.loc 1 611 11
add.u64 %r266,%r380,1;
.loc 1 613 10
setp.eq.u32 %r389,%r27,0;
@ %r389 bra $L162;
mov.u64 %r68,0;
cvt.u32.u64 %r247,%r68;
cvt.u32.u64 %r207,%r68;
cvt.u32.u64 %r377,%r68;
cvta.const.u64 %r1082,_ctype_+1;
.loc 1 1859 8
add.u64 %r1083,%frame,329;
.loc 1 1146 21
add.u64 %r1084,%frame,350;
bra $L4;
$L7:
.loc 1 602 12
ld.u8 %r27,[%r266];
.loc 1 611 11
add.u64 %r266,%r266,1;
.loc 1 613 10
setp.eq.u32 %r390,%r27,0;
@ %r390 bra $L1;
$L4:
.loc 1 615 26
cvt.u32.u32 %r392,%r27;
cvt.u64.u8 %r391,%r392;
add.u64 %r394,%r1082,%r391;
ld.u8 %r1085,[%r394];
mov.u16 %r397,%r1085;
and.b16 %r396,%r397,8;
cvt.u32.u16 %r398,%r396;
cvt.s32.s8 %r257,%r398;
.loc 1 615 23
setp.eq.u32 %r399,%r257,0;
@ %r399 bra $L5;
.loc 1 619 12
ld.u32 %r40,[%r379+8];
$L10:
.loc 1 619 11
setp.le.s32 %r400,%r40,0;
@ %r400 bra $L6;
$L9:
.loc 1 619 28
ld.u64 %r33,[%r379];
ld.u8 %r401,[%r33];
add.u64 %r403,%r1082,%r401;
.loc 1 619 24
ld.u8 %r1085,[%r403];
mov.u16 %r406,%r1085;
and.b16 %r405,%r406,8;
cvt.u32.u16 %r407,%r405;
cvt.s32.s8 %r409,%r407;
cvt.u16.u32 %r408,%r409;
setp.eq.u16 %r410,%r408,0;
@ ! %r410 bra $L341;
bra $L7;
$L6:
.loc 1 619 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r413,[%value_in];
}
setp.ne.u32 %r414,%r413,0;
@ ! %r414 bra $L9;
bra $L7;
$L341:
.loc 1 621 13
add.u32 %r207,%r207,1;
.loc 1 621 23
ld.u32 %r415,[%r379+8];
add.u32 %r40,%r415,-1;
st.u32 [%r379+8],%r40;
.loc 1 621 33
add.u64 %r416,%r33,1;
st.u64 [%r379],%r416;
.loc 1 619 11
bra $L10;
$L5:
.loc 1 625 10
setp.ne.u32 %r417,%r27,37;
@ %r417 bra $L11;
.loc 1 640 11
ld.u8 %r360,[%r266];
mov.u64 %r24,%r266;
.loc 1 628 13
mov.u32 %r243,%r257;
.loc 1 627 13
mov.u64 %r236,0;
bra $L12;
$L343:
.loc 1 640 11
ld.u8 %r360,[%r24+1];
.loc 1 640 15
mov.u64 %r24,%r266;
.loc 1 663 10
mov.u32 %r243,16;
.loc 1 640 11
mov.u64 %r236,0;
$L12:
.loc 1 640 15
add.u64 %r266,%r24,1;
.loc 1 642 7
cvt.u16.u32 %r418,%r360;
setp.eq.u16 %r419,%r418,100;
@ %r419 bra $L163;
setp.gt.u16 %r421,%r418,100;
@ %r421 bra $L14;
setp.eq.u16 %r423,%r418,71;
@ %r423 bra $L164;
setp.gt.u16 %r425,%r418,71;
@ %r425 bra $L15;
setp.gt.u16 %r427,%r418,57;
@ %r427 bra $L16;
setp.gt.u16 %r429,%r418,47;
@ %r429 bra $L17;
setp.eq.u16 %r431,%r418,37;
@ %r431 bra $L11;
setp.eq.u16 %r433,%r418,42;
@ %r433 bra $L18;
bra $L1;
$L16:
setp.eq.u16 %r435,%r418,68;
@ %r435 bra $L19;
setp.eq.u16 %r437,%r418,69;
@ %r437 bra $L165;
bra $L1;
$L15:
setp.eq.u16 %r439,%r418,88;
@ %r439 bra $L20;
setp.gt.u16 %r441,%r418,88;
@ %r441 bra $L21;
setp.eq.u16 %r443,%r418,76;
@ %r443 bra $L22;
setp.eq.u16 %r445,%r418,79;
@ %r445 bra $L23;
bra $L1;
$L21:
setp.eq.u16 %r447,%r418,91;
@ %r447 bra $L24;
setp.eq.u16 %r449,%r418,99;
@ %r449 bra $L25;
bra $L1;
$L14:
setp.eq.u16 %r451,%r418,111;
@ %r451 bra $L166;
setp.gt.u16 %r453,%r418,111;
@ %r453 bra $L26;
setp.eq.u16 %r455,%r418,105;
@ %r455 bra $L167;
setp.gt.u16 %r457,%r418,105;
@ %r457 bra $L27;
setp.le.u16 %r459,%r418,103;
@ %r459 bra $L168;
setp.eq.u16 %r461,%r418,104;
@ %r461 bra $L28;
bra $L1;
$L27:
setp.eq.u16 %r463,%r418,108;
@ %r463 bra $L29;
setp.eq.u16 %r465,%r418,110;
@ %r465 bra $L30;
bra $L1;
$L26:
setp.eq.u16 %r467,%r418,115;
@ %r467 bra $L169;
setp.gt.u16 %r469,%r418,115;
@ %r469 bra $L31;
setp.eq.u16 %r471,%r418,112;
@ %r471 bra $L32;
bra $L1;
$L31:
setp.eq.u16 %r473,%r418,117;
@ %r473 bra $L170;
setp.eq.u16 %r475,%r418,120;
@ %r475 bra $L20;
bra $L1;
$L11:
.loc 1 649 11
ld.u32 %r476,[%r379+8];
setp.le.s32 %r477,%r476,0;
@ %r477 bra $L33;
$L36:
.loc 1 651 15
ld.u64 %r44,[%r379];
.loc 1 651 11
ld.u8 %r478,[%r44];
ld.u8 %r479,[%r266+-1];
setp.ne.u16 %r480,%r478,%r479;
@ %r480 bra $L1;
bra $L342;
$L33:
.loc 1 649 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r483,[%value_in];
}
setp.ne.u32 %r484,%r483,0;
@ ! %r484 bra $L36;
bra $L35;
$L342:
.loc 1 653 14
ld.u32 %r486,[%r379+8];
add.u32 %r485,%r486,-1;
st.u32 [%r379+8],%r485;
.loc 1 653 24
add.u64 %r487,%r44,1;
st.u64 [%r379],%r487;
.loc 1 654 13
add.u32 %r207,%r207,1;
bra $L7;
$L18:
.loc 1 660 7
set.u32.ne.u32 %r489,%r243,0;
neg.s32 %r490,%r489;
.loc 1 661 8
set.u32.ne.u64 %r492,%r236,0;
neg.s32 %r493,%r492;
cvt.u16.u32 %r495,%r490;
cvt.u16.u32 %r496,%r493;
or.b16 %r494,%r495,%r496;
cvt.u32.u16 %r497,%r494;
cvt.u16.u8 %r498,%r497;
setp.ne.u16 %r499,%r498,0;
@ ! %r499 bra $L343;
bra $L1;
$L29:
.loc 1 666 14
and.b32 %r500,%r243,15;
.loc 1 666 7
setp.ne.u32 %r501,%r500,0;
@ %r501 bra $L1;
.loc 1 669 8
ld.u8 %r360,[%r24+1];
.loc 1 669 7
cvt.u16.u32 %r502,%r360;
setp.ne.u16 %r503,%r502,108;
@ %r503 bra $L38;
.loc 1 672 14
or.b32 %r243,%r243,2;
.loc 1 640 11
ld.u8 %r360,[%r24+2];
.loc 1 671 8
add.u64 %r24,%r24,2;
bra $L12;
$L38:
.loc 1 676 12
or.b32 %r243,%r243,1;
.loc 1 640 15
mov.u64 %r24,%r266;
bra $L12;
$L22:
.loc 1 679 14
and.b32 %r504,%r243,15;
.loc 1 679 7
setp.ne.u32 %r505,%r504,0;
@ %r505 bra $L1;
.loc 1 681 10
or.b32 %r243,%r243,2;
.loc 1 640 11
ld.u8 %r360,[%r24+1];
.loc 1 640 15
mov.u64 %r24,%r266;
.loc 1 682 4
bra $L12;
$L28:
.loc 1 684 14
and.b32 %r506,%r243,15;
.loc 1 684 7
setp.ne.u32 %r507,%r506,0;
@ %r507 bra $L1;
.loc 1 694 12
or.b32 %r243,%r243,4;
.loc 1 640 11
ld.u8 %r360,[%r24+1];
.loc 1 640 15
mov.u64 %r24,%r266;
.loc 1 695 4
bra $L12;
$L17:
.loc 1 760 14
and.b32 %r508,%r243,143;
.loc 1 760 7
setp.ne.u32 %r509,%r508,0;
@ %r509 bra $L1;
.loc 1 762 18
shl.b64 %r511,%r236,2;
add.u64 %r512,%r511,%r236;
add.u64 %r513,%r512,%r512;
.loc 1 762 23
cvt.u32.u32 %r515,%r360;
cvt.u64.u8 %r514,%r515;
add.u64 %r324,%r513,%r514;
.loc 1 762 10
add.u64 %r236,%r324,-48;
.loc 1 640 11
ld.u8 %r360,[%r24+1];
.loc 1 640 15
mov.u64 %r24,%r266;
.loc 1 763 4
bra $L12;
$L19:
.loc 1 789 10
or.b32 %r243,%r243,1;
.loc 1 793 9
mov.u64 %r68,_strtol_r;
.loc 1 794 9
mov.u32 %r247,10;
.loc 1 792 6
mov.u32 %r309,3;
bra $L13;
$L23:
.loc 1 804 10
or.b32 %r243,%r243,1;
.loc 1 808 9
mov.u64 %r68,_strtoul_r;
.loc 1 809 9
mov.u32 %r247,8;
.loc 1 807 6
mov.u32 %r309,3;
bra $L13;
$L20:
.loc 1 820 10
or.b32 %r243,%r243,512;
.loc 1 822 9
mov.u64 %r68,_strtoul_r;
.loc 1 823 9
mov.u32 %r247,16;
.loc 1 821 6
mov.u32 %r309,3;
.loc 1 824 4
bra $L13;
$L24:
.loc 1 852 21
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1084;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r266;
call (%value_in),__sccl,(%out_arg1,%out_arg2);
ld.param.u64 %r519,[%value_in];
}
mov.u64 %r266,%r519;
.loc 1 853 10
or.b32 %r243,%r243,64;
.loc 1 854 6
mov.u32 %r309,1;
.loc 1 855 4
bra $L13;
$L25:
.loc 1 864 10
or.b32 %r243,%r243,64;
.loc 1 865 6
mov.u32 %r309,0;
.loc 1 866 4
bra $L13;
$L32:
.loc 1 869 10
or.b32 %r243,%r243,544;
.loc 1 871 9
mov.u64 %r68,_strtoul_r;
.loc 1 872 9
mov.u32 %r247,16;
.loc 1 870 6
mov.u32 %r309,3;
.loc 1 873 4
bra $L13;
$L30:
.loc 1 876 14
and.b32 %r520,%r243,16;
.loc 1 876 7
setp.ne.u32 %r521,%r520,0;
@ %r521 bra $L7;
.loc 1 888 11
add.u64 %r522,%r381,7;
and.b64 %r323,%r522,-8;
ld.u64 %r322,[%r323];
add.u64 %r381,%r323,8;
.loc 1 886 14
and.b32 %r523,%r243,4;
.loc 1 886 7
setp.eq.u32 %r524,%r523,0;
@ %r524 bra $L40;
.loc 1 889 12
st.u16 [%r322],%r207;
bra $L7;
$L40:
.loc 1 891 19
and.b32 %r525,%r243,1;
.loc 1 891 12
setp.eq.u32 %r526,%r525,0;
@ %r526 bra $L41;
.loc 1 894 12
cvt.s64.s32 %r527,%r207;
st.u64 [%r322],%r527;
bra $L7;
$L41:
.loc 1 897 19
and.b32 %r528,%r243,2;
.loc 1 897 12
setp.eq.u32 %r529,%r528,0;
@ %r529 bra $L42;
.loc 1 900 13
cvt.s64.s32 %r530,%r207;
st.u64 [%r322],%r530;
bra $L7;
$L42:
.loc 1 906 12
st.u32 [%r322],%r207;
bra $L7;
$L163:
.loc 1 642 7
mov.u64 %r68,_strtol_r;
mov.u32 %r247,10;
mov.u32 %r309,3;
bra $L13;
$L164:
.loc 1 837 6
mov.u32 %r309,4;
bra $L13;
$L165:
mov.u32 %r309,4;
bra $L13;
$L166:
.loc 1 808 9
mov.u64 %r68,_strtoul_r;
.loc 1 809 9
mov.u32 %r247,8;
.loc 1 807 6
mov.u32 %r309,3;
bra $L13;
$L167:
.loc 1 799 9
mov.u64 %r68,_strtol_r;
.loc 1 800 9
mov.u32 %r247,0;
.loc 1 798 6
mov.u32 %r309,3;
bra $L13;
$L168:
.loc 1 837 6
mov.u32 %r309,4;
bra $L13;
$L169:
.loc 1 848 6
mov.u32 %r309,2;
bra $L13;
$L170:
.loc 1 814 9
mov.u64 %r68,_strtoul_r;
.loc 1 815 9
mov.u32 %r247,10;
.loc 1 813 6
mov.u32 %r309,3;
$L13:
.loc 1 917 10
ld.u32 %r531,[%r379+8];
setp.le.s32 %r532,%r531,0;
@ %r532 bra $L43;
$L46:
.loc 1 924 18
and.b32 %r533,%r243,64;
.loc 1 924 10
setp.eq.u32 %r534,%r533,0;
@ ! %r534 bra $L45;
bra $L44;
$L43:
.loc 1 917 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r537,[%value_in];
}
setp.ne.u32 %r538,%r537,0;
@ ! %r538 bra $L46;
bra $L35;
$L44:
.loc 1 926 11
ld.u64 %r321,[%r379];
ld.u8 %r539,[%r321];
add.u64 %r541,%r1082,%r539;
.loc 1 926 10
ld.u8 %r1085,[%r541];
mov.u16 %r544,%r1085;
and.b16 %r543,%r544,8;
cvt.u32.u16 %r545,%r543;
cvt.s32.s8 %r547,%r545;
cvt.u16.u32 %r546,%r547;
setp.eq.u16 %r548,%r546,0;
@ %r548 bra $L45;
$L49:
.loc 1 928 13
add.u32 %r207,%r207,1;
.loc 1 929 12
ld.u32 %r549,[%r379+8];
add.u32 %r67,%r549,-1;
.loc 1 929 11
st.u32 [%r379+8],%r67;
setp.le.s32 %r550,%r67,0;
@ %r550 bra $L47;
.loc 1 930 9
add.u64 %r321,%r321,1;
st.u64 [%r379],%r321;
bra $L48;
$L47:
.loc 1 932 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r553,[%value_in];
}
.loc 1 932 11
setp.ne.u32 %r554,%r553,0;
@ %r554 bra $L35;
.loc 1 926 11
ld.u64 %r321,[%r379];
$L48:
ld.u8 %r555,[%r321];
add.u64 %r557,%r1082,%r555;
.loc 1 926 10
ld.u8 %r1085,[%r557];
mov.u16 %r560,%r1085;
and.b16 %r559,%r560,8;
cvt.u32.u16 %r561,%r559;
cvt.s32.s8 %r563,%r561;
cvt.u16.u32 %r562,%r563;
setp.ne.u16 %r564,%r562,0;
@ %r564 bra $L49;
$L45:
.loc 1 945 7
setp.eq.u32 %r565,%r309,3;
@ %r565 bra $L50;
setp.eq.u32 %r566,%r309,4;
@ %r566 bra $L51;
setp.eq.u32 %r567,%r309,1;
@ %r567 bra $L52;
setp.eq.u32 %r568,%r309,2;
@ %r568 bra $L53;
max.u64 %r237,%r236,1;
.loc 1 1017 14
and.b32 %r569,%r243,16;
.loc 1 1017 7
setp.eq.u32 %r570,%r569,0;
@ %r570 bra $L54;
.loc 1 1019 15
mov.u64 %r248,0;
$L56:
.loc 1 1022 12
ld.u32 %r315,[%r379+8];
.loc 1 1026 16
ld.u64 %r362,[%r379];
.loc 1 1022 8
cvt.u32.u64 %r571,%r237;
setp.ge.s32 %r572,%r315,%r571;
@ %r572 bra $L55;
.loc 1 1024 13
cvt.s64.s32 %r77,%r315;
add.u64 %r248,%r248,%r77;
.loc 1 1025 15
sub.u64 %r237,%r237,%r77;
.loc 1 1026 16
add.u64 %r573,%r362,%r77;
st.u64 [%r379],%r573;
.loc 1 1027 13
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r576,[%value_in];
}
.loc 1 1027 12
setp.eq.u32 %r577,%r576,0;
@ %r577 bra $L56;
.loc 1 1029 9
setp.eq.u64 %r578,%r248,0;
@ ! %r578 bra $L57;
bra $L35;
$L55:
.loc 1 1036 13
add.u64 %r248,%r248,%r237;
.loc 1 1037 16
sub.u32 %r579,%r315,%r571;
st.u32 [%r379+8],%r579;
.loc 1 1038 16
add.u64 %r581,%r362,%r237;
st.u64 [%r379],%r581;
$L57:
.loc 1 1042 14
cvt.u32.u64 %r582,%r248;
add.u32 %r207,%r207,%r582;
bra $L7;
$L54:
.loc 1 1053 5
add.u64 %r268,%r381,7;
and.b64 %r317,%r268,-8;
add.u64 %r381,%r317,8;
.loc 1 1054 12
mov.u64 %r585,1;
ld.u64 %r584,[%r317];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r584;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r585;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r237;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r379;
call (%value_in),_sfread_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r588,[%value_in];
}
.loc 1 1055 11
setp.eq.u64 %r589,%r588,0;
@ %r589 bra $L35;
.loc 1 1060 14
cvt.u32.u64 %r590,%r588;
add.u32 %r207,%r207,%r590;
.loc 1 1061 17
add.u32 %r377,%r377,1;
bra $L7;
$L52:
.loc 1 1067 7
setp.ne.u64 %r591,%r236,0;
.loc 1 1068 12
selp.u64 %r236,%r236,-1,%r591;
.loc 1 1146 25
ld.u64 %r363,[%r379];
.loc 1 1146 21
ld.u8 %r593,[%r363];
add.u64 %r595,%r1084,%r593;
ld.s8 %r273,[%r595];
.loc 1 1143 14
and.b32 %r596,%r243,16;
.loc 1 1143 7
setp.eq.u32 %r597,%r596,0;
@ %r597 bra $L59;
.loc 1 1146 14
setp.eq.u32 %r598,%r273,0;
@ %r598 bra $L1;
.loc 1 1148 16
ld.u32 %r599,[%r379+8];
add.u32 %r94,%r599,-1;
st.u32 [%r379+8],%r94;
.loc 1 1148 26
add.u64 %r600,%r363,1;
st.u64 [%r379],%r600;
.loc 1 1149 8
add.u64 %r310,%r236,-1;
setp.eq.u64 %r601,%r236,1;
@ ! %r601 bra $L61;
bra $L60;
$L63:
.loc 1 1148 6
add.u32 %r309,%r309,1;
.loc 1 1148 16
ld.u32 %r602,[%r379+8];
add.u32 %r94,%r602,-1;
st.u32 [%r379+8],%r94;
.loc 1 1148 26
add.u64 %r603,%r98,1;
st.u64 [%r379],%r603;
.loc 1 1149 8
add.u64 %r310,%r310,-1;
setp.eq.u64 %r604,%r310,0;
@ %r604 bra $L60;
$L61:
.loc 1 1151 8
setp.le.s32 %r605,%r94,0;
@ %r605 bra $L62;
$L64:
.loc 1 1146 25
ld.u64 %r98,[%r379];
.loc 1 1146 21
ld.u8 %r607,[%r98];
add.u64 %r609,%r1084,%r607;
.loc 1 1146 14
ld.s8 %r611,[%r609];
cvt.u16.u32 %r610,%r611;
setp.ne.u16 %r612,%r610,0;
@ %r612 bra $L63;
bra $L60;
$L62:
.loc 1 1151 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r615,[%value_in];
}
setp.eq.u32 %r616,%r615,0;
@ %r616 bra $L64;
$L60:
.loc 1 1160 14
add.u32 %r207,%r207,%r309;
bra $L7;
$L59:
.loc 1 1172 10
add.u64 %r374,%r381,7;
and.b64 %r373,%r374,-8;
add.u64 %r381,%r373,8;
ld.u64 %r306,[%r373];
.loc 1 1173 14
setp.eq.u32 %r617,%r273,0;
@ %r617 bra $L1;
.loc 1 1175 11
ld.u32 %r619,[%r379+8];
add.u32 %r618,%r619,-1;
st.u32 [%r379+8],%r618;
.loc 1 1176 19
add.u64 %r620,%r363,1;
st.u64 [%r379],%r620;
.loc 1 1176 7
add.u64 %r238,%r306,1;
.loc 1 1176 10
ld.u8 %r621,[%r363];
st.u8 [%r306],%r621;
.loc 1 1180 8
setp.eq.u64 %r622,%r236,1;
@ %r622 bra $L65;
mov.u64 %r343,%r238;
bra $L66;
$L68:
.loc 1 1175 11
ld.u32 %r624,[%r379+8];
add.u32 %r623,%r624,-1;
st.u32 [%r379+8],%r623;
.loc 1 1176 19
add.u64 %r625,%r109,1;
st.u64 [%r379],%r625;
add.u64 %r343,%r343,1;
.loc 1 1176 10
ld.u8 %r626,[%r109];
st.u8 [%r238],%r626;
.loc 1 1180 8
add.u64 %r627,%r306,%r236;
setp.eq.u64 %r628,%r627,%r343;
@ %r628 bra $L171;
$L66:
mov.u64 %r238,%r343;
.loc 1 1182 8
ld.u32 %r629,[%r379+8];
setp.gt.s32 %r630,%r629,0;
@ %r630 bra $L67;
.loc 1 1182 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r633,[%value_in];
}
setp.eq.u32 %r634,%r633,0;
@ %r634 bra $L67;
.loc 1 1184 12
setp.eq.u64 %r635,%r306,%r238;
@ ! %r635 bra $L65;
bra $L35;
$L67:
.loc 1 1173 25
ld.u64 %r109,[%r379];
.loc 1 1173 21
ld.u8 %r637,[%r109];
add.u64 %r639,%r1084,%r637;
.loc 1 1173 14
ld.s8 %r641,[%r639];
cvt.u16.u32 %r640,%r641;
setp.ne.u16 %r642,%r640,0;
@ %r642 bra $L68;
bra $L65;
$L171:
.loc 1 1176 7
mov.u64 %r238,%r343;
$L65:
.loc 1 1189 14
sub.u64 %r643,%r238,%r306;
.loc 1 1189 10
cvt.u32.u64 %r308,%r643;
.loc 1 1190 11
setp.eq.u32 %r644,%r308,0;
@ %r644 bra $L1;
.loc 1 1192 11
mov.u32 %r645,0;
st.u8 [%r238],%r645;
.loc 1 1196 17
add.u32 %r377,%r377,1;
.loc 1 1197 14
add.u32 %r207,%r207,%r308;
bra $L7;
$L53:
.loc 1 1203 7
setp.ne.u64 %r646,%r236,0;
.loc 1 1204 12
selp.u64 %r236,%r236,-1,%r646;
.loc 1 1146 25
ld.u64 %r319,[%r379];
.loc 1 1283 16
ld.u8 %r647,[%r319];
add.u64 %r649,%r1082,%r647;
ld.u8 %r1085,[%r649];
mov.u16 %r652,%r1085;
and.b16 %r651,%r652,8;
cvt.u32.u16 %r653,%r651;
cvt.s32.s8 %r335,%r653;
.loc 1 1280 14
and.b32 %r654,%r243,16;
.loc 1 1280 7
setp.eq.u32 %r655,%r654,0;
@ %r655 bra $L70;
.loc 1 1283 14
setp.ne.u32 %r656,%r335,0;
@ %r656 bra $L7;
.loc 1 1285 16
ld.u32 %r657,[%r379+8];
add.u32 %r116,%r657,-1;
st.u32 [%r379+8],%r116;
.loc 1 1285 26
add.u64 %r658,%r319,1;
st.u64 [%r379],%r658;
.loc 1 1286 8
add.u64 %r304,%r236,-1;
setp.ne.u64 %r659,%r236,1;
@ %r659 bra $L172;
.loc 1 1291 14
add.u32 %r207,%r207,1;
bra $L7;
$L74:
.loc 1 1285 6
add.u32 %r303,%r303,1;
.loc 1 1285 16
ld.u32 %r660,[%r379+8];
add.u32 %r116,%r660,-1;
st.u32 [%r379+8],%r116;
.loc 1 1285 26
add.u64 %r661,%r119,1;
st.u64 [%r379],%r661;
.loc 1 1286 8
add.u64 %r304,%r304,-1;
setp.ne.u64 %r662,%r304,0;
@ %r662 bra $L72;
.loc 1 1291 14
add.u32 %r207,%r207,%r303;
bra $L7;
$L172:
.loc 1 1285 6
mov.u32 %r303,1;
$L72:
.loc 1 1288 8
setp.gt.s32 %r663,%r116,0;
@ %r663 bra $L73;
.loc 1 1288 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r666,[%value_in];
}
setp.eq.u32 %r667,%r666,0;
@ %r667 bra $L73;
.loc 1 1291 14
add.u32 %r207,%r207,%r303;
bra $L7;
$L73:
.loc 1 1283 16
ld.u64 %r119,[%r379];
ld.u8 %r668,[%r119];
add.u64 %r670,%r1082,%r668;
.loc 1 1283 14
ld.u8 %r1085,[%r670];
mov.u16 %r673,%r1085;
and.b16 %r672,%r673,8;
cvt.u32.u16 %r674,%r672;
cvt.s32.s8 %r676,%r674;
cvt.u16.u32 %r675,%r676;
setp.eq.u16 %r677,%r675,0;
@ %r677 bra $L74;
.loc 1 1291 14
add.u32 %r207,%r207,%r303;
bra $L7;
$L70:
.loc 1 1303 6
add.u64 %r244,%r381,7;
and.b64 %r240,%r244,-8;
add.u64 %r381,%r240,8;
ld.u64 %r301,[%r240];
.loc 1 1305 14
setp.ne.u32 %r678,%r335,0;
@ %r678 bra $L173;
.loc 1 1307 11
ld.u32 %r680,[%r379+8];
add.u32 %r679,%r680,-1;
st.u32 [%r379+8],%r679;
.loc 1 1308 19
add.u64 %r681,%r319,1;
st.u64 [%r379],%r681;
.loc 1 1308 7
add.u64 %r239,%r301,1;
.loc 1 1308 10
ld.u8 %r682,[%r319];
st.u8 [%r301],%r682;
.loc 1 1312 8
setp.eq.u64 %r683,%r236,1;
@ ! %r683 bra $L344;
bra $L174;
$L79:
.loc 1 1307 11
ld.u32 %r685,[%r379+8];
add.u32 %r684,%r685,-1;
st.u32 [%r379+8],%r684;
.loc 1 1308 19
add.u64 %r686,%r132,1;
st.u64 [%r379],%r686;
add.u64 %r332,%r332,1;
.loc 1 1308 10
ld.u8 %r687,[%r132];
st.u8 [%r239],%r687;
.loc 1 1312 8
add.u64 %r688,%r301,%r236;
setp.ne.u64 %r689,%r688,%r332;
@ %r689 bra $L77;
.loc 1 1321 19
sub.u64 %r690,%r332,%r301;
.loc 1 1321 14
cvt.u32.u64 %r288,%r690;
mov.u64 %r239,%r332;
bra $L75;
$L344:
mov.u64 %r332,%r239;
$L77:
mov.u64 %r239,%r332;
.loc 1 1314 8
ld.u32 %r691,[%r379+8];
setp.gt.s32 %r692,%r691,0;
@ %r692 bra $L78;
.loc 1 1314 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r695,[%value_in];
}
setp.eq.u32 %r696,%r695,0;
@ %r696 bra $L78;
.loc 1 1321 19
sub.u64 %r697,%r239,%r301;
.loc 1 1321 14
cvt.u32.u64 %r288,%r697;
bra $L75;
$L78:
.loc 1 1305 16
ld.u64 %r132,[%r379];
ld.u8 %r698,[%r132];
add.u64 %r700,%r1082,%r698;
.loc 1 1305 14
ld.u8 %r1085,[%r700];
mov.u16 %r703,%r1085;
and.b16 %r702,%r703,8;
cvt.u32.u16 %r704,%r702;
cvt.s32.s8 %r706,%r704;
cvt.u16.u32 %r705,%r706;
setp.eq.u16 %r707,%r705,0;
@ %r707 bra $L79;
.loc 1 1321 19
sub.u64 %r708,%r332,%r301;
.loc 1 1321 14
cvt.u32.u64 %r288,%r708;
bra $L75;
$L173:
.loc 1 1303 6
mov.u64 %r239,%r301;
.loc 1 1305 14
mov.u32 %r288,%r654;
bra $L75;
$L174:
.loc 1 1312 8
cvt.u32.u64 %r288,%r236;
$L75:
.loc 1 1317 11
mov.u32 %r709,0;
st.u8 [%r239],%r709;
.loc 1 1321 14
add.u32 %r207,%r207,%r288;
.loc 1 1322 17
add.u32 %r377,%r377,1;
bra $L7;
$L50:
.loc 1 1335 14
add.u64 %r710,%r236,-1;
.loc 1 1335 7
setp.le.u64 %r711,%r710,348;
@ %r711 bra $L175;
.loc 1 1338 19
cvt.u32.u64 %r712,%r236;
add.u32 %r249,%r712,-349;
.loc 1 1339 14
mov.u64 %r236,349;
bra $L80;
$L175:
.loc 1 1329 13
mov.u32 %r249,0;
$L80:
.loc 1 1341 10
or.b32 %r245,%r243,3456;
.loc 1 1330 8
mov.u32 %r250,0;
.loc 1 1342 11
mov.u64 %r241,%frame;
$L98:
.loc 1 1344 15
ld.u64 %r142,[%r379];
.loc 1 1344 12
ld.u8 %r143,[%r142];
cvt.u16.u32 %r713,%r143;
setp.gt.u16 %r714,%r713,57;
@ %r714 bra $L81;
setp.gt.u16 %r716,%r713,55;
@ %r716 bra $L82;
setp.eq.u16 %r718,%r713,48;
@ %r718 bra $L83;
setp.gt.u16 %r720,%r713,48;
@ %r720 bra $L84;
add.u16 %r721,%r713,-43;
and.b16 %r724,%r721,-3;
cvt.u32.u16 %r726,%r724;
cvt.u16.u8 %r727,%r726;
setp.eq.u16 %r728,%r727,0;
@ ! %r728 bra $L86;
bra $L85;
$L84:
.loc 1 1390 19
cvta.const.u64 %r729,basefix$0;
cvt.s64.s32 %r730,%r247;
add.u64 %r731,%r730,%r730;
add.u64 %r732,%r729,%r731;
ld.s16 %r247,[%r732];
.loc 1 1391 11
and.b32 %r245,%r245,-2945;
.loc 1 1392 5
bra $L87;
$L81:
setp.gt.u16 %r734,%r713,102;
@ %r734 bra $L88;
setp.gt.u16 %r736,%r713,96;
@ %r736 bra $L89;
setp.gt.u16 %r738,%r713,70;
@ %r738 bra $L90;
setp.gt.u16 %r740,%r713,64;
@ ! %r740 bra $L86;
bra $L89;
$L90:
setp.eq.u16 %r742,%r713,88;
@ %r742 bra $L91;
bra $L86;
$L88:
setp.eq.u16 %r744,%r713,120;
@ %r744 bra $L91;
bra $L86;
$L83:
.loc 1 1361 18
and.b32 %r745,%r245,2048;
.loc 1 1361 8
setp.eq.u32 %r746,%r745,0;
@ %r746 bra $L87;
.loc 1 1363 8
setp.ne.u32 %r747,%r247,0;
@ %r747 bra $L92;
.loc 1 1366 15
or.b32 %r245,%r245,512;
.loc 1 1365 14
mov.u32 %r247,8;
$L92:
.loc 1 1368 15
and.b32 %r748,%r245,1024;
.loc 1 1368 8
setp.eq.u32 %r749,%r748,0;
@ %r749 bra $L93;
.loc 1 1370 15
and.b32 %r245,%r245,-1409;
.loc 1 1371 9
bra $L87;
$L93:
.loc 1 1373 11
and.b32 %r245,%r245,-897;
.loc 1 1374 8
setp.eq.u32 %r750,%r249,0;
@ %r750 bra $L94;
.loc 1 1376 19
add.u32 %r249,%r249,-1;
.loc 1 1377 14
add.u64 %r236,%r236,1;
$L94:
.loc 1 1379 5
add.u32 %r250,%r250,1;
.loc 1 1380 5
bra $L95;
$L82:
.loc 1 1397 19
cvta.const.u64 %r751,basefix$0;
cvt.s64.s32 %r752,%r247;
add.u64 %r753,%r752,%r752;
add.u64 %r754,%r751,%r753;
ld.s16 %r247,[%r754];
.loc 1 1398 8
setp.le.s32 %r755,%r247,8;
@ %r755 bra $L86;
.loc 1 1400 11
and.b32 %r245,%r245,-2945;
.loc 1 1401 5
bra $L87;
$L89:
.loc 1 1417 8
setp.le.s32 %r756,%r247,10;
@ %r756 bra $L86;
.loc 1 1419 11
and.b32 %r245,%r245,-2945;
.loc 1 1420 5
bra $L87;
$L85:
.loc 1 1425 15
and.b32 %r757,%r245,128;
.loc 1 1425 8
setp.eq.u32 %r758,%r757,0;
@ %r758 bra $L86;
.loc 1 1427 15
and.b32 %r245,%r245,-129;
.loc 1 1428 9
bra $L87;
$L91:
.loc 1 1435 16
and.b32 %r759,%r245,1536;
.loc 1 1435 8
setp.ne.u32 %r760,%r759,512;
@ %r760 bra $L86;
.loc 1 1438 15
and.b32 %r289,%r245,-513;
.loc 1 1442 15
or.b32 %r245,%r289,1280;
.loc 1 1437 14
mov.u32 %r247,16;
$L87:
.loc 1 1457 13
cvt.u32.u32 %r761,%r143;
st.u8 [%r241],%r761;
.loc 1 1457 10
add.u64 %r241,%r241,1;
$L95:
.loc 1 1459 12
ld.u32 %r762,[%r379+8];
add.u32 %r152,%r762,-1;
.loc 1 1459 11
st.u32 [%r379+8],%r152;
setp.le.s32 %r763,%r152,0;
@ %r763 bra $L96;
.loc 1 1460 9
add.u64 %r764,%r142,1;
st.u64 [%r379],%r764;
bra $L97;
$L96:
.loc 1 1462 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r767,[%value_in];
}
.loc 1 1462 11
setp.ne.u32 %r768,%r767,0;
@ %r768 bra $L86;
$L97:
.loc 1 1342 30
add.u64 %r236,%r236,-1;
.loc 1 1342 4
setp.ne.u64 %r769,%r236,0;
@ %r769 bra $L98;
$L86:
.loc 1 1473 14
and.b32 %r770,%r245,256;
.loc 1 1473 7
setp.eq.u32 %r771,%r770,0;
@ %r771 bra $L99;
.loc 1 1475 11
setp.ge.u64 %r772,%frame,%r241;
@ %r772 bra $L100;
.loc 1 1476 3
add.u64 %r291,%r241,-1;
ld.s8 %r776,[%r241+-1];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r776;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r777,[%value_in];
}
mov.u64 %r241,%r291;
$L100:
.loc 1 1477 11
setp.eq.u64 %r778,%frame,%r241;
@ %r778 bra $L1;
$L99:
.loc 1 1480 15
and.b32 %r779,%r245,16;
.loc 1 1480 7
setp.ne.u32 %r780,%r779,0;
@ %r780 bra $L101;
.loc 1 1484 11
cvt.u32.u32 %r781,%r779;
st.u8 [%r241],%r781;
.loc 1 1485 15
mov.u64 %r784,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r784;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r247;
call (%value_in),%r68,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r786,[%value_in];
}
.loc 1 888 11
add.u64 %r787,%r381,7;
and.b64 %r366,%r787,-8;
add.u64 %r381,%r366,8;
.loc 1 1486 18
and.b32 %r788,%r245,32;
.loc 1 1486 11
setp.eq.u32 %r789,%r788,0;
@ %r789 bra $L102;
.loc 1 1488 12
ld.u64 %r300,[%r366];
.loc 1 1498 11
st.u64 [%r300],%r786;
bra $L103;
$L102:
.loc 1 1507 23
and.b32 %r790,%r245,4;
.loc 1 1507 16
setp.eq.u32 %r791,%r790,0;
@ %r791 bra $L104;
.loc 1 1510 9
ld.u64 %r792,[%r366];
st.u16 [%r792],%r786;
bra $L103;
$L104:
.loc 1 1512 23
and.b32 %r793,%r245,1;
.loc 1 1512 16
setp.eq.u32 %r794,%r793,0;
@ %r794 bra $L105;
.loc 1 1515 9
ld.u64 %r795,[%r366];
st.u64 [%r795],%r786;
bra $L103;
$L105:
.loc 1 1518 23
and.b32 %r796,%r245,2;
.loc 1 1518 16
setp.eq.u32 %r797,%r796,0;
@ %r797 bra $L106;
.loc 1 1521 8
mov.u64 %r798,_strtoul_r;
setp.ne.u64 %r799,%r68,%r798;
@ %r799 bra $L107;
.loc 1 1522 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r784;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r247;
call (%value_in),_strtoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r804,[%value_in];
}
.loc 1 1526 10
mov.u64 %r166,%r804;
bra $L108;
$L107:
.loc 1 1524 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r784;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r247;
call (%value_in),_strtoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r809,[%value_in];
}
mov.u64 %r166,%r809;
$L108:
.loc 1 1526 10
ld.u64 %r810,[%r366];
st.u64 [%r810],%r166;
bra $L103;
$L106:
.loc 1 1532 9
ld.u64 %r811,[%r366];
st.u32 [%r811],%r786;
$L103:
.loc 1 1534 17
add.u32 %r377,%r377,1;
$L101:
.loc 1 1536 15
sub.u64 %r812,%r241,%frame;
.loc 1 1536 10
add.u32 %r813,%r250,%r207;
cvt.u32.u64 %r814,%r812;
add.u32 %r207,%r813,%r814;
.loc 1 1537 4
bra $L7;
$L51:
.loc 1 1553 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r816,[%value_in];
}
.loc 1 1553 16
ld.u64 %r275,[%r816];
.loc 1 1561 14
add.u64 %r817,%r236,-1;
.loc 1 1561 7
setp.le.u64 %r818,%r817,348;
@ %r818 bra $L176;
.loc 1 1564 19
cvt.u32.u64 %r819,%r236;
add.u32 %r255,%r819,-349;
.loc 1 1565 14
mov.u64 %r236,349;
bra $L109;
$L176:
.loc 1 1550 13
mov.u32 %r255,0;
$L109:
.loc 1 1567 10
or.b32 %r246,%r243,1920;
.loc 1 1551 9
mov.u32 %r256,%r257;
.loc 1 1549 10
mov.u64 %r254,0;
.loc 1 1569 15
mov.u64 %r253,%r254;
.loc 1 1568 11
mov.u64 %r252,%r254;
.loc 1 1547 9
mov.u64 %r251,%r254;
.loc 1 1570 11
mov.u64 %r242,%frame;
$L140:
.loc 1 1572 15
ld.u64 %r176,[%r379];
.loc 1 1572 12
ld.u8 %r177,[%r176];
cvt.u16.u32 %r820,%r177;
setp.eq.u16 %r821,%r820,78;
@ %r821 bra $L110;
setp.gt.u16 %r823,%r820,78;
@ %r823 bra $L111;
setp.gt.u16 %r825,%r820,57;
@ %r825 bra $L112;
setp.gt.u16 %r827,%r820,48;
@ %r827 bra $L113;
setp.eq.u16 %r829,%r820,48;
@ %r829 bra $L114;
add.u16 %r830,%r820,-43;
and.b16 %r833,%r830,-3;
cvt.u32.u16 %r835,%r833;
cvt.u16.u8 %r836,%r835;
setp.eq.u16 %r837,%r836,0;
@ ! %r837 bra $L116;
bra $L115;
$L112:
setp.eq.u16 %r839,%r820,70;
@ %r839 bra $L117;
setp.gt.u16 %r841,%r820,70;
@ %r841 bra $L118;
setp.eq.u16 %r843,%r820,65;
@ %r843 bra $L119;
setp.eq.u16 %r845,%r820,69;
@ %r845 bra $L120;
bra $L116;
$L118:
setp.eq.u16 %r847,%r820,73;
@ %r847 bra $L121;
bra $L116;
$L111:
setp.eq.u16 %r849,%r820,102;
@ %r849 bra $L117;
setp.gt.u16 %r851,%r820,102;
@ %r851 bra $L122;
setp.eq.u16 %r853,%r820,97;
@ %r853 bra $L119;
setp.gt.u16 %r855,%r820,97;
@ %r855 bra $L123;
setp.eq.u16 %r857,%r820,84;
@ %r857 bra $L124;
setp.eq.u16 %r859,%r820,89;
@ %r859 bra $L125;
bra $L116;
$L123:
setp.eq.u16 %r861,%r820,101;
@ %r861 bra $L120;
bra $L116;
$L122:
setp.eq.u16 %r863,%r820,116;
@ %r863 bra $L124;
setp.gt.u16 %r865,%r820,116;
@ %r865 bra $L126;
setp.eq.u16 %r867,%r820,105;
@ %r867 bra $L121;
setp.eq.u16 %r869,%r820,110;
@ %r869 bra $L110;
bra $L116;
$L126:
setp.eq.u16 %r871,%r820,121;
@ %r871 bra $L125;
bra $L116;
$L114:
.loc 1 1580 15
and.b32 %r872,%r246,256;
.loc 1 1580 8
setp.eq.u32 %r873,%r872,0;
@ %r873 bra $L113;
.loc 1 1582 15
and.b32 %r246,%r246,-129;
.loc 1 1583 15
add.u64 %r252,%r252,1;
.loc 1 1584 12
setp.ne.u32 %r874,%r255,0;
@ %r874 bra $L127;
.loc 1 1755 13
add.u64 %r236,%r236,-1;
bra $L128;
$L127:
.loc 1 1586 16
add.u32 %r255,%r255,-1;
bra $L128;
$L113:
.loc 1 1601 18
add.u32 %r875,%r256,%r257;
.loc 1 1601 8
setp.ne.u32 %r876,%r875,0;
@ %r876 bra $L129;
.loc 1 1603 15
and.b32 %r246,%r246,-385;
.loc 1 1604 9
bra $L130;
$L115:
.loc 1 1610 15
and.b32 %r877,%r246,128;
.loc 1 1610 8
setp.eq.u32 %r878,%r877,0;
@ %r878 bra $L129;
.loc 1 1612 15
and.b32 %r246,%r246,-129;
.loc 1 1613 9
bra $L130;
$L110:
.loc 1 1618 18
cvt.u16.u32 %r880,%r256;
set.u32.eq.u16 %r881,%r880,0;
neg.s32 %r882,%r881;
.loc 1 1618 33
set.u32.eq.u64 %r884,%r252,0;
neg.s32 %r885,%r884;
.loc 1 1618 23
cvt.u16.u32 %r887,%r882;
cvt.u16.u32 %r888,%r885;
and.b16 %r886,%r887,%r888;
.loc 1 1618 8
cvt.u32.u16 %r889,%r886;
cvt.u16.u8 %r890,%r889;
setp.eq.u16 %r891,%r890,0;
@ %r891 bra $L131;
.loc 1 1619 19
and.b32 %r892,%r246,1792;
.loc 1 1619 9
setp.ne.u32 %r893,%r892,1792;
@ %r893 bra $L132;
.loc 1 1622 15
and.b32 %r246,%r246,-1921;
.loc 1 1623 18
mov.u32 %r256,1;
.loc 1 1624 9
mov.u64 %r252,0;
bra $L130;
$L131:
.loc 1 1626 8
setp.eq.u16 %r895,%r880,2;
@ %r895 bra $L177;
$L132:
.loc 1 1631 18
cvt.u16.u32 %r897,%r257;
set.u32.eq.u16 %r898,%r897,1;
neg.s32 %r899,%r898;
.loc 1 1631 35
set.u32.eq.u16 %r902,%r897,4;
neg.s32 %r903,%r902;
.loc 1 1631 23
cvt.u16.u32 %r905,%r899;
cvt.u16.u32 %r906,%r903;
or.b16 %r904,%r905,%r906;
.loc 1 1631 8
cvt.u32.u16 %r907,%r904;
cvt.u16.u8 %r908,%r907;
setp.eq.u16 %r909,%r908,0;
@ %r909 bra $L129;
.loc 1 1633 17
add.u16 %r911,%r897,1;
cvt.u32.u16 %r913,%r911;
cvt.s32.s8 %r257,%r913;
.loc 1 1634 9
bra $L130;
$L119:
.loc 1 1639 8
cvt.u16.u32 %r915,%r256;
setp.eq.u16 %r916,%r915,1;
@ %r916 bra $L178;
bra $L129;
$L121:
.loc 1 1647 18
cvt.u16.u32 %r918,%r257;
set.u32.eq.u16 %r919,%r918,0;
neg.s32 %r920,%r919;
.loc 1 1647 33
set.u32.eq.u64 %r922,%r252,0;
neg.s32 %r923,%r922;
.loc 1 1647 23
cvt.u16.u32 %r925,%r920;
cvt.u16.u32 %r926,%r923;
and.b16 %r924,%r925,%r926;
.loc 1 1647 8
cvt.u32.u16 %r927,%r924;
cvt.u16.u8 %r928,%r927;
setp.eq.u16 %r929,%r928,0;
@ %r929 bra $L133;
.loc 1 1648 19
and.b32 %r930,%r246,1792;
.loc 1 1648 9
setp.ne.u32 %r931,%r930,1792;
@ %r931 bra $L134;
.loc 1 1651 15
and.b32 %r246,%r246,-1921;
.loc 1 1652 18
mov.u32 %r257,1;
.loc 1 1653 9
mov.u64 %r252,0;
bra $L130;
$L133:
.loc 1 1655 18
cvt.u32.u32 %r932,%r257;
cvt.u16.u8 %r934,%r932;
add.u16 %r933,%r934,-3;
and.b16 %r936,%r933,-3;
.loc 1 1655 8
cvt.u32.u16 %r938,%r936;
cvt.u16.u8 %r939,%r938;
setp.ne.u16 %r940,%r939,0;
@ %r940 bra $L129;
.loc 1 1657 17
add.u16 %r941,%r934,1;
cvt.u32.u16 %r943,%r941;
cvt.s32.s8 %r257,%r943;
.loc 1 1658 9
bra $L130;
$L117:
.loc 1 1663 8
cvt.u16.u32 %r944,%r257;
setp.eq.u16 %r945,%r944,2;
@ %r945 bra $L179;
bra $L129;
$L124:
.loc 1 1671 8
cvt.u16.u32 %r946,%r257;
setp.eq.u16 %r947,%r946,6;
@ %r947 bra $L180;
bra $L129;
$L125:
.loc 1 1679 8
cvt.u16.u32 %r948,%r257;
setp.eq.u16 %r949,%r948,7;
@ %r949 bra $L181;
bra $L129;
$L120:
.loc 1 1688 16
and.b32 %r950,%r246,1280;
.loc 1 1688 8
setp.eq.u32 %r951,%r950,1024;
@ %r951 bra $L135;
.loc 1 1689 20
and.b32 %r952,%r246,1024;
.loc 1 1689 9
setp.eq.u32 %r953,%r952,0;
@ %r953 bra $L129;
.loc 1 1689 29
setp.eq.u64 %r954,%r252,0;
@ %r954 bra $L136;
$L135:
.loc 1 1691 22
and.b32 %r955,%r246,512;
.loc 1 1691 12
setp.ne.u32 %r956,%r955,0;
@ %r956 bra $L137;
.loc 1 1693 17
sub.u64 %r253,%r252,%r251;
mov.u64 %r254,%r242;
$L137:
.loc 1 1698 11
and.b32 %r200,%r246,-1921;
.loc 1 1696 15
or.b32 %r246,%r200,384;
.loc 1 1699 16
mov.u64 %r252,0;
.loc 1 1700 9
bra $L130;
$L116:
.loc 1 1705 8
ld.u8 %r957,[%r275];
cvt.u16.u32 %r958,%r177;
setp.ne.u16 %r959,%r957,%r958;
@ %r959 bra $L129;
.loc 1 1706 19
and.b32 %r960,%r246,512;
.loc 1 1706 9
setp.eq.u32 %r961,%r960,0;
@ %r961 bra $L129;
.loc 1 1708 15
and.b32 %r246,%r246,-641;
.loc 1 1710 9
mov.u64 %r251,%r252;
bra $L130;
$L177:
.loc 1 1628 18
mov.u32 %r256,3;
bra $L130;
$L178:
.loc 1 1641 18
mov.u32 %r256,2;
bra $L130;
$L179:
.loc 1 1665 18
mov.u32 %r257,3;
bra $L130;
$L180:
.loc 1 1673 18
mov.u32 %r257,7;
bra $L130;
$L181:
.loc 1 1681 18
mov.u32 %r257,8;
$L130:
.loc 1 1753 13
cvt.u32.u32 %r962,%r177;
st.u8 [%r242],%r962;
.loc 1 1755 13
add.u64 %r236,%r236,-1;
.loc 1 1753 10
add.u64 %r242,%r242,1;
$L128:
.loc 1 1756 8
add.u32 %r207,%r207,1;
.loc 1 1757 12
ld.u32 %r963,[%r379+8];
add.u32 %r206,%r963,-1;
.loc 1 1757 11
st.u32 [%r379+8],%r206;
setp.le.s32 %r964,%r206,0;
@ %r964 bra $L138;
.loc 1 1758 9
add.u64 %r965,%r176,1;
st.u64 [%r379],%r965;
bra $L139;
$L138:
.loc 1 1760 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r968,[%value_in];
}
.loc 1 1760 11
setp.ne.u32 %r969,%r968,0;
@ %r969 bra $L129;
$L139:
.loc 1 1570 4
setp.ne.u64 %r970,%r236,0;
@ %r970 bra $L140;
$L129:
.loc 1 1763 7
setp.eq.u64 %r971,%r252,0;
@ %r971 bra $L136;
.loc 1 1764 12
and.b32 %r246,%r246,-257;
$L136:
.loc 1 1773 17
add.u32 %r972,%r256,-1;
.loc 1 1773 7
setp.gt.u32 %r973,%r972,1;
@ %r973 bra $L141;
$L161:
.loc 1 1778 14
setp.ge.u64 %r974,%frame,%r242;
@ %r974 bra $L1;
$L142:
.loc 1 1780 5
add.u64 %r242,%r242,-1;
ld.s8 %r978,[%r242];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r978;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r979,[%value_in];
}
.loc 1 1778 14
setp.ne.u64 %r980,%frame,%r242;
@ %r980 bra $L142;
bra $L1;
$L141:
.loc 1 1788 17
add.u32 %r981,%r257,-1;
.loc 1 1788 7
setp.gt.u32 %r982,%r981,6;
@ %r982 bra $L143;
.loc 1 1790 11
cvt.u16.u32 %r983,%r257;
setp.le.s16 %r984,%r983,2;
@ %r984 bra $L144;
.loc 1 1791 18
cvt.u32.u32 %r985,%r257;
cvt.u32.u8 %r286,%r985;
.loc 1 1791 9
setp.ne.u16 %r987,%r983,3;
@ %r987 bra $L182;
bra $L143;
$L144:
.loc 1 1798 11
setp.lt.u64 %r988,%frame,%r242;
@ %r988 bra $L146;
bra $L1;
$L182:
.loc 1 1791 9
mov.u64 %r280,%r242;
cvt.u32.u64 %r996,%r280;
cvt.u16.u32 %r1000,%r286;
cvt.u16.u64 %r1005,%r280;
$L145:
.loc 1 1793 7
add.u64 %r280,%r280,-1;
ld.s8 %r992,[%r280];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r992;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r993,[%value_in];
}
cvt.u32.u64 %r995,%r280;
add.u32 %r994,%r207,%r995;
sub.u32 %r347,%r994,%r996;
.loc 1 1791 9
cvt.u16.u64 %r999,%r280;
add.u16 %r998,%r999,%r1000;
sub.u16 %r1003,%r998,%r1005;
cvt.u32.u16 %r1008,%r1003;
cvt.s32.s8 %r1007,%r1008;
cvt.u16.u32 %r1006,%r1007;
setp.gt.s16 %r1009,%r1006,3;
@ %r1009 bra $L145;
.loc 1 1794 7
mov.u32 %r207,%r347;
mov.u64 %r242,%r280;
bra $L143;
$L146:
.loc 1 1800 9
add.u64 %r242,%r242,-1;
ld.s8 %r1013,[%r242];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1013;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1014,[%value_in];
}
.loc 1 1798 11
setp.ne.u64 %r1015,%frame,%r242;
@ %r1015 bra $L146;
bra $L1;
$L143:
.loc 1 1811 14
and.b32 %r1016,%r246,256;
.loc 1 1811 7
setp.eq.u32 %r1017,%r1016,0;
@ %r1017 bra $L147;
.loc 1 1813 18
and.b32 %r1018,%r246,1024;
.loc 1 1813 11
setp.eq.u32 %r1019,%r1018,0;
@ %r1019 bra $L148;
.loc 1 1816 11
setp.ge.u64 %r1020,%frame,%r242;
@ %r1020 bra $L1;
$L149:
.loc 1 1818 9
add.u64 %r242,%r242,-1;
ld.s8 %r1024,[%r242];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1024;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1025,[%value_in];
}
.loc 1 1816 11
setp.ne.u64 %r1026,%frame,%r242;
@ %r1026 bra $L149;
bra $L1;
$L148:
.loc 1 1824 12
ld.s8 %r235,[%r242+-1];
.loc 1 1826 26
cvt.u16.u32 %r1028,%r235;
and.b16 %r1027,%r1028,-33;
.loc 1 1826 11
cvt.u32.u16 %r1031,%r1027;
cvt.s32.s8 %r1030,%r1031;
cvt.u16.u32 %r1029,%r1030;
setp.ne.u16 %r1032,%r1029,69;
@ %r1032 bra $L150;
.loc 1 1824 10
add.u64 %r242,%r242,-1;
.loc 1 1825 8
add.u32 %r207,%r207,-1;
bra $L151;
$L150:
.loc 1 1828 5
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r235;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1036,[%value_in];
}
.loc 1 1829 7
ld.s8 %r235,[%r242+-2];
.loc 1 1830 5
add.u32 %r207,%r207,-2;
.loc 1 1829 7
add.u64 %r242,%r242,-2;
$L151:
.loc 1 1832 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r235;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_sungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1040,[%value_in];
}
$L147:
.loc 1 1834 15
and.b32 %r1041,%r246,16;
.loc 1 1834 7
setp.ne.u32 %r1042,%r1041,0;
@ %r1042 bra $L7;
.loc 1 1845 11
cvt.u32.u32 %r1043,%r1041;
st.u8 [%r242],%r1043;
.loc 1 1846 19
and.b32 %r1044,%r246,1536;
.loc 1 1846 11
setp.ne.u32 %r1045,%r1044,1024;
@ %r1045 bra $L152;
.loc 1 1849 13
sub.u64 %r283,%r251,%r252;
.loc 1 1854 11
setp.ne.u64 %r1046,%r252,%r251;
@ %r1046 bra $L153;
bra $L154;
$L152:
.loc 1 1852 16
setp.eq.u64 %r1047,%r253,0;
@ %r1047 bra $L154;
.loc 1 1853 55
add.u64 %r1052,%r254,1;
.loc 1 1853 27
mov.u32 %r1051,10;
mov.u64 %r1050,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1052;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1050;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r1051;
call (%value_in),_strtol_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r1053,[%value_in];
}
.loc 1 1853 25
sub.u64 %r283,%r1053,%r253;
mov.u64 %r242,%r254;
$L153:
.loc 1 1859 8
setp.lt.u64 %r1055,%r242,%r1083;
@ %r1055 bra $L155;
.loc 1 1860 17
add.u64 %r242,%frame,328;
$L155:
.loc 1 1861 18
st.u64 [%stack],%r283;
cvta.const.u64 %r1057,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r242;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1057;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1058,[%value_in];
}
$L154:
.loc 1 1873 16
mov.u64 %r1062,0;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1062;
call (%value_in),_strtod_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.f64 %r1063,[%value_in];
}
.loc 1 888 11
add.u64 %r1064,%r381,7;
and.b64 %r361,%r1064,-8;
add.u64 %r381,%r361,8;
.loc 1 1875 18
and.b32 %r1065,%r246,1;
.loc 1 1875 11
setp.eq.u32 %r1066,%r1065,0;
@ %r1066 bra $L156;
.loc 1 1878 9
ld.u64 %r1067,[%r361];
st.f64 [%r1067],%r1063;
bra $L157;
$L156:
.loc 1 1877 8
ld.u64 %r311,[%r361];
.loc 1 1880 23
and.b32 %r1068,%r246,2;
.loc 1 1880 16
setp.eq.u32 %r1069,%r1068,0;
@ %r1069 bra $L158;
.loc 1 1883 10
st.f64 [%r311],%r1063;
bra $L157;
$L158:
.loc 1 1888 8
setp.num.f64 %r1070,%r1063,%r1063;
@ %r1070 bra $L159;
.loc 1 1889 14
cvta.const.u64 %r1071,$LC1;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1071;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r1072,[%value_in];
}
.loc 1 1889 12
st.f32 [%r311],%r1072;
bra $L157;
$L159:
.loc 1 1891 12
cvt.rn.f32.f64 %r1073,%r1063;
st.f32 [%r311],%r1073;
$L157:
.loc 1 1893 17
add.u32 %r377,%r377,1;
bra $L7;
$L35:
.loc 1 1905 63
setp.eq.u32 %r1074,%r377,0;
@ %r1074 bra $L183;
.loc 1 1905 25
ld.u16 %r1076,[%r379+16];
and.b16 %r1075,%r1076,64;
setp.ne.u16 %r1077,%r1075,0;
.loc 1 1905 63
selp.u32 %r377,-1,%r377,%r1077;
bra $L1;
$L162:
.loc 1 613 10
mov.u32 %r377,%r27;
bra $L1;
$L183:
.loc 1 1905 63
mov.u32 %r377,-1;
bra $L1;
$L3:
$L160:
$L134:
.loc 1 1773 17
add.u32 %r1079,%r256,-1;
.loc 1 1773 7
setp.le.u32 %r1080,%r1079,1;
@ %r1080 bra $L161;
mov.u64 %r252,0;
bra $L143;
$L1:
.loc 1 1914 1
mov.u32 %value,%r377;
st.param.u32 [%value_out],%value;
ret;
}

/1598           1612277262  0     0     100666  94352     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: wcvt
.func (.param .u64 %value_out) wcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u32 %in_ar6, .param .u64 %in_ar7, .param .u64 %in_ar8, .param .u32 %in_ar9);
.file 1 "../../../../../newlib/libc/stdio/vfwprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _svfwprintf_r
.visible .func (.param .u32 %value_out) _svfwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.extern .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __ssprint_r
.extern .func (.param .u32 %value_out) __ssprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: btowc
.extern .func (.param .u32 %value_out) btowc (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcslen
.extern .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN VAR DEF: zeroes$0
.const .align 4 .u32 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 4 .u32 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// BEGIN VAR DEF: $LC0
.const .align 4 .u32 $LC0[4] =
{73,78,70,0 };
// BEGIN VAR DEF: $LC1
.const .align 4 .u32 $LC1[4] =
{105,110,102,0 };
// BEGIN VAR DEF: $LC2
.const .align 4 .u32 $LC2[4] =
{78,65,78,0 };
// BEGIN VAR DEF: $LC3
.const .align 4 .u32 $LC3[4] =
{110,97,110,0 };
// BEGIN VAR DEF: $LC4
.const .align 4 .u32 $LC4[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC5
.const .align 4 .u32 $LC5[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC6
.const .align 4 .u32 $LC6[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: $LC7
.const .align 4 .u32 $LC7[2] =
{48,0 };
// BEGIN FUNCTION DEF: wcvt
.func (.param .u64 %value_out) wcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u32 %in_ar6, .param .u64 %in_ar7, .param .u64 %in_ar8, .param .u32 %in_ar9)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.reg .u32 %ar6;
ld.param.u32 %ar6,[%in_ar6];
.reg .u64 %ar7;
ld.param.u64 %ar7,[%in_ar7];
.reg .u64 %ar8;
ld.param.u64 %ar8,[%in_ar8];
.reg .u32 %ar9;
ld.param.u32 %ar9,[%in_ar9];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r25;
.reg .u64 %r29;
.reg .u32 %r31;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u64 %r47;
.reg .u64 %r50;
.reg .u32 %r54;
.reg .u64 %r56;
.reg .f64 %r57;
.reg .u32 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .pred %r71;
.reg .u32 %r74;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u32 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .pred %r84;
.reg .pred %r85;
.reg .u64 %r86;
.reg .u32 %r87;
.reg .pred %r88;
.reg .u64 %r89;
.reg .u32 %r91;
.reg .u32 %r92;
.reg .u32 %r94;
.reg .u32 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u16 %r98;
.reg .u32 %r99;
.reg .u16 %r100;
.reg .pred %r101;
.reg .u32 %r103;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .pred %r106;
.reg .u64 %r107;
.reg .u32 %r110;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .pred %r117;
.reg .u32 %r120;
.reg .u64 %r125;
.reg .u64 %r126;
.reg .u16 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u16 %r135;
.reg .u16 %r136;
.reg .u16 %r137;
.reg .u32 %r138;
.reg .u16 %r139;
.reg .pred %r140;
.reg .u64 %r141;
.reg .u32 %r142;
.reg .pred %r143;
mov.u64 %r56,%ar0;
mov.f64 %r57,%ar1;
mov.u32 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r61,%ar5;
mov.u32 %r62,%ar6;
mov.u64 %r63,%ar7;
mov.u64 %r64,%ar8;
mov.u32 %r65,%ar9;
.loc 1 1562 6
mov.b64 %r66,%r57;
shr.u64 %r67,%r66,32;
.loc 1 1562 5
cvt.u32.u64 %r68,%r67;
setp.ge.s32 %r69,%r68,0;
@ %r69 bra $L18;
.loc 1 1563 9
neg.f64 %r57,%r57;
.loc 1 1564 9
mov.u32 %r39,45;
bra $L2;
$L18:
.loc 1 1566 9
mov.u32 %r39,0;
$L2:
st.u32 [%r60],%r39;
.loc 1 1616 23
and.b32 %r25,%r62,-33;
.loc 1 1616 5
setp.eq.u32 %r70,%r25,70;
@ %r70 bra $L3;
.loc 1 1623 6
setp.ne.u32 %r71,%r25,69;
@ %r71 bra $L4;
.loc 1 1624 11
add.u32 %r58,%r58,1;
.loc 1 1635 13
add.u64 %r79,%frame,8;
mov.u32 %r74,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r57;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r74;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r61;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r79;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r80,[%value_in];
}
mov.u64 %r50,%r80;
bra $L5;
$L23:
.loc 1 1642 10
ld.u32 %r54,[%r61];
bra $L6;
$L15:
.loc 1 1641 23
mov.u32 %r81,1;
sub.u32 %r54,%r81,%r58;
.loc 1 1641 12
st.u32 [%r61],%r54;
$L6:
.loc 1 1642 10
cvt.s64.s32 %r82,%r54;
.loc 1 1642 7
add.u64 %r83,%r82,%r47;
add.u64 %r35,%r126,%r83;
$L13:
.loc 1 1644 6
setp.neu.f64 %r84,%r57,0d0000000000000000;
@ %r84 bra $L7;
.loc 1 1645 8
st.u64 [%frame],%r35;
mov.u64 %r29,%r35;
bra $L8;
$L7:
.loc 1 1646 14
ld.u64 %r29,[%frame];
.loc 1 1646 9
setp.le.u64 %r85,%r35,%r29;
@ %r85 bra $L8;
.loc 1 1647 11
mov.u32 %r87,48;
$L9:
.loc 1 1647 8
add.u64 %r86,%r29,1;
st.u64 [%frame],%r86;
.loc 1 1647 11
st.u8 [%r29],%r87;
.loc 1 1646 14
ld.u64 %r29,[%frame];
.loc 1 1646 9
setp.lt.u64 %r88,%r29,%r35;
@ %r88 bra $L9;
$L8:
.loc 1 1650 18
sub.u64 %r89,%r29,%r50;
.loc 1 1650 12
cvt.u32.u64 %r31,%r89;
st.u32 [%r63],%r31;
.loc 1 1655 28
set.u32.gt.s32 %r91,%r65,0;
neg.s32 %r92,%r91;
.loc 1 1655 4
set.u32.gt.s32 %r94,%r31,0;
neg.s32 %r95,%r94;
.loc 1 1655 28
cvt.u16.u32 %r97,%r92;
cvt.u16.u32 %r98,%r95;
and.b16 %r96,%r97,%r98;
cvt.u32.u16 %r99,%r96;
cvt.u16.u8 %r100,%r99;
setp.ne.u16 %r101,%r100,0;
@ ! %r101 bra $L21;
mov.u64 %r36,%r50;
mov.u64 %r37,%r64;
.loc 1 1655 11
mov.u32 %r40,0;
$L11:
.loc 1 1656 15
ld.s8 %r103,[%r36];
st.u32 [%r37],%r103;
.loc 1 1655 40
add.u32 %r40,%r40,1;
.loc 1 1655 28
add.u64 %r36,%r36,1;
add.u64 %r37,%r37,4;
ld.u32 %r105,[%r63];
min.s32 %r104,%r65,%r105;
setp.gt.s32 %r106,%r104,%r40;
@ %r106 bra $L11;
bra $L21;
$L5:
.loc 1 1638 15
cvt.s64.s32 %r107,%r58;
.loc 1 1638 6
add.u64 %r35,%r50,%r107;
bra $L13;
$L4:
.loc 1 1635 13
add.u64 %r115,%frame,8;
mov.u32 %r110,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r57;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r110;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r61;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r115;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r116,[%value_in];
}
mov.u64 %r50,%r116;
.loc 1 1637 7
setp.ne.u32 %r117,%r25,71;
@ ! %r117 bra $L22;
bra $L5;
$L3:
.loc 1 1635 13
add.u64 %r125,%frame,8;
mov.u32 %r120,3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r57;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r120;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r61;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r125;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r126,[%value_in];
}
mov.u64 %r50,%r126;
.loc 1 1638 15
cvt.s64.s32 %r47,%r58;
.loc 1 1640 7
ld.s8 %r129,[%r126];
cvt.u16.u32 %r128,%r129;
set.u32.eq.u16 %r130,%r128,48;
neg.s32 %r131,%r130;
.loc 1 1640 24
set.u32.neu.f64 %r133,%r57,0d0000000000000000;
neg.s32 %r134,%r133;
cvt.u16.u32 %r136,%r131;
cvt.u16.u32 %r137,%r134;
and.b16 %r135,%r136,%r137;
cvt.u32.u16 %r138,%r135;
cvt.u16.u8 %r139,%r138;
setp.ne.u16 %r140,%r139,0;
@ ! %r140 bra $L23;
bra $L15;
$L17:
.loc 1 1638 15
cvt.s64.s32 %r141,%r58;
.loc 1 1638 6
add.u64 %r35,%r50,%r141;
bra $L13;
$L22:
.loc 1 1637 44
and.b32 %r142,%r59,1;
.loc 1 1637 35
setp.ne.u32 %r143,%r142,0;
@ %r143 bra $L17;
.loc 1 1650 18
ld.u64 %r29,[%frame];
bra $L8;
$L21:
.loc 1 1660 1
mov.u64 %value,%r64;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _svfwprintf_r
.visible .func (.param .u32 %value_out) _svfwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[400];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u32 %r42;
.reg .u64 %r63;
.reg .u32 %r79;
.reg .u32 %r83;
.reg .u64 %r107;
.reg .u32 %r129;
.reg .u32 %r142;
.reg .u32 %r143;
.reg .u64 %r146;
.reg .u32 %r147;
.reg .u32 %r151;
.reg .u32 %r154;
.reg .u64 %r159;
.reg .u32 %r160;
.reg .u64 %r164;
.reg .u32 %r166;
.reg .u64 %r170;
.reg .u32 %r172;
.reg .u32 %r176;
.reg .u32 %r179;
.reg .u32 %r182;
.reg .u64 %r186;
.reg .u64 %r187;
.reg .u32 %r188;
.reg .u32 %r190;
.reg .u32 %r192;
.reg .u64 %r199;
.reg .u64 %r200;
.reg .u64 %r201;
.reg .u64 %r204;
.reg .u32 %r205;
.reg .u64 %r212;
.reg .u32 %r214;
.reg .u32 %r216;
.reg .u64 %r219;
.reg .u32 %r220;
.reg .u32 %r221;
.reg .u64 %r224;
.reg .u32 %r225;
.reg .u32 %r226;
.reg .u32 %r229;
.reg .u32 %r235;
.reg .u64 %r237;
.reg .u32 %r239;
.reg .u64 %r240;
.reg .u32 %r242;
.reg .u64 %r245;
.reg .u32 %r246;
.reg .u64 %r247;
.reg .u64 %r255;
.reg .u64 %r259;
.reg .u64 %r263;
.reg .u32 %r264;
.reg .u64 %r269;
.reg .u32 %r270;
.reg .u32 %r278;
.reg .u32 %r279;
.reg .u64 %r280;
.reg .u64 %r284;
.reg .u32 %r285;
.reg .u32 %r286;
.reg .u32 %r287;
.reg .u32 %r288;
.reg .u32 %r289;
.reg .u64 %r290;
.reg .u32 %r291;
.reg .u32 %r292;
.reg .u64 %r293;
.reg .u64 %r294;
.reg .u64 %r296;
.reg .u64 %r297;
.reg .u64 %r298;
.reg .u32 %r299;
.reg .u32 %r306;
.reg .u32 %r307;
.reg .u64 %r315;
.reg .u64 %r318;
.reg .u32 %r320;
.reg .u32 %r322;
.reg .u32 %r323;
.reg .u32 %r324;
.reg .u32 %r325;
.reg .u32 %r326;
.reg .u64 %r327;
.reg .u64 %r328;
.reg .u32 %r329;
.reg .f64 %r330;
.reg .u64 %r331;
.reg .u64 %r334;
.reg .u32 %r335;
.reg .u64 %r337;
.reg .u64 %r338;
.reg .u64 %r339;
.reg .u32 %r340;
.reg .u32 %r343;
.reg .u64 %r344;
.reg .u64 %r345;
.reg .u64 %r347;
.reg .u32 %r348;
.reg .u32 %r350;
.reg .u32 %r352;
.reg .u64 %r353;
.reg .u64 %r363;
.reg .u64 %r365;
.reg .u64 %r369;
.reg .u64 %r370;
.reg .u64 %r371;
.reg .u64 %r374;
.reg .u64 %r375;
.reg .u64 %r377;
.reg .u64 %r378;
.reg .u64 %r380;
.reg .u64 %r381;
.reg .u64 %r382;
.reg .u64 %r383;
.reg .u64 %r384;
.reg .u64 %r386;
.reg .u64 %r387;
.reg .u64 %r388;
.reg .u64 %r389;
.reg .u32 %r390;
.reg .u32 %r391;
.reg .u64 %r393;
.reg .u32 %r394;
.reg .u64 %r396;
.reg .u64 %r398;
.reg .u64 %r399;
.reg .u32 %r400;
.reg .u32 %r401;
.reg .u64 %r411;
.reg .u32 %r413;
.reg .u32 %r414;
.reg .u32 %r415;
.reg .u32 %r418;
.reg .u64 %r419;
.reg .u32 %r420;
.reg .u32 %r421;
.reg .u32 %r422;
.reg .u32 %r423;
.reg .u64 %r425;
.reg .u32 %r426;
.reg .u64 %r427;
.reg .u64 %r431;
.reg .u32 %r432;
.reg .u32 %r435;
.reg .u64 %r436;
.reg .u32 %r437;
.reg .u32 %r438;
.reg .u32 %r439;
.reg .u32 %r440;
.reg .u32 %r441;
.reg .u32 %r443;
.reg .u64 %r444;
.reg .u32 %r445;
.reg .u64 %r446;
.reg .u64 %r447;
.reg .u64 %r448;
.reg .u64 %r449;
.reg .u32 %r454;
.reg .u64 %r456;
.reg .u64 %r457;
.reg .u32 %r458;
.reg .u16 %r459;
.reg .pred %r461;
.reg .u64 %r462;
.reg .pred %r463;
.reg .u64 %r465;
.reg .u64 %r466;
.reg .pred %r467;
.reg .u32 %r468;
.reg .u32 %r469;
.reg .u64 %r471;
.reg .u32 %r472;
.reg .u32 %r474;
.reg .u32 %r475;
.reg .u32 %r477;
.reg .u32 %r478;
.reg .u16 %r479;
.reg .u16 %r480;
.reg .u16 %r481;
.reg .u32 %r482;
.reg .u16 %r483;
.reg .pred %r484;
.reg .u32 %r486;
.reg .u32 %r487;
.reg .u32 %r489;
.reg .u32 %r490;
.reg .u16 %r491;
.reg .u16 %r492;
.reg .u16 %r493;
.reg .u32 %r494;
.reg .u16 %r495;
.reg .pred %r496;
.reg .u64 %r497;
.reg .u64 %r499;
.reg .pred %r500;
.reg .u64 %r501;
.reg .u64 %r502;
.reg .u64 %r503;
.reg .u32 %r504;
.reg .pred %r505;
.reg .u32 %r510;
.reg .pred %r511;
.reg .pred %r512;
.reg .u32 %r513;
.reg .pred %r514;
.reg .pred %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .pred %r518;
.reg .pred %r519;
.reg .pred %r520;
.reg .pred %r521;
.reg .pred %r522;
.reg .pred %r523;
.reg .pred %r524;
.reg .pred %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .pred %r528;
.reg .pred %r529;
.reg .pred %r530;
.reg .pred %r531;
.reg .pred %r532;
.reg .pred %r533;
.reg .pred %r534;
.reg .pred %r535;
.reg .pred %r536;
.reg .pred %r538;
.reg .u32 %r539;
.reg .pred %r540;
.reg .pred %r541;
.reg .pred %r542;
.reg .pred %r543;
.reg .pred %r544;
.reg .pred %r545;
.reg .pred %r546;
.reg .pred %r547;
.reg .pred %r548;
.reg .pred %r549;
.reg .pred %r550;
.reg .pred %r551;
.reg .pred %r552;
.reg .u32 %r553;
.reg .pred %r554;
.reg .u32 %r556;
.reg .u32 %r557;
.reg .u32 %r558;
.reg .u32 %r559;
.reg .u32 %r560;
.reg .pred %r561;
.reg .u32 %r563;
.reg .u32 %r564;
.reg .u32 %r565;
.reg .u32 %r566;
.reg .u32 %r567;
.reg .pred %r568;
.reg .pred %r569;
.reg .pred %r570;
.reg .u32 %r571;
.reg .pred %r572;
.reg .u32 %r573;
.reg .u32 %r574;
.reg .pred %r575;
.reg .u32 %r578;
.reg .u32 %r579;
.reg .pred %r581;
.reg .u32 %r582;
.reg .pred %r583;
.reg .u32 %r584;
.reg .pred %r585;
.reg .u32 %r586;
.reg .pred %r587;
.reg .pred %r592;
.reg .u32 %r593;
.reg .pred %r594;
.reg .u64 %r595;
.reg .f64 %r598;
.reg .pred %r599;
.reg .pred %r600;
.reg .pred %r601;
.reg .u32 %r602;
.reg .pred %r603;
.reg .u64 %r604;
.reg .u64 %r605;
.reg .u32 %r607;
.reg .pred %r608;
.reg .u32 %r609;
.reg .pred %r610;
.reg .pred %r611;
.reg .u32 %r612;
.reg .u32 %r614;
.reg .u32 %r615;
.reg .u32 %r617;
.reg .u32 %r618;
.reg .u16 %r619;
.reg .u16 %r620;
.reg .u16 %r621;
.reg .u32 %r622;
.reg .u16 %r623;
.reg .pred %r624;
.reg .u32 %r634;
.reg .u64 %r638;
.reg .pred %r639;
.reg .pred %r640;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u64 %r645;
.reg .pred %r646;
.reg .u32 %r659;
.reg .u64 %r663;
.reg .u32 %r664;
.reg .pred %r665;
.reg .u32 %r667;
.reg .u32 %r668;
.reg .u32 %r670;
.reg .u32 %r671;
.reg .u16 %r672;
.reg .u16 %r673;
.reg .u16 %r674;
.reg .u32 %r675;
.reg .u16 %r676;
.reg .pred %r677;
.reg .pred %r678;
.reg .pred %r679;
.reg .u32 %r680;
.reg .pred %r681;
.reg .u32 %r683;
.reg .u32 %r684;
.reg .pred %r687;
.reg .pred %r690;
.reg .pred %r694;
.reg .u64 %r700;
.reg .u64 %r702;
.reg .u64 %r703;
.reg .u64 %r704;
.reg .u64 %r706;
.reg .u64 %r708;
.reg .u32 %r709;
.reg .u32 %r710;
.reg .pred %r711;
.reg .pred %r712;
.reg .u32 %r713;
.reg .pred %r714;
.reg .pred %r715;
.reg .u32 %r716;
.reg .pred %r717;
.reg .pred %r718;
.reg .u32 %r719;
.reg .pred %r720;
.reg .pred %r721;
.reg .u32 %r722;
.reg .pred %r723;
.reg .u32 %r724;
.reg .pred %r725;
.reg .u64 %r726;
.reg .u32 %r727;
.reg .pred %r728;
.reg .u64 %r729;
.reg .u64 %r730;
.reg .u32 %r731;
.reg .pred %r732;
.reg .u64 %r733;
.reg .u64 %r734;
.reg .u32 %r735;
.reg .pred %r736;
.reg .u64 %r737;
.reg .u64 %r738;
.reg .u32 %r739;
.reg .pred %r740;
.reg .u32 %r741;
.reg .pred %r742;
.reg .u32 %r743;
.reg .pred %r744;
.reg .u16 %r745;
.reg .u32 %r746;
.reg .u32 %r747;
.reg .u32 %r748;
.reg .pred %r749;
.reg .pred %r750;
.reg .pred %r751;
.reg .u64 %r755;
.reg .pred %r756;
.reg .u64 %r758;
.reg .pred %r759;
.reg .u64 %r762;
.reg .u64 %r763;
.reg .u64 %r764;
.reg .pred %r765;
.reg .u64 %r769;
.reg .u32 %r770;
.reg .pred %r771;
.reg .u32 %r772;
.reg .u64 %r774;
.reg .u32 %r775;
.reg .u64 %r776;
.reg .u64 %r778;
.reg .u32 %r779;
.reg .pred %r780;
.reg .u64 %r784;
.reg .u64 %r785;
.reg .pred %r786;
.reg .u64 %r787;
.reg .u64 %r789;
.reg .u32 %r790;
.reg .u64 %r792;
.reg .u32 %r793;
.reg .pred %r794;
.reg .u32 %r795;
.reg .pred %r796;
.reg .u32 %r797;
.reg .pred %r798;
.reg .u16 %r799;
.reg .pred %r800;
.reg .u32 %r801;
.reg .pred %r802;
.reg .u32 %r803;
.reg .pred %r804;
.reg .u32 %r805;
.reg .pred %r806;
.reg .u16 %r807;
.reg .u32 %r808;
.reg .pred %r809;
.reg .pred %r810;
.reg .u32 %r811;
.reg .u32 %r812;
.reg .pred %r813;
.reg .u32 %r815;
.reg .u32 %r816;
.reg .u32 %r818;
.reg .u32 %r819;
.reg .u16 %r820;
.reg .u16 %r821;
.reg .u16 %r822;
.reg .u32 %r823;
.reg .u16 %r824;
.reg .pred %r825;
.reg .pred %r826;
.reg .pred %r827;
.reg .u32 %r828;
.reg .u32 %r829;
.reg .pred %r830;
.reg .u32 %r832;
.reg .u32 %r833;
.reg .u16 %r835;
.reg .u16 %r836;
.reg .u16 %r838;
.reg .u16 %r839;
.reg .u32 %r841;
.reg .u16 %r842;
.reg .pred %r843;
.reg .u64 %r845;
.reg .u64 %r847;
.reg .u32 %r848;
.reg .u64 %r850;
.reg .u64 %r852;
.reg .pred %r853;
.reg .u32 %r854;
.reg .u32 %r855;
.reg .u64 %r857;
.reg .u32 %r858;
.reg .u32 %r859;
.reg .pred %r862;
.reg .u64 %r864;
.reg .u64 %r866;
.reg .u64 %r867;
.reg .u64 %r868;
.reg .u64 %r869;
.reg .u32 %r870;
.reg .pred %r871;
.reg .u64 %r873;
.reg .u64 %r875;
.reg .pred %r876;
.reg .pred %r877;
.reg .u32 %r878;
.reg .pred %r879;
.reg .pred %r880;
.reg .u32 %r881;
.reg .pred %r882;
.reg .pred %r884;
.reg .pred %r885;
.reg .pred %r886;
.reg .u64 %r888;
.reg .pred %r889;
.reg .u32 %r894;
.reg .pred %r895;
.reg .pred %r896;
.reg .u64 %r898;
.reg .pred %r899;
.reg .u32 %r904;
.reg .pred %r905;
.reg .u32 %r906;
.reg .pred %r907;
.reg .u64 %r909;
.reg .u32 %r910;
.reg .pred %r911;
.reg .u32 %r916;
.reg .pred %r917;
.reg .u64 %r920;
.reg .u32 %r921;
.reg .pred %r922;
.reg .u32 %r927;
.reg .pred %r928;
.reg .pred %r929;
.reg .pred %r930;
.reg .pred %r931;
.reg .u64 %r933;
.reg .pred %r934;
.reg .u32 %r939;
.reg .pred %r940;
.reg .pred %r941;
.reg .u64 %r943;
.reg .pred %r944;
.reg .u32 %r949;
.reg .pred %r950;
.reg .pred %r951;
.reg .pred %r952;
.reg .u64 %r954;
.reg .pred %r955;
.reg .u32 %r960;
.reg .pred %r961;
.reg .pred %r962;
.reg .u64 %r964;
.reg .pred %r965;
.reg .u32 %r970;
.reg .pred %r971;
.reg .u32 %r972;
.reg .pred %r973;
.reg .u64 %r974;
.reg .u32 %r975;
.reg .pred %r976;
.reg .u32 %r981;
.reg .pred %r982;
.reg .pred %r983;
.reg .pred %r984;
.reg .u64 %r985;
.reg .u64 %r986;
.reg .u32 %r987;
.reg .pred %r988;
.reg .u32 %r993;
.reg .pred %r994;
.reg .u32 %r995;
.reg .pred %r996;
.reg .u32 %r997;
.reg .pred %r998;
.reg .u64 %r1000;
.reg .u32 %r1001;
.reg .pred %r1002;
.reg .u32 %r1007;
.reg .pred %r1008;
.reg .pred %r1009;
.reg .pred %r1010;
.reg .u64 %r1012;
.reg .pred %r1013;
.reg .u32 %r1018;
.reg .pred %r1019;
.reg .pred %r1020;
.reg .u64 %r1022;
.reg .pred %r1023;
.reg .u32 %r1028;
.reg .pred %r1029;
.reg .pred %r1030;
.reg .u64 %r1031;
.reg .u64 %r1032;
.reg .u32 %r1033;
.reg .pred %r1034;
.reg .u32 %r1039;
.reg .pred %r1040;
.reg .pred %r1041;
.reg .u32 %r1042;
.reg .u32 %r1043;
.reg .pred %r1044;
.reg .u64 %r1046;
.reg .u32 %r1047;
.reg .pred %r1048;
.reg .u32 %r1053;
.reg .pred %r1054;
.reg .pred %r1055;
.reg .pred %r1056;
.reg .u64 %r1058;
.reg .pred %r1059;
.reg .u32 %r1064;
.reg .pred %r1065;
.reg .pred %r1066;
.reg .u64 %r1068;
.reg .pred %r1069;
.reg .u32 %r1074;
.reg .pred %r1075;
.reg .u64 %r1076;
.reg .pred %r1077;
.reg .u32 %r1082;
.reg .pred %r1083;
.reg .pred %r1088;
.reg .u64 %r1089;
.reg .u32 %r1090;
.reg .pred %r1091;
.reg .u32 %r1096;
.reg .pred %r1097;
.reg .pred %r1098;
.reg .pred %r1099;
.reg .u64 %r1101;
.reg .pred %r1102;
.reg .u32 %r1107;
.reg .pred %r1108;
.reg .pred %r1109;
.reg .u64 %r1111;
.reg .pred %r1112;
.reg .u32 %r1117;
.reg .pred %r1118;
.reg .u64 %r1119;
.reg .pred %r1120;
.reg .u32 %r1121;
.reg .pred %r1122;
.reg .u64 %r1124;
.reg .u32 %r1125;
.reg .pred %r1126;
.reg .u32 %r1131;
.reg .pred %r1132;
.reg .u64 %r1133;
.reg .u64 %r1134;
.reg .u64 %r1135;
.reg .u64 %r1137;
.reg .pred %r1138;
.reg .u64 %r1139;
.reg .u64 %r1140;
.reg .u32 %r1141;
.reg .pred %r1142;
.reg .u32 %r1147;
.reg .pred %r1148;
.reg .u32 %r1149;
.reg .u32 %r1150;
.reg .pred %r1151;
.reg .pred %r1152;
.reg .u64 %r1154;
.reg .pred %r1155;
.reg .u32 %r1160;
.reg .pred %r1161;
.reg .pred %r1162;
.reg .u64 %r1164;
.reg .pred %r1165;
.reg .u32 %r1170;
.reg .pred %r1171;
.reg .u32 %r1172;
.reg .pred %r1173;
.reg .u32 %r1174;
.reg .pred %r1175;
.reg .u64 %r1176;
.reg .pred %r1177;
.reg .u32 %r1182;
.reg .pred %r1183;
.reg .u64 %r1185;
.reg .pred %r1186;
.reg .u32 %r1191;
.reg .pred %r1192;
.reg .u32 %r1193;
.reg .pred %r1194;
.reg .u64 %r1195;
.reg .u64 %r1196;
.reg .pred %r1197;
.reg .u32 %r1202;
.reg .pred %r1203;
.reg .u32 %r1204;
.reg .pred %r1205;
.reg .pred %r1206;
.reg .u64 %r1208;
.reg .pred %r1209;
.reg .u32 %r1214;
.reg .pred %r1215;
.reg .pred %r1216;
.reg .u64 %r1218;
.reg .pred %r1219;
.reg .u32 %r1224;
.reg .pred %r1225;
.reg .u32 %r1226;
.reg .u64 %r1227;
.reg .pred %r1228;
.reg .u32 %r1233;
.reg .pred %r1234;
.reg .u32 %r1235;
.reg .u64 %r1237;
.reg .pred %r1238;
.reg .u32 %r1243;
.reg .pred %r1244;
.reg .u32 %r1245;
.reg .pred %r1246;
.reg .pred %r1247;
.reg .pred %r1248;
.reg .u64 %r1250;
.reg .pred %r1251;
.reg .u32 %r1256;
.reg .pred %r1257;
.reg .pred %r1258;
.reg .u64 %r1260;
.reg .pred %r1261;
.reg .u32 %r1266;
.reg .pred %r1267;
.reg .u32 %r1268;
.reg .pred %r1269;
.reg .u32 %r1270;
.reg .pred %r1271;
.reg .u32 %r1276;
.reg .pred %r1277;
.reg .u64 %r1280;
.reg .pred %r1281;
.reg .u64 %r1285;
.reg .u32 %r1286;
.reg .pred %r1288;
.reg .u16 %r1291;
.reg .pred %r1293;
.reg .u64 %r1296;
.reg .u32 %r1297;
.reg .pred %r1298;
.reg .u32 %r1301;
.reg .u32 %r1308;
.reg .u64 %r1312;
.reg .pred %r1313;
.reg .pred %r1314;
.reg .pred %r1315;
.reg .pred %r1316;
.reg .u32 %r1318;
.reg .u32 %r1319;
.reg .u32 %r1321;
.reg .u32 %r1322;
.reg .u16 %r1323;
.reg .u16 %r1324;
.reg .u16 %r1325;
.reg .u32 %r1326;
.reg .u16 %r1327;
.reg .pred %r1328;
.reg .u16 %r1329;
.reg .u64 %r1330;
.reg .pred %r1331;
.reg .pred %r1334;
.reg .u64 %r1335;
.reg .u64 %r1339;
.reg .u32 %r1340;
.reg .u32 %r1341;
.reg .u64 %r1365;
.reg .u64 %r1366;
.reg .u32 %r1367;
.reg .u64 %r1368;
.reg .u64 %r1369;
.reg .u64 %r1370;
.reg .u64 %r1371;
.reg .u64 %r1372;
.reg .u64 %r1373;
.reg .u64 %r1374;
.reg .u64 %r1375;
.reg .u64 %r1376;
mov.u64 %r446,%ar0;
mov.u64 %r447,%ar1;
mov.u64 %r448,%ar2;
mov.u64 %r449,%ar3;
.loc 1 424 6
mov.u32 %r454,0;
st.u32 [%frame+376],%r454;
.loc 1 476 29
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r456,[%value_in];
}
.loc 1 476 28
ld.u64 %r457,[%r456];
.loc 1 476 18
ld.s8 %r458,[%r457];
st.u32 [%frame+388],%r458;
.loc 1 612 12
ld.u16 %r1329,[%r447+16];
and.b16 %r459,%r1329,128;
setp.eq.u16 %r461,%r459,0;
@ %r461 bra $L25;
.loc 1 612 33
ld.u64 %r462,[%r447+24];
setp.ne.u64 %r463,%r462,0;
@ %r463 bra $L25;
.loc 1 614 28
mov.u64 %r465,64;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r465;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r466,[%value_in];
}
.loc 1 614 26
st.u64 [%r447],%r466;
.loc 1 614 17
st.u64 [%r447+24],%r466;
.loc 1 615 6
setp.ne.u64 %r467,%r466,0;
@ %r467 bra $L26;
.loc 1 617 17
mov.u32 %r468,12;
st.u32 [%r446],%r468;
.loc 1 618 11
mov.u32 %r445,-1;
bra $L24;
$L26:
.loc 1 620 17
cvt.u32.u64 %r469,%r465;
st.u32 [%r447+32],%r469;
$L25:
.loc 1 626 14
add.u64 %r1330,%frame,160;
st.u64 [%frame+344],%r1330;
.loc 1 627 16
mov.u64 %r471,0;
st.u64 [%frame+360],%r471;
.loc 1 628 17
cvt.u32.u64 %r472,%r471;
st.u32 [%frame+352],%r472;
.loc 1 416 42
mov.f64 %r330,0d0000000000000000;
.loc 1 626 21
mov.u64 %r293,%r1330;
.loc 1 435 11
mov.u64 %r240,%r471;
.loc 1 419 6
cvt.u32.u64 %r39,%r240;
.loc 1 630 6
cvt.u32.u64 %r445,%r240;
.loc 1 647 4
add.u64 %r1365,%frame,344;
.loc 1 656 9
mov.u64 %r1366,%r240;
cvt.u32.u64 %r1367,%r240;
.loc 1 1508 5
add.u64 %r1368,%frame,316;
.loc 1 1500 6
add.u64 %r1369,%frame,388;
.loc 1 1438 4
add.u64 %r1370,%frame,368;
.loc 1 1436 4
add.u64 %r1371,%frame,392;
add.u64 %r1372,%frame,324;
.loc 1 1687 36
add.u64 %r1373,%frame,323;
.loc 1 1042 9
add.u64 %r1374,%frame,376;
add.u64 %r1375,%frame,380;
add.u64 %r1376,%frame,384;
$L28:
.loc 1 644 24
ld.u32 %r306,[%r448];
.loc 1 644 38
set.u32.ne.u32 %r474,%r306,37;
neg.s32 %r475,%r474;
set.u32.ne.u32 %r477,%r306,0;
neg.s32 %r478,%r477;
cvt.u16.u32 %r480,%r475;
cvt.u16.u32 %r481,%r478;
and.b16 %r479,%r480,%r481;
.loc 1 644 23
cvt.u32.u16 %r482,%r479;
cvt.u16.u8 %r483,%r482;
setp.eq.u16 %r484,%r483,0;
@ %r484 bra $L271;
mov.u64 %r328,%r448;
$L30:
mov.u64 %r337,%r328;
.loc 1 645 21
add.u64 %r328,%r328,4;
.loc 1 644 24
ld.u32 %r306,[%r328];
.loc 1 644 38
set.u32.ne.u32 %r486,%r306,0;
neg.s32 %r487,%r486;
set.u32.ne.u32 %r489,%r306,37;
neg.s32 %r490,%r489;
cvt.u16.u32 %r492,%r487;
cvt.u16.u32 %r493,%r490;
and.b16 %r491,%r492,%r493;
.loc 1 644 23
cvt.u32.u16 %r494,%r491;
cvt.u16.u8 %r495,%r494;
setp.ne.u16 %r496,%r495,0;
@ %r496 bra $L30;
.loc 1 646 16
sub.u64 %r497,%r328,%r448;
shr.s64 %r499,%r497,2;
.loc 1 646 10
cvt.u32.u64 %r307,%r499;
.loc 1 646 6
setp.eq.u32 %r500,%r307,0;
@ %r500 bra $L29;
.loc 1 647 4
st.u64 [%r293],%r448;
cvt.s64.s32 %r501,%r307;
shl.b64 %r37,%r501,2;
st.u64 [%r293+8],%r37;
ld.u64 %r503,[%frame+360];
add.u64 %r502,%r503,%r37;
st.u64 [%frame+360],%r502;
ld.u32 %r504,[%frame+352];
add.u32 %r42,%r504,1;
st.u32 [%frame+352],%r42;
setp.gt.s32 %r505,%r42,7;
@ %r505 bra $L31;
add.u64 %r293,%r293,16;
bra $L32;
$L31:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r510,[%value_in];
}
setp.ne.u32 %r511,%r510,0;
@ ! %r511 bra $L397;
ld.u16 %r1329,[%r447+16];
bra $L33;
$L397:
mov.u64 %r293,%r1330;
$L32:
.loc 1 648 8
add.u32 %r445,%r445,%r307;
.loc 1 650 21
ld.u32 %r306,[%r337+4];
bra $L29;
$L271:
.loc 1 644 23
mov.u64 %r328,%r448;
$L29:
.loc 1 650 20
setp.eq.u32 %r512,%r306,0;
@ %r512 bra $L34;
.loc 1 653 6
add.u64 %r448,%r328,4;
.loc 1 659 8
mov.u32 %r513,0;
st.u32 [%frame+392],%r513;
.loc 1 671 14
ld.u32 %r441,[%r328+4];
mov.u32 %r322,%r513;
mov.u32 %r324,%r513;
.loc 1 658 8
mov.u32 %r288,-1;
.loc 1 657 9
mov.u32 %r287,%r513;
.loc 1 655 9
mov.u32 %r285,%r513;
bra $L35;
$L272:
.loc 1 747 10
mov.u64 %r449,%r201;
$L35:
.loc 1 671 18
add.u64 %r448,%r448,4;
.loc 1 671 12
mov.u32 %r279,%r441;
$L36:
.loc 1 672 11
setp.eq.u32 %r514,%r279,99;
@ %r514 bra $L37;
setp.gt.u32 %r515,%r279,99;
@ %r515 bra $L38;
setp.eq.u32 %r516,%r279,46;
@ %r516 bra $L39;
setp.gt.u32 %r517,%r279,46;
@ %r517 bra $L40;
setp.eq.u32 %r518,%r279,42;
@ %r518 bra $L41;
setp.gt.u32 %r519,%r279,42;
@ %r519 bra $L42;
setp.eq.u32 %r520,%r279,32;
@ %r520 bra $L43;
setp.eq.u32 %r521,%r279,35;
@ %r521 bra $L44;
bra $L398;
$L42:
setp.eq.u32 %r522,%r279,43;
@ %r522 bra $L46;
setp.eq.u32 %r523,%r279,45;
@ %r523 bra $L47;
bra $L48;
$L40:
setp.eq.u32 %r524,%r279,71;
@ %r524 bra $L49;
setp.gt.u32 %r525,%r279,71;
@ %r525 bra $L50;
setp.gt.u32 %r526,%r279,57;
@ %r526 bra $L51;
setp.gt.u32 %r527,%r279,48;
@ %r527 bra $L52;
setp.eq.u32 %r528,%r279,48;
@ %r528 bra $L53;
mov.u32 %r279,47;
bra $L48;
$L51:
setp.eq.u32 %r529,%r279,69;
@ %r529 bra $L49;
bra $L48;
$L50:
setp.eq.u32 %r530,%r279,76;
@ %r530 bra $L54;
setp.eq.u32 %r531,%r279,88;
@ %r531 bra $L55;
bra $L48;
$L38:
setp.eq.u32 %r532,%r279,111;
@ %r532 bra $L56;
setp.gt.u32 %r533,%r279,111;
@ %r533 bra $L57;
setp.eq.u32 %r534,%r279,105;
@ %r534 bra $L58;
setp.gt.u32 %r535,%r279,105;
@ %r535 bra $L59;
setp.eq.u32 %r536,%r279,104;
@ %r536 bra $L60;
@ %r534 bra $L48;
setp.eq.u32 %r538,%r279,100;
@ %r538 bra $L58;
add.u32 %r539,%r279,-101;
setp.gt.u32 %r540,%r539,2;
@ %r540 bra $L48;
bra $L49;
$L59:
setp.eq.u32 %r541,%r279,108;
@ %r541 bra $L61;
setp.eq.u32 %r542,%r279,110;
@ %r542 bra $L62;
bra $L48;
$L57:
setp.eq.u32 %r543,%r279,115;
@ %r543 bra $L63;
setp.gt.u32 %r544,%r279,115;
@ %r544 bra $L64;
setp.eq.u32 %r545,%r279,112;
@ %r545 bra $L65;
setp.eq.u32 %r546,%r279,113;
@ %r546 bra $L66;
bra $L48;
$L64:
setp.eq.u32 %r547,%r279,117;
@ %r547 bra $L67;
setp.ne.u32 %r548,%r279,120;
@ %r548 bra $L48;
setp.eq.u32 %r549,%r322,0;
@ %r549 bra $L68;
st.u32 [%frame+392],%r324;
$L68:
.loc 1 1291 10
cvta.const.u64 %r240,$LC4;
bra $L69;
$L47:
.loc 1 762 14
ld.u32 %r441,[%r448];
bra $L70;
$L43:
ld.u32 %r441,[%r448];
.loc 1 704 7
setp.ne.u32 %r550,%r324,0;
selp.u32 %r322,%r322,1,%r550;
selp.u32 %r324,%r324,32,%r550;
bra $L35;
$L44:
.loc 1 708 10
or.b32 %r285,%r285,1;
.loc 1 671 14
ld.u32 %r441,[%r448];
.loc 1 709 4
bra $L35;
$L41:
.loc 1 747 10
add.u64 %r201,%r449,4;
ld.u32 %r287,[%r449];
.loc 1 762 14
ld.u32 %r441,[%r448];
.loc 1 751 7
setp.ge.s32 %r551,%r287,0;
@ %r551 bra $L272;
.loc 1 753 10
neg.s32 %r287,%r287;
.loc 1 747 10
mov.u64 %r449,%r201;
$L70:
.loc 1 756 10
or.b32 %r285,%r285,4;
.loc 1 757 4
bra $L35;
$L46:
.loc 1 671 14
ld.u32 %r441,[%r448];
.loc 1 760 4
mov.u32 %r322,1;
.loc 1 759 9
mov.u32 %r324,%r279;
.loc 1 760 4
bra $L35;
$L39:
.loc 1 762 18
add.u64 %r338,%r448,4;
.loc 1 762 12
ld.u32 %r279,[%r448];
.loc 1 762 7
setp.eq.u32 %r552,%r279,42;
@ %r552 bra $L72;
.loc 1 801 11
add.u32 %r553,%r279,-48;
.loc 1 801 10
setp.le.u32 %r554,%r553,9;
@ %r554 bra $L73;
.loc 1 762 18
mov.u64 %r448,%r338;
.loc 1 801 10
mov.u32 %r288,%r513;
bra $L36;
$L72:
.loc 1 792 10
ld.u32 %r340,[%r449];
max.s32 %r288,%r340,-1;
.loc 1 671 14
ld.u32 %r441,[%r448+4];
.loc 1 792 10
add.u64 %r449,%r449,4;
.loc 1 762 18
mov.u64 %r448,%r338;
.loc 1 798 5
bra $L35;
$L73:
mov.u64 %r339,%r338;
.loc 1 800 6
mov.u32 %r326,%r513;
$L75:
.loc 1 802 12
shl.b32 %r556,%r326,2;
add.u32 %r557,%r556,%r326;
add.u32 %r558,%r557,%r557;
.loc 1 802 16
add.u32 %r559,%r558,-48;
add.u32 %r326,%r559,%r279;
mov.u64 %r280,%r339;
add.u64 %r448,%r339,4;
mov.u64 %r339,%r448;
.loc 1 803 8
ld.u32 %r279,[%r280];
.loc 1 801 11
add.u32 %r560,%r279,-48;
.loc 1 801 10
setp.le.u32 %r561,%r560,9;
@ %r561 bra $L75;
.loc 1 805 9
max.s32 %r288,%r326,-1;
.loc 1 806 4
bra $L36;
$L53:
.loc 1 813 10
or.b32 %r285,%r285,128;
.loc 1 671 14
ld.u32 %r441,[%r448];
.loc 1 814 4
bra $L35;
$L52:
mov.u64 %r334,%r448;
.loc 1 817 6
mov.u32 %r287,0;
$L77:
.loc 1 819 12
shl.b32 %r563,%r287,2;
add.u32 %r564,%r563,%r287;
add.u32 %r565,%r564,%r564;
.loc 1 819 16
add.u32 %r566,%r565,-48;
add.u32 %r287,%r566,%r279;
mov.u64 %r365,%r334;
add.u64 %r334,%r334,4;
mov.u64 %r448,%r334;
.loc 1 820 8
ld.u32 %r279,[%r365];
.loc 1 821 13
add.u32 %r567,%r279,-48;
.loc 1 821 4
setp.le.u32 %r568,%r567,9;
@ %r568 bra $L77;
bra $L36;
$L54:
.loc 1 837 10
or.b32 %r285,%r285,8;
.loc 1 671 14
ld.u32 %r441,[%r448];
.loc 1 838 4
bra $L35;
$L60:
.loc 1 847 11
or.b32 %r285,%r285,64;
.loc 1 671 14
ld.u32 %r441,[%r448];
.loc 1 848 4
bra $L35;
$L61:
.loc 1 851 8
ld.u32 %r441,[%r448];
.loc 1 851 7
setp.ne.u32 %r569,%r441,108;
@ %r569 bra $L78;
.loc 1 853 11
or.b32 %r285,%r285,32;
.loc 1 671 14
ld.u32 %r441,[%r448+4];
.loc 1 852 8
add.u64 %r448,%r448,4;
bra $L35;
$L78:
.loc 1 856 11
or.b32 %r285,%r285,16;
bra $L35;
$L66:
.loc 1 859 10
or.b32 %r285,%r285,32;
.loc 1 671 14
ld.u32 %r441,[%r448];
.loc 1 860 4
bra $L35;
$L37:
setp.eq.u32 %r570,%r322,0;
@ %r570 bra $L79;
st.u32 [%frame+392],%r324;
$L79:
.loc 1 747 10
add.u64 %r399,%r449,4;
.loc 1 903 30
and.b32 %r571,%r285,16;
.loc 1 903 19
setp.ne.u32 %r572,%r571,0;
@ %r572 bra $L80;
.loc 1 904 17
ld.u32 %r573,[%r449];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r573;
call (%value_in),btowc,(%out_arg1);
ld.param.u32 %r574,[%value_in];
}
.loc 1 905 8
setp.ne.u32 %r575,%r574,-1;
@ %r575 bra $L81;
.loc 1 906 20
ld.u16 %r1329,[%r447+16];
or.b16 %r1329,%r1329,64;
st.u16 [%r447+16],%r1329;
.loc 1 907 9
bra $L33;
$L81:
.loc 1 909 11
st.u32 [%frame],%r574;
.loc 1 903 42
bra $L82;
$L80:
.loc 1 913 11
ld.u32 %r578,[%r449];
st.u32 [%frame],%r578;
$L82:
.loc 1 915 10
mov.u32 %r579,0;
st.u32 [%frame+4],%r579;
.loc 1 917 9
st.u32 [%frame+392],%r579;
.loc 1 918 4
mov.u64 %r449,%r399;
mov.u32 %r390,1;
.loc 1 916 9
mov.u32 %r292,%r390;
.loc 1 902 7
mov.u64 %r284,%frame;
.loc 1 918 4
bra $L83;
$L58:
setp.eq.u32 %r581,%r322,0;
@ %r581 bra $L84;
st.u32 [%frame+392],%r324;
$L84:
.loc 1 921 13
and.b32 %r582,%r285,32;
setp.eq.u32 %r583,%r582,0;
@ %r583 bra $L85;
add.u64 %r187,%r449,7;
and.b64 %r369,%r187,-8;
add.u64 %r449,%r369,8;
ld.u64 %r63,[%r369];
mov.u64 %r290,%r63;
bra $L86;
$L85:
and.b32 %r584,%r285,16;
setp.eq.u32 %r585,%r584,0;
@ %r585 bra $L87;
add.u64 %r386,%r449,7;
and.b64 %r370,%r386,-8;
add.u64 %r449,%r370,8;
ld.u64 %r63,[%r370];
mov.u64 %r290,%r63;
bra $L86;
$L87:
.loc 1 747 10
add.u64 %r398,%r449,4;
.loc 1 921 13
and.b32 %r586,%r285,64;
setp.eq.u32 %r587,%r586,0;
@ %r587 bra $L88;
ld.s16 %r290,[%r449];
.loc 1 923 8
mov.u64 %r63,%r290;
.loc 1 921 13
mov.u64 %r449,%r398;
bra $L86;
$L88:
ld.s32 %r290,[%r449];
.loc 1 923 8
mov.u64 %r63,%r290;
.loc 1 921 13
mov.u64 %r449,%r398;
$L86:
.loc 1 923 7
setp.ge.s64 %r592,%r63,0;
@ %r592 bra $L89;
.loc 1 929 12
neg.s64 %r290,%r290;
.loc 1 930 10
mov.u32 %r593,45;
st.u32 [%frame+392],%r593;
mov.u32 %r401,%r593;
.loc 1 932 9
mov.u32 %r291,1;
bra $L90;
$L49:
setp.eq.u32 %r594,%r322,0;
@ %r594 bra $L91;
st.u32 [%frame+392],%r324;
$L91:
.loc 1 921 13
add.u64 %r595,%r449,7;
and.b64 %r411,%r595,-8;
add.u64 %r449,%r411,8;
.loc 1 947 25
ld.f64 %r330,[%r411];
.loc 1 958 8
abs.f64 %r598,%r330;
setp.leu.f64 %r599,%r598,0d7fefffffffffffff;
@ %r599 bra $L94;
.loc 1 959 8
setp.lt.f64 %r600,%r330,0d0000000000000000;
@ %r600 bra $L95;
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
bra $L96;
$L94:
.loc 1 969 7
setp.nan.f64 %r601,%r330,%r330;
@ ! %r601 bra $L399;
bra $L97;
$L95:
.loc 1 960 11
mov.u32 %r602,45;
st.u32 [%frame+392],%r602;
mov.u32 %r401,%r602;
$L96:
.loc 1 961 8
setp.le.u32 %r603,%r279,71;
@ %r603 bra $L273;
.loc 1 964 9
cvta.const.u64 %r284,$LC1;
bra $L99;
$L273:
.loc 1 962 9
cvta.const.u64 %r284,$LC0;
$L99:
.loc 1 966 11
and.b32 %r286,%r285,-129;
.loc 1 967 5
mov.u32 %r390,3;
mov.u64 %r297,%r1366;
.loc 1 965 10
mov.u32 %r292,%r390;
.loc 1 656 9
mov.u32 %r288,%r1367;
.loc 1 661 8
mov.u32 %r289,%r1367;
.loc 1 967 5
bra $L100;
$L97:
.loc 1 970 9
mov.b64 %r604,%r330;
shr.u64 %r605,%r604,63;
cvt.u32.u64 %r607,%r605;
.loc 1 970 8
setp.ne.u32 %r608,%r607,0;
@ %r608 bra $L101;
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
bra $L102;
$L101:
.loc 1 971 11
mov.u32 %r609,45;
st.u32 [%frame+392],%r609;
mov.u32 %r401,%r609;
$L102:
.loc 1 972 8
setp.le.u32 %r610,%r279,71;
@ %r610 bra $L274;
.loc 1 975 9
cvta.const.u64 %r284,$LC3;
bra $L103;
$L274:
.loc 1 973 9
cvta.const.u64 %r284,$LC2;
$L103:
.loc 1 977 11
and.b32 %r286,%r285,-129;
.loc 1 978 5
mov.u32 %r390,3;
mov.u64 %r297,%r1366;
.loc 1 976 10
mov.u32 %r292,%r390;
.loc 1 656 9
mov.u32 %r288,%r1367;
.loc 1 661 8
mov.u32 %r289,%r1367;
.loc 1 978 5
bra $L100;
$L399:
.loc 1 1040 10
or.b32 %r286,%r285,256;
.loc 1 1034 7
setp.eq.u32 %r611,%r288,-1;
@ %r611 bra $L275;
.loc 1 1036 33
and.b32 %r612,%r279,-33;
set.u32.eq.u32 %r614,%r612,71;
neg.s32 %r615,%r614;
.loc 1 1036 42
set.u32.eq.u32 %r617,%r288,0;
neg.s32 %r618,%r617;
cvt.u16.u32 %r620,%r615;
cvt.u16.u32 %r621,%r618;
and.b16 %r619,%r620,%r621;
cvt.u32.u16 %r622,%r619;
cvt.u16.u8 %r623,%r622;
setp.ne.u16 %r624,%r623,0;
@ %r624 bra $L105;
bra $L104;
$L275:
.loc 1 1035 10
mov.u32 %r288,6;
$L104:
.loc 1 1042 9
mov.u32 %r634,40;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r330;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r288;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r286;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1376;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1375;
.param .u32 %out_arg7;
st.param.u32 [%out_arg7],%r279;
.param .u64 %out_arg8;
st.param.u64 [%out_arg8],%r1374;
.param .u64 %out_arg9;
st.param.u64 [%out_arg9],%frame;
.param .u32 %out_arg10;
st.param.u32 [%out_arg10],%r634;
call (%value_in),wcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7,%out_arg8,%out_arg9,%out_arg10);
ld.param.u64 %r638,[%value_in];
}
mov.u64 %r284,%r638;
.loc 1 1049 7
setp.ne.u64 %r639,%frame,%r284;
@ %r639 bra $L276;
.loc 1 1049 26
ld.u32 %r1340,[%frame+376];
.loc 1 1049 18
setp.le.s32 %r640,%r1340,40;
@ %r640 bra $L277;
bra $L269;
$L292:
.loc 1 1037 10
mov.u32 %r288,%r1301;
$L269:
.loc 1 1051 20
cvt.s64.s32 %r643,%r1340;
shl.b64 %r644,%r643,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r644;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r645,[%value_in];
}
mov.u64 %r297,%r645;
.loc 1 1050 8
setp.ne.u64 %r646,%r645,0;
@ %r646 bra $L107;
.loc 1 1054 20
ld.u16 %r1329,[%r447+16];
or.b16 %r1329,%r1329,64;
st.u16 [%r447+16],%r1329;
bra $L33;
$L107:
.loc 1 1057 10
ld.u32 %r659,[%frame+376];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r330;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r288;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r286;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1376;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1375;
.param .u32 %out_arg7;
st.param.u32 [%out_arg7],%r279;
.param .u64 %out_arg8;
st.param.u64 [%out_arg8],%r1374;
.param .u64 %out_arg9;
st.param.u64 [%out_arg9],%r297;
.param .u32 %out_arg10;
st.param.u32 [%out_arg10],%r659;
call (%value_in),wcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7,%out_arg8,%out_arg9,%out_arg10);
ld.param.u64 %r663,[%value_in];
}
mov.u64 %r284,%r663;
bra $L106;
$L276:
mov.u64 %r297,%r1366;
bra $L106;
$L277:
mov.u64 %r297,%r1366;
$L106:
.loc 1 1082 15
ld.u32 %r289,[%frame+380];
.loc 1 1061 25
and.b32 %r664,%r279,-33;
.loc 1 1061 7
setp.ne.u32 %r665,%r664,71;
@ %r665 bra $L108;
ld.u32 %r1340,[%frame+376];
$L265:
.loc 1 1090 21
mov.u32 %r414,%r1340;
.loc 1 1062 8
set.u32.lt.s32 %r667,%r289,-3;
neg.s32 %r668,%r667;
.loc 1 1062 20
set.u32.lt.s32 %r670,%r288,%r289;
neg.s32 %r671,%r670;
cvt.u16.u32 %r673,%r668;
cvt.u16.u32 %r674,%r671;
or.b16 %r672,%r673,%r674;
cvt.u32.u16 %r675,%r672;
cvt.u16.u8 %r676,%r675;
setp.eq.u16 %r677,%r676,0;
@ %r677 bra $L109;
.loc 1 1063 9
add.u32 %r279,%r279,-2;
bra $L110;
$L108:
.loc 1 1071 7
setp.eq.u32 %r678,%r279,102;
@ %r678 bra $L111;
.loc 1 1074 20
ld.u32 %r414,[%frame+376];
$L110:
.loc 1 1072 5
add.u32 %r79,%r289,-1;
st.u32 [%frame+380],%r79;
.loc 1 1674 7
st.u32 [%frame+316],%r279;
.loc 1 1675 5
setp.ge.s32 %r679,%r79,0;
@ %r679 bra $L278;
.loc 1 1676 7
mov.u32 %r680,1;
sub.u32 %r79,%r680,%r289;
.loc 1 1677 8
mov.u32 %r323,45;
bra $L112;
$L278:
.loc 1 1680 8
mov.u32 %r323,43;
$L112:
st.u32 [%frame+320],%r323;
.loc 1 1682 5
setp.le.s32 %r681,%r79,9;
@ %r681 bra $L113;
.loc 1 1681 4
mov.u64 %r363,%r1368;
$L114:
mov.u64 %r107,%r363;
.loc 1 1684 9
add.u64 %r363,%r107,-4;
.loc 1 1684 11
rem.s32 %r683,%r79,10;
add.u32 %r684,%r683,48;
.loc 1 1684 9
st.u32 [%r363],%r684;
mov.u32 %r325,%r79;
.loc 1 1685 17
div.s32 %r79,%r79,10;
.loc 1 1685 3
setp.gt.s32 %r687,%r325,99;
@ %r687 bra $L114;
.loc 1 1686 8
add.u64 %r318,%r107,-8;
.loc 1 1686 10
add.u32 %r415,%r79,48;
.loc 1 1686 8
st.u32 [%r363+-4],%r415;
.loc 1 1687 3
setp.ge.u64 %r690,%r318,%r1368;
@ %r690 bra $L279;
mov.u64 %r353,%r1372;
$L117:
.loc 1 1687 43
add.u64 %r318,%r318,4;
.loc 1 1687 39
st.u32 [%r353],%r415;
.loc 1 1687 3
add.u64 %r353,%r353,4;
setp.lt.u64 %r694,%r318,%r1368;
@ %r694 bra $L116;
.loc 1 1687 36
sub.u64 %r700,%r1373,%r107;
and.b64 %r702,%r700,-4;
add.u64 %r703,%r702,4;
add.u64 %r704,%r1372,%r703;
.loc 1 1694 12
sub.u64 %r706,%r704,%r1368;
shr.s64 %r708,%r706,2;
cvt.u32.u64 %r39,%r708;
bra $L115;
$L116:
.loc 1 1687 41
ld.u32 %r415,[%r318];
bra $L117;
$L113:
.loc 1 1691 9
mov.u32 %r709,48;
st.u32 [%frame+324],%r709;
.loc 1 1692 10
add.u32 %r710,%r79,48;
.loc 1 1692 8
st.u32 [%frame+328],%r710;
mov.u32 %r39,4;
bra $L115;
$L279:
.loc 1 1687 3
mov.u32 %r39,2;
$L115:
.loc 1 1074 10
add.u32 %r292,%r414,%r39;
.loc 1 1075 8
setp.gt.s32 %r711,%r414,1;
@ %r711 bra $L118;
and.b32 %r289,%r285,1;
.loc 1 1075 18
setp.ne.u32 %r712,%r289,0;
@ %r712 bra $L118;
.loc 1 1424 10
max.s32 %r390,%r292,0;
bra $L119;
$L118:
.loc 1 1076 6
add.u32 %r292,%r292,1;
.loc 1 1424 10
max.s32 %r390,%r292,0;
.loc 1 661 8
mov.u32 %r289,0;
bra $L119;
$L111:
and.b32 %r713,%r285,1;
or.b32 %r413,%r713,%r288;
.loc 1 1082 9
setp.le.s32 %r714,%r289,0;
@ %r714 bra $L120;
.loc 1 1084 16
setp.eq.u32 %r715,%r413,0;
@ %r715 bra $L280;
.loc 1 1085 21
add.u32 %r716,%r288,1;
.loc 1 1085 13
add.u32 %r292,%r716,%r289;
mov.u32 %r390,%r292;
bra $L119;
$L120:
.loc 1 1087 20
setp.eq.u32 %r717,%r413,0;
@ %r717 bra $L281;
.loc 1 1089 10
add.u32 %r292,%r288,2;
mov.u32 %r390,%r292;
bra $L119;
$L109:
.loc 1 1090 15
setp.gt.s32 %r718,%r1340,%r289;
@ %r718 bra $L122;
.loc 1 1092 9
and.b32 %r719,%r285,1;
setp.ne.u32 %r720,%r719,0;
@ %r720 bra $L123;
.loc 1 1424 10
max.s32 %r390,%r289,0;
mov.u32 %r292,%r289;
mov.u32 %r279,103;
bra $L119;
$L123:
.loc 1 1093 7
add.u32 %r292,%r289,1;
.loc 1 1424 10
max.s32 %r390,%r292,0;
mov.u32 %r279,103;
bra $L119;
$L122:
.loc 1 1096 9
setp.gt.s32 %r721,%r289,0;
@ %r721 bra $L282;
mov.u32 %r722,2;
sub.u32 %r299,%r722,%r289;
bra $L124;
$L282:
mov.u32 %r299,1;
$L124:
.loc 1 1095 11
add.u32 %r292,%r299,%r1340;
.loc 1 1424 10
max.s32 %r390,%r292,0;
mov.u32 %r279,103;
bra $L119;
$L280:
mov.u32 %r390,%r289;
mov.u32 %r292,%r289;
bra $L119;
$L281:
mov.u32 %r390,1;
.loc 1 1089 10
mov.u32 %r292,%r390;
$L119:
.loc 1 1117 8
ld.u32 %r288,[%frame+384];
.loc 1 1117 7
setp.eq.u32 %r723,%r288,0;
@ %r723 bra $L125;
.loc 1 1118 10
mov.u32 %r724,45;
st.u32 [%frame+392],%r724;
.loc 1 656 9
mov.u32 %r288,0;
bra $L126;
$L62:
setp.eq.u32 %r725,%r322,0;
@ %r725 bra $L127;
st.u32 [%frame+392],%r324;
$L127:
.loc 1 921 13
add.u64 %r726,%r449,7;
and.b64 %r396,%r726,-8;
add.u64 %r449,%r396,8;
.loc 1 1132 14
and.b32 %r727,%r285,32;
.loc 1 1132 7
setp.eq.u32 %r728,%r727,0;
@ %r728 bra $L128;
.loc 1 1133 34
ld.u64 %r729,[%r396];
cvt.s64.s32 %r730,%r445;
st.u64 [%r729],%r730;
bra $L28;
$L128:
.loc 1 1136 14
and.b32 %r731,%r285,16;
.loc 1 1136 7
setp.eq.u32 %r732,%r731,0;
@ %r732 bra $L130;
.loc 1 1137 34
ld.u64 %r733,[%r396];
cvt.s64.s32 %r734,%r445;
st.u64 [%r733],%r734;
bra $L28;
$L130:
.loc 1 1138 19
and.b32 %r735,%r285,64;
.loc 1 1138 12
setp.eq.u32 %r736,%r735,0;
@ %r736 bra $L131;
.loc 1 1139 35
ld.u64 %r737,[%r396];
st.u16 [%r737],%r445;
bra $L28;
$L131:
.loc 1 1145 33
ld.u64 %r738,[%r396];
st.u32 [%r738],%r445;
bra $L28;
$L56:
.loc 1 1148 13
and.b32 %r739,%r285,32;
setp.eq.u32 %r740,%r739,0;
@ %r740 bra $L132;
add.u64 %r347,%r449,7;
and.b64 %r384,%r347,-8;
add.u64 %r449,%r384,8;
ld.u64 %r290,[%r384];
.loc 1 1149 9
mov.u32 %r291,0;
bra $L133;
$L132:
.loc 1 1148 13
and.b32 %r741,%r285,16;
setp.eq.u32 %r742,%r741,0;
@ %r742 bra $L134;
add.u64 %r331,%r449,7;
and.b64 %r378,%r331,-8;
add.u64 %r449,%r378,8;
ld.u64 %r290,[%r378];
.loc 1 1149 9
mov.u32 %r291,%r739;
bra $L133;
$L134:
.loc 1 747 10
ld.u32 %r394,[%r449];
add.u64 %r449,%r449,4;
.loc 1 1148 13
and.b32 %r743,%r285,64;
setp.eq.u32 %r744,%r743,0;
@ %r744 bra $L135;
cvt.u16.u32 %r745,%r394;
cvt.u64.u16 %r290,%r745;
.loc 1 1149 9
mov.u32 %r291,%r741;
bra $L133;
$L135:
.loc 1 1148 13
cvt.u64.u32 %r290,%r394;
.loc 1 1149 9
mov.u32 %r291,%r743;
bra $L133;
$L65:
.loc 1 1163 25
add.u64 %r380,%r449,7;
and.b64 %r377,%r380,-8;
add.u64 %r449,%r377,8;
.loc 1 1163 11
ld.u64 %r290,[%r377];
.loc 1 1166 10
or.b32 %r285,%r285,2;
.loc 1 1167 10
mov.u32 %r746,48;
st.u32 [%frame+368],%r746;
.loc 1 1168 10
mov.u32 %r747,120;
st.u32 [%frame+372],%r747;
.loc 1 1165 10
cvta.const.u64 %r240,$LC4;
.loc 1 1164 9
mov.u32 %r291,2;
.loc 1 1168 15
mov.u32 %r279,%r747;
.loc 1 1169 4
bra $L133;
$L63:
.loc 1 1174 7
add.u64 %r371,%r449,7;
and.b64 %r381,%r371,-8;
add.u64 %r449,%r381,8;
ld.u64 %r284,[%r381];
.loc 1 1178 9
mov.u32 %r748,0;
st.u32 [%frame+392],%r748;
.loc 1 1184 7
setp.ne.u64 %r749,%r284,0;
@ %r749 bra $L136;
.loc 1 1186 39
min.u32 %r292,%r288,6;
mov.u32 %r390,%r292;
.loc 1 1185 8
cvta.const.u64 %r284,$LC6;
bra $L83;
$L136:
.loc 1 1242 30
and.b32 %r289,%r285,16;
.loc 1 1242 19
setp.ne.u32 %r750,%r289,0;
@ %r750 bra $L137;
.loc 1 1246 8
setp.eq.u32 %r751,%r288,-1;
@ %r751 bra $L138;
.loc 1 1247 16
cvt.s64.s32 %r298,%r288;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r289;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r298;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r755,[%value_in];
}
.loc 1 1248 27
setp.eq.u64 %r756,%r755,0;
@ %r756 bra $L139;
.loc 1 1248 21
sub.u64 %r298,%r755,%r284;
bra $L139;
$L138:
.loc 1 1250 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r758,[%value_in];
}
mov.u64 %r298,%r758;
$L139:
.loc 1 1251 8
setp.le.u64 %r759,%r298,39;
@ %r759 bra $L140;
.loc 1 1252 64
add.u64 %r762,%r298,1;
.loc 1 1252 39
shl.b64 %r763,%r762,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r763;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r764,[%value_in];
}
mov.u64 %r315,%r764;
.loc 1 1252 12
setp.ne.u64 %r765,%r764,0;
@ %r765 bra $L283;
.loc 1 1254 18
ld.u16 %r1329,[%r447+16];
or.b16 %r1329,%r1329,64;
st.u16 [%r447+16],%r1329;
bra $L33;
$L140:
.loc 1 1260 5
setp.eq.u64 %r1334,%r298,0;
@ %r1334 bra $L284;
mov.u64 %r297,%r1366;
.loc 1 1259 9
mov.u64 %r315,%frame;
bra $L141;
$L283:
mov.u64 %r297,%r315;
setp.eq.u64 %r1334,%r298,0;
$L141:
mov.u64 %r344,%r315;
mov.u64 %r345,0;
$L143:
.loc 1 1261 20
add.u64 %r769,%r284,%r345;
ld.s8 %r770,[%r769];
st.u32 [%r344],%r770;
.loc 1 1260 5
add.u64 %r345,%r345,1;
add.u64 %r344,%r344,4;
setp.gt.u64 %r771,%r298,%r345;
@ %r771 bra $L143;
.loc 1 1260 35
@ %r1334 bra $L144;
add.u64 %r774,%r298,-1;
cvt.u32.u64 %r775,%r774;
add.u32 %r772,%r775,1;
bra $L145;
$L144:
mov.u32 %r772,1;
$L145:
mov.u32 %r292,%r772;
.loc 1 1260 25
selp.u64 %r776,1,%r298,%r1334;
.loc 1 1262 7
shl.b64 %r778,%r776,2;
add.u64 %r393,%r315,%r778;
mov.u32 %r390,%r292;
mov.u64 %r284,%r315;
bra $L142;
$L284:
.loc 1 1260 5
mov.u32 %r390,%r289;
.loc 1 1260 15
mov.u32 %r292,%r289;
.loc 1 1260 5
mov.u64 %r393,%frame;
mov.u64 %r297,%r1366;
.loc 1 1259 9
mov.u64 %r284,%frame;
$L142:
.loc 1 1262 14
mov.u32 %r779,0;
st.u32 [%r393],%r779;
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
.loc 1 656 9
mov.u32 %r288,%r289;
.loc 1 1242 42
mov.u32 %r286,%r285;
bra $L100;
$L137:
.loc 1 1265 12
setp.eq.u32 %r780,%r288,-1;
@ %r780 bra $L148;
.loc 1 1271 18
cvt.s64.s32 %r784,%r288;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r748;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r784;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r785,[%value_in];
}
mov.u64 %r297,%r785;
.loc 1 1273 8
setp.ne.u64 %r786,%r297,0;
@ %r786 bra $L149;
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
mov.u32 %r390,%r288;
mov.u32 %r292,%r288;
mov.u32 %r286,%r285;
.loc 1 656 9
cvt.u32.u64 %r288,%r297;
.loc 1 661 8
cvt.u32.u64 %r289,%r297;
bra $L100;
$L149:
.loc 1 1274 15
sub.u64 %r787,%r297,%r284;
shr.s64 %r789,%r787,2;
cvt.u32.u64 %r790,%r789;
min.s32 %r292,%r288,%r790;
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
.loc 1 1424 10
max.s32 %r390,%r292,0;
mov.u32 %r286,%r285;
mov.u64 %r297,%r1366;
.loc 1 656 9
mov.u32 %r288,%r1367;
.loc 1 661 8
mov.u32 %r289,%r1367;
bra $L100;
$L148:
.loc 1 1280 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r792,[%value_in];
}
.loc 1 1280 10
cvt.u32.u64 %r292,%r792;
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
.loc 1 1424 10
max.s32 %r390,%r292,0;
mov.u32 %r286,%r285;
mov.u64 %r297,%r1366;
.loc 1 656 9
mov.u32 %r288,%r1367;
.loc 1 661 8
mov.u32 %r289,%r1367;
bra $L100;
$L67:
.loc 1 1284 13
and.b32 %r793,%r285,32;
setp.eq.u32 %r794,%r793,0;
@ %r794 bra $L150;
add.u64 %r387,%r449,7;
and.b64 %r382,%r387,-8;
add.u64 %r449,%r382,8;
ld.u64 %r290,[%r382];
.loc 1 1285 9
mov.u32 %r291,1;
bra $L133;
$L150:
.loc 1 1284 13
and.b32 %r795,%r285,16;
setp.eq.u32 %r796,%r795,0;
@ %r796 bra $L151;
add.u64 %r383,%r449,7;
and.b64 %r388,%r383,-8;
add.u64 %r449,%r388,8;
ld.u64 %r290,[%r388];
.loc 1 1285 9
mov.u32 %r291,1;
bra $L133;
$L151:
.loc 1 747 10
ld.u32 %r391,[%r449];
add.u64 %r449,%r449,4;
.loc 1 1284 13
and.b32 %r797,%r285,64;
setp.eq.u32 %r798,%r797,0;
@ %r798 bra $L152;
cvt.u16.u32 %r799,%r391;
cvt.u64.u16 %r290,%r799;
.loc 1 1285 9
mov.u32 %r291,1;
bra $L133;
$L152:
.loc 1 1284 13
cvt.u64.u32 %r290,%r391;
.loc 1 1285 9
mov.u32 %r291,1;
bra $L133;
$L55:
setp.eq.u32 %r800,%r322,0;
@ %r800 bra $L153;
st.u32 [%frame+392],%r324;
$L153:
.loc 1 1288 10
cvta.const.u64 %r240,$LC5;
$L69:
.loc 1 1292 17
and.b32 %r801,%r285,32;
setp.eq.u32 %r802,%r801,0;
@ %r802 bra $L154;
add.u64 %r374,%r449,7;
and.b64 %r200,%r374,-8;
add.u64 %r449,%r200,8;
ld.u64 %r290,[%r200];
bra $L155;
$L154:
and.b32 %r803,%r285,16;
setp.eq.u32 %r804,%r803,0;
@ %r804 bra $L156;
add.u64 %r247,%r449,7;
and.b64 %r375,%r247,-8;
add.u64 %r449,%r375,8;
ld.u64 %r290,[%r375];
bra $L155;
$L156:
.loc 1 747 10
ld.u32 %r400,[%r449];
add.u64 %r449,%r449,4;
.loc 1 1292 17
and.b32 %r805,%r285,64;
setp.eq.u32 %r806,%r805,0;
@ %r806 bra $L157;
cvt.u16.u32 %r807,%r400;
cvt.u64.u16 %r290,%r807;
bra $L155;
$L157:
cvt.u64.u32 %r290,%r400;
$L155:
.loc 1 1295 14
and.b32 %r808,%r285,1;
.loc 1 1295 7
setp.eq.u32 %r809,%r808,0;
@ %r809 bra $L285;
.loc 1 1295 20
setp.eq.u64 %r810,%r290,0;
@ %r810 bra $L286;
.loc 1 1296 11
mov.u32 %r811,48;
st.u32 [%frame+368],%r811;
.loc 1 1297 11
st.u32 [%frame+372],%r279;
.loc 1 1298 11
or.b32 %r285,%r285,2;
.loc 1 1293 9
mov.u32 %r291,2;
bra $L133;
$L285:
mov.u32 %r291,2;
bra $L133;
$L286:
mov.u32 %r291,2;
$L133:
.loc 1 1305 16
mov.u32 %r812,0;
st.u32 [%frame+392],%r812;
mov.u32 %r401,%r812;
$L90:
.loc 1 1311 14
setp.eq.u32 %r813,%r288,-1;
@ %r813 bra $L158;
.loc 1 1312 11
and.b32 %r286,%r285,-129;
.loc 1 1320 15
set.u32.ne.u64 %r815,%r290,0;
neg.s32 %r816,%r815;
.loc 1 1320 28
set.u32.ne.u32 %r818,%r288,0;
neg.s32 %r819,%r818;
.loc 1 1320 20
cvt.u16.u32 %r821,%r816;
cvt.u16.u32 %r822,%r819;
or.b16 %r820,%r821,%r822;
.loc 1 1320 7
cvt.u32.u16 %r823,%r820;
cvt.u16.u8 %r824,%r823;
setp.eq.u16 %r825,%r824,0;
@ %r825 bra $L159;
.loc 1 1312 11
mov.u32 %r285,%r286;
$L158:
setp.eq.u32 %r826,%r291,1;
@ %r826 bra $L160;
setp.eq.u32 %r827,%r291,2;
@ %r827 bra $L287;
mov.u64 %r284,%r1330;
$L162:
mov.u64 %r389,%r284;
.loc 1 1329 13
add.u64 %r284,%r284,-4;
.loc 1 1329 15
cvt.u32.u64 %r829,%r290;
and.b32 %r828,%r829,7;
add.u32 %r129,%r828,48;
.loc 1 1329 13
st.u32 [%r284],%r129;
.loc 1 1330 14
shr.u64 %r290,%r290,3;
.loc 1 1331 6
setp.ne.u64 %r830,%r290,0;
@ %r830 bra $L162;
.loc 1 1333 22
set.u32.ne.u32 %r832,%r129,48;
neg.s32 %r833,%r832;
.loc 1 1333 9
cvt.u16.u32 %r836,%r285;
and.b16 %r835,%r836,1;
.loc 1 1333 22
cvt.u16.u32 %r839,%r833;
and.b16 %r838,%r839,%r835;
cvt.u32.u16 %r841,%r838;
cvt.u16.u8 %r842,%r841;
setp.ne.u16 %r843,%r842,0;
@ %r843 bra $L163;
.loc 1 1395 21
sub.u64 %r845,%r1330,%r284;
shr.s64 %r847,%r845,2;
.loc 1 1395 9
cvt.u32.u64 %r292,%r847;
mov.u32 %r286,%r285;
bra $L164;
$L163:
.loc 1 1334 13
add.u64 %r327,%r389,-8;
mov.u32 %r848,48;
st.u32 [%r284+-4],%r848;
.loc 1 1395 21
sub.u64 %r850,%r1330,%r327;
shr.s64 %r852,%r850,2;
.loc 1 1395 9
cvt.u32.u64 %r292,%r852;
mov.u32 %r286,%r285;
.loc 1 1334 13
mov.u64 %r284,%r327;
bra $L164;
$L293:
.loc 1 1312 11
mov.u32 %r285,%r286;
$L160:
.loc 1 1339 9
setp.gt.u64 %r853,%r290,9;
@ %r853 bra $L288;
.loc 1 1340 15
cvt.u32.u64 %r855,%r290;
add.u32 %r854,%r855,48;
.loc 1 1340 13
st.u32 [%frame+156],%r854;
.loc 1 1341 7
mov.u32 %r286,%r285;
mov.u32 %r292,1;
.loc 1 1340 13
add.u64 %r284,%frame,156;
.loc 1 1341 7
bra $L164;
$L288:
.loc 1 1319 7
mov.u64 %r284,%r1330;
$L165:
.loc 1 1347 14
add.u64 %r284,%r284,-4;
.loc 1 1347 16
rem.u64 %r857,%r290,10;
cvt.u32.u64 %r859,%r857;
add.u32 %r858,%r859,48;
.loc 1 1347 14
st.u32 [%r284],%r858;
mov.u64 %r444,%r290;
.loc 1 1366 15
div.u64 %r290,%r290,10;
.loc 1 1367 6
setp.gt.u64 %r862,%r444,9;
@ %r862 bra $L165;
.loc 1 1395 21
sub.u64 %r864,%r1330,%r284;
shr.s64 %r866,%r864,2;
.loc 1 1395 9
cvt.u32.u64 %r292,%r866;
mov.u32 %r286,%r285;
bra $L164;
$L287:
mov.u64 %r284,%r1330;
$L161:
.loc 1 1372 13
add.u64 %r284,%r284,-4;
.loc 1 1372 28
and.b64 %r867,%r290,15;
.loc 1 1372 20
shl.b64 %r868,%r867,2;
add.u64 %r869,%r240,%r868;
.loc 1 1372 13
ld.u32 %r870,[%r869];
st.u32 [%r284],%r870;
.loc 1 1373 14
shr.u64 %r290,%r290,4;
.loc 1 1374 6
setp.ne.u64 %r871,%r290,0;
@ %r871 bra $L161;
.loc 1 1395 21
sub.u64 %r873,%r1330,%r284;
shr.s64 %r875,%r873,2;
.loc 1 1395 9
cvt.u32.u64 %r292,%r875;
mov.u32 %r286,%r285;
bra $L164;
$L159:
.loc 1 1392 32
setp.ne.u32 %r876,%r291,0;
@ %r876 bra $L289;
.loc 1 1392 55
and.b32 %r292,%r285,1;
.loc 1 1392 45
setp.eq.u32 %r877,%r292,0;
@ %r877 bra $L290;
.loc 1 1393 32
mov.u32 %r878,48;
st.u32 [%frame+156],%r878;
mov.u32 %r288,%r291;
add.u64 %r284,%frame,156;
bra $L164;
$L289:
mov.u32 %r288,0;
mov.u32 %r292,%r288;
.loc 1 1319 7
mov.u64 %r284,%r1330;
bra $L164;
$L290:
mov.u32 %r288,%r291;
mov.u64 %r284,%r1330;
$L164:
.loc 1 1424 10
max.s32 %r390,%r288,%r292;
mov.u64 %r297,%r1366;
.loc 1 661 8
mov.u32 %r289,%r1367;
bra $L100;
$L398:
setp.eq.u32 %r879,%r322,0;
@ %r879 bra $L166;
$L267:
st.u32 [%frame+392],%r324;
$L166:
.loc 1 1399 7
setp.eq.u32 %r880,%r279,0;
@ %r880 bra $L34;
$L268:
.loc 1 1403 8
st.u32 [%frame],%r279;
.loc 1 1405 9
mov.u32 %r881,0;
st.u32 [%frame+392],%r881;
.loc 1 1406 4
mov.u32 %r390,1;
.loc 1 1404 9
mov.u32 %r292,%r390;
.loc 1 1402 7
mov.u64 %r284,%frame;
.loc 1 1406 4
bra $L83;
$L125:
.loc 1 1425 7
ld.u32 %r401,[%frame+392];
$L100:
.loc 1 1425 6
setp.eq.u32 %r882,%r401,0;
@ %r882 bra $L167;
$L126:
.loc 1 1426 10
add.u32 %r390,%r390,1;
$L167:
.loc 1 1427 13
and.b32 %r142,%r286,2;
.loc 1 1427 6
setp.eq.u32 %r1331,%r142,0;
@ %r1331 bra $L168;
.loc 1 1428 10
add.u32 %r390,%r390,2;
$L168:
.loc 1 1431 14
and.b32 %r143,%r286,132;
.loc 1 1436 4
ld.u64 %r419,[%frame+360];
.loc 1 1431 6
setp.ne.u32 %r884,%r143,0;
@ %r884 bra $L169;
.loc 1 1432 4
sub.u32 %r343,%r287,%r390;
setp.le.s32 %r885,%r343,0;
@ %r885 bra $L169;
ld.u32 %r418,[%frame+352];
setp.le.s32 %r886,%r343,16;
@ ! %r886 bra $L400;
cvta.const.u64 %r1335,blanks$1;
bra $L170;
$L400:
cvta.const.u64 %r1335,blanks$1;
$L174:
st.u64 [%r293],%r1335;
mov.u64 %r888,64;
st.u64 [%r293+8],%r888;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r418,%r418,1;
st.u32 [%frame+352],%r418;
setp.gt.s32 %r889,%r418,7;
@ %r889 bra $L171;
add.u64 %r293,%r293,16;
bra $L172;
$L171:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r894,[%value_in];
}
setp.ne.u32 %r895,%r894,0;
@ %r895 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r418,[%frame+352];
mov.u64 %r293,%r1330;
$L172:
add.u32 %r343,%r343,-16;
setp.gt.s32 %r896,%r343,16;
@ %r896 bra $L174;
$L170:
st.u64 [%r293],%r1335;
cvt.s64.s32 %r898,%r343;
shl.b64 %r146,%r898,2;
st.u64 [%r293+8],%r146;
add.u64 %r419,%r419,%r146;
st.u64 [%frame+360],%r419;
add.u32 %r147,%r418,1;
st.u32 [%frame+352],%r147;
setp.gt.s32 %r899,%r147,7;
@ %r899 bra $L175;
add.u64 %r293,%r293,16;
bra $L169;
$L175:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r904,[%value_in];
}
setp.ne.u32 %r905,%r904,0;
@ %r905 bra $L173;
.loc 1 1436 4
ld.u64 %r419,[%frame+360];
.loc 1 1432 4
mov.u64 %r293,%r1330;
$L169:
.loc 1 1435 6
ld.u32 %r906,[%frame+392];
setp.eq.u32 %r907,%r906,0;
@ %r907 bra $L176;
.loc 1 1436 4
st.u64 [%r293],%r1371;
mov.u64 %r909,4;
st.u64 [%r293+8],%r909;
add.u64 %r419,%r419,4;
st.u64 [%frame+360],%r419;
ld.u32 %r910,[%frame+352];
add.u32 %r151,%r910,1;
st.u32 [%frame+352],%r151;
setp.gt.s32 %r911,%r151,7;
@ %r911 bra $L177;
add.u64 %r293,%r293,16;
bra $L176;
$L177:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r916,[%value_in];
}
setp.ne.u32 %r917,%r916,0;
@ %r917 bra $L173;
.loc 1 1438 4
ld.u64 %r419,[%frame+360];
.loc 1 1436 4
mov.u64 %r293,%r1330;
$L176:
.loc 1 1437 6
@ %r1331 bra $L178;
.loc 1 1438 4
st.u64 [%r293],%r1370;
mov.u64 %r920,8;
st.u64 [%r293+8],%r920;
add.u64 %r419,%r419,8;
st.u64 [%frame+360],%r419;
ld.u32 %r921,[%frame+352];
add.u32 %r154,%r921,1;
st.u32 [%frame+352],%r154;
setp.gt.s32 %r922,%r154,7;
@ %r922 bra $L179;
add.u64 %r293,%r293,16;
bra $L178;
$L179:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r927,[%value_in];
}
setp.ne.u32 %r928,%r927,0;
@ %r928 bra $L173;
.loc 1 1450 4
ld.u64 %r419,[%frame+360];
.loc 1 1438 4
mov.u64 %r293,%r1330;
$L178:
.loc 1 1441 6
setp.ne.u32 %r929,%r143,128;
@ %r929 bra $L180;
.loc 1 1442 4
sub.u32 %r320,%r287,%r390;
setp.le.s32 %r930,%r320,0;
@ %r930 bra $L180;
ld.u32 %r420,[%frame+352];
setp.le.s32 %r931,%r320,16;
@ ! %r931 bra $L401;
cvta.const.u64 %r1339,zeroes$0;
bra $L181;
$L401:
cvta.const.u64 %r1339,zeroes$0;
$L184:
st.u64 [%r293],%r1339;
mov.u64 %r933,64;
st.u64 [%r293+8],%r933;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r420,%r420,1;
st.u32 [%frame+352],%r420;
setp.gt.s32 %r934,%r420,7;
@ %r934 bra $L182;
add.u64 %r293,%r293,16;
bra $L183;
$L182:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r939,[%value_in];
}
setp.ne.u32 %r940,%r939,0;
@ %r940 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r420,[%frame+352];
mov.u64 %r293,%r1330;
$L183:
add.u32 %r320,%r320,-16;
setp.gt.s32 %r941,%r320,16;
@ %r941 bra $L184;
$L181:
st.u64 [%r293],%r1339;
cvt.s64.s32 %r943,%r320;
shl.b64 %r159,%r943,2;
st.u64 [%r293+8],%r159;
add.u64 %r419,%r419,%r159;
st.u64 [%frame+360],%r419;
add.u32 %r160,%r420,1;
st.u32 [%frame+352],%r160;
setp.gt.s32 %r944,%r160,7;
@ %r944 bra $L185;
add.u64 %r293,%r293,16;
bra $L180;
$L185:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r949,[%value_in];
}
setp.ne.u32 %r950,%r949,0;
@ %r950 bra $L173;
.loc 1 1450 4
ld.u64 %r419,[%frame+360];
.loc 1 1442 4
mov.u64 %r293,%r1330;
$L180:
.loc 1 1445 3
sub.u32 %r264,%r288,%r292;
setp.le.s32 %r951,%r264,0;
@ %r951 bra $L186;
ld.u32 %r421,[%frame+352];
setp.le.s32 %r952,%r264,16;
@ ! %r952 bra $L402;
cvta.const.u64 %r1339,zeroes$0;
bra $L187;
$L402:
cvta.const.u64 %r1339,zeroes$0;
$L190:
st.u64 [%r293],%r1339;
mov.u64 %r954,64;
st.u64 [%r293+8],%r954;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r421,%r421,1;
st.u32 [%frame+352],%r421;
setp.gt.s32 %r955,%r421,7;
@ %r955 bra $L188;
add.u64 %r293,%r293,16;
bra $L189;
$L188:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r960,[%value_in];
}
setp.ne.u32 %r961,%r960,0;
@ %r961 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r421,[%frame+352];
mov.u64 %r293,%r1330;
$L189:
add.u32 %r264,%r264,-16;
setp.gt.s32 %r962,%r264,16;
@ %r962 bra $L190;
$L187:
st.u64 [%r293],%r1339;
cvt.s64.s32 %r964,%r264;
shl.b64 %r164,%r964,2;
st.u64 [%r293+8],%r164;
add.u64 %r419,%r419,%r164;
st.u64 [%frame+360],%r419;
add.u32 %r166,%r421,1;
st.u32 [%frame+352],%r166;
setp.gt.s32 %r965,%r166,7;
@ %r965 bra $L191;
add.u64 %r293,%r293,16;
bra $L186;
$L191:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r970,[%value_in];
}
setp.ne.u32 %r971,%r970,0;
@ %r971 bra $L173;
.loc 1 1450 4
ld.u64 %r419,[%frame+360];
.loc 1 1445 3
mov.u64 %r293,%r1330;
$L186:
.loc 1 1449 14
and.b32 %r972,%r286,256;
.loc 1 1449 6
setp.ne.u32 %r973,%r972,0;
@ %r973 bra $L192;
.loc 1 1450 4
st.u64 [%r293],%r284;
cvt.s64.s32 %r974,%r292;
shl.b64 %r170,%r974,2;
st.u64 [%r293+8],%r170;
add.u64 %r419,%r419,%r170;
st.u64 [%frame+360],%r419;
ld.u32 %r975,[%frame+352];
add.u32 %r172,%r975,1;
st.u32 [%frame+352],%r172;
setp.gt.s32 %r976,%r172,7;
@ %r976 bra $L193;
add.u64 %r293,%r293,16;
bra $L194;
$L193:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r981,[%value_in];
}
setp.ne.u32 %r982,%r981,0;
@ %r982 bra $L173;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1450 4
mov.u64 %r293,%r1330;
bra $L194;
$L192:
.loc 1 1452 7
setp.le.u32 %r983,%r279,101;
@ %r983 bra $L195;
.loc 1 1453 8
setp.neu.f64 %r984,%r330,0d0000000000000000;
@ %r984 bra $L196;
.loc 1 1455 6
cvta.const.u64 %r985,$LC7;
st.u64 [%r293],%r985;
mov.u64 %r986,4;
st.u64 [%r293+8],%r986;
add.u64 %r419,%r419,4;
st.u64 [%frame+360],%r419;
ld.u32 %r987,[%frame+352];
add.u32 %r176,%r987,1;
st.u32 [%frame+352],%r176;
setp.gt.s32 %r988,%r176,7;
@ %r988 bra $L197;
add.u64 %r293,%r293,16;
bra $L198;
$L197:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r993,[%value_in];
}
setp.ne.u32 %r994,%r993,0;
@ %r994 bra $L173;
.loc 1 1457 7
ld.u64 %r419,[%frame+360];
.loc 1 1455 6
mov.u64 %r293,%r1330;
$L198:
.loc 1 1456 15
ld.u32 %r179,[%frame+376];
.loc 1 1456 9
ld.u32 %r995,[%frame+380];
setp.lt.s32 %r996,%r995,%r179;
@ %r996 bra $L199;
.loc 1 1456 31
and.b32 %r997,%r286,1;
.loc 1 1456 22
setp.eq.u32 %r998,%r997,0;
@ %r998 bra $L194;
$L199:
.loc 1 1457 7
st.u64 [%r293],%r1369;
mov.u64 %r1000,4;
st.u64 [%r293+8],%r1000;
add.u64 %r419,%r419,4;
st.u64 [%frame+360],%r419;
ld.u32 %r1001,[%frame+352];
add.u32 %r182,%r1001,1;
st.u32 [%frame+352],%r182;
setp.gt.s32 %r1002,%r182,7;
@ %r1002 bra $L200;
add.u64 %r293,%r293,16;
bra $L201;
$L200:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1007,[%value_in];
}
setp.ne.u32 %r1008,%r1007,0;
@ %r1008 bra $L173;
.loc 1 1458 7
ld.u32 %r179,[%frame+376];
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1457 7
mov.u64 %r293,%r1330;
$L201:
.loc 1 1458 7
add.u32 %r83,%r179,-1;
setp.le.s32 %r1009,%r83,0;
@ %r1009 bra $L194;
ld.u32 %r439,[%frame+352];
setp.le.s32 %r1010,%r83,16;
@ ! %r1010 bra $L403;
cvta.const.u64 %r1339,zeroes$0;
bra $L202;
$L403:
cvta.const.u64 %r1339,zeroes$0;
$L205:
st.u64 [%r293],%r1339;
mov.u64 %r1012,64;
st.u64 [%r293+8],%r1012;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r439,%r439,1;
st.u32 [%frame+352],%r439;
setp.gt.s32 %r1013,%r439,7;
@ %r1013 bra $L203;
add.u64 %r293,%r293,16;
bra $L204;
$L203:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1018,[%value_in];
}
setp.ne.u32 %r1019,%r1018,0;
@ %r1019 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r439,[%frame+352];
mov.u64 %r293,%r1330;
$L204:
add.u32 %r83,%r83,-16;
setp.gt.s32 %r1020,%r83,16;
@ %r1020 bra $L205;
$L202:
st.u64 [%r293],%r1339;
cvt.s64.s32 %r1022,%r83;
shl.b64 %r186,%r1022,2;
st.u64 [%r293+8],%r186;
add.u64 %r419,%r419,%r186;
st.u64 [%frame+360],%r419;
add.u32 %r188,%r439,1;
st.u32 [%frame+352],%r188;
setp.gt.s32 %r1023,%r188,7;
@ %r1023 bra $L206;
add.u64 %r293,%r293,16;
bra $L194;
$L206:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1028,[%value_in];
}
setp.ne.u32 %r1029,%r1028,0;
@ %r1029 bra $L173;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1458 7
mov.u64 %r293,%r1330;
bra $L194;
$L196:
.loc 1 1460 21
ld.u32 %r190,[%frame+380];
.loc 1 1460 15
setp.gt.s32 %r1030,%r190,0;
@ %r1030 bra $L207;
.loc 1 1461 6
cvta.const.u64 %r1031,$LC7;
st.u64 [%r293],%r1031;
mov.u64 %r1032,4;
st.u64 [%r293+8],%r1032;
add.u64 %r419,%r419,4;
st.u64 [%frame+360],%r419;
ld.u32 %r1033,[%frame+352];
add.u32 %r192,%r1033,1;
st.u32 [%frame+352],%r192;
setp.gt.s32 %r1034,%r192,7;
@ %r1034 bra $L208;
add.u64 %r293,%r293,16;
bra $L209;
$L208:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1039,[%value_in];
}
setp.ne.u32 %r1040,%r1039,0;
@ %r1040 bra $L173;
.loc 1 1462 10
ld.u32 %r190,[%frame+380];
.loc 1 1463 7
ld.u64 %r419,[%frame+360];
.loc 1 1461 6
mov.u64 %r293,%r1330;
$L209:
.loc 1 1462 9
setp.ne.u32 %r1041,%r190,0;
@ %r1041 bra $L210;
.loc 1 1462 15
ld.u32 %r438,[%frame+376];
.loc 1 1462 32
and.b32 %r1042,%r286,1;
.loc 1 1462 23
or.b32 %r1043,%r1042,%r438;
setp.ne.u32 %r1044,%r1043,0;
@ %r1044 bra $L211;
bra $L194;
$L210:
.loc 1 1463 7
st.u64 [%r293],%r1369;
mov.u64 %r1046,4;
st.u64 [%r293+8],%r1046;
add.u64 %r436,%r419,4;
st.u64 [%frame+360],%r436;
ld.u32 %r1047,[%frame+352];
add.u32 %r437,%r1047,1;
st.u32 [%frame+352],%r437;
setp.gt.s32 %r1048,%r437,7;
@ %r1048 bra $L212;
add.u64 %r294,%r293,16;
bra $L213;
$L212:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1053,[%value_in];
}
setp.ne.u32 %r1054,%r1053,0;
@ %r1054 bra $L173;
.loc 1 1464 7
ld.u32 %r190,[%frame+380];
.loc 1 1465 7
ld.u64 %r436,[%frame+360];
ld.u32 %r437,[%frame+352];
.loc 1 1463 7
mov.u64 %r294,%r1330;
$L213:
.loc 1 1464 7
setp.lt.s32 %r1055,%r190,0;
@ %r1055 bra $L214;
.loc 1 1465 7
ld.u32 %r438,[%frame+376];
bra $L215;
$L214:
.loc 1 1464 7
neg.s32 %r278,%r190;
setp.ge.s32 %r1056,%r190,-16;
@ ! %r1056 bra $L404;
cvta.const.u64 %r1339,zeroes$0;
bra $L216;
$L404:
cvta.const.u64 %r1339,zeroes$0;
$L219:
st.u64 [%r294],%r1339;
mov.u64 %r1058,64;
st.u64 [%r294+8],%r1058;
add.u64 %r436,%r436,64;
st.u64 [%frame+360],%r436;
add.u32 %r437,%r437,1;
st.u32 [%frame+352],%r437;
setp.gt.s32 %r1059,%r437,7;
@ %r1059 bra $L217;
add.u64 %r294,%r294,16;
bra $L218;
$L217:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1064,[%value_in];
}
setp.ne.u32 %r1065,%r1064,0;
@ %r1065 bra $L173;
ld.u64 %r436,[%frame+360];
ld.u32 %r437,[%frame+352];
mov.u64 %r294,%r1330;
$L218:
add.u32 %r278,%r278,-16;
setp.gt.s32 %r1066,%r278,16;
@ %r1066 bra $L219;
$L216:
st.u64 [%r294],%r1339;
cvt.s64.s32 %r1068,%r278;
shl.b64 %r199,%r1068,2;
st.u64 [%r294+8],%r199;
add.u64 %r436,%r436,%r199;
st.u64 [%frame+360],%r436;
add.u32 %r437,%r437,1;
st.u32 [%frame+352],%r437;
setp.gt.s32 %r1069,%r437,7;
@ %r1069 bra $L220;
add.u64 %r294,%r294,16;
.loc 1 1465 7
ld.u32 %r438,[%frame+376];
bra $L215;
$L220:
.loc 1 1464 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1074,[%value_in];
}
setp.ne.u32 %r1075,%r1074,0;
@ %r1075 bra $L173;
.loc 1 1465 7
ld.u32 %r438,[%frame+376];
ld.u64 %r436,[%frame+360];
ld.u32 %r437,[%frame+352];
.loc 1 1464 7
mov.u64 %r294,%r1330;
$L215:
.loc 1 1465 7
st.u64 [%r294],%r284;
cvt.s64.s32 %r1076,%r438;
shl.b64 %r204,%r1076,2;
st.u64 [%r294+8],%r204;
add.u64 %r419,%r204,%r436;
st.u64 [%frame+360],%r419;
add.u32 %r205,%r437,1;
st.u32 [%frame+352],%r205;
setp.gt.s32 %r1077,%r205,7;
@ %r1077 bra $L221;
add.u64 %r293,%r294,16;
bra $L194;
$L221:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1082,[%value_in];
}
setp.ne.u32 %r1083,%r1082,0;
@ %r1083 bra $L173;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1465 7
mov.u64 %r293,%r1330;
bra $L194;
$L207:
.loc 1 1469 6
ld.u32 %r348,[%frame+376];
min.s32 %r28,%r348,%r289;
setp.le.s32 %r1088,%r28,0;
@ %r1088 bra $L222;
st.u64 [%r293],%r284;
cvt.s64.s32 %r1089,%r28;
shl.b64 %r212,%r1089,2;
st.u64 [%r293+8],%r212;
add.u64 %r419,%r419,%r212;
st.u64 [%frame+360],%r419;
ld.u32 %r1090,[%frame+352];
add.u32 %r214,%r1090,1;
st.u32 [%frame+352],%r214;
setp.gt.s32 %r1091,%r214,7;
@ %r1091 bra $L223;
add.u64 %r293,%r293,16;
bra $L222;
$L223:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1096,[%value_in];
}
setp.ne.u32 %r1097,%r1096,0;
@ %r1097 bra $L173;
.loc 1 1491 10
ld.u64 %r419,[%frame+360];
.loc 1 1469 6
mov.u64 %r293,%r1330;
$L222:
max.s32 %r216,%r28,0;
sub.u32 %r335,%r289,%r216;
setp.le.s32 %r1098,%r335,0;
@ %r1098 bra $L224;
ld.u32 %r432,[%frame+352];
setp.le.s32 %r1099,%r335,16;
@ ! %r1099 bra $L405;
cvta.const.u64 %r1339,zeroes$0;
bra $L225;
$L405:
cvta.const.u64 %r1339,zeroes$0;
$L228:
st.u64 [%r293],%r1339;
mov.u64 %r1101,64;
st.u64 [%r293+8],%r1101;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r432,%r432,1;
st.u32 [%frame+352],%r432;
setp.gt.s32 %r1102,%r432,7;
@ %r1102 bra $L226;
add.u64 %r293,%r293,16;
bra $L227;
$L226:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1107,[%value_in];
}
setp.ne.u32 %r1108,%r1107,0;
@ %r1108 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r432,[%frame+352];
mov.u64 %r293,%r1330;
$L227:
add.u32 %r335,%r335,-16;
setp.gt.s32 %r1109,%r335,16;
@ %r1109 bra $L228;
$L225:
st.u64 [%r293],%r1339;
cvt.s64.s32 %r1111,%r335;
shl.b64 %r219,%r1111,2;
st.u64 [%r293+8],%r219;
add.u64 %r419,%r419,%r219;
st.u64 [%frame+360],%r419;
add.u32 %r221,%r432,1;
st.u32 [%frame+352],%r221;
setp.gt.s32 %r1112,%r221,7;
@ %r1112 bra $L229;
add.u64 %r293,%r293,16;
bra $L224;
$L229:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1117,[%value_in];
}
setp.ne.u32 %r1118,%r1117,0;
@ %r1118 bra $L173;
.loc 1 1491 10
ld.u64 %r419,[%frame+360];
.loc 1 1469 6
mov.u64 %r293,%r1330;
$L224:
.loc 1 1471 9
cvt.s64.s32 %r1119,%r289;
shl.b64 %r224,%r1119,2;
.loc 1 1490 15
ld.u32 %r225,[%frame+380];
ld.u32 %r226,[%frame+376];
.loc 1 1490 9
setp.lt.s32 %r1120,%r225,%r226;
@ %r1120 bra $L230;
.loc 1 1490 31
and.b32 %r1121,%r286,1;
.loc 1 1490 22
setp.eq.u32 %r1122,%r1121,0;
@ %r1122 bra $L231;
$L230:
.loc 1 1491 10
st.u64 [%r293],%r1369;
mov.u64 %r1124,4;
st.u64 [%r293+8],%r1124;
add.u64 %r419,%r419,4;
st.u64 [%frame+360],%r419;
ld.u32 %r1125,[%frame+352];
add.u32 %r229,%r1125,1;
st.u32 [%frame+352],%r229;
setp.gt.s32 %r1126,%r229,7;
@ %r1126 bra $L232;
add.u64 %r293,%r293,16;
bra $L231;
$L232:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1131,[%value_in];
}
setp.ne.u32 %r1132,%r1131,0;
@ %r1132 bra $L173;
.loc 1 1492 6
ld.u32 %r226,[%frame+376];
ld.u32 %r225,[%frame+380];
ld.u64 %r419,[%frame+360];
.loc 1 1491 10
mov.u64 %r293,%r1330;
$L231:
.loc 1 1492 6
cvt.s64.s32 %r1133,%r226;
shl.b64 %r1134,%r1133,2;
sub.u64 %r1135,%r1134,%r224;
shr.s64 %r1137,%r1135,2;
cvt.u32.u64 %r350,%r1137;
sub.u32 %r235,%r226,%r225;
min.s32 %r27,%r235,%r350;
setp.le.s32 %r1138,%r27,0;
@ %r1138 bra $L233;
.loc 1 1471 9
add.u64 %r1139,%r284,%r224;
.loc 1 1492 6
st.u64 [%r293],%r1139;
cvt.s64.s32 %r1140,%r27;
shl.b64 %r237,%r1140,2;
st.u64 [%r293+8],%r237;
add.u64 %r419,%r419,%r237;
st.u64 [%frame+360],%r419;
ld.u32 %r1141,[%frame+352];
add.u32 %r239,%r1141,1;
st.u32 [%frame+352],%r239;
setp.gt.s32 %r1142,%r239,7;
@ %r1142 bra $L234;
add.u64 %r293,%r293,16;
bra $L233;
$L234:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1147,[%value_in];
}
setp.ne.u32 %r1148,%r1147,0;
@ %r1148 bra $L173;
ld.u32 %r1149,[%frame+376];
ld.u32 %r1150,[%frame+380];
sub.u32 %r235,%r1149,%r1150;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1492 6
mov.u64 %r293,%r1330;
$L233:
max.s32 %r242,%r27,0;
sub.u32 %r352,%r235,%r242;
setp.le.s32 %r1151,%r352,0;
@ %r1151 bra $L194;
ld.u32 %r435,[%frame+352];
setp.le.s32 %r1152,%r352,16;
@ ! %r1152 bra $L406;
cvta.const.u64 %r1339,zeroes$0;
bra $L235;
$L406:
cvta.const.u64 %r1339,zeroes$0;
$L238:
st.u64 [%r293],%r1339;
mov.u64 %r1154,64;
st.u64 [%r293+8],%r1154;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r435,%r435,1;
st.u32 [%frame+352],%r435;
setp.gt.s32 %r1155,%r435,7;
@ %r1155 bra $L236;
add.u64 %r293,%r293,16;
bra $L237;
$L236:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1160,[%value_in];
}
setp.ne.u32 %r1161,%r1160,0;
@ %r1161 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r435,[%frame+352];
mov.u64 %r293,%r1330;
$L237:
add.u32 %r352,%r352,-16;
setp.gt.s32 %r1162,%r352,16;
@ %r1162 bra $L238;
$L235:
st.u64 [%r293],%r1339;
cvt.s64.s32 %r1164,%r352;
shl.b64 %r245,%r1164,2;
st.u64 [%r293+8],%r245;
add.u64 %r419,%r419,%r245;
st.u64 [%frame+360],%r419;
add.u32 %r246,%r435,1;
st.u32 [%frame+352],%r246;
setp.gt.s32 %r1165,%r246,7;
@ %r1165 bra $L239;
add.u64 %r293,%r293,16;
bra $L194;
$L239:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1170,[%value_in];
}
setp.ne.u32 %r1171,%r1170,0;
@ %r1171 bra $L173;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1492 6
mov.u64 %r293,%r1330;
bra $L194;
$L195:
.loc 1 1455 6
add.u64 %r425,%r419,4;
.loc 1 1450 4
ld.u32 %r443,[%frame+352];
add.u32 %r422,%r443,1;
add.u64 %r296,%r293,16;
.loc 1 1497 8
ld.u32 %r1172,[%frame+376];
setp.gt.s32 %r1173,%r1172,1;
@ %r1173 bra $L240;
.loc 1 1497 27
and.b32 %r1174,%r286,1;
.loc 1 1497 18
setp.eq.u32 %r1175,%r1174,0;
@ %r1175 bra $L241;
$L240:
.loc 1 1498 6
st.u64 [%r293],%r284;
mov.u64 %r1176,4;
st.u64 [%r293+8],%r1176;
st.u64 [%frame+360],%r425;
st.u32 [%frame+352],%r422;
setp.le.s32 %r1177,%r422,7;
@ %r1177 bra $L242;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1182,[%value_in];
}
setp.ne.u32 %r1183,%r1182,0;
@ %r1183 bra $L173;
.loc 1 1500 6
ld.u64 %r425,[%frame+360];
ld.u32 %r422,[%frame+352];
.loc 1 1498 6
mov.u64 %r296,%r1330;
$L242:
.loc 1 1500 6
st.u64 [%r296],%r1369;
mov.u64 %r1185,4;
st.u64 [%r296+8],%r1185;
add.u64 %r425,%r425,4;
st.u64 [%frame+360],%r425;
add.u32 %r426,%r422,1;
st.u32 [%frame+352],%r426;
setp.gt.s32 %r1186,%r426,7;
@ %r1186 bra $L243;
add.u64 %r296,%r296,16;
bra $L244;
$L243:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1191,[%value_in];
}
setp.ne.u32 %r1192,%r1191,0;
@ %r1192 bra $L173;
.loc 1 1502 7
ld.u64 %r425,[%frame+360];
ld.u32 %r426,[%frame+352];
.loc 1 1500 6
mov.u64 %r296,%r1330;
$L244:
.loc 1 1502 7
add.u32 %r423,%r426,1;
mov.u32 %r1341,%r423;
ld.u32 %r1193,[%frame+376];
add.u32 %r329,%r1193,-1;
add.u64 %r293,%r296,16;
.loc 1 1501 9
setp.eq.f64 %r1194,%r330,0d0000000000000000;
@ %r1194 bra $L245;
.loc 1 1499 8
add.u64 %r1195,%r284,4;
.loc 1 1502 7
st.u64 [%r296],%r1195;
cvt.s64.s32 %r1196,%r329;
shl.b64 %r255,%r1196,2;
st.u64 [%r296+8],%r255;
add.u64 %r425,%r425,%r255;
st.u64 [%frame+360],%r425;
st.u32 [%frame+352],%r423;
setp.gt.s32 %r1197,%r423,7;
@ %r1197 bra $L246;
.loc 1 1508 5
add.u32 %r423,%r426,2;
add.u64 %r431,%r296,32;
.loc 1 1502 7
mov.u64 %r296,%r293;
.loc 1 1508 5
mov.u64 %r293,%r431;
bra $L247;
$L246:
.loc 1 1502 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1202,[%value_in];
}
setp.ne.u32 %r1203,%r1202,0;
@ %r1203 bra $L173;
.loc 1 1508 5
ld.u64 %r425,[%frame+360];
ld.u32 %r1204,[%frame+352];
add.u32 %r423,%r1204,1;
add.u64 %r293,%frame,176;
.loc 1 1502 7
mov.u64 %r296,%r1330;
bra $L247;
$L245:
.loc 1 1505 7
setp.le.s32 %r1205,%r329,0;
@ %r1205 bra $L247;
setp.le.s32 %r1206,%r329,16;
@ %r1206 bra $L291;
cvta.const.u64 %r1339,zeroes$0;
$L251:
st.u64 [%r296],%r1339;
mov.u64 %r1208,64;
st.u64 [%r296+8],%r1208;
add.u64 %r425,%r425,64;
st.u64 [%frame+360],%r425;
mov.u32 %r426,%r1341;
st.u32 [%frame+352],%r426;
setp.gt.s32 %r1209,%r426,7;
@ %r1209 bra $L249;
add.u64 %r296,%r296,16;
bra $L250;
$L249:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1214,[%value_in];
}
setp.ne.u32 %r1215,%r1214,0;
@ %r1215 bra $L173;
ld.u64 %r425,[%frame+360];
ld.u32 %r426,[%frame+352];
mov.u64 %r296,%r1330;
$L250:
add.u32 %r329,%r329,-16;
setp.gt.s32 %r1216,%r329,16;
@ ! %r1216 bra $L407;
add.u32 %r1341,%r426,1;
bra $L251;
$L407:
add.u32 %r423,%r426,1;
add.u64 %r427,%r296,16;
bra $L248;
$L291:
mov.u64 %r427,%r293;
cvta.const.u64 %r1339,zeroes$0;
$L248:
st.u64 [%r296],%r1339;
cvt.s64.s32 %r1218,%r329;
shl.b64 %r259,%r1218,2;
st.u64 [%r296+8],%r259;
add.u64 %r425,%r425,%r259;
st.u64 [%frame+360],%r425;
st.u32 [%frame+352],%r423;
setp.gt.s32 %r1219,%r423,7;
@ %r1219 bra $L252;
.loc 1 1508 5
add.u32 %r423,%r423,1;
add.u64 %r293,%r427,16;
.loc 1 1505 7
mov.u64 %r296,%r427;
bra $L247;
$L252:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1224,[%value_in];
}
setp.ne.u32 %r1225,%r1224,0;
@ %r1225 bra $L173;
.loc 1 1508 5
ld.u64 %r425,[%frame+360];
ld.u32 %r1226,[%frame+352];
add.u32 %r423,%r1226,1;
add.u64 %r293,%frame,176;
.loc 1 1505 7
mov.u64 %r296,%r1330;
bra $L247;
$L241:
.loc 1 1507 6
st.u64 [%r293],%r284;
mov.u64 %r1227,4;
st.u64 [%r293+8],%r1227;
st.u64 [%frame+360],%r425;
st.u32 [%frame+352],%r422;
setp.gt.s32 %r1228,%r422,7;
@ %r1228 bra $L253;
.loc 1 1508 5
add.u32 %r423,%r443,2;
add.u64 %r293,%r293,32;
bra $L247;
$L253:
.loc 1 1507 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1233,[%value_in];
}
setp.ne.u32 %r1234,%r1233,0;
@ %r1234 bra $L173;
.loc 1 1508 5
ld.u64 %r425,[%frame+360];
ld.u32 %r1235,[%frame+352];
add.u32 %r423,%r1235,1;
add.u64 %r293,%frame,176;
.loc 1 1507 6
mov.u64 %r296,%r1330;
$L247:
.loc 1 1508 5
st.u64 [%r296],%r1368;
cvt.s64.s32 %r1237,%r39;
shl.b64 %r263,%r1237,2;
st.u64 [%r296+8],%r263;
add.u64 %r419,%r263,%r425;
st.u64 [%frame+360],%r419;
st.u32 [%frame+352],%r423;
setp.le.s32 %r1238,%r423,7;
@ %r1238 bra $L194;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1243,[%value_in];
}
setp.ne.u32 %r1244,%r1243,0;
@ %r1244 bra $L173;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
.loc 1 1508 5
mov.u64 %r293,%r1330;
$L194:
.loc 1 1515 13
and.b32 %r1245,%r286,4;
.loc 1 1515 6
setp.eq.u32 %r1246,%r1245,0;
@ %r1246 bra $L254;
.loc 1 1516 4
sub.u32 %r220,%r287,%r390;
setp.le.s32 %r1247,%r220,0;
@ %r1247 bra $L254;
ld.u32 %r440,[%frame+352];
setp.le.s32 %r1248,%r220,16;
@ ! %r1248 bra $L408;
cvta.const.u64 %r1335,blanks$1;
bra $L255;
$L408:
cvta.const.u64 %r1335,blanks$1;
$L258:
st.u64 [%r293],%r1335;
mov.u64 %r1250,64;
st.u64 [%r293+8],%r1250;
add.u64 %r419,%r419,64;
st.u64 [%frame+360],%r419;
add.u32 %r440,%r440,1;
st.u32 [%frame+352],%r440;
setp.gt.s32 %r1251,%r440,7;
@ %r1251 bra $L256;
add.u64 %r293,%r293,16;
bra $L257;
$L256:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1256,[%value_in];
}
setp.ne.u32 %r1257,%r1256,0;
@ %r1257 bra $L173;
ld.u64 %r419,[%frame+360];
ld.u32 %r440,[%frame+352];
mov.u64 %r293,%r1330;
$L257:
add.u32 %r220,%r220,-16;
setp.gt.s32 %r1258,%r220,16;
@ %r1258 bra $L258;
$L255:
st.u64 [%r293],%r1335;
cvt.s64.s32 %r1260,%r220;
shl.b64 %r269,%r1260,2;
st.u64 [%r293+8],%r269;
add.u64 %r419,%r419,%r269;
st.u64 [%frame+360],%r419;
add.u32 %r270,%r440,1;
st.u32 [%frame+352],%r270;
setp.le.s32 %r1261,%r270,7;
@ %r1261 bra $L254;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1266,[%value_in];
}
setp.ne.u32 %r1267,%r1266,0;
@ %r1267 bra $L173;
.loc 1 1521 3
ld.u64 %r419,[%frame+360];
$L254:
.loc 1 1519 33
max.s32 %r1268,%r287,%r390;
.loc 1 1519 7
add.u32 %r445,%r445,%r1268;
.loc 1 1521 3
setp.ne.u64 %r1269,%r419,0;
@ %r1269 bra $L259;
$L261:
mov.u32 %r1270,0;
st.u32 [%frame+352],%r1270;
.loc 1 1523 20
setp.ne.u64 %r1271,%r297,0;
@ %r1271 bra $L260;
.loc 1 1521 3
mov.u64 %r293,%r1330;
bra $L28;
$L259:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1365;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1276,[%value_in];
}
setp.ne.u32 %r1277,%r1276,0;
@ ! %r1277 bra $L261;
bra $L173;
$L260:
.loc 1 1524 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r297;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 1521 3
mov.u64 %r293,%r1330;
bra $L28;
$L34:
.loc 1 1529 2
ld.u64 %r1280,[%frame+360];
setp.ne.u64 %r1281,%r1280,0;
@ %r1281 bra $L262;
ld.u16 %r1329,[%r447+16];
bra $L33;
$L262:
add.u64 %r1285,%frame,344;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r447;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1285;
call (%value_in),__ssprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1286,[%value_in];
}
ld.u16 %r1329,[%r447+16];
bra $L33;
$L173:
.loc 1 1531 5
setp.eq.u64 %r1288,%r297,0;
@ ! %r1288 bra $L409;
ld.u16 %r1329,[%r447+16];
bra $L33;
$L409:
.loc 1 1532 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r297;
call _free_r,(%out_arg1,%out_arg2);
}
ld.u16 %r1329,[%r447+16];
$L33:
.loc 1 1536 31
and.b16 %r1291,%r1329,64;
setp.eq.u16 %r1293,%r1291,0;
selp.u32 %r445,%r445,-1,%r1293;
bra $L24;
$L211:
.loc 1 1463 7
st.u64 [%r293],%r1369;
mov.u64 %r1296,4;
st.u64 [%r293+8],%r1296;
add.u64 %r436,%r419,4;
st.u64 [%frame+360],%r436;
ld.u32 %r1297,[%frame+352];
add.u32 %r437,%r1297,1;
st.u32 [%frame+352],%r437;
setp.gt.s32 %r1298,%r437,7;
@ %r1298 bra $L212;
add.u64 %r294,%r293,16;
bra $L215;
$L83:
.loc 1 656 9
mov.u32 %r286,%r285;
mov.u64 %r297,%r1366;
mov.u32 %r288,%r1367;
mov.u32 %r289,%r1367;
bra $L167;
$L105:
.loc 1 1042 9
mov.u32 %r1308,40;
mov.u32 %r1301,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r446;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r330;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1301;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r286;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1376;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1375;
.param .u32 %out_arg7;
st.param.u32 [%out_arg7],%r279;
.param .u64 %out_arg8;
st.param.u64 [%out_arg8],%r1374;
.param .u64 %out_arg9;
st.param.u64 [%out_arg9],%frame;
.param .u32 %out_arg10;
st.param.u32 [%out_arg10],%r1308;
call (%value_in),wcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7,%out_arg8,%out_arg9,%out_arg10);
ld.param.u64 %r1312,[%value_in];
}
mov.u64 %r284,%r1312;
.loc 1 1049 7
setp.eq.u64 %r1313,%frame,%r284;
@ %r1313 bra $L264;
.loc 1 1062 14
ld.u32 %r289,[%frame+380];
mov.u64 %r297,%r1366;
.loc 1 1037 10
mov.u32 %r288,%r1301;
ld.u32 %r1340,[%frame+376];
bra $L265;
$L89:
.loc 1 704 8
ld.u32 %r401,[%frame+392];
.loc 1 1311 14
setp.ne.u32 %r1314,%r288,-1;
@ %r1314 bra $L266;
bra $L160;
$L48:
setp.ne.u32 %r1315,%r322,0;
@ ! %r1315 bra $L268;
bra $L267;
$L410:
.loc 1 1082 15
ld.u32 %r289,[%frame+380];
mov.u64 %r297,%r1366;
.loc 1 1037 10
mov.u32 %r288,%r1301;
bra $L265;
$L264:
.loc 1 1049 26
ld.u32 %r1340,[%frame+376];
.loc 1 1049 18
setp.gt.s32 %r1316,%r1340,40;
@ %r1316 bra $L292;
bra $L410;
$L266:
.loc 1 1312 11
and.b32 %r286,%r285,-129;
.loc 1 1320 28
set.u32.ne.u32 %r1318,%r288,0;
neg.s32 %r1319,%r1318;
.loc 1 1320 15
set.u32.ne.u64 %r1321,%r290,0;
neg.s32 %r1322,%r1321;
.loc 1 1320 20
cvt.u16.u32 %r1324,%r1319;
cvt.u16.u32 %r1325,%r1322;
or.b16 %r1323,%r1324,%r1325;
.loc 1 1320 7
cvt.u32.u16 %r1326,%r1323;
cvt.u16.u8 %r1327,%r1326;
setp.ne.u16 %r1328,%r1327,0;
@ %r1328 bra $L293;
mov.u32 %r288,0;
mov.u32 %r292,%r288;
.loc 1 1319 7
mov.u64 %r284,%r1330;
bra $L164;
$L24:
.loc 1 1538 1
mov.u32 %value,%r445;
st.param.u32 [%value_out],%value;
ret;
}
/1618           1612277262  0     0     100666  71794     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _sungetwc_r$isra$0
.func _sungetwc_r$isra$0 (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vfwscanf.c"
// BEGIN GLOBAL FUNCTION DECL: __ssvfwscanf_r
.visible .func (.param .u32 %value_out) __ssvfwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __submore
.extern .func (.param .u32 %value_out) __submore (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: iswspace
.extern .func (.param .u32 %value_out) iswspace (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __ssrefill_r
.extern .func (.param .u32 %value_out) __ssrefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _wcstol_r
.extern .func (.param .u64 %value_out) _wcstol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstoul_r
.extern .func (.param .u64 %value_out) _wcstoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcrtomb_r
.extern .func (.param .u64 %value_out) _wcrtomb_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcrtomb
.extern .func (.param .u64 %value_out) wcrtomb (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstoull_r
.extern .func (.param .u64 %value_out) _wcstoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstoll_r
.extern .func (.param .u64 %value_out) _wcstoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: swprintf
.extern .func (.param .u32 %value_out) swprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstod_r
.extern .func (.param .f64 %value_out) _wcstod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: nanf
.extern .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC0
.const .align 4 .u32 $LC0[5] =
{101,37,108,100,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[1] =
{0 };
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN FUNCTION DEF: _sungetwc_r$isra$0
.func _sungetwc_r$isra$0 (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r27;
.reg .u64 %r34;
.reg .u64 %r44;
.reg .u32 %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .pred %r49;
.reg .u16 %r50;
.reg .u16 %r51;
.reg .u64 %r52;
.reg .pred %r53;
.reg .u32 %r54;
.reg .pred %r55;
.reg .u64 %r56;
.reg .u32 %r57;
.reg .u32 %r58;
.reg .u32 %r61;
.reg .pred %r62;
.reg .pred %r63;
.reg .pred %r64;
.reg .u32 %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .u64 %r69;
.reg .u32 %r70;
.reg .u64 %r71;
.reg .u32 %r72;
mov.u64 %r46,%ar0;
mov.u32 %r47,%ar1;
mov.u64 %r48,%ar2;
.loc 1 269 6
setp.ne.u32 %r49,%r47,-1;
@ ! %r49 bra $L1;
.loc 1 273 14
ld.u16 %r51,[%r48+16];
and.b16 %r50,%r51,-33;
st.u16 [%r48+16],%r50;
.loc 1 282 13
ld.u32 %r45,[%r48+8];
.loc 1 280 6
ld.u64 %r52,[%r48+88];
setp.eq.u64 %r53,%r52,0;
@ %r53 bra $L4;
.loc 1 282 10
ld.u32 %r54,[%r48+96];
setp.le.s32 %r55,%r54,%r45;
@ %r55 bra $L5;
$L7:
.loc 1 286 14
ld.u64 %r27,[%r48];
add.u64 %r56,%r27,-4;
st.u64 [%r48],%r56;
.loc 1 287 15
st.u8 [%r27+-4],%r47;
.loc 1 288 14
ld.u32 %r58,[%r48+8];
add.u32 %r57,%r58,4;
st.u32 [%r48+8],%r57;
.loc 1 289 14
bra $L1;
$L5:
.loc 1 282 38
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r46;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r48;
call (%value_in),__submore,(%out_arg1,%out_arg2);
ld.param.u32 %r61,[%value_in];
}
.loc 1 282 35
setp.ne.u32 %r62,%r61,0;
@ ! %r62 bra $L7;
bra $L1;
$L4:
.loc 1 298 14
ld.u64 %r34,[%r48+24];
.loc 1 298 34
ld.u64 %r44,[%r48];
.loc 1 298 6
setp.eq.u64 %r63,%r34,0;
@ %r63 bra $L8;
.loc 1 298 29
setp.ge.u64 %r64,%r34,%r44;
@ %r64 bra $L8;
.loc 1 299 7
ld.u32 %r65,[%r44+-4];
setp.ne.u32 %r66,%r47,%r65;
@ %r66 bra $L8;
.loc 1 301 14
add.u64 %r67,%r44,-4;
st.u64 [%r48],%r67;
.loc 1 302 14
add.u32 %r68,%r45,4;
st.u32 [%r48+8],%r68;
.loc 1 303 14
bra $L1;
$L8:
.loc 1 311 11
st.u32 [%r48+112],%r45;
.loc 1 312 11
st.u64 [%r48+104],%r44;
.loc 1 313 19
add.u64 %r69,%r48,116;
.loc 1 313 17
st.u64 [%r48+88],%r69;
.loc 1 314 17
mov.u32 %r70,3;
st.u32 [%r48+96],%r70;
.loc 1 315 12
add.u64 %r71,%r48,115;
.loc 1 315 10
st.u64 [%r48],%r71;
.loc 1 316 23
st.u32 [%r48+115],%r47;
.loc 1 317 10
mov.u32 %r72,2;
st.u32 [%r48+8],%r72;
$L1:
.loc 1 319 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ssvfwscanf_r
.visible .func (.param .u32 %value_out) __ssvfwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[1424];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u32 %r32;
.reg .u32 %r39;
.reg .u32 %r51;
.reg .u64 %r53;
.reg .u32 %r58;
.reg .u32 %r71;
.reg .u32 %r74;
.reg .u32 %r86;
.reg .u64 %r95;
.reg .u32 %r127;
.reg .u32 %r154;
.reg .u32 %r155;
.reg .u64 %r156;
.reg .u64 %r157;
.reg .u32 %r162;
.reg .u32 %r163;
.reg .u32 %r164;
.reg .u32 %r165;
.reg .u64 %r166;
.reg .u64 %r167;
.reg .u64 %r168;
.reg .u64 %r169;
.reg .u64 %r170;
.reg .u64 %r171;
.reg .u64 %r172;
.reg .u64 %r173;
.reg .u64 %r174;
.reg .u32 %r176;
.reg .u32 %r177;
.reg .u32 %r178;
.reg .u64 %r179;
.reg .u32 %r182;
.reg .u64 %r183;
.reg .u32 %r186;
.reg .u64 %r187;
.reg .u64 %r189;
.reg .u32 %r191;
.reg .u64 %r192;
.reg .u64 %r194;
.reg .u64 %r197;
.reg .u32 %r199;
.reg .u64 %r200;
.reg .u32 %r202;
.reg .u32 %r203;
.reg .u64 %r206;
.reg .u32 %r214;
.reg .u64 %r219;
.reg .u64 %r222;
.reg .u64 %r224;
.reg .u32 %r225;
.reg .u64 %r238;
.reg .u64 %r241;
.reg .u32 %r246;
.reg .u64 %r247;
.reg .u32 %r252;
.reg .u64 %r254;
.reg .u32 %r255;
.reg .u32 %r261;
.reg .u64 %r263;
.reg .u32 %r264;
.reg .u32 %r270;
.reg .u64 %r272;
.reg .u32 %r273;
.reg .u32 %r279;
.reg .u64 %r281;
.reg .u32 %r282;
.reg .u32 %r288;
.reg .u64 %r290;
.reg .u32 %r291;
.reg .u32 %r297;
.reg .u64 %r299;
.reg .u32 %r300;
.reg .u32 %r306;
.reg .u64 %r308;
.reg .u32 %r309;
.reg .u32 %r315;
.reg .u64 %r317;
.reg .u32 %r318;
.reg .u32 %r324;
.reg .u64 %r326;
.reg .u32 %r327;
.reg .u32 %r333;
.reg .u64 %r335;
.reg .u32 %r336;
.reg .u32 %r342;
.reg .u64 %r344;
.reg .u32 %r345;
.reg .u64 %r352;
.reg .u32 %r353;
.reg .u32 %r357;
.reg .u64 %r360;
.reg .u32 %r361;
.reg .u64 %r366;
.reg .u32 %r367;
.reg .u32 %r368;
.reg .u64 %r371;
.reg .u64 %r373;
.reg .u32 %r376;
.reg .u64 %r380;
.reg .u64 %r382;
.reg .u32 %r384;
.reg .u64 %r386;
.reg .u64 %r387;
.reg .u64 %r390;
.reg .u64 %r391;
.reg .u64 %r392;
.reg .u64 %r393;
.reg .u32 %r394;
.reg .u64 %r395;
.reg .u64 %r396;
.reg .u64 %r397;
.reg .u64 %r398;
.reg .u64 %r399;
.reg .u64 %r400;
.reg .u64 %r404;
.reg .u64 %r405;
.reg .u32 %r406;
.reg .u32 %r407;
.reg .u32 %r409;
.reg .u64 %r410;
.reg .u64 %r411;
.reg .u64 %r412;
.reg .u64 %r413;
.reg .u64 %r415;
.reg .u64 %r416;
.reg .u16 %r417;
.reg .u16 %r418;
.reg .pred %r419;
.reg .u16 %r420;
.reg .u32 %r422;
.reg .u32 %r423;
.reg .pred %r424;
.reg .pred %r425;
.reg .u32 %r427;
.reg .pred %r428;
.reg .pred %r429;
.reg .u32 %r432;
.reg .pred %r433;
.reg .u64 %r434;
.reg .u32 %r435;
.reg .pred %r437;
.reg .u32 %r439;
.reg .pred %r440;
.reg .pred %r441;
.reg .pred %r442;
.reg .pred %r443;
.reg .pred %r444;
.reg .pred %r445;
.reg .pred %r446;
.reg .pred %r447;
.reg .pred %r448;
.reg .pred %r449;
.reg .pred %r450;
.reg .u32 %r451;
.reg .pred %r452;
.reg .pred %r453;
.reg .pred %r454;
.reg .pred %r455;
.reg .pred %r456;
.reg .pred %r457;
.reg .pred %r458;
.reg .pred %r459;
.reg .pred %r460;
.reg .pred %r461;
.reg .pred %r462;
.reg .pred %r463;
.reg .pred %r464;
.reg .pred %r465;
.reg .pred %r466;
.reg .pred %r467;
.reg .pred %r468;
.reg .u32 %r471;
.reg .pred %r472;
.reg .u64 %r473;
.reg .u32 %r474;
.reg .pred %r476;
.reg .pred %r477;
.reg .u32 %r482;
.reg .u32 %r483;
.reg .u32 %r485;
.reg .u32 %r486;
.reg .u16 %r487;
.reg .u16 %r488;
.reg .u16 %r489;
.reg .u32 %r490;
.reg .u16 %r491;
.reg .pred %r492;
.reg .u32 %r493;
.reg .pred %r494;
.reg .pred %r495;
.reg .u32 %r496;
.reg .pred %r497;
.reg .u32 %r498;
.reg .pred %r499;
.reg .u64 %r501;
.reg .u64 %r502;
.reg .u64 %r503;
.reg .u64 %r504;
.reg .pred %r505;
.reg .pred %r506;
.reg .u32 %r508;
.reg .u32 %r509;
.reg .u32 %r511;
.reg .u32 %r512;
.reg .u16 %r513;
.reg .u16 %r514;
.reg .u16 %r515;
.reg .u32 %r516;
.reg .u16 %r517;
.reg .pred %r518;
.reg .u32 %r520;
.reg .u32 %r521;
.reg .u32 %r523;
.reg .u32 %r524;
.reg .u16 %r525;
.reg .u16 %r526;
.reg .u16 %r527;
.reg .u32 %r528;
.reg .u16 %r529;
.reg .pred %r530;
.reg .pred %r531;
.reg .pred %r532;
.reg .u32 %r533;
.reg .pred %r534;
.reg .u64 %r535;
.reg .u32 %r536;
.reg .pred %r537;
.reg .u32 %r538;
.reg .pred %r539;
.reg .u64 %r540;
.reg .u32 %r541;
.reg .pred %r542;
.reg .u64 %r543;
.reg .pred %r544;
.reg .u32 %r547;
.reg .pred %r548;
.reg .u64 %r549;
.reg .u32 %r550;
.reg .pred %r552;
.reg .u32 %r554;
.reg .pred %r555;
.reg .pred %r558;
.reg .pred %r559;
.reg .u32 %r562;
.reg .pred %r563;
.reg .pred %r564;
.reg .u64 %r565;
.reg .u32 %r566;
.reg .pred %r569;
.reg .u32 %r573;
.reg .u64 %r574;
.reg .u64 %r576;
.reg .u64 %r582;
.reg .pred %r583;
.reg .pred %r584;
.reg .u32 %r585;
.reg .pred %r586;
.reg .pred %r588;
.reg .pred %r589;
.reg .u32 %r592;
.reg .pred %r593;
.reg .pred %r594;
.reg .u64 %r595;
.reg .u32 %r596;
.reg .pred %r599;
.reg .u64 %r601;
.reg .u32 %r603;
.reg .pred %r604;
.reg .pred %r605;
.reg .u32 %r608;
.reg .pred %r609;
.reg .u64 %r610;
.reg .u32 %r611;
.reg .pred %r613;
.reg .pred %r614;
.reg .u64 %r619;
.reg .pred %r620;
.reg .u64 %r624;
.reg .pred %r625;
.reg .pred %r626;
.reg .pred %r627;
.reg .pred %r628;
.reg .u32 %r631;
.reg .pred %r632;
.reg .u64 %r633;
.reg .u32 %r634;
.reg .pred %r636;
.reg .pred %r637;
.reg .u64 %r642;
.reg .pred %r643;
.reg .u64 %r647;
.reg .pred %r648;
.reg .u64 %r649;
.reg .u64 %r651;
.reg .pred %r652;
.reg .u32 %r653;
.reg .u32 %r656;
.reg .u64 %r657;
.reg .u64 %r659;
.reg .u64 %r665;
.reg .pred %r666;
.reg .pred %r667;
.reg .u32 %r668;
.reg .pred %r669;
.reg .pred %r671;
.reg .u32 %r674;
.reg .pred %r675;
.reg .u64 %r676;
.reg .u32 %r677;
.reg .pred %r679;
.reg .pred %r680;
.reg .u64 %r685;
.reg .pred %r686;
.reg .u64 %r690;
.reg .pred %r691;
.reg .u32 %r693;
.reg .pred %r694;
.reg .u32 %r695;
.reg .pred %r696;
.reg .u32 %r697;
.reg .u32 %r698;
.reg .u32 %r699;
.reg .pred %r700;
.reg .u32 %r703;
.reg .pred %r704;
.reg .u64 %r705;
.reg .u32 %r706;
.reg .pred %r708;
.reg .pred %r709;
.reg .u32 %r711;
.reg .pred %r712;
.reg .u32 %r713;
.reg .pred %r714;
.reg .u32 %r715;
.reg .u32 %r716;
.reg .u32 %r717;
.reg .pred %r718;
.reg .u32 %r721;
.reg .pred %r722;
.reg .u64 %r723;
.reg .u32 %r724;
.reg .pred %r726;
.reg .pred %r727;
.reg .u32 %r729;
.reg .pred %r730;
.reg .u32 %r731;
.reg .u32 %r734;
.reg .u64 %r735;
.reg .u64 %r737;
.reg .u64 %r742;
.reg .pred %r743;
.reg .pred %r744;
.reg .u32 %r745;
.reg .pred %r746;
.reg .pred %r748;
.reg .u32 %r751;
.reg .pred %r752;
.reg .u64 %r753;
.reg .u32 %r754;
.reg .pred %r756;
.reg .pred %r757;
.reg .u32 %r759;
.reg .pred %r760;
.reg .u32 %r762;
.reg .u64 %r763;
.reg .pred %r764;
.reg .u64 %r765;
.reg .pred %r766;
.reg .u32 %r769;
.reg .pred %r770;
.reg .u64 %r771;
.reg .pred %r773;
.reg .pred %r774;
.reg .pred %r775;
.reg .pred %r776;
.reg .u32 %r777;
.reg .u32 %r778;
.reg .pred %r779;
.reg .u64 %r780;
.reg .u64 %r781;
.reg .u64 %r782;
.reg .u64 %r783;
.reg .pred %r784;
.reg .pred %r785;
.reg .pred %r786;
.reg .pred %r787;
.reg .pred %r788;
.reg .pred %r789;
.reg .pred %r790;
.reg .u32 %r791;
.reg .pred %r792;
.reg .u64 %r793;
.reg .u64 %r794;
.reg .u64 %r795;
.reg .u64 %r796;
.reg .pred %r797;
.reg .pred %r798;
.reg .u32 %r799;
.reg .pred %r800;
.reg .u32 %r801;
.reg .pred %r802;
.reg .u32 %r803;
.reg .pred %r804;
.reg .u64 %r805;
.reg .pred %r806;
.reg .pred %r807;
.reg .pred %r811;
.reg .u32 %r812;
.reg .pred %r813;
.reg .pred %r814;
.reg .u32 %r818;
.reg .u32 %r819;
.reg .pred %r820;
.reg .u32 %r824;
.reg .pred %r825;
.reg .u64 %r829;
.reg .u64 %r831;
.reg .u64 %r832;
.reg .u32 %r833;
.reg .pred %r834;
.reg .u32 %r835;
.reg .pred %r836;
.reg .u64 %r837;
.reg .u32 %r838;
.reg .pred %r839;
.reg .u64 %r840;
.reg .u32 %r841;
.reg .pred %r842;
.reg .u64 %r843;
.reg .pred %r844;
.reg .u64 %r849;
.reg .u64 %r854;
.reg .u64 %r855;
.reg .u64 %r856;
.reg .u64 %r857;
.reg .u64 %r859;
.reg .u32 %r860;
.reg .u64 %r861;
.reg .pred %r862;
.reg .u32 %r863;
.reg .pred %r864;
.reg .u32 %r867;
.reg .pred %r868;
.reg .u64 %r869;
.reg .pred %r871;
.reg .pred %r872;
.reg .pred %r873;
.reg .pred %r874;
.reg .pred %r875;
.reg .pred %r876;
.reg .pred %r877;
.reg .pred %r878;
.reg .pred %r879;
.reg .pred %r880;
.reg .pred %r881;
.reg .pred %r882;
.reg .pred %r883;
.reg .pred %r884;
.reg .pred %r885;
.reg .pred %r886;
.reg .pred %r887;
.reg .pred %r888;
.reg .pred %r889;
.reg .pred %r890;
.reg .pred %r891;
.reg .pred %r892;
.reg .u32 %r893;
.reg .pred %r894;
.reg .pred %r895;
.reg .u32 %r896;
.reg .pred %r897;
.reg .u32 %r898;
.reg .pred %r899;
.reg .u16 %r901;
.reg .u32 %r902;
.reg .u32 %r903;
.reg .u32 %r905;
.reg .u32 %r906;
.reg .u16 %r907;
.reg .u16 %r908;
.reg .u16 %r909;
.reg .u32 %r910;
.reg .u16 %r911;
.reg .pred %r912;
.reg .u32 %r913;
.reg .pred %r914;
.reg .pred %r916;
.reg .u16 %r918;
.reg .u32 %r919;
.reg .u32 %r920;
.reg .u32 %r923;
.reg .u32 %r924;
.reg .u16 %r925;
.reg .u16 %r926;
.reg .u16 %r927;
.reg .u32 %r928;
.reg .u16 %r929;
.reg .pred %r930;
.reg .u16 %r932;
.reg .u32 %r934;
.reg .u16 %r936;
.reg .pred %r937;
.reg .u16 %r939;
.reg .u32 %r940;
.reg .u32 %r941;
.reg .u32 %r943;
.reg .u32 %r944;
.reg .u16 %r945;
.reg .u16 %r946;
.reg .u16 %r947;
.reg .u32 %r948;
.reg .u16 %r949;
.reg .pred %r950;
.reg .u32 %r951;
.reg .pred %r952;
.reg .u32 %r953;
.reg .u16 %r954;
.reg .u16 %r955;
.reg .u16 %r957;
.reg .u32 %r959;
.reg .u16 %r960;
.reg .pred %r961;
.reg .u16 %r962;
.reg .u32 %r964;
.reg .u16 %r965;
.reg .pred %r966;
.reg .u16 %r967;
.reg .pred %r968;
.reg .u16 %r969;
.reg .pred %r970;
.reg .u32 %r971;
.reg .pred %r972;
.reg .u32 %r973;
.reg .pred %r974;
.reg .u32 %r976;
.reg .pred %r977;
.reg .pred %r978;
.reg .u32 %r979;
.reg .pred %r980;
.reg .pred %r981;
.reg .pred %r985;
.reg .u32 %r987;
.reg .pred %r988;
.reg .pred %r989;
.reg .u32 %r991;
.reg .pred %r993;
.reg .u32 %r994;
.reg .pred %r995;
.reg .u16 %r996;
.reg .pred %r997;
.reg .u32 %r998;
.reg .pred %r1000;
.reg .pred %r1001;
.reg .u32 %r1003;
.reg .u16 %r1006;
.reg .u16 %r1007;
.reg .u16 %r1008;
.reg .u16 %r1011;
.reg .u16 %r1013;
.reg .u16 %r1014;
.reg .u32 %r1015;
.reg .u32 %r1016;
.reg .pred %r1017;
.reg .u32 %r1019;
.reg .pred %r1021;
.reg .u32 %r1022;
.reg .pred %r1023;
.reg .u32 %r1024;
.reg .pred %r1025;
.reg .pred %r1026;
.reg .u32 %r1028;
.reg .pred %r1030;
.reg .u32 %r1031;
.reg .pred %r1032;
.reg .u32 %r1039;
.reg .pred %r1040;
.reg .u32 %r1042;
.reg .pred %r1043;
.reg .pred %r1044;
.reg .pred %r1045;
.reg .u64 %r1048;
.reg .u32 %r1049;
.reg .u64 %r1050;
.reg .u64 %r1051;
.reg .pred %r1053;
.reg .u64 %r1055;
.reg .u64 %r1056;
.reg .u32 %r1057;
.reg .u64 %r1061;
.reg .f64 %r1062;
.reg .u64 %r1063;
.reg .u32 %r1064;
.reg .pred %r1065;
.reg .u64 %r1066;
.reg .u32 %r1067;
.reg .pred %r1068;
.reg .pred %r1069;
.reg .u64 %r1070;
.reg .f32 %r1071;
.reg .f32 %r1072;
.reg .pred %r1073;
.reg .u16 %r1074;
.reg .u16 %r1075;
.reg .pred %r1076;
.reg .pred %r1102;
.reg .pred %r1103;
.reg .pred %r1104;
.reg .pred %r1105;
.reg .pred %r1107;
.reg .pred %r1108;
.reg .pred %r1109;
.reg .pred %r1110;
.reg .pred %r1111;
.reg .u64 %r1112;
.reg .u64 %r1113;
.reg .u64 %r1114;
mov.u64 %r410,%ar0;
mov.u64 %r411,%ar1;
mov.u64 %r412,%ar2;
mov.u64 %r413,%ar3;
.loc 1 547 23
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r415,[%value_in];
}
.loc 1 547 22
ld.u64 %r416,[%r415];
.loc 1 547 10
ld.s8 %r186,[%r416];
.loc 1 553 3
ld.u16 %r418,[%r411+16];
and.b16 %r417,%r418,8192;
setp.ne.u16 %r419,%r417,0;
@ %r419 bra $L13;
or.b16 %r420,%r418,8192;
st.u16 [%r411+16],%r420;
ld.u32 %r423,[%r411+172];
or.b32 %r422,%r423,8192;
st.u32 [%r411+172],%r422;
$L13:
.loc 1 560 15
add.u64 %r187,%r412,4;
.loc 1 560 9
ld.u32 %r154,[%r412];
.loc 1 561 10
setp.eq.u32 %r424,%r154,0;
@ %r424 bra $L215;
mov.u64 %r53,0;
cvt.u32.u64 %r407,%r53;
cvt.u32.u64 %r51,%r53;
cvt.u32.u64 %r409,%r53;
mov.u64 %r30,%r53;
.loc 1 1611 8
add.u64 %r1112,%frame,1316;
.loc 1 1613 17
add.u64 %r1113,%frame,1312;
.loc 1 1115 8
add.u64 %r1114,%frame,1400;
bra $L15;
$L216:
mov.u64 %r166,%r187;
bra $L18;
$L217:
mov.u64 %r166,%r187;
bra $L18;
$L225:
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L226:
mov.u64 %r166,%r187;
bra $L18;
$L228:
mov.u64 %r166,%r187;
bra $L18;
$L231:
mov.u32 %r51,%r225;
mov.u64 %r166,%r187;
bra $L18;
$L232:
mov.u32 %r51,%r225;
mov.u64 %r166,%r187;
bra $L18;
$L234:
mov.u64 %r166,%r187;
bra $L18;
$L247:
mov.u64 %r166,%r187;
$L18:
.loc 1 560 15
add.u64 %r187,%r166,4;
.loc 1 560 9
ld.u32 %r154,[%r166];
.loc 1 561 10
setp.eq.u32 %r425,%r154,0;
@ %r425 bra $L12;
$L15:
.loc 1 563 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r154;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r427,[%value_in];
}
mov.u32 %r32,%r427;
.loc 1 563 10
setp.eq.u32 %r428,%r32,0;
@ %r428 bra $L16;
$L19:
.loc 1 329 9
ld.u32 %r252,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r429,%r252,0;
@ %r429 bra $L17;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r432,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r433,%r432,0;
@ %r433 bra $L216;
.loc 1 333 10
ld.u32 %r252,[%r411+8];
$L17:
.loc 1 331 23
ld.u64 %r254,[%r411];
.loc 1 331 6
ld.u32 %r255,[%r254];
.loc 1 332 10
add.u64 %r434,%r254,4;
st.u64 [%r411],%r434;
.loc 1 333 10
add.u32 %r435,%r252,-4;
st.u32 [%r411+8],%r435;
.loc 1 565 10
setp.eq.u32 %r437,%r255,-1;
@ %r437 bra $L217;
.loc 1 565 49
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r255;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r439,[%value_in];
}
.loc 1 565 46
setp.ne.u32 %r440,%r439,0;
@ %r440 bra $L19;
bra $L440;
$L16:
.loc 1 571 10
setp.ne.u32 %r441,%r154,37;
@ %r441 bra $L21;
.loc 1 586 11
ld.u32 %r384,[%r187];
.loc 1 574 13
mov.u32 %r163,%r32;
.loc 1 586 11
mov.u64 %r29,%r187;
.loc 1 573 13
mov.u64 %r156,0;
bra $L22;
$L441:
.loc 1 586 11
ld.u32 %r384,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r187;
.loc 1 606 10
mov.u32 %r163,16;
.loc 1 586 11
mov.u64 %r156,0;
$L22:
.loc 1 586 15
add.u64 %r187,%r29,4;
.loc 1 588 7
setp.eq.u32 %r442,%r384,104;
@ %r442 bra $L23;
setp.gt.s32 %r443,%r384,104;
@ %r443 bra $L24;
setp.eq.u32 %r444,%r384,76;
@ %r444 bra $L25;
setp.gt.s32 %r445,%r384,76;
@ %r445 bra $L26;
setp.eq.u32 %r446,%r384,42;
@ %r446 bra $L27;
setp.gt.s32 %r447,%r384,42;
@ %r447 bra $L28;
setp.eq.u32 %r448,%r384,37;
@ %r448 bra $L21;
bra $L12;
$L28:
setp.gt.s32 %r449,%r384,57;
@ %r449 bra $L29;
setp.gt.s32 %r450,%r384,47;
@ %r450 bra $L30;
bra $L12;
$L29:
and.b32 %r451,%r384,-3;
setp.eq.u32 %r452,%r451,69;
@ ! %r452 bra $L12;
bra $L218;
$L26:
setp.eq.u32 %r453,%r384,99;
@ %r453 bra $L32;
setp.gt.s32 %r454,%r384,99;
@ %r454 bra $L33;
setp.eq.u32 %r455,%r384,88;
@ %r455 bra $L34;
setp.eq.u32 %r456,%r384,91;
@ %r456 bra $L35;
bra $L12;
$L33:
setp.ne.u32 %r457,%r384,100;
@ %r457 bra $L219;
.loc 1 725 9
mov.u64 %r53,_wcstol_r;
.loc 1 726 9
mov.u32 %r407,10;
.loc 1 724 6
mov.u32 %r406,3;
bra $L60;
$L24:
.loc 1 588 7
setp.eq.u32 %r458,%r384,111;
@ %r458 bra $L220;
setp.gt.s32 %r459,%r384,111;
@ %r459 bra $L37;
setp.eq.u32 %r460,%r384,108;
@ %r460 bra $L38;
setp.eq.u32 %r461,%r384,110;
@ %r461 bra $L39;
setp.eq.u32 %r462,%r384,105;
@ %r462 bra $L221;
bra $L12;
$L37:
setp.eq.u32 %r463,%r384,115;
@ %r463 bra $L222;
setp.gt.s32 %r464,%r384,115;
@ %r464 bra $L40;
setp.eq.u32 %r465,%r384,112;
@ %r465 bra $L41;
bra $L12;
$L40:
setp.eq.u32 %r466,%r384,117;
@ %r466 bra $L223;
setp.eq.u32 %r467,%r384,120;
@ %r467 bra $L34;
bra $L12;
$L21:
.loc 1 329 9
ld.u32 %r261,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r468,%r261,0;
@ %r468 bra $L42;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r471,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r472,%r471,0;
@ %r472 bra $L45;
.loc 1 333 10
ld.u32 %r261,[%r411+8];
$L42:
.loc 1 331 23
ld.u64 %r263,[%r411];
.loc 1 331 6
ld.u32 %r264,[%r263];
.loc 1 332 10
add.u64 %r473,%r263,4;
st.u64 [%r411],%r473;
.loc 1 333 10
add.u32 %r474,%r261,-4;
st.u32 [%r411+8],%r474;
.loc 1 592 7
setp.eq.u32 %r476,%r264,-1;
@ %r476 bra $L45;
.loc 1 594 7
setp.eq.u32 %r477,%r154,%r264;
@ %r477 bra $L44;
.loc 1 596 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r264;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 597 8
bra $L45;
$L44:
.loc 1 599 9
add.u32 %r51,%r51,1;
.loc 1 600 4
mov.u64 %r166,%r187;
bra $L18;
$L27:
.loc 1 604 8
set.u32.ne.u64 %r482,%r156,0;
neg.s32 %r483,%r482;
.loc 1 603 7
set.u32.ne.u32 %r485,%r163,0;
neg.s32 %r486,%r485;
.loc 1 604 8
cvt.u16.u32 %r488,%r483;
cvt.u16.u32 %r489,%r486;
or.b16 %r487,%r488,%r489;
cvt.u32.u16 %r490,%r487;
cvt.u16.u8 %r491,%r490;
setp.ne.u16 %r492,%r491,0;
@ ! %r492 bra $L441;
bra $L12;
$L38:
.loc 1 609 14
and.b32 %r493,%r163,15;
.loc 1 609 7
setp.ne.u32 %r494,%r493,0;
@ %r494 bra $L12;
.loc 1 612 8
ld.u32 %r384,[%r29+4];
.loc 1 612 7
setp.ne.u32 %r495,%r384,108;
@ %r495 bra $L47;
.loc 1 615 14
or.b32 %r163,%r163,2;
.loc 1 586 11
ld.u32 %r384,[%r29+8];
.loc 1 614 8
add.u64 %r29,%r29,8;
bra $L22;
$L47:
.loc 1 619 12
or.b32 %r163,%r163,1;
.loc 1 586 15
mov.u64 %r29,%r187;
bra $L22;
$L25:
.loc 1 622 14
and.b32 %r496,%r163,15;
.loc 1 622 7
setp.ne.u32 %r497,%r496,0;
@ %r497 bra $L12;
.loc 1 624 10
or.b32 %r163,%r163,2;
.loc 1 586 11
ld.u32 %r384,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r187;
.loc 1 625 4
bra $L22;
$L23:
.loc 1 637 12
or.b32 %r163,%r163,4;
.loc 1 586 11
ld.u32 %r384,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r187;
.loc 1 638 4
bra $L22;
$L30:
.loc 1 703 14
and.b32 %r498,%r163,143;
.loc 1 703 7
setp.ne.u32 %r499,%r498,0;
@ %r499 bra $L12;
.loc 1 705 18
shl.b64 %r501,%r156,2;
add.u64 %r502,%r501,%r156;
add.u64 %r503,%r502,%r502;
add.u64 %r183,%r503,-48;
.loc 1 705 23
cvt.s64.s32 %r504,%r384;
.loc 1 705 10
add.u64 %r156,%r504,%r183;
.loc 1 586 11
ld.u32 %r384,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r187;
.loc 1 706 4
bra $L22;
$L34:
.loc 1 749 10
or.b32 %r163,%r163,512;
.loc 1 751 9
mov.u64 %r53,_wcstoul_r;
.loc 1 752 9
mov.u32 %r32,16;
.loc 1 753 4
bra $L36;
$L35:
.loc 1 781 8
ld.u32 %r39,[%r29+4];
.loc 1 781 7
setp.ne.u32 %r505,%r39,94;
@ %r505 bra $L49;
.loc 1 784 8
add.u64 %r187,%r29,8;
.loc 1 789 8
ld.u32 %r39,[%r29+8];
.loc 1 783 17
mov.u32 %r32,1;
$L49:
.loc 1 790 9
add.u64 %r166,%r187,4;
.loc 1 789 7
setp.ne.u32 %r506,%r39,93;
@ %r506 bra $L224;
.loc 1 791 11
ld.u32 %r39,[%r187+4];
.loc 1 790 9
mov.u64 %r194,%r166;
.loc 1 792 9
add.u64 %r166,%r187,8;
bra $L50;
$L224:
mov.u64 %r194,%r187;
$L50:
.loc 1 791 24
set.u32.ne.u32 %r508,%r39,0;
neg.s32 %r509,%r508;
set.u32.ne.u32 %r511,%r39,93;
neg.s32 %r512,%r511;
cvt.u16.u32 %r514,%r509;
cvt.u16.u32 %r515,%r512;
and.b16 %r513,%r514,%r515;
.loc 1 791 10
cvt.u32.u16 %r516,%r513;
cvt.u16.u8 %r517,%r516;
setp.eq.u16 %r518,%r517,0;
@ %r518 bra $L51;
$L52:
mov.u64 %r189,%r194;
.loc 1 792 9
add.u64 %r194,%r194,4;
.loc 1 791 11
ld.u32 %r191,[%r194];
.loc 1 791 24
set.u32.ne.u32 %r520,%r191,0;
neg.s32 %r521,%r520;
set.u32.ne.u32 %r523,%r191,93;
neg.s32 %r524,%r523;
cvt.u16.u32 %r526,%r521;
cvt.u16.u32 %r527,%r524;
and.b16 %r525,%r526,%r527;
.loc 1 791 10
cvt.u32.u16 %r528,%r525;
cvt.u16.u8 %r529,%r528;
setp.ne.u16 %r530,%r529,0;
@ %r530 bra $L52;
.loc 1 794 7
add.u64 %r166,%r189,8;
$L51:
.loc 1 965 7
setp.eq.u64 %r531,%r156,0;
.loc 1 966 12
selp.u64 %r156,-1,%r156,%r531;
.loc 1 991 27
sub.u64 %r601,%r194,%r187;
shr.s64 %r380,%r601,2;
.loc 1 968 27
and.b32 %r603,%r163,17;
.loc 1 968 7
setp.eq.u32 %r604,%r603,17;
@ ! %r604 bra $L442;
bra $L229;
$L32:
max.u64 %r157,%r156,1;
and.b32 %r246,%r163,1;
and.b32 %r394,%r163,16;
.loc 1 879 14
setp.ne.u32 %r532,%r246,0;
@ %r532 bra $L55;
bra $L443;
$L41:
.loc 1 811 10
or.b32 %r163,%r163,544;
.loc 1 813 9
mov.u64 %r53,_wcstoul_r;
.loc 1 814 9
mov.u32 %r32,16;
.loc 1 815 4
bra $L36;
$L39:
.loc 1 818 14
and.b32 %r533,%r163,16;
.loc 1 818 7
setp.ne.u32 %r534,%r533,0;
@ %r534 bra $L225;
.loc 1 830 11
add.u64 %r535,%r413,7;
and.b64 %r382,%r535,-8;
ld.u64 %r371,[%r382];
add.u64 %r413,%r382,8;
.loc 1 828 14
and.b32 %r536,%r163,4;
.loc 1 828 7
setp.eq.u32 %r537,%r536,0;
@ %r537 bra $L57;
.loc 1 831 12
st.u16 [%r371],%r51;
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L57:
.loc 1 833 19
and.b32 %r538,%r163,1;
.loc 1 833 12
setp.eq.u32 %r539,%r538,0;
@ %r539 bra $L58;
.loc 1 836 12
cvt.s64.s32 %r540,%r51;
st.u64 [%r371],%r540;
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L58:
.loc 1 839 19
and.b32 %r541,%r163,2;
.loc 1 839 12
setp.eq.u32 %r542,%r541,0;
@ %r542 bra $L59;
.loc 1 842 13
cvt.s64.s32 %r543,%r51;
st.u64 [%r371],%r543;
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L59:
.loc 1 848 12
st.u32 [%r371],%r51;
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L218:
.loc 1 588 7
mov.u32 %r406,4;
bra $L60;
$L219:
mov.u32 %r406,4;
bra $L60;
$L222:
.loc 1 777 6
mov.u32 %r406,2;
bra $L60;
$L62:
.loc 1 863 11
add.u32 %r51,%r51,1;
$L60:
.loc 1 329 9
ld.u32 %r270,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r544,%r270,0;
@ %r544 bra $L61;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r547,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r548,%r547,0;
@ %r548 bra $L45;
.loc 1 333 10
ld.u32 %r270,[%r411+8];
$L61:
.loc 1 331 23
ld.u64 %r272,[%r411];
.loc 1 331 6
ld.u32 %r273,[%r272];
.loc 1 332 10
add.u64 %r549,%r272,4;
st.u64 [%r411],%r549;
.loc 1 333 10
add.u32 %r550,%r270,-4;
st.u32 [%r411+8],%r550;
.loc 1 862 10
setp.eq.u32 %r552,%r273,-1;
@ %r552 bra $L45;
.loc 1 862 50
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r273;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r554,[%value_in];
}
.loc 1 862 47
setp.ne.u32 %r555,%r554,0;
@ %r555 bra $L62;
bra $L444;
$L55:
.loc 1 887 11
setp.ne.u32 %r1105,%r394,0;
@ %r1105 bra $L64;
.loc 1 894 5
add.u64 %r404,%r413,7;
and.b64 %r391,%r404,-8;
add.u64 %r413,%r391,8;
ld.u64 %r30,[%r391];
$L64:
.loc 1 904 11
mov.u64 %r373,0;
bra $L65;
$L70:
.loc 1 898 8
@ %r1105 bra $L66;
.loc 1 904 14
st.u32 [%r30],%r282;
.loc 1 904 11
add.u64 %r30,%r30,4;
$L66:
add.u32 %r182,%r367,1;
.loc 1 896 14
add.u64 %r373,%r373,1;
setp.eq.u64 %r558,%r157,%r373;
@ %r558 bra $L67;
$L65:
cvt.u32.u64 %r367,%r373;
cvt.u32.u64 %r182,%r373;
.loc 1 329 9
ld.u32 %r279,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r559,%r279,0;
@ %r559 bra $L68;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r562,[%value_in];
}
.loc 1 329 19
setp.eq.u32 %r563,%r562,0;
@ %r563 bra $L69;
$L71:
.loc 1 908 11
setp.eq.u32 %r564,%r182,0;
@ ! %r564 bra $L67;
bra $L45;
$L69:
.loc 1 333 10
ld.u32 %r279,[%r411+8];
$L68:
.loc 1 331 23
ld.u64 %r281,[%r411];
.loc 1 331 6
ld.u32 %r282,[%r281];
.loc 1 332 10
add.u64 %r565,%r281,4;
st.u64 [%r411],%r565;
.loc 1 333 10
add.u32 %r566,%r279,-4;
st.u32 [%r411+8],%r566;
.loc 1 896 28
setp.ne.u32 %r569,%r282,-1;
@ %r569 bra $L70;
bra $L71;
$L67:
.loc 1 910 14
add.u32 %r51,%r51,%r182;
.loc 1 914 11
@ %r1105 bra $L226;
.loc 1 915 12
add.u32 %r409,%r409,1;
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L443:
.loc 1 925 11
setp.ne.u32 %r1105,%r394,0;
@ %r1105 bra $L227;
.loc 1 932 7
add.u64 %r393,%r413,7;
and.b64 %r392,%r393,-8;
add.u64 %r413,%r392,8;
ld.u64 %r168,[%r392];
bra $L72;
$L227:
.loc 1 926 7
add.u64 %r168,%frame,1408;
$L72:
.loc 1 934 8
mov.u64 %r574,8;
mov.u32 %r573,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1114;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r573;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r574;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r576,[%value_in];
}
bra $L73;
$L80:
.loc 1 937 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r168;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r291;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r1114;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r582,[%value_in];
}
.loc 1 938 8
setp.eq.u64 %r583,%r582,-1;
@ %r583 bra $L45;
.loc 1 941 8
setp.ne.u64 %r584,%r582,0;
@ %r584 bra $L74;
.loc 1 941 20
ld.u32 %r585,[%frame+1400];
setp.eq.u32 %r586,%r585,-4;
@ %r586 bra $L75;
$L74:
.loc 1 942 12
add.u64 %r157,%r157,-1;
$L75:
.loc 1 943 8
@ %r1105 bra $L76;
.loc 1 948 13
add.u64 %r168,%r168,%r582;
$L76:
.loc 1 950 6
add.u32 %r246,%r246,1;
.loc 1 935 14
setp.eq.u64 %r588,%r157,0;
@ %r588 bra $L77;
$L73:
.loc 1 329 9
ld.u32 %r288,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r589,%r288,0;
@ %r589 bra $L78;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r592,[%value_in];
}
.loc 1 329 19
setp.eq.u32 %r593,%r592,0;
@ %r593 bra $L79;
$L81:
.loc 1 952 11
setp.eq.u32 %r594,%r246,0;
@ ! %r594 bra $L77;
bra $L45;
$L79:
.loc 1 333 10
ld.u32 %r288,[%r411+8];
$L78:
.loc 1 331 23
ld.u64 %r290,[%r411];
.loc 1 331 6
ld.u32 %r291,[%r290];
.loc 1 332 10
add.u64 %r595,%r290,4;
st.u64 [%r411],%r595;
.loc 1 333 10
add.u32 %r596,%r288,-4;
st.u32 [%r411+8],%r596;
.loc 1 935 26
setp.ne.u32 %r599,%r291,-1;
@ %r599 bra $L80;
bra $L81;
$L77:
.loc 1 954 14
add.u32 %r51,%r51,%r246;
.loc 1 958 11
@ %r1105 bra $L228;
.loc 1 959 12
add.u32 %r409,%r409,1;
.loc 1 586 15
mov.u64 %r166,%r187;
bra $L18;
$L88:
add.u64 %r366,%r366,1;
bra $L82;
$L229:
mov.u64 %r366,0;
.loc 1 971 14
setp.eq.u32 %r1109,%r32,0;
$L82:
cvt.u32.u64 %r162,%r366;
.loc 1 329 9
ld.u32 %r297,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r605,%r297,0;
@ %r605 bra $L84;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r608,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r609,%r608,0;
@ %r609 bra $L207;
.loc 1 333 10
ld.u32 %r297,[%r411+8];
$L84:
.loc 1 331 23
ld.u64 %r299,[%r411];
.loc 1 331 6
ld.u32 %r300,[%r299];
.loc 1 332 10
add.u64 %r610,%r299,4;
st.u64 [%r411],%r610;
.loc 1 333 10
add.u32 %r611,%r297,-4;
st.u32 [%r411+8],%r611;
.loc 1 971 14
setp.eq.u32 %r613,%r300,-1;
@ %r613 bra $L207;
.loc 1 972 8
setp.eq.u64 %r614,%r156,%r366;
@ %r614 bra $L86;
.loc 1 971 14
@ %r1109 bra $L87;
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r187;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r300;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r380;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r619,[%value_in];
}
.loc 1 972 24
setp.eq.u64 %r620,%r619,0;
@ %r620 bra $L88;
bra $L86;
$L87:
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r187;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r300;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r380;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r624,[%value_in];
}
.loc 1 972 24
setp.ne.u64 %r625,%r624,0;
@ %r625 bra $L88;
bra $L86;
$L207:
.loc 1 976 11
setp.eq.u32 %r626,%r162,0;
@ ! %r626 bra $L89;
bra $L12;
$L442:
and.b32 %r162,%r163,1;
.loc 1 979 12
setp.eq.u32 %r627,%r162,0;
@ %r627 bra $L90;
.loc 1 989 10
add.u64 %r396,%r413,7;
and.b64 %r395,%r396,-8;
add.u64 %r413,%r395,8;
ld.u64 %r241,[%r395];
mov.u64 %r247,%r241;
.loc 1 990 14
setp.eq.u32 %r1110,%r32,0;
bra $L91;
$L96:
.loc 1 993 10
st.u32 [%r247],%r309;
add.u64 %r156,%r156,-1;
add.u64 %r247,%r247,4;
$L91:
mov.u64 %r30,%r247;
.loc 1 329 9
ld.u32 %r306,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r628,%r306,0;
@ %r628 bra $L92;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r631,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r632,%r631,0;
@ %r632 bra $L208;
.loc 1 333 10
ld.u32 %r306,[%r411+8];
$L92:
.loc 1 331 23
ld.u64 %r308,[%r411];
.loc 1 331 6
ld.u32 %r309,[%r308];
.loc 1 332 10
add.u64 %r633,%r308,4;
st.u64 [%r411],%r633;
.loc 1 333 10
add.u32 %r634,%r306,-4;
st.u32 [%r411+8],%r634;
.loc 1 990 14
setp.eq.u32 %r636,%r309,-1;
@ %r636 bra $L208;
.loc 1 991 8
setp.eq.u64 %r637,%r156,0;
@ %r637 bra $L94;
.loc 1 990 14
@ %r1110 bra $L95;
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r187;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r309;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r380;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r642,[%value_in];
}
.loc 1 991 24
setp.eq.u64 %r643,%r642,0;
@ %r643 bra $L96;
bra $L94;
$L95:
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r187;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r309;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r380;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r647,[%value_in];
}
.loc 1 991 24
setp.ne.u64 %r648,%r647,0;
@ %r648 bra $L96;
bra $L94;
$L208:
.loc 1 1000 14
sub.u64 %r649,%r247,%r241;
shr.s64 %r651,%r649,2;
.loc 1 1000 10
cvt.u32.u64 %r162,%r651;
.loc 1 1001 11
setp.eq.u32 %r652,%r162,0;
@ %r652 bra $L12;
.loc 1 1003 11
mov.u32 %r653,0;
st.u32 [%r247],%r653;
.loc 1 1007 17
add.u32 %r409,%r409,1;
bra $L89;
$L90:
and.b32 %r74,%r163,16;
.loc 1 1017 11
setp.ne.u32 %r1108,%r74,0;
@ %r1108 bra $L230;
.loc 1 1024 7
add.u64 %r398,%r413,7;
and.b64 %r397,%r398,-8;
add.u64 %r413,%r397,8;
ld.u64 %r169,[%r397];
bra $L97;
$L230:
.loc 1 1018 7
add.u64 %r169,%frame,1408;
$L97:
.loc 1 1026 8
mov.u64 %r657,8;
mov.u32 %r656,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1114;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r656;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r657;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r659,[%value_in];
}
.loc 1 1027 14
setp.eq.u32 %r1111,%r32,0;
bra $L98;
$L106:
.loc 1 1030 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r169;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r318;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r1114;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r665,[%value_in];
}
.loc 1 1031 8
setp.eq.u64 %r666,%r665,-1;
@ %r666 bra $L45;
.loc 1 1034 8
setp.ne.u64 %r667,%r665,0;
@ %r667 bra $L99;
.loc 1 1034 20
ld.u32 %r668,[%frame+1400];
setp.eq.u32 %r669,%r668,-4;
@ %r669 bra $L100;
$L99:
.loc 1 1035 12
add.u64 %r156,%r156,-1;
$L100:
.loc 1 1036 8
@ %r1108 bra $L101;
.loc 1 1038 13
add.u64 %r169,%r169,%r665;
$L101:
.loc 1 1043 6
add.u32 %r162,%r162,1;
$L98:
.loc 1 329 9
ld.u32 %r315,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r671,%r315,0;
@ %r671 bra $L102;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r674,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r675,%r674,0;
@ %r675 bra $L209;
.loc 1 333 10
ld.u32 %r315,[%r411+8];
$L102:
.loc 1 331 23
ld.u64 %r317,[%r411];
.loc 1 331 6
ld.u32 %r318,[%r317];
.loc 1 332 10
add.u64 %r676,%r317,4;
st.u64 [%r411],%r676;
.loc 1 333 10
add.u32 %r677,%r315,-4;
st.u32 [%r411+8],%r677;
.loc 1 1027 14
setp.eq.u32 %r679,%r318,-1;
@ %r679 bra $L209;
.loc 1 1028 8
setp.eq.u64 %r680,%r156,0;
@ %r680 bra $L104;
.loc 1 1027 14
@ %r1111 bra $L105;
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r187;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r318;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r380;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r685,[%value_in];
}
.loc 1 1028 22
setp.eq.u64 %r686,%r685,0;
@ %r686 bra $L106;
bra $L104;
$L105:
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r187;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r318;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r380;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r690,[%value_in];
}
.loc 1 1028 22
setp.ne.u64 %r691,%r690,0;
@ %r691 bra $L106;
bra $L104;
$L209:
.loc 1 1047 11
@ %r1108 bra $L89;
.loc 1 1049 10
mov.u32 %r693,0;
st.u8 [%r169],%r693;
.loc 1 1053 14
add.u32 %r409,%r409,1;
$L89:
.loc 1 1056 10
add.u32 %r51,%r51,%r162;
.loc 1 1057 4
bra $L18;
$L212:
.loc 1 1061 7
setp.ne.u64 %r694,%r156,0;
.loc 1 1062 19
selp.u64 %r156,%r156,-1,%r694;
.loc 1 1063 27
and.b32 %r695,%r163,17;
.loc 1 1063 7
setp.ne.u32 %r696,%r695,17;
@ %r696 bra $L108;
mov.u64 %r238,%r156;
cvt.u32.u64 %r698,%r238;
add.u32 %r697,%r51,%r698;
$L111:
cvt.u32.u64 %r699,%r238;
sub.u32 %r225,%r697,%r699;
.loc 1 329 9
ld.u32 %r324,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r700,%r324,0;
@ %r700 bra $L109;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r703,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r704,%r703,0;
@ %r704 bra $L231;
.loc 1 333 10
ld.u32 %r324,[%r411+8];
$L109:
.loc 1 331 23
ld.u64 %r326,[%r411];
.loc 1 331 6
ld.u32 %r327,[%r326];
.loc 1 332 10
add.u64 %r705,%r326,4;
st.u64 [%r411],%r705;
.loc 1 333 10
add.u32 %r706,%r324,-4;
st.u32 [%r411+8],%r706;
.loc 1 1065 14
setp.eq.u32 %r708,%r327,-1;
@ %r708 bra $L232;
.loc 1 1066 8
setp.eq.u64 %r709,%r238,0;
@ %r709 bra $L110;
.loc 1 1066 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r327;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r711,[%value_in];
}
.loc 1 1066 24
add.u64 %r238,%r238,-1;
setp.eq.u32 %r712,%r711,0;
@ %r712 bra $L111;
bra $L110;
$L108:
.loc 1 1071 19
and.b32 %r713,%r163,1;
.loc 1 1071 12
setp.eq.u32 %r714,%r713,0;
@ %r714 bra $L112;
.loc 1 1081 10
add.u64 %r400,%r413,7;
and.b64 %r399,%r400,-8;
add.u64 %r413,%r399,8;
ld.u64 %r219,[%r399];
.loc 1 1082 14
mov.u64 %r222,%r156;
cvt.u32.u64 %r716,%r222;
add.u32 %r715,%r51,%r716;
bra $L113;
$L117:
.loc 1 1085 10
st.u32 [%r219],%r336;
add.u64 %r219,%r219,4;
$L113:
cvt.u32.u64 %r717,%r222;
sub.u32 %r202,%r715,%r717;
mov.u64 %r30,%r219;
.loc 1 329 9
ld.u32 %r333,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r718,%r333,0;
@ %r718 bra $L114;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r721,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r722,%r721,0;
@ %r722 bra $L210;
.loc 1 333 10
ld.u32 %r333,[%r411+8];
$L114:
.loc 1 331 23
ld.u64 %r335,[%r411];
.loc 1 331 6
ld.u32 %r336,[%r335];
.loc 1 332 10
add.u64 %r723,%r335,4;
st.u64 [%r411],%r723;
.loc 1 333 10
add.u32 %r724,%r333,-4;
st.u32 [%r411+8],%r724;
.loc 1 1082 14
setp.eq.u32 %r726,%r336,-1;
@ %r726 bra $L210;
.loc 1 1083 8
setp.eq.u64 %r727,%r222,0;
@ %r727 bra $L116;
.loc 1 1083 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r336;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r729,[%value_in];
}
.loc 1 1083 24
add.u64 %r222,%r222,-1;
setp.eq.u32 %r730,%r729,0;
@ %r730 bra $L117;
bra $L116;
$L210:
.loc 1 1093 11
mov.u32 %r731,0;
st.u32 [%r219],%r731;
.loc 1 1097 17
add.u32 %r409,%r409,1;
mov.u32 %r51,%r202;
mov.u64 %r166,%r187;
bra $L18;
$L112:
.loc 1 1107 18
and.b32 %r71,%r163,16;
.loc 1 1107 11
setp.ne.u32 %r1107,%r71,0;
@ %r1107 bra $L233;
.loc 1 1114 7
add.u64 %r197,%r413,7;
and.b64 %r167,%r197,-8;
add.u64 %r413,%r167,8;
ld.u64 %r170,[%r167];
bra $L118;
$L233:
.loc 1 1108 7
add.u64 %r170,%frame,1408;
$L118:
.loc 1 1115 8
mov.u64 %r735,8;
mov.u32 %r734,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1114;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r734;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r735;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r737,[%value_in];
}
.loc 1 1116 14
bra $L119;
$L126:
.loc 1 1119 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r170;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r345;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1114;
call (%value_in),wcrtomb,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r742,[%value_in];
}
.loc 1 1120 8
setp.eq.u64 %r743,%r742,-1;
@ %r743 bra $L45;
.loc 1 1123 8
setp.ne.u64 %r744,%r742,0;
@ %r744 bra $L120;
.loc 1 1123 20
ld.u32 %r745,[%frame+1400];
setp.eq.u32 %r746,%r745,-4;
@ %r746 bra $L121;
$L120:
.loc 1 1124 12
add.u64 %r156,%r156,-1;
$L121:
.loc 1 1125 8
@ %r1107 bra $L122;
.loc 1 1127 13
add.u64 %r170,%r170,%r742;
$L122:
.loc 1 1132 10
add.u32 %r51,%r51,1;
$L119:
.loc 1 329 9
ld.u32 %r342,[%r411+8];
.loc 1 329 6
setp.gt.s32 %r748,%r342,0;
@ %r748 bra $L123;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r751,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r752,%r751,0;
@ %r752 bra $L211;
.loc 1 333 10
ld.u32 %r342,[%r411+8];
$L123:
.loc 1 331 23
ld.u64 %r344,[%r411];
.loc 1 331 6
ld.u32 %r345,[%r344];
.loc 1 332 10
add.u64 %r753,%r344,4;
st.u64 [%r411],%r753;
.loc 1 333 10
add.u32 %r754,%r342,-4;
st.u32 [%r411+8],%r754;
.loc 1 1116 14
setp.eq.u32 %r756,%r345,-1;
@ %r756 bra $L211;
.loc 1 1117 8
setp.eq.u64 %r757,%r156,0;
@ %r757 bra $L125;
.loc 1 1117 26
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r345;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r759,[%value_in];
}
.loc 1 1117 22
setp.eq.u32 %r760,%r759,0;
@ %r760 bra $L126;
bra $L125;
$L211:
.loc 1 1136 11
@ %r1107 bra $L234;
.loc 1 1138 10
mov.u32 %r762,0;
st.u8 [%r170],%r762;
.loc 1 1142 14
add.u32 %r409,%r409,1;
mov.u64 %r166,%r187;
bra $L18;
$L213:
.loc 1 1150 19
add.u64 %r763,%r156,-1;
.loc 1 1150 7
setp.le.u64 %r764,%r763,348;
.loc 1 1151 12
selp.u64 %r156,%r156,349,%r764;
.loc 1 1152 10
or.b32 %r164,%r163,1408;
.loc 1 329 9
ld.u32 %r357,[%r411+8];
mov.u64 %r200,%frame;
shl.b64 %r765,%r156,2;
add.u64 %r192,%r765,%frame;
$L145:
mov.u64 %r30,%r200;
.loc 1 329 6
setp.gt.s32 %r766,%r357,0;
@ %r766 bra $L128;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r769,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r770,%r769,0;
@ %r770 bra $L129;
.loc 1 333 10
ld.u32 %r357,[%r411+8];
$L128:
.loc 1 331 23
ld.u64 %r352,[%r411];
.loc 1 331 6
ld.u32 %r353,[%r352];
.loc 1 332 10
add.u64 %r771,%r352,4;
st.u64 [%r411],%r771;
.loc 1 333 10
add.u32 %r357,%r357,-4;
st.u32 [%r411+8],%r357;
setp.gt.u32 %r773,%r353,57;
@ %r773 bra $L130;
setp.gt.u32 %r774,%r353,55;
@ %r774 bra $L131;
setp.eq.u32 %r775,%r353,48;
@ %r775 bra $L132;
setp.gt.u32 %r776,%r353,48;
@ %r776 bra $L133;
add.u32 %r777,%r353,-43;
and.b32 %r778,%r777,-3;
setp.eq.u32 %r779,%r778,0;
@ ! %r779 bra $L135;
bra $L134;
$L133:
.loc 1 1191 19
cvta.const.u64 %r780,basefix$0;
cvt.s64.s32 %r781,%r407;
add.u64 %r782,%r781,%r781;
add.u64 %r783,%r780,%r782;
ld.s16 %r407,[%r783];
.loc 1 1192 11
and.b32 %r164,%r164,-897;
.loc 1 1193 5
bra $L136;
$L130:
setp.gt.u32 %r784,%r353,102;
@ %r784 bra $L137;
setp.gt.u32 %r785,%r353,96;
@ %r785 bra $L138;
setp.gt.u32 %r786,%r353,70;
@ %r786 bra $L139;
setp.gt.u32 %r787,%r353,64;
@ ! %r787 bra $L135;
bra $L138;
$L139:
setp.eq.u32 %r788,%r353,88;
@ %r788 bra $L140;
bra $L135;
$L137:
setp.eq.u32 %r789,%r353,120;
@ %r789 bra $L140;
bra $L445;
$L132:
.loc 1 1172 8
setp.ne.u32 %r790,%r407,0;
@ %r790 bra $L142;
.loc 1 1175 15
or.b32 %r164,%r164,512;
.loc 1 1174 14
mov.u32 %r407,8;
$L142:
.loc 1 1177 15
and.b32 %r791,%r164,1024;
.loc 1 1177 8
setp.eq.u32 %r792,%r791,0;
@ %r792 bra $L143;
.loc 1 1178 13
and.b32 %r164,%r164,-1409;
bra $L136;
$L143:
.loc 1 1180 13
and.b32 %r164,%r164,-897;
bra $L136;
$L131:
.loc 1 1198 19
cvta.const.u64 %r793,basefix$0;
cvt.s64.s32 %r794,%r407;
add.u64 %r795,%r794,%r794;
add.u64 %r796,%r793,%r795;
ld.s16 %r407,[%r796];
.loc 1 1199 8
setp.le.s32 %r797,%r407,8;
@ %r797 bra $L135;
.loc 1 1201 11
and.b32 %r164,%r164,-897;
.loc 1 1202 5
bra $L136;
$L138:
.loc 1 1218 8
setp.le.s32 %r798,%r407,10;
@ %r798 bra $L135;
.loc 1 1220 11
and.b32 %r164,%r164,-897;
.loc 1 1221 5
bra $L136;
$L134:
.loc 1 1226 15
and.b32 %r799,%r164,128;
.loc 1 1226 8
setp.eq.u32 %r800,%r799,0;
@ %r800 bra $L135;
.loc 1 1228 15
and.b32 %r214,%r164,-129;
.loc 1 1229 15
or.b32 %r164,%r214,65536;
.loc 1 1230 9
bra $L136;
$L140:
.loc 1 1237 16
and.b32 %r801,%r164,512;
.loc 1 1237 8
setp.eq.u32 %r802,%r801,0;
@ %r802 bra $L135;
.loc 1 1237 52
and.b32 %r803,%r164,65536;
.loc 1 1237 41
setp.ne.u32 %r804,%r803,0;
selp.u64 %r179,8,4,%r804;
add.u64 %r805,%frame,%r179;
.loc 1 1237 25
setp.ne.u64 %r806,%r200,%r805;
@ %r806 bra $L135;
.loc 1 1240 15
and.b32 %r164,%r164,-513;
.loc 1 1239 14
mov.u32 %r407,16;
.loc 1 1241 9
bra $L136;
$L445:
.loc 1 1250 11
setp.eq.u32 %r807,%r353,-1;
@ %r807 bra $L129;
$L135:
.loc 1 1251 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r353;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L129;
$L136:
add.u64 %r200,%r200,4;
.loc 1 1257 13
st.u32 [%r30],%r353;
.loc 1 1153 4
setp.ne.u64 %r811,%r192,%r200;
@ %r811 bra $L145;
.loc 1 1257 10
mov.u64 %r30,%r192;
$L129:
.loc 1 1267 14
and.b32 %r812,%r164,256;
.loc 1 1267 7
setp.eq.u32 %r813,%r812,0;
@ %r813 bra $L146;
.loc 1 1269 11
setp.ge.u64 %r814,%frame,%r30;
@ %r814 bra $L12;
.loc 1 1270 3
ld.u32 %r818,[%r30+-4];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r818;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L12;
$L146:
.loc 1 1273 9
ld.u32 %r86,[%r30+-4];
.loc 1 1274 23
and.b32 %r819,%r86,-33;
.loc 1 1274 7
setp.ne.u32 %r820,%r819,88;
@ %r820 bra $L147;
.loc 1 1276 8
add.u64 %r30,%r30,-4;
.loc 1 1277 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r86;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
$L147:
.loc 1 1279 15
and.b32 %r824,%r164,16;
.loc 1 1279 7
setp.ne.u32 %r825,%r824,0;
@ %r825 bra $L148;
.loc 1 1283 11
st.u32 [%r30],%r824;
.loc 1 1284 15
mov.u64 %r829,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r829;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r407;
call (%value_in),%r53,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r831,[%value_in];
}
.loc 1 830 11
add.u64 %r832,%r413,7;
and.b64 %r387,%r832,-8;
add.u64 %r413,%r387,8;
.loc 1 1285 18
and.b32 %r833,%r164,32;
.loc 1 1285 11
setp.eq.u32 %r834,%r833,0;
@ %r834 bra $L149;
.loc 1 1287 12
ld.u64 %r224,[%r387];
.loc 1 1297 11
st.u64 [%r224],%r831;
bra $L150;
$L149:
.loc 1 1306 23
and.b32 %r835,%r164,4;
.loc 1 1306 16
setp.eq.u32 %r836,%r835,0;
@ %r836 bra $L151;
.loc 1 1309 9
ld.u64 %r837,[%r387];
st.u16 [%r837],%r831;
bra $L150;
$L151:
.loc 1 1311 23
and.b32 %r838,%r164,1;
.loc 1 1311 16
setp.eq.u32 %r839,%r838,0;
@ %r839 bra $L152;
.loc 1 1314 9
ld.u64 %r840,[%r387];
st.u64 [%r840],%r831;
bra $L150;
$L152:
.loc 1 1317 23
and.b32 %r841,%r164,2;
.loc 1 1317 16
setp.eq.u32 %r842,%r841,0;
@ %r842 bra $L153;
.loc 1 1320 8
mov.u64 %r843,_wcstoul_r;
setp.ne.u64 %r844,%r53,%r843;
@ %r844 bra $L154;
.loc 1 1321 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r829;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r407;
call (%value_in),_wcstoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r849,[%value_in];
}
.loc 1 1325 10
mov.u64 %r95,%r849;
bra $L155;
$L154:
.loc 1 1323 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r829;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r407;
call (%value_in),_wcstoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r854,[%value_in];
}
mov.u64 %r95,%r854;
$L155:
.loc 1 1325 10
ld.u64 %r855,[%r387];
st.u64 [%r855],%r95;
bra $L150;
$L153:
.loc 1 1331 9
ld.u64 %r856,[%r387];
st.u32 [%r856],%r831;
$L150:
.loc 1 1333 17
add.u32 %r409,%r409,1;
$L148:
.loc 1 1335 15
sub.u64 %r857,%r30,%frame;
shr.s64 %r859,%r857,2;
.loc 1 1335 10
cvt.u32.u64 %r860,%r859;
add.u32 %r51,%r51,%r860;
.loc 1 1336 4
mov.u64 %r166,%r187;
bra $L18;
$L452:
.loc 1 1356 14
add.u64 %r861,%r156,-1;
.loc 1 1356 7
setp.le.u64 %r862,%r861,348;
@ %r862 bra $L236;
.loc 1 1359 19
cvt.u32.u64 %r863,%r156;
add.u32 %r176,%r863,-349;
.loc 1 1360 14
mov.u64 %r156,349;
bra $L156;
$L236:
.loc 1 1349 13
mov.u32 %r176,%r554;
$L156:
.loc 1 1362 10
or.b32 %r165,%r163,1920;
.loc 1 329 9
ld.u32 %r368,[%r411+8];
add.u32 %r376,%r51,1;
.loc 1 1351 9
mov.u32 %r178,0;
.loc 1 1350 9
mov.u32 %r177,%r178;
.loc 1 1348 13
mov.u64 %r174,0;
.loc 1 1364 15
mov.u64 %r173,%r174;
.loc 1 1363 11
mov.u64 %r172,%r174;
.loc 1 1346 9
mov.u64 %r171,%r174;
.loc 1 1365 11
mov.u64 %r405,%frame;
$L185:
add.u32 %r51,%r376,-1;
.loc 1 329 6
setp.gt.s32 %r864,%r368,0;
@ %r864 bra $L157;
.loc 1 329 22
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r411;
call (%value_in),__ssrefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r867,[%value_in];
}
.loc 1 329 19
setp.ne.u32 %r868,%r867,0;
@ %r868 bra $L237;
.loc 1 333 10
ld.u32 %r368,[%r411+8];
$L157:
.loc 1 331 23
ld.u64 %r360,[%r411];
.loc 1 331 6
ld.u32 %r361,[%r360];
.loc 1 332 10
add.u64 %r869,%r360,4;
st.u64 [%r411],%r869;
.loc 1 333 10
add.u32 %r368,%r368,-4;
st.u32 [%r411+8],%r368;
.loc 1 1367 10
mov.u32 %r199,%r361;
setp.eq.u32 %r871,%r361,84;
@ %r871 bra $L159;
setp.gt.u32 %r872,%r361,84;
@ %r872 bra $L160;
setp.gt.u32 %r873,%r361,57;
@ %r873 bra $L161;
setp.gt.u32 %r874,%r361,48;
@ %r874 bra $L162;
setp.eq.u32 %r875,%r361,45;
@ %r875 bra $L163;
setp.eq.u32 %r876,%r361,48;
@ %r876 bra $L164;
setp.eq.u32 %r877,%r361,43;
@ %r877 bra $L163;
bra $L158;
$L161:
setp.eq.u32 %r878,%r361,70;
@ %r878 bra $L165;
setp.gt.u32 %r879,%r361,70;
@ %r879 bra $L166;
setp.eq.u32 %r880,%r361,65;
@ %r880 bra $L167;
setp.eq.u32 %r881,%r361,69;
@ %r881 bra $L168;
bra $L158;
$L166:
setp.eq.u32 %r882,%r361,78;
@ %r882 bra $L169;
bra $L158;
$L160:
setp.eq.u32 %r883,%r361,105;
@ %r883 bra $L170;
setp.gt.u32 %r884,%r361,105;
@ %r884 bra $L171;
setp.eq.u32 %r885,%r361,101;
@ %r885 bra $L168;
setp.gt.u32 %r886,%r361,101;
@ %r886 bra $L172;
setp.eq.u32 %r887,%r361,89;
@ %r887 bra $L173;
setp.eq.u32 %r888,%r361,97;
@ %r888 bra $L167;
bra $L158;
$L172:
setp.eq.u32 %r889,%r361,102;
@ %r889 bra $L165;
bra $L158;
$L171:
setp.eq.u32 %r890,%r361,116;
@ %r890 bra $L159;
setp.eq.u32 %r891,%r361,121;
@ %r891 bra $L173;
setp.eq.u32 %r892,%r361,110;
@ %r892 bra $L169;
bra $L158;
$L164:
.loc 1 1375 15
and.b32 %r893,%r165,256;
.loc 1 1375 8
setp.eq.u32 %r894,%r893,0;
@ %r894 bra $L162;
.loc 1 1377 15
and.b32 %r165,%r165,-129;
.loc 1 1378 15
add.u64 %r172,%r172,1;
.loc 1 1513 8
mov.u32 %r51,%r376;
.loc 1 1379 12
setp.eq.u32 %r895,%r176,0;
@ %r895 bra $L238;
.loc 1 1381 16
add.u32 %r176,%r176,-1;
bra $L175;
$L162:
.loc 1 1396 18
add.u32 %r896,%r177,%r178;
.loc 1 1396 8
setp.ne.u32 %r897,%r896,0;
@ ! %r897 bra $L446;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L446:
.loc 1 1398 15
and.b32 %r165,%r165,-385;
.loc 1 1399 9
bra $L177;
$L163:
.loc 1 1405 15
and.b32 %r898,%r165,128;
.loc 1 1405 8
setp.eq.u32 %r899,%r898,0;
@ ! %r899 bra $L447;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L447:
.loc 1 1407 15
and.b32 %r165,%r165,-129;
.loc 1 1408 9
bra $L177;
$L169:
.loc 1 1413 18
cvt.u16.u32 %r901,%r177;
set.u32.eq.u16 %r902,%r901,0;
neg.s32 %r903,%r902;
.loc 1 1413 33
set.u32.eq.u64 %r905,%r172,0;
neg.s32 %r906,%r905;
.loc 1 1413 23
cvt.u16.u32 %r908,%r903;
cvt.u16.u32 %r909,%r906;
and.b16 %r907,%r908,%r909;
.loc 1 1413 8
cvt.u32.u16 %r910,%r907;
cvt.u16.u8 %r911,%r910;
setp.eq.u16 %r912,%r911,0;
@ %r912 bra $L178;
.loc 1 1414 19
and.b32 %r913,%r165,1792;
.loc 1 1414 9
setp.ne.u32 %r914,%r913,1792;
@ %r914 bra $L179;
.loc 1 1417 15
and.b32 %r165,%r165,-1921;
.loc 1 1418 18
mov.u32 %r177,1;
.loc 1 1419 9
mov.u64 %r172,0;
bra $L177;
$L178:
.loc 1 1421 8
setp.eq.u16 %r916,%r901,2;
@ %r916 bra $L239;
$L179:
.loc 1 1426 18
cvt.u16.u32 %r918,%r178;
set.u32.eq.u16 %r919,%r918,1;
neg.s32 %r920,%r919;
.loc 1 1426 35
set.u32.eq.u16 %r923,%r918,4;
neg.s32 %r924,%r923;
.loc 1 1426 23
cvt.u16.u32 %r926,%r920;
cvt.u16.u32 %r927,%r924;
or.b16 %r925,%r926,%r927;
.loc 1 1426 8
cvt.u32.u16 %r928,%r925;
cvt.u16.u8 %r929,%r928;
setp.eq.u16 %r930,%r929,0;
@ ! %r930 bra $L448;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L448:
.loc 1 1428 17
add.u16 %r932,%r918,1;
cvt.u32.u16 %r934,%r932;
cvt.s32.s8 %r178,%r934;
.loc 1 1429 9
bra $L177;
$L167:
.loc 1 1434 8
cvt.u16.u32 %r936,%r177;
setp.eq.u16 %r937,%r936,1;
@ %r937 bra $L240;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L170:
.loc 1 1441 18
cvt.u16.u32 %r939,%r178;
set.u32.eq.u16 %r940,%r939,0;
neg.s32 %r941,%r940;
.loc 1 1441 33
set.u32.eq.u64 %r943,%r172,0;
neg.s32 %r944,%r943;
.loc 1 1441 23
cvt.u16.u32 %r946,%r941;
cvt.u16.u32 %r947,%r944;
and.b16 %r945,%r946,%r947;
.loc 1 1441 8
cvt.u32.u16 %r948,%r945;
cvt.u16.u8 %r949,%r948;
setp.eq.u16 %r950,%r949,0;
@ %r950 bra $L180;
.loc 1 1442 19
and.b32 %r951,%r165,1792;
.loc 1 1442 9
setp.ne.u32 %r952,%r951,1792;
@ %r952 bra $L241;
.loc 1 1445 15
and.b32 %r165,%r165,-1921;
.loc 1 1446 18
mov.u32 %r178,1;
.loc 1 1447 9
mov.u64 %r172,0;
bra $L177;
$L180:
.loc 1 1449 18
cvt.u32.u32 %r953,%r178;
cvt.u16.u8 %r955,%r953;
add.u16 %r954,%r955,-3;
and.b16 %r957,%r954,-3;
.loc 1 1449 8
cvt.u32.u16 %r959,%r957;
cvt.u16.u8 %r960,%r959;
setp.ne.u16 %r961,%r960,0;
@ ! %r961 bra $L449;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L449:
.loc 1 1451 17
add.u16 %r962,%r955,1;
cvt.u32.u16 %r964,%r962;
cvt.s32.s8 %r178,%r964;
.loc 1 1452 9
bra $L177;
$L165:
.loc 1 1457 8
cvt.u16.u32 %r965,%r178;
setp.eq.u16 %r966,%r965,2;
@ %r966 bra $L242;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L159:
.loc 1 1465 8
cvt.u16.u32 %r967,%r178;
setp.eq.u16 %r968,%r967,6;
@ %r968 bra $L243;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L173:
.loc 1 1473 8
cvt.u16.u32 %r969,%r178;
setp.eq.u16 %r970,%r969,7;
@ %r970 bra $L244;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L168:
.loc 1 1482 16
and.b32 %r971,%r165,1280;
.loc 1 1482 8
setp.eq.u32 %r972,%r971,1024;
@ %r972 bra $L181;
.loc 1 1483 20
and.b32 %r973,%r165,1024;
.loc 1 1483 9
setp.eq.u32 %r974,%r973,0;
@ ! %r974 bra $L450;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L450:
.loc 1 1483 29
setp.eq.u64 %r1104,%r172,0;
@ %r1104 bra $L176;
$L181:
.loc 1 1485 22
and.b32 %r976,%r165,512;
.loc 1 1485 12
setp.ne.u32 %r977,%r976,0;
@ %r977 bra $L182;
.loc 1 1487 17
sub.u64 %r173,%r172,%r171;
mov.u64 %r174,%r405;
$L182:
.loc 1 1492 11
and.b32 %r127,%r165,-1921;
.loc 1 1490 15
or.b32 %r165,%r127,384;
.loc 1 1493 16
mov.u64 %r172,0;
.loc 1 1494 9
bra $L177;
$L237:
mov.u32 %r361,-1;
.loc 1 1367 10
mov.u32 %r199,%r361;
$L158:
.loc 1 1498 8
setp.ne.u32 %r978,%r186,%r361;
@ %r978 bra $L183;
.loc 1 1498 40
and.b32 %r979,%r165,512;
.loc 1 1498 30
setp.eq.u32 %r980,%r979,0;
@ %r980 bra $L183;
.loc 1 1500 15
and.b32 %r165,%r165,-641;
.loc 1 1502 9
mov.u64 %r171,%r172;
bra $L177;
$L183:
.loc 1 1506 11
setp.eq.u32 %r981,%r199,-1;
@ %r981 bra $L245;
setp.eq.u64 %r1104,%r172,0;
bra $L176;
$L241:
mov.u32 %r178,0;
mov.u64 %r172,0;
setp.eq.u32 %r1104,1,1;
$L176:
.loc 1 1507 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r199;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u64 %r30,%r405;
bra $L184;
$L239:
.loc 1 1423 18
mov.u32 %r177,3;
bra $L177;
$L240:
.loc 1 1436 18
mov.u32 %r177,2;
bra $L177;
$L242:
.loc 1 1459 18
mov.u32 %r178,3;
bra $L177;
$L243:
.loc 1 1467 18
mov.u32 %r178,7;
bra $L177;
$L244:
.loc 1 1475 18
mov.u32 %r178,8;
$L177:
.loc 1 1510 10
add.u64 %r30,%r405,4;
.loc 1 1510 13
st.u32 [%r405],%r361;
.loc 1 1513 8
mov.u32 %r51,%r376;
bra $L174;
$L238:
mov.u64 %r30,%r405;
$L174:
.loc 1 1512 13
add.u64 %r156,%r156,-1;
.loc 1 1365 4
setp.eq.u64 %r985,%r156,0;
@ ! %r985 bra $L451;
setp.eq.u64 %r1104,%r172,0;
bra $L184;
$L451:
.loc 1 329 9
ld.u32 %r368,[%r411+8];
mov.u64 %r405,%r30;
$L175:
add.u32 %r376,%r376,1;
bra $L185;
$L245:
mov.u64 %r30,%r405;
setp.eq.u64 %r1104,%r172,0;
$L184:
.loc 1 1515 7
@ %r1104 bra $L186;
.loc 1 1516 12
and.b32 %r165,%r165,-257;
$L186:
.loc 1 1525 17
add.u32 %r987,%r177,-1;
.loc 1 1525 7
setp.gt.u32 %r988,%r987,1;
@ %r988 bra $L187;
.loc 1 1530 14
setp.ge.u64 %r989,%frame,%r30;
@ %r989 bra $L12;
$L188:
.loc 1 1532 5
add.u64 %r30,%r30,-4;
ld.u32 %r991,[%r30];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r991;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 1530 14
setp.lt.u64 %r993,%frame,%r30;
@ %r993 bra $L188;
bra $L12;
$L187:
.loc 1 1540 17
add.u32 %r994,%r178,-1;
.loc 1 1540 7
setp.gt.u32 %r995,%r994,6;
@ %r995 bra $L189;
.loc 1 1542 11
cvt.u16.u32 %r996,%r178;
setp.le.s16 %r997,%r996,2;
@ %r997 bra $L190;
.loc 1 1543 18
cvt.u32.u32 %r998,%r178;
cvt.u32.u8 %r58,%r998;
.loc 1 1543 9
setp.ne.u16 %r1000,%r996,3;
@ %r1000 bra $L246;
bra $L189;
$L190:
.loc 1 1550 11
setp.lt.u64 %r1001,%frame,%r30;
@ %r1001 bra $L192;
bra $L12;
$L246:
.loc 1 1543 9
mov.u32 %r203,%r51;
cvt.u16.u32 %r1008,%r58;
cvt.u16.u32 %r1013,%r203;
$L191:
.loc 1 1545 7
add.u64 %r30,%r30,-4;
ld.u32 %r1003,[%r30];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1003;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 1546 7
add.u32 %r203,%r203,-1;
.loc 1 1543 9
cvt.u16.u32 %r1007,%r203;
add.u16 %r1006,%r1007,%r1008;
sub.u16 %r1011,%r1006,%r1013;
cvt.u32.u16 %r1016,%r1011;
cvt.s32.s8 %r1015,%r1016;
cvt.u16.u32 %r1014,%r1015;
setp.gt.s16 %r1017,%r1014,3;
@ %r1017 bra $L191;
.loc 1 1546 7
mov.u32 %r51,%r203;
bra $L189;
$L192:
.loc 1 1552 9
add.u64 %r30,%r30,-4;
ld.u32 %r1019,[%r30];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1019;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 1550 11
setp.lt.u64 %r1021,%frame,%r30;
@ %r1021 bra $L192;
bra $L12;
$L189:
.loc 1 1563 14
and.b32 %r1022,%r165,256;
.loc 1 1563 7
setp.eq.u32 %r1023,%r1022,0;
@ %r1023 bra $L193;
.loc 1 1565 18
and.b32 %r1024,%r165,1024;
.loc 1 1565 11
setp.eq.u32 %r1025,%r1024,0;
@ %r1025 bra $L194;
.loc 1 1568 11
setp.ge.u64 %r1026,%frame,%r30;
@ %r1026 bra $L12;
$L195:
.loc 1 1570 9
add.u64 %r30,%r30,-4;
ld.u32 %r1028,[%r30];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1028;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 1568 11
setp.lt.u64 %r1030,%frame,%r30;
@ %r1030 bra $L195;
bra $L12;
$L194:
.loc 1 1576 12
ld.u32 %r155,[%r30+-4];
.loc 1 1578 27
and.b32 %r1031,%r155,-33;
.loc 1 1578 11
setp.ne.u32 %r1032,%r1031,69;
@ %r1032 bra $L196;
.loc 1 1576 10
add.u64 %r30,%r30,-4;
.loc 1 1577 8
add.u32 %r51,%r51,-1;
bra $L197;
$L196:
.loc 1 1580 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r155;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 1581 7
ld.u32 %r155,[%r30+-8];
.loc 1 1582 5
add.u32 %r51,%r51,-2;
.loc 1 1581 7
add.u64 %r30,%r30,-8;
$L197:
.loc 1 1584 8
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r155;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
$L193:
.loc 1 1586 15
and.b32 %r1039,%r165,16;
.loc 1 1586 7
setp.ne.u32 %r1040,%r1039,0;
@ %r1040 bra $L247;
.loc 1 1597 11
st.u32 [%r30],%r1039;
.loc 1 1598 19
and.b32 %r1042,%r165,1536;
.loc 1 1598 11
setp.ne.u32 %r1043,%r1042,1024;
@ %r1043 bra $L198;
.loc 1 1601 13
sub.u64 %r206,%r171,%r172;
.loc 1 1606 11
setp.ne.u64 %r1044,%r171,%r172;
@ %r1044 bra $L248;
bra $L200;
$L198:
.loc 1 1604 16
setp.eq.u64 %r1045,%r173,0;
@ %r1045 bra $L200;
.loc 1 1605 55
add.u64 %r1050,%r174,4;
.loc 1 1605 27
mov.u32 %r1049,10;
mov.u64 %r1048,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1050;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1048;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r1049;
call (%value_in),_wcstol_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r1051,[%value_in];
}
.loc 1 1605 25
sub.u64 %r206,%r1051,%r173;
bra $L199;
$L248:
mov.u64 %r174,%r30;
$L199:
.loc 1 1611 8
setp.lt.u64 %r1053,%r174,%r1112;
.loc 1 1613 17
selp.u64 %r174,%r174,%r1113,%r1053;
.loc 1 1615 18
st.u64 [%stack],%r206;
cvta.const.u64 %r1056,$LC0;
mov.u64 %r1055,21;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r174;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1055;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1056;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1057,[%value_in];
}
$L200:
.loc 1 1624 16
mov.u64 %r1061,0;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1061;
call (%value_in),_wcstod_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.f64 %r1062,[%value_in];
}
.loc 1 830 11
add.u64 %r1063,%r413,7;
and.b64 %r390,%r1063,-8;
add.u64 %r413,%r390,8;
.loc 1 1626 18
and.b32 %r1064,%r165,1;
.loc 1 1626 11
setp.eq.u32 %r1065,%r1064,0;
@ %r1065 bra $L202;
.loc 1 1629 9
ld.u64 %r1066,[%r390];
st.f64 [%r1066],%r1062;
bra $L203;
$L202:
.loc 1 1628 8
ld.u64 %r386,[%r390];
.loc 1 1631 23
and.b32 %r1067,%r165,2;
.loc 1 1631 16
setp.eq.u32 %r1068,%r1067,0;
@ %r1068 bra $L204;
.loc 1 1634 10
st.f64 [%r386],%r1062;
bra $L203;
$L204:
.loc 1 1639 8
setp.num.f64 %r1069,%r1062,%r1062;
@ %r1069 bra $L205;
.loc 1 1640 14
cvta.const.u64 %r1070,$LC1;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1070;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r1071,[%value_in];
}
.loc 1 1640 12
st.f32 [%r386],%r1071;
bra $L203;
$L205:
.loc 1 1642 12
cvt.rn.f32.f64 %r1072,%r1062;
st.f32 [%r386],%r1072;
$L203:
.loc 1 1644 17
add.u32 %r409,%r409,1;
mov.u64 %r166,%r187;
bra $L18;
$L45:
.loc 1 1656 63
setp.eq.u32 %r1073,%r409,0;
@ %r1073 bra $L249;
.loc 1 1656 25
ld.u16 %r1075,[%r411+16];
and.b16 %r1074,%r1075,64;
setp.ne.u16 %r1076,%r1074,0;
.loc 1 1656 63
selp.u32 %r409,-1,%r409,%r1076;
bra $L12;
$L215:
.loc 1 561 10
mov.u32 %r409,%r154;
bra $L12;
$L249:
.loc 1 1656 63
mov.u32 %r409,-1;
bra $L12;
$L14:
$L206:
$L440:
.loc 1 568 6
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r255;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u64 %r166,%r187;
bra $L18;
$L86:
.loc 1 975 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r300;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L207;
$L94:
.loc 1 999 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r309;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L208;
$L104:
.loc 1 1046 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r318;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L209;
$L110:
.loc 1 1069 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r327;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
mov.u32 %r51,%r225;
mov.u64 %r166,%r187;
bra $L18;
$L116:
.loc 1 1092 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r336;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L210;
$L125:
.loc 1 1135 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r345;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
bra $L211;
$L444:
.loc 1 866 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r410;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r273;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r411;
call _sungetwc_r$isra$0,(%out_arg1,%out_arg2,%out_arg3);
}
.loc 1 872 7
setp.eq.u32 %r1102,%r406,2;
@ %r1102 bra $L212;
setp.eq.u32 %r1103,%r406,3;
@ ! %r1103 bra $L452;
bra $L213;
$L220:
.loc 1 588 7
mov.u64 %r53,_wcstoul_r;
mov.u32 %r32,8;
bra $L36;
$L221:
.loc 1 731 9
mov.u64 %r53,_wcstol_r;
bra $L36;
$L223:
.loc 1 743 9
mov.u64 %r53,_wcstoul_r;
.loc 1 744 9
mov.u32 %r32,10;
$L36:
mov.u32 %r407,%r32;
mov.u32 %r406,3;
bra $L60;
$L12:
.loc 1 1665 1
mov.u32 %value,%r409;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-swab.o/   1612277262  0     0     100666  1751      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: swab
.visible .func swab (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/swab.c"
// BEGIN GLOBAL FUNCTION DEF: swab
.visible .func swab (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .pred %r43;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .u64 %r51;
.reg .u64 %r53;
.reg .pred %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u32 %r57;
mov.u64 %r40,%ar0;
mov.u64 %r41,%ar1;
mov.u64 %r42,%ar2;
.loc 1 28 3
setp.le.s64 %r43,%r42,1;
@ %r43 bra $L5;
mov.u64 %r33,0;
.loc 1 28 12
mov.u64 %r30,1;
$L3:
.loc 1 30 12
add.u64 %r44,%r40,%r30;
.loc 1 31 12
add.u64 %r45,%r40,%r33;
ld.s8 %r29,[%r45];
.loc 1 32 17
add.u64 %r46,%r41,%r33;
ld.u8 %r47,[%r44];
st.u8 [%r46],%r47;
.loc 1 33 17
add.u64 %r48,%r41,%r30;
cvt.u32.u32 %r49,%r29;
st.u8 [%r48],%r49;
.loc 1 28 35
add.u64 %r30,%r30,2;
.loc 1 28 3
add.u64 %r33,%r33,2;
setp.gt.s64 %r50,%r42,%r30;
@ %r50 bra $L3;
.loc 1 28 35
add.u64 %r51,%r42,-2;
and.b64 %r53,%r51,-2;
add.u64 %r32,%r53,3;
bra $L2;
$L5:
.loc 1 28 12
mov.u64 %r32,1;
$L2:
.loc 1 35 6
setp.ne.u64 %r54,%r42,%r32;
@ %r54 bra $L1;
.loc 1 36 15
add.u64 %r55,%r41,%r42;
add.u64 %r56,%r55,-1;
mov.u32 %r57,0;
st.u8 [%r56],%r57;
$L1:
.loc 1 37 1
ret;
}

lib_a-time.o/   1612277262  0     0     100666  1570      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: time
.visible .func (.param .u64 %value_out) time (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/time.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _gettimeofday_r
.extern .func (.param .u32 %value_out) _gettimeofday_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: time
.visible .func (.param .u64 %value_out) time (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r25,%ar0;
.loc 1 40 7
ld.global.u64 %r29,[_impure_ptr];
mov.u64 %r28,0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),_gettimeofday_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r30,[%value_in];
}
.loc 1 40 6
setp.lt.s32 %r31,%r30,0;
@ %r31 bra $L4;
.loc 1 44 13
ld.u64 %r24,[%frame];
bra $L2;
$L4:
mov.u64 %r24,-1;
$L2:
.loc 1 43 6
setp.eq.u64 %r32,%r25,0;
@ %r32 bra $L1;
.loc 1 44 8
st.u64 [%r25],%r24;
$L1:
.loc 1 46 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-timesr.o/ 1612277262  0     0     100666  928       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _times_r
.visible .func (.param .u64 %value_out) _times_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/reent/timesr.c"
// BEGIN GLOBAL FUNCTION DECL: times
.extern .func (.param .u64 %value_out) times (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _times_r
.visible .func (.param .u64 %value_out) _times_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r26;
mov.u64 %r24,%ar1;
.loc 1 52 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call (%value_in),times,(%out_arg1);
ld.param.u64 %r26,[%value_in];
}
.loc 1 54 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}
/1637           1612277263  0     0     100666  1662      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: timingsafe_bcmp
.visible .func (.param .u32 %value_out) timingsafe_bcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/timingsafe_bcmp.c"
// BEGIN GLOBAL FUNCTION DEF: timingsafe_bcmp
.visible .func (.param .u32 %value_out) timingsafe_bcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r25;
.reg .u32 %r28;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .pred %r37;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u16 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u32 %r47;
.reg .u16 %r50;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
mov.u64 %r36,%ar2;
.loc 1 26 2
setp.eq.u64 %r37,%r36,0;
@ %r37 bra $L4;
mov.u64 %r31,%r34;
mov.u64 %r30,%r35;
add.u64 %r25,%r31,%r36;
.loc 1 24 6
mov.u32 %r28,0;
$L3:
.loc 1 27 16
ld.u8 %r50,[%r31];
mov.u16 %r41,%r50;
ld.u8 %r50,[%r30];
mov.u16 %r42,%r50;
xor.b16 %r40,%r41,%r42;
cvt.u32.u16 %r44,%r40;
cvt.u32.u8 %r43,%r44;
.loc 1 27 7
or.b32 %r28,%r28,%r43;
.loc 1 26 2
add.u64 %r31,%r31,1;
add.u64 %r30,%r30,1;
setp.ne.u64 %r45,%r25,%r31;
@ %r45 bra $L3;
.loc 1 28 14
set.u32.ne.u32 %r47,%r28,0;
neg.s32 %r33,%r47;
bra $L1;
$L4:
.loc 1 26 2
cvt.u32.u64 %r33,%r36;
$L1:
.loc 1 29 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
/1662           1612277263  0     0     100666  1937      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: timingsafe_memcmp
.visible .func (.param .u32 %value_out) timingsafe_memcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/timingsafe_memcmp.c"
// BEGIN GLOBAL FUNCTION DEF: timingsafe_memcmp
.visible .func (.param .u32 %value_out) timingsafe_memcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u32 %r25;
.reg .u32 %r31;
.reg .u32 %r32;
.reg .u32 %r34;
.reg .u64 %r35;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u32 %r49;
.reg .u32 %r50;
.reg .pred %r51;
mov.u64 %r41,%ar0;
mov.u64 %r42,%ar1;
mov.u64 %r43,%ar2;
.loc 1 28 9
setp.eq.u64 %r44,%r43,0;
@ %r44 bra $L4;
mov.u64 %r39,%r41;
mov.u64 %r38,%r42;
add.u64 %r35,%r39,%r43;
.loc 1 26 22
mov.u32 %r34,0;
.loc 1 26 13
mov.u32 %r40,%r34;
$L3:
.loc 1 30 29
ld.u8 %r23,[%r39];
.loc 1 30 37
ld.u8 %r25,[%r38];
.loc 1 30 33
sub.u32 %r45,%r23,%r25;
.loc 1 30 21
shr.s32 %r31,%r45,8;
.loc 1 33 33
sub.u32 %r46,%r25,%r23;
.loc 1 33 21
shr.s32 %r32,%r46,8;
.loc 1 39 30
not.b32 %r47,%r34;
.loc 1 36 21
sub.u32 %r48,%r31,%r32;
.loc 1 39 28
and.b32 %r49,%r47,%r48;
.loc 1 39 21
or.b32 %r40,%r40,%r49;
.loc 1 42 28
or.b32 %r50,%r31,%r32;
.loc 1 42 22
or.b32 %r34,%r34,%r50;
.loc 1 28 9
add.u64 %r39,%r39,1;
add.u64 %r38,%r38,1;
setp.ne.u64 %r51,%r35,%r39;
@ %r51 bra $L3;
bra $L1;
$L4:
.loc 1 26 13
cvt.u32.u64 %r40,%r43;
$L1:
.loc 1 46 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-tmpfile.o/1612277263  0     0     100666  4245      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _tmpfile_r
.visible .func (.param .u64 %value_out) _tmpfile_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/stdio/tmpfile.c"
// BEGIN GLOBAL FUNCTION DECL: tmpfile
.visible .func (.param .u64 %value_out) tmpfile;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _tmpnam_r
.extern .func (.param .u64 %value_out) _tmpnam_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _open_r
.extern .func (.param .u32 %value_out) _open_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _close_r
.extern .func (.param .u32 %value_out) _close_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _remove_r
.extern .func (.param .u32 %value_out) _remove_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fdopen_r
.extern .func (.param .u64 %value_out) _fdopen_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[4] =
{119,98,43,0 };
// BEGIN GLOBAL FUNCTION DEF: _tmpfile_r
.visible .func (.param .u64 %value_out) _tmpfile_r (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 16 .b8 %frame_ar[1024];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .pred %r31;
.reg .u32 %r34;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .pred %r37;
.reg .u32 %r38;
.reg .pred %r39;
.reg .u32 %r42;
.reg .u32 %r45;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .pred %r51;
mov.u64 %r27,%ar0;
$L5:
.loc 1 63 16
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
call (%value_in),_tmpnam_r,(%out_arg1,%out_arg2);
ld.param.u64 %r30,[%value_in];
}
.loc 1 63 10
setp.ne.u64 %r31,%r30,0;
@ %r31 bra $L2;
$L6:
.loc 1 64 9
mov.u64 %r26,0;
bra $L1;
$L2:
.loc 1 65 12
mov.u32 %r35,384;
mov.u32 %r34,2562;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r34;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r35;
call (%value_in),_open_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 68 3
setp.ge.s32 %r37,%r36,0;
@ %r37 bra $L4;
.loc 1 68 17
ld.u32 %r38,[%r27];
setp.eq.u32 %r39,%r38,17;
@ %r39 bra $L5;
bra $L6;
$L7:
.loc 1 74 5
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r36;
call (%value_in),_close_r,(%out_arg1,%out_arg2);
ld.param.u32 %r42,[%value_in];
}
$L8:
.loc 1 75 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r30;
call (%value_in),_remove_r,(%out_arg1,%out_arg2);
ld.param.u32 %r45,[%value_in];
}
.loc 1 76 15
st.u32 [%r27],%r25;
.loc 1 77 10
bra $L1;
$L4:
.loc 1 71 8
cvta.const.u64 %r49,$LC0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r36;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r49;
call (%value_in),_fdopen_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r50,[%value_in];
}
mov.u64 %r26,%r50;
.loc 1 72 5
ld.u32 %r25,[%r27];
.loc 1 73 6
setp.eq.u64 %r51,%r26,0;
@ ! %r51 bra $L8;
bra $L7;
$L1:
.loc 1 78 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: tmpfile
.visible .func (.param .u64 %value_out) tmpfile
{
.reg .u64 %value;
.reg .u64 %r25;
.reg .u64 %r26;
.loc 1 85 10
ld.global.u64 %r25,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call (%value_in),_tmpfile_r,(%out_arg1);
ld.param.u64 %r26,[%value_in];
}
.loc 1 86 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-tmpnam.o/ 1612277263  0     0     100666  12030     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN FUNCTION DECL: worker
.func (.param .u32 %value_out) worker (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u64 %in_ar5);
.file 1 "../../../../../newlib/libc/stdio/tmpnam.c"
// BEGIN GLOBAL FUNCTION DECL: _tmpnam_r
.visible .func (.param .u64 %value_out) _tmpnam_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _tempnam_r
.visible .func (.param .u64 %value_out) _tempnam_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: tempnam
.visible .func (.param .u64 %value_out) tempnam (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: tmpnam
.visible .func (.param .u64 %value_out) tmpnam (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _sprintf_r
.extern .func (.param .u32 %value_out) _sprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _open_r
.extern .func (.param .u32 %value_out) _open_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _close_r
.extern .func (.param .u32 %value_out) _close_r (.param .u64 %in_ar0, .param .u32 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _getpid_r
.extern .func (.param .u32 %value_out) _getpid_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: getenv
.extern .func (.param .u64 %value_out) getenv (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[11] =
{37,115,47,37,115,37,120,46,37,120,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[5] =
{47,116,109,112,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[1] =
{0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[7] =
{84,77,80,68,73,82,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[2] =
{116,0 };
// BEGIN FUNCTION DEF: worker
.func (.param .u32 %value_out) worker (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u32 %in_ar4, .param .u64 %in_ar5)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %ar4;
ld.param.u32 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.local .align 8 .b8 %stack_ar[32];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .u64 %r33;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .pred %r47;
.reg .u32 %r48;
.reg .pred %r49;
.reg .u32 %r50;
.reg .u32 %r53;
.reg .u64 %r55;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u64 %r30,%ar2;
mov.u64 %r31,%ar3;
mov.u32 %r32,%ar4;
mov.u64 %r33,%ar5;
cvta.const.u64 %r55,$LC0;
$L4:
.loc 1 102 7
ld.u32 %r37,[%r33];
st.u32 [%stack+20],%r37;
st.u32 [%stack+16],%r32;
st.u64 [%stack+8],%r31;
st.u64 [%stack],%r30;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r55;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),_sprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r38,[%value_in];
}
.loc 1 103 15
ld.u32 %r41,[%r33];
add.u32 %r40,%r41,1;
st.u32 [%r33],%r40;
.loc 1 104 11
mov.u32 %r45,0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r45;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r45;
call (%value_in),_open_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r46,[%value_in];
}
.loc 1 105 10
setp.ne.u32 %r47,%r46,-1;
@ %r47 bra $L2;
.loc 1 107 7
ld.u32 %r48,[%r28];
setp.ne.u32 %r49,%r48,88;
@ %r49 bra $L5;
.loc 1 109 18
cvt.u32.u32 %r50,%r45;
st.u8 [%r29],%r50;
.loc 1 110 15
mov.u32 %r27,%r45;
bra $L1;
$L2:
.loc 1 114 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r46;
call (%value_in),_close_r,(%out_arg1,%out_arg2);
ld.param.u32 %r53,[%value_in];
}
.loc 1 100 5
bra $L4;
$L5:
.loc 1 116 10
mov.u32 %r27,1;
$L1:
.loc 1 117 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _tmpnam_r
.visible .func (.param .u64 %value_out) _tmpnam_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u32 %r32;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .u32 %r42;
.reg .u32 %r43;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 126 6
setp.ne.u64 %r30,%r29,0;
@ %r30 bra $L7;
.loc 1 130 14
add.u64 %r29,%r28,36;
$L7:
.loc 1 136 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
call (%value_in),_getpid_r,(%out_arg1);
ld.param.u32 %r32,[%value_in];
}
.loc 1 138 7
add.u64 %r39,%r28,32;
cvta.const.u64 %r36,$LC1;
cvta.const.u64 %r35,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r28;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r35;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r36;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r32;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r39;
call (%value_in),worker,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
ld.param.u32 %r40,[%value_in];
}
.loc 1 138 6
setp.eq.u32 %r41,%r40,0;
@ %r41 bra $L9;
.loc 1 140 14
ld.u32 %r43,[%r28+32];
add.u32 %r42,%r43,1;
st.u32 [%r28+32],%r42;
.loc 1 141 14
mov.u64 %r27,%r29;
bra $L6;
$L9:
.loc 1 144 10
mov.u64 %r27,0;
$L6:
.loc 1 145 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _tempnam_r
.visible .func (.param .u64 %value_out) _tempnam_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .pred %r40;
.reg .pred %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .pred %r44;
.reg .u64 %r46;
.reg .u64 %r48;
.reg .u32 %r51;
.reg .u32 %r52;
.reg .u32 %r53;
.reg .u32 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .pred %r57;
.reg .u32 %r59;
.reg .u64 %r66;
.reg .u32 %r67;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .pred %r70;
mov.u64 %r37,%ar0;
mov.u64 %r38,%ar1;
mov.u64 %r39,%ar2;
.loc 1 154 36
setp.ne.u64 %r40,%r39,0;
@ %r40 bra $L11;
cvta.const.u64 %r39,$LC3;
$L11:
.loc 1 155 6
setp.ne.u64 %r41,%r38,0;
@ %r41 bra $L12;
.loc 1 155 29
cvta.const.u64 %r42,$LC4;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r42;
call (%value_in),getenv,(%out_arg1);
ld.param.u64 %r43,[%value_in];
}
mov.u64 %r38,%r43;
.loc 1 155 19
setp.ne.u64 %r44,%r38,0;
@ %r44 bra $L12;
.loc 1 156 9
cvta.const.u64 %r38,$LC2;
$L12:
.loc 1 159 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r46,[%value_in];
}
.loc 1 159 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r39;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r48,[%value_in];
}
.loc 1 159 25
cvt.u32.u64 %r52,%r46;
cvt.u32.u64 %r53,%r48;
add.u32 %r51,%r52,%r53;
.loc 1 159 68
add.u32 %r54,%r51,19;
.loc 1 161 14
cvt.s64.s32 %r55,%r54;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r55;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r56,[%value_in];
}
mov.u64 %r36,%r56;
.loc 1 162 6
setp.eq.u64 %r57,%r36,0;
@ %r57 bra $L13;
.loc 1 165 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
call (%value_in),_getpid_r,(%out_arg1);
ld.param.u32 %r59,[%value_in];
}
.loc 1 164 13
add.u64 %r66,%r37,32;
cvt.u32.u64 %r68,%r37;
xor.b32 %r67,%r59,%r68;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r36;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r38;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r39;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r67;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r66;
call (%value_in),worker,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
ld.param.u32 %r69,[%value_in];
}
.loc 1 164 10
setp.ne.u32 %r70,%r69,0;
@ %r70 bra $L10;
$L13:
.loc 1 166 9
mov.u64 %r36,0;
$L10:
.loc 1 169 1
mov.u64 %value,%r36;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: tempnam
.visible .func (.param .u64 %value_out) tempnam (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 177 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),_tempnam_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r30,[%value_in];
}
.loc 1 178 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: tmpnam
.visible .func (.param .u64 %value_out) tmpnam (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .pred %r30;
.reg .u32 %r32;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .pred %r41;
.reg .u32 %r42;
.reg .u32 %r43;
mov.u64 %r29,%ar0;
.loc 1 183 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 126 6
setp.ne.u64 %r30,%r29,0;
@ %r30 bra $L20;
.loc 1 130 14
add.u64 %r29,%r22,36;
$L20:
.loc 1 136 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call (%value_in),_getpid_r,(%out_arg1);
ld.param.u32 %r32,[%value_in];
}
.loc 1 138 7
add.u64 %r39,%r22,32;
cvta.const.u64 %r36,$LC1;
cvta.const.u64 %r35,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r29;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r35;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r36;
.param .u32 %out_arg5;
st.param.u32 [%out_arg5],%r32;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r39;
call (%value_in),worker,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6);
ld.param.u32 %r40,[%value_in];
}
.loc 1 138 6
setp.eq.u32 %r41,%r40,0;
@ %r41 bra $L22;
.loc 1 140 14
ld.u32 %r43,[%r22+32];
add.u32 %r42,%r43,1;
st.u32 [%r22+32],%r42;
.loc 1 141 14
mov.u64 %r28,%r29;
bra $L19;
$L22:
.loc 1 144 10
mov.u64 %r28,0;
$L19:
.loc 1 184 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-tolower.o/1612277263  0     0     100666  1104      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: tolower
.visible .func (.param .u32 %value_out) tolower (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/tolower.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: tolower
.visible .func (.param .u32 %value_out) tolower (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .pred %r38;
.reg .u16 %r40;
mov.u32 %r28,%ar0;
.loc 1 80 10
cvt.s64.s32 %r29,%r28;
cvta.const.u64 %r30,_ctype_+1;
add.u64 %r31,%r29,%r30;
.loc 1 80 39
ld.u8 %r40,[%r31];
mov.u16 %r34,%r40;
and.b16 %r33,%r34,3;
cvt.u32.u16 %r37,%r33;
cvt.s32.s8 %r36,%r37;
cvt.u16.u32 %r35,%r36;
setp.ne.u16 %r38,%r35,1;
@ %r38 bra $L2;
add.u32 %r28,%r28,32;
$L2:
.loc 1 82 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-toupper.o/1612277263  0     0     100666  1105      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: toupper
.visible .func (.param .u32 %value_out) toupper (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/ctype/toupper.c"
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL FUNCTION DEF: toupper
.visible .func (.param .u32 %value_out) toupper (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u16 %r33;
.reg .u16 %r34;
.reg .u16 %r35;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .pred %r38;
.reg .u16 %r40;
mov.u32 %r28,%ar0;
.loc 1 80 10
cvt.s64.s32 %r29,%r28;
cvta.const.u64 %r30,_ctype_+1;
add.u64 %r31,%r29,%r30;
.loc 1 80 38
ld.u8 %r40,[%r31];
mov.u16 %r34,%r40;
and.b16 %r33,%r34,3;
cvt.u32.u16 %r37,%r33;
cvt.s32.s8 %r36,%r37;
cvt.u16.u32 %r35,%r36;
setp.ne.u16 %r38,%r35,2;
@ %r38 bra $L2;
add.u32 %r28,%r28,-32;
$L2:
.loc 1 82 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

/1689           1612277263  0     0     100666  5603      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __tzcalc_limits
.visible .func (.param .u32 %value_out) __tzcalc_limits (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/time/tzcalc_limits.c"
// BEGIN GLOBAL VAR DECL: __month_lengths
.extern .const .align 4 .u32 __month_lengths[24];
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.extern .func (.param .u64 %value_out) __gettzinfo;
// BEGIN GLOBAL FUNCTION DEF: __tzcalc_limits
.visible .func (.param .u32 %value_out) __tzcalc_limits (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r31;
.reg .u32 %r32;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u32 %r56;
.reg .u32 %r57;
.reg .u64 %r58;
.reg .u32 %r61;
.reg .u32 %r63;
.reg .u32 %r64;
.reg .u32 %r68;
.reg .u32 %r69;
.reg .u64 %r70;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u32 %r78;
.reg .u64 %r81;
.reg .u64 %r85;
.reg .u32 %r86;
.reg .u32 %r87;
.reg .u64 %r88;
.reg .pred %r89;
.reg .u32 %r90;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u32 %r94;
.reg .u32 %r95;
.reg .u32 %r97;
.reg .u32 %r98;
.reg .u32 %r99;
.reg .u32 %r103;
.reg .u64 %r104;
.reg .u32 %r105;
.reg .u64 %r106;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u64 %r110;
.reg .u16 %r111;
.reg .pred %r112;
.reg .pred %r117;
.reg .pred %r119;
.reg .pred %r124;
.reg .u32 %r125;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .u32 %r128;
.reg .pred %r129;
.reg .u64 %r130;
.reg .u64 %r131;
.reg .u64 %r132;
.reg .u32 %r133;
.reg .u32 %r135;
.reg .pred %r136;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r140;
.reg .u32 %r141;
.reg .pred %r142;
.reg .pred %r143;
.reg .u64 %r144;
.reg .u64 %r146;
.reg .u64 %r147;
.reg .u64 %r148;
.reg .u64 %r149;
.reg .pred %r150;
.reg .u64 %r152;
.reg .u64 %r153;
.reg .u32 %r154;
.reg .u32 %r155;
.reg .u32 %r157;
.reg .pred %r158;
.reg .u64 %r159;
.reg .pred %r161;
.reg .u64 %r162;
.reg .pred %r163;
mov.u32 %r87,%ar0;
.loc 1 18 29
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r88,[%value_in];
}
.loc 1 20 6
setp.le.s32 %r89,%r87,1969;
@ %r89 bra $L16;
.loc 1 23 16
st.u32 [%r88+4],%r87;
.loc 1 25 9
add.u32 %r90,%r87,-1970;
.loc 1 28 16
add.u32 %r92,%r87,-1969;
.loc 1 28 42
shr.s32 %r93,%r92,2;
.loc 1 27 27
mad.lo.u32 %r94,%r90,365,%r93;
.loc 1 29 16
add.u32 %r95,%r87,-1901;
.loc 1 29 45
div.s32 %r97,%r95,-100;
.loc 1 28 46
add.u32 %r98,%r94,%r97;
.loc 1 30 16
add.u32 %r99,%r87,-1601;
.loc 1 30 50
div.s32 %r103,%r99,400;
.loc 1 27 13
add.u32 %r61,%r98,%r103;
.loc 1 46 22
rem.s32 %r38,%r87,100;
rem.s32 %r39,%r87,400;
add.u64 %r74,%r88,8;
add.u64 %r70,%r88,88;
set.u32.eq.u32 %r105,%r39,0;
cvt.s64.s32 %r104,%r105;
neg.s64 %r106,%r104;
add.u64 %r108,%r106,%r106;
add.u64 %r109,%r108,%r106;
shl.b64 %r110,%r109,4;
and.b32 %r157,%r87,3;
setp.ne.u32 %r158,%r157,0;
.loc 1 48 21
cvta.const.u64 %r159,__month_lengths;
.loc 1 46 22
setp.ne.u32 %r161,%r38,0;
selp.u64 %r162,48,%r110,%r161;
.loc 1 38 7
setp.ne.u32 %r163,%r39,0;
$L15:
.loc 1 34 26
ld.s8 %r31,[%r74];
.loc 1 37 38
ld.u32 %r78,[%r74+12];
.loc 1 34 10
cvt.u16.u32 %r111,%r31;
setp.ne.u16 %r112,%r111,74;
@ %r112 bra $L3;
.loc 1 37 21
add.u32 %r32,%r61,%r78;
.loc 1 38 20
@ %r158 bra $L4;
.loc 1 38 7
@ %r161 bra $L5;
$L4:
@ %r163 bra $L6;
$L5:
.loc 1 38 20
setp.le.s32 %r117,%r78,59;
@ %r117 bra $L6;
.loc 1 37 9
add.u32 %r32,%r32,1;
$L6:
.loc 1 40 4
add.u32 %r56,%r32,-1;
bra $L7;
$L3:
.loc 1 42 15
setp.ne.u16 %r119,%r111,68;
@ %r119 bra $L8;
.loc 1 43 7
add.u32 %r56,%r61,%r78;
bra $L7;
$L8:
.loc 1 46 22
selp.u64 %r81,%r110,%r162,%r158;
.loc 1 48 21
add.u64 %r85,%r81,%r159;
.loc 1 52 35
ld.u32 %r69,[%r74+4];
.loc 1 52 4
setp.le.s32 %r124,%r69,1;
@ %r124 bra $L19;
mov.u64 %r58,%r85;
add.u32 %r125,%r69,-1;
cvt.u64.u32 %r126,%r125;
shl.b64 %r127,%r126,2;
add.u64 %r75,%r127,%r85;
.loc 1 50 9
mov.u32 %r64,%r61;
$L11:
.loc 1 53 11
ld.u32 %r128,[%r58];
add.u32 %r64,%r64,%r128;
.loc 1 52 4
add.u64 %r58,%r58,4;
setp.ne.u64 %r129,%r75,%r58;
@ %r129 bra $L11;
.loc 1 62 22
cvt.s64.s32 %r130,%r69;
shl.b64 %r131,%r130,2;
add.u64 %r132,%r131,-4;
add.u64 %r85,%r85,%r132;
bra $L10;
$L19:
.loc 1 50 9
mov.u32 %r64,%r61;
$L10:
.loc 1 55 25
add.u32 %r133,%r64,4;
.loc 1 55 11
rem.s32 %r135,%r133,7;
.loc 1 57 14
sub.u32 %r57,%r78,%r135;
.loc 1 58 7
setp.ge.s32 %r136,%r57,0;
@ %r136 bra $L12;
.loc 1 59 16
add.u32 %r57,%r57,7;
$L12:
.loc 1 60 31
ld.u32 %r138,[%r74+8];
add.u32 %r137,%r138,-1;
.loc 1 60 36
shl.b32 %r140,%r137,3;
sub.u32 %r141,%r140,%r137;
.loc 1 60 10
add.u32 %r63,%r141,%r57;
.loc 1 62 22
ld.u32 %r68,[%r85];
.loc 1 62 10
setp.lt.s32 %r142,%r63,%r68;
@ %r142 bra $L13;
$L14:
.loc 1 63 12
add.u32 %r63,%r63,-7;
.loc 1 62 10
setp.ge.s32 %r143,%r63,%r68;
@ %r143 bra $L14;
$L13:
.loc 1 65 9
add.u32 %r56,%r64,%r63;
$L7:
.loc 1 69 32
cvt.s64.s32 %r144,%r56;
.loc 1 70 22
ld.s32 %r146,[%r74+16];
.loc 1 69 59
mad.lo.u64 %r147,%r144,86400,%r146;
.loc 1 70 25
ld.u64 %r149,[%r74+32];
add.u64 %r148,%r147,%r149;
.loc 1 69 30
st.u64 [%r74+24],%r148;
.loc 1 32 3
add.u64 %r74,%r74,40;
setp.ne.u64 %r150,%r70,%r74;
@ %r150 bra $L15;
.loc 1 73 43
ld.u64 %r152,[%r88+32];
ld.u64 %r153,[%r88+72];
set.u32.lt.s64 %r154,%r152,%r153;
neg.s32 %r155,%r154;
.loc 1 73 17
st.u32 [%r88],%r155;
.loc 1 75 10
mov.u32 %r86,1;
bra $L1;
$L16:
.loc 1 21 12
mov.u32 %r86,0;
$L1:
.loc 1 76 1
mov.u32 %value,%r86;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-tzlock.o/ 1612277263  0     0     100666  468       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.visible .func __tz_lock;
.file 1 "../../../../../newlib/libc/time/tzlock.c"
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.visible .func __tz_unlock;
// BEGIN GLOBAL FUNCTION DEF: __tz_lock
.visible .func __tz_lock
{
.loc 1 44 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __tz_unlock
.visible .func __tz_unlock
{
$LFB3:
ret;
$LFE3:
}
lib_a-tzset.o/  1612277263  0     0     100666  1198      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked
.visible .func _tzset_unlocked;
.file 1 "../../../../../newlib/libc/time/tzset.c"
// BEGIN GLOBAL FUNCTION DECL: tzset
.visible .func tzset;
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked_r
.extern .func _tzset_unlocked_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.extern .func __tz_lock;
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.extern .func __tz_unlock;
// BEGIN GLOBAL FUNCTION DEF: _tzset_unlocked
.visible .func _tzset_unlocked
{
.reg .u64 %r24;
.loc 1 67 3
ld.global.u64 %r24,[_impure_ptr];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call _tzset_unlocked_r,(%out_arg1);
}
.loc 1 68 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: tzset
.visible .func tzset
{
.reg .u64 %r24;
.loc 1 73 3
{
call __tz_lock;
}
.loc 1 74 3
ld.global.u64 %r24,[_impure_ptr];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call _tzset_unlocked_r,(%out_arg1);
}
.loc 1 75 3
{
call __tz_unlock;
}
.loc 1 76 1
ret;
}
lib_a-tzset_r.o/1612277263  0     0     100666  18057     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked_r
.visible .func _tzset_unlocked_r (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/time/tzset_r.c"
// BEGIN GLOBAL FUNCTION DECL: _tzset_r
.visible .func _tzset_r (.param .u64 %in_ar0);
// BEGIN GLOBAL VAR DECL: _tzname
.extern .global .align 8 .u64 _tzname[2];
// BEGIN GLOBAL VAR DECL: _daylight
.extern .global .align 4 .u32 _daylight[1];
// BEGIN GLOBAL VAR DECL: _timezone
.extern .global .align 8 .u64 _timezone[1];
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.extern .func (.param .u64 %value_out) __gettzinfo;
// BEGIN GLOBAL FUNCTION DECL: _getenv_r
.extern .func (.param .u64 %value_out) _getenv_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __nvptx_free
.extern .func __nvptx_free (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strcmp
.extern .func (.param .u32 %value_out) strcmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: siscanf
.extern .func (.param .u32 %value_out) siscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strtoul
.extern .func (.param .u64 %value_out) strtoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __tzcalc_limits
.extern .func (.param .u32 %value_out) __tzcalc_limits (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.extern .func __tz_lock;
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.extern .func __tz_unlock;
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[19] =
{47,37,104,117,37,110,58,37,104,117,37,110,58,37,104,117,37,110,0 };
// BEGIN VAR DEF: __tzname_std
.global .align 1 .u8 __tzname_std[11];
// BEGIN VAR DEF: __tzname_dst
.global .align 1 .u8 __tzname_dst[11];
// BEGIN VAR DEF: prev_tzenv
.global .align 8 .u64 prev_tzenv[1];
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{84,90,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[4] =
{71,77,84,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[15] =
{37,49,48,91,94,48,45,57,44,43,45,93,37,110,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[18] =
{37,104,117,37,110,58,37,104,117,37,110,58,37,104,117,37,110,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[19] =
{77,37,104,117,37,110,46,37,104,117,37,110,46,37,104,117,37,110,0 };
// BEGIN GLOBAL FUNCTION DEF: _tzset_unlocked_r
.visible .func _tzset_unlocked_r (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.local .align 8 .b8 %stack_ar[48];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u32 %r32;
.reg .u32 %r53;
.reg .u64 %r67;
.reg .u32 %r70;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .u32 %r81;
.reg .u64 %r82;
.reg .u64 %r87;
.reg .u64 %r91;
.reg .u64 %r92;
.reg .u64 %r93;
.reg .u64 %r94;
.reg .u32 %r95;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .u64 %r99;
.reg .u64 %r114;
.reg .u32 %r117;
.reg .u32 %r119;
.reg .u64 %r123;
.reg .u64 %r124;
.reg .u64 %r126;
.reg .u64 %r127;
.reg .pred %r128;
.reg .u32 %r130;
.reg .u64 %r131;
.reg .u64 %r132;
.reg .u64 %r136;
.reg .pred %r138;
.reg .u32 %r141;
.reg .pred %r142;
.reg .u64 %r145;
.reg .u64 %r148;
.reg .u64 %r149;
.reg .pred %r150;
.reg .u64 %r153;
.reg .u16 %r154;
.reg .u32 %r155;
.reg .pred %r156;
.reg .u32 %r161;
.reg .pred %r163;
.reg .u64 %r164;
.reg .u16 %r165;
.reg .pred %r166;
.reg .pred %r168;
.reg .u16 %r169;
.reg .u32 %r179;
.reg .pred %r181;
.reg .u64 %r182;
.reg .u64 %r184;
.reg .u64 %r185;
.reg .u64 %r186;
.reg .u64 %r187;
.reg .u64 %r188;
.reg .u64 %r189;
.reg .u64 %r191;
.reg .u64 %r192;
.reg .u64 %r193;
.reg .u64 %r194;
.reg .u64 %r196;
.reg .u64 %r200;
.reg .u32 %r201;
.reg .pred %r203;
.reg .u64 %r206;
.reg .u64 %r207;
.reg .u32 %r208;
.reg .u64 %r211;
.reg .u16 %r212;
.reg .pred %r213;
.reg .pred %r215;
.reg .u16 %r216;
.reg .u32 %r219;
.reg .u32 %r228;
.reg .pred %r230;
.reg .u64 %r231;
.reg .u64 %r232;
.reg .u64 %r234;
.reg .u64 %r235;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r241;
.reg .u64 %r242;
.reg .u64 %r243;
.reg .u16 %r244;
.reg .pred %r245;
.reg .u16 %r246;
.reg .pred %r247;
.reg .u64 %r249;
.reg .u32 %r256;
.reg .pred %r258;
.reg .u16 %r259;
.reg .u16 %r260;
.reg .pred %r261;
.reg .u16 %r262;
.reg .u16 %r263;
.reg .pred %r264;
.reg .u16 %r265;
.reg .pred %r266;
.reg .u32 %r267;
.reg .u64 %r268;
.reg .pred %r270;
.reg .u32 %r273;
.reg .u64 %r274;
.reg .u16 %r275;
.reg .pred %r277;
.reg .pred %r278;
.reg .u32 %r279;
.reg .u32 %r280;
.reg .u64 %r281;
.reg .u32 %r282;
.reg .u32 %r283;
.reg .u64 %r284;
.reg .u16 %r285;
.reg .u16 %r286;
.reg .u32 %r288;
.reg .u16 %r289;
.reg .u32 %r290;
.reg .pred %r291;
.reg .u64 %r293;
.reg .u32 %r300;
.reg .u32 %r302;
.reg .u32 %r304;
.reg .u32 %r305;
.reg .u32 %r306;
.reg .u32 %r307;
.reg .u32 %r309;
.reg .u32 %r310;
.reg .u64 %r311;
.reg .pred %r312;
.reg .u32 %r314;
.reg .u32 %r315;
.reg .u64 %r317;
.reg .u32 %r318;
.reg .u32 %r319;
.reg .u64 %r320;
.reg .u64 %r321;
.reg .u64 %r322;
.reg .u64 %r323;
.reg .u64 %r324;
.reg .u64 %r325;
.reg .u64 %r326;
.reg .u64 %r327;
.reg .u64 %r328;
.reg .u64 %r329;
mov.u64 %r123,%ar0;
.loc 1 23 23
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r124,[%value_in];
}
.loc 1 25 16
cvta.const.u64 %r126,$LC0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r123;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r126;
call (%value_in),_getenv_r,(%out_arg1,%out_arg2);
ld.param.u64 %r127,[%value_in];
}
mov.u64 %r91,%r127;
.loc 1 25 6
setp.ne.u64 %r128,%r127,0;
@ %r128 bra $L2;
.loc 1 27 12
st.global.u64 [_timezone],%r127;
.loc 1 28 12
cvt.u32.u64 %r130,%r127;
st.global.u32 [_daylight],%r130;
.loc 1 29 13
cvta.global.u64 %r131,_tzname;
cvta.const.u64 %r132,$LC1;
st.u64 [%r131],%r132;
.loc 1 30 13
st.u64 [%r131+8],%r132;
.loc 1 31 2
ld.global.u64 %r136,[prev_tzenv];
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r136;
call __nvptx_free,(%out_arg1);
}
.loc 1 32 13
st.global.u64 [prev_tzenv],%r127;
.loc 1 33 2
bra $L1;
$L2:
.loc 1 36 18
ld.global.u64 %r23,[prev_tzenv];
.loc 1 36 6
setp.eq.u64 %r138,%r23,0;
@ %r138 bra $L4;
.loc 1 36 29
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r127;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r23;
call (%value_in),strcmp,(%out_arg1,%out_arg2);
ld.param.u32 %r141,[%value_in];
}
.loc 1 36 26
setp.eq.u32 %r142,%r141,0;
@ %r142 bra $L1;
.loc 1 39 3
ld.global.u64 %r23,[prev_tzenv];
$L4:
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __nvptx_free,(%out_arg1);
}
.loc 1 40 38
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r127;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r145,[%value_in];
}
.loc 1 40 16
add.u64 %r148,%r145,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r123;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r148;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r149,[%value_in];
}
.loc 1 40 14
st.global.u64 [prev_tzenv],%r149;
.loc 1 41 6
setp.eq.u64 %r150,%r149,0;
@ %r150 bra $L6;
.loc 1 42 5
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r149;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r127;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r153,[%value_in];
}
$L6:
.loc 1 45 6
ld.s8 %r155,[%r127];
cvt.u16.u32 %r154,%r155;
setp.ne.u16 %r156,%r154,58;
@ %r156 bra $L7;
.loc 1 46 5
add.u64 %r91,%r127,1;
$L7:
.loc 1 48 7
add.u64 %r326,%frame,8;
st.u64 [%stack+8],%r326;
cvta.global.u64 %r325,__tzname_std;
st.u64 [%stack],%r325;
cvta.const.u64 %r323,$LC2;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r91;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r323;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siscanf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r161,[%value_in];
}
.loc 1 48 6
setp.le.s32 %r163,%r161,0;
@ %r163 bra $L1;
.loc 1 51 9
ld.s32 %r164,[%frame+8];
add.u64 %r92,%r91,%r164;
.loc 1 54 7
ld.s8 %r32,[%r92];
.loc 1 54 6
cvt.u16.u32 %r165,%r32;
setp.ne.u16 %r166,%r165,45;
@ %r166 bra $L8;
.loc 1 57 7
add.u64 %r92,%r92,1;
.loc 1 56 12
mov.u32 %r95,-1;
bra $L9;
$L8:
.loc 1 59 11
setp.ne.u16 %r168,%r165,43;
@ %r168 bra $L25;
.loc 1 60 5
add.u64 %r92,%r92,1;
.loc 1 53 8
mov.u32 %r95,1;
bra $L9;
$L25:
mov.u32 %r95,1;
$L9:
.loc 1 62 6
mov.u16 %r169,0;
st.u16 [%frame+20],%r169;
.loc 1 63 6
st.u16 [%frame+18],%r169;
.loc 1 65 7
st.u64 [%stack+40],%r326;
add.u64 %r320,%frame,18;
st.u64 [%stack+32],%r320;
st.u64 [%stack+24],%r326;
add.u64 %r321,%frame,20;
st.u64 [%stack+16],%r321;
st.u64 [%stack+8],%r326;
add.u64 %r322,%frame,22;
st.u64 [%stack],%r322;
cvta.const.u64 %r324,$LC3;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r92;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r324;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siscanf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r179,[%value_in];
}
.loc 1 65 6
setp.le.s32 %r181,%r179,0;
@ %r181 bra $L1;
.loc 1 68 52
ld.u16 %r182,[%frame+20];
shl.b64 %r184,%r182,4;
sub.u64 %r185,%r184,%r182;
shl.b64 %r186,%r185,2;
.loc 1 68 39
ld.u16 %r187,[%frame+18];
add.u64 %r188,%r186,%r187;
.loc 1 68 71
ld.u16 %r189,[%frame+22];
.loc 1 68 57
mad.lo.u64 %r191,%r189,3600,%r188;
.loc 1 68 33
cvt.s64.s32 %r192,%r95;
mul.lo.u64 %r193,%r191,%r192;
.loc 1 68 26
st.u64 [%r124+40],%r193;
.loc 1 69 14
cvta.global.u64 %r194,_tzname;
st.u64 [%r194],%r325;
.loc 1 70 9
ld.s32 %r196,[%frame+8];
add.u64 %r99,%r92,%r196;
.loc 1 72 7
st.u64 [%stack+8],%r326;
cvta.global.u64 %r200,__tzname_dst;
st.u64 [%stack],%r200;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r99;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r323;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siscanf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r201,[%value_in];
}
.loc 1 72 6
setp.gt.s32 %r203,%r201,0;
@ %r203 bra $L10;
.loc 1 74 18
ld.u64 %r206,[%r194];
st.u64 [%r194+8],%r206;
.loc 1 75 17
ld.u64 %r207,[%r124+40];
st.global.u64 [_timezone],%r207;
.loc 1 76 17
mov.u32 %r208,0;
st.global.u32 [_daylight],%r208;
.loc 1 77 7
bra $L1;
$L10:
.loc 1 80 16
st.u64 [%r194+8],%r200;
.loc 1 82 9
ld.s32 %r211,[%frame+8];
add.u64 %r93,%r99,%r211;
.loc 1 86 7
ld.s8 %r53,[%r93];
.loc 1 86 6
cvt.u16.u32 %r212,%r53;
setp.ne.u16 %r213,%r212,45;
@ %r213 bra $L11;
.loc 1 89 7
add.u64 %r93,%r93,1;
.loc 1 88 12
mov.u32 %r96,-1;
bra $L12;
$L11:
.loc 1 91 11
setp.ne.u16 %r215,%r212,43;
@ %r215 bra $L26;
.loc 1 92 5
add.u64 %r93,%r93,1;
.loc 1 85 8
mov.u32 %r96,1;
bra $L12;
$L26:
mov.u32 %r96,1;
$L12:
.loc 1 94 6
mov.u16 %r216,0;
st.u16 [%frame+22],%r216;
.loc 1 95 6
st.u16 [%frame+20],%r216;
.loc 1 96 6
st.u16 [%frame+18],%r216;
.loc 1 98 6
mov.u32 %r219,0;
st.u32 [%frame+8],%r219;
.loc 1 99 7
st.u64 [%stack+40],%r326;
st.u64 [%stack+32],%r320;
st.u64 [%stack+24],%r326;
st.u64 [%stack+16],%r321;
st.u64 [%stack+8],%r326;
st.u64 [%stack],%r322;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r93;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r324;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siscanf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r228,[%value_in];
}
.loc 1 99 6
setp.gt.s32 %r230,%r228,0;
@ %r230 bra $L13;
.loc 1 100 53
ld.u64 %r231,[%r124+40];
add.u64 %r67,%r231,-3600;
bra $L14;
$L13:
.loc 1 102 54
ld.u16 %r232,[%frame+20];
shl.b64 %r234,%r232,4;
sub.u64 %r235,%r234,%r232;
shl.b64 %r236,%r235,2;
.loc 1 102 41
ld.u16 %r237,[%frame+18];
add.u64 %r238,%r236,%r237;
.loc 1 102 73
ld.u16 %r239,[%frame+22];
.loc 1 102 59
mad.lo.u64 %r241,%r239,3600,%r238;
.loc 1 102 35
cvt.s64.s32 %r242,%r96;
mul.lo.u64 %r67,%r241,%r242;
$L14:
st.u64 [%r124+80],%r67;
.loc 1 104 9
ld.s32 %r243,[%frame+8];
add.u64 %r94,%r93,%r243;
add.u64 %r114,%r124,8;
.loc 1 106 10
mov.u32 %r117,0;
.loc 1 113 8
add.u64 %r327,%frame,12;
add.u64 %r328,%frame,14;
add.u64 %r329,%frame,16;
bra $L23;
$L29:
mov.u32 %r117,1;
$L23:
.loc 1 108 11
ld.s8 %r70,[%r94];
.loc 1 108 10
cvt.u16.u32 %r244,%r70;
setp.ne.u16 %r245,%r244,44;
@ %r245 bra $L15;
.loc 1 111 11
ld.s8 %r70,[%r94+1];
.loc 1 109 9
add.u64 %r94,%r94,1;
$L15:
.loc 1 111 10
cvt.u16.u32 %r246,%r70;
setp.ne.u16 %r247,%r246,77;
@ %r247 bra $L16;
.loc 1 113 8
st.u64 [%stack+40],%r326;
st.u64 [%stack+32],%r327;
st.u64 [%stack+24],%r326;
st.u64 [%stack+16],%r328;
st.u64 [%stack+8],%r326;
st.u64 [%stack],%r329;
cvta.const.u64 %r249,$LC4;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r94;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r249;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siscanf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r256,[%value_in];
}
.loc 1 113 7
setp.ne.u32 %r258,%r256,3;
@ %r258 bra $L1;
.loc 1 114 10
ld.u16 %r72,[%frame+16];
.loc 1 114 14
cvt.u16.u32 %r260,%r72;
add.u16 %r259,%r260,-1;
setp.gt.u16 %r261,%r259,11;
@ %r261 bra $L1;
.loc 1 114 29
ld.u16 %r73,[%frame+14];
.loc 1 114 33
cvt.u16.u32 %r263,%r73;
add.u16 %r262,%r263,-1;
setp.gt.u16 %r264,%r262,4;
@ %r264 bra $L1;
.loc 1 114 47
ld.u16 %r74,[%frame+12];
.loc 1 114 42
cvt.u16.u32 %r265,%r74;
setp.gt.u16 %r266,%r265,6;
@ %r266 bra $L1;
.loc 1 117 23
cvt.u32.u16 %r267,%r246;
st.u8 [%r114],%r267;
.loc 1 118 22
st.u32 [%r114+4],%r72;
.loc 1 119 22
st.u32 [%r114+8],%r73;
.loc 1 120 22
st.u32 [%r114+12],%r74;
.loc 1 122 10
ld.s32 %r268,[%frame+8];
add.u64 %r94,%r94,%r268;
bra $L17;
$L16:
.loc 1 127 7
setp.ne.u16 %r270,%r246,74;
@ %r270 bra $L27;
.loc 1 130 8
add.u64 %r94,%r94,1;
.loc 1 129 11
mov.u32 %r97,74;
bra $L18;
$L27:
.loc 1 133 9
mov.u32 %r97,68;
$L18:
.loc 1 135 8
mov.u32 %r273,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r94;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r273;
call (%value_in),strtoul,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r274,[%value_in];
}
.loc 1 135 6
cvt.u16.u64 %r275,%r274;
cvt.u32.u16 %r81,%r275;
st.u16 [%frame+12],%r275;
.loc 1 140 12
ld.u64 %r82,[%frame];
.loc 1 140 7
setp.ne.u64 %r277,%r82,%r94;
@ %r277 bra $L19;
.loc 1 142 11
setp.ne.u32 %r278,%r117,0;
@ %r278 bra $L20;
.loc 1 144 24
mov.u32 %r279,77;
st.u8 [%r124+8],%r279;
.loc 1 145 23
mov.u32 %r280,3;
st.u32 [%r124+12],%r280;
.loc 1 146 23
mov.u64 %r281,2;
st.u64 [%r124+16],%r281;
bra $L21;
$L20:
.loc 1 151 24
mov.u32 %r282,77;
st.u8 [%r124+48],%r282;
.loc 1 152 23
mov.u32 %r283,11;
st.u32 [%r124+52],%r283;
.loc 1 153 23
mov.u64 %r284,1;
st.u64 [%r124+56],%r284;
bra $L21;
$L19:
.loc 1 159 27
st.u8 [%r114],%r97;
.loc 1 160 26
st.u32 [%r114+12],%r81;
$L21:
.loc 1 140 12
mov.u64 %r94,%r82;
$L17:
.loc 1 167 10
mov.u16 %r285,2;
st.u16 [%frame+22],%r285;
.loc 1 168 10
mov.u16 %r286,0;
st.u16 [%frame+20],%r286;
.loc 1 169 10
st.u16 [%frame+18],%r286;
.loc 1 170 9
mov.u32 %r288,0;
st.u32 [%frame+8],%r288;
.loc 1 172 10
ld.s8 %r290,[%r94];
cvt.u16.u32 %r289,%r290;
setp.ne.u16 %r291,%r289,47;
@ %r291 bra $L28;
.loc 1 173 2
st.u64 [%stack+40],%r326;
st.u64 [%stack+32],%r320;
st.u64 [%stack+24],%r326;
st.u64 [%stack+16],%r321;
st.u64 [%stack+8],%r326;
st.u64 [%stack],%r322;
cvta.const.u64 %r293,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r94;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r293;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),siscanf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r300,[%value_in];
}
.loc 1 175 48
ld.u16 %r302,[%frame+20];
shl.b32 %r304,%r302,4;
sub.u32 %r305,%r304,%r302;
shl.b32 %r306,%r305,2;
ld.u16 %r307,[%frame+22];
mad.lo.u32 %r309,%r307,3600,%r306;
ld.u16 %r310,[%frame+18];
add.u32 %r119,%r309,%r310;
.loc 1 177 13
ld.s32 %r311,[%frame+8];
add.u64 %r94,%r94,%r311;
bra $L22;
$L28:
mov.u32 %r119,7200;
$L22:
.loc 1 175 25
st.u32 [%r114+16],%r119;
.loc 1 106 3
add.u64 %r114,%r114,40;
setp.ne.u32 %r312,%r117,1;
@ %r312 bra $L29;
.loc 1 180 3
ld.u32 %r314,[%r124+4];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r314;
call (%value_in),__tzcalc_limits,(%out_arg1);
ld.param.u32 %r315,[%value_in];
}
.loc 1 181 30
ld.u64 %r87,[%r124+40];
.loc 1 181 13
st.global.u64 [_timezone],%r87;
.loc 1 182 38
ld.u64 %r317,[%r124+80];
set.u32.ne.u64 %r318,%r317,%r87;
neg.s32 %r319,%r318;
.loc 1 182 13
st.global.u32 [_daylight],%r319;
$L1:
.loc 1 183 1
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _tzset_r
.visible .func _tzset_r (.param .u64 %in_ar0)
{
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r22;
mov.u64 %r22,%ar0;
.loc 1 188 3
{
call __tz_lock;
}
.loc 1 189 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
call _tzset_unlocked_r,(%out_arg1);
}
.loc 1 190 3
{
call __tz_unlock;
}
.loc 1 191 1
ret;
}

lib_a-tzvars.o/ 1612277263  0     0     100666  430       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: _timezone
.visible .global .align 8 .u64 _timezone[1];
// BEGIN GLOBAL VAR DEF: _daylight
.visible .global .align 4 .u32 _daylight[1];
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[4] =
{71,77,84,0 };
// BEGIN GLOBAL VAR DEF: _tzname
.visible .global .align 8 .u64 _tzname[2] =
{generic($LC0),generic($LC0) };
/1712           1612277263  0     0     100666  726       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _user_strerror
.visible .func (.param .u64 %value_out) _user_strerror (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/u_strerr.c"
// BEGIN GLOBAL FUNCTION DEF: _user_strerror
.visible .func (.param .u64 %value_out) _user_strerror (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.loc 1 13 10
mov.u64 %value,0;
.loc 1 14 1
st.param.u64 [%value_out],%value;
ret;
}
lib_a-unctrl.o/ 1612277263  0     0     100666  23683     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN VAR DEF: $LC120
.const .align 1 .u8 $LC120[2] =
{120,0 };
// BEGIN VAR DEF: $LC121
.const .align 1 .u8 $LC121[2] =
{121,0 };
// BEGIN VAR DEF: $LC122
.const .align 1 .u8 $LC122[2] =
{122,0 };
// BEGIN VAR DEF: $LC123
.const .align 1 .u8 $LC123[2] =
{123,0 };
// BEGIN VAR DEF: $LC124
.const .align 1 .u8 $LC124[2] =
{124,0 };
// BEGIN VAR DEF: $LC125
.const .align 1 .u8 $LC125[2] =
{125,0 };
// BEGIN VAR DEF: $LC126
.const .align 1 .u8 $LC126[2] =
{126,0 };
// BEGIN VAR DEF: $LC127
.const .align 1 .u8 $LC127[3] =
{94,63,0 };
// BEGIN VAR DEF: $LC128
.const .align 1 .u8 $LC128[5] =
{48,120,56,48,0 };
// BEGIN VAR DEF: $LC129
.const .align 1 .u8 $LC129[5] =
{48,120,56,49,0 };
// BEGIN VAR DEF: $LC80
.const .align 1 .u8 $LC80[2] =
{80,0 };
// BEGIN VAR DEF: $LC81
.const .align 1 .u8 $LC81[2] =
{81,0 };
// BEGIN VAR DEF: $LC82
.const .align 1 .u8 $LC82[2] =
{82,0 };
// BEGIN VAR DEF: $LC83
.const .align 1 .u8 $LC83[2] =
{83,0 };
// BEGIN VAR DEF: $LC84
.const .align 1 .u8 $LC84[2] =
{84,0 };
// BEGIN VAR DEF: $LC85
.const .align 1 .u8 $LC85[2] =
{85,0 };
// BEGIN VAR DEF: $LC86
.const .align 1 .u8 $LC86[2] =
{86,0 };
// BEGIN VAR DEF: $LC87
.const .align 1 .u8 $LC87[2] =
{87,0 };
// BEGIN VAR DEF: $LC88
.const .align 1 .u8 $LC88[2] =
{88,0 };
// BEGIN VAR DEF: $LC89
.const .align 1 .u8 $LC89[2] =
{89,0 };
// BEGIN VAR DEF: $LC240
.const .align 1 .u8 $LC240[5] =
{48,120,102,48,0 };
// BEGIN VAR DEF: $LC241
.const .align 1 .u8 $LC241[5] =
{48,120,102,49,0 };
// BEGIN VAR DEF: $LC242
.const .align 1 .u8 $LC242[5] =
{48,120,102,50,0 };
// BEGIN VAR DEF: $LC243
.const .align 1 .u8 $LC243[5] =
{48,120,102,51,0 };
// BEGIN VAR DEF: $LC244
.const .align 1 .u8 $LC244[5] =
{48,120,102,52,0 };
// BEGIN VAR DEF: $LC245
.const .align 1 .u8 $LC245[5] =
{48,120,102,53,0 };
// BEGIN VAR DEF: $LC246
.const .align 1 .u8 $LC246[5] =
{48,120,102,54,0 };
// BEGIN VAR DEF: $LC247
.const .align 1 .u8 $LC247[5] =
{48,120,102,55,0 };
// BEGIN VAR DEF: $LC248
.const .align 1 .u8 $LC248[5] =
{48,120,102,56,0 };
// BEGIN VAR DEF: $LC249
.const .align 1 .u8 $LC249[5] =
{48,120,102,57,0 };
// BEGIN VAR DEF: $LC170
.const .align 1 .u8 $LC170[5] =
{48,120,97,97,0 };
// BEGIN VAR DEF: $LC171
.const .align 1 .u8 $LC171[5] =
{48,120,97,98,0 };
// BEGIN VAR DEF: $LC10
.const .align 1 .u8 $LC10[3] =
{94,74,0 };
// BEGIN VAR DEF: $LC11
.const .align 1 .u8 $LC11[3] =
{94,75,0 };
// BEGIN VAR DEF: $LC12
.const .align 1 .u8 $LC12[3] =
{94,76,0 };
// BEGIN VAR DEF: $LC13
.const .align 1 .u8 $LC13[3] =
{94,77,0 };
// BEGIN VAR DEF: $LC14
.const .align 1 .u8 $LC14[3] =
{94,78,0 };
// BEGIN VAR DEF: $LC15
.const .align 1 .u8 $LC15[3] =
{94,79,0 };
// BEGIN VAR DEF: $LC16
.const .align 1 .u8 $LC16[3] =
{94,80,0 };
// BEGIN VAR DEF: $LC17
.const .align 1 .u8 $LC17[3] =
{94,81,0 };
// BEGIN VAR DEF: $LC18
.const .align 1 .u8 $LC18[3] =
{94,82,0 };
// BEGIN VAR DEF: $LC19
.const .align 1 .u8 $LC19[3] =
{94,83,0 };
// BEGIN VAR DEF: $LC133
.const .align 1 .u8 $LC133[5] =
{48,120,56,53,0 };
// BEGIN VAR DEF: $LC134
.const .align 1 .u8 $LC134[5] =
{48,120,56,54,0 };
// BEGIN VAR DEF: $LC135
.const .align 1 .u8 $LC135[5] =
{48,120,56,55,0 };
// BEGIN VAR DEF: $LC136
.const .align 1 .u8 $LC136[5] =
{48,120,56,56,0 };
// BEGIN VAR DEF: $LC137
.const .align 1 .u8 $LC137[5] =
{48,120,56,57,0 };
// BEGIN VAR DEF: $LC138
.const .align 1 .u8 $LC138[5] =
{48,120,56,97,0 };
// BEGIN VAR DEF: $LC139
.const .align 1 .u8 $LC139[5] =
{48,120,56,98,0 };
// BEGIN VAR DEF: $LC90
.const .align 1 .u8 $LC90[2] =
{90,0 };
// BEGIN VAR DEF: $LC91
.const .align 1 .u8 $LC91[2] =
{91,0 };
// BEGIN VAR DEF: $LC92
.const .align 1 .u8 $LC92[2] =
{92,0 };
// BEGIN VAR DEF: $LC93
.const .align 1 .u8 $LC93[2] =
{93,0 };
// BEGIN VAR DEF: $LC94
.const .align 1 .u8 $LC94[2] =
{94,0 };
// BEGIN VAR DEF: $LC95
.const .align 1 .u8 $LC95[2] =
{95,0 };
// BEGIN VAR DEF: $LC96
.const .align 1 .u8 $LC96[2] =
{96,0 };
// BEGIN VAR DEF: $LC97
.const .align 1 .u8 $LC97[2] =
{97,0 };
// BEGIN VAR DEF: $LC98
.const .align 1 .u8 $LC98[2] =
{98,0 };
// BEGIN VAR DEF: $LC99
.const .align 1 .u8 $LC99[2] =
{99,0 };
// BEGIN VAR DEF: $LC250
.const .align 1 .u8 $LC250[5] =
{48,120,102,97,0 };
// BEGIN VAR DEF: $LC251
.const .align 1 .u8 $LC251[5] =
{48,120,102,98,0 };
// BEGIN VAR DEF: $LC252
.const .align 1 .u8 $LC252[5] =
{48,120,102,99,0 };
// BEGIN VAR DEF: $LC253
.const .align 1 .u8 $LC253[5] =
{48,120,102,100,0 };
// BEGIN VAR DEF: $LC254
.const .align 1 .u8 $LC254[5] =
{48,120,102,101,0 };
// BEGIN VAR DEF: $LC255
.const .align 1 .u8 $LC255[5] =
{48,120,102,102,0 };
// BEGIN VAR DEF: $LC20
.const .align 1 .u8 $LC20[3] =
{94,84,0 };
// BEGIN VAR DEF: $LC21
.const .align 1 .u8 $LC21[3] =
{94,85,0 };
// BEGIN VAR DEF: $LC22
.const .align 1 .u8 $LC22[3] =
{94,86,0 };
// BEGIN VAR DEF: $LC23
.const .align 1 .u8 $LC23[3] =
{94,87,0 };
// BEGIN VAR DEF: $LC24
.const .align 1 .u8 $LC24[3] =
{94,88,0 };
// BEGIN VAR DEF: $LC25
.const .align 1 .u8 $LC25[3] =
{94,89,0 };
// BEGIN VAR DEF: $LC26
.const .align 1 .u8 $LC26[3] =
{94,90,0 };
// BEGIN VAR DEF: $LC27
.const .align 1 .u8 $LC27[3] =
{94,91,0 };
// BEGIN VAR DEF: $LC28
.const .align 1 .u8 $LC28[3] =
{94,92,0 };
// BEGIN VAR DEF: $LC29
.const .align 1 .u8 $LC29[3] =
{94,93,0 };
// BEGIN VAR DEF: $LC143
.const .align 1 .u8 $LC143[5] =
{48,120,56,102,0 };
// BEGIN VAR DEF: $LC144
.const .align 1 .u8 $LC144[5] =
{48,120,57,48,0 };
// BEGIN VAR DEF: $LC145
.const .align 1 .u8 $LC145[5] =
{48,120,57,49,0 };
// BEGIN VAR DEF: $LC146
.const .align 1 .u8 $LC146[5] =
{48,120,57,50,0 };
// BEGIN VAR DEF: $LC147
.const .align 1 .u8 $LC147[5] =
{48,120,57,51,0 };
// BEGIN VAR DEF: $LC148
.const .align 1 .u8 $LC148[5] =
{48,120,57,52,0 };
// BEGIN VAR DEF: $LC149
.const .align 1 .u8 $LC149[5] =
{48,120,57,53,0 };
// BEGIN VAR DEF: $LC130
.const .align 1 .u8 $LC130[5] =
{48,120,56,50,0 };
// BEGIN VAR DEF: $LC131
.const .align 1 .u8 $LC131[5] =
{48,120,56,51,0 };
// BEGIN VAR DEF: $LC132
.const .align 1 .u8 $LC132[5] =
{48,120,56,52,0 };
// BEGIN VAR DEF: $LC182
.const .align 1 .u8 $LC182[5] =
{48,120,98,54,0 };
// BEGIN VAR DEF: $LC30
.const .align 1 .u8 $LC30[3] =
{94,126,0 };
// BEGIN VAR DEF: $LC31
.const .align 1 .u8 $LC31[3] =
{94,95,0 };
// BEGIN VAR DEF: $LC32
.const .align 1 .u8 $LC32[2] =
{32,0 };
// BEGIN VAR DEF: $LC33
.const .align 1 .u8 $LC33[2] =
{33,0 };
// BEGIN VAR DEF: $LC34
.const .align 1 .u8 $LC34[2] =
{34,0 };
// BEGIN VAR DEF: $LC35
.const .align 1 .u8 $LC35[2] =
{35,0 };
// BEGIN VAR DEF: $LC36
.const .align 1 .u8 $LC36[2] =
{36,0 };
// BEGIN VAR DEF: $LC37
.const .align 1 .u8 $LC37[2] =
{37,0 };
// BEGIN VAR DEF: $LC38
.const .align 1 .u8 $LC38[2] =
{38,0 };
// BEGIN VAR DEF: $LC39
.const .align 1 .u8 $LC39[2] =
{39,0 };
// BEGIN VAR DEF: $LC153
.const .align 1 .u8 $LC153[5] =
{48,120,57,57,0 };
// BEGIN VAR DEF: $LC154
.const .align 1 .u8 $LC154[5] =
{48,120,57,97,0 };
// BEGIN VAR DEF: $LC155
.const .align 1 .u8 $LC155[5] =
{48,120,57,98,0 };
// BEGIN VAR DEF: $LC156
.const .align 1 .u8 $LC156[5] =
{48,120,57,99,0 };
// BEGIN VAR DEF: $LC157
.const .align 1 .u8 $LC157[5] =
{48,120,57,100,0 };
// BEGIN VAR DEF: $LC158
.const .align 1 .u8 $LC158[5] =
{48,120,57,101,0 };
// BEGIN VAR DEF: $LC159
.const .align 1 .u8 $LC159[5] =
{48,120,57,102,0 };
// BEGIN VAR DEF: $LC178
.const .align 1 .u8 $LC178[5] =
{48,120,98,50,0 };
// BEGIN VAR DEF: $LC179
.const .align 1 .u8 $LC179[5] =
{48,120,98,51,0 };
// BEGIN VAR DEF: $LC210
.const .align 1 .u8 $LC210[5] =
{48,120,100,50,0 };
// BEGIN VAR DEF: $LC180
.const .align 1 .u8 $LC180[5] =
{48,120,98,52,0 };
// BEGIN VAR DEF: $LC181
.const .align 1 .u8 $LC181[5] =
{48,120,98,53,0 };
// END PREAMBLE
// BEGIN GLOBAL VAR DEF: __unctrllen
.visible .const .align 1 .u8 __unctrllen[256] =
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 };
// BEGIN VAR DEF: $LC40
.const .align 1 .u8 $LC40[2] =
{40,0 };
// BEGIN VAR DEF: $LC41
.const .align 1 .u8 $LC41[2] =
{41,0 };
// BEGIN VAR DEF: $LC42
.const .align 1 .u8 $LC42[2] =
{42,0 };
// BEGIN VAR DEF: $LC43
.const .align 1 .u8 $LC43[2] =
{43,0 };
// BEGIN VAR DEF: $LC44
.const .align 1 .u8 $LC44[2] =
{44,0 };
// BEGIN VAR DEF: $LC45
.const .align 1 .u8 $LC45[2] =
{45,0 };
// BEGIN VAR DEF: $LC46
.const .align 1 .u8 $LC46[2] =
{46,0 };
// BEGIN VAR DEF: $LC47
.const .align 1 .u8 $LC47[2] =
{47,0 };
// BEGIN VAR DEF: $LC48
.const .align 1 .u8 $LC48[2] =
{48,0 };
// BEGIN VAR DEF: $LC49
.const .align 1 .u8 $LC49[2] =
{49,0 };
// BEGIN VAR DEF: $LC163
.const .align 1 .u8 $LC163[5] =
{48,120,97,51,0 };
// BEGIN VAR DEF: $LC164
.const .align 1 .u8 $LC164[5] =
{48,120,97,52,0 };
// BEGIN VAR DEF: $LC165
.const .align 1 .u8 $LC165[5] =
{48,120,97,53,0 };
// BEGIN VAR DEF: $LC166
.const .align 1 .u8 $LC166[5] =
{48,120,97,54,0 };
// BEGIN VAR DEF: $LC167
.const .align 1 .u8 $LC167[5] =
{48,120,97,55,0 };
// BEGIN VAR DEF: $LC168
.const .align 1 .u8 $LC168[5] =
{48,120,97,56,0 };
// BEGIN VAR DEF: $LC169
.const .align 1 .u8 $LC169[5] =
{48,120,97,57,0 };
// BEGIN VAR DEF: $LC200
.const .align 1 .u8 $LC200[5] =
{48,120,99,56,0 };
// BEGIN VAR DEF: $LC201
.const .align 1 .u8 $LC201[5] =
{48,120,99,57,0 };
// BEGIN VAR DEF: $LC202
.const .align 1 .u8 $LC202[5] =
{48,120,99,97,0 };
// BEGIN VAR DEF: $LC203
.const .align 1 .u8 $LC203[5] =
{48,120,99,98,0 };
// BEGIN VAR DEF: $LC204
.const .align 1 .u8 $LC204[5] =
{48,120,99,99,0 };
// BEGIN VAR DEF: $LC205
.const .align 1 .u8 $LC205[5] =
{48,120,99,100,0 };
// BEGIN VAR DEF: $LC206
.const .align 1 .u8 $LC206[5] =
{48,120,99,101,0 };
// BEGIN VAR DEF: $LC207
.const .align 1 .u8 $LC207[5] =
{48,120,99,102,0 };
// BEGIN VAR DEF: $LC208
.const .align 1 .u8 $LC208[5] =
{48,120,100,48,0 };
// BEGIN VAR DEF: $LC209
.const .align 1 .u8 $LC209[5] =
{48,120,100,49,0 };
// BEGIN VAR DEF: $LC140
.const .align 1 .u8 $LC140[5] =
{48,120,56,99,0 };
// BEGIN VAR DEF: $LC141
.const .align 1 .u8 $LC141[5] =
{48,120,56,100,0 };
// BEGIN VAR DEF: $LC142
.const .align 1 .u8 $LC142[5] =
{48,120,56,101,0 };
// BEGIN VAR DEF: $LC176
.const .align 1 .u8 $LC176[5] =
{48,120,98,48,0 };
// BEGIN VAR DEF: $LC50
.const .align 1 .u8 $LC50[2] =
{50,0 };
// BEGIN VAR DEF: $LC51
.const .align 1 .u8 $LC51[2] =
{51,0 };
// BEGIN VAR DEF: $LC52
.const .align 1 .u8 $LC52[2] =
{52,0 };
// BEGIN VAR DEF: $LC53
.const .align 1 .u8 $LC53[2] =
{53,0 };
// BEGIN VAR DEF: $LC54
.const .align 1 .u8 $LC54[2] =
{54,0 };
// BEGIN VAR DEF: $LC55
.const .align 1 .u8 $LC55[2] =
{55,0 };
// BEGIN VAR DEF: $LC56
.const .align 1 .u8 $LC56[2] =
{56,0 };
// BEGIN VAR DEF: $LC57
.const .align 1 .u8 $LC57[2] =
{57,0 };
// BEGIN VAR DEF: $LC58
.const .align 1 .u8 $LC58[2] =
{58,0 };
// BEGIN VAR DEF: $LC59
.const .align 1 .u8 $LC59[2] =
{59,0 };
// BEGIN VAR DEF: $LC173
.const .align 1 .u8 $LC173[5] =
{48,120,97,100,0 };
// BEGIN VAR DEF: $LC174
.const .align 1 .u8 $LC174[5] =
{48,120,97,101,0 };
// BEGIN VAR DEF: $LC175
.const .align 1 .u8 $LC175[5] =
{48,120,97,102,0 };
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{94,64,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[3] =
{94,65,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[3] =
{94,66,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[3] =
{94,67,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[3] =
{94,68,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[3] =
{94,69,0 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[3] =
{94,70,0 };
// BEGIN VAR DEF: $LC7
.const .align 1 .u8 $LC7[3] =
{94,71,0 };
// BEGIN VAR DEF: $LC8
.const .align 1 .u8 $LC8[3] =
{94,72,0 };
// BEGIN VAR DEF: $LC9
.const .align 1 .u8 $LC9[3] =
{94,73,0 };
// BEGIN VAR DEF: $LC211
.const .align 1 .u8 $LC211[5] =
{48,120,100,51,0 };
// BEGIN VAR DEF: $LC212
.const .align 1 .u8 $LC212[5] =
{48,120,100,52,0 };
// BEGIN VAR DEF: $LC213
.const .align 1 .u8 $LC213[5] =
{48,120,100,53,0 };
// BEGIN VAR DEF: $LC214
.const .align 1 .u8 $LC214[5] =
{48,120,100,54,0 };
// BEGIN VAR DEF: $LC215
.const .align 1 .u8 $LC215[5] =
{48,120,100,55,0 };
// BEGIN VAR DEF: $LC216
.const .align 1 .u8 $LC216[5] =
{48,120,100,56,0 };
// BEGIN VAR DEF: $LC217
.const .align 1 .u8 $LC217[5] =
{48,120,100,57,0 };
// BEGIN VAR DEF: $LC218
.const .align 1 .u8 $LC218[5] =
{48,120,100,97,0 };
// BEGIN VAR DEF: $LC219
.const .align 1 .u8 $LC219[5] =
{48,120,100,98,0 };
// BEGIN VAR DEF: $LC160
.const .align 1 .u8 $LC160[5] =
{48,120,97,48,0 };
// BEGIN VAR DEF: $LC161
.const .align 1 .u8 $LC161[5] =
{48,120,97,49,0 };
// BEGIN VAR DEF: $LC162
.const .align 1 .u8 $LC162[5] =
{48,120,97,50,0 };
// BEGIN VAR DEF: $LC100
.const .align 1 .u8 $LC100[2] =
{100,0 };
// BEGIN VAR DEF: $LC101
.const .align 1 .u8 $LC101[2] =
{101,0 };
// BEGIN VAR DEF: $LC102
.const .align 1 .u8 $LC102[2] =
{102,0 };
// BEGIN VAR DEF: $LC103
.const .align 1 .u8 $LC103[2] =
{103,0 };
// BEGIN VAR DEF: $LC104
.const .align 1 .u8 $LC104[2] =
{104,0 };
// BEGIN VAR DEF: $LC105
.const .align 1 .u8 $LC105[2] =
{105,0 };
// BEGIN VAR DEF: $LC106
.const .align 1 .u8 $LC106[2] =
{106,0 };
// BEGIN VAR DEF: $LC107
.const .align 1 .u8 $LC107[2] =
{107,0 };
// BEGIN VAR DEF: $LC108
.const .align 1 .u8 $LC108[2] =
{108,0 };
// BEGIN VAR DEF: $LC109
.const .align 1 .u8 $LC109[2] =
{109,0 };
// BEGIN VAR DEF: $LC60
.const .align 1 .u8 $LC60[2] =
{60,0 };
// BEGIN VAR DEF: $LC61
.const .align 1 .u8 $LC61[2] =
{61,0 };
// BEGIN VAR DEF: $LC62
.const .align 1 .u8 $LC62[2] =
{62,0 };
// BEGIN VAR DEF: $LC63
.const .align 1 .u8 $LC63[2] =
{63,0 };
// BEGIN VAR DEF: $LC64
.const .align 1 .u8 $LC64[2] =
{64,0 };
// BEGIN VAR DEF: $LC65
.const .align 1 .u8 $LC65[2] =
{65,0 };
// BEGIN VAR DEF: $LC66
.const .align 1 .u8 $LC66[2] =
{66,0 };
// BEGIN VAR DEF: $LC67
.const .align 1 .u8 $LC67[2] =
{67,0 };
// BEGIN VAR DEF: $LC68
.const .align 1 .u8 $LC68[2] =
{68,0 };
// BEGIN VAR DEF: $LC69
.const .align 1 .u8 $LC69[2] =
{69,0 };
// BEGIN VAR DEF: $LC183
.const .align 1 .u8 $LC183[5] =
{48,120,98,55,0 };
// BEGIN VAR DEF: $LC184
.const .align 1 .u8 $LC184[5] =
{48,120,98,56,0 };
// BEGIN VAR DEF: $LC185
.const .align 1 .u8 $LC185[5] =
{48,120,98,57,0 };
// BEGIN VAR DEF: $LC186
.const .align 1 .u8 $LC186[5] =
{48,120,98,97,0 };
// BEGIN VAR DEF: $LC187
.const .align 1 .u8 $LC187[5] =
{48,120,98,98,0 };
// BEGIN VAR DEF: $LC188
.const .align 1 .u8 $LC188[5] =
{48,120,98,99,0 };
// BEGIN VAR DEF: $LC189
.const .align 1 .u8 $LC189[5] =
{48,120,98,100,0 };
// BEGIN VAR DEF: $LC220
.const .align 1 .u8 $LC220[5] =
{48,120,100,99,0 };
// BEGIN VAR DEF: $LC221
.const .align 1 .u8 $LC221[5] =
{48,120,100,100,0 };
// BEGIN VAR DEF: $LC222
.const .align 1 .u8 $LC222[5] =
{48,120,100,101,0 };
// BEGIN VAR DEF: $LC223
.const .align 1 .u8 $LC223[5] =
{48,120,100,102,0 };
// BEGIN VAR DEF: $LC224
.const .align 1 .u8 $LC224[5] =
{48,120,101,48,0 };
// BEGIN VAR DEF: $LC225
.const .align 1 .u8 $LC225[5] =
{48,120,101,49,0 };
// BEGIN VAR DEF: $LC226
.const .align 1 .u8 $LC226[5] =
{48,120,101,50,0 };
// BEGIN VAR DEF: $LC227
.const .align 1 .u8 $LC227[5] =
{48,120,101,51,0 };
// BEGIN VAR DEF: $LC228
.const .align 1 .u8 $LC228[5] =
{48,120,101,52,0 };
// BEGIN VAR DEF: $LC229
.const .align 1 .u8 $LC229[5] =
{48,120,101,53,0 };
// BEGIN VAR DEF: $LC172
.const .align 1 .u8 $LC172[5] =
{48,120,97,99,0 };
// BEGIN VAR DEF: $LC150
.const .align 1 .u8 $LC150[5] =
{48,120,57,54,0 };
// BEGIN VAR DEF: $LC151
.const .align 1 .u8 $LC151[5] =
{48,120,57,55,0 };
// BEGIN VAR DEF: $LC152
.const .align 1 .u8 $LC152[5] =
{48,120,57,56,0 };
// BEGIN VAR DEF: $LC110
.const .align 1 .u8 $LC110[2] =
{110,0 };
// BEGIN VAR DEF: $LC111
.const .align 1 .u8 $LC111[2] =
{111,0 };
// BEGIN VAR DEF: $LC112
.const .align 1 .u8 $LC112[2] =
{112,0 };
// BEGIN VAR DEF: $LC113
.const .align 1 .u8 $LC113[2] =
{113,0 };
// BEGIN VAR DEF: $LC114
.const .align 1 .u8 $LC114[2] =
{114,0 };
// BEGIN VAR DEF: $LC115
.const .align 1 .u8 $LC115[2] =
{115,0 };
// BEGIN VAR DEF: $LC116
.const .align 1 .u8 $LC116[2] =
{116,0 };
// BEGIN VAR DEF: $LC117
.const .align 1 .u8 $LC117[2] =
{117,0 };
// BEGIN VAR DEF: $LC118
.const .align 1 .u8 $LC118[2] =
{118,0 };
// BEGIN VAR DEF: $LC119
.const .align 1 .u8 $LC119[2] =
{119,0 };
// BEGIN VAR DEF: $LC177
.const .align 1 .u8 $LC177[5] =
{48,120,98,49,0 };
// BEGIN VAR DEF: $LC190
.const .align 1 .u8 $LC190[5] =
{48,120,98,101,0 };
// BEGIN VAR DEF: $LC192
.const .align 1 .u8 $LC192[5] =
{48,120,99,48,0 };
// BEGIN VAR DEF: $LC191
.const .align 1 .u8 $LC191[5] =
{48,120,98,102,0 };
// BEGIN VAR DEF: $LC70
.const .align 1 .u8 $LC70[2] =
{70,0 };
// BEGIN VAR DEF: $LC71
.const .align 1 .u8 $LC71[2] =
{71,0 };
// BEGIN VAR DEF: $LC72
.const .align 1 .u8 $LC72[2] =
{72,0 };
// BEGIN VAR DEF: $LC73
.const .align 1 .u8 $LC73[2] =
{73,0 };
// BEGIN VAR DEF: $LC74
.const .align 1 .u8 $LC74[2] =
{74,0 };
// BEGIN VAR DEF: $LC75
.const .align 1 .u8 $LC75[2] =
{75,0 };
// BEGIN VAR DEF: $LC76
.const .align 1 .u8 $LC76[2] =
{76,0 };
// BEGIN VAR DEF: $LC77
.const .align 1 .u8 $LC77[2] =
{77,0 };
// BEGIN VAR DEF: $LC78
.const .align 1 .u8 $LC78[2] =
{78,0 };
// BEGIN VAR DEF: $LC79
.const .align 1 .u8 $LC79[2] =
{79,0 };
// BEGIN VAR DEF: $LC193
.const .align 1 .u8 $LC193[5] =
{48,120,99,49,0 };
// BEGIN VAR DEF: $LC194
.const .align 1 .u8 $LC194[5] =
{48,120,99,50,0 };
// BEGIN VAR DEF: $LC195
.const .align 1 .u8 $LC195[5] =
{48,120,99,51,0 };
// BEGIN VAR DEF: $LC196
.const .align 1 .u8 $LC196[5] =
{48,120,99,52,0 };
// BEGIN VAR DEF: $LC197
.const .align 1 .u8 $LC197[5] =
{48,120,99,53,0 };
// BEGIN VAR DEF: $LC198
.const .align 1 .u8 $LC198[5] =
{48,120,99,54,0 };
// BEGIN VAR DEF: $LC199
.const .align 1 .u8 $LC199[5] =
{48,120,99,55,0 };
// BEGIN VAR DEF: $LC230
.const .align 1 .u8 $LC230[5] =
{48,120,101,54,0 };
// BEGIN VAR DEF: $LC231
.const .align 1 .u8 $LC231[5] =
{48,120,101,55,0 };
// BEGIN VAR DEF: $LC232
.const .align 1 .u8 $LC232[5] =
{48,120,101,56,0 };
// BEGIN VAR DEF: $LC233
.const .align 1 .u8 $LC233[5] =
{48,120,101,57,0 };
// BEGIN VAR DEF: $LC234
.const .align 1 .u8 $LC234[5] =
{48,120,101,97,0 };
// BEGIN VAR DEF: $LC235
.const .align 1 .u8 $LC235[5] =
{48,120,101,98,0 };
// BEGIN VAR DEF: $LC236
.const .align 1 .u8 $LC236[5] =
{48,120,101,99,0 };
// BEGIN VAR DEF: $LC237
.const .align 1 .u8 $LC237[5] =
{48,120,101,100,0 };
// BEGIN VAR DEF: $LC238
.const .align 1 .u8 $LC238[5] =
{48,120,101,101,0 };
// BEGIN VAR DEF: $LC239
.const .align 1 .u8 $LC239[5] =
{48,120,101,102,0 };
// BEGIN GLOBAL VAR DEF: __unctrl
.visible .const .align 8 .u64 __unctrl[256] =
{generic($LC0),generic($LC1),generic($LC2),generic($LC3),generic($LC4),generic($LC5),generic($LC6),generic($LC7),generic($LC8),generic($LC9),generic($LC10),generic($LC11),generic($LC12),generic($LC13),generic($LC14),generic($LC15),generic($LC16),generic($LC17),generic($LC18),generic($LC19),generic($LC20),generic($LC21),generic($LC22),generic($LC23),generic($LC24),generic($LC25),generic($LC26),generic($LC27),generic($LC28),generic($LC29),generic($LC30),generic($LC31),generic($LC32),generic($LC33),generic($LC34),generic($LC35),generic($LC36),generic($LC37),generic($LC38),generic($LC39),generic($LC40),generic($LC41),generic($LC42),generic($LC43),generic($LC44),generic($LC45),generic($LC46),generic($LC47),generic($LC48),generic($LC49),generic($LC50),generic($LC51),generic($LC52),generic($LC53),generic($LC54),generic($LC55),generic($LC56),generic($LC57),generic($LC58),generic($LC59),generic($LC60),generic($LC61),generic($LC62),generic($LC63),generic($LC64),generic($LC65),generic($LC66),generic($LC67),generic($LC68),generic($LC69),generic($LC70),generic($LC71),generic($LC72),generic($LC73),generic($LC74),generic($LC75),generic($LC76),generic($LC77),generic($LC78),generic($LC79),generic($LC80),generic($LC81),generic($LC82),generic($LC83),generic($LC84),generic($LC85),generic($LC86),generic($LC87),generic($LC88),generic($LC89),generic($LC90),generic($LC91),generic($LC92),generic($LC93),generic($LC94),generic($LC95),generic($LC96),generic($LC97),generic($LC98),generic($LC99),generic($LC100),generic($LC101),generic($LC102),generic($LC103),generic($LC104),generic($LC105),generic($LC106),generic($LC107),generic($LC108),generic($LC109),generic($LC110),generic($LC111),generic($LC112),generic($LC113),generic($LC114),generic($LC115),generic($LC116),generic($LC117),generic($LC118),generic($LC119),generic($LC120),generic($LC121),generic($LC122),generic($LC123),generic($LC124),generic($LC125),generic($LC126),generic($LC127),generic($LC128),generic($LC129),generic($LC130),generic($LC131),generic($LC132),generic($LC133),generic($LC134),generic($LC135),generic($LC136),generic($LC137),generic($LC138),generic($LC139),generic($LC140),generic($LC141),generic($LC142),generic($LC143),generic($LC144),generic($LC145),generic($LC146),generic($LC147),generic($LC148),generic($LC149),generic($LC150),generic($LC151),generic($LC152),generic($LC153),generic($LC154),generic($LC155),generic($LC156),generic($LC157),generic($LC158),generic($LC159),generic($LC160),generic($LC161),generic($LC162),generic($LC163),generic($LC164),generic($LC165),generic($LC166),generic($LC167),generic($LC168),generic($LC169),generic($LC170),generic($LC171),generic($LC172),generic($LC173),generic($LC174),generic($LC175),generic($LC176),generic($LC177),generic($LC178),generic($LC179),generic($LC180),generic($LC181),generic($LC182),generic($LC183),generic($LC184),generic($LC185),generic($LC186),generic($LC187),generic($LC188),generic($LC189),generic($LC190),generic($LC191),generic($LC192),generic($LC193),generic($LC194),generic($LC195),generic($LC196),generic($LC197),generic($LC198),generic($LC199),generic($LC200),generic($LC201),generic($LC202),generic($LC203),generic($LC204),generic($LC205),generic($LC206),generic($LC207),generic($LC208),generic($LC209),generic($LC210),generic($LC211),generic($LC212),generic($LC213),generic($LC214),generic($LC215),generic($LC216),generic($LC217),generic($LC218),generic($LC219),generic($LC220),generic($LC221),generic($LC222),generic($LC223),generic($LC224),generic($LC225),generic($LC226),generic($LC227),generic($LC228),generic($LC229),generic($LC230),generic($LC231),generic($LC232),generic($LC233),generic($LC234),generic($LC235),generic($LC236),generic($LC237),generic($LC238),generic($LC239),generic($LC240),generic($LC241),generic($LC242),generic($LC243),generic($LC244),generic($LC245),generic($LC246),generic($LC247),generic($LC248),generic($LC249),generic($LC250),generic($LC251),generic($LC252),generic($LC253),generic($LC254),generic($LC255) };

lib_a-ungetc.o/ 1612277263  0     0     100666  9338      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __submore
.visible .func (.param .u32 %value_out) __submore (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/ungetc.c"
// BEGIN GLOBAL FUNCTION DECL: _ungetc_r
.visible .func (.param .u32 %value_out) _ungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: ungetc
.visible .func (.param .u32 %value_out) ungetc (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _realloc_r
.extern .func (.param .u64 %value_out) _realloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __submore
.visible .func (.param .u32 %value_out) __submore (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .u64 %r59;
mov.u64 %r36,%ar0;
mov.u64 %r37,%ar1;
.loc 1 86 14
ld.u64 %r22,[%r37+88];
.loc 1 86 21
add.u64 %r38,%r37,116;
.loc 1 86 6
setp.ne.u64 %r39,%r22,%r38;
@ %r39 bra $L2;
.loc 1 91 34
mov.u64 %r41,1024;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r41;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r42,[%value_in];
}
.loc 1 91 10
setp.ne.u64 %r43,%r42,0;
@ %r43 bra $L3;
$L5:
.loc 1 92 9
mov.u32 %r35,-1;
bra $L1;
$L3:
.loc 1 93 21
st.u64 [%r37+88],%r42;
.loc 1 94 21
cvt.u32.u64 %r44,%r41;
st.u32 [%r37+96],%r44;
.loc 1 97 7
ld.u8 %r45,[%r37+118];
st.u8 [%r42+1023],%r45;
ld.u8 %r46,[%r37+117];
st.u8 [%r42+1022],%r46;
ld.u8 %r47,[%r37+116];
st.u8 [%r42+1021],%r47;
.loc 1 95 9
add.u64 %r48,%r42,1021;
.loc 1 98 14
st.u64 [%r37],%r48;
.loc 1 99 14
mov.u32 %r35,0;
bra $L1;
$L2:
.loc 1 101 5
ld.u32 %r28,[%r37+96];
.loc 1 102 71
add.u32 %r49,%r28,%r28;
.loc 1 102 25
cvt.s64.s32 %r53,%r49;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r36;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r22;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r53;
call (%value_in),_realloc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r54,[%value_in];
}
.loc 1 103 6
setp.eq.u64 %r55,%r54,0;
@ %r55 bra $L5;
.loc 1 105 10
cvt.s64.s32 %r26,%r28;
.loc 1 105 30
add.u64 %r27,%r54,%r26;
.loc 1 105 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r59,[%value_in];
}
.loc 1 106 10
st.u64 [%r37],%r27;
.loc 1 107 17
st.u64 [%r37+88],%r54;
.loc 1 108 17
st.u32 [%r37+96],%r49;
.loc 1 109 10
mov.u32 %r35,0;
$L1:
.loc 1 110 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _ungetc_r
.visible .func (.param .u32 %value_out) _ungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u32 %r26;
.reg .u64 %r34;
.reg .u64 %r38;
.reg .u64 %r49;
.reg .u32 %r50;
.reg .u32 %r51;
.reg .u64 %r52;
.reg .u32 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .pred %r56;
.reg .u32 %r57;
.reg .pred %r58;
.reg .u16 %r60;
.reg .u16 %r61;
.reg .pred %r62;
.reg .u16 %r63;
.reg .u32 %r65;
.reg .u32 %r66;
.reg .u16 %r67;
.reg .u16 %r68;
.reg .u16 %r70;
.reg .pred %r72;
.reg .u16 %r73;
.reg .pred %r75;
.reg .u16 %r76;
.reg .pred %r78;
.reg .u32 %r81;
.reg .pred %r82;
.reg .u16 %r83;
.reg .u16 %r84;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .u32 %r89;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u32 %r92;
.reg .pred %r93;
.reg .u64 %r94;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .u32 %r100;
.reg .pred %r101;
.reg .pred %r102;
.reg .pred %r103;
.reg .u32 %r104;
.reg .pred %r105;
.reg .u64 %r106;
.reg .u32 %r107;
.reg .u64 %r108;
.reg .u32 %r109;
.reg .u64 %r111;
.reg .u32 %r112;
mov.u64 %r52,%ar0;
mov.u32 %r53,%ar1;
mov.u64 %r54,%ar2;
.loc 1 117 6
setp.ne.u32 %r55,%r53,-1;
@ %r55 bra $L10;
$L15:
.loc 1 118 12
mov.u32 %r51,-1;
bra $L9;
$L10:
.loc 1 124 3
setp.eq.u64 %r56,%r52,0;
@ %r56 bra $L12;
ld.u32 %r57,[%r52+80];
setp.ne.u32 %r58,%r57,0;
@ %r58 bra $L12;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r52;
call __sinit,(%out_arg1);
}
$L12:
.loc 1 128 3
ld.s16 %r24,[%r54+16];
cvt.u16.u32 %r61,%r24;
and.b16 %r60,%r61,8192;
setp.ne.u16 %r62,%r60,0;
@ %r62 bra $L13;
or.b16 %r63,%r61,8192;
cvt.s32.s16 %r24,%r63;
ld.u32 %r66,[%r54+172];
and.b32 %r65,%r66,-8193;
st.u32 [%r54+172],%r65;
$L13:
.loc 1 131 14
cvt.u16.u32 %r68,%r24;
and.b16 %r67,%r68,-33;
cvt.s32.s16 %r26,%r67;
st.u16 [%r54+16],%r67;
.loc 1 133 6
and.b16 %r70,%r68,4;
setp.ne.u16 %r72,%r70,0;
@ %r72 bra $L14;
.loc 1 139 10
and.b16 %r73,%r68,16;
setp.eq.u16 %r75,%r73,0;
@ %r75 bra $L15;
.loc 1 144 10
and.b16 %r76,%r68,8;
setp.eq.u16 %r78,%r76,0;
@ %r78 bra $L16;
.loc 1 146 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r52;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r81,[%value_in];
}
.loc 1 146 7
setp.ne.u32 %r82,%r81,0;
@ %r82 bra $L15;
.loc 1 151 15
ld.u16 %r84,[%r54+16];
and.b16 %r83,%r84,-9;
cvt.s32.s16 %r26,%r83;
.loc 1 152 11
st.u32 [%r54+12],%r81;
.loc 1 153 17
st.u32 [%r54+40],%r81;
$L16:
.loc 1 155 18
cvt.u16.u32 %r88,%r26;
or.b16 %r87,%r88,4;
st.u16 [%r54+16],%r87;
$L14:
.loc 1 157 7
cvt.u32.u32 %r89,%r53;
and.b32 %r51,%r53,255;
.loc 1 166 13
ld.u32 %r50,[%r54+8];
.loc 1 164 6
ld.u64 %r90,[%r54+88];
setp.eq.u64 %r91,%r90,0;
@ %r91 bra $L17;
.loc 1 166 10
ld.u32 %r92,[%r54+96];
setp.le.s32 %r93,%r92,%r50;
@ %r93 bra $L18;
$L19:
.loc 1 171 12
ld.u64 %r34,[%r54];
.loc 1 171 8
add.u64 %r94,%r34,-1;
.loc 1 171 17
st.u64 [%r54],%r94;
st.u8 [%r34+-1],%r89;
.loc 1 172 13
ld.u32 %r97,[%r54+8];
add.u32 %r96,%r97,1;
st.u32 [%r54+8],%r96;
.loc 1 174 14
bra $L9;
$L18:
.loc 1 166 38
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r52;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
call (%value_in),__submore,(%out_arg1,%out_arg2);
ld.param.u32 %r100,[%value_in];
}
.loc 1 166 35
setp.ne.u32 %r101,%r100,0;
@ ! %r101 bra $L19;
bra $L15;
$L17:
.loc 1 183 14
ld.u64 %r38,[%r54+24];
.loc 1 183 34
ld.u64 %r49,[%r54];
.loc 1 183 6
setp.eq.u64 %r102,%r38,0;
@ %r102 bra $L20;
.loc 1 183 29
setp.ge.u64 %r103,%r38,%r49;
@ %r103 bra $L20;
.loc 1 183 64
ld.u8 %r104,[%r49+-1];
.loc 1 183 55
setp.ne.u32 %r105,%r104,%r51;
@ %r105 bra $L20;
.loc 1 185 13
add.u64 %r106,%r49,-1;
st.u64 [%r54],%r106;
.loc 1 186 13
add.u32 %r107,%r50,1;
st.u32 [%r54+8],%r107;
.loc 1 188 14
bra $L9;
$L20:
.loc 1 196 11
st.u32 [%r54+112],%r50;
.loc 1 197 11
st.u64 [%r54+104],%r49;
.loc 1 198 19
add.u64 %r108,%r54,116;
.loc 1 198 17
st.u64 [%r54+88],%r108;
.loc 1 199 17
mov.u32 %r109,3;
st.u32 [%r54+96],%r109;
.loc 1 200 37
st.u8 [%r54+118],%r89;
.loc 1 201 12
add.u64 %r111,%r54,118;
.loc 1 201 10
st.u64 [%r54],%r111;
.loc 1 202 10
mov.u32 %r112,1;
st.u32 [%r54+8],%r112;
$L9:
.loc 1 205 1
mov.u32 %value,%r51;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: ungetc
.visible .func (.param .u32 %value_out) ungetc (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u32 %r30;
mov.u32 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 212 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r30,[%value_in];
}
.loc 1 213 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-unlinkr.o/1612277263  0     0     100666  1375      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _unlink_r
.visible .func (.param .u32 %value_out) _unlink_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/reent/unlinkr.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: unlink
.extern .func (.param .u32 %value_out) unlink (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: _unlink_r
.visible .func (.param .u32 %value_out) _unlink_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u32 %r28;
.reg .pred %r29;
.reg .pred %r30;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 46 9
mov.u32 %r26,0;
st.global.u32 [errno],%r26;
.loc 1 47 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
call (%value_in),unlink,(%out_arg1);
ld.param.u32 %r28,[%value_in];
}
.loc 1 47 6
setp.ne.u32 %r29,%r28,-1;
@ %r29 bra $L1;
.loc 1 47 45
ld.global.u32 %r22,[errno];
.loc 1 47 36
setp.eq.u32 %r30,%r22,0;
@ %r30 bra $L1;
.loc 1 48 17
st.u32 [%r24],%r22;
$L1:
.loc 1 50 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-utoa.o/   1612277263  0     0     100666  4312      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: __utoa
.visible .func (.param .u64 %value_out) __utoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/utoa.c"
// BEGIN GLOBAL FUNCTION DECL: utoa
.visible .func (.param .u64 %value_out) utoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[37] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0 };
// BEGIN GLOBAL FUNCTION DEF: __utoa
.visible .func (.param .u64 %value_out) __utoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[48];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u64 %r37;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u64 %r48;
.reg .u32 %r49;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r56;
.reg .u32 %r58;
.reg .pred %r59;
.reg .u32 %r60;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .pred %r66;
.reg .u64 %r67;
.reg .u64 %r68;
.reg .u32 %r69;
.reg .pred %r70;
.reg .u64 %r71;
.reg .u32 %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .pred %r75;
mov.u32 %r47,%ar0;
mov.u64 %r48,%ar1;
mov.u32 %r49,%ar2;
.loc 1 35 14
cvta.const.u64 %r51,$LC0;
mov.u64 %r52,37;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r52;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r56,[%value_in];
}
.loc 1 41 18
add.u32 %r58,%r49,-2;
.loc 1 41 6
setp.le.u32 %r59,%r58,34;
@ %r59 bra $L2;
.loc 1 43 14
mov.u32 %r60,0;
st.u8 [%r48],%r60;
.loc 1 44 14
mov.u64 %r46,0;
bra $L1;
$L2:
mov.u64 %r34,%r48;
.loc 1 41 6
mov.u64 %r37,%r48;
.loc 1 48 5
mov.u32 %r29,0;
$L4:
mov.u32 %r35,%r29;
.loc 1 52 12
add.u32 %r29,%r35,1;
.loc 1 51 17
rem.u32 %r62,%r47,%r49;
.loc 1 52 24
cvt.u64.u32 %r63,%r62;
add.u64 %r64,%frame,%r63;
.loc 1 52 16
ld.u8 %r65,[%r64];
st.u8 [%r37],%r65;
mov.u32 %r36,%r47;
.loc 1 53 13
div.u32 %r47,%r47,%r49;
.loc 1 54 5
add.u64 %r37,%r37,1;
setp.le.u32 %r66,%r49,%r36;
@ %r66 bra $L4;
.loc 1 55 6
cvt.s64.s32 %r67,%r29;
.loc 1 55 10
add.u64 %r68,%r48,%r67;
mov.u32 %r69,0;
st.u8 [%r68],%r69;
.loc 1 58 3
setp.ne.u32 %r70,%r35,0;
@ %r70 bra $L5;
$L7:
.loc 1 44 14
mov.u64 %r46,%r48;
bra $L1;
$L5:
cvt.s64.s32 %r71,%r35;
add.u64 %r30,%r48,%r71;
.loc 1 58 3
mov.u32 %r33,%r35;
$L6:
.loc 1 60 9
ld.s8 %r32,[%r34];
.loc 1 61 14
ld.u8 %r72,[%r30];
st.u8 [%r34],%r72;
.loc 1 62 14
cvt.u32.u32 %r73,%r32;
st.u8 [%r30],%r73;
.loc 1 58 33
add.u32 %r33,%r33,-1;
.loc 1 58 3
add.u64 %r34,%r34,1;
add.u64 %r30,%r30,-1;
sub.u32 %r74,%r35,%r33;
setp.gt.s32 %r75,%r33,%r74;
@ %r75 bra $L6;
bra $L7;
$L1:
.loc 1 66 1
mov.u64 %value,%r46;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: utoa
.visible .func (.param .u64 %value_out) utoa (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r29;
mov.u32 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u32 %r25,%ar2;
.loc 1 73 10
{
.param .u64 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r25;
call (%value_in),__utoa,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r29,[%value_in];
}
.loc 1 74 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}
/1730           1612277263  0     0     100666  4273      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _vdiprintf_r
.visible .func (.param .u32 %value_out) _vdiprintf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vdiprintf.c"
// BEGIN GLOBAL FUNCTION DECL: vdiprintf
.visible .func (.param .u32 %value_out) vdiprintf (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vasniprintf_r
.extern .func (.param .u64 %value_out) _vasniprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _write_r
.extern .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _vdiprintf_r
.visible .func (.param .u32 %value_out) _vdiprintf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[528];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .pred %r46;
mov.u64 %r27,%ar0;
mov.u32 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u64 %r30,%ar3;
.loc 1 23 10
mov.u64 %r31,512;
st.u64 [%frame+512],%r31;
.loc 1 26 7
add.u64 %r37,%frame,512;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r37;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r30;
call (%value_in),_vasniprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r38,[%value_in];
}
.loc 1 27 6
setp.eq.u64 %r39,%r38,0;
@ %r39 bra $L4;
.loc 1 29 7
ld.u64 %r44,[%frame+512];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r38;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r44;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r45,[%value_in];
}
mov.u64 %r24,%r45;
.loc 1 29 5
st.u64 [%frame+512],%r24;
.loc 1 30 6
setp.eq.u64 %r46,%frame,%r38;
@ %r46 bra $L3;
.loc 1 31 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 32 10
ld.u64 %r24,[%frame+512];
$L3:
cvt.u32.u64 %r26,%r24;
bra $L1;
$L4:
.loc 1 28 12
mov.u32 %r26,-1;
$L1:
.loc 1 33 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vdiprintf
.visible .func (.param .u32 %value_out) vdiprintf (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u32 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 42 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vdiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 43 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

/1749           1612277263  0     0     100666  4260      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _vdprintf_r
.visible .func (.param .u32 %value_out) _vdprintf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vdprintf.c"
// BEGIN GLOBAL FUNCTION DECL: vdprintf
.visible .func (.param .u32 %value_out) vdprintf (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vasnprintf_r
.extern .func (.param .u64 %value_out) _vasnprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _write_r
.extern .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _vdprintf_r
.visible .func (.param .u32 %value_out) _vdprintf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[528];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .u64 %r44;
.reg .u64 %r45;
.reg .pred %r46;
mov.u64 %r27,%ar0;
mov.u32 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u64 %r30,%ar3;
.loc 1 23 10
mov.u64 %r31,512;
st.u64 [%frame+512],%r31;
.loc 1 26 7
add.u64 %r37,%frame,512;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r37;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r30;
call (%value_in),_vasnprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r38,[%value_in];
}
.loc 1 27 6
setp.eq.u64 %r39,%r38,0;
@ %r39 bra $L4;
.loc 1 29 7
ld.u64 %r44,[%frame+512];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r38;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r44;
call (%value_in),_write_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r45,[%value_in];
}
mov.u64 %r24,%r45;
.loc 1 29 5
st.u64 [%frame+512],%r24;
.loc 1 30 6
setp.eq.u64 %r46,%frame,%r38;
@ %r46 bra $L3;
.loc 1 31 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r38;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 32 10
ld.u64 %r24,[%frame+512];
$L3:
cvt.u32.u64 %r26,%r24;
bra $L1;
$L4:
.loc 1 28 12
mov.u32 %r26,-1;
$L1:
.loc 1 33 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vdprintf
.visible .func (.param .u32 %value_out) vdprintf (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u32 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 48 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vdprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 49 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
/1767           1612277263  0     0     100666  55739     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: __sprint_r$part$0
.func (.param .u32 %value_out) __sprint_r$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vfprintf.c"
// BEGIN GLOBAL FUNCTION DECL: __sprint_r
.visible .func (.param .u32 %value_out) __sprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _vfiprintf_r
.visible .func (.param .u32 %value_out) _vfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: vfiprintf
.visible .func (.param .u32 %value_out) vfiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN FUNCTION DECL: __sbprintf
.func (.param .u32 %value_out) __sbprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _fputwc_r
.extern .func (.param .u32 %value_out) _fputwc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sfvwrite_r
.extern .func (.param .u32 %value_out) __sfvwrite_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.extern .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: zeroes$0
.const .align 1 .u8 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 1 .u8 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// BEGIN FUNCTION DEF: __sprint_r$part$0
.func (.param .u32 %value_out) __sprint_r$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u64 %r29;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u64 %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u32 %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .pred %r52;
.reg .u64 %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u32 %r61;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .pred %r69;
.reg .u32 %r73;
.reg .u64 %r74;
.reg .u32 %r75;
.reg .u64 %r77;
mov.u64 %r45,%ar0;
mov.u64 %r46,%ar1;
mov.u64 %r47,%ar2;
.loc 1 410 18
ld.u32 %r49,[%r46+172];
and.b32 %r48,%r49,8192;
.loc 1 410 5
setp.eq.u32 %r50,%r48,0;
@ %r50 bra $L2;
.loc 1 415 7
ld.u64 %r24,[%r47];
.loc 1 416 3
ld.u64 %r77,[%r47+16];
setp.ne.u64 %r52,%r77,0;
@ %r52 bra $L3;
$L7:
.loc 1 403 15
mov.u32 %r44,0;
bra $L4;
$L3:
.loc 1 418 6
ld.u64 %r25,[%r24];
.loc 1 419 23
ld.u64 %r53,[%r24+8];
shr.u64 %r27,%r53,2;
.loc 1 419 8
cvt.u32.u64 %r28,%r27;
.loc 1 420 4
setp.le.s32 %r54,%r28,0;
@ %r54 bra $L5;
mov.u64 %r43,%r25;
add.u32 %r55,%r28,-1;
cvt.u64.u32 %r57,%r55;
shl.b64 %r58,%r57,2;
add.u64 %r59,%r43,4;
add.u64 %r29,%r58,%r59;
$L6:
.loc 1 421 9
ld.u32 %r61,[%r43];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r61;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r46;
call (%value_in),_fputwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r63,[%value_in];
}
.loc 1 421 8
setp.eq.u32 %r64,%r63,-1;
@ %r64 bra $L8;
.loc 1 420 4
add.u64 %r43,%r43,4;
setp.ne.u64 %r65,%r29,%r43;
@ %r65 bra $L6;
ld.u64 %r77,[%r47+16];
$L5:
.loc 1 417 30
cvt.s64.s32 %r66,%r28;
shl.b64 %r67,%r66,2;
.loc 1 417 23
sub.u64 %r77,%r77,%r67;
st.u64 [%r47+16],%r77;
.loc 1 417 53
add.u64 %r24,%r24,16;
.loc 1 416 3
setp.ne.u64 %r69,%r77,0;
@ %r69 bra $L3;
bra $L7;
$L2:
.loc 1 429 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r46;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r47;
call (%value_in),__sfvwrite_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r73,[%value_in];
}
mov.u32 %r44,%r73;
bra $L4;
$L8:
.loc 1 422 10
mov.u32 %r44,%r63;
$L4:
.loc 1 431 17
mov.u64 %r74,0;
st.u64 [%r47+16],%r74;
.loc 1 432 18
cvt.u32.u64 %r75,%r74;
st.u32 [%r47+8],%r75;
.loc 1 434 1
mov.u32 %value,%r44;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __sprint_r
.visible .func (.param .u32 %value_out) __sprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .u32 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 405 5
ld.u64 %r27,[%r26+16];
setp.ne.u64 %r28,%r27,0;
@ %r28 bra $L13;
.loc 1 406 19
cvt.u32.u64 %r29,%r27;
st.u32 [%r26+8],%r29;
.loc 1 407 10
cvt.u32.u64 %r23,%r27;
bra $L12;
$L13:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r33,[%value_in];
}
mov.u32 %r23,%r33;
$L12:
.loc 1 434 1
mov.u32 %value,%r23;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vfiprintf_r
.visible .func (.param .u32 %value_out) _vfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[208];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u64 %r54;
.reg .u32 %r77;
.reg .u32 %r79;
.reg .u32 %r92;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .u64 %r107;
.reg .u64 %r109;
.reg .u32 %r112;
.reg .u64 %r113;
.reg .u32 %r114;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .u32 %r119;
.reg .u64 %r120;
.reg .u32 %r124;
.reg .u64 %r125;
.reg .u32 %r126;
.reg .u32 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u64 %r131;
.reg .u32 %r132;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u64 %r135;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u64 %r143;
.reg .u64 %r144;
.reg .u64 %r145;
.reg .u32 %r147;
.reg .u64 %r150;
.reg .u64 %r151;
.reg .u64 %r152;
.reg .u32 %r153;
.reg .u32 %r154;
.reg .u64 %r167;
.reg .u64 %r174;
.reg .u64 %r175;
.reg .u64 %r176;
.reg .u64 %r177;
.reg .u64 %r180;
.reg .u64 %r181;
.reg .u64 %r182;
.reg .u64 %r183;
.reg .u64 %r184;
.reg .u64 %r187;
.reg .u64 %r188;
.reg .u64 %r189;
.reg .u64 %r190;
.reg .u64 %r191;
.reg .u64 %r193;
.reg .u64 %r194;
.reg .u64 %r195;
.reg .u64 %r198;
.reg .u64 %r199;
.reg .u64 %r200;
.reg .u64 %r204;
.reg .u64 %r205;
.reg .u32 %r207;
.reg .u32 %r208;
.reg .u32 %r209;
.reg .u32 %r210;
.reg .u32 %r211;
.reg .u32 %r217;
.reg .u32 %r218;
.reg .u64 %r221;
.reg .u64 %r222;
.reg .u32 %r223;
.reg .u64 %r224;
.reg .u64 %r225;
.reg .u32 %r226;
.reg .u64 %r227;
.reg .u64 %r229;
.reg .u32 %r230;
.reg .u32 %r231;
.reg .u32 %r232;
.reg .u64 %r236;
.reg .u32 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r240;
.reg .u64 %r241;
.reg .pred %r250;
.reg .u32 %r251;
.reg .pred %r252;
.reg .u16 %r254;
.reg .u16 %r255;
.reg .pred %r256;
.reg .u16 %r257;
.reg .u32 %r260;
.reg .u16 %r261;
.reg .u16 %r262;
.reg .pred %r263;
.reg .u64 %r264;
.reg .pred %r265;
.reg .u32 %r268;
.reg .pred %r269;
.reg .u16 %r270;
.reg .u16 %r271;
.reg .pred %r272;
.reg .u16 %r273;
.reg .pred %r274;
.reg .u32 %r279;
.reg .u64 %r280;
.reg .u32 %r281;
.reg .u16 %r283;
.reg .u32 %r284;
.reg .u32 %r285;
.reg .u32 %r288;
.reg .u32 %r289;
.reg .u16 %r290;
.reg .u16 %r291;
.reg .u16 %r292;
.reg .u32 %r293;
.reg .u16 %r294;
.reg .pred %r295;
.reg .u16 %r297;
.reg .u32 %r298;
.reg .u32 %r299;
.reg .u32 %r302;
.reg .u32 %r303;
.reg .u16 %r304;
.reg .u16 %r305;
.reg .u16 %r306;
.reg .u32 %r307;
.reg .u16 %r308;
.reg .pred %r309;
.reg .u64 %r310;
.reg .pred %r311;
.reg .u64 %r312;
.reg .u32 %r313;
.reg .pred %r314;
.reg .pred %r315;
.reg .u32 %r316;
.reg .u32 %r321;
.reg .pred %r322;
.reg .pred %r323;
.reg .u32 %r324;
.reg .pred %r325;
.reg .pred %r326;
.reg .pred %r327;
.reg .pred %r328;
.reg .pred %r329;
.reg .pred %r330;
.reg .pred %r331;
.reg .pred %r332;
.reg .pred %r333;
.reg .pred %r334;
.reg .pred %r335;
.reg .pred %r336;
.reg .pred %r337;
.reg .u32 %r338;
.reg .pred %r339;
.reg .pred %r340;
.reg .pred %r341;
.reg .pred %r342;
.reg .pred %r343;
.reg .pred %r344;
.reg .pred %r345;
.reg .pred %r346;
.reg .pred %r347;
.reg .pred %r348;
.reg .pred %r349;
.reg .pred %r350;
.reg .pred %r351;
.reg .pred %r352;
.reg .pred %r353;
.reg .pred %r354;
.reg .pred %r355;
.reg .pred %r356;
.reg .pred %r357;
.reg .u32 %r358;
.reg .pred %r359;
.reg .u32 %r360;
.reg .pred %r361;
.reg .pred %r362;
.reg .pred %r363;
.reg .pred %r364;
.reg .u32 %r366;
.reg .u32 %r367;
.reg .u32 %r368;
.reg .pred %r369;
.reg .u32 %r371;
.reg .u32 %r372;
.reg .u32 %r373;
.reg .pred %r376;
.reg .u16 %r377;
.reg .pred %r378;
.reg .u32 %r379;
.reg .u32 %r380;
.reg .pred %r381;
.reg .u32 %r382;
.reg .u32 %r383;
.reg .pred %r384;
.reg .u32 %r385;
.reg .pred %r386;
.reg .u32 %r387;
.reg .pred %r388;
.reg .u16 %r389;
.reg .pred %r392;
.reg .u32 %r393;
.reg .pred %r394;
.reg .u32 %r395;
.reg .u64 %r396;
.reg .u32 %r397;
.reg .pred %r398;
.reg .u64 %r399;
.reg .u32 %r400;
.reg .pred %r401;
.reg .u64 %r402;
.reg .u32 %r403;
.reg .pred %r404;
.reg .u32 %r405;
.reg .pred %r406;
.reg .u32 %r407;
.reg .pred %r408;
.reg .u32 %r409;
.reg .pred %r410;
.reg .u16 %r411;
.reg .u32 %r412;
.reg .u32 %r413;
.reg .u32 %r414;
.reg .pred %r415;
.reg .pred %r416;
.reg .u32 %r418;
.reg .u64 %r420;
.reg .u64 %r421;
.reg .pred %r422;
.reg .u64 %r423;
.reg .u64 %r425;
.reg .u32 %r426;
.reg .pred %r427;
.reg .u32 %r428;
.reg .pred %r429;
.reg .u32 %r430;
.reg .pred %r431;
.reg .u16 %r432;
.reg .pred %r433;
.reg .u32 %r434;
.reg .u32 %r435;
.reg .pred %r436;
.reg .u32 %r437;
.reg .pred %r438;
.reg .u32 %r439;
.reg .pred %r440;
.reg .u16 %r441;
.reg .u32 %r442;
.reg .pred %r443;
.reg .pred %r444;
.reg .u32 %r445;
.reg .u32 %r446;
.reg .pred %r447;
.reg .u32 %r449;
.reg .u32 %r450;
.reg .u32 %r452;
.reg .u32 %r453;
.reg .u16 %r454;
.reg .u16 %r455;
.reg .u16 %r456;
.reg .u32 %r457;
.reg .u16 %r458;
.reg .pred %r459;
.reg .pred %r460;
.reg .pred %r461;
.reg .u16 %r463;
.reg .u16 %r464;
.reg .u16 %r466;
.reg .u32 %r468;
.reg .pred %r470;
.reg .u16 %r472;
.reg .u32 %r473;
.reg .u32 %r474;
.reg .u16 %r476;
.reg .u16 %r477;
.reg .u16 %r479;
.reg .u16 %r480;
.reg .u32 %r482;
.reg .u16 %r483;
.reg .pred %r484;
.reg .u64 %r487;
.reg .u32 %r488;
.reg .u64 %r491;
.reg .pred %r492;
.reg .u16 %r494;
.reg .u16 %r495;
.reg .u32 %r496;
.reg .u64 %r498;
.reg .u16 %r500;
.reg .u16 %r501;
.reg .u32 %r502;
.reg .pred %r505;
.reg .u64 %r508;
.reg .u64 %r509;
.reg .u64 %r510;
.reg .u32 %r511;
.reg .pred %r512;
.reg .u64 %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .u32 %r518;
.reg .pred %r519;
.reg .u32 %r520;
.reg .pred %r521;
.reg .u32 %r522;
.reg .pred %r523;
.reg .pred %r524;
.reg .pred %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .u64 %r529;
.reg .pred %r530;
.reg .pred %r531;
.reg .u32 %r537;
.reg .pred %r538;
.reg .pred %r539;
.reg .pred %r541;
.reg .pred %r542;
.reg .u16 %r544;
.reg .u32 %r545;
.reg .pred %r546;
.reg .u32 %r551;
.reg .pred %r552;
.reg .u16 %r553;
.reg .u32 %r554;
.reg .pred %r555;
.reg .pred %r558;
.reg .pred %r559;
.reg .pred %r561;
.reg .u32 %r566;
.reg .pred %r567;
.reg .pred %r568;
.reg .u64 %r570;
.reg .pred %r571;
.reg .pred %r572;
.reg .u32 %r578;
.reg .pred %r579;
.reg .pred %r580;
.reg .pred %r581;
.reg .pred %r582;
.reg .u64 %r584;
.reg .pred %r585;
.reg .pred %r586;
.reg .u32 %r592;
.reg .pred %r593;
.reg .pred %r594;
.reg .pred %r596;
.reg .pred %r597;
.reg .u32 %r603;
.reg .pred %r604;
.reg .pred %r605;
.reg .pred %r606;
.reg .u64 %r608;
.reg .pred %r609;
.reg .pred %r610;
.reg .u32 %r616;
.reg .pred %r617;
.reg .pred %r618;
.reg .pred %r620;
.reg .pred %r621;
.reg .u32 %r622;
.reg .u32 %r627;
.reg .pred %r628;
.reg .u32 %r629;
.reg .pred %r630;
.reg .pred %r631;
.reg .u32 %r632;
.reg .u32 %r633;
.reg .pred %r634;
.reg .u32 %r639;
.reg .pred %r640;
.reg .u32 %r641;
.reg .pred %r642;
.reg .pred %r643;
.reg .pred %r644;
.reg .u64 %r646;
.reg .pred %r647;
.reg .pred %r648;
.reg .u32 %r654;
.reg .pred %r655;
.reg .pred %r656;
.reg .pred %r658;
.reg .pred %r659;
.reg .u32 %r660;
.reg .u32 %r665;
.reg .pred %r666;
.reg .u32 %r667;
.reg .pred %r668;
.reg .u32 %r673;
.reg .pred %r674;
.reg .u32 %r675;
.reg .u64 %r676;
.reg .pred %r677;
.reg .u64 %r681;
.reg .u32 %r682;
.reg .u16 %r683;
.reg .u16 %r684;
.reg .pred %r685;
.reg .u32 %r687;
.reg .pred %r688;
.reg .u32 %r689;
.reg .pred %r690;
.reg .u64 %r692;
.reg .pred %r699;
.reg .u32 %r701;
.reg .u32 %r702;
.reg .u32 %r704;
.reg .u32 %r705;
.reg .u16 %r706;
.reg .u16 %r707;
.reg .u16 %r708;
.reg .u32 %r709;
.reg .u16 %r710;
.reg .pred %r711;
.reg .u64 %r713;
.reg .pred %r716;
.reg .u64 %r717;
.reg .u32 %r718;
.reg .u32 %r720;
.reg .u64 %r721;
.reg .u32 %r737;
.reg .u64 %r738;
.reg .u64 %r739;
.reg .u64 %r740;
.reg .u64 %r741;
mov.u64 %r238,%ar0;
mov.u64 %r239,%ar1;
mov.u64 %r240,%ar2;
mov.u64 %r241,%ar3;
.loc 1 848 2
setp.eq.u64 %r250,%r238,0;
@ %r250 bra $L16;
ld.u32 %r251,[%r238+80];
setp.ne.u32 %r252,%r251,0;
@ %r252 bra $L16;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
call __sinit,(%out_arg1);
}
$L16:
.loc 1 851 2
ld.s16 %r24,[%r239+16];
cvt.u16.u32 %r255,%r24;
and.b16 %r254,%r255,8192;
setp.ne.u16 %r256,%r254,0;
@ %r256 bra $L17;
.loc 1 849 2
ld.u32 %r23,[%r239+172];
.loc 1 851 2
or.b16 %r257,%r255,8192;
cvt.s32.s16 %r24,%r257;
st.u16 [%r239+16],%r257;
and.b32 %r260,%r23,-8193;
st.u32 [%r239+172],%r260;
$L17:
.loc 1 854 5
cvt.u16.u32 %r262,%r24;
and.b16 %r261,%r262,8;
setp.eq.u16 %r263,%r261,0;
@ %r263 bra $L18;
.loc 1 854 6
ld.u64 %r264,[%r239+24];
setp.ne.u64 %r265,%r264,0;
@ %r265 bra $L19;
$L18:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
call (%value_in),__swsetup_r,(%out_arg1,%out_arg2);
ld.param.u32 %r268,[%value_in];
}
setp.eq.u32 %r269,%r268,0;
@ %r269 bra $L20;
$L162:
.loc 1 856 10
mov.u32 %r237,-1;
bra $L15;
$L20:
.loc 1 861 9
ld.s16 %r24,[%r239+16];
$L19:
.loc 1 861 5
cvt.u16.u32 %r271,%r24;
and.b16 %r270,%r271,26;
setp.ne.u16 %r272,%r270,10;
@ %r272 bra $L22;
.loc 1 861 60
ld.u16 %r273,[%r239+18];
setp.lt.s16 %r274,%r273,0;
@ %r274 bra $L22;
.loc 1 864 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r240;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r241;
call (%value_in),__sbprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r279,[%value_in];
}
mov.u32 %r237,%r279;
bra $L15;
$L22:
.loc 1 883 14
st.u64 [%frame+168],%frame;
.loc 1 884 16
mov.u64 %r280,0;
st.u64 [%frame+184],%r280;
.loc 1 885 17
cvt.u32.u64 %r281,%r280;
st.u32 [%frame+176],%r281;
.loc 1 883 21
mov.u64 %r135,%frame;
.loc 1 707 8
mov.u64 %r25,%r280;
.loc 1 887 6
cvt.u32.u64 %r237,%r25;
add.u64 %r738,%frame,168;
.loc 1 1687 4
add.u64 %r739,%frame,192;
.loc 1 1685 4
add.u64 %r740,%frame,194;
mov.u64 %r741,1;
$L23:
.loc 1 914 24
ld.s8 %r138,[%r240];
.loc 1 914 37
cvt.u16.u32 %r283,%r138;
set.u32.ne.u16 %r284,%r283,0;
neg.s32 %r285,%r284;
set.u32.ne.u16 %r288,%r283,37;
neg.s32 %r289,%r288;
cvt.u16.u32 %r291,%r285;
cvt.u16.u32 %r292,%r289;
and.b16 %r290,%r291,%r292;
.loc 1 914 23
cvt.u32.u16 %r293,%r290;
cvt.u16.u8 %r294,%r293;
setp.eq.u16 %r295,%r294,0;
@ %r295 bra $L173;
mov.u64 %r109,%r240;
$L25:
mov.u64 %r144,%r109;
.loc 1 915 25
add.u64 %r109,%r109,1;
.loc 1 914 24
ld.s8 %r138,[%r109];
.loc 1 914 37
cvt.u16.u32 %r297,%r138;
set.u32.ne.u16 %r298,%r297,0;
neg.s32 %r299,%r298;
set.u32.ne.u16 %r302,%r297,37;
neg.s32 %r303,%r302;
cvt.u16.u32 %r305,%r299;
cvt.u16.u32 %r306,%r303;
and.b16 %r304,%r305,%r306;
.loc 1 914 23
cvt.u32.u16 %r307,%r304;
cvt.u16.u8 %r308,%r307;
setp.ne.u16 %r309,%r308,0;
@ %r309 bra $L25;
.loc 1 917 16
sub.u64 %r310,%r109,%r240;
.loc 1 917 10
cvt.u32.u64 %r139,%r310;
.loc 1 917 6
setp.eq.u32 %r311,%r139,0;
@ %r311 bra $L24;
.loc 1 918 4
st.u64 [%r135],%r240;
cvt.s64.s32 %r35,%r139;
st.u64 [%r135+8],%r35;
ld.u64 %r312,[%frame+184];
add.u64 %r37,%r35,%r312;
st.u64 [%frame+184],%r37;
ld.u32 %r313,[%frame+176];
add.u32 %r39,%r313,1;
st.u32 [%frame+176],%r39;
setp.gt.s32 %r314,%r39,7;
@ %r314 bra $L26;
add.u64 %r135,%r135,16;
bra $L27;
$L26:
.loc 1 405 5
setp.ne.u64 %r315,%r37,0;
@ %r315 bra $L28;
.loc 1 406 19
cvt.u32.u64 %r316,%r37;
st.u32 [%frame+176],%r316;
.loc 1 918 4
mov.u64 %r135,%frame;
bra $L27;
$L28:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r321,[%value_in];
}
setp.ne.u32 %r322,%r321,0;
@ %r322 bra $L29;
mov.u64 %r135,%frame;
$L27:
.loc 1 919 8
add.u32 %r237,%r237,%r139;
.loc 1 925 21
ld.s8 %r138,[%r144+1];
bra $L24;
$L173:
.loc 1 914 23
mov.u64 %r109,%r240;
$L24:
.loc 1 925 20
setp.eq.u32 %r323,%r138,0;
@ %r323 bra $L30;
.loc 1 929 6
add.u64 %r240,%r109,1;
.loc 1 935 8
mov.u32 %r324,0;
st.u8 [%frame+194],%r324;
.loc 1 947 14
ld.s8 %r232,[%r109+1];
mov.u32 %r77,0;
mov.u32 %r79,%r77;
.loc 1 934 8
mov.u32 %r130,-1;
.loc 1 933 9
mov.u32 %r129,%r77;
.loc 1 931 9
mov.u32 %r126,%r77;
.loc 1 1060 6
mov.u32 %r737,%r77;
bra $L31;
$L174:
.loc 1 1007 10
mov.u64 %r241,%r181;
$L31:
.loc 1 947 18
add.u64 %r240,%r240,1;
.loc 1 947 12
mov.u32 %r124,%r232;
$L32:
.loc 1 948 11
setp.eq.u32 %r325,%r124,88;
@ %r325 bra $L33;
setp.gt.s32 %r326,%r124,88;
@ %r326 bra $L34;
setp.eq.u32 %r327,%r124,46;
@ %r327 bra $L35;
setp.gt.s32 %r328,%r124,46;
@ %r328 bra $L36;
setp.eq.u32 %r329,%r124,42;
@ %r329 bra $L37;
setp.gt.s32 %r330,%r124,42;
@ %r330 bra $L38;
setp.eq.u32 %r331,%r124,32;
@ %r331 bra $L39;
setp.eq.u32 %r332,%r124,35;
@ %r332 bra $L40;
bra $L265;
$L38:
setp.eq.u32 %r333,%r124,43;
@ %r333 bra $L42;
setp.eq.u32 %r334,%r124,45;
@ %r334 bra $L43;
bra $L44;
$L36:
setp.eq.u32 %r335,%r124,68;
@ %r335 bra $L45;
setp.gt.s32 %r336,%r124,68;
@ %r336 bra $L46;
setp.eq.u32 %r337,%r124,48;
@ %r337 bra $L47;
add.u32 %r338,%r124,-49;
setp.gt.u32 %r339,%r338,8;
@ %r339 bra $L44;
mov.u64 %r190,%r240;
.loc 1 1077 6
mov.u32 %r129,0;
add.u32 %r718,%r124,-48;
bra $L48;
$L46:
.loc 1 948 11
setp.eq.u32 %r340,%r124,79;
@ %r340 bra $L49;
setp.eq.u32 %r341,%r124,85;
@ %r341 bra $L50;
bra $L44;
$L34:
setp.eq.u32 %r342,%r124,111;
@ %r342 bra $L51;
setp.gt.s32 %r343,%r124,111;
@ %r343 bra $L52;
setp.eq.u32 %r344,%r124,105;
@ %r344 bra $L53;
setp.gt.s32 %r345,%r124,105;
@ %r345 bra $L54;
setp.eq.u32 %r346,%r124,100;
@ %r346 bra $L53;
setp.eq.u32 %r347,%r124,104;
@ %r347 bra $L55;
setp.eq.u32 %r348,%r124,99;
@ %r348 bra $L56;
bra $L44;
$L54:
setp.eq.u32 %r349,%r124,108;
@ %r349 bra $L57;
setp.eq.u32 %r350,%r124,110;
@ %r350 bra $L58;
bra $L44;
$L52:
setp.eq.u32 %r351,%r124,115;
@ %r351 bra $L59;
setp.gt.s32 %r352,%r124,115;
@ %r352 bra $L60;
setp.eq.u32 %r353,%r124,112;
@ %r353 bra $L61;
setp.eq.u32 %r354,%r124,113;
@ %r354 bra $L62;
bra $L44;
$L60:
setp.eq.u32 %r355,%r124,117;
@ %r355 bra $L63;
setp.ne.u32 %r356,%r124,120;
@ %r356 bra $L44;
setp.eq.u32 %r357,%r77,0;
@ %r357 bra $L64;
cvt.u32.u32 %r358,%r79;
st.u8 [%frame+194],%r358;
$L64:
.loc 1 1538 10
cvta.const.u64 %r25,$LC1;
bra $L65;
$L53:
setp.eq.u32 %r359,%r77,0;
@ %r359 bra $L67;
cvt.u32.u32 %r360,%r79;
st.u8 [%frame+194],%r360;
bra $L67;
$L43:
.loc 1 1022 14
ld.s8 %r232,[%r240];
bra $L68;
$L39:
ld.s8 %r232,[%r240];
.loc 1 964 7
setp.ne.u32 %r361,%r79,0;
selp.u32 %r77,%r77,1,%r361;
selp.u32 %r79,%r79,32,%r361;
bra $L31;
$L40:
.loc 1 968 10
or.b32 %r126,%r126,1;
.loc 1 947 14
ld.s8 %r232,[%r240];
.loc 1 969 4
bra $L31;
$L37:
.loc 1 1007 10
add.u64 %r181,%r241,4;
ld.u32 %r129,[%r241];
.loc 1 1022 14
ld.s8 %r232,[%r240];
.loc 1 1011 7
setp.ge.s32 %r362,%r129,0;
@ %r362 bra $L174;
.loc 1 1013 10
neg.s32 %r129,%r129;
.loc 1 1007 10
mov.u64 %r241,%r181;
$L68:
.loc 1 1016 10
or.b32 %r126,%r126,4;
.loc 1 1017 4
bra $L31;
$L42:
.loc 1 947 14
ld.s8 %r232,[%r240];
.loc 1 1020 4
mov.u32 %r77,1;
.loc 1 1019 9
mov.u32 %r79,%r124;
.loc 1 1020 4
bra $L31;
$L35:
.loc 1 1022 18
add.u64 %r152,%r240,1;
.loc 1 1022 12
ld.s8 %r124,[%r240];
.loc 1 1022 7
setp.eq.u32 %r363,%r124,42;
@ %r363 bra $L70;
.loc 1 1061 11
add.u32 %r718,%r124,-48;
.loc 1 1061 10
setp.le.u32 %r364,%r718,9;
@ %r364 bra $L71;
.loc 1 1022 18
mov.u64 %r240,%r152;
.loc 1 1060 6
mov.u32 %r130,%r737;
bra $L32;
$L70:
.loc 1 1052 10
ld.u32 %r153,[%r241];
max.s32 %r130,%r153,-1;
.loc 1 947 14
ld.s8 %r232,[%r240+1];
.loc 1 1052 10
add.u64 %r241,%r241,4;
.loc 1 1022 18
mov.u64 %r240,%r152;
.loc 1 1058 5
bra $L31;
$L71:
mov.u64 %r29,%r152;
.loc 1 1060 6
mov.u32 %r130,%r737;
$L73:
.loc 1 1062 12
shl.b32 %r366,%r130,2;
add.u32 %r367,%r366,%r130;
add.u32 %r368,%r367,%r367;
.loc 1 1062 7
add.u32 %r130,%r368,%r718;
mov.u64 %r236,%r29;
add.u64 %r29,%r29,1;
mov.u64 %r240,%r29;
.loc 1 1063 8
ld.s8 %r124,[%r236];
.loc 1 1061 11
add.u32 %r718,%r124,-48;
.loc 1 1061 10
setp.le.u32 %r369,%r718,9;
@ %r369 bra $L73;
bra $L32;
$L47:
.loc 1 1073 10
or.b32 %r126,%r126,128;
.loc 1 947 14
ld.s8 %r232,[%r240];
.loc 1 1074 4
bra $L31;
$L48:
.loc 1 1079 12
shl.b32 %r371,%r129,2;
add.u32 %r372,%r371,%r129;
add.u32 %r373,%r372,%r372;
.loc 1 1079 7
add.u32 %r129,%r718,%r373;
mov.u64 %r222,%r190;
add.u64 %r190,%r190,1;
mov.u64 %r240,%r190;
.loc 1 1080 8
ld.s8 %r124,[%r222];
.loc 1 1081 13
add.u32 %r718,%r124,-48;
.loc 1 1081 4
setp.le.u32 %r376,%r718,9;
@ %r376 bra $L48;
bra $L32;
$L55:
.loc 1 1107 11
or.b32 %r126,%r126,64;
.loc 1 947 14
ld.s8 %r232,[%r240];
.loc 1 1108 4
bra $L31;
$L57:
.loc 1 1111 8
ld.s8 %r232,[%r240];
.loc 1 1111 7
cvt.u16.u32 %r377,%r232;
setp.ne.u16 %r378,%r377,108;
@ %r378 bra $L74;
.loc 1 1113 11
or.b32 %r126,%r126,32;
.loc 1 947 14
ld.s8 %r232,[%r240+1];
.loc 1 1112 8
add.u64 %r240,%r240,1;
bra $L31;
$L74:
.loc 1 1116 11
or.b32 %r126,%r126,16;
bra $L31;
$L62:
.loc 1 1119 10
or.b32 %r126,%r126,32;
.loc 1 947 14
ld.s8 %r232,[%r240];
.loc 1 1120 4
bra $L31;
$L56:
.loc 1 1178 9
ld.u32 %r379,[%r241];
st.u8 [%frame+128],%r379;
.loc 1 1181 9
mov.u32 %r380,0;
st.u8 [%frame+194],%r380;
.loc 1 1178 11
add.u64 %r241,%r241,4;
.loc 1 1182 4
mov.u32 %r133,1;
.loc 1 1179 10
mov.u32 %r134,%r133;
.loc 1 1162 7
add.u64 %r125,%frame,128;
.loc 1 1182 4
bra $L75;
$L45:
setp.eq.u32 %r381,%r77,0;
@ %r381 bra $L76;
cvt.u32.u32 %r382,%r79;
st.u8 [%frame+194],%r382;
$L76:
.loc 1 1184 10
or.b32 %r126,%r126,16;
$L67:
.loc 1 1188 13
and.b32 %r383,%r126,32;
setp.eq.u32 %r384,%r383,0;
@ %r384 bra $L77;
add.u64 %r182,%r241,7;
and.b64 %r193,%r182,-8;
add.u64 %r241,%r193,8;
ld.u64 %r54,[%r193];
mov.u64 %r131,%r54;
bra $L78;
$L77:
and.b32 %r385,%r126,16;
setp.eq.u32 %r386,%r385,0;
@ %r386 bra $L79;
add.u64 %r184,%r241,7;
and.b64 %r183,%r184,-8;
add.u64 %r241,%r183,8;
ld.u64 %r54,[%r183];
mov.u64 %r131,%r54;
bra $L78;
$L79:
.loc 1 1007 10
ld.u32 %r210,[%r241];
add.u64 %r241,%r241,4;
.loc 1 1188 13
and.b32 %r387,%r126,64;
setp.eq.u32 %r388,%r387,0;
@ %r388 bra $L80;
cvt.u16.u32 %r389,%r210;
cvt.s64.s16 %r131,%r389;
.loc 1 1190 8
mov.u64 %r54,%r131;
bra $L78;
$L80:
.loc 1 1188 13
cvt.s64.s32 %r131,%r210;
.loc 1 1190 8
mov.u64 %r54,%r131;
$L78:
.loc 1 1190 7
setp.ge.s64 %r392,%r54,0;
@ %r392 bra $L81;
.loc 1 1196 12
neg.s64 %r131,%r131;
.loc 1 1197 10
mov.u32 %r393,45;
st.u8 [%frame+194],%r393;
mov.u32 %r211,45;
.loc 1 1199 9
mov.u32 %r132,1;
bra $L82;
$L58:
setp.eq.u32 %r394,%r77,0;
@ %r394 bra $L83;
cvt.u32.u32 %r395,%r79;
st.u8 [%frame+194],%r395;
$L83:
.loc 1 1188 13
add.u64 %r396,%r241,7;
and.b64 %r204,%r396,-8;
ld.u64 %r205,[%r204];
add.u64 %r241,%r204,8;
.loc 1 1387 14
and.b32 %r397,%r126,32;
.loc 1 1387 7
setp.eq.u32 %r398,%r397,0;
@ %r398 bra $L84;
.loc 1 1388 34
cvt.s64.s32 %r399,%r237;
st.u64 [%r205],%r399;
bra $L23;
$L84:
.loc 1 1391 14
and.b32 %r400,%r126,16;
.loc 1 1391 7
setp.eq.u32 %r401,%r400,0;
@ %r401 bra $L86;
.loc 1 1392 34
cvt.s64.s32 %r402,%r237;
st.u64 [%r205],%r402;
bra $L23;
$L86:
.loc 1 1393 19
and.b32 %r403,%r126,64;
.loc 1 1393 12
setp.eq.u32 %r404,%r403,0;
@ %r404 bra $L87;
.loc 1 1394 35
st.u16 [%r205],%r237;
bra $L23;
$L87:
.loc 1 1400 33
st.u32 [%r205],%r237;
bra $L23;
$L49:
.loc 1 1403 10
or.b32 %r126,%r126,16;
$L51:
.loc 1 1406 13
and.b32 %r405,%r126,32;
setp.eq.u32 %r406,%r405,0;
@ %r406 bra $L88;
add.u64 %r174,%r241,7;
and.b64 %r167,%r174,-8;
add.u64 %r241,%r167,8;
ld.u64 %r131,[%r167];
.loc 1 1407 9
mov.u32 %r132,0;
bra $L89;
$L88:
.loc 1 1406 13
and.b32 %r407,%r126,16;
setp.eq.u32 %r408,%r407,0;
@ %r408 bra $L90;
add.u64 %r150,%r241,7;
and.b64 %r175,%r150,-8;
add.u64 %r241,%r175,8;
ld.u64 %r131,[%r175];
.loc 1 1407 9
mov.u32 %r132,%r405;
bra $L89;
$L90:
.loc 1 1007 10
ld.u32 %r209,[%r241];
add.u64 %r241,%r241,4;
.loc 1 1406 13
and.b32 %r409,%r126,64;
setp.eq.u32 %r410,%r409,0;
@ %r410 bra $L91;
cvt.u16.u32 %r411,%r209;
cvt.u64.u16 %r131,%r411;
.loc 1 1407 9
mov.u32 %r132,%r407;
bra $L89;
$L91:
.loc 1 1406 13
cvt.u64.u32 %r131,%r209;
.loc 1 1407 9
mov.u32 %r132,%r409;
bra $L89;
$L61:
.loc 1 1421 25
add.u64 %r180,%r241,7;
and.b64 %r191,%r180,-8;
add.u64 %r241,%r191,8;
.loc 1 1421 11
ld.u64 %r131,[%r191];
.loc 1 1424 10
or.b32 %r126,%r126,2;
.loc 1 1425 10
mov.u32 %r412,48;
st.u8 [%frame+192],%r412;
.loc 1 1426 10
mov.u32 %r413,120;
st.u8 [%frame+193],%r413;
.loc 1 1423 10
cvta.const.u64 %r25,$LC1;
.loc 1 1422 9
mov.u32 %r132,2;
.loc 1 1427 4
bra $L89;
$L59:
.loc 1 1432 7
add.u64 %r199,%r241,7;
and.b64 %r200,%r199,-8;
add.u64 %r241,%r200,8;
ld.u64 %r125,[%r200];
.loc 1 1436 9
mov.u32 %r414,0;
st.u8 [%frame+194],%r414;
.loc 1 1442 7
setp.ne.u64 %r415,%r125,0;
@ %r415 bra $L92;
.loc 1 1444 39
min.u32 %r134,%r130,6;
mov.u32 %r133,%r134;
.loc 1 1443 8
cvta.const.u64 %r125,$LC2;
bra $L75;
$L92:
.loc 1 1511 7
setp.eq.u32 %r416,%r130,-1;
@ %r416 bra $L93;
.loc 1 1517 15
cvt.s64.s32 %r420,%r130;
mov.u32 %r418,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r125;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r418;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r420;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r421,[%value_in];
}
.loc 1 1519 8
setp.eq.u64 %r422,%r421,0;
@ %r422 bra $L94;
.loc 1 1520 15
sub.u64 %r423,%r421,%r125;
.loc 1 1520 11
cvt.u32.u64 %r134,%r423;
.loc 1 1674 7
ld.s8 %r211,[%frame+194];
mov.u32 %r128,%r126;
.loc 1 932 9
mov.u32 %r130,%r418;
bra $L95;
$L93:
.loc 1 1524 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r125;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r425,[%value_in];
}
.loc 1 1524 10
cvt.u32.u64 %r134,%r425;
.loc 1 1674 7
ld.s8 %r211,[%frame+194];
mov.u32 %r128,%r126;
.loc 1 932 9
mov.u32 %r130,0;
bra $L95;
$L50:
.loc 1 1528 10
or.b32 %r126,%r126,16;
$L63:
.loc 1 1531 13
and.b32 %r426,%r126,32;
setp.eq.u32 %r427,%r426,0;
@ %r427 bra $L96;
add.u64 %r188,%r241,7;
and.b64 %r198,%r188,-8;
add.u64 %r241,%r198,8;
ld.u64 %r131,[%r198];
.loc 1 1532 9
mov.u32 %r132,1;
bra $L89;
$L96:
.loc 1 1531 13
and.b32 %r428,%r126,16;
setp.eq.u32 %r429,%r428,0;
@ %r429 bra $L97;
add.u64 %r194,%r241,7;
and.b64 %r195,%r194,-8;
add.u64 %r241,%r195,8;
ld.u64 %r131,[%r195];
.loc 1 1532 9
mov.u32 %r132,1;
bra $L89;
$L97:
.loc 1 1007 10
ld.u32 %r208,[%r241];
add.u64 %r241,%r241,4;
.loc 1 1531 13
and.b32 %r430,%r126,64;
setp.eq.u32 %r431,%r430,0;
@ %r431 bra $L98;
cvt.u16.u32 %r432,%r208;
cvt.u64.u16 %r131,%r432;
.loc 1 1532 9
mov.u32 %r132,1;
bra $L89;
$L98:
.loc 1 1531 13
cvt.u64.u32 %r131,%r208;
.loc 1 1532 9
mov.u32 %r132,1;
bra $L89;
$L33:
setp.eq.u32 %r433,%r77,0;
@ %r433 bra $L99;
cvt.u32.u32 %r434,%r79;
st.u8 [%frame+194],%r434;
$L99:
.loc 1 1535 10
cvta.const.u64 %r25,$LC0;
$L65:
.loc 1 1539 17
and.b32 %r435,%r126,32;
setp.eq.u32 %r436,%r435,0;
@ %r436 bra $L100;
add.u64 %r177,%r241,7;
and.b64 %r176,%r177,-8;
add.u64 %r241,%r176,8;
ld.u64 %r131,[%r176];
bra $L101;
$L100:
and.b32 %r437,%r126,16;
setp.eq.u32 %r438,%r437,0;
@ %r438 bra $L102;
add.u64 %r187,%r241,7;
and.b64 %r145,%r187,-8;
add.u64 %r241,%r145,8;
ld.u64 %r131,[%r145];
bra $L101;
$L102:
.loc 1 1007 10
ld.u32 %r207,[%r241];
add.u64 %r241,%r241,4;
.loc 1 1539 17
and.b32 %r439,%r126,64;
setp.eq.u32 %r440,%r439,0;
@ %r440 bra $L103;
cvt.u16.u32 %r441,%r207;
cvt.u64.u16 %r131,%r441;
bra $L101;
$L103:
cvt.u64.u32 %r131,%r207;
$L101:
.loc 1 1542 14
and.b32 %r442,%r126,1;
.loc 1 1542 7
setp.eq.u32 %r443,%r442,0;
@ %r443 bra $L175;
.loc 1 1542 20
setp.eq.u64 %r444,%r131,0;
@ %r444 bra $L176;
.loc 1 1543 11
mov.u32 %r445,48;
st.u8 [%frame+192],%r445;
.loc 1 1544 11
st.u8 [%frame+193],%r124;
.loc 1 1545 11
or.b32 %r126,%r126,2;
.loc 1 1540 9
mov.u32 %r132,2;
bra $L89;
$L175:
mov.u32 %r132,2;
bra $L89;
$L176:
mov.u32 %r132,2;
$L89:
.loc 1 1552 16
mov.u32 %r446,0;
st.u8 [%frame+194],%r446;
mov.u32 %r211,0;
$L82:
.loc 1 1558 14
setp.eq.u32 %r447,%r130,-1;
@ %r447 bra $L104;
.loc 1 1559 11
and.b32 %r128,%r126,-129;
.loc 1 1567 15
set.u32.ne.u64 %r449,%r131,0;
neg.s32 %r450,%r449;
.loc 1 1567 28
set.u32.ne.u32 %r452,%r130,0;
neg.s32 %r453,%r452;
.loc 1 1567 20
cvt.u16.u32 %r455,%r450;
cvt.u16.u32 %r456,%r453;
or.b16 %r454,%r455,%r456;
.loc 1 1567 7
cvt.u32.u16 %r457,%r454;
cvt.u16.u8 %r458,%r457;
setp.eq.u16 %r459,%r458,0;
@ %r459 bra $L105;
.loc 1 1559 11
mov.u32 %r126,%r128;
$L104:
setp.eq.u32 %r460,%r132,1;
@ %r460 bra $L106;
setp.eq.u32 %r461,%r132,2;
@ %r461 bra $L177;
mov.u64 %r125,%r738;
$L108:
mov.u64 %r143,%r125;
.loc 1 1576 13
add.u64 %r125,%r125,-1;
.loc 1 1576 15
cvt.u16.u64 %r464,%r131;
and.b16 %r463,%r464,7;
add.u16 %r466,%r463,48;
cvt.u32.u16 %r468,%r466;
cvt.s32.s8 %r92,%r468;
.loc 1 1576 13
st.u8 [%r125],%r468;
.loc 1 1577 14
shr.u64 %r131,%r131,3;
.loc 1 1578 6
setp.ne.u64 %r470,%r131,0;
@ %r470 bra $L108;
.loc 1 1580 22
cvt.u16.u32 %r472,%r92;
set.u32.ne.u16 %r473,%r472,48;
neg.s32 %r474,%r473;
.loc 1 1580 9
cvt.u16.u32 %r477,%r126;
and.b16 %r476,%r477,1;
.loc 1 1580 22
cvt.u16.u32 %r480,%r474;
and.b16 %r479,%r480,%r476;
cvt.u32.u16 %r482,%r479;
cvt.u16.u8 %r483,%r482;
setp.ne.u16 %r484,%r483,0;
@ %r484 bra $L109;
.loc 1 1644 21
sub.u64 %r487,%r738,%r125;
.loc 1 1644 9
cvt.u32.u64 %r134,%r487;
mov.u32 %r128,%r126;
bra $L95;
$L109:
.loc 1 1581 13
add.u64 %r151,%r143,-2;
mov.u32 %r488,48;
st.u8 [%r125+-1],%r488;
.loc 1 1644 21
sub.u64 %r491,%r738,%r151;
.loc 1 1644 9
cvt.u32.u64 %r134,%r491;
mov.u32 %r128,%r126;
.loc 1 1581 13
mov.u64 %r125,%r151;
bra $L95;
$L185:
.loc 1 1559 11
mov.u32 %r126,%r128;
$L106:
.loc 1 1586 9
setp.gt.u64 %r492,%r131,9;
@ %r492 bra $L178;
.loc 1 1587 15
cvt.u16.u64 %r495,%r131;
add.u16 %r494,%r495,48;
.loc 1 1587 13
cvt.u32.u16 %r496,%r494;
st.u8 [%frame+167],%r496;
.loc 1 1588 7
mov.u32 %r128,%r126;
mov.u32 %r134,1;
.loc 1 1587 13
add.u64 %r125,%frame,167;
.loc 1 1588 7
bra $L95;
$L178:
.loc 1 1566 7
mov.u64 %r125,%r738;
$L111:
.loc 1 1594 14
add.u64 %r125,%r125,-1;
.loc 1 1594 16
rem.u64 %r498,%r131,10;
cvt.u16.u64 %r501,%r498;
add.u16 %r500,%r501,48;
.loc 1 1594 14
cvt.u32.u16 %r502,%r500;
st.u8 [%r125],%r502;
mov.u64 %r189,%r131;
.loc 1 1615 15
div.u64 %r131,%r131,10;
.loc 1 1616 6
setp.gt.u64 %r505,%r189,9;
@ %r505 bra $L111;
.loc 1 1644 21
sub.u64 %r508,%r738,%r125;
.loc 1 1644 9
cvt.u32.u64 %r134,%r508;
mov.u32 %r128,%r126;
bra $L95;
$L177:
mov.u64 %r125,%r738;
$L107:
.loc 1 1621 13
add.u64 %r125,%r125,-1;
.loc 1 1621 28
and.b64 %r509,%r131,15;
.loc 1 1621 20
add.u64 %r510,%r25,%r509;
.loc 1 1621 13
ld.u8 %r511,[%r510];
st.u8 [%r125],%r511;
.loc 1 1622 14
shr.u64 %r131,%r131,4;
.loc 1 1623 6
setp.ne.u64 %r512,%r131,0;
@ %r512 bra $L107;
.loc 1 1644 21
sub.u64 %r515,%r738,%r125;
.loc 1 1644 9
cvt.u32.u64 %r134,%r515;
mov.u32 %r128,%r126;
bra $L95;
$L105:
.loc 1 1641 32
setp.ne.u32 %r516,%r132,0;
@ %r516 bra $L179;
.loc 1 1641 55
and.b32 %r134,%r126,1;
.loc 1 1641 45
setp.eq.u32 %r517,%r134,0;
@ %r517 bra $L180;
.loc 1 1642 32
mov.u32 %r518,48;
st.u8 [%frame+167],%r518;
mov.u32 %r130,%r132;
add.u64 %r125,%frame,167;
bra $L95;
$L179:
mov.u32 %r130,0;
mov.u32 %r134,%r130;
.loc 1 1566 7
add.u64 %r125,%frame,168;
bra $L95;
$L180:
mov.u32 %r130,%r132;
add.u64 %r125,%frame,168;
bra $L95;
$L265:
setp.eq.u32 %r519,%r77,0;
@ %r519 bra $L112;
$L168:
cvt.u32.u32 %r520,%r79;
st.u8 [%frame+194],%r520;
$L112:
.loc 1 1648 7
setp.eq.u32 %r521,%r124,0;
@ %r521 bra $L30;
$L169:
.loc 1 1652 8
st.u8 [%frame+128],%r124;
.loc 1 1654 9
mov.u32 %r522,0;
st.u8 [%frame+194],%r522;
.loc 1 1655 4
mov.u32 %r133,1;
.loc 1 1653 9
mov.u32 %r134,%r133;
.loc 1 1651 7
add.u64 %r125,%frame,128;
.loc 1 1655 4
bra $L75;
$L94:
.loc 1 1674 7
ld.s8 %r211,[%frame+194];
mov.u32 %r134,%r130;
mov.u32 %r128,%r126;
.loc 1 932 9
cvt.u32.u64 %r130,%r421;
$L95:
.loc 1 1673 10
max.s32 %r133,%r130,%r134;
.loc 1 1674 6
setp.eq.u32 %r523,%r211,0;
@ %r523 bra $L113;
.loc 1 1675 10
add.u32 %r133,%r133,1;
$L113:
.loc 1 1676 13
and.b32 %r104,%r128,2;
.loc 1 1676 6
setp.eq.u32 %r524,%r104,0;
@ %r524 bra $L114;
.loc 1 1677 10
add.u32 %r133,%r133,2;
$L114:
.loc 1 1680 14
and.b32 %r105,%r128,132;
.loc 1 1685 4
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r720,%r226,1;
mov.u32 %r218,%r720;
.loc 1 1680 6
setp.ne.u32 %r525,%r105,0;
@ %r525 bra $L115;
.loc 1 1681 4
sub.u32 %r154,%r129,%r133;
setp.le.s32 %r526,%r154,0;
@ %r526 bra $L115;
setp.le.s32 %r527,%r154,16;
@ %r527 bra $L181;
cvta.const.u64 %r721,blanks$1;
$L120:
st.u64 [%r135],%r721;
mov.u64 %r529,16;
st.u64 [%r135+8],%r529;
add.u64 %r225,%r225,16;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r720;
setp.gt.s32 %r530,%r720,7;
@ %r530 bra $L117;
add.u64 %r135,%r135,16;
add.u32 %r217,%r226,2;
mov.u32 %r226,%r720;
bra $L118;
$L117:
.loc 1 405 5
setp.ne.u64 %r531,%r225,0;
@ %r531 bra $L119;
.loc 1 406 19
mov.u32 %r226,%r105;
mov.u32 %r217,1;
.loc 1 1681 4
mov.u64 %r135,%frame;
bra $L118;
$L119:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r537,[%value_in];
}
setp.ne.u32 %r538,%r537,0;
@ %r538 bra $L29;
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r217,%r226,1;
mov.u64 %r135,%frame;
$L118:
add.u32 %r154,%r154,-16;
setp.gt.s32 %r539,%r154,16;
@ ! %r539 bra $L116;
add.u32 %r720,%r226,1;
bra $L120;
$L181:
mov.u32 %r217,%r720;
cvta.const.u64 %r721,blanks$1;
$L116:
st.u64 [%r135],%r721;
cvt.s64.s32 %r107,%r154;
st.u64 [%r135+8],%r107;
add.u64 %r225,%r225,%r107;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r217;
setp.gt.s32 %r541,%r217,7;
@ %r541 bra $L121;
add.u64 %r135,%r135,16;
.loc 1 1685 4
add.u32 %r218,%r217,1;
mov.u32 %r226,%r217;
bra $L115;
$L121:
.loc 1 405 5
setp.ne.u64 %r542,%r225,0;
@ %r542 bra $L122;
.loc 1 1684 6
ld.s8 %r545,[%frame+194];
cvt.u16.u32 %r544,%r545;
setp.ne.u16 %r546,%r544,0;
@ ! %r546 bra $L266;
bra $L123;
$L122:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r551,[%value_in];
}
.loc 1 1681 4
setp.ne.u32 %r552,%r551,0;
@ %r552 bra $L29;
.loc 1 1685 4
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r218,%r226,1;
.loc 1 1681 4
mov.u64 %r135,%frame;
$L115:
.loc 1 1685 4
add.u64 %r221,%r135,16;
.loc 1 1684 6
ld.s8 %r554,[%frame+194];
cvt.u16.u32 %r553,%r554;
setp.eq.u16 %r555,%r553,0;
@ %r555 bra $L125;
.loc 1 1685 4
st.u64 [%r135],%r740;
st.u64 [%r135+8],%r741;
add.u64 %r225,%r225,1;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r218;
setp.gt.s32 %r558,%r218,7;
@ %r558 bra $L126;
$L167:
.loc 1 1687 4
mov.u32 %r226,%r218;
add.u32 %r218,%r218,1;
mov.u64 %r135,%r221;
add.u64 %r221,%r221,16;
bra $L125;
$L126:
.loc 1 405 5
setp.ne.u64 %r559,%r225,0;
@ %r559 bra $L127;
.loc 1 1686 6
setp.ne.u32 %r561,%r104,0;
@ %r561 bra $L128;
mov.u32 %r226,%r104;
add.u64 %r221,%frame,16;
mov.u32 %r218,1;
.loc 1 1685 4
mov.u64 %r135,%frame;
bra $L129;
$L127:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r566,[%value_in];
}
setp.ne.u32 %r567,%r566,0;
@ %r567 bra $L29;
.loc 1 1687 4
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r218,%r226,1;
add.u64 %r221,%frame,16;
.loc 1 1685 4
mov.u64 %r135,%frame;
$L125:
.loc 1 1686 6
setp.ne.u32 %r568,%r104,0;
@ ! %r568 bra $L129;
.loc 1 1687 4
st.u64 [%r135],%r739;
mov.u64 %r570,2;
st.u64 [%r135+8],%r570;
add.u64 %r225,%r225,2;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r218;
setp.gt.s32 %r571,%r218,7;
@ %r571 bra $L131;
$L170:
mov.u64 %r135,%r221;
mov.u32 %r226,%r218;
$L166:
.loc 1 1760 3
add.u32 %r218,%r226,1;
add.u64 %r221,%r135,16;
bra $L129;
$L131:
.loc 1 405 5
setp.ne.u64 %r572,%r225,0;
@ %r572 bra $L132;
.loc 1 406 19
add.u64 %r221,%frame,16;
mov.u32 %r218,1;
cvt.u32.u64 %r226,%r225;
.loc 1 1687 4
mov.u64 %r135,%frame;
bra $L129;
$L132:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r578,[%value_in];
}
setp.ne.u32 %r579,%r578,0;
@ %r579 bra $L29;
.loc 1 1760 3
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r218,%r226,1;
add.u64 %r221,%frame,16;
.loc 1 1687 4
mov.u64 %r135,%frame;
$L129:
.loc 1 1690 6
setp.ne.u32 %r580,%r105,128;
@ %r580 bra $L133;
.loc 1 1691 4
sub.u32 %r147,%r129,%r133;
setp.le.s32 %r581,%r147,0;
@ %r581 bra $L133;
setp.le.s32 %r582,%r147,16;
@ %r582 bra $L182;
cvta.const.u64 %r717,zeroes$0;
$L138:
st.u64 [%r135],%r717;
mov.u64 %r584,16;
st.u64 [%r135+8],%r584;
add.u64 %r225,%r225,16;
st.u64 [%frame+184],%r225;
add.u32 %r112,%r226,1;
st.u32 [%frame+176],%r112;
setp.gt.s32 %r585,%r112,7;
@ %r585 bra $L135;
add.u64 %r135,%r135,16;
add.u32 %r223,%r226,2;
mov.u32 %r226,%r112;
bra $L136;
$L135:
.loc 1 405 5
setp.ne.u64 %r586,%r225,0;
@ %r586 bra $L137;
.loc 1 406 19
mov.u32 %r223,1;
cvt.u32.u64 %r226,%r225;
.loc 1 1691 4
mov.u64 %r135,%frame;
bra $L136;
$L137:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r592,[%value_in];
}
setp.ne.u32 %r593,%r592,0;
@ %r593 bra $L29;
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r223,%r226,1;
mov.u64 %r135,%frame;
$L136:
add.u32 %r147,%r147,-16;
setp.gt.s32 %r594,%r147,16;
@ %r594 bra $L138;
add.u64 %r224,%r135,16;
bra $L134;
$L182:
mov.u64 %r224,%r221;
mov.u32 %r223,%r218;
cvta.const.u64 %r717,zeroes$0;
$L134:
st.u64 [%r135],%r717;
cvt.s64.s32 %r113,%r147;
st.u64 [%r135+8],%r113;
add.u64 %r225,%r225,%r113;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r223;
setp.gt.s32 %r596,%r223,7;
@ %r596 bra $L139;
.loc 1 1760 3
add.u32 %r218,%r223,1;
add.u64 %r221,%r224,16;
mov.u32 %r226,%r223;
.loc 1 1691 4
mov.u64 %r135,%r224;
bra $L133;
$L139:
.loc 1 405 5
setp.ne.u64 %r597,%r225,0;
@ %r597 bra $L140;
.loc 1 406 19
add.u64 %r221,%frame,16;
mov.u32 %r218,1;
cvt.u32.u64 %r226,%r225;
.loc 1 1691 4
mov.u64 %r135,%frame;
bra $L133;
$L140:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r603,[%value_in];
}
setp.ne.u32 %r604,%r603,0;
@ %r604 bra $L29;
.loc 1 1760 3
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r218,%r226,1;
add.u64 %r221,%frame,16;
.loc 1 1691 4
mov.u64 %r135,%frame;
$L133:
.loc 1 1694 3
sub.u32 %r140,%r130,%r134;
setp.le.s32 %r605,%r140,0;
@ %r605 bra $L141;
setp.le.s32 %r606,%r140,16;
@ %r606 bra $L183;
cvta.const.u64 %r717,zeroes$0;
$L146:
st.u64 [%r135],%r717;
mov.u64 %r608,16;
st.u64 [%r135+8],%r608;
add.u64 %r225,%r225,16;
st.u64 [%frame+184],%r225;
add.u32 %r114,%r226,1;
st.u32 [%frame+176],%r114;
setp.gt.s32 %r609,%r114,7;
@ %r609 bra $L143;
add.u64 %r135,%r135,16;
add.u32 %r218,%r226,2;
mov.u32 %r226,%r114;
bra $L144;
$L143:
.loc 1 405 5
setp.ne.u64 %r610,%r225,0;
@ %r610 bra $L145;
.loc 1 406 19
mov.u32 %r218,1;
cvt.u32.u64 %r226,%r225;
.loc 1 1694 3
mov.u64 %r135,%frame;
bra $L144;
$L145:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r616,[%value_in];
}
setp.ne.u32 %r617,%r616,0;
@ %r617 bra $L29;
ld.u64 %r225,[%frame+184];
ld.u32 %r226,[%frame+176];
add.u32 %r218,%r226,1;
mov.u64 %r135,%frame;
$L144:
add.u32 %r140,%r140,-16;
setp.gt.s32 %r618,%r140,16;
@ %r618 bra $L146;
add.u64 %r227,%r135,16;
bra $L142;
$L183:
mov.u64 %r227,%r221;
cvta.const.u64 %r717,zeroes$0;
$L142:
st.u64 [%r135],%r717;
cvt.s64.s32 %r115,%r140;
st.u64 [%r135+8],%r115;
add.u64 %r225,%r225,%r115;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r218;
setp.gt.s32 %r620,%r218,7;
@ %r620 bra $L147;
.loc 1 1760 3
add.u32 %r218,%r218,1;
add.u64 %r221,%r227,16;
.loc 1 1694 3
mov.u64 %r135,%r227;
bra $L141;
$L147:
.loc 1 405 5
setp.ne.u64 %r621,%r225,0;
@ %r621 bra $L148;
.loc 1 1760 3
st.u64 [%frame],%r125;
cvt.s64.s32 %r229,%r134;
st.u64 [%frame+8],%r229;
st.u64 [%frame+184],%r229;
mov.u32 %r622,1;
st.u32 [%frame+176],%r622;
add.u64 %r221,%frame,16;
bra $L149;
$L148:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r627,[%value_in];
}
.loc 1 1694 3
setp.ne.u32 %r628,%r627,0;
@ %r628 bra $L29;
.loc 1 1760 3
ld.u64 %r225,[%frame+184];
ld.u32 %r629,[%frame+176];
add.u32 %r218,%r629,1;
add.u64 %r221,%frame,16;
.loc 1 1694 3
mov.u64 %r135,%frame;
$L141:
.loc 1 1760 3
st.u64 [%r135],%r125;
cvt.s64.s32 %r116,%r134;
st.u64 [%r135+8],%r116;
add.u64 %r229,%r116,%r225;
st.u64 [%frame+184],%r229;
st.u32 [%frame+176],%r218;
setp.le.s32 %r630,%r218,7;
@ %r630 bra $L149;
.loc 1 405 5
setp.ne.u64 %r631,%r229,0;
@ %r631 bra $L150;
.loc 1 406 19
cvt.u32.u64 %r632,%r229;
st.u32 [%frame+176],%r632;
.loc 1 1763 13
and.b32 %r633,%r128,4;
.loc 1 1763 6
setp.ne.u32 %r634,%r633,0;
@ %r634 bra $L151;
bra $L267;
$L150:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r639,[%value_in];
}
.loc 1 1760 3
setp.ne.u32 %r640,%r639,0;
@ %r640 bra $L29;
.loc 1 1769 3
ld.u64 %r229,[%frame+184];
.loc 1 1760 3
mov.u64 %r221,%frame;
$L149:
.loc 1 1763 13
and.b32 %r641,%r128,4;
.loc 1 1763 6
setp.eq.u32 %r642,%r641,0;
@ %r642 bra $L153;
.loc 1 1764 4
sub.u32 %r137,%r129,%r133;
setp.le.s32 %r643,%r137,0;
@ %r643 bra $L153;
bra $L164;
$L184:
.loc 1 1760 3
mov.u64 %r221,%frame;
$L164:
.loc 1 1764 4
ld.u32 %r230,[%frame+176];
setp.le.s32 %r644,%r137,16;
@ %r644 bra $L154;
cvta.const.u64 %r721,blanks$1;
$L158:
st.u64 [%r221],%r721;
mov.u64 %r646,16;
st.u64 [%r221+8],%r646;
add.u64 %r229,%r229,16;
st.u64 [%frame+184],%r229;
add.u32 %r119,%r230,1;
st.u32 [%frame+176],%r119;
setp.gt.s32 %r647,%r119,7;
@ %r647 bra $L155;
add.u64 %r221,%r221,16;
add.u32 %r231,%r230,2;
mov.u32 %r230,%r119;
bra $L156;
$L155:
.loc 1 405 5
setp.ne.u64 %r648,%r229,0;
@ %r648 bra $L157;
.loc 1 406 19
mov.u32 %r231,1;
cvt.u32.u64 %r230,%r229;
.loc 1 1764 4
mov.u64 %r221,%frame;
bra $L156;
$L157:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r654,[%value_in];
}
setp.ne.u32 %r655,%r654,0;
@ %r655 bra $L29;
ld.u64 %r229,[%frame+184];
ld.u32 %r230,[%frame+176];
add.u32 %r231,%r230,1;
mov.u64 %r221,%frame;
$L156:
add.u32 %r137,%r137,-16;
setp.gt.s32 %r656,%r137,16;
@ %r656 bra $L158;
bra $L159;
$L154:
add.u32 %r231,%r230,1;
cvta.const.u64 %r721,blanks$1;
$L159:
st.u64 [%r221],%r721;
cvt.s64.s32 %r120,%r137;
st.u64 [%r221+8],%r120;
add.u64 %r229,%r229,%r120;
st.u64 [%frame+184],%r229;
st.u32 [%frame+176],%r231;
setp.le.s32 %r658,%r231,7;
@ %r658 bra $L153;
.loc 1 405 5
setp.ne.u64 %r659,%r229,0;
@ %r659 bra $L160;
.loc 1 1767 33
max.s32 %r660,%r129,%r133;
.loc 1 1767 7
add.u32 %r237,%r237,%r660;
bra $L161;
$L160:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r665,[%value_in];
}
.loc 1 1764 4
setp.ne.u32 %r666,%r665,0;
@ %r666 bra $L29;
.loc 1 1769 3
ld.u64 %r229,[%frame+184];
$L153:
.loc 1 1767 33
max.s32 %r667,%r129,%r133;
.loc 1 1767 7
add.u32 %r237,%r237,%r667;
.loc 1 1769 3
setp.eq.u64 %r668,%r229,0;
@ %r668 bra $L161;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r738;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r673,[%value_in];
}
setp.ne.u32 %r674,%r673,0;
@ %r674 bra $L29;
$L161:
mov.u32 %r675,0;
st.u32 [%frame+176],%r675;
mov.u64 %r135,%frame;
bra $L23;
$L30:
.loc 1 1777 2
ld.u64 %r676,[%frame+184];
setp.eq.u64 %r677,%r676,0;
@ %r677 bra $L29;
add.u64 %r681,%frame,168;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r238;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r239;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r681;
call (%value_in),__sprint_r$part$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r682,[%value_in];
}
$L29:
.loc 1 1784 31
ld.u16 %r684,[%r239+16];
and.b16 %r683,%r684,64;
setp.ne.u16 %r685,%r683,0;
@ ! %r685 bra $L15;
bra $L162;
$L267:
.loc 1 1767 33
max.s32 %r687,%r129,%r133;
.loc 1 1767 7
add.u32 %r237,%r237,%r687;
bra $L161;
$L75:
.loc 1 932 9
mov.u32 %r128,%r126;
mov.u32 %r130,0;
bra $L113;
$L81:
.loc 1 964 8
ld.s8 %r211,[%frame+194];
.loc 1 1558 14
setp.ne.u32 %r688,%r130,-1;
@ %r688 bra $L163;
bra $L106;
$L268:
.loc 1 1767 33
max.s32 %r689,%r129,%r133;
.loc 1 1767 7
add.u32 %r237,%r237,%r689;
bra $L161;
$L151:
.loc 1 1764 4
sub.u32 %r137,%r129,%r133;
setp.gt.s32 %r690,%r137,0;
@ ! %r690 bra $L268;
bra $L184;
$L128:
.loc 1 1687 4
st.u64 [%frame],%r739;
mov.u64 %r692,2;
st.u64 [%frame+8],%r692;
add.u64 %r135,%frame,16;
mov.u32 %r226,1;
mov.u64 %r225,%r692;
bra $L166;
$L123:
.loc 1 1685 4
st.u64 [%frame],%r740;
st.u64 [%frame+8],%r741;
add.u64 %r221,%frame,16;
mov.u32 %r218,1;
mov.u64 %r225,1;
bra $L167;
$L44:
setp.ne.u32 %r699,%r77,0;
@ ! %r699 bra $L169;
bra $L168;
$L163:
.loc 1 1559 11
and.b32 %r128,%r126,-129;
.loc 1 1567 28
set.u32.ne.u32 %r701,%r130,0;
neg.s32 %r702,%r701;
.loc 1 1567 15
set.u32.ne.u64 %r704,%r131,0;
neg.s32 %r705,%r704;
.loc 1 1567 20
cvt.u16.u32 %r707,%r702;
cvt.u16.u32 %r708,%r705;
or.b16 %r706,%r707,%r708;
.loc 1 1567 7
cvt.u32.u16 %r709,%r706;
cvt.u16.u8 %r710,%r709;
setp.ne.u16 %r711,%r710,0;
@ %r711 bra $L185;
mov.u32 %r130,0;
mov.u32 %r134,%r130;
.loc 1 1566 7
add.u64 %r125,%frame,168;
bra $L95;
$L171:
.loc 1 1687 4
st.u64 [%frame],%r739;
mov.u64 %r713,2;
st.u64 [%frame+8],%r713;
.loc 1 1685 4
add.u64 %r221,%frame,16;
.loc 1 1687 4
mov.u32 %r218,1;
mov.u64 %r225,%r713;
bra $L170;
$L266:
.loc 1 1686 6
setp.ne.u32 %r716,%r104,0;
@ %r716 bra $L171;
mov.u32 %r226,%r104;
.loc 1 1685 4
add.u64 %r221,%frame,16;
.loc 1 1686 6
mov.u32 %r218,1;
.loc 1 1681 4
mov.u64 %r135,%frame;
bra $L133;
$L15:
.loc 1 1786 1
mov.u32 %value,%r237;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfiprintf
.visible .func (.param .u32 %value_out) vfiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 647 12
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 649 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: __sbprintf
.func (.param .u32 %value_out) __sbprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[1200];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u32 %r40;
.reg .u16 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .pred %r53;
.reg .u32 %r57;
.reg .pred %r58;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .pred %r61;
.reg .u16 %r62;
.reg .u16 %r63;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
mov.u64 %r36,%ar2;
mov.u64 %r37,%ar3;
.loc 1 461 14
ld.u16 %r39,[%r35+16];
and.b16 %r38,%r39,-3;
st.u16 [%frame+1040],%r38;
.loc 1 462 15
ld.u32 %r40,[%r35+172];
st.u32 [%frame+1196],%r40;
.loc 1 463 13
ld.u16 %r41,[%r35+18];
st.u16 [%frame+1042],%r41;
.loc 1 464 15
ld.u64 %r42,[%r35+48];
st.u64 [%frame+1072],%r42;
.loc 1 465 14
ld.u64 %r43,[%r35+64];
st.u64 [%frame+1088],%r43;
.loc 1 468 27
st.u64 [%frame+1024],%frame;
.loc 1 468 17
st.u64 [%frame+1048],%frame;
.loc 1 469 27
mov.u32 %r44,1024;
st.u32 [%frame+1036],%r44;
.loc 1 469 17
st.u32 [%frame+1056],%r44;
.loc 1 470 16
mov.u32 %r46,0;
st.u32 [%frame+1064],%r46;
.loc 1 476 8
add.u64 %r51,%frame,1024;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r36;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r37;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r52,[%value_in];
}
mov.u32 %r33,%r52;
.loc 1 477 5
setp.lt.s32 %r53,%r33,0;
@ %r53 bra $L271;
.loc 1 477 18
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r57,[%value_in];
}
.loc 1 477 15
setp.eq.u32 %r58,%r57,0;
.loc 1 478 7
selp.u32 %r33,%r33,-1,%r58;
$L271:
.loc 1 479 5
ld.u16 %r60,[%frame+1040];
and.b16 %r59,%r60,64;
setp.eq.u16 %r61,%r59,0;
@ %r61 bra $L270;
.loc 1 480 14
ld.u16 %r63,[%r35+16];
or.b16 %r62,%r63,64;
st.u16 [%r35+16],%r62;
$L270:
.loc 1 486 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}

/1786           1612277263  0     0     100666  41710     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __svfiscanf_r
.visible .func (.param .u32 %value_out) __svfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfscanf.c"
// BEGIN GLOBAL FUNCTION DECL: vfiscanf
.visible .func (.param .u32 %value_out) vfiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __svfiscanf
.visible .func (.param .u32 %value_out) __svfiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _vfiscanf_r
.visible .func (.param .u32 %value_out) _vfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __srefill_r
.extern .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.extern .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoul_r
.extern .func (.param .u64 %value_out) _strtoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sccl
.extern .func (.param .u64 %value_out) __sccl (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fread_r
.extern .func (.param .u64 %value_out) _fread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _ungetc_r
.extern .func (.param .u32 %value_out) _ungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtoull_r
.extern .func (.param .u64 %value_out) _strtoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoll_r
.extern .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN GLOBAL FUNCTION DEF: __svfiscanf_r
.visible .func (.param .u32 %value_out) __svfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[304];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u64 %r25;
.reg .u32 %r27;
.reg .u64 %r34;
.reg .u32 %r41;
.reg .u64 %r46;
.reg .u32 %r69;
.reg .u64 %r70;
.reg .u64 %r79;
.reg .u32 %r95;
.reg .u64 %r98;
.reg .u64 %r110;
.reg .u32 %r117;
.reg .u64 %r119;
.reg .u64 %r121;
.reg .u64 %r129;
.reg .u64 %r135;
.reg .u64 %r145;
.reg .u32 %r146;
.reg .u32 %r156;
.reg .u32 %r157;
.reg .u64 %r171;
.reg .u64 %r179;
.reg .u64 %r180;
.reg .u64 %r181;
.reg .u32 %r182;
.reg .u32 %r183;
.reg .u32 %r184;
.reg .u64 %r185;
.reg .u32 %r186;
.reg .u32 %r187;
.reg .u64 %r197;
.reg .u32 %r201;
.reg .u64 %r203;
.reg .u32 %r204;
.reg .u64 %r206;
.reg .u64 %r215;
.reg .u64 %r216;
.reg .u32 %r217;
.reg .u64 %r218;
.reg .u64 %r219;
.reg .u32 %r221;
.reg .u32 %r224;
.reg .u64 %r232;
.reg .u64 %r233;
.reg .u64 %r234;
.reg .u64 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r240;
.reg .u64 %r246;
.reg .u64 %r251;
.reg .u64 %r255;
.reg .u64 %r257;
.reg .u64 %r258;
.reg .u64 %r259;
.reg .u32 %r267;
.reg .u64 %r268;
.reg .u32 %r271;
.reg .u64 %r272;
.reg .u64 %r274;
.reg .u32 %r275;
.reg .u32 %r277;
.reg .u32 %r278;
.reg .u64 %r279;
.reg .u64 %r280;
.reg .u64 %r281;
.reg .u64 %r282;
.reg .u16 %r283;
.reg .u16 %r284;
.reg .pred %r285;
.reg .u16 %r286;
.reg .u32 %r288;
.reg .pred %r289;
.reg .pred %r290;
.reg .u64 %r291;
.reg .u32 %r292;
.reg .u64 %r294;
.reg .u16 %r296;
.reg .u16 %r297;
.reg .u32 %r298;
.reg .u16 %r299;
.reg .u32 %r300;
.reg .pred %r301;
.reg .pred %r302;
.reg .u64 %r303;
.reg .u64 %r305;
.reg .u16 %r307;
.reg .u16 %r308;
.reg .u32 %r309;
.reg .u16 %r310;
.reg .u32 %r311;
.reg .pred %r312;
.reg .u32 %r315;
.reg .pred %r316;
.reg .u32 %r317;
.reg .u64 %r318;
.reg .pred %r319;
.reg .u16 %r320;
.reg .pred %r321;
.reg .pred %r323;
.reg .pred %r325;
.reg .pred %r327;
.reg .pred %r329;
.reg .pred %r331;
.reg .pred %r333;
.reg .pred %r335;
.reg .pred %r337;
.reg .pred %r339;
.reg .pred %r341;
.reg .pred %r343;
.reg .pred %r345;
.reg .pred %r347;
.reg .pred %r349;
.reg .pred %r351;
.reg .pred %r353;
.reg .pred %r355;
.reg .pred %r357;
.reg .pred %r359;
.reg .pred %r361;
.reg .pred %r363;
.reg .pred %r365;
.reg .pred %r367;
.reg .pred %r369;
.reg .pred %r371;
.reg .u32 %r372;
.reg .pred %r373;
.reg .u16 %r374;
.reg .u16 %r375;
.reg .pred %r376;
.reg .u32 %r379;
.reg .pred %r380;
.reg .u32 %r381;
.reg .u32 %r382;
.reg .u64 %r383;
.reg .u32 %r385;
.reg .u32 %r386;
.reg .u32 %r388;
.reg .u32 %r389;
.reg .u16 %r390;
.reg .u16 %r391;
.reg .u16 %r392;
.reg .u32 %r393;
.reg .u16 %r394;
.reg .pred %r395;
.reg .u32 %r396;
.reg .pred %r397;
.reg .u16 %r398;
.reg .pred %r399;
.reg .u32 %r400;
.reg .pred %r401;
.reg .u32 %r402;
.reg .pred %r403;
.reg .u32 %r404;
.reg .pred %r405;
.reg .u64 %r407;
.reg .u64 %r408;
.reg .u64 %r409;
.reg .u64 %r410;
.reg .u32 %r411;
.reg .u64 %r414;
.reg .u32 %r415;
.reg .pred %r416;
.reg .u64 %r417;
.reg .u32 %r418;
.reg .pred %r419;
.reg .u32 %r420;
.reg .pred %r421;
.reg .u64 %r422;
.reg .u32 %r423;
.reg .pred %r424;
.reg .u64 %r425;
.reg .u32 %r426;
.reg .pred %r427;
.reg .u32 %r428;
.reg .pred %r429;
.reg .u32 %r432;
.reg .pred %r433;
.reg .u64 %r434;
.reg .u64 %r436;
.reg .u16 %r438;
.reg .u16 %r439;
.reg .u32 %r440;
.reg .u16 %r441;
.reg .u32 %r442;
.reg .pred %r443;
.reg .u32 %r444;
.reg .pred %r445;
.reg .u32 %r448;
.reg .pred %r449;
.reg .u64 %r450;
.reg .u64 %r452;
.reg .u16 %r454;
.reg .u16 %r455;
.reg .u32 %r456;
.reg .u16 %r457;
.reg .u32 %r458;
.reg .pred %r459;
.reg .pred %r460;
.reg .pred %r461;
.reg .pred %r462;
.reg .u32 %r463;
.reg .pred %r464;
.reg .u32 %r465;
.reg .pred %r466;
.reg .u64 %r467;
.reg .u32 %r470;
.reg .pred %r471;
.reg .pred %r472;
.reg .u32 %r473;
.reg .u64 %r475;
.reg .u32 %r476;
.reg .u64 %r478;
.reg .u64 %r479;
.reg .u64 %r482;
.reg .pred %r483;
.reg .u32 %r484;
.reg .pred %r485;
.reg .u64 %r487;
.reg .u64 %r488;
.reg .u32 %r489;
.reg .pred %r490;
.reg .pred %r491;
.reg .u32 %r492;
.reg .u64 %r493;
.reg .pred %r494;
.reg .u32 %r495;
.reg .u64 %r496;
.reg .pred %r497;
.reg .pred %r498;
.reg .u64 %r500;
.reg .u64 %r501;
.reg .u16 %r502;
.reg .u32 %r503;
.reg .pred %r504;
.reg .u32 %r507;
.reg .pred %r508;
.reg .pred %r509;
.reg .u32 %r510;
.reg .u32 %r511;
.reg .u64 %r512;
.reg .u32 %r513;
.reg .pred %r514;
.reg .u32 %r515;
.reg .u32 %r516;
.reg .u64 %r517;
.reg .u32 %r518;
.reg .u64 %r519;
.reg .pred %r520;
.reg .u32 %r521;
.reg .pred %r522;
.reg .u32 %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .u64 %r529;
.reg .u64 %r530;
.reg .u16 %r531;
.reg .u32 %r532;
.reg .pred %r533;
.reg .u64 %r534;
.reg .pred %r535;
.reg .u32 %r536;
.reg .pred %r537;
.reg .u64 %r538;
.reg .u64 %r540;
.reg .u16 %r542;
.reg .u16 %r543;
.reg .u32 %r544;
.reg .u32 %r545;
.reg .pred %r546;
.reg .pred %r547;
.reg .u32 %r548;
.reg .u64 %r549;
.reg .pred %r550;
.reg .u32 %r551;
.reg .u64 %r552;
.reg .pred %r553;
.reg .pred %r554;
.reg .u32 %r557;
.reg .pred %r558;
.reg .u64 %r559;
.reg .u64 %r561;
.reg .u16 %r563;
.reg .u16 %r564;
.reg .u32 %r565;
.reg .u16 %r566;
.reg .u32 %r567;
.reg .pred %r568;
.reg .pred %r569;
.reg .u32 %r570;
.reg .u32 %r571;
.reg .u64 %r572;
.reg .u32 %r573;
.reg .pred %r574;
.reg .u32 %r575;
.reg .u32 %r576;
.reg .u64 %r577;
.reg .u32 %r578;
.reg .u64 %r579;
.reg .pred %r580;
.reg .u64 %r581;
.reg .u32 %r582;
.reg .pred %r583;
.reg .u32 %r586;
.reg .pred %r587;
.reg .u64 %r588;
.reg .u64 %r589;
.reg .u64 %r591;
.reg .u16 %r593;
.reg .u16 %r594;
.reg .u32 %r595;
.reg .u16 %r596;
.reg .u32 %r597;
.reg .pred %r598;
.reg .u64 %r599;
.reg .u32 %r600;
.reg .u64 %r601;
.reg .pred %r602;
.reg .u32 %r603;
.reg .u16 %r604;
.reg .pred %r605;
.reg .pred %r607;
.reg .pred %r609;
.reg .pred %r611;
.reg .u16 %r612;
.reg .u16 %r615;
.reg .u32 %r617;
.reg .u16 %r618;
.reg .pred %r619;
.reg .u64 %r620;
.reg .u64 %r621;
.reg .u64 %r622;
.reg .u64 %r623;
.reg .pred %r625;
.reg .pred %r627;
.reg .pred %r629;
.reg .pred %r631;
.reg .pred %r633;
.reg .pred %r635;
.reg .u32 %r636;
.reg .pred %r637;
.reg .pred %r638;
.reg .u32 %r639;
.reg .pred %r640;
.reg .pred %r641;
.reg .u64 %r642;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u64 %r645;
.reg .pred %r646;
.reg .pred %r647;
.reg .u32 %r648;
.reg .pred %r649;
.reg .u32 %r650;
.reg .pred %r651;
.reg .u32 %r652;
.reg .u32 %r653;
.reg .pred %r654;
.reg .u64 %r655;
.reg .u32 %r658;
.reg .pred %r659;
.reg .pred %r660;
.reg .u32 %r661;
.reg .pred %r662;
.reg .pred %r664;
.reg .u32 %r668;
.reg .u32 %r669;
.reg .pred %r671;
.reg .u32 %r672;
.reg .pred %r673;
.reg .u32 %r674;
.reg .u64 %r677;
.reg .u64 %r680;
.reg .u64 %r681;
.reg .u32 %r682;
.reg .pred %r683;
.reg .u32 %r684;
.reg .pred %r685;
.reg .u64 %r686;
.reg .u32 %r687;
.reg .pred %r688;
.reg .u64 %r689;
.reg .u32 %r690;
.reg .pred %r691;
.reg .u64 %r692;
.reg .pred %r693;
.reg .u64 %r699;
.reg .u64 %r705;
.reg .u64 %r706;
.reg .u64 %r707;
.reg .u64 %r709;
.reg .u32 %r710;
.reg .u32 %r711;
.reg .pred %r712;
.reg .u16 %r713;
.reg .u16 %r714;
.reg .pred %r715;
.reg .u64 %r718;
.reg .u64 %r719;
.reg .u16 %r720;
mov.u64 %r279,%ar0;
mov.u64 %r280,%ar1;
mov.u64 %r281,%ar2;
mov.u64 %r282,%ar3;
.loc 1 591 3
ld.u16 %r284,[%r280+16];
and.b16 %r283,%r284,8192;
setp.ne.u16 %r285,%r283,0;
@ %r285 bra $L2;
.loc 1 589 3
ld.u32 %r22,[%r280+172];
.loc 1 591 3
or.b16 %r286,%r284,8192;
st.u16 [%r280+16],%r286;
and.b32 %r288,%r22,-8193;
st.u32 [%r280+172],%r288;
$L2:
.loc 1 602 12
ld.u8 %r27,[%r281];
.loc 1 611 11
add.u64 %r197,%r281,1;
.loc 1 613 10
setp.eq.u32 %r289,%r27,0;
@ %r289 bra $L109;
mov.u64 %r70,0;
cvt.u32.u64 %r184,%r70;
cvt.u32.u64 %r157,%r70;
cvt.u32.u64 %r278,%r70;
cvta.const.u64 %r718,_ctype_+1;
.loc 1 1342 11
add.u64 %r719,%frame,256;
bra $L4;
$L7:
.loc 1 602 12
ld.u8 %r27,[%r197];
.loc 1 611 11
add.u64 %r197,%r197,1;
.loc 1 613 10
setp.eq.u32 %r290,%r27,0;
@ %r290 bra $L1;
$L4:
.loc 1 615 26
cvt.u32.u32 %r292,%r27;
cvt.u64.u8 %r291,%r292;
add.u64 %r294,%r718,%r291;
.loc 1 615 23
ld.u8 %r720,[%r294];
mov.u16 %r297,%r720;
and.b16 %r296,%r297,8;
cvt.u32.u16 %r298,%r296;
cvt.s32.s8 %r300,%r298;
cvt.u16.u32 %r299,%r300;
setp.eq.u16 %r301,%r299,0;
@ %r301 bra $L5;
.loc 1 619 12
ld.u32 %r41,[%r280+8];
$L10:
.loc 1 619 11
setp.le.s32 %r302,%r41,0;
@ %r302 bra $L6;
$L9:
.loc 1 619 28
ld.u64 %r34,[%r280];
ld.u8 %r303,[%r34];
add.u64 %r305,%r718,%r303;
.loc 1 619 24
ld.u8 %r720,[%r305];
mov.u16 %r308,%r720;
and.b16 %r307,%r308,8;
cvt.u32.u16 %r309,%r307;
cvt.s32.s8 %r311,%r309;
cvt.u16.u32 %r310,%r311;
setp.eq.u16 %r312,%r310,0;
@ ! %r312 bra $L200;
bra $L7;
$L6:
.loc 1 619 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r315,[%value_in];
}
setp.ne.u32 %r316,%r315,0;
@ ! %r316 bra $L9;
bra $L7;
$L200:
.loc 1 621 13
add.u32 %r157,%r157,1;
.loc 1 621 23
ld.u32 %r317,[%r280+8];
add.u32 %r41,%r317,-1;
st.u32 [%r280+8],%r41;
.loc 1 621 33
add.u64 %r318,%r34,1;
st.u64 [%r280],%r318;
.loc 1 619 11
bra $L10;
$L5:
.loc 1 625 10
setp.ne.u32 %r319,%r27,37;
@ %r319 bra $L11;
.loc 1 640 11
ld.u8 %r275,[%r197];
mov.u64 %r25,%r197;
.loc 1 628 13
mov.u32 %r182,0;
.loc 1 627 13
mov.u64 %r129,0;
bra $L12;
$L202:
.loc 1 640 11
ld.u8 %r275,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r197;
.loc 1 663 10
mov.u32 %r182,16;
.loc 1 640 11
mov.u64 %r129,0;
$L12:
.loc 1 640 15
add.u64 %r197,%r25,1;
.loc 1 642 7
cvt.u16.u32 %r320,%r275;
setp.eq.u16 %r321,%r320,100;
@ %r321 bra $L110;
setp.gt.u16 %r323,%r320,100;
@ %r323 bra $L14;
setp.eq.u16 %r325,%r320,76;
@ %r325 bra $L15;
setp.gt.u16 %r327,%r320,76;
@ %r327 bra $L16;
setp.gt.u16 %r329,%r320,57;
@ %r329 bra $L17;
setp.gt.u16 %r331,%r320,47;
@ %r331 bra $L18;
setp.eq.u16 %r333,%r320,37;
@ %r333 bra $L11;
setp.eq.u16 %r335,%r320,42;
@ %r335 bra $L19;
bra $L1;
$L17:
setp.eq.u16 %r337,%r320,68;
@ %r337 bra $L20;
bra $L1;
$L16:
setp.eq.u16 %r339,%r320,91;
@ %r339 bra $L21;
setp.gt.u16 %r341,%r320,91;
@ %r341 bra $L22;
setp.eq.u16 %r343,%r320,79;
@ %r343 bra $L23;
setp.eq.u16 %r345,%r320,88;
@ %r345 bra $L24;
bra $L1;
$L22:
setp.eq.u16 %r347,%r320,99;
@ %r347 bra $L25;
bra $L1;
$L14:
setp.eq.u16 %r349,%r320,111;
@ %r349 bra $L111;
setp.gt.u16 %r351,%r320,111;
@ %r351 bra $L26;
setp.eq.u16 %r353,%r320,108;
@ %r353 bra $L27;
setp.gt.u16 %r355,%r320,108;
@ %r355 bra $L28;
setp.eq.u16 %r357,%r320,104;
@ %r357 bra $L29;
setp.eq.u16 %r359,%r320,105;
@ %r359 bra $L112;
bra $L1;
$L28:
setp.eq.u16 %r361,%r320,110;
@ %r361 bra $L30;
bra $L1;
$L26:
setp.eq.u16 %r363,%r320,115;
@ %r363 bra $L113;
setp.gt.u16 %r365,%r320,115;
@ %r365 bra $L31;
setp.eq.u16 %r367,%r320,112;
@ %r367 bra $L32;
bra $L1;
$L31:
setp.eq.u16 %r369,%r320,117;
@ %r369 bra $L114;
setp.eq.u16 %r371,%r320,120;
@ %r371 bra $L24;
bra $L1;
$L11:
.loc 1 649 11
ld.u32 %r372,[%r280+8];
setp.le.s32 %r373,%r372,0;
@ %r373 bra $L33;
$L36:
.loc 1 651 15
ld.u64 %r46,[%r280];
.loc 1 651 11
ld.u8 %r374,[%r46];
ld.u8 %r375,[%r197+-1];
setp.ne.u16 %r376,%r374,%r375;
@ %r376 bra $L1;
bra $L201;
$L33:
.loc 1 649 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r379,[%value_in];
}
setp.ne.u32 %r380,%r379,0;
@ ! %r380 bra $L36;
bra $L35;
$L201:
.loc 1 653 14
ld.u32 %r382,[%r280+8];
add.u32 %r381,%r382,-1;
st.u32 [%r280+8],%r381;
.loc 1 653 24
add.u64 %r383,%r46,1;
st.u64 [%r280],%r383;
.loc 1 654 13
add.u32 %r157,%r157,1;
bra $L7;
$L19:
.loc 1 660 7
set.u32.ne.u32 %r385,%r182,0;
neg.s32 %r386,%r385;
.loc 1 661 8
set.u32.ne.u64 %r388,%r129,0;
neg.s32 %r389,%r388;
cvt.u16.u32 %r391,%r386;
cvt.u16.u32 %r392,%r389;
or.b16 %r390,%r391,%r392;
cvt.u32.u16 %r393,%r390;
cvt.u16.u8 %r394,%r393;
setp.ne.u16 %r395,%r394,0;
@ ! %r395 bra $L202;
bra $L1;
$L27:
.loc 1 666 14
and.b32 %r396,%r182,15;
.loc 1 666 7
setp.ne.u32 %r397,%r396,0;
@ %r397 bra $L1;
.loc 1 669 8
ld.u8 %r275,[%r25+1];
.loc 1 669 7
cvt.u16.u32 %r398,%r275;
setp.ne.u16 %r399,%r398,108;
@ %r399 bra $L38;
.loc 1 672 14
or.b32 %r182,%r182,2;
.loc 1 640 11
ld.u8 %r275,[%r25+2];
.loc 1 671 8
add.u64 %r25,%r25,2;
bra $L12;
$L38:
.loc 1 676 12
or.b32 %r182,%r182,1;
.loc 1 640 15
mov.u64 %r25,%r197;
bra $L12;
$L15:
.loc 1 679 14
and.b32 %r400,%r182,15;
.loc 1 679 7
setp.ne.u32 %r401,%r400,0;
@ %r401 bra $L1;
.loc 1 681 10
or.b32 %r182,%r182,2;
.loc 1 640 11
ld.u8 %r275,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r197;
.loc 1 682 4
bra $L12;
$L29:
.loc 1 684 14
and.b32 %r402,%r182,15;
.loc 1 684 7
setp.ne.u32 %r403,%r402,0;
@ %r403 bra $L1;
.loc 1 694 12
or.b32 %r182,%r182,4;
.loc 1 640 11
ld.u8 %r275,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r197;
.loc 1 695 4
bra $L12;
$L18:
.loc 1 760 14
and.b32 %r404,%r182,143;
.loc 1 760 7
setp.ne.u32 %r405,%r404,0;
@ %r405 bra $L1;
.loc 1 762 18
shl.b64 %r407,%r129,2;
add.u64 %r408,%r407,%r129;
add.u64 %r409,%r408,%r408;
.loc 1 762 23
cvt.u32.u32 %r411,%r275;
cvt.u64.u8 %r410,%r411;
add.u64 %r246,%r409,%r410;
.loc 1 762 10
add.u64 %r129,%r246,-48;
.loc 1 640 11
ld.u8 %r275,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r197;
.loc 1 763 4
bra $L12;
$L20:
.loc 1 789 10
or.b32 %r182,%r182,1;
.loc 1 793 9
mov.u64 %r70,_strtol_r;
.loc 1 794 9
mov.u32 %r184,10;
.loc 1 792 6
mov.u32 %r201,3;
bra $L13;
$L23:
.loc 1 804 10
or.b32 %r182,%r182,1;
.loc 1 808 9
mov.u64 %r70,_strtoul_r;
.loc 1 809 9
mov.u32 %r184,8;
.loc 1 807 6
mov.u32 %r201,3;
bra $L13;
$L24:
.loc 1 820 10
or.b32 %r182,%r182,512;
.loc 1 822 9
mov.u64 %r70,_strtoul_r;
.loc 1 823 9
mov.u32 %r184,16;
.loc 1 821 6
mov.u32 %r201,3;
.loc 1 824 4
bra $L13;
$L21:
.loc 1 852 21
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r197;
call (%value_in),__sccl,(%out_arg1,%out_arg2);
ld.param.u64 %r414,[%value_in];
}
mov.u64 %r197,%r414;
.loc 1 853 10
or.b32 %r182,%r182,64;
.loc 1 854 6
mov.u32 %r201,1;
.loc 1 855 4
bra $L13;
$L25:
.loc 1 864 10
or.b32 %r182,%r182,64;
.loc 1 865 6
mov.u32 %r201,0;
.loc 1 866 4
bra $L13;
$L32:
.loc 1 869 10
or.b32 %r182,%r182,544;
.loc 1 871 9
mov.u64 %r70,_strtoul_r;
.loc 1 872 9
mov.u32 %r184,16;
.loc 1 870 6
mov.u32 %r201,3;
.loc 1 873 4
bra $L13;
$L30:
.loc 1 876 14
and.b32 %r415,%r182,16;
.loc 1 876 7
setp.ne.u32 %r416,%r415,0;
@ %r416 bra $L7;
.loc 1 888 11
add.u64 %r417,%r282,7;
and.b64 %r257,%r417,-8;
add.u64 %r282,%r257,8;
ld.u64 %r258,[%r257];
.loc 1 886 14
and.b32 %r418,%r182,4;
.loc 1 886 7
setp.eq.u32 %r419,%r418,0;
@ %r419 bra $L40;
.loc 1 889 12
st.u16 [%r258],%r157;
bra $L7;
$L40:
.loc 1 891 19
and.b32 %r420,%r182,1;
.loc 1 891 12
setp.eq.u32 %r421,%r420,0;
@ %r421 bra $L41;
.loc 1 894 12
cvt.s64.s32 %r422,%r157;
st.u64 [%r258],%r422;
bra $L7;
$L41:
.loc 1 897 19
and.b32 %r423,%r182,2;
.loc 1 897 12
setp.eq.u32 %r424,%r423,0;
@ %r424 bra $L42;
.loc 1 900 13
cvt.s64.s32 %r425,%r157;
st.u64 [%r258],%r425;
bra $L7;
$L42:
.loc 1 906 12
st.u32 [%r258],%r157;
bra $L7;
$L110:
.loc 1 642 7
mov.u64 %r70,_strtol_r;
mov.u32 %r184,10;
mov.u32 %r201,3;
bra $L13;
$L111:
.loc 1 808 9
mov.u64 %r70,_strtoul_r;
.loc 1 809 9
mov.u32 %r184,8;
.loc 1 807 6
mov.u32 %r201,3;
bra $L13;
$L112:
.loc 1 799 9
mov.u64 %r70,_strtol_r;
.loc 1 800 9
mov.u32 %r184,0;
.loc 1 798 6
mov.u32 %r201,3;
bra $L13;
$L113:
.loc 1 848 6
mov.u32 %r201,2;
bra $L13;
$L114:
.loc 1 814 9
mov.u64 %r70,_strtoul_r;
.loc 1 815 9
mov.u32 %r184,10;
.loc 1 813 6
mov.u32 %r201,3;
$L13:
.loc 1 917 10
ld.u32 %r426,[%r280+8];
setp.le.s32 %r427,%r426,0;
@ %r427 bra $L43;
$L46:
.loc 1 924 18
and.b32 %r428,%r182,64;
.loc 1 924 10
setp.eq.u32 %r429,%r428,0;
@ ! %r429 bra $L45;
bra $L44;
$L43:
.loc 1 917 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r432,[%value_in];
}
setp.ne.u32 %r433,%r432,0;
@ ! %r433 bra $L46;
bra $L35;
$L44:
.loc 1 926 11
ld.u64 %r240,[%r280];
ld.u8 %r434,[%r240];
add.u64 %r436,%r718,%r434;
.loc 1 926 10
ld.u8 %r720,[%r436];
mov.u16 %r439,%r720;
and.b16 %r438,%r439,8;
cvt.u32.u16 %r440,%r438;
cvt.s32.s8 %r442,%r440;
cvt.u16.u32 %r441,%r442;
setp.eq.u16 %r443,%r441,0;
@ %r443 bra $L45;
$L49:
.loc 1 928 13
add.u32 %r157,%r157,1;
.loc 1 929 12
ld.u32 %r444,[%r280+8];
add.u32 %r69,%r444,-1;
.loc 1 929 11
st.u32 [%r280+8],%r69;
setp.le.s32 %r445,%r69,0;
@ %r445 bra $L47;
.loc 1 930 9
add.u64 %r240,%r240,1;
st.u64 [%r280],%r240;
bra $L48;
$L47:
.loc 1 932 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r448,[%value_in];
}
.loc 1 932 11
setp.ne.u32 %r449,%r448,0;
@ %r449 bra $L35;
.loc 1 926 11
ld.u64 %r240,[%r280];
$L48:
ld.u8 %r450,[%r240];
add.u64 %r452,%r718,%r450;
.loc 1 926 10
ld.u8 %r720,[%r452];
mov.u16 %r455,%r720;
and.b16 %r454,%r455,8;
cvt.u32.u16 %r456,%r454;
cvt.s32.s8 %r458,%r456;
cvt.u16.u32 %r457,%r458;
setp.ne.u16 %r459,%r457,0;
@ %r459 bra $L49;
$L45:
.loc 1 945 7
setp.eq.u32 %r460,%r201,2;
@ %r460 bra $L50;
setp.eq.u32 %r461,%r201,3;
@ %r461 bra $L51;
setp.eq.u32 %r462,%r201,1;
@ %r462 bra $L52;
max.u64 %r179,%r129,1;
.loc 1 1017 14
and.b32 %r463,%r182,16;
.loc 1 1017 7
setp.eq.u32 %r464,%r463,0;
@ %r464 bra $L53;
.loc 1 1019 15
mov.u64 %r185,0;
$L55:
.loc 1 1022 12
ld.u32 %r224,[%r280+8];
.loc 1 1026 16
ld.u64 %r272,[%r280];
.loc 1 1022 8
cvt.u32.u64 %r465,%r179;
setp.ge.s32 %r466,%r224,%r465;
@ %r466 bra $L54;
.loc 1 1024 13
cvt.s64.s32 %r79,%r224;
add.u64 %r185,%r185,%r79;
.loc 1 1025 15
sub.u64 %r179,%r179,%r79;
.loc 1 1026 16
add.u64 %r467,%r272,%r79;
st.u64 [%r280],%r467;
.loc 1 1027 13
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r470,[%value_in];
}
.loc 1 1027 12
setp.eq.u32 %r471,%r470,0;
@ %r471 bra $L55;
.loc 1 1029 9
setp.eq.u64 %r472,%r185,0;
@ ! %r472 bra $L56;
bra $L35;
$L54:
.loc 1 1036 13
add.u64 %r185,%r185,%r179;
.loc 1 1037 16
sub.u32 %r473,%r224,%r465;
st.u32 [%r280+8],%r473;
.loc 1 1038 16
add.u64 %r475,%r272,%r179;
st.u64 [%r280],%r475;
$L56:
.loc 1 1042 14
cvt.u32.u64 %r476,%r185;
add.u32 %r157,%r157,%r476;
bra $L7;
$L53:
.loc 1 1053 5
add.u64 %r237,%r282,7;
and.b64 %r232,%r237,-8;
add.u64 %r282,%r232,8;
.loc 1 1054 12
mov.u64 %r479,1;
ld.u64 %r478,[%r232];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r478;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r479;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r179;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r280;
call (%value_in),_fread_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r482,[%value_in];
}
.loc 1 1055 11
setp.eq.u64 %r483,%r482,0;
@ %r483 bra $L35;
.loc 1 1060 14
cvt.u32.u64 %r484,%r482;
add.u32 %r157,%r157,%r484;
.loc 1 1061 17
add.u32 %r278,%r278,1;
bra $L7;
$L52:
.loc 1 1067 7
setp.ne.u64 %r485,%r129,0;
.loc 1 1068 12
selp.u64 %r129,%r129,-1,%r485;
.loc 1 1146 25
ld.u64 %r268,[%r280];
.loc 1 1146 21
ld.u8 %r487,[%r268];
add.u64 %r488,%frame,%r487;
ld.s8 %r271,[%r488];
.loc 1 1143 14
and.b32 %r489,%r182,16;
.loc 1 1143 7
setp.eq.u32 %r490,%r489,0;
@ %r490 bra $L58;
.loc 1 1146 14
setp.eq.u32 %r491,%r271,0;
@ %r491 bra $L1;
.loc 1 1148 16
ld.u32 %r492,[%r280+8];
add.u32 %r95,%r492,-1;
st.u32 [%r280+8],%r95;
.loc 1 1148 26
add.u64 %r493,%r268,1;
st.u64 [%r280],%r493;
.loc 1 1149 8
add.u64 %r203,%r129,-1;
setp.eq.u64 %r494,%r129,1;
@ ! %r494 bra $L60;
bra $L59;
$L62:
.loc 1 1148 6
add.u32 %r201,%r201,1;
.loc 1 1148 16
ld.u32 %r495,[%r280+8];
add.u32 %r95,%r495,-1;
st.u32 [%r280+8],%r95;
.loc 1 1148 26
add.u64 %r496,%r98,1;
st.u64 [%r280],%r496;
.loc 1 1149 8
add.u64 %r203,%r203,-1;
setp.eq.u64 %r497,%r203,0;
@ %r497 bra $L59;
$L60:
.loc 1 1151 8
setp.le.s32 %r498,%r95,0;
@ %r498 bra $L61;
$L63:
.loc 1 1146 25
ld.u64 %r98,[%r280];
.loc 1 1146 21
ld.u8 %r500,[%r98];
add.u64 %r501,%frame,%r500;
.loc 1 1146 14
ld.s8 %r503,[%r501];
cvt.u16.u32 %r502,%r503;
setp.ne.u16 %r504,%r502,0;
@ %r504 bra $L62;
bra $L59;
$L61:
.loc 1 1151 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r507,[%value_in];
}
setp.eq.u32 %r508,%r507,0;
@ %r508 bra $L63;
$L59:
.loc 1 1160 14
add.u32 %r157,%r157,%r201;
bra $L7;
$L58:
.loc 1 1172 10
add.u64 %r234,%r282,7;
and.b64 %r233,%r234,-8;
add.u64 %r282,%r233,8;
ld.u64 %r219,[%r233];
.loc 1 1173 14
setp.eq.u32 %r509,%r271,0;
@ %r509 bra $L1;
.loc 1 1175 11
ld.u32 %r511,[%r280+8];
add.u32 %r510,%r511,-1;
st.u32 [%r280+8],%r510;
.loc 1 1176 19
add.u64 %r512,%r268,1;
st.u64 [%r280],%r512;
.loc 1 1176 7
add.u64 %r180,%r219,1;
.loc 1 1176 10
ld.u8 %r513,[%r268];
st.u8 [%r219],%r513;
.loc 1 1180 8
setp.eq.u64 %r514,%r129,1;
@ %r514 bra $L64;
mov.u64 %r255,%r180;
bra $L65;
$L67:
.loc 1 1175 11
ld.u32 %r516,[%r280+8];
add.u32 %r515,%r516,-1;
st.u32 [%r280+8],%r515;
.loc 1 1176 19
add.u64 %r517,%r110,1;
st.u64 [%r280],%r517;
add.u64 %r255,%r255,1;
.loc 1 1176 10
ld.u8 %r518,[%r110];
st.u8 [%r180],%r518;
.loc 1 1180 8
add.u64 %r519,%r219,%r129;
setp.eq.u64 %r520,%r519,%r255;
@ %r520 bra $L115;
$L65:
mov.u64 %r180,%r255;
.loc 1 1182 8
ld.u32 %r521,[%r280+8];
setp.gt.s32 %r522,%r521,0;
@ %r522 bra $L66;
.loc 1 1182 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r525,[%value_in];
}
setp.eq.u32 %r526,%r525,0;
@ %r526 bra $L66;
.loc 1 1184 12
setp.eq.u64 %r527,%r219,%r180;
@ ! %r527 bra $L64;
bra $L35;
$L66:
.loc 1 1173 25
ld.u64 %r110,[%r280];
.loc 1 1173 21
ld.u8 %r529,[%r110];
add.u64 %r530,%frame,%r529;
.loc 1 1173 14
ld.s8 %r532,[%r530];
cvt.u16.u32 %r531,%r532;
setp.ne.u16 %r533,%r531,0;
@ %r533 bra $L67;
bra $L64;
$L115:
.loc 1 1176 7
mov.u64 %r180,%r255;
$L64:
.loc 1 1189 14
sub.u64 %r534,%r180,%r219;
.loc 1 1189 10
cvt.u32.u64 %r221,%r534;
.loc 1 1190 11
setp.eq.u32 %r535,%r221,0;
@ %r535 bra $L1;
.loc 1 1192 11
mov.u32 %r536,0;
st.u8 [%r180],%r536;
.loc 1 1196 17
add.u32 %r278,%r278,1;
.loc 1 1197 14
add.u32 %r157,%r157,%r221;
bra $L7;
$L50:
.loc 1 1203 7
setp.ne.u64 %r537,%r129,0;
.loc 1 1204 12
selp.u64 %r129,%r129,-1,%r537;
.loc 1 1146 25
ld.u64 %r259,[%r280];
.loc 1 1283 16
ld.u8 %r538,[%r259];
add.u64 %r540,%r718,%r538;
ld.u8 %r720,[%r540];
mov.u16 %r543,%r720;
and.b16 %r542,%r543,8;
cvt.u32.u16 %r544,%r542;
cvt.s32.s8 %r277,%r544;
.loc 1 1280 14
and.b32 %r545,%r182,16;
.loc 1 1280 7
setp.eq.u32 %r546,%r545,0;
@ %r546 bra $L69;
.loc 1 1283 14
setp.ne.u32 %r547,%r277,0;
@ %r547 bra $L7;
.loc 1 1285 16
ld.u32 %r548,[%r280+8];
add.u32 %r117,%r548,-1;
st.u32 [%r280+8],%r117;
.loc 1 1285 26
add.u64 %r549,%r259,1;
st.u64 [%r280],%r549;
.loc 1 1286 8
add.u64 %r218,%r129,-1;
setp.ne.u64 %r550,%r129,1;
@ %r550 bra $L116;
.loc 1 1291 14
add.u32 %r157,%r157,1;
bra $L7;
$L73:
.loc 1 1285 6
add.u32 %r217,%r217,1;
.loc 1 1285 16
ld.u32 %r551,[%r280+8];
add.u32 %r117,%r551,-1;
st.u32 [%r280+8],%r117;
.loc 1 1285 26
add.u64 %r552,%r121,1;
st.u64 [%r280],%r552;
.loc 1 1286 8
add.u64 %r218,%r218,-1;
setp.ne.u64 %r553,%r218,0;
@ %r553 bra $L71;
.loc 1 1291 14
add.u32 %r157,%r157,%r217;
bra $L7;
$L116:
.loc 1 1285 6
mov.u32 %r217,1;
$L71:
.loc 1 1288 8
setp.gt.s32 %r554,%r117,0;
@ %r554 bra $L72;
.loc 1 1288 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r557,[%value_in];
}
setp.eq.u32 %r558,%r557,0;
@ %r558 bra $L72;
.loc 1 1291 14
add.u32 %r157,%r157,%r217;
bra $L7;
$L72:
.loc 1 1283 16
ld.u64 %r121,[%r280];
ld.u8 %r559,[%r121];
add.u64 %r561,%r718,%r559;
.loc 1 1283 14
ld.u8 %r720,[%r561];
mov.u16 %r564,%r720;
and.b16 %r563,%r564,8;
cvt.u32.u16 %r565,%r563;
cvt.s32.s8 %r567,%r565;
cvt.u16.u32 %r566,%r567;
setp.eq.u16 %r568,%r566,0;
@ %r568 bra $L73;
.loc 1 1291 14
add.u32 %r157,%r157,%r217;
bra $L7;
$L69:
.loc 1 1303 6
add.u64 %r239,%r282,7;
and.b64 %r238,%r239,-8;
add.u64 %r282,%r238,8;
ld.u64 %r216,[%r238];
.loc 1 1305 14
setp.ne.u32 %r569,%r277,0;
@ %r569 bra $L117;
.loc 1 1307 11
ld.u32 %r571,[%r280+8];
add.u32 %r570,%r571,-1;
st.u32 [%r280+8],%r570;
.loc 1 1308 19
add.u64 %r572,%r259,1;
st.u64 [%r280],%r572;
.loc 1 1308 7
add.u64 %r119,%r216,1;
.loc 1 1308 10
ld.u8 %r573,[%r259];
st.u8 [%r216],%r573;
.loc 1 1312 8
setp.eq.u64 %r574,%r129,1;
@ ! %r574 bra $L203;
bra $L118;
$L78:
.loc 1 1307 11
ld.u32 %r576,[%r280+8];
add.u32 %r575,%r576,-1;
st.u32 [%r280+8],%r575;
.loc 1 1308 19
add.u64 %r577,%r135,1;
st.u64 [%r280],%r577;
add.u64 %r251,%r251,1;
.loc 1 1308 10
ld.u8 %r578,[%r135];
st.u8 [%r119],%r578;
.loc 1 1312 8
add.u64 %r579,%r216,%r129;
setp.ne.u64 %r580,%r579,%r251;
@ %r580 bra $L76;
.loc 1 1321 19
sub.u64 %r581,%r251,%r216;
.loc 1 1321 14
cvt.u32.u64 %r267,%r581;
mov.u64 %r119,%r251;
bra $L74;
$L203:
mov.u64 %r251,%r119;
$L76:
mov.u64 %r119,%r251;
.loc 1 1314 8
ld.u32 %r582,[%r280+8];
setp.gt.s32 %r583,%r582,0;
@ %r583 bra $L77;
.loc 1 1314 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r586,[%value_in];
}
setp.eq.u32 %r587,%r586,0;
@ %r587 bra $L77;
.loc 1 1321 19
sub.u64 %r588,%r119,%r216;
.loc 1 1321 14
cvt.u32.u64 %r267,%r588;
bra $L74;
$L77:
.loc 1 1305 16
ld.u64 %r135,[%r280];
ld.u8 %r589,[%r135];
add.u64 %r591,%r718,%r589;
.loc 1 1305 14
ld.u8 %r720,[%r591];
mov.u16 %r594,%r720;
and.b16 %r593,%r594,8;
cvt.u32.u16 %r595,%r593;
cvt.s32.s8 %r597,%r595;
cvt.u16.u32 %r596,%r597;
setp.eq.u16 %r598,%r596,0;
@ %r598 bra $L78;
.loc 1 1321 19
sub.u64 %r599,%r251,%r216;
.loc 1 1321 14
cvt.u32.u64 %r267,%r599;
bra $L74;
$L117:
.loc 1 1303 6
mov.u64 %r119,%r216;
.loc 1 1305 14
mov.u32 %r267,%r545;
bra $L74;
$L118:
.loc 1 1312 8
cvt.u32.u64 %r267,%r129;
$L74:
.loc 1 1317 11
mov.u32 %r600,0;
st.u8 [%r119],%r600;
.loc 1 1321 14
add.u32 %r157,%r157,%r267;
.loc 1 1322 17
add.u32 %r278,%r278,1;
bra $L7;
$L51:
.loc 1 1335 14
add.u64 %r601,%r129,-1;
.loc 1 1335 7
setp.le.u64 %r602,%r601,38;
@ %r602 bra $L119;
.loc 1 1338 19
cvt.u32.u64 %r603,%r129;
add.u32 %r186,%r603,-39;
.loc 1 1339 14
mov.u64 %r129,39;
bra $L79;
$L119:
.loc 1 1329 13
mov.u32 %r186,0;
$L79:
.loc 1 1341 10
or.b32 %r183,%r182,3456;
.loc 1 1330 8
mov.u32 %r187,0;
.loc 1 1342 11
mov.u64 %r181,%r719;
$L97:
.loc 1 1344 15
ld.u64 %r145,[%r280];
.loc 1 1344 12
ld.u8 %r146,[%r145];
cvt.u16.u32 %r604,%r146;
setp.gt.u16 %r605,%r604,57;
@ %r605 bra $L80;
setp.gt.u16 %r607,%r604,55;
@ %r607 bra $L81;
setp.eq.u16 %r609,%r604,48;
@ %r609 bra $L82;
setp.gt.u16 %r611,%r604,48;
@ %r611 bra $L83;
add.u16 %r612,%r604,-43;
and.b16 %r615,%r612,-3;
cvt.u32.u16 %r617,%r615;
cvt.u16.u8 %r618,%r617;
setp.eq.u16 %r619,%r618,0;
@ ! %r619 bra $L85;
bra $L84;
$L83:
.loc 1 1390 19
cvta.const.u64 %r620,basefix$0;
cvt.s64.s32 %r621,%r184;
add.u64 %r622,%r621,%r621;
add.u64 %r623,%r620,%r622;
ld.s16 %r184,[%r623];
.loc 1 1391 11
and.b32 %r183,%r183,-2945;
.loc 1 1392 5
bra $L86;
$L80:
setp.gt.u16 %r625,%r604,102;
@ %r625 bra $L87;
setp.gt.u16 %r627,%r604,96;
@ %r627 bra $L88;
setp.gt.u16 %r629,%r604,70;
@ %r629 bra $L89;
setp.gt.u16 %r631,%r604,64;
@ ! %r631 bra $L85;
bra $L88;
$L89:
setp.eq.u16 %r633,%r604,88;
@ %r633 bra $L90;
bra $L85;
$L87:
setp.eq.u16 %r635,%r604,120;
@ %r635 bra $L90;
bra $L85;
$L82:
.loc 1 1361 18
and.b32 %r636,%r183,2048;
.loc 1 1361 8
setp.eq.u32 %r637,%r636,0;
@ %r637 bra $L86;
.loc 1 1363 8
setp.ne.u32 %r638,%r184,0;
@ %r638 bra $L91;
.loc 1 1366 15
or.b32 %r183,%r183,512;
.loc 1 1365 14
mov.u32 %r184,8;
$L91:
.loc 1 1368 15
and.b32 %r639,%r183,1024;
.loc 1 1368 8
setp.eq.u32 %r640,%r639,0;
@ %r640 bra $L92;
.loc 1 1370 15
and.b32 %r183,%r183,-1409;
.loc 1 1371 9
bra $L86;
$L92:
.loc 1 1373 11
and.b32 %r183,%r183,-897;
.loc 1 1374 8
setp.eq.u32 %r641,%r186,0;
@ %r641 bra $L93;
.loc 1 1376 19
add.u32 %r186,%r186,-1;
.loc 1 1377 14
add.u64 %r129,%r129,1;
$L93:
.loc 1 1379 5
add.u32 %r187,%r187,1;
.loc 1 1380 5
bra $L94;
$L81:
.loc 1 1397 19
cvta.const.u64 %r642,basefix$0;
cvt.s64.s32 %r643,%r184;
add.u64 %r644,%r643,%r643;
add.u64 %r645,%r642,%r644;
ld.s16 %r184,[%r645];
.loc 1 1398 8
setp.le.s32 %r646,%r184,8;
@ %r646 bra $L85;
.loc 1 1400 11
and.b32 %r183,%r183,-2945;
.loc 1 1401 5
bra $L86;
$L88:
.loc 1 1417 8
setp.le.s32 %r647,%r184,10;
@ %r647 bra $L85;
.loc 1 1419 11
and.b32 %r183,%r183,-2945;
.loc 1 1420 5
bra $L86;
$L84:
.loc 1 1425 15
and.b32 %r648,%r183,128;
.loc 1 1425 8
setp.eq.u32 %r649,%r648,0;
@ %r649 bra $L85;
.loc 1 1427 15
and.b32 %r183,%r183,-129;
.loc 1 1428 9
bra $L86;
$L90:
.loc 1 1435 16
and.b32 %r650,%r183,1536;
.loc 1 1435 8
setp.ne.u32 %r651,%r650,512;
@ %r651 bra $L85;
.loc 1 1438 15
and.b32 %r204,%r183,-513;
.loc 1 1442 15
or.b32 %r183,%r204,1280;
.loc 1 1437 14
mov.u32 %r184,16;
$L86:
.loc 1 1457 13
cvt.u32.u32 %r652,%r146;
st.u8 [%r181],%r652;
.loc 1 1457 10
add.u64 %r181,%r181,1;
$L94:
.loc 1 1459 12
ld.u32 %r653,[%r280+8];
add.u32 %r156,%r653,-1;
.loc 1 1459 11
st.u32 [%r280+8],%r156;
setp.le.s32 %r654,%r156,0;
@ %r654 bra $L95;
.loc 1 1460 9
add.u64 %r655,%r145,1;
st.u64 [%r280],%r655;
bra $L96;
$L95:
.loc 1 1462 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r280;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r658,[%value_in];
}
.loc 1 1462 11
setp.ne.u32 %r659,%r658,0;
@ %r659 bra $L85;
$L96:
.loc 1 1342 30
add.u64 %r129,%r129,-1;
.loc 1 1342 4
setp.ne.u64 %r660,%r129,0;
@ %r660 bra $L97;
$L85:
.loc 1 1473 14
and.b32 %r661,%r183,256;
.loc 1 1473 7
setp.eq.u32 %r662,%r661,0;
@ %r662 bra $L98;
.loc 1 1475 11
setp.le.u64 %r664,%r181,%r719;
@ %r664 bra $L99;
.loc 1 1476 3
add.u64 %r206,%r181,-1;
ld.s8 %r668,[%r181+-1];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r668;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r280;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r669,[%value_in];
}
mov.u64 %r181,%r206;
$L99:
.loc 1 1477 11
setp.eq.u64 %r671,%r181,%r719;
@ %r671 bra $L1;
$L98:
.loc 1 1480 15
and.b32 %r672,%r183,16;
.loc 1 1480 7
setp.ne.u32 %r673,%r672,0;
@ %r673 bra $L100;
.loc 1 1484 11
cvt.u32.u32 %r674,%r672;
st.u8 [%r181],%r674;
.loc 1 1485 15
mov.u64 %r677,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r719;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r677;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r184;
call (%value_in),%r70,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r680,[%value_in];
}
.loc 1 888 11
add.u64 %r681,%r282,7;
and.b64 %r274,%r681,-8;
add.u64 %r282,%r274,8;
.loc 1 1486 18
and.b32 %r682,%r183,32;
.loc 1 1486 11
setp.eq.u32 %r683,%r682,0;
@ %r683 bra $L101;
.loc 1 1488 12
ld.u64 %r215,[%r274];
.loc 1 1498 11
st.u64 [%r215],%r680;
bra $L102;
$L101:
.loc 1 1507 23
and.b32 %r684,%r183,4;
.loc 1 1507 16
setp.eq.u32 %r685,%r684,0;
@ %r685 bra $L103;
.loc 1 1510 9
ld.u64 %r686,[%r274];
st.u16 [%r686],%r680;
bra $L102;
$L103:
.loc 1 1512 23
and.b32 %r687,%r183,1;
.loc 1 1512 16
setp.eq.u32 %r688,%r687,0;
@ %r688 bra $L104;
.loc 1 1515 9
ld.u64 %r689,[%r274];
st.u64 [%r689],%r680;
bra $L102;
$L104:
.loc 1 1518 23
and.b32 %r690,%r183,2;
.loc 1 1518 16
setp.eq.u32 %r691,%r690,0;
@ %r691 bra $L105;
.loc 1 1521 8
mov.u64 %r692,_strtoul_r;
setp.ne.u64 %r693,%r70,%r692;
@ %r693 bra $L106;
.loc 1 1522 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r719;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r677;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r184;
call (%value_in),_strtoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r699,[%value_in];
}
.loc 1 1526 10
mov.u64 %r171,%r699;
bra $L107;
$L106:
.loc 1 1524 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r279;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r719;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r677;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r184;
call (%value_in),_strtoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r705,[%value_in];
}
mov.u64 %r171,%r705;
$L107:
.loc 1 1526 10
ld.u64 %r706,[%r274];
st.u64 [%r706],%r171;
bra $L102;
$L105:
.loc 1 1532 9
ld.u64 %r707,[%r274];
st.u32 [%r707],%r680;
$L102:
.loc 1 1534 17
add.u32 %r278,%r278,1;
$L100:
.loc 1 1536 15
sub.u64 %r709,%r181,%r719;
.loc 1 1536 10
add.u32 %r710,%r187,%r157;
cvt.u32.u64 %r711,%r709;
add.u32 %r157,%r710,%r711;
.loc 1 1537 4
bra $L7;
$L35:
.loc 1 1905 63
setp.eq.u32 %r712,%r278,0;
@ %r712 bra $L120;
.loc 1 1905 25
ld.u16 %r714,[%r280+16];
and.b16 %r713,%r714,64;
setp.ne.u16 %r715,%r713,0;
.loc 1 1905 63
selp.u32 %r278,-1,%r278,%r715;
bra $L1;
$L109:
.loc 1 613 10
mov.u32 %r278,%r27;
bra $L1;
$L120:
.loc 1 1905 63
mov.u32 %r278,-1;
$L3:
$L108:
$L1:
.loc 1 1914 1
mov.u32 %value,%r278;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfiscanf
.visible .func (.param .u32 %value_out) vfiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 231 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 233 3
setp.eq.u64 %r28,%r23,0;
@ %r28 bra $L205;
ld.u32 %r29,[%r23+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L205;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L205:
.loc 1 234 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 235 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __svfiscanf
.visible .func (.param .u32 %value_out) __svfiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 242 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 243 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vfiscanf_r
.visible .func (.param .u32 %value_out) _vfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 253 3
setp.eq.u64 %r28,%r24,0;
@ %r28 bra $L211;
ld.u32 %r29,[%r24+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L211;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call __sinit,(%out_arg1);
}
$L211:
.loc 1 254 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 255 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
/1804           1612277263  0     0     100666  50793     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _vfiwprintf_r
.visible .func (.param .u32 %value_out) _vfiwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfwprintf.c"
// BEGIN GLOBAL FUNCTION DECL: vfiwprintf
.visible .func (.param .u32 %value_out) vfiwprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.extern .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sprint_r
.extern .func (.param .u32 %value_out) __sprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: btowc
.extern .func (.param .u32 %value_out) btowc (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcslen
.extern .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 4 .u32 $LC0[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC1
.const .align 4 .u32 $LC1[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC2
.const .align 4 .u32 $LC2[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: zeroes$0
.const .align 4 .u32 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 4 .u32 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// BEGIN GLOBAL FUNCTION DEF: _vfiwprintf_r
.visible .func (.param .u32 %value_out) _vfiwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[1248];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u64 %r36;
.reg .u64 %r38;
.reg .u32 %r41;
.reg .u32 %r61;
.reg .u64 %r63;
.reg .u32 %r86;
.reg .u32 %r114;
.reg .u32 %r115;
.reg .u32 %r127;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u64 %r133;
.reg .u64 %r141;
.reg .u64 %r145;
.reg .u64 %r148;
.reg .u32 %r149;
.reg .u64 %r154;
.reg .u64 %r155;
.reg .u32 %r156;
.reg .u32 %r163;
.reg .u64 %r164;
.reg .u32 %r165;
.reg .u32 %r166;
.reg .u64 %r167;
.reg .u32 %r168;
.reg .u32 %r169;
.reg .u32 %r170;
.reg .u64 %r171;
.reg .u32 %r172;
.reg .u64 %r173;
.reg .u64 %r174;
.reg .u32 %r175;
.reg .u64 %r178;
.reg .u32 %r184;
.reg .u64 %r185;
.reg .u32 %r186;
.reg .u32 %r187;
.reg .u64 %r189;
.reg .u32 %r190;
.reg .u64 %r194;
.reg .u64 %r196;
.reg .u64 %r197;
.reg .u64 %r198;
.reg .u64 %r199;
.reg .u64 %r200;
.reg .u64 %r204;
.reg .u64 %r207;
.reg .u64 %r210;
.reg .u32 %r211;
.reg .u32 %r214;
.reg .u64 %r229;
.reg .u64 %r230;
.reg .u64 %r231;
.reg .u64 %r232;
.reg .u64 %r233;
.reg .u64 %r234;
.reg .u64 %r235;
.reg .u64 %r236;
.reg .u64 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r240;
.reg .u64 %r241;
.reg .u64 %r242;
.reg .u64 %r243;
.reg .u64 %r244;
.reg .u64 %r245;
.reg .u64 %r246;
.reg .u64 %r247;
.reg .u32 %r248;
.reg .u64 %r250;
.reg .u32 %r251;
.reg .u64 %r253;
.reg .u64 %r255;
.reg .u64 %r256;
.reg .u32 %r257;
.reg .u32 %r258;
.reg .u64 %r267;
.reg .u64 %r268;
.reg .u64 %r269;
.reg .u32 %r270;
.reg .u32 %r271;
.reg .u64 %r272;
.reg .u32 %r274;
.reg .u64 %r276;
.reg .u64 %r277;
.reg .u64 %r278;
.reg .u64 %r280;
.reg .u32 %r281;
.reg .u32 %r282;
.reg .u32 %r283;
.reg .u64 %r284;
.reg .u64 %r285;
.reg .u64 %r286;
.reg .u64 %r287;
.reg .pred %r292;
.reg .u32 %r293;
.reg .pred %r294;
.reg .u16 %r296;
.reg .u16 %r297;
.reg .pred %r298;
.reg .u16 %r299;
.reg .u32 %r302;
.reg .u16 %r303;
.reg .u16 %r304;
.reg .pred %r305;
.reg .u64 %r306;
.reg .pred %r307;
.reg .u32 %r310;
.reg .pred %r311;
.reg .u16 %r312;
.reg .u16 %r313;
.reg .pred %r314;
.reg .u16 %r315;
.reg .pred %r316;
.reg .u16 %r317;
.reg .u32 %r319;
.reg .u64 %r321;
.reg .u64 %r322;
.reg .u32 %r323;
.reg .u32 %r325;
.reg .u64 %r330;
.reg .u32 %r331;
.reg .pred %r332;
.reg .u32 %r336;
.reg .pred %r337;
.reg .u16 %r338;
.reg .u16 %r339;
.reg .pred %r340;
.reg .u16 %r341;
.reg .u16 %r342;
.reg .u64 %r344;
.reg .u32 %r345;
.reg .u32 %r347;
.reg .u32 %r348;
.reg .u32 %r350;
.reg .u32 %r351;
.reg .u16 %r352;
.reg .u16 %r353;
.reg .u16 %r354;
.reg .u32 %r355;
.reg .u16 %r356;
.reg .pred %r357;
.reg .u32 %r359;
.reg .u32 %r360;
.reg .u32 %r362;
.reg .u32 %r363;
.reg .u16 %r364;
.reg .u16 %r365;
.reg .u16 %r366;
.reg .u32 %r367;
.reg .u16 %r368;
.reg .pred %r369;
.reg .u64 %r370;
.reg .u64 %r372;
.reg .pred %r373;
.reg .u64 %r374;
.reg .u64 %r375;
.reg .u64 %r376;
.reg .u32 %r377;
.reg .pred %r378;
.reg .u32 %r383;
.reg .pred %r384;
.reg .pred %r385;
.reg .u32 %r386;
.reg .pred %r387;
.reg .pred %r388;
.reg .pred %r389;
.reg .pred %r390;
.reg .pred %r391;
.reg .pred %r392;
.reg .pred %r393;
.reg .pred %r394;
.reg .pred %r395;
.reg .pred %r396;
.reg .pred %r397;
.reg .pred %r398;
.reg .pred %r399;
.reg .u32 %r400;
.reg .pred %r401;
.reg .pred %r402;
.reg .pred %r403;
.reg .pred %r404;
.reg .pred %r405;
.reg .pred %r406;
.reg .pred %r407;
.reg .pred %r408;
.reg .pred %r409;
.reg .pred %r410;
.reg .pred %r411;
.reg .pred %r412;
.reg .pred %r413;
.reg .pred %r414;
.reg .pred %r415;
.reg .pred %r416;
.reg .pred %r417;
.reg .pred %r418;
.reg .pred %r419;
.reg .u32 %r420;
.reg .pred %r421;
.reg .u32 %r423;
.reg .u32 %r424;
.reg .u32 %r425;
.reg .u32 %r426;
.reg .u32 %r427;
.reg .pred %r428;
.reg .u32 %r430;
.reg .u32 %r431;
.reg .u32 %r432;
.reg .u32 %r433;
.reg .u32 %r434;
.reg .pred %r435;
.reg .pred %r436;
.reg .pred %r437;
.reg .u32 %r438;
.reg .pred %r439;
.reg .u32 %r440;
.reg .u32 %r441;
.reg .pred %r442;
.reg .u16 %r443;
.reg .u16 %r444;
.reg .u32 %r445;
.reg .u32 %r446;
.reg .pred %r448;
.reg .u32 %r449;
.reg .pred %r450;
.reg .u32 %r451;
.reg .pred %r452;
.reg .u32 %r453;
.reg .pred %r454;
.reg .pred %r459;
.reg .u32 %r460;
.reg .pred %r461;
.reg .u64 %r462;
.reg .u32 %r463;
.reg .pred %r464;
.reg .u64 %r465;
.reg .u64 %r466;
.reg .u32 %r467;
.reg .pred %r468;
.reg .u64 %r469;
.reg .u64 %r470;
.reg .u32 %r471;
.reg .pred %r472;
.reg .u64 %r473;
.reg .u64 %r474;
.reg .u32 %r475;
.reg .pred %r476;
.reg .u32 %r477;
.reg .pred %r478;
.reg .u32 %r479;
.reg .pred %r480;
.reg .u16 %r481;
.reg .u32 %r482;
.reg .u32 %r483;
.reg .u32 %r484;
.reg .pred %r485;
.reg .pred %r486;
.reg .pred %r487;
.reg .u32 %r489;
.reg .u64 %r491;
.reg .pred %r492;
.reg .u64 %r494;
.reg .pred %r495;
.reg .u64 %r498;
.reg .u64 %r499;
.reg .u64 %r500;
.reg .pred %r501;
.reg .u16 %r502;
.reg .u16 %r503;
.reg .u64 %r505;
.reg .u32 %r506;
.reg .pred %r507;
.reg .u32 %r508;
.reg .u64 %r510;
.reg .u32 %r511;
.reg .u64 %r512;
.reg .u64 %r514;
.reg .u32 %r515;
.reg .pred %r516;
.reg .u32 %r518;
.reg .u64 %r520;
.reg .u64 %r521;
.reg .pred %r522;
.reg .u64 %r523;
.reg .u64 %r525;
.reg .u32 %r526;
.reg .u64 %r528;
.reg .u32 %r529;
.reg .pred %r530;
.reg .u32 %r531;
.reg .pred %r532;
.reg .u32 %r533;
.reg .pred %r534;
.reg .u16 %r535;
.reg .pred %r536;
.reg .u32 %r537;
.reg .pred %r538;
.reg .u32 %r539;
.reg .pred %r540;
.reg .u32 %r541;
.reg .pred %r542;
.reg .u16 %r543;
.reg .u32 %r544;
.reg .pred %r545;
.reg .pred %r546;
.reg .u32 %r547;
.reg .u32 %r548;
.reg .pred %r549;
.reg .u32 %r551;
.reg .u32 %r552;
.reg .u32 %r554;
.reg .u32 %r555;
.reg .u16 %r556;
.reg .u16 %r557;
.reg .u16 %r558;
.reg .u32 %r559;
.reg .u16 %r560;
.reg .pred %r561;
.reg .pred %r562;
.reg .pred %r563;
.reg .u32 %r564;
.reg .u32 %r565;
.reg .pred %r566;
.reg .u32 %r568;
.reg .u32 %r569;
.reg .u16 %r571;
.reg .u16 %r572;
.reg .u16 %r574;
.reg .u16 %r575;
.reg .u32 %r577;
.reg .u16 %r578;
.reg .pred %r579;
.reg .u64 %r581;
.reg .u64 %r583;
.reg .u32 %r584;
.reg .u64 %r586;
.reg .u64 %r588;
.reg .pred %r589;
.reg .u32 %r590;
.reg .u32 %r591;
.reg .u64 %r593;
.reg .u32 %r594;
.reg .u32 %r595;
.reg .pred %r598;
.reg .u64 %r600;
.reg .u64 %r602;
.reg .u64 %r603;
.reg .u64 %r604;
.reg .u64 %r605;
.reg .u32 %r606;
.reg .pred %r607;
.reg .u64 %r609;
.reg .u64 %r611;
.reg .pred %r612;
.reg .pred %r613;
.reg .u32 %r614;
.reg .pred %r615;
.reg .pred %r616;
.reg .u32 %r617;
.reg .pred %r618;
.reg .pred %r620;
.reg .pred %r621;
.reg .pred %r622;
.reg .u64 %r624;
.reg .pred %r625;
.reg .u32 %r630;
.reg .pred %r631;
.reg .pred %r632;
.reg .u64 %r634;
.reg .pred %r635;
.reg .u32 %r640;
.reg .pred %r641;
.reg .u32 %r642;
.reg .pred %r643;
.reg .u64 %r645;
.reg .pred %r646;
.reg .u32 %r651;
.reg .pred %r652;
.reg .u64 %r655;
.reg .pred %r656;
.reg .u32 %r661;
.reg .pred %r662;
.reg .pred %r663;
.reg .pred %r664;
.reg .pred %r665;
.reg .u64 %r667;
.reg .pred %r668;
.reg .u32 %r673;
.reg .pred %r674;
.reg .pred %r675;
.reg .u64 %r677;
.reg .pred %r678;
.reg .u32 %r683;
.reg .pred %r684;
.reg .pred %r685;
.reg .pred %r686;
.reg .u64 %r688;
.reg .pred %r689;
.reg .u32 %r694;
.reg .pred %r695;
.reg .pred %r696;
.reg .u64 %r698;
.reg .pred %r699;
.reg .u32 %r704;
.reg .pred %r705;
.reg .u32 %r706;
.reg .u64 %r707;
.reg .pred %r708;
.reg .u32 %r713;
.reg .pred %r714;
.reg .u32 %r715;
.reg .pred %r716;
.reg .pred %r717;
.reg .pred %r718;
.reg .u64 %r720;
.reg .pred %r721;
.reg .u32 %r726;
.reg .pred %r727;
.reg .pred %r728;
.reg .u64 %r730;
.reg .pred %r731;
.reg .u32 %r736;
.reg .pred %r737;
.reg .u32 %r738;
.reg .pred %r739;
.reg .u32 %r740;
.reg .pred %r741;
.reg .u32 %r746;
.reg .pred %r747;
.reg .u64 %r750;
.reg .pred %r751;
.reg .u64 %r755;
.reg .u32 %r756;
.reg .pred %r758;
.reg .u16 %r761;
.reg .u16 %r762;
.reg .pred %r763;
.reg .pred %r765;
.reg .pred %r766;
.reg .u32 %r768;
.reg .u32 %r769;
.reg .u32 %r771;
.reg .u32 %r772;
.reg .u16 %r773;
.reg .u16 %r774;
.reg .u16 %r775;
.reg .u32 %r776;
.reg .u16 %r777;
.reg .pred %r778;
.reg .pred %r779;
.reg .pred %r781;
.reg .u64 %r782;
.reg .u64 %r783;
.reg .u64 %r784;
.reg .u64 %r801;
.reg .u64 %r802;
.reg .u64 %r803;
.reg .u64 %r804;
.reg .u64 %r805;
.reg .u32 %r806;
mov.u64 %r284,%ar0;
mov.u64 %r285,%ar1;
mov.u64 %r286,%ar2;
mov.u64 %r287,%ar3;
.loc 1 591 2
setp.eq.u64 %r292,%r284,0;
@ %r292 bra $L2;
ld.u32 %r293,[%r284+80];
setp.ne.u32 %r294,%r293,0;
@ %r294 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 594 2
ld.s16 %r24,[%r285+16];
cvt.u16.u32 %r297,%r24;
and.b16 %r296,%r297,8192;
setp.ne.u16 %r298,%r296,0;
@ %r298 bra $L3;
.loc 1 592 2
ld.u32 %r23,[%r285+172];
.loc 1 594 2
or.b16 %r299,%r297,8192;
cvt.s32.s16 %r24,%r299;
st.u16 [%r285+16],%r299;
or.b32 %r302,%r23,8192;
st.u32 [%r285+172],%r302;
$L3:
.loc 1 597 5
cvt.u16.u32 %r304,%r24;
and.b16 %r303,%r304,8;
setp.eq.u16 %r305,%r303,0;
@ %r305 bra $L4;
.loc 1 597 6
ld.u64 %r306,[%r285+24];
setp.ne.u64 %r307,%r306,0;
@ %r307 bra $L5;
$L4:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
call (%value_in),__swsetup_r,(%out_arg1,%out_arg2);
ld.param.u32 %r310,[%value_in];
}
setp.eq.u32 %r311,%r310,0;
@ %r311 bra $L6;
$L147:
.loc 1 599 10
mov.u32 %r283,-1;
bra $L1;
$L6:
.loc 1 604 9
ld.s16 %r24,[%r285+16];
$L5:
.loc 1 604 5
cvt.u16.u32 %r313,%r24;
and.b16 %r312,%r313,26;
setp.ne.u16 %r314,%r312,10;
@ %r314 bra $L8;
.loc 1 604 60
ld.u16 %r315,[%r285+18];
setp.lt.s16 %r316,%r315,0;
@ %r316 bra $L8;
.loc 1 187 14
and.b16 %r317,%r313,-3;
st.u16 [%frame+1040],%r317;
.loc 1 188 15
ld.u32 %r319,[%r285+172];
st.u32 [%frame+1196],%r319;
.loc 1 189 13
st.u16 [%frame+1042],%r315;
.loc 1 190 15
ld.u64 %r321,[%r285+48];
st.u64 [%frame+1072],%r321;
.loc 1 191 14
ld.u64 %r322,[%r285+64];
st.u64 [%frame+1088],%r322;
.loc 1 194 27
st.u64 [%frame+1024],%frame;
.loc 1 194 17
st.u64 [%frame+1048],%frame;
.loc 1 195 27
mov.u32 %r323,1024;
st.u32 [%frame+1036],%r323;
.loc 1 195 17
st.u32 [%frame+1056],%r323;
.loc 1 196 16
mov.u32 %r325,0;
st.u32 [%frame+1064],%r325;
.loc 1 202 8
add.u64 %r330,%frame,1024;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r330;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r286;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r287;
call (%value_in),_vfiwprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r331,[%value_in];
}
mov.u32 %r283,%r331;
.loc 1 203 5
setp.lt.s32 %r332,%r283,0;
@ %r332 bra $L9;
.loc 1 203 18
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r330;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r336,[%value_in];
}
.loc 1 203 15
setp.eq.u32 %r337,%r336,0;
.loc 1 204 7
selp.u32 %r283,%r283,-1,%r337;
$L9:
.loc 1 205 5
ld.u16 %r339,[%frame+1040];
and.b16 %r338,%r339,64;
setp.eq.u16 %r340,%r338,0;
@ %r340 bra $L1;
.loc 1 206 14
ld.u16 %r342,[%r285+16];
or.b16 %r341,%r342,64;
st.u16 [%r285+16],%r341;
.loc 1 607 11
bra $L1;
$L8:
.loc 1 626 14
add.u64 %r784,%frame,1024;
st.u64 [%frame+1200],%r784;
.loc 1 627 16
mov.u64 %r344,0;
st.u64 [%frame+1216],%r344;
.loc 1 628 17
cvt.u32.u64 %r345,%r344;
st.u32 [%frame+1208],%r345;
.loc 1 626 21
mov.u64 %r171,%r784;
.loc 1 435 11
mov.u64 %r38,%r344;
.loc 1 630 6
cvt.u32.u64 %r283,%r38;
.loc 1 647 4
add.u64 %r801,%frame,1200;
.loc 1 1438 4
add.u64 %r802,%frame,1224;
.loc 1 1436 4
add.u64 %r803,%frame,1232;
.loc 1 1424 10
mov.u64 %r804,%r38;
.loc 1 1319 7
add.u64 %r805,%frame,160;
.loc 1 656 9
cvt.u32.u64 %r806,%r38;
$L11:
.loc 1 644 24
ld.u32 %r186,[%r286];
.loc 1 644 38
set.u32.ne.u32 %r347,%r186,37;
neg.s32 %r348,%r347;
set.u32.ne.u32 %r350,%r186,0;
neg.s32 %r351,%r350;
cvt.u16.u32 %r353,%r348;
cvt.u16.u32 %r354,%r351;
and.b16 %r352,%r353,%r354;
.loc 1 644 23
cvt.u32.u16 %r355,%r352;
cvt.u16.u8 %r356,%r355;
setp.eq.u16 %r357,%r356,0;
@ %r357 bra $L151;
mov.u64 %r189,%r286;
$L13:
mov.u64 %r200,%r189;
.loc 1 645 21
add.u64 %r189,%r189,4;
.loc 1 644 24
ld.u32 %r186,[%r189];
.loc 1 644 38
set.u32.ne.u32 %r359,%r186,0;
neg.s32 %r360,%r359;
set.u32.ne.u32 %r362,%r186,37;
neg.s32 %r363,%r362;
cvt.u16.u32 %r365,%r360;
cvt.u16.u32 %r366,%r363;
and.b16 %r364,%r365,%r366;
.loc 1 644 23
cvt.u32.u16 %r367,%r364;
cvt.u16.u8 %r368,%r367;
setp.ne.u16 %r369,%r368,0;
@ %r369 bra $L13;
.loc 1 646 16
sub.u64 %r370,%r189,%r286;
shr.s64 %r372,%r370,2;
.loc 1 646 10
cvt.u32.u64 %r187,%r372;
.loc 1 646 6
setp.eq.u32 %r373,%r187,0;
@ %r373 bra $L12;
.loc 1 647 4
st.u64 [%r171],%r286;
cvt.s64.s32 %r374,%r187;
shl.b64 %r36,%r374,2;
st.u64 [%r171+8],%r36;
ld.u64 %r376,[%frame+1216];
add.u64 %r375,%r376,%r36;
st.u64 [%frame+1216],%r375;
ld.u32 %r377,[%frame+1208];
add.u32 %r41,%r377,1;
st.u32 [%frame+1208],%r41;
setp.gt.s32 %r378,%r41,7;
@ %r378 bra $L14;
add.u64 %r171,%r171,16;
bra $L15;
$L14:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r383,[%value_in];
}
setp.ne.u32 %r384,%r383,0;
@ %r384 bra $L16;
mov.u64 %r171,%r784;
$L15:
.loc 1 648 8
add.u32 %r283,%r283,%r187;
.loc 1 650 21
ld.u32 %r186,[%r200+4];
bra $L12;
$L151:
.loc 1 644 23
mov.u64 %r189,%r286;
$L12:
.loc 1 650 20
setp.eq.u32 %r385,%r186,0;
@ %r385 bra $L17;
.loc 1 653 6
add.u64 %r286,%r189,4;
.loc 1 659 8
mov.u32 %r386,0;
st.u32 [%frame+1232],%r386;
.loc 1 671 14
ld.u32 %r282,[%r189+4];
mov.u32 %r172,%r386;
mov.u32 %r175,%r386;
.loc 1 658 8
mov.u32 %r166,-1;
.loc 1 657 9
mov.u32 %r165,%r386;
.loc 1 655 9
mov.u32 %r115,%r386;
bra $L18;
$L152:
.loc 1 747 10
mov.u64 %r287,%r235;
$L18:
.loc 1 671 18
add.u64 %r286,%r286,4;
.loc 1 671 12
mov.u32 %r163,%r282;
$L19:
.loc 1 672 11
setp.eq.u32 %r387,%r163,100;
@ %r387 bra $L20;
setp.gt.u32 %r388,%r163,100;
@ %r388 bra $L21;
setp.eq.u32 %r389,%r163,46;
@ %r389 bra $L22;
setp.gt.u32 %r390,%r163,46;
@ %r390 bra $L23;
setp.eq.u32 %r391,%r163,42;
@ %r391 bra $L24;
setp.gt.u32 %r392,%r163,42;
@ %r392 bra $L25;
setp.eq.u32 %r393,%r163,32;
@ %r393 bra $L26;
setp.eq.u32 %r394,%r163,35;
@ %r394 bra $L27;
bra $L246;
$L25:
setp.eq.u32 %r395,%r163,43;
@ %r395 bra $L29;
setp.eq.u32 %r396,%r163,45;
@ %r396 bra $L30;
bra $L31;
$L23:
setp.eq.u32 %r397,%r163,88;
@ %r397 bra $L32;
setp.gt.u32 %r398,%r163,88;
@ %r398 bra $L33;
setp.eq.u32 %r399,%r163,48;
@ %r399 bra $L34;
add.u32 %r400,%r163,-49;
setp.gt.u32 %r401,%r400,8;
@ %r401 bra $L31;
mov.u64 %r178,%r286;
.loc 1 817 6
mov.u32 %r165,0;
bra $L35;
$L33:
.loc 1 672 11
setp.eq.u32 %r402,%r163,99;
@ %r402 bra $L36;
bra $L31;
$L21:
setp.eq.u32 %r403,%r163,112;
@ %r403 bra $L37;
setp.gt.u32 %r404,%r163,112;
@ %r404 bra $L38;
setp.eq.u32 %r405,%r163,108;
@ %r405 bra $L39;
setp.gt.u32 %r406,%r163,108;
@ %r406 bra $L40;
setp.eq.u32 %r407,%r163,104;
@ %r407 bra $L41;
setp.eq.u32 %r408,%r163,105;
@ %r408 bra $L20;
bra $L31;
$L40:
setp.eq.u32 %r409,%r163,110;
@ %r409 bra $L42;
setp.eq.u32 %r410,%r163,111;
@ %r410 bra $L43;
bra $L31;
$L38:
setp.eq.u32 %r411,%r163,117;
@ %r411 bra $L44;
setp.gt.u32 %r412,%r163,117;
@ %r412 bra $L45;
setp.eq.u32 %r413,%r163,113;
@ %r413 bra $L46;
setp.eq.u32 %r414,%r163,115;
@ %r414 bra $L47;
bra $L31;
$L45:
setp.ne.u32 %r415,%r163,120;
@ %r415 bra $L31;
setp.eq.u32 %r416,%r172,0;
@ %r416 bra $L48;
st.u32 [%frame+1232],%r175;
$L48:
.loc 1 1291 10
cvta.const.u64 %r38,$LC0;
bra $L49;
$L30:
.loc 1 762 14
ld.u32 %r282,[%r286];
bra $L50;
$L26:
ld.u32 %r282,[%r286];
.loc 1 704 7
setp.ne.u32 %r417,%r175,0;
selp.u32 %r172,%r172,1,%r417;
selp.u32 %r175,%r175,32,%r417;
bra $L18;
$L27:
.loc 1 708 10
or.b32 %r115,%r115,1;
.loc 1 671 14
ld.u32 %r282,[%r286];
.loc 1 709 4
bra $L18;
$L24:
.loc 1 747 10
add.u64 %r235,%r287,4;
ld.u32 %r165,[%r287];
.loc 1 762 14
ld.u32 %r282,[%r286];
.loc 1 751 7
setp.ge.s32 %r418,%r165,0;
@ %r418 bra $L152;
.loc 1 753 10
neg.s32 %r165,%r165;
.loc 1 747 10
mov.u64 %r287,%r235;
$L50:
.loc 1 756 10
or.b32 %r115,%r115,4;
.loc 1 757 4
bra $L18;
$L29:
.loc 1 671 14
ld.u32 %r282,[%r286];
.loc 1 760 4
mov.u32 %r172,1;
.loc 1 759 9
mov.u32 %r175,%r163;
.loc 1 760 4
bra $L18;
$L22:
.loc 1 762 18
add.u64 %r210,%r286,4;
.loc 1 762 12
ld.u32 %r163,[%r286];
.loc 1 762 7
setp.eq.u32 %r419,%r163,42;
@ %r419 bra $L52;
.loc 1 801 11
add.u32 %r420,%r163,-48;
.loc 1 801 10
setp.le.u32 %r421,%r420,9;
@ %r421 bra $L53;
.loc 1 762 18
mov.u64 %r286,%r210;
.loc 1 801 10
mov.u32 %r166,%r386;
bra $L19;
$L52:
.loc 1 792 10
ld.u32 %r211,[%r287];
max.s32 %r166,%r211,-1;
.loc 1 671 14
ld.u32 %r282,[%r286+4];
.loc 1 792 10
add.u64 %r287,%r287,4;
.loc 1 762 18
mov.u64 %r286,%r210;
.loc 1 798 5
bra $L18;
$L53:
mov.u64 %r185,%r210;
.loc 1 800 6
mov.u32 %r190,%r386;
$L55:
.loc 1 802 12
shl.b32 %r423,%r190,2;
add.u32 %r424,%r423,%r190;
add.u32 %r425,%r424,%r424;
.loc 1 802 16
add.u32 %r426,%r425,-48;
add.u32 %r190,%r426,%r163;
mov.u64 %r268,%r185;
add.u64 %r286,%r185,4;
mov.u64 %r185,%r286;
.loc 1 803 8
ld.u32 %r163,[%r268];
.loc 1 801 11
add.u32 %r427,%r163,-48;
.loc 1 801 10
setp.le.u32 %r428,%r427,9;
@ %r428 bra $L55;
.loc 1 805 9
max.s32 %r166,%r190,-1;
.loc 1 806 4
bra $L19;
$L34:
.loc 1 813 10
or.b32 %r115,%r115,128;
.loc 1 671 14
ld.u32 %r282,[%r286];
.loc 1 814 4
bra $L18;
$L35:
.loc 1 819 12
shl.b32 %r430,%r165,2;
add.u32 %r431,%r430,%r165;
add.u32 %r432,%r431,%r431;
.loc 1 819 16
add.u32 %r433,%r432,-48;
add.u32 %r165,%r433,%r163;
mov.u64 %r197,%r178;
add.u64 %r178,%r178,4;
mov.u64 %r286,%r178;
.loc 1 820 8
ld.u32 %r163,[%r197];
.loc 1 821 13
add.u32 %r434,%r163,-48;
.loc 1 821 4
setp.le.u32 %r435,%r434,9;
@ %r435 bra $L35;
bra $L19;
$L41:
.loc 1 847 11
or.b32 %r115,%r115,64;
.loc 1 671 14
ld.u32 %r282,[%r286];
.loc 1 848 4
bra $L18;
$L39:
.loc 1 851 8
ld.u32 %r282,[%r286];
.loc 1 851 7
setp.ne.u32 %r436,%r282,108;
@ %r436 bra $L57;
.loc 1 853 11
or.b32 %r115,%r115,32;
.loc 1 671 14
ld.u32 %r282,[%r286+4];
.loc 1 852 8
add.u64 %r286,%r286,4;
bra $L18;
$L57:
.loc 1 856 11
or.b32 %r115,%r115,16;
bra $L18;
$L46:
.loc 1 859 10
or.b32 %r115,%r115,32;
.loc 1 671 14
ld.u32 %r282,[%r286];
.loc 1 860 4
bra $L18;
$L36:
setp.eq.u32 %r437,%r172,0;
@ %r437 bra $L58;
st.u32 [%frame+1232],%r175;
$L58:
.loc 1 747 10
add.u64 %r256,%r287,4;
.loc 1 903 30
and.b32 %r438,%r115,16;
.loc 1 903 19
setp.ne.u32 %r439,%r438,0;
@ %r439 bra $L59;
.loc 1 904 17
ld.u32 %r440,[%r287];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r440;
call (%value_in),btowc,(%out_arg1);
ld.param.u32 %r441,[%value_in];
}
.loc 1 905 8
setp.ne.u32 %r442,%r441,-1;
@ %r442 bra $L60;
.loc 1 906 20
ld.u16 %r444,[%r285+16];
or.b16 %r443,%r444,64;
st.u16 [%r285+16],%r443;
.loc 1 907 9
bra $L16;
$L60:
.loc 1 909 11
st.u32 [%frame],%r441;
.loc 1 903 42
bra $L61;
$L59:
.loc 1 913 11
ld.u32 %r445,[%r287];
st.u32 [%frame],%r445;
$L61:
.loc 1 915 10
mov.u32 %r446,0;
st.u32 [%frame+4],%r446;
.loc 1 917 9
st.u32 [%frame+1232],%r446;
.loc 1 918 4
mov.u64 %r287,%r256;
mov.u32 %r169,1;
.loc 1 916 9
mov.u32 %r170,%r169;
.loc 1 902 7
mov.u64 %r164,%frame;
.loc 1 918 4
bra $L62;
$L20:
setp.eq.u32 %r448,%r172,0;
@ %r448 bra $L63;
st.u32 [%frame+1232],%r175;
$L63:
.loc 1 921 13
and.b32 %r449,%r115,32;
setp.eq.u32 %r450,%r449,0;
@ %r450 bra $L64;
add.u64 %r237,%r287,7;
and.b64 %r236,%r237,-8;
add.u64 %r287,%r236,8;
ld.u64 %r63,[%r236];
mov.u64 %r167,%r63;
bra $L65;
$L64:
and.b32 %r451,%r115,16;
setp.eq.u32 %r452,%r451,0;
@ %r452 bra $L66;
add.u64 %r241,%r287,7;
and.b64 %r240,%r241,-8;
add.u64 %r287,%r240,8;
ld.u64 %r63,[%r240];
mov.u64 %r167,%r63;
bra $L65;
$L66:
.loc 1 747 10
add.u64 %r255,%r287,4;
.loc 1 921 13
and.b32 %r453,%r115,64;
setp.eq.u32 %r454,%r453,0;
@ %r454 bra $L67;
ld.s16 %r167,[%r287];
.loc 1 923 8
mov.u64 %r63,%r167;
.loc 1 921 13
mov.u64 %r287,%r255;
bra $L65;
$L67:
ld.s32 %r167,[%r287];
.loc 1 923 8
mov.u64 %r63,%r167;
.loc 1 921 13
mov.u64 %r287,%r255;
$L65:
.loc 1 923 7
setp.ge.s64 %r459,%r63,0;
@ %r459 bra $L68;
.loc 1 929 12
neg.s64 %r167,%r167;
.loc 1 930 10
mov.u32 %r460,45;
st.u32 [%frame+1232],%r460;
mov.u32 %r258,%r460;
.loc 1 932 9
mov.u32 %r168,1;
bra $L69;
$L42:
setp.eq.u32 %r461,%r172,0;
@ %r461 bra $L70;
st.u32 [%frame+1232],%r175;
$L70:
.loc 1 921 13
add.u64 %r462,%r287,7;
and.b64 %r253,%r462,-8;
add.u64 %r287,%r253,8;
.loc 1 1132 14
and.b32 %r463,%r115,32;
.loc 1 1132 7
setp.eq.u32 %r464,%r463,0;
@ %r464 bra $L71;
.loc 1 1133 34
ld.u64 %r465,[%r253];
cvt.s64.s32 %r466,%r283;
st.u64 [%r465],%r466;
bra $L11;
$L71:
.loc 1 1136 14
and.b32 %r467,%r115,16;
.loc 1 1136 7
setp.eq.u32 %r468,%r467,0;
@ %r468 bra $L73;
.loc 1 1137 34
ld.u64 %r469,[%r253];
cvt.s64.s32 %r470,%r283;
st.u64 [%r469],%r470;
bra $L11;
$L73:
.loc 1 1138 19
and.b32 %r471,%r115,64;
.loc 1 1138 12
setp.eq.u32 %r472,%r471,0;
@ %r472 bra $L74;
.loc 1 1139 35
ld.u64 %r473,[%r253];
st.u16 [%r473],%r283;
bra $L11;
$L74:
.loc 1 1145 33
ld.u64 %r474,[%r253];
st.u32 [%r474],%r283;
bra $L11;
$L43:
.loc 1 1148 13
and.b32 %r475,%r115,32;
setp.eq.u32 %r476,%r475,0;
@ %r476 bra $L75;
add.u64 %r204,%r287,7;
and.b64 %r230,%r204,-8;
add.u64 %r287,%r230,8;
ld.u64 %r167,[%r230];
.loc 1 1149 9
mov.u32 %r168,0;
bra $L76;
$L75:
.loc 1 1148 13
and.b32 %r477,%r115,16;
setp.eq.u32 %r478,%r477,0;
@ %r478 bra $L77;
add.u64 %r242,%r287,7;
and.b64 %r231,%r242,-8;
add.u64 %r287,%r231,8;
ld.u64 %r167,[%r231];
.loc 1 1149 9
mov.u32 %r168,0;
bra $L76;
$L77:
.loc 1 747 10
ld.u32 %r251,[%r287];
add.u64 %r287,%r287,4;
.loc 1 1148 13
and.b32 %r479,%r115,64;
setp.eq.u32 %r480,%r479,0;
@ %r480 bra $L78;
cvt.u16.u32 %r481,%r251;
cvt.u64.u16 %r167,%r481;
.loc 1 1149 9
mov.u32 %r168,0;
bra $L76;
$L78:
.loc 1 1148 13
cvt.u64.u32 %r167,%r251;
.loc 1 1149 9
mov.u32 %r168,%r479;
bra $L76;
$L37:
.loc 1 1163 25
add.u64 %r244,%r287,7;
and.b64 %r232,%r244,-8;
add.u64 %r287,%r232,8;
ld.u64 %r167,[%r232];
.loc 1 1166 10
or.b32 %r115,%r115,2;
.loc 1 1167 10
mov.u32 %r482,48;
st.u32 [%frame+1224],%r482;
.loc 1 1168 10
mov.u32 %r483,120;
st.u32 [%frame+1228],%r483;
.loc 1 1165 10
cvta.const.u64 %r38,$LC0;
.loc 1 1164 9
mov.u32 %r168,2;
.loc 1 1169 4
bra $L76;
$L47:
.loc 1 1174 7
add.u64 %r245,%r287,7;
and.b64 %r199,%r245,-8;
add.u64 %r287,%r199,8;
ld.u64 %r164,[%r199];
.loc 1 1178 9
mov.u32 %r484,0;
st.u32 [%frame+1232],%r484;
.loc 1 1184 7
setp.ne.u64 %r485,%r164,0;
@ %r485 bra $L79;
.loc 1 1186 39
min.u32 %r170,%r166,6;
mov.u32 %r169,%r170;
.loc 1 1185 8
cvta.const.u64 %r164,$LC2;
bra $L62;
$L79:
.loc 1 1242 30
and.b32 %r86,%r115,16;
.loc 1 1242 19
setp.ne.u32 %r486,%r86,0;
@ %r486 bra $L80;
.loc 1 1246 8
setp.eq.u32 %r487,%r166,-1;
@ %r487 bra $L81;
.loc 1 1247 16
cvt.s64.s32 %r174,%r166;
mov.u32 %r489,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r164;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r489;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r174;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r491,[%value_in];
}
.loc 1 1248 27
setp.eq.u64 %r492,%r491,0;
@ %r492 bra $L82;
.loc 1 1248 21
sub.u64 %r174,%r491,%r164;
bra $L82;
$L81:
.loc 1 1250 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r164;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r494,[%value_in];
}
mov.u64 %r174,%r494;
$L82:
.loc 1 1251 8
setp.le.u64 %r495,%r174,39;
@ %r495 bra $L83;
.loc 1 1252 64
add.u64 %r498,%r174,1;
.loc 1 1252 39
shl.b64 %r499,%r498,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r499;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r500,[%value_in];
}
mov.u64 %r155,%r500;
.loc 1 1252 12
setp.ne.u64 %r501,%r500,0;
@ %r501 bra $L153;
.loc 1 1254 18
ld.u16 %r503,[%r285+16];
or.b16 %r502,%r503,64;
st.u16 [%r285+16],%r502;
bra $L16;
$L83:
.loc 1 1260 5
setp.eq.u64 %r781,%r174,0;
@ %r781 bra $L154;
mov.u64 %r173,%r804;
.loc 1 1259 9
mov.u64 %r155,%frame;
bra $L84;
$L153:
mov.u64 %r173,%r155;
setp.eq.u64 %r781,%r174,0;
$L84:
mov.u64 %r194,%r155;
mov.u64 %r198,0;
$L86:
.loc 1 1261 20
add.u64 %r505,%r164,%r198;
ld.s8 %r506,[%r505];
st.u32 [%r194],%r506;
.loc 1 1260 5
add.u64 %r198,%r198,1;
add.u64 %r194,%r194,4;
setp.gt.u64 %r507,%r174,%r198;
@ %r507 bra $L86;
.loc 1 1260 35
@ %r781 bra $L87;
add.u64 %r510,%r174,-1;
cvt.u32.u64 %r511,%r510;
add.u32 %r508,%r511,1;
bra $L88;
$L87:
mov.u32 %r508,1;
$L88:
mov.u32 %r170,%r508;
.loc 1 1260 25
selp.u64 %r512,1,%r174,%r781;
.loc 1 1262 7
shl.b64 %r514,%r512,2;
add.u64 %r250,%r155,%r514;
mov.u32 %r169,%r170;
mov.u64 %r164,%r155;
bra $L85;
$L154:
.loc 1 1260 5
mov.u32 %r169,%r86;
.loc 1 1260 15
mov.u32 %r170,%r86;
.loc 1 1260 5
mov.u64 %r250,%frame;
mov.u64 %r173,%r804;
.loc 1 1259 9
mov.u64 %r164,%frame;
$L85:
.loc 1 1262 14
mov.u32 %r515,0;
st.u32 [%r250],%r515;
.loc 1 1425 7
ld.u32 %r258,[%frame+1232];
.loc 1 656 9
mov.u32 %r166,%r86;
.loc 1 1242 42
mov.u32 %r127,%r115;
bra $L91;
$L80:
.loc 1 1265 12
setp.eq.u32 %r516,%r166,-1;
@ %r516 bra $L92;
.loc 1 1271 18
cvt.s64.s32 %r520,%r166;
mov.u32 %r518,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r164;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r518;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r520;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r521,[%value_in];
}
mov.u64 %r173,%r521;
.loc 1 1273 8
setp.eq.u64 %r522,%r173,0;
@ %r522 bra $L93;
.loc 1 1274 15
sub.u64 %r523,%r173,%r164;
shr.s64 %r525,%r523,2;
cvt.u32.u64 %r526,%r525;
min.s32 %r170,%r166,%r526;
.loc 1 1425 7
ld.u32 %r258,[%frame+1232];
.loc 1 1424 10
max.s32 %r169,%r170,0;
mov.u32 %r127,%r115;
mov.u64 %r173,%r804;
.loc 1 656 9
mov.u32 %r166,%r806;
bra $L91;
$L92:
.loc 1 1280 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r164;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r528,[%value_in];
}
.loc 1 1280 10
cvt.u32.u64 %r170,%r528;
.loc 1 1425 7
ld.u32 %r258,[%frame+1232];
.loc 1 1424 10
max.s32 %r169,%r170,0;
mov.u32 %r127,%r115;
mov.u64 %r173,%r804;
.loc 1 656 9
mov.u32 %r166,%r806;
bra $L91;
$L44:
.loc 1 1284 13
and.b32 %r529,%r115,32;
setp.eq.u32 %r530,%r529,0;
@ %r530 bra $L94;
add.u64 %r234,%r287,7;
and.b64 %r243,%r234,-8;
add.u64 %r287,%r243,8;
ld.u64 %r167,[%r243];
.loc 1 1285 9
mov.u32 %r168,1;
bra $L76;
$L94:
.loc 1 1284 13
and.b32 %r531,%r115,16;
setp.eq.u32 %r532,%r531,0;
@ %r532 bra $L95;
add.u64 %r196,%r287,7;
and.b64 %r229,%r196,-8;
add.u64 %r287,%r229,8;
ld.u64 %r167,[%r229];
.loc 1 1285 9
mov.u32 %r168,1;
bra $L76;
$L95:
.loc 1 747 10
ld.u32 %r248,[%r287];
add.u64 %r287,%r287,4;
.loc 1 1284 13
and.b32 %r533,%r115,64;
setp.eq.u32 %r534,%r533,0;
@ %r534 bra $L96;
cvt.u16.u32 %r535,%r248;
cvt.u64.u16 %r167,%r535;
.loc 1 1285 9
mov.u32 %r168,1;
bra $L76;
$L96:
.loc 1 1284 13
cvt.u64.u32 %r167,%r248;
.loc 1 1285 9
mov.u32 %r168,1;
bra $L76;
$L32:
setp.eq.u32 %r536,%r172,0;
@ %r536 bra $L97;
st.u32 [%frame+1232],%r175;
$L97:
.loc 1 1288 10
cvta.const.u64 %r38,$LC1;
$L49:
.loc 1 1292 17
and.b32 %r537,%r115,32;
setp.eq.u32 %r538,%r537,0;
@ %r538 bra $L98;
add.u64 %r239,%r287,7;
and.b64 %r238,%r239,-8;
add.u64 %r287,%r238,8;
ld.u64 %r167,[%r238];
bra $L99;
$L98:
and.b32 %r539,%r115,16;
setp.eq.u32 %r540,%r539,0;
@ %r540 bra $L100;
add.u64 %r247,%r287,7;
and.b64 %r246,%r247,-8;
add.u64 %r287,%r246,8;
ld.u64 %r167,[%r246];
bra $L99;
$L100:
.loc 1 747 10
ld.u32 %r257,[%r287];
add.u64 %r287,%r287,4;
.loc 1 1292 17
and.b32 %r541,%r115,64;
setp.eq.u32 %r542,%r541,0;
@ %r542 bra $L101;
cvt.u16.u32 %r543,%r257;
cvt.u64.u16 %r167,%r543;
bra $L99;
$L101:
cvt.u64.u32 %r167,%r257;
$L99:
.loc 1 1295 14
and.b32 %r544,%r115,1;
.loc 1 1295 7
setp.eq.u32 %r545,%r544,0;
@ %r545 bra $L155;
.loc 1 1295 20
setp.eq.u64 %r546,%r167,0;
@ %r546 bra $L156;
.loc 1 1296 11
mov.u32 %r547,48;
st.u32 [%frame+1224],%r547;
.loc 1 1297 11
st.u32 [%frame+1228],%r163;
.loc 1 1298 11
or.b32 %r115,%r115,2;
.loc 1 1293 9
mov.u32 %r168,2;
bra $L76;
$L155:
mov.u32 %r168,2;
bra $L76;
$L156:
mov.u32 %r168,2;
$L76:
.loc 1 1305 16
mov.u32 %r548,0;
st.u32 [%frame+1232],%r548;
mov.u32 %r258,%r548;
$L69:
.loc 1 1311 14
setp.eq.u32 %r549,%r166,-1;
@ %r549 bra $L102;
.loc 1 1312 11
and.b32 %r127,%r115,-129;
.loc 1 1320 15
set.u32.ne.u64 %r551,%r167,0;
neg.s32 %r552,%r551;
.loc 1 1320 28
set.u32.ne.u32 %r554,%r166,0;
neg.s32 %r555,%r554;
.loc 1 1320 20
cvt.u16.u32 %r557,%r552;
cvt.u16.u32 %r558,%r555;
or.b16 %r556,%r557,%r558;
.loc 1 1320 7
cvt.u32.u16 %r559,%r556;
cvt.u16.u8 %r560,%r559;
setp.eq.u16 %r561,%r560,0;
@ %r561 bra $L103;
.loc 1 1312 11
mov.u32 %r115,%r127;
$L102:
setp.eq.u32 %r562,%r168,1;
@ %r562 bra $L104;
setp.eq.u32 %r563,%r168,2;
@ %r563 bra $L157;
mov.u64 %r164,%r805;
$L106:
mov.u64 %r233,%r164;
.loc 1 1329 13
add.u64 %r164,%r164,-4;
.loc 1 1329 15
cvt.u32.u64 %r565,%r167;
and.b32 %r564,%r565,7;
add.u32 %r114,%r564,48;
.loc 1 1329 13
st.u32 [%r164],%r114;
.loc 1 1330 14
shr.u64 %r167,%r167,3;
.loc 1 1331 6
setp.ne.u64 %r566,%r167,0;
@ %r566 bra $L106;
.loc 1 1333 22
set.u32.ne.u32 %r568,%r114,48;
neg.s32 %r569,%r568;
.loc 1 1333 9
cvt.u16.u32 %r572,%r115;
and.b16 %r571,%r572,1;
.loc 1 1333 22
cvt.u16.u32 %r575,%r569;
and.b16 %r574,%r575,%r571;
cvt.u32.u16 %r577,%r574;
cvt.u16.u8 %r578,%r577;
setp.ne.u16 %r579,%r578,0;
@ %r579 bra $L107;
.loc 1 1395 21
sub.u64 %r581,%r805,%r164;
shr.s64 %r583,%r581,2;
.loc 1 1395 9
cvt.u32.u64 %r170,%r583;
mov.u32 %r127,%r115;
bra $L108;
$L107:
.loc 1 1334 13
add.u64 %r207,%r233,-8;
mov.u32 %r584,48;
st.u32 [%r164+-4],%r584;
.loc 1 1395 21
sub.u64 %r586,%r805,%r207;
shr.s64 %r588,%r586,2;
.loc 1 1395 9
cvt.u32.u64 %r170,%r588;
mov.u32 %r127,%r115;
.loc 1 1334 13
mov.u64 %r164,%r207;
bra $L108;
$L163:
.loc 1 1312 11
mov.u32 %r115,%r127;
$L104:
.loc 1 1339 9
setp.gt.u64 %r589,%r167,9;
@ %r589 bra $L158;
.loc 1 1340 15
cvt.u32.u64 %r591,%r167;
add.u32 %r590,%r591,48;
.loc 1 1340 13
st.u32 [%frame+156],%r590;
.loc 1 1341 7
mov.u32 %r127,%r115;
mov.u32 %r170,1;
.loc 1 1340 13
add.u64 %r164,%frame,156;
.loc 1 1341 7
bra $L108;
$L158:
.loc 1 1319 7
mov.u64 %r164,%r805;
$L109:
.loc 1 1347 14
add.u64 %r164,%r164,-4;
.loc 1 1347 16
rem.u64 %r593,%r167,10;
cvt.u32.u64 %r595,%r593;
add.u32 %r594,%r595,48;
.loc 1 1347 14
st.u32 [%r164],%r594;
mov.u64 %r267,%r167;
.loc 1 1366 15
div.u64 %r167,%r167,10;
.loc 1 1367 6
setp.gt.u64 %r598,%r267,9;
@ %r598 bra $L109;
.loc 1 1395 21
sub.u64 %r600,%r805,%r164;
shr.s64 %r602,%r600,2;
.loc 1 1395 9
cvt.u32.u64 %r170,%r602;
mov.u32 %r127,%r115;
bra $L108;
$L157:
mov.u64 %r164,%r805;
$L105:
.loc 1 1372 13
add.u64 %r164,%r164,-4;
.loc 1 1372 28
and.b64 %r603,%r167,15;
.loc 1 1372 20
shl.b64 %r604,%r603,2;
add.u64 %r605,%r38,%r604;
.loc 1 1372 13
ld.u32 %r606,[%r605];
st.u32 [%r164],%r606;
.loc 1 1373 14
shr.u64 %r167,%r167,4;
.loc 1 1374 6
setp.ne.u64 %r607,%r167,0;
@ %r607 bra $L105;
.loc 1 1395 21
sub.u64 %r609,%r805,%r164;
shr.s64 %r611,%r609,2;
.loc 1 1395 9
cvt.u32.u64 %r170,%r611;
mov.u32 %r127,%r115;
bra $L108;
$L103:
.loc 1 1392 32
setp.ne.u32 %r612,%r168,0;
@ %r612 bra $L159;
.loc 1 1392 55
and.b32 %r170,%r115,1;
.loc 1 1392 45
setp.eq.u32 %r613,%r170,0;
@ %r613 bra $L160;
.loc 1 1393 32
mov.u32 %r614,48;
st.u32 [%frame+156],%r614;
mov.u32 %r166,%r168;
add.u64 %r164,%frame,156;
bra $L108;
$L159:
mov.u32 %r166,0;
mov.u32 %r170,%r166;
.loc 1 1319 7
add.u64 %r164,%frame,160;
bra $L108;
$L160:
mov.u32 %r166,%r168;
add.u64 %r164,%frame,160;
$L108:
.loc 1 1424 10
max.s32 %r169,%r166,%r170;
mov.u64 %r173,%r804;
bra $L91;
$L246:
setp.eq.u32 %r615,%r172,0;
@ %r615 bra $L110;
$L149:
st.u32 [%frame+1232],%r175;
$L110:
.loc 1 1399 7
setp.eq.u32 %r616,%r163,0;
@ %r616 bra $L17;
$L150:
.loc 1 1403 8
st.u32 [%frame],%r163;
.loc 1 1405 9
mov.u32 %r617,0;
st.u32 [%frame+1232],%r617;
.loc 1 1406 4
mov.u32 %r169,1;
.loc 1 1404 9
mov.u32 %r170,%r169;
.loc 1 1402 7
mov.u64 %r164,%frame;
.loc 1 1406 4
bra $L62;
$L93:
.loc 1 1425 7
ld.u32 %r258,[%frame+1232];
mov.u32 %r169,%r166;
mov.u32 %r170,%r166;
mov.u32 %r127,%r115;
.loc 1 656 9
cvt.u32.u64 %r166,%r173;
$L91:
.loc 1 1425 6
setp.eq.u32 %r618,%r258,0;
@ %r618 bra $L111;
.loc 1 1426 10
add.u32 %r169,%r169,1;
$L111:
.loc 1 1427 13
and.b32 %r129,%r127,2;
.loc 1 1427 6
setp.eq.u32 %r779,%r129,0;
@ %r779 bra $L112;
.loc 1 1428 10
add.u32 %r169,%r169,2;
$L112:
.loc 1 1431 14
and.b32 %r130,%r127,132;
.loc 1 1436 4
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
.loc 1 1431 6
setp.ne.u32 %r620,%r130,0;
@ %r620 bra $L113;
.loc 1 1432 4
sub.u32 %r184,%r165,%r169;
setp.le.s32 %r621,%r184,0;
@ %r621 bra $L113;
setp.le.s32 %r622,%r184,16;
@ ! %r622 bra $L247;
cvta.const.u64 %r783,blanks$1;
bra $L114;
$L247:
cvta.const.u64 %r783,blanks$1;
$L118:
st.u64 [%r171],%r783;
mov.u64 %r624,64;
st.u64 [%r171+8],%r624;
add.u64 %r269,%r269,64;
st.u64 [%frame+1216],%r269;
add.u32 %r270,%r270,1;
st.u32 [%frame+1208],%r270;
setp.gt.s32 %r625,%r270,7;
@ %r625 bra $L115;
add.u64 %r171,%r171,16;
bra $L116;
$L115:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r630,[%value_in];
}
setp.ne.u32 %r631,%r630,0;
@ %r631 bra $L117;
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
mov.u64 %r171,%r784;
$L116:
add.u32 %r184,%r184,-16;
setp.gt.s32 %r632,%r184,16;
@ %r632 bra $L118;
$L114:
st.u64 [%r171],%r783;
cvt.s64.s32 %r634,%r184;
shl.b64 %r133,%r634,2;
st.u64 [%r171+8],%r133;
add.u64 %r269,%r269,%r133;
st.u64 [%frame+1216],%r269;
add.u32 %r270,%r270,1;
st.u32 [%frame+1208],%r270;
setp.gt.s32 %r635,%r270,7;
@ %r635 bra $L119;
add.u64 %r171,%r171,16;
bra $L113;
$L119:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r640,[%value_in];
}
setp.ne.u32 %r641,%r640,0;
@ %r641 bra $L117;
.loc 1 1436 4
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
.loc 1 1432 4
mov.u64 %r171,%r784;
$L113:
.loc 1 1436 4
add.u32 %r274,%r270,1;
add.u64 %r276,%r171,16;
.loc 1 1435 6
ld.u32 %r642,[%frame+1232];
setp.eq.u32 %r643,%r642,0;
@ %r643 bra $L120;
.loc 1 1436 4
st.u64 [%r171],%r803;
mov.u64 %r645,4;
st.u64 [%r171+8],%r645;
add.u64 %r269,%r269,4;
st.u64 [%frame+1216],%r269;
st.u32 [%frame+1208],%r274;
setp.gt.s32 %r646,%r274,7;
@ %r646 bra $L121;
.loc 1 1438 4
add.u32 %r271,%r270,2;
add.u64 %r272,%r171,32;
mov.u32 %r270,%r274;
mov.u32 %r274,%r271;
.loc 1 1436 4
mov.u64 %r171,%r276;
.loc 1 1438 4
mov.u64 %r276,%r272;
bra $L120;
$L121:
.loc 1 1436 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r651,[%value_in];
}
setp.ne.u32 %r652,%r651,0;
@ %r652 bra $L117;
.loc 1 1438 4
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
add.u32 %r274,%r270,1;
add.u64 %r276,%frame,1040;
.loc 1 1436 4
mov.u64 %r171,%r784;
$L120:
.loc 1 1437 6
@ %r779 bra $L122;
.loc 1 1438 4
st.u64 [%r171],%r802;
mov.u64 %r655,8;
st.u64 [%r171+8],%r655;
add.u64 %r269,%r269,8;
st.u64 [%frame+1216],%r269;
st.u32 [%frame+1208],%r274;
setp.gt.s32 %r656,%r274,7;
@ %r656 bra $L123;
.loc 1 1512 3
mov.u32 %r270,%r274;
add.u32 %r274,%r274,1;
.loc 1 1438 4
mov.u64 %r171,%r276;
.loc 1 1512 3
add.u64 %r276,%r276,16;
bra $L122;
$L123:
.loc 1 1438 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r661,[%value_in];
}
setp.ne.u32 %r662,%r661,0;
@ %r662 bra $L117;
.loc 1 1512 3
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
add.u32 %r274,%r270,1;
add.u64 %r276,%frame,1040;
.loc 1 1438 4
mov.u64 %r171,%r784;
$L122:
.loc 1 1441 6
setp.ne.u32 %r663,%r130,128;
@ %r663 bra $L124;
.loc 1 1442 4
sub.u32 %r214,%r165,%r169;
setp.le.s32 %r664,%r214,0;
@ %r664 bra $L124;
setp.le.s32 %r665,%r214,16;
@ %r665 bra $L161;
cvta.const.u64 %r782,zeroes$0;
$L128:
st.u64 [%r171],%r782;
mov.u64 %r667,64;
st.u64 [%r171+8],%r667;
add.u64 %r269,%r269,64;
st.u64 [%frame+1216],%r269;
add.u32 %r270,%r270,1;
st.u32 [%frame+1208],%r270;
setp.gt.s32 %r668,%r270,7;
@ %r668 bra $L126;
add.u64 %r171,%r171,16;
bra $L127;
$L126:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r673,[%value_in];
}
setp.ne.u32 %r674,%r673,0;
@ %r674 bra $L117;
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
mov.u64 %r171,%r784;
$L127:
add.u32 %r214,%r214,-16;
setp.gt.s32 %r675,%r214,16;
@ %r675 bra $L128;
add.u32 %r270,%r270,1;
add.u64 %r277,%r171,16;
bra $L125;
$L161:
mov.u64 %r277,%r276;
mov.u32 %r270,%r274;
cvta.const.u64 %r782,zeroes$0;
$L125:
st.u64 [%r171],%r782;
cvt.s64.s32 %r677,%r214;
shl.b64 %r141,%r677,2;
st.u64 [%r171+8],%r141;
add.u64 %r269,%r269,%r141;
st.u64 [%frame+1216],%r269;
st.u32 [%frame+1208],%r270;
setp.gt.s32 %r678,%r270,7;
@ %r678 bra $L129;
.loc 1 1512 3
add.u32 %r274,%r270,1;
add.u64 %r276,%r277,16;
.loc 1 1442 4
mov.u64 %r171,%r277;
bra $L124;
$L129:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r683,[%value_in];
}
setp.ne.u32 %r684,%r683,0;
@ %r684 bra $L117;
.loc 1 1512 3
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
add.u32 %r274,%r270,1;
add.u64 %r276,%frame,1040;
.loc 1 1442 4
mov.u64 %r171,%r784;
$L124:
.loc 1 1445 3
sub.u32 %r149,%r166,%r170;
setp.le.s32 %r685,%r149,0;
@ %r685 bra $L130;
setp.le.s32 %r686,%r149,16;
@ %r686 bra $L162;
cvta.const.u64 %r782,zeroes$0;
$L134:
st.u64 [%r171],%r782;
mov.u64 %r688,64;
st.u64 [%r171+8],%r688;
add.u64 %r269,%r269,64;
st.u64 [%frame+1216],%r269;
add.u32 %r270,%r270,1;
st.u32 [%frame+1208],%r270;
setp.gt.s32 %r689,%r270,7;
@ %r689 bra $L132;
add.u64 %r171,%r171,16;
bra $L133;
$L132:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r694,[%value_in];
}
setp.ne.u32 %r695,%r694,0;
@ %r695 bra $L117;
ld.u64 %r269,[%frame+1216];
ld.u32 %r270,[%frame+1208];
mov.u64 %r171,%r784;
$L133:
add.u32 %r149,%r149,-16;
setp.gt.s32 %r696,%r149,16;
@ %r696 bra $L134;
add.u32 %r274,%r270,1;
add.u64 %r278,%r171,16;
bra $L131;
$L162:
mov.u64 %r278,%r276;
cvta.const.u64 %r782,zeroes$0;
$L131:
st.u64 [%r171],%r782;
cvt.s64.s32 %r698,%r149;
shl.b64 %r145,%r698,2;
st.u64 [%r171+8],%r145;
add.u64 %r269,%r269,%r145;
st.u64 [%frame+1216],%r269;
st.u32 [%frame+1208],%r274;
setp.gt.s32 %r699,%r274,7;
@ %r699 bra $L135;
.loc 1 1512 3
add.u32 %r274,%r274,1;
add.u64 %r276,%r278,16;
.loc 1 1445 3
mov.u64 %r171,%r278;
bra $L130;
$L135:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r704,[%value_in];
}
setp.ne.u32 %r705,%r704,0;
@ %r705 bra $L117;
.loc 1 1512 3
ld.u64 %r269,[%frame+1216];
ld.u32 %r706,[%frame+1208];
add.u32 %r274,%r706,1;
add.u64 %r276,%frame,1040;
.loc 1 1445 3
mov.u64 %r171,%r784;
$L130:
.loc 1 1512 3
st.u64 [%r171],%r164;
cvt.s64.s32 %r707,%r170;
shl.b64 %r148,%r707,2;
st.u64 [%r171+8],%r148;
add.u64 %r280,%r148,%r269;
st.u64 [%frame+1216],%r280;
st.u32 [%frame+1208],%r274;
setp.le.s32 %r708,%r274,7;
@ %r708 bra $L136;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r713,[%value_in];
}
setp.ne.u32 %r714,%r713,0;
@ %r714 bra $L117;
.loc 1 1521 3
ld.u64 %r280,[%frame+1216];
.loc 1 1512 3
mov.u64 %r276,%r784;
$L136:
.loc 1 1515 13
and.b32 %r715,%r127,4;
.loc 1 1515 6
setp.eq.u32 %r716,%r715,0;
@ %r716 bra $L137;
.loc 1 1516 4
sub.u32 %r61,%r165,%r169;
setp.le.s32 %r717,%r61,0;
@ %r717 bra $L137;
ld.u32 %r281,[%frame+1208];
setp.le.s32 %r718,%r61,16;
@ ! %r718 bra $L248;
cvta.const.u64 %r783,blanks$1;
bra $L138;
$L248:
cvta.const.u64 %r783,blanks$1;
$L141:
st.u64 [%r276],%r783;
mov.u64 %r720,64;
st.u64 [%r276+8],%r720;
add.u64 %r280,%r280,64;
st.u64 [%frame+1216],%r280;
add.u32 %r281,%r281,1;
st.u32 [%frame+1208],%r281;
setp.gt.s32 %r721,%r281,7;
@ %r721 bra $L139;
add.u64 %r276,%r276,16;
bra $L140;
$L139:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r726,[%value_in];
}
setp.ne.u32 %r727,%r726,0;
@ %r727 bra $L117;
ld.u64 %r280,[%frame+1216];
ld.u32 %r281,[%frame+1208];
mov.u64 %r276,%r784;
$L140:
add.u32 %r61,%r61,-16;
setp.gt.s32 %r728,%r61,16;
@ %r728 bra $L141;
$L138:
st.u64 [%r276],%r783;
cvt.s64.s32 %r730,%r61;
shl.b64 %r154,%r730,2;
st.u64 [%r276+8],%r154;
add.u64 %r280,%r280,%r154;
st.u64 [%frame+1216],%r280;
add.u32 %r156,%r281,1;
st.u32 [%frame+1208],%r156;
setp.le.s32 %r731,%r156,7;
@ %r731 bra $L137;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r736,[%value_in];
}
setp.ne.u32 %r737,%r736,0;
@ %r737 bra $L117;
.loc 1 1521 3
ld.u64 %r280,[%frame+1216];
$L137:
.loc 1 1519 33
max.s32 %r738,%r165,%r169;
.loc 1 1519 7
add.u32 %r283,%r283,%r738;
.loc 1 1521 3
setp.ne.u64 %r739,%r280,0;
@ %r739 bra $L142;
$L144:
mov.u32 %r740,0;
st.u32 [%frame+1208],%r740;
.loc 1 1523 20
setp.ne.u64 %r741,%r173,0;
@ %r741 bra $L143;
.loc 1 1521 3
mov.u64 %r171,%r784;
bra $L11;
$L142:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r801;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r746,[%value_in];
}
setp.ne.u32 %r747,%r746,0;
@ ! %r747 bra $L144;
bra $L117;
$L143:
.loc 1 1524 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r173;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 1521 3
mov.u64 %r171,%r784;
bra $L11;
$L17:
.loc 1 1529 2
ld.u64 %r750,[%frame+1216];
setp.ne.u64 %r751,%r750,0;
@ ! %r751 bra $L16;
add.u64 %r755,%frame,1200;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r285;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r755;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r756,[%value_in];
}
bra $L16;
$L117:
.loc 1 1531 5
setp.eq.u64 %r758,%r173,0;
@ %r758 bra $L16;
.loc 1 1532 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r284;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r173;
call _free_r,(%out_arg1,%out_arg2);
}
$L16:
.loc 1 1536 31
ld.u16 %r762,[%r285+16];
and.b16 %r761,%r762,64;
setp.ne.u16 %r763,%r761,0;
@ ! %r763 bra $L1;
bra $L147;
$L62:
.loc 1 656 9
mov.u32 %r127,%r115;
mov.u64 %r173,%r804;
mov.u32 %r166,%r806;
bra $L111;
$L68:
.loc 1 704 8
ld.u32 %r258,[%frame+1232];
.loc 1 1311 14
setp.ne.u32 %r765,%r166,-1;
@ %r765 bra $L148;
bra $L104;
$L31:
setp.ne.u32 %r766,%r172,0;
@ ! %r766 bra $L150;
bra $L149;
$L148:
.loc 1 1312 11
and.b32 %r127,%r115,-129;
.loc 1 1320 28
set.u32.ne.u32 %r768,%r166,0;
neg.s32 %r769,%r768;
.loc 1 1320 15
set.u32.ne.u64 %r771,%r167,0;
neg.s32 %r772,%r771;
.loc 1 1320 20
cvt.u16.u32 %r774,%r769;
cvt.u16.u32 %r775,%r772;
or.b16 %r773,%r774,%r775;
.loc 1 1320 7
cvt.u32.u16 %r776,%r773;
cvt.u16.u8 %r777,%r776;
setp.ne.u16 %r778,%r777,0;
@ %r778 bra $L163;
mov.u32 %r166,0;
mov.u32 %r170,%r166;
.loc 1 1319 7
add.u64 %r164,%frame,160;
bra $L108;
$L1:
.loc 1 1538 1
mov.u32 %value,%r283;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfiwprintf
.visible .func (.param .u32 %value_out) vfiwprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 373 12
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfiwprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 375 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

/1824           1612277263  0     0     100666  47304     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __svfiwscanf_r
.visible .func (.param .u32 %value_out) __svfiwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfwscanf.c"
// BEGIN GLOBAL FUNCTION DECL: vfiwscanf
.visible .func (.param .u32 %value_out) vfiwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __svfiwscanf
.visible .func (.param .u32 %value_out) __svfiwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _vfiwscanf_r
.visible .func (.param .u32 %value_out) _vfiwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: iswspace
.extern .func (.param .u32 %value_out) iswspace (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fgetwc_r
.extern .func (.param .u32 %value_out) _fgetwc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _ungetwc_r
.extern .func (.param .u32 %value_out) _ungetwc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstoul_r
.extern .func (.param .u64 %value_out) _wcstoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstol_r
.extern .func (.param .u64 %value_out) _wcstol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcrtomb_r
.extern .func (.param .u64 %value_out) _wcrtomb_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcrtomb
.extern .func (.param .u64 %value_out) wcrtomb (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstoull_r
.extern .func (.param .u64 %value_out) _wcstoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstoll_r
.extern .func (.param .u64 %value_out) _wcstoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN GLOBAL FUNCTION DEF: __svfiwscanf_r
.visible .func (.param .u32 %value_out) __svfiwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u64 %r26;
.reg .u32 %r28;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r37;
.reg .u32 %r52;
.reg .u64 %r64;
.reg .u32 %r71;
.reg .u32 %r74;
.reg .u32 %r89;
.reg .u64 %r92;
.reg .u32 %r106;
.reg .u64 %r108;
.reg .u64 %r109;
.reg .u64 %r112;
.reg .u64 %r113;
.reg .u64 %r114;
.reg .u64 %r115;
.reg .u32 %r116;
.reg .u32 %r117;
.reg .u32 %r118;
.reg .u64 %r119;
.reg .u32 %r120;
.reg .u64 %r121;
.reg .u64 %r122;
.reg .u64 %r123;
.reg .u64 %r124;
.reg .u64 %r125;
.reg .u64 %r126;
.reg .u32 %r128;
.reg .u64 %r135;
.reg .u64 %r138;
.reg .u64 %r141;
.reg .u64 %r142;
.reg .u64 %r143;
.reg .u32 %r144;
.reg .u64 %r146;
.reg .u64 %r148;
.reg .u64 %r153;
.reg .u64 %r154;
.reg .u32 %r155;
.reg .u64 %r164;
.reg .u64 %r170;
.reg .u64 %r173;
.reg .u64 %r176;
.reg .u32 %r179;
.reg .u64 %r184;
.reg .u64 %r188;
.reg .u64 %r191;
.reg .u64 %r194;
.reg .u32 %r195;
.reg .u32 %r196;
.reg .u32 %r198;
.reg .u64 %r200;
.reg .u32 %r201;
.reg .u64 %r202;
.reg .u32 %r203;
.reg .u64 %r209;
.reg .u64 %r210;
.reg .u64 %r211;
.reg .u32 %r214;
.reg .u64 %r215;
.reg .u32 %r217;
.reg .u64 %r218;
.reg .u64 %r219;
.reg .u64 %r220;
.reg .u64 %r221;
.reg .u16 %r222;
.reg .u16 %r223;
.reg .pred %r224;
.reg .u16 %r225;
.reg .u32 %r227;
.reg .pred %r228;
.reg .pred %r229;
.reg .u32 %r231;
.reg .pred %r232;
.reg .u32 %r235;
.reg .pred %r236;
.reg .u32 %r238;
.reg .pred %r239;
.reg .pred %r240;
.reg .pred %r241;
.reg .pred %r242;
.reg .pred %r243;
.reg .pred %r244;
.reg .pred %r245;
.reg .pred %r246;
.reg .pred %r247;
.reg .u32 %r248;
.reg .pred %r249;
.reg .pred %r250;
.reg .pred %r251;
.reg .pred %r252;
.reg .pred %r253;
.reg .pred %r254;
.reg .pred %r255;
.reg .pred %r256;
.reg .pred %r257;
.reg .pred %r258;
.reg .pred %r259;
.reg .pred %r260;
.reg .pred %r261;
.reg .pred %r262;
.reg .pred %r263;
.reg .pred %r264;
.reg .u32 %r267;
.reg .pred %r268;
.reg .pred %r269;
.reg .u32 %r273;
.reg .u32 %r275;
.reg .u32 %r276;
.reg .u32 %r278;
.reg .u32 %r279;
.reg .u16 %r280;
.reg .u16 %r281;
.reg .u16 %r282;
.reg .u32 %r283;
.reg .u16 %r284;
.reg .pred %r285;
.reg .u32 %r286;
.reg .pred %r287;
.reg .pred %r288;
.reg .u32 %r289;
.reg .pred %r290;
.reg .u32 %r291;
.reg .pred %r292;
.reg .u64 %r294;
.reg .u64 %r295;
.reg .u64 %r296;
.reg .u64 %r297;
.reg .pred %r298;
.reg .pred %r299;
.reg .u32 %r301;
.reg .u32 %r302;
.reg .u32 %r304;
.reg .u32 %r305;
.reg .u16 %r306;
.reg .u16 %r307;
.reg .u16 %r308;
.reg .u32 %r309;
.reg .u16 %r310;
.reg .pred %r311;
.reg .u32 %r313;
.reg .u32 %r314;
.reg .u32 %r316;
.reg .u32 %r317;
.reg .u16 %r318;
.reg .u16 %r319;
.reg .u16 %r320;
.reg .u32 %r321;
.reg .u16 %r322;
.reg .pred %r323;
.reg .pred %r324;
.reg .pred %r325;
.reg .u32 %r326;
.reg .pred %r327;
.reg .u64 %r328;
.reg .u32 %r329;
.reg .pred %r330;
.reg .u32 %r331;
.reg .pred %r332;
.reg .u64 %r333;
.reg .u32 %r334;
.reg .pred %r335;
.reg .u64 %r336;
.reg .u32 %r339;
.reg .pred %r340;
.reg .u32 %r342;
.reg .pred %r343;
.reg .pred %r346;
.reg .u32 %r349;
.reg .pred %r350;
.reg .pred %r351;
.reg .u32 %r355;
.reg .u64 %r356;
.reg .u64 %r358;
.reg .u64 %r364;
.reg .pred %r365;
.reg .pred %r366;
.reg .u32 %r367;
.reg .pred %r368;
.reg .pred %r370;
.reg .u32 %r373;
.reg .pred %r374;
.reg .pred %r375;
.reg .u64 %r377;
.reg .u32 %r379;
.reg .pred %r380;
.reg .u32 %r383;
.reg .pred %r384;
.reg .pred %r385;
.reg .u64 %r390;
.reg .pred %r391;
.reg .u64 %r395;
.reg .pred %r396;
.reg .pred %r397;
.reg .pred %r398;
.reg .u32 %r401;
.reg .pred %r402;
.reg .pred %r403;
.reg .u64 %r408;
.reg .pred %r409;
.reg .u64 %r413;
.reg .pred %r414;
.reg .u64 %r415;
.reg .u64 %r417;
.reg .pred %r418;
.reg .u32 %r419;
.reg .u32 %r422;
.reg .u64 %r423;
.reg .u64 %r425;
.reg .u64 %r431;
.reg .pred %r432;
.reg .pred %r433;
.reg .u32 %r434;
.reg .pred %r435;
.reg .u32 %r439;
.reg .pred %r440;
.reg .pred %r441;
.reg .u64 %r446;
.reg .pred %r447;
.reg .u64 %r451;
.reg .pred %r452;
.reg .u32 %r454;
.reg .pred %r455;
.reg .u32 %r456;
.reg .pred %r457;
.reg .u32 %r458;
.reg .u32 %r459;
.reg .u32 %r460;
.reg .u32 %r463;
.reg .pred %r464;
.reg .pred %r465;
.reg .u32 %r467;
.reg .pred %r468;
.reg .u32 %r469;
.reg .pred %r470;
.reg .u32 %r471;
.reg .u32 %r472;
.reg .u32 %r473;
.reg .u32 %r476;
.reg .pred %r477;
.reg .pred %r478;
.reg .u32 %r480;
.reg .pred %r481;
.reg .u32 %r482;
.reg .u32 %r485;
.reg .u64 %r486;
.reg .u64 %r488;
.reg .u64 %r493;
.reg .pred %r494;
.reg .pred %r495;
.reg .u32 %r496;
.reg .pred %r497;
.reg .u32 %r501;
.reg .pred %r502;
.reg .pred %r503;
.reg .u32 %r505;
.reg .pred %r506;
.reg .u32 %r508;
.reg .u64 %r509;
.reg .pred %r510;
.reg .u64 %r511;
.reg .u32 %r514;
.reg .pred %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .pred %r518;
.reg .u32 %r519;
.reg .u32 %r520;
.reg .pred %r521;
.reg .u64 %r522;
.reg .u64 %r523;
.reg .u64 %r524;
.reg .u64 %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .pred %r528;
.reg .pred %r529;
.reg .pred %r530;
.reg .pred %r531;
.reg .pred %r532;
.reg .u32 %r533;
.reg .pred %r534;
.reg .u64 %r535;
.reg .u64 %r536;
.reg .u64 %r537;
.reg .u64 %r538;
.reg .pred %r539;
.reg .pred %r540;
.reg .u32 %r541;
.reg .pred %r542;
.reg .u32 %r543;
.reg .pred %r544;
.reg .u32 %r545;
.reg .pred %r546;
.reg .u64 %r547;
.reg .pred %r548;
.reg .pred %r549;
.reg .u32 %r553;
.reg .pred %r554;
.reg .u32 %r555;
.reg .pred %r556;
.reg .pred %r557;
.reg .u32 %r561;
.reg .u32 %r562;
.reg .u32 %r563;
.reg .pred %r564;
.reg .u32 %r568;
.reg .u32 %r569;
.reg .pred %r570;
.reg .u64 %r574;
.reg .u64 %r576;
.reg .u64 %r577;
.reg .u32 %r578;
.reg .pred %r579;
.reg .u32 %r580;
.reg .pred %r581;
.reg .u64 %r582;
.reg .u32 %r583;
.reg .pred %r584;
.reg .u64 %r585;
.reg .u32 %r586;
.reg .pred %r587;
.reg .u64 %r588;
.reg .pred %r589;
.reg .u64 %r594;
.reg .u64 %r599;
.reg .u64 %r600;
.reg .u64 %r601;
.reg .u64 %r602;
.reg .u64 %r604;
.reg .u32 %r605;
.reg .pred %r606;
.reg .u16 %r607;
.reg .u16 %r608;
.reg .pred %r609;
.reg .u32 %r614;
.reg .u32 %r618;
.reg .u32 %r622;
.reg .u32 %r626;
.reg .u32 %r630;
.reg .u32 %r634;
.reg .u32 %r638;
.reg .u32 %r642;
.reg .pred %r643;
.reg .pred %r644;
.reg .pred %r645;
.reg .pred %r646;
.reg .pred %r648;
.reg .pred %r649;
.reg .pred %r650;
.reg .u64 %r651;
mov.u64 %r218,%ar0;
mov.u64 %r219,%ar1;
mov.u64 %r220,%ar2;
mov.u64 %r221,%ar3;
.loc 1 553 3
ld.u16 %r223,[%r219+16];
and.b16 %r222,%r223,8192;
setp.ne.u16 %r224,%r222,0;
@ %r224 bra $L2;
.loc 1 551 3
ld.u32 %r22,[%r219+172];
.loc 1 553 3
or.b16 %r225,%r223,8192;
st.u16 [%r219+16],%r225;
or.b32 %r227,%r22,8192;
st.u32 [%r219+172],%r227;
$L2:
.loc 1 560 15
add.u64 %r135,%r220,4;
.loc 1 560 9
ld.u32 %r106,[%r220];
.loc 1 561 10
setp.eq.u32 %r228,%r106,0;
@ %r228 bra $L131;
mov.u64 %r64,0;
cvt.u32.u64 %r214,%r64;
cvt.u32.u64 %r52,%r64;
cvt.u32.u64 %r217,%r64;
mov.u64 %r148,%r64;
.loc 1 1115 8
add.u64 %r651,%frame,160;
bra $L4;
$L132:
mov.u64 %r112,%r135;
bra $L6;
$L139:
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L140:
mov.u64 %r112,%r135;
bra $L6;
$L142:
mov.u64 %r112,%r135;
bra $L6;
$L145:
mov.u32 %r52,%r196;
mov.u64 %r112,%r135;
bra $L6;
$L147:
mov.u64 %r112,%r135;
$L6:
.loc 1 560 15
add.u64 %r135,%r112,4;
.loc 1 560 9
ld.u32 %r106,[%r112];
.loc 1 561 10
setp.eq.u32 %r229,%r106,0;
@ %r229 bra $L1;
$L4:
.loc 1 563 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r106;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r231,[%value_in];
}
mov.u32 %r28,%r231;
.loc 1 563 10
setp.eq.u32 %r232,%r28,0;
@ %r232 bra $L5;
$L7:
.loc 1 565 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r235,[%value_in];
}
.loc 1 565 10
setp.eq.u32 %r236,%r235,-1;
@ %r236 bra $L132;
.loc 1 565 49
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r235;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r238,[%value_in];
}
.loc 1 565 46
setp.ne.u32 %r239,%r238,0;
@ %r239 bra $L7;
bra $L264;
$L5:
.loc 1 571 10
setp.ne.u32 %r240,%r106,37;
@ %r240 bra $L9;
.loc 1 586 11
ld.u32 %r120,[%r135];
.loc 1 574 13
mov.u32 %r117,%r28;
.loc 1 586 11
mov.u64 %r26,%r135;
.loc 1 573 13
mov.u64 %r30,0;
bra $L10;
$L266:
.loc 1 586 11
ld.u32 %r120,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r135;
.loc 1 606 10
mov.u32 %r117,16;
.loc 1 586 11
mov.u64 %r30,0;
$L10:
.loc 1 586 15
add.u64 %r135,%r26,4;
.loc 1 588 7
setp.eq.u32 %r241,%r120,104;
@ %r241 bra $L11;
setp.gt.s32 %r242,%r120,104;
@ %r242 bra $L12;
setp.eq.u32 %r243,%r120,76;
@ %r243 bra $L13;
setp.gt.s32 %r244,%r120,76;
@ %r244 bra $L14;
setp.eq.u32 %r245,%r120,42;
@ %r245 bra $L15;
setp.gt.s32 %r246,%r120,42;
@ %r246 bra $L16;
setp.eq.u32 %r247,%r120,37;
@ %r247 bra $L9;
bra $L1;
$L16:
add.u32 %r248,%r120,-48;
setp.gt.u32 %r249,%r248,9;
@ ! %r249 bra $L265;
bra $L1;
$L14:
setp.eq.u32 %r250,%r120,99;
@ %r250 bra $L18;
setp.gt.s32 %r251,%r120,99;
@ %r251 bra $L19;
setp.eq.u32 %r252,%r120,88;
@ %r252 bra $L20;
setp.eq.u32 %r253,%r120,91;
@ %r253 bra $L21;
bra $L1;
$L19:
setp.eq.u32 %r254,%r120,100;
@ %r254 bra $L133;
bra $L1;
$L12:
setp.eq.u32 %r255,%r120,111;
@ %r255 bra $L134;
setp.gt.s32 %r256,%r120,111;
@ %r256 bra $L24;
setp.eq.u32 %r257,%r120,108;
@ %r257 bra $L25;
setp.eq.u32 %r258,%r120,110;
@ %r258 bra $L26;
setp.eq.u32 %r259,%r120,105;
@ %r259 bra $L135;
bra $L1;
$L24:
setp.eq.u32 %r260,%r120,115;
@ %r260 bra $L136;
setp.gt.s32 %r261,%r120,115;
@ %r261 bra $L27;
setp.eq.u32 %r262,%r120,112;
@ %r262 bra $L28;
bra $L1;
$L27:
setp.eq.u32 %r263,%r120,117;
@ %r263 bra $L137;
setp.eq.u32 %r264,%r120,120;
@ %r264 bra $L20;
bra $L1;
$L9:
.loc 1 592 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r267,[%value_in];
}
.loc 1 592 7
setp.eq.u32 %r268,%r267,-1;
@ %r268 bra $L31;
.loc 1 594 7
setp.eq.u32 %r269,%r106,%r267;
@ %r269 bra $L30;
.loc 1 596 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r267;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r273,[%value_in];
}
.loc 1 597 8
bra $L31;
$L30:
.loc 1 599 9
add.u32 %r52,%r52,1;
.loc 1 600 4
mov.u64 %r112,%r135;
bra $L6;
$L15:
.loc 1 604 8
set.u32.ne.u64 %r275,%r30,0;
neg.s32 %r276,%r275;
.loc 1 603 7
set.u32.ne.u32 %r278,%r117,0;
neg.s32 %r279,%r278;
.loc 1 604 8
cvt.u16.u32 %r281,%r276;
cvt.u16.u32 %r282,%r279;
or.b16 %r280,%r281,%r282;
cvt.u32.u16 %r283,%r280;
cvt.u16.u8 %r284,%r283;
setp.ne.u16 %r285,%r284,0;
@ ! %r285 bra $L266;
bra $L1;
$L25:
.loc 1 609 14
and.b32 %r286,%r117,15;
.loc 1 609 7
setp.ne.u32 %r287,%r286,0;
@ %r287 bra $L1;
.loc 1 612 8
ld.u32 %r120,[%r26+4];
.loc 1 612 7
setp.ne.u32 %r288,%r120,108;
@ %r288 bra $L33;
.loc 1 615 14
or.b32 %r117,%r117,2;
.loc 1 586 11
ld.u32 %r120,[%r26+8];
.loc 1 614 8
add.u64 %r26,%r26,8;
bra $L10;
$L33:
.loc 1 619 12
or.b32 %r117,%r117,1;
.loc 1 586 15
mov.u64 %r26,%r135;
bra $L10;
$L13:
.loc 1 622 14
and.b32 %r289,%r117,15;
.loc 1 622 7
setp.ne.u32 %r290,%r289,0;
@ %r290 bra $L1;
.loc 1 624 10
or.b32 %r117,%r117,2;
.loc 1 586 11
ld.u32 %r120,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r135;
.loc 1 625 4
bra $L10;
$L11:
.loc 1 637 12
or.b32 %r117,%r117,4;
.loc 1 586 11
ld.u32 %r120,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r135;
.loc 1 638 4
bra $L10;
$L265:
.loc 1 703 14
and.b32 %r291,%r117,143;
.loc 1 703 7
setp.ne.u32 %r292,%r291,0;
@ %r292 bra $L1;
.loc 1 705 18
shl.b64 %r294,%r30,2;
add.u64 %r295,%r294,%r30;
add.u64 %r296,%r295,%r295;
add.u64 %r125,%r296,-48;
.loc 1 705 23
cvt.u64.u32 %r297,%r120;
.loc 1 705 10
add.u64 %r30,%r297,%r125;
.loc 1 586 11
ld.u32 %r120,[%r26+4];
.loc 1 586 15
mov.u64 %r26,%r135;
.loc 1 706 4
bra $L10;
$L20:
.loc 1 749 10
or.b32 %r117,%r117,512;
.loc 1 751 9
mov.u64 %r64,_wcstoul_r;
.loc 1 752 9
mov.u32 %r28,16;
.loc 1 753 4
bra $L23;
$L21:
.loc 1 781 8
ld.u32 %r37,[%r26+4];
.loc 1 781 7
setp.ne.u32 %r298,%r37,94;
@ %r298 bra $L35;
.loc 1 784 8
add.u64 %r135,%r26,8;
.loc 1 789 8
ld.u32 %r37,[%r26+8];
.loc 1 783 17
mov.u32 %r28,1;
$L35:
.loc 1 790 9
add.u64 %r112,%r135,4;
.loc 1 789 7
setp.ne.u32 %r299,%r37,93;
@ %r299 bra $L138;
.loc 1 791 11
ld.u32 %r37,[%r135+4];
.loc 1 790 9
mov.u64 %r146,%r112;
.loc 1 792 9
add.u64 %r112,%r135,8;
bra $L36;
$L138:
mov.u64 %r146,%r135;
$L36:
.loc 1 791 24
set.u32.ne.u32 %r301,%r37,93;
neg.s32 %r302,%r301;
set.u32.ne.u32 %r304,%r37,0;
neg.s32 %r305,%r304;
cvt.u16.u32 %r307,%r302;
cvt.u16.u32 %r308,%r305;
and.b16 %r306,%r307,%r308;
.loc 1 791 10
cvt.u32.u16 %r309,%r306;
cvt.u16.u8 %r310,%r309;
setp.eq.u16 %r311,%r310,0;
@ %r311 bra $L37;
$L38:
mov.u64 %r143,%r146;
.loc 1 792 9
add.u64 %r146,%r146,4;
.loc 1 791 11
ld.u32 %r144,[%r146];
.loc 1 791 24
set.u32.ne.u32 %r313,%r144,0;
neg.s32 %r314,%r313;
set.u32.ne.u32 %r316,%r144,93;
neg.s32 %r317,%r316;
cvt.u16.u32 %r319,%r314;
cvt.u16.u32 %r320,%r317;
and.b16 %r318,%r319,%r320;
.loc 1 791 10
cvt.u32.u16 %r321,%r318;
cvt.u16.u8 %r322,%r321;
setp.ne.u16 %r323,%r322,0;
@ %r323 bra $L38;
.loc 1 794 7
add.u64 %r112,%r143,8;
$L37:
.loc 1 965 7
setp.eq.u64 %r324,%r30,0;
.loc 1 966 12
selp.u64 %r30,-1,%r30,%r324;
.loc 1 991 27
sub.u64 %r377,%r146,%r135;
shr.s64 %r170,%r377,2;
.loc 1 968 27
and.b32 %r379,%r117,17;
.loc 1 968 7
setp.eq.u32 %r380,%r379,17;
@ ! %r380 bra $L267;
bra $L143;
$L18:
max.u64 %r108,%r30,1;
and.b32 %r179,%r117,1;
and.b32 %r201,%r117,16;
.loc 1 879 14
setp.ne.u32 %r325,%r179,0;
@ %r325 bra $L41;
bra $L268;
$L28:
.loc 1 811 10
or.b32 %r117,%r117,544;
.loc 1 813 9
mov.u64 %r64,_wcstoul_r;
.loc 1 814 9
mov.u32 %r28,16;
.loc 1 815 4
bra $L23;
$L26:
.loc 1 818 14
and.b32 %r326,%r117,16;
.loc 1 818 7
setp.ne.u32 %r327,%r326,0;
@ %r327 bra $L139;
.loc 1 830 11
add.u64 %r328,%r221,7;
and.b64 %r215,%r328,-8;
ld.u64 %r184,[%r215];
add.u64 %r221,%r215,8;
.loc 1 828 14
and.b32 %r329,%r117,4;
.loc 1 828 7
setp.eq.u32 %r330,%r329,0;
@ %r330 bra $L43;
.loc 1 831 12
st.u16 [%r184],%r52;
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L43:
.loc 1 833 19
and.b32 %r331,%r117,1;
.loc 1 833 12
setp.eq.u32 %r332,%r331,0;
@ %r332 bra $L44;
.loc 1 836 12
cvt.s64.s32 %r333,%r52;
st.u64 [%r184],%r333;
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L44:
.loc 1 839 19
and.b32 %r334,%r117,2;
.loc 1 839 12
setp.eq.u32 %r335,%r334,0;
@ %r335 bra $L45;
.loc 1 842 13
cvt.s64.s32 %r336,%r52;
st.u64 [%r184],%r336;
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L45:
.loc 1 848 12
st.u32 [%r184],%r52;
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L133:
.loc 1 725 9
mov.u64 %r64,_wcstol_r;
.loc 1 726 9
mov.u32 %r214,10;
.loc 1 724 6
mov.u32 %r195,3;
bra $L46;
$L136:
.loc 1 588 7
mov.u32 %r195,2;
bra $L46;
$L47:
.loc 1 863 11
add.u32 %r52,%r52,1;
$L46:
.loc 1 862 17
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r339,[%value_in];
}
.loc 1 862 10
setp.eq.u32 %r340,%r339,-1;
@ %r340 bra $L31;
.loc 1 862 50
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r339;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r342,[%value_in];
}
.loc 1 862 47
setp.ne.u32 %r343,%r342,0;
@ %r343 bra $L47;
bra $L269;
$L41:
.loc 1 887 11
setp.ne.u32 %r644,%r201,0;
@ %r644 bra $L49;
.loc 1 894 5
add.u64 %r142,%r221,7;
and.b64 %r141,%r142,-8;
add.u64 %r221,%r141,8;
ld.u64 %r148,[%r141];
$L49:
.loc 1 904 11
mov.u64 %r138,0;
bra $L50;
$L53:
.loc 1 898 8
@ %r644 bra $L51;
.loc 1 904 14
st.u32 [%r148],%r349;
.loc 1 904 11
add.u64 %r148,%r148,4;
$L51:
add.u32 %r198,%r203,1;
.loc 1 896 14
add.u64 %r138,%r138,1;
setp.eq.u64 %r346,%r108,%r138;
@ %r346 bra $L52;
$L50:
cvt.u32.u64 %r203,%r138;
cvt.u32.u64 %r198,%r138;
.loc 1 896 37
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r349,[%value_in];
}
.loc 1 896 28
setp.ne.u32 %r350,%r349,-1;
@ %r350 bra $L53;
.loc 1 908 11
setp.eq.u32 %r351,%r198,0;
@ %r351 bra $L31;
$L52:
.loc 1 910 14
add.u32 %r52,%r52,%r198;
.loc 1 914 11
@ %r644 bra $L140;
.loc 1 915 12
add.u32 %r217,%r217,1;
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L268:
.loc 1 925 11
setp.ne.u32 %r644,%r201,0;
@ %r644 bra $L141;
.loc 1 932 7
add.u64 %r154,%r221,7;
and.b64 %r153,%r154,-8;
add.u64 %r221,%r153,8;
ld.u64 %r121,[%r153];
bra $L54;
$L141:
.loc 1 926 7
add.u64 %r121,%frame,168;
$L54:
.loc 1 934 8
mov.u64 %r356,8;
mov.u32 %r355,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r651;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r355;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r356;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r358,[%value_in];
}
bra $L55;
$L60:
.loc 1 937 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r121;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r373;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r651;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r364,[%value_in];
}
.loc 1 938 8
setp.eq.u64 %r365,%r364,-1;
@ %r365 bra $L31;
.loc 1 941 8
setp.ne.u64 %r366,%r364,0;
@ %r366 bra $L56;
.loc 1 941 20
ld.u32 %r367,[%frame+160];
setp.eq.u32 %r368,%r367,-4;
@ %r368 bra $L57;
$L56:
.loc 1 942 12
add.u64 %r108,%r108,-1;
$L57:
.loc 1 943 8
@ %r644 bra $L58;
.loc 1 948 13
add.u64 %r121,%r121,%r364;
$L58:
.loc 1 950 6
add.u32 %r179,%r179,1;
.loc 1 935 14
setp.eq.u64 %r370,%r108,0;
@ %r370 bra $L59;
$L55:
.loc 1 935 35
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r373,[%value_in];
}
.loc 1 935 26
setp.ne.u32 %r374,%r373,-1;
@ %r374 bra $L60;
.loc 1 952 11
setp.eq.u32 %r375,%r179,0;
@ %r375 bra $L31;
$L59:
.loc 1 954 14
add.u32 %r52,%r52,%r179;
.loc 1 958 11
@ %r644 bra $L142;
.loc 1 959 12
add.u32 %r217,%r217,1;
.loc 1 586 15
mov.u64 %r112,%r135;
bra $L6;
$L66:
add.u64 %r200,%r200,1;
bra $L61;
$L143:
mov.u64 %r200,0;
.loc 1 971 14
setp.eq.u32 %r648,%r28,0;
$L61:
cvt.u32.u64 %r116,%r200;
.loc 1 971 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r383,[%value_in];
}
.loc 1 971 14
setp.eq.u32 %r384,%r383,-1;
@ %r384 bra $L63;
.loc 1 972 8
setp.eq.u64 %r385,%r30,%r200;
@ %r385 bra $L64;
.loc 1 971 14
@ %r648 bra $L65;
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r135;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r383;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r170;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r390,[%value_in];
}
.loc 1 972 24
setp.eq.u64 %r391,%r390,0;
@ %r391 bra $L66;
bra $L64;
$L65:
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r135;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r383;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r170;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r395,[%value_in];
}
.loc 1 972 24
setp.ne.u64 %r396,%r395,0;
@ %r396 bra $L66;
bra $L64;
$L63:
.loc 1 976 11
setp.eq.u32 %r397,%r116,0;
@ ! %r397 bra $L67;
bra $L1;
$L267:
and.b32 %r116,%r117,1;
.loc 1 979 12
setp.eq.u32 %r398,%r116,0;
@ %r398 bra $L68;
.loc 1 989 10
add.u64 %r211,%r221,7;
and.b64 %r176,%r211,-8;
add.u64 %r221,%r176,8;
ld.u64 %r173,[%r176];
mov.u64 %r114,%r173;
.loc 1 990 14
setp.eq.u32 %r649,%r28,0;
bra $L69;
$L73:
.loc 1 993 10
st.u32 [%r114],%r401;
add.u64 %r30,%r30,-1;
add.u64 %r114,%r114,4;
$L69:
mov.u64 %r148,%r114;
.loc 1 990 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r401,[%value_in];
}
.loc 1 990 14
setp.eq.u32 %r402,%r401,-1;
@ %r402 bra $L70;
.loc 1 991 8
setp.eq.u64 %r403,%r30,0;
@ %r403 bra $L71;
.loc 1 990 14
@ %r649 bra $L72;
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r135;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r401;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r170;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r408,[%value_in];
}
.loc 1 991 24
setp.eq.u64 %r409,%r408,0;
@ %r409 bra $L73;
bra $L71;
$L72:
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r135;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r401;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r170;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r413,[%value_in];
}
.loc 1 991 24
setp.ne.u64 %r414,%r413,0;
@ %r414 bra $L73;
bra $L71;
$L70:
.loc 1 1000 14
sub.u64 %r415,%r114,%r173;
shr.s64 %r417,%r415,2;
.loc 1 1000 10
cvt.u32.u64 %r116,%r417;
.loc 1 1001 11
setp.eq.u32 %r418,%r116,0;
@ %r418 bra $L1;
.loc 1 1003 11
mov.u32 %r419,0;
st.u32 [%r114],%r419;
.loc 1 1007 17
add.u32 %r217,%r217,1;
bra $L67;
$L68:
and.b32 %r74,%r117,16;
.loc 1 1017 11
setp.ne.u32 %r646,%r74,0;
@ %r646 bra $L144;
.loc 1 1024 7
add.u64 %r115,%r221,7;
and.b64 %r109,%r115,-8;
add.u64 %r221,%r109,8;
ld.u64 %r122,[%r109];
bra $L74;
$L144:
.loc 1 1018 7
add.u64 %r122,%frame,168;
$L74:
.loc 1 1026 8
mov.u64 %r423,8;
mov.u32 %r422,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r651;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r422;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r423;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r425,[%value_in];
}
.loc 1 1027 14
setp.eq.u32 %r650,%r28,0;
bra $L75;
$L82:
.loc 1 1030 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r122;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r439;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r651;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r431,[%value_in];
}
.loc 1 1031 8
setp.eq.u64 %r432,%r431,-1;
@ %r432 bra $L31;
.loc 1 1034 8
setp.ne.u64 %r433,%r431,0;
@ %r433 bra $L76;
.loc 1 1034 20
ld.u32 %r434,[%frame+160];
setp.eq.u32 %r435,%r434,-4;
@ %r435 bra $L77;
$L76:
.loc 1 1035 12
add.u64 %r30,%r30,-1;
$L77:
.loc 1 1036 8
@ %r646 bra $L78;
.loc 1 1038 13
add.u64 %r122,%r122,%r431;
$L78:
.loc 1 1043 6
add.u32 %r116,%r116,1;
$L75:
.loc 1 1027 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r439,[%value_in];
}
.loc 1 1027 14
setp.eq.u32 %r440,%r439,-1;
@ %r440 bra $L79;
.loc 1 1028 8
setp.eq.u64 %r441,%r30,0;
@ %r441 bra $L80;
.loc 1 1027 14
@ %r650 bra $L81;
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r135;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r439;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r170;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r446,[%value_in];
}
.loc 1 1028 22
setp.eq.u64 %r447,%r446,0;
@ %r447 bra $L82;
bra $L80;
$L81:
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r135;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r439;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r170;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r451,[%value_in];
}
.loc 1 1028 22
setp.ne.u64 %r452,%r451,0;
@ %r452 bra $L82;
bra $L80;
$L79:
.loc 1 1047 11
@ %r646 bra $L67;
.loc 1 1049 10
mov.u32 %r454,0;
st.u8 [%r122],%r454;
.loc 1 1053 14
add.u32 %r217,%r217,1;
$L67:
.loc 1 1056 10
add.u32 %r52,%r52,%r116;
.loc 1 1057 4
bra $L6;
$L129:
.loc 1 1061 7
setp.ne.u64 %r455,%r30,0;
.loc 1 1062 19
selp.u64 %r30,%r30,-1,%r455;
.loc 1 1063 27
and.b32 %r456,%r117,17;
.loc 1 1063 7
setp.ne.u32 %r457,%r456,17;
@ %r457 bra $L84;
mov.u64 %r191,%r30;
cvt.u32.u64 %r459,%r191;
add.u32 %r458,%r52,%r459;
$L86:
cvt.u32.u64 %r460,%r191;
sub.u32 %r196,%r458,%r460;
.loc 1 1065 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r463,[%value_in];
}
.loc 1 1065 14
setp.eq.u32 %r464,%r463,-1;
@ %r464 bra $L145;
.loc 1 1066 8
setp.eq.u64 %r465,%r191,0;
@ %r465 bra $L85;
.loc 1 1066 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r463;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r467,[%value_in];
}
.loc 1 1066 24
add.u64 %r191,%r191,-1;
setp.eq.u32 %r468,%r467,0;
@ %r468 bra $L86;
bra $L85;
$L84:
.loc 1 1071 19
and.b32 %r469,%r117,1;
.loc 1 1071 12
setp.eq.u32 %r470,%r469,0;
@ %r470 bra $L87;
.loc 1 1081 10
add.u64 %r210,%r221,7;
and.b64 %r209,%r210,-8;
add.u64 %r221,%r209,8;
ld.u64 %r194,[%r209];
.loc 1 1082 14
mov.u64 %r188,%r30;
cvt.u32.u64 %r472,%r188;
add.u32 %r471,%r52,%r472;
bra $L88;
$L91:
.loc 1 1085 10
st.u32 [%r194],%r476;
add.u64 %r194,%r194,4;
$L88:
cvt.u32.u64 %r473,%r188;
sub.u32 %r128,%r471,%r473;
mov.u64 %r148,%r194;
.loc 1 1082 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r476,[%value_in];
}
.loc 1 1082 14
setp.eq.u32 %r477,%r476,-1;
@ %r477 bra $L89;
.loc 1 1083 8
setp.eq.u64 %r478,%r188,0;
@ %r478 bra $L90;
.loc 1 1083 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r476;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r480,[%value_in];
}
.loc 1 1083 24
add.u64 %r188,%r188,-1;
setp.eq.u32 %r481,%r480,0;
@ %r481 bra $L91;
bra $L90;
$L89:
.loc 1 1093 11
mov.u32 %r482,0;
st.u32 [%r194],%r482;
.loc 1 1097 17
add.u32 %r217,%r217,1;
mov.u32 %r52,%r128;
mov.u64 %r112,%r135;
bra $L6;
$L87:
.loc 1 1107 18
and.b32 %r71,%r117,16;
.loc 1 1107 11
setp.ne.u32 %r645,%r71,0;
@ %r645 bra $L146;
.loc 1 1114 7
add.u64 %r119,%r221,7;
and.b64 %r113,%r119,-8;
add.u64 %r221,%r113,8;
ld.u64 %r123,[%r113];
bra $L92;
$L146:
.loc 1 1108 7
add.u64 %r123,%frame,168;
$L92:
.loc 1 1115 8
mov.u64 %r486,8;
mov.u32 %r485,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r651;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r485;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r486;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r488,[%value_in];
}
.loc 1 1116 14
bra $L93;
$L99:
.loc 1 1119 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r123;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r501;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r651;
call (%value_in),wcrtomb,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r493,[%value_in];
}
.loc 1 1120 8
setp.eq.u64 %r494,%r493,-1;
@ %r494 bra $L31;
.loc 1 1123 8
setp.ne.u64 %r495,%r493,0;
@ %r495 bra $L94;
.loc 1 1123 20
ld.u32 %r496,[%frame+160];
setp.eq.u32 %r497,%r496,-4;
@ %r497 bra $L95;
$L94:
.loc 1 1124 12
add.u64 %r30,%r30,-1;
$L95:
.loc 1 1125 8
@ %r645 bra $L96;
.loc 1 1127 13
add.u64 %r123,%r123,%r493;
$L96:
.loc 1 1132 10
add.u32 %r52,%r52,1;
$L93:
.loc 1 1116 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r501,[%value_in];
}
.loc 1 1116 14
setp.eq.u32 %r502,%r501,-1;
@ %r502 bra $L97;
.loc 1 1117 8
setp.eq.u64 %r503,%r30,0;
@ %r503 bra $L98;
.loc 1 1117 26
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r501;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r505,[%value_in];
}
.loc 1 1117 22
setp.eq.u32 %r506,%r505,0;
@ %r506 bra $L99;
bra $L98;
$L97:
.loc 1 1136 11
@ %r645 bra $L147;
.loc 1 1138 10
mov.u32 %r508,0;
st.u8 [%r123],%r508;
.loc 1 1142 14
add.u32 %r217,%r217,1;
mov.u64 %r112,%r135;
bra $L6;
$L271:
.loc 1 1150 19
add.u64 %r509,%r30,-1;
.loc 1 1150 7
setp.le.u64 %r510,%r509,38;
.loc 1 1151 12
selp.u64 %r30,%r30,39,%r510;
.loc 1 1152 10
or.b32 %r118,%r117,1408;
mov.u64 %r31,%frame;
shl.b64 %r511,%r30,2;
add.u64 %r202,%r511,%frame;
$L117:
mov.u64 %r148,%r31;
.loc 1 1155 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r219;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r514,[%value_in];
}
setp.gt.u32 %r515,%r514,57;
@ %r515 bra $L101;
setp.gt.u32 %r516,%r514,55;
@ %r516 bra $L102;
setp.eq.u32 %r517,%r514,48;
@ %r517 bra $L103;
setp.gt.u32 %r518,%r514,48;
@ %r518 bra $L104;
add.u32 %r519,%r514,-43;
and.b32 %r520,%r519,-3;
setp.eq.u32 %r521,%r520,0;
@ ! %r521 bra $L106;
bra $L105;
$L104:
.loc 1 1191 19
cvta.const.u64 %r522,basefix$0;
cvt.s64.s32 %r523,%r214;
add.u64 %r524,%r523,%r523;
add.u64 %r525,%r522,%r524;
ld.s16 %r214,[%r525];
.loc 1 1192 11
and.b32 %r118,%r118,-897;
.loc 1 1193 5
bra $L107;
$L101:
setp.gt.u32 %r526,%r514,102;
@ %r526 bra $L108;
setp.gt.u32 %r527,%r514,96;
@ %r527 bra $L109;
setp.gt.u32 %r528,%r514,70;
@ %r528 bra $L110;
setp.gt.u32 %r529,%r514,64;
@ ! %r529 bra $L106;
bra $L109;
$L110:
setp.eq.u32 %r530,%r514,88;
@ %r530 bra $L111;
bra $L106;
$L108:
setp.eq.u32 %r531,%r514,120;
@ %r531 bra $L111;
bra $L270;
$L103:
.loc 1 1172 8
setp.ne.u32 %r532,%r214,0;
@ %r532 bra $L113;
.loc 1 1175 15
or.b32 %r118,%r118,512;
.loc 1 1174 14
mov.u32 %r214,8;
$L113:
.loc 1 1177 15
and.b32 %r533,%r118,1024;
.loc 1 1177 8
setp.eq.u32 %r534,%r533,0;
@ %r534 bra $L114;
.loc 1 1178 13
and.b32 %r118,%r118,-1409;
bra $L107;
$L114:
.loc 1 1180 13
and.b32 %r118,%r118,-897;
bra $L107;
$L102:
.loc 1 1198 19
cvta.const.u64 %r535,basefix$0;
cvt.s64.s32 %r536,%r214;
add.u64 %r537,%r536,%r536;
add.u64 %r538,%r535,%r537;
ld.s16 %r214,[%r538];
.loc 1 1199 8
setp.le.s32 %r539,%r214,8;
@ %r539 bra $L106;
.loc 1 1201 11
and.b32 %r118,%r118,-897;
.loc 1 1202 5
bra $L107;
$L109:
.loc 1 1218 8
setp.le.s32 %r540,%r214,10;
@ %r540 bra $L106;
.loc 1 1220 11
and.b32 %r118,%r118,-897;
.loc 1 1221 5
bra $L107;
$L105:
.loc 1 1226 15
and.b32 %r541,%r118,128;
.loc 1 1226 8
setp.eq.u32 %r542,%r541,0;
@ %r542 bra $L106;
.loc 1 1228 15
and.b32 %r155,%r118,-129;
.loc 1 1229 15
or.b32 %r118,%r155,65536;
.loc 1 1230 9
bra $L107;
$L111:
.loc 1 1237 16
and.b32 %r543,%r118,512;
.loc 1 1237 8
setp.eq.u32 %r544,%r543,0;
@ %r544 bra $L106;
.loc 1 1237 52
and.b32 %r545,%r118,65536;
.loc 1 1237 41
setp.ne.u32 %r546,%r545,0;
selp.u64 %r124,8,4,%r546;
add.u64 %r547,%frame,%r124;
.loc 1 1237 25
setp.ne.u64 %r548,%r31,%r547;
@ %r548 bra $L106;
.loc 1 1240 15
and.b32 %r118,%r118,-513;
.loc 1 1239 14
mov.u32 %r214,16;
.loc 1 1241 9
bra $L107;
$L270:
.loc 1 1250 11
setp.eq.u32 %r549,%r514,-1;
@ %r549 bra $L116;
$L106:
.loc 1 1251 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r514;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r553,[%value_in];
}
bra $L116;
$L107:
add.u64 %r31,%r31,4;
.loc 1 1257 13
st.u32 [%r148],%r514;
.loc 1 1153 4
setp.ne.u64 %r554,%r31,%r202;
@ %r554 bra $L117;
.loc 1 1257 10
mov.u64 %r148,%r31;
$L116:
.loc 1 1267 14
and.b32 %r555,%r118,256;
.loc 1 1267 7
setp.eq.u32 %r556,%r555,0;
@ %r556 bra $L118;
.loc 1 1269 11
setp.ge.u64 %r557,%frame,%r31;
@ %r557 bra $L1;
.loc 1 1270 3
ld.u32 %r561,[%r31+-4];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r561;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r562,[%value_in];
}
bra $L1;
$L118:
.loc 1 1273 9
ld.u32 %r89,[%r31+-4];
.loc 1 1274 23
and.b32 %r563,%r89,-33;
.loc 1 1274 7
setp.ne.u32 %r564,%r563,88;
@ %r564 bra $L119;
.loc 1 1276 8
add.u64 %r148,%r31,-4;
.loc 1 1277 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r89;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r568,[%value_in];
}
$L119:
.loc 1 1279 15
and.b32 %r569,%r118,16;
.loc 1 1279 7
setp.ne.u32 %r570,%r569,0;
@ %r570 bra $L120;
.loc 1 1283 11
st.u32 [%r148],%r569;
.loc 1 1284 15
mov.u64 %r574,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r574;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r214;
call (%value_in),%r64,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r576,[%value_in];
}
.loc 1 830 11
add.u64 %r577,%r221,7;
and.b64 %r126,%r577,-8;
add.u64 %r221,%r126,8;
.loc 1 1285 18
and.b32 %r578,%r118,32;
.loc 1 1285 11
setp.eq.u32 %r579,%r578,0;
@ %r579 bra $L121;
.loc 1 1287 12
ld.u64 %r164,[%r126];
.loc 1 1297 11
st.u64 [%r164],%r576;
bra $L122;
$L121:
.loc 1 1306 23
and.b32 %r580,%r118,4;
.loc 1 1306 16
setp.eq.u32 %r581,%r580,0;
@ %r581 bra $L123;
.loc 1 1309 9
ld.u64 %r582,[%r126];
st.u16 [%r582],%r576;
bra $L122;
$L123:
.loc 1 1311 23
and.b32 %r583,%r118,1;
.loc 1 1311 16
setp.eq.u32 %r584,%r583,0;
@ %r584 bra $L124;
.loc 1 1314 9
ld.u64 %r585,[%r126];
st.u64 [%r585],%r576;
bra $L122;
$L124:
.loc 1 1317 23
and.b32 %r586,%r118,2;
.loc 1 1317 16
setp.eq.u32 %r587,%r586,0;
@ %r587 bra $L125;
.loc 1 1320 8
mov.u64 %r588,_wcstoul_r;
setp.ne.u64 %r589,%r64,%r588;
@ %r589 bra $L126;
.loc 1 1321 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r574;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r214;
call (%value_in),_wcstoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r594,[%value_in];
}
.loc 1 1325 10
mov.u64 %r92,%r594;
bra $L127;
$L126:
.loc 1 1323 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r574;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r214;
call (%value_in),_wcstoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r599,[%value_in];
}
mov.u64 %r92,%r599;
$L127:
.loc 1 1325 10
ld.u64 %r600,[%r126];
st.u64 [%r600],%r92;
bra $L122;
$L125:
.loc 1 1331 9
ld.u64 %r601,[%r126];
st.u32 [%r601],%r576;
$L122:
.loc 1 1333 17
add.u32 %r217,%r217,1;
$L120:
.loc 1 1335 15
sub.u64 %r602,%r148,%frame;
shr.s64 %r604,%r602,2;
.loc 1 1335 10
cvt.u32.u64 %r605,%r604;
add.u32 %r52,%r52,%r605;
.loc 1 1336 4
mov.u64 %r112,%r135;
bra $L6;
$L31:
.loc 1 1656 63
setp.eq.u32 %r606,%r217,0;
@ %r606 bra $L149;
.loc 1 1656 25
ld.u16 %r608,[%r219+16];
and.b16 %r607,%r608,64;
setp.ne.u16 %r609,%r607,0;
.loc 1 1656 63
selp.u32 %r217,-1,%r217,%r609;
bra $L1;
$L131:
.loc 1 561 10
mov.u32 %r217,%r106;
bra $L1;
$L149:
.loc 1 1656 63
mov.u32 %r217,-1;
bra $L1;
$L3:
$L128:
$L264:
.loc 1 568 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r235;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r614,[%value_in];
}
mov.u64 %r112,%r135;
bra $L6;
$L64:
.loc 1 975 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r383;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r618,[%value_in];
}
bra $L63;
$L71:
.loc 1 999 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r401;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r622,[%value_in];
}
bra $L70;
$L80:
.loc 1 1046 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r439;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r626,[%value_in];
}
bra $L79;
$L85:
.loc 1 1069 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r463;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r630,[%value_in];
}
mov.u32 %r52,%r196;
mov.u64 %r112,%r135;
bra $L6;
$L90:
.loc 1 1092 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r476;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r634,[%value_in];
}
bra $L89;
$L98:
.loc 1 1135 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r501;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r638,[%value_in];
}
bra $L97;
$L269:
.loc 1 866 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r218;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r339;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r219;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r642,[%value_in];
}
.loc 1 872 7
setp.eq.u32 %r643,%r195,2;
@ %r643 bra $L129;
bra $L271;
$L134:
.loc 1 588 7
mov.u64 %r64,_wcstoul_r;
mov.u32 %r28,8;
bra $L23;
$L135:
.loc 1 731 9
mov.u64 %r64,_wcstol_r;
bra $L23;
$L137:
.loc 1 743 9
mov.u64 %r64,_wcstoul_r;
.loc 1 744 9
mov.u32 %r28,10;
$L23:
mov.u32 %r214,%r28;
mov.u32 %r195,3;
bra $L46;
$L1:
.loc 1 1665 1
mov.u32 %value,%r217;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfiwscanf
.visible .func (.param .u32 %value_out) vfiwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 233 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 235 3
setp.eq.u64 %r28,%r23,0;
@ %r28 bra $L273;
ld.u32 %r29,[%r23+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L273;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L273:
.loc 1 236 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfiwscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 237 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __svfiwscanf
.visible .func (.param .u32 %value_out) __svfiwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 244 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfiwscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 245 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vfiwscanf_r
.visible .func (.param .u32 %value_out) _vfiwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 255 3
setp.eq.u64 %r28,%r24,0;
@ %r28 bra $L279;
ld.u32 %r29,[%r24+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L279;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call __sinit,(%out_arg1);
}
$L279:
.loc 1 256 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfiwscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 257 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
/1843           1612277263  0     0     100666  88426     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: _vfprintf_r
.visible .func (.param .u32 %value_out) _vfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfprintf.c"
// BEGIN GLOBAL FUNCTION DECL: vfprintf
.visible .func (.param .u32 %value_out) vfprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN FUNCTION DECL: __sbprintf
.func (.param .u32 %value_out) __sbprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.extern .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sprint_r
.extern .func (.param .u32 %value_out) __sprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.extern .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN VAR DEF: zeroes$0
.const .align 1 .u8 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 1 .u8 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[4] =
{73,78,70,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[4] =
{105,110,102,0 };
// BEGIN VAR DEF: $LC2
.const .align 1 .u8 $LC2[4] =
{78,65,78,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[4] =
{110,97,110,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC5
.const .align 1 .u8 $LC5[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC6
.const .align 1 .u8 $LC6[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: $LC7
.const .align 1 .u8 $LC7[2] =
{48,0 };
// BEGIN GLOBAL FUNCTION DEF: _vfprintf_r
.visible .func (.param .u32 %value_out) _vfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[224];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u32 %r27;
.reg .f64 %r28;
.reg .u64 %r39;
.reg .u32 %r43;
.reg .u64 %r45;
.reg .u64 %r60;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .u64 %r71;
.reg .u32 %r122;
.reg .u32 %r123;
.reg .u32 %r135;
.reg .u32 %r136;
.reg .u64 %r138;
.reg .u32 %r139;
.reg .u32 %r143;
.reg .u32 %r144;
.reg .u32 %r147;
.reg .u64 %r151;
.reg .u32 %r153;
.reg .u64 %r157;
.reg .u32 %r158;
.reg .u64 %r161;
.reg .u32 %r162;
.reg .u32 %r164;
.reg .u32 %r167;
.reg .u32 %r172;
.reg .u64 %r174;
.reg .u64 %r176;
.reg .u32 %r177;
.reg .u32 %r179;
.reg .u32 %r181;
.reg .u64 %r184;
.reg .u64 %r189;
.reg .u64 %r191;
.reg .u32 %r192;
.reg .u64 %r194;
.reg .u32 %r195;
.reg .u32 %r197;
.reg .u32 %r199;
.reg .u64 %r201;
.reg .u32 %r202;
.reg .u64 %r203;
.reg .u32 %r206;
.reg .u32 %r209;
.reg .u32 %r212;
.reg .u64 %r213;
.reg .u32 %r215;
.reg .u32 %r217;
.reg .u64 %r220;
.reg .u32 %r221;
.reg .u64 %r225;
.reg .u32 %r227;
.reg .u64 %r228;
.reg .f64 %r229;
.reg .u64 %r232;
.reg .u64 %r235;
.reg .u64 %r239;
.reg .u32 %r240;
.reg .u64 %r247;
.reg .u32 %r248;
.reg .u64 %r251;
.reg .u32 %r252;
.reg .u32 %r253;
.reg .u32 %r254;
.reg .u32 %r255;
.reg .u32 %r256;
.reg .u64 %r257;
.reg .u32 %r258;
.reg .u32 %r259;
.reg .u64 %r260;
.reg .u64 %r261;
.reg .u64 %r262;
.reg .u64 %r263;
.reg .u64 %r266;
.reg .u32 %r270;
.reg .u32 %r271;
.reg .u32 %r273;
.reg .u64 %r275;
.reg .u32 %r276;
.reg .u32 %r277;
.reg .u64 %r279;
.reg .u32 %r280;
.reg .u32 %r281;
.reg .u64 %r283;
.reg .u64 %r284;
.reg .u64 %r286;
.reg .u32 %r288;
.reg .u64 %r290;
.reg .u64 %r294;
.reg .u64 %r296;
.reg .u64 %r297;
.reg .u64 %r299;
.reg .u64 %r300;
.reg .u32 %r301;
.reg .u32 %r308;
.reg .u32 %r310;
.reg .u32 %r311;
.reg .u64 %r312;
.reg .u32 %r313;
.reg .u32 %r315;
.reg .u32 %r316;
.reg .u32 %r323;
.reg .u64 %r326;
.reg .u64 %r328;
.reg .u64 %r333;
.reg .u64 %r344;
.reg .u64 %r345;
.reg .u32 %r347;
.reg .u64 %r348;
.reg .u64 %r350;
.reg .u64 %r351;
.reg .u64 %r352;
.reg .u64 %r354;
.reg .u64 %r355;
.reg .u64 %r356;
.reg .u64 %r357;
.reg .u64 %r358;
.reg .u64 %r359;
.reg .u64 %r361;
.reg .u64 %r363;
.reg .u64 %r364;
.reg .u64 %r365;
.reg .u64 %r366;
.reg .u64 %r369;
.reg .u64 %r370;
.reg .u32 %r372;
.reg .u32 %r373;
.reg .u32 %r374;
.reg .u64 %r376;
.reg .u32 %r377;
.reg .u32 %r379;
.reg .u32 %r382;
.reg .u32 %r383;
.reg .u32 %r385;
.reg .u32 %r386;
.reg .u32 %r391;
.reg .u64 %r392;
.reg .u32 %r393;
.reg .u32 %r394;
.reg .u32 %r395;
.reg .u32 %r396;
.reg .u32 %r397;
.reg .u64 %r398;
.reg .u64 %r402;
.reg .u32 %r403;
.reg .u32 %r405;
.reg .u64 %r406;
.reg .u32 %r407;
.reg .u32 %r408;
.reg .u32 %r409;
.reg .u32 %r410;
.reg .u64 %r411;
.reg .u32 %r413;
.reg .u32 %r418;
.reg .u32 %r419;
.reg .u64 %r420;
.reg .u64 %r421;
.reg .u64 %r422;
.reg .u64 %r423;
.reg .u64 %r434;
.reg .u64 %r436;
.reg .pred %r437;
.reg .u32 %r438;
.reg .pred %r439;
.reg .u16 %r441;
.reg .u16 %r442;
.reg .pred %r443;
.reg .u16 %r444;
.reg .u32 %r447;
.reg .u16 %r448;
.reg .u16 %r449;
.reg .pred %r450;
.reg .u64 %r451;
.reg .pred %r452;
.reg .u32 %r455;
.reg .pred %r456;
.reg .u16 %r457;
.reg .u16 %r458;
.reg .pred %r459;
.reg .u16 %r460;
.reg .pred %r461;
.reg .u32 %r466;
.reg .u64 %r467;
.reg .u32 %r468;
.reg .u16 %r470;
.reg .u32 %r471;
.reg .u32 %r472;
.reg .u32 %r475;
.reg .u32 %r476;
.reg .u16 %r477;
.reg .u16 %r478;
.reg .u16 %r479;
.reg .u32 %r480;
.reg .u16 %r481;
.reg .pred %r482;
.reg .u16 %r484;
.reg .u32 %r485;
.reg .u32 %r486;
.reg .u32 %r489;
.reg .u32 %r490;
.reg .u16 %r491;
.reg .u16 %r492;
.reg .u16 %r493;
.reg .u32 %r494;
.reg .u16 %r495;
.reg .pred %r496;
.reg .u64 %r497;
.reg .pred %r498;
.reg .u64 %r499;
.reg .u64 %r500;
.reg .u32 %r501;
.reg .pred %r502;
.reg .u32 %r507;
.reg .pred %r508;
.reg .pred %r509;
.reg .u32 %r510;
.reg .pred %r511;
.reg .pred %r512;
.reg .pred %r513;
.reg .pred %r514;
.reg .pred %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .pred %r518;
.reg .pred %r519;
.reg .pred %r520;
.reg .pred %r521;
.reg .pred %r522;
.reg .pred %r523;
.reg .u32 %r524;
.reg .pred %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .u32 %r528;
.reg .pred %r529;
.reg .pred %r530;
.reg .pred %r531;
.reg .pred %r532;
.reg .pred %r533;
.reg .pred %r534;
.reg .pred %r535;
.reg .pred %r536;
.reg .pred %r537;
.reg .pred %r538;
.reg .pred %r539;
.reg .pred %r540;
.reg .pred %r541;
.reg .pred %r542;
.reg .pred %r543;
.reg .pred %r544;
.reg .pred %r545;
.reg .pred %r546;
.reg .pred %r547;
.reg .pred %r548;
.reg .u32 %r549;
.reg .pred %r550;
.reg .u32 %r551;
.reg .pred %r552;
.reg .pred %r553;
.reg .pred %r554;
.reg .pred %r555;
.reg .u32 %r557;
.reg .u32 %r558;
.reg .u32 %r559;
.reg .pred %r560;
.reg .u32 %r562;
.reg .u32 %r563;
.reg .u32 %r564;
.reg .pred %r567;
.reg .u16 %r568;
.reg .pred %r569;
.reg .u32 %r570;
.reg .u32 %r571;
.reg .pred %r572;
.reg .u32 %r573;
.reg .u32 %r574;
.reg .pred %r575;
.reg .u32 %r576;
.reg .pred %r577;
.reg .u32 %r578;
.reg .pred %r579;
.reg .u16 %r580;
.reg .pred %r583;
.reg .u32 %r584;
.reg .pred %r585;
.reg .u32 %r586;
.reg .u64 %r587;
.reg .f64 %r590;
.reg .pred %r591;
.reg .pred %r592;
.reg .pred %r593;
.reg .u32 %r594;
.reg .pred %r595;
.reg .u64 %r596;
.reg .u64 %r597;
.reg .u32 %r599;
.reg .pred %r600;
.reg .u32 %r601;
.reg .pred %r602;
.reg .pred %r603;
.reg .u32 %r605;
.reg .u32 %r606;
.reg .u32 %r608;
.reg .u32 %r609;
.reg .u16 %r610;
.reg .u16 %r611;
.reg .u16 %r612;
.reg .u32 %r613;
.reg .u16 %r614;
.reg .pred %r615;
.reg .u64 %r616;
.reg .u64 %r617;
.reg .u32 %r618;
.reg .pred %r619;
.reg .pred %r620;
.reg .pred %r621;
.reg .u32 %r624;
.reg .u64 %r632;
.reg .u32 %r633;
.reg .u64 %r634;
.reg .u64 %r635;
.reg .pred %r636;
.reg .pred %r637;
.reg .u64 %r638;
.reg .u32 %r639;
.reg .pred %r640;
.reg .u64 %r641;
.reg .u32 %r644;
.reg .u32 %r645;
.reg .u32 %r647;
.reg .u32 %r648;
.reg .u16 %r649;
.reg .u16 %r650;
.reg .u16 %r651;
.reg .u32 %r652;
.reg .u16 %r653;
.reg .pred %r654;
.reg .pred %r655;
.reg .pred %r656;
.reg .u32 %r657;
.reg .u32 %r658;
.reg .pred %r659;
.reg .u32 %r661;
.reg .u16 %r663;
.reg .u16 %r664;
.reg .u32 %r665;
.reg .pred %r668;
.reg .u16 %r670;
.reg .u16 %r671;
.reg .u32 %r672;
.reg .pred %r676;
.reg .u32 %r678;
.reg .pred %r681;
.reg .u64 %r687;
.reg .u64 %r688;
.reg .u64 %r690;
.reg .u32 %r691;
.reg .u16 %r693;
.reg .u16 %r694;
.reg .u32 %r695;
.reg .pred %r696;
.reg .pred %r697;
.reg .u32 %r699;
.reg .pred %r700;
.reg .pred %r701;
.reg .u32 %r702;
.reg .pred %r704;
.reg .pred %r707;
.reg .u32 %r708;
.reg .pred %r709;
.reg .u32 %r712;
.reg .pred %r713;
.reg .u32 %r714;
.reg .pred %r716;
.reg .u32 %r717;
.reg .pred %r718;
.reg .u32 %r719;
.reg .u64 %r720;
.reg .u32 %r721;
.reg .pred %r722;
.reg .u64 %r723;
.reg .u32 %r724;
.reg .pred %r725;
.reg .u64 %r726;
.reg .u32 %r727;
.reg .pred %r728;
.reg .u32 %r729;
.reg .pred %r730;
.reg .u32 %r731;
.reg .pred %r732;
.reg .u32 %r733;
.reg .pred %r734;
.reg .u16 %r735;
.reg .u32 %r736;
.reg .u32 %r737;
.reg .u32 %r738;
.reg .pred %r739;
.reg .pred %r740;
.reg .u32 %r742;
.reg .u64 %r744;
.reg .u64 %r745;
.reg .pred %r746;
.reg .u64 %r747;
.reg .u64 %r749;
.reg .u32 %r750;
.reg .pred %r751;
.reg .u32 %r752;
.reg .pred %r753;
.reg .u32 %r754;
.reg .pred %r755;
.reg .u16 %r756;
.reg .pred %r757;
.reg .u32 %r758;
.reg .u32 %r759;
.reg .pred %r760;
.reg .u32 %r761;
.reg .pred %r762;
.reg .u32 %r763;
.reg .pred %r764;
.reg .u16 %r765;
.reg .u32 %r766;
.reg .pred %r767;
.reg .pred %r768;
.reg .u32 %r769;
.reg .u32 %r770;
.reg .pred %r771;
.reg .u32 %r773;
.reg .u32 %r774;
.reg .u32 %r776;
.reg .u32 %r777;
.reg .u16 %r778;
.reg .u16 %r779;
.reg .u16 %r780;
.reg .u32 %r781;
.reg .u16 %r782;
.reg .pred %r783;
.reg .pred %r784;
.reg .pred %r785;
.reg .u16 %r787;
.reg .u16 %r788;
.reg .u16 %r790;
.reg .u32 %r792;
.reg .pred %r794;
.reg .u16 %r796;
.reg .u32 %r797;
.reg .u32 %r798;
.reg .u16 %r800;
.reg .u16 %r801;
.reg .u16 %r803;
.reg .u16 %r804;
.reg .u32 %r806;
.reg .u16 %r807;
.reg .pred %r808;
.reg .u64 %r811;
.reg .u32 %r812;
.reg .u64 %r815;
.reg .pred %r816;
.reg .u16 %r818;
.reg .u16 %r819;
.reg .u32 %r820;
.reg .u64 %r822;
.reg .u16 %r824;
.reg .u16 %r825;
.reg .u32 %r826;
.reg .pred %r829;
.reg .u64 %r832;
.reg .u64 %r833;
.reg .u64 %r834;
.reg .u32 %r835;
.reg .pred %r836;
.reg .u64 %r839;
.reg .pred %r840;
.reg .pred %r841;
.reg .u32 %r842;
.reg .pred %r843;
.reg .u32 %r844;
.reg .pred %r845;
.reg .u32 %r846;
.reg .pred %r847;
.reg .pred %r849;
.reg .pred %r850;
.reg .pred %r851;
.reg .u64 %r853;
.reg .pred %r854;
.reg .u32 %r859;
.reg .pred %r860;
.reg .pred %r861;
.reg .pred %r863;
.reg .u32 %r868;
.reg .pred %r869;
.reg .u16 %r870;
.reg .u32 %r871;
.reg .pred %r872;
.reg .u64 %r874;
.reg .u32 %r875;
.reg .pred %r876;
.reg .u32 %r881;
.reg .pred %r882;
.reg .u64 %r885;
.reg .u32 %r886;
.reg .pred %r887;
.reg .u32 %r892;
.reg .pred %r893;
.reg .pred %r894;
.reg .pred %r895;
.reg .pred %r896;
.reg .u64 %r898;
.reg .pred %r899;
.reg .u32 %r904;
.reg .pred %r905;
.reg .pred %r906;
.reg .pred %r908;
.reg .u32 %r913;
.reg .pred %r914;
.reg .pred %r915;
.reg .pred %r916;
.reg .u64 %r918;
.reg .pred %r919;
.reg .u32 %r924;
.reg .pred %r925;
.reg .pred %r926;
.reg .pred %r928;
.reg .u32 %r933;
.reg .pred %r934;
.reg .u32 %r935;
.reg .pred %r936;
.reg .u32 %r937;
.reg .pred %r938;
.reg .u32 %r943;
.reg .pred %r944;
.reg .pred %r945;
.reg .pred %r946;
.reg .u64 %r947;
.reg .u64 %r948;
.reg .u32 %r949;
.reg .pred %r950;
.reg .u32 %r955;
.reg .pred %r956;
.reg .u32 %r957;
.reg .pred %r958;
.reg .u32 %r959;
.reg .pred %r960;
.reg .u32 %r961;
.reg .pred %r962;
.reg .u32 %r967;
.reg .pred %r968;
.reg .pred %r969;
.reg .pred %r970;
.reg .u64 %r972;
.reg .pred %r973;
.reg .u32 %r978;
.reg .pred %r979;
.reg .pred %r980;
.reg .pred %r982;
.reg .u32 %r987;
.reg .pred %r988;
.reg .pred %r989;
.reg .u64 %r990;
.reg .u64 %r991;
.reg .u32 %r992;
.reg .pred %r993;
.reg .u32 %r998;
.reg .pred %r999;
.reg .u32 %r1000;
.reg .pred %r1001;
.reg .u32 %r1002;
.reg .pred %r1003;
.reg .u32 %r1004;
.reg .pred %r1005;
.reg .u32 %r1010;
.reg .pred %r1011;
.reg .pred %r1012;
.reg .pred %r1013;
.reg .u64 %r1015;
.reg .pred %r1016;
.reg .u32 %r1021;
.reg .pred %r1022;
.reg .pred %r1023;
.reg .pred %r1025;
.reg .u32 %r1030;
.reg .pred %r1031;
.reg .pred %r1032;
.reg .u32 %r1037;
.reg .pred %r1038;
.reg .pred %r1039;
.reg .u32 %r1040;
.reg .pred %r1041;
.reg .u32 %r1046;
.reg .pred %r1047;
.reg .pred %r1048;
.reg .pred %r1049;
.reg .u64 %r1051;
.reg .pred %r1052;
.reg .u32 %r1057;
.reg .pred %r1058;
.reg .pred %r1059;
.reg .pred %r1061;
.reg .u32 %r1066;
.reg .pred %r1067;
.reg .pred %r1068;
.reg .u32 %r1069;
.reg .pred %r1070;
.reg .u32 %r1071;
.reg .pred %r1072;
.reg .u32 %r1077;
.reg .pred %r1078;
.reg .pred %r1079;
.reg .u64 %r1080;
.reg .u64 %r1081;
.reg .u32 %r1082;
.reg .pred %r1083;
.reg .u32 %r1088;
.reg .pred %r1089;
.reg .u32 %r1090;
.reg .pred %r1091;
.reg .pred %r1092;
.reg .u64 %r1094;
.reg .pred %r1095;
.reg .u32 %r1100;
.reg .pred %r1101;
.reg .pred %r1102;
.reg .pred %r1104;
.reg .u32 %r1109;
.reg .pred %r1110;
.reg .pred %r1111;
.reg .u32 %r1112;
.reg .pred %r1113;
.reg .u64 %r1114;
.reg .pred %r1115;
.reg .u32 %r1120;
.reg .pred %r1121;
.reg .pred %r1122;
.reg .u32 %r1127;
.reg .pred %r1128;
.reg .pred %r1129;
.reg .u64 %r1130;
.reg .pred %r1131;
.reg .u32 %r1136;
.reg .pred %r1137;
.reg .u32 %r1138;
.reg .pred %r1139;
.reg .pred %r1140;
.reg .u64 %r1142;
.reg .pred %r1143;
.reg .u32 %r1148;
.reg .pred %r1149;
.reg .pred %r1150;
.reg .pred %r1152;
.reg .u32 %r1157;
.reg .pred %r1158;
.reg .u32 %r1159;
.reg .u64 %r1160;
.reg .pred %r1161;
.reg .u32 %r1166;
.reg .pred %r1167;
.reg .u32 %r1168;
.reg .pred %r1170;
.reg .u32 %r1175;
.reg .pred %r1176;
.reg .u32 %r1177;
.reg .pred %r1178;
.reg .pred %r1179;
.reg .pred %r1180;
.reg .u64 %r1182;
.reg .pred %r1183;
.reg .u32 %r1188;
.reg .pred %r1189;
.reg .pred %r1190;
.reg .pred %r1192;
.reg .u32 %r1197;
.reg .pred %r1198;
.reg .u32 %r1199;
.reg .pred %r1200;
.reg .u32 %r1201;
.reg .u32 %r1206;
.reg .pred %r1207;
.reg .u64 %r1208;
.reg .pred %r1209;
.reg .u64 %r1213;
.reg .u32 %r1214;
.reg .u16 %r1215;
.reg .u16 %r1216;
.reg .pred %r1217;
.reg .u32 %r1219;
.reg .pred %r1220;
.reg .pred %r1221;
.reg .u64 %r1222;
.reg .u32 %r1225;
.reg .u64 %r1233;
.reg .u32 %r1237;
.reg .u64 %r1245;
.reg .u16 %r1247;
.reg .u32 %r1248;
.reg .u32 %r1249;
.reg .u32 %r1250;
.reg .u32 %r1252;
.reg .u32 %r1253;
.reg .u16 %r1254;
.reg .u16 %r1255;
.reg .u16 %r1256;
.reg .u32 %r1257;
.reg .u16 %r1258;
.reg .pred %r1259;
.reg .pred %r1260;
.reg .u64 %r1261;
.reg .u32 %r1262;
.reg .pred %r1263;
.reg .u32 %r1266;
.reg .u32 %r1267;
.reg .u64 %r1274;
.reg .u64 %r1275;
.reg .u64 %r1276;
.reg .u32 %r1277;
.reg .pred %r1278;
.reg .u32 %r1280;
.reg .u32 %r1281;
.reg .u32 %r1283;
.reg .u32 %r1284;
.reg .u16 %r1285;
.reg .u16 %r1286;
.reg .u16 %r1287;
.reg .u32 %r1288;
.reg .u16 %r1289;
.reg .pred %r1290;
.reg .u32 %r1291;
.reg .pred %r1292;
.reg .u64 %r1293;
.reg .u64 %r1294;
.reg .pred %r1295;
.reg .u32 %r1297;
.reg .u32 %r1322;
.reg .u64 %r1323;
.reg .u64 %r1324;
.reg .u64 %r1325;
.reg .u64 %r1326;
.reg .u32 %r1327;
.reg .u64 %r1328;
.reg .u64 %r1329;
.reg .u64 %r1330;
.reg .u32 %r1331;
.reg .u64 %r1332;
.reg .u64 %r1333;
.reg .u64 %r1334;
mov.u64 %r420,%ar0;
mov.u64 %r421,%ar1;
mov.u64 %r422,%ar2;
mov.u64 %r423,%ar3;
.loc 1 685 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r434,[%value_in];
}
.loc 1 685 8
ld.u64 %r266,[%r434];
.loc 1 686 20
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r266;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r436,[%value_in];
}
.loc 1 848 2
setp.eq.u64 %r437,%r420,0;
@ %r437 bra $L2;
ld.u32 %r438,[%r420+80];
setp.ne.u32 %r439,%r438,0;
@ %r439 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 851 2
ld.s16 %r26,[%r421+16];
cvt.u16.u32 %r442,%r26;
and.b16 %r441,%r442,8192;
setp.ne.u16 %r443,%r441,0;
@ %r443 bra $L3;
.loc 1 849 2
ld.u32 %r24,[%r421+172];
.loc 1 851 2
or.b16 %r444,%r442,8192;
cvt.s32.s16 %r26,%r444;
st.u16 [%r421+16],%r444;
and.b32 %r447,%r24,-8193;
st.u32 [%r421+172],%r447;
$L3:
.loc 1 854 5
cvt.u16.u32 %r449,%r26;
and.b16 %r448,%r449,8;
setp.eq.u16 %r450,%r448,0;
@ %r450 bra $L4;
.loc 1 854 6
ld.u64 %r451,[%r421+24];
setp.ne.u64 %r452,%r451,0;
@ %r452 bra $L5;
$L4:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
call (%value_in),__swsetup_r,(%out_arg1,%out_arg2);
ld.param.u32 %r455,[%value_in];
}
setp.eq.u32 %r456,%r455,0;
@ %r456 bra $L6;
$L236:
.loc 1 856 10
mov.u32 %r419,-1;
bra $L1;
$L6:
.loc 1 861 9
ld.s16 %r26,[%r421+16];
$L5:
.loc 1 861 5
cvt.u16.u32 %r458,%r26;
and.b16 %r457,%r458,26;
setp.ne.u16 %r459,%r457,10;
@ %r459 bra $L8;
.loc 1 861 60
ld.u16 %r460,[%r421+18];
setp.lt.s16 %r461,%r460,0;
@ %r461 bra $L8;
.loc 1 864 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r422;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r423;
call (%value_in),__sbprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r466,[%value_in];
}
mov.u32 %r419,%r466;
bra $L1;
$L8:
.loc 1 883 14
st.u64 [%frame+168],%frame;
.loc 1 884 16
mov.u64 %r467,0;
st.u64 [%frame+184],%r467;
.loc 1 885 17
cvt.u32.u64 %r468,%r467;
st.u32 [%frame+176],%r468;
.loc 1 696 6
cvt.u32.u64 %r70,%r467;
.loc 1 688 42
mov.f64 %r28,0d0000000000000000;
.loc 1 883 21
mov.u64 %r261,%frame;
.loc 1 707 8
mov.u64 %r260,%r467;
.loc 1 691 6
cvt.u32.u64 %r255,%r260;
.loc 1 887 6
cvt.u32.u64 %r419,%r260;
.loc 1 918 4
add.u64 %r1323,%frame,168;
.loc 1 1756 5
add.u64 %r1324,%frame,200;
.loc 1 1687 4
add.u64 %r1325,%frame,216;
.loc 1 1685 4
add.u64 %r1326,%frame,218;
.loc 1 1328 11
cvt.u32.u64 %r1327,%r436;
.loc 1 1910 4
add.u64 %r1328,%frame,199;
add.u64 %r1329,%frame,202;
.loc 1 1916 36
add.u64 %r1330,%frame,201;
.loc 1 1340 21
add.u32 %r1331,%r1327,1;
.loc 1 1873 11
add.u64 %r1332,%frame,192;
add.u64 %r1333,%frame,208;
add.u64 %r1334,%frame,212;
$L9:
.loc 1 914 24
ld.s8 %r270,[%r422];
.loc 1 914 37
cvt.u16.u32 %r470,%r270;
set.u32.ne.u16 %r471,%r470,37;
neg.s32 %r472,%r471;
set.u32.ne.u16 %r475,%r470,0;
neg.s32 %r476,%r475;
cvt.u16.u32 %r478,%r472;
cvt.u16.u32 %r479,%r476;
and.b16 %r477,%r478,%r479;
.loc 1 914 23
cvt.u32.u16 %r480,%r477;
cvt.u16.u8 %r481,%r480;
setp.eq.u16 %r482,%r481,0;
@ %r482 bra $L248;
mov.u64 %r283,%r422;
$L11:
mov.u64 %r275,%r283;
.loc 1 915 25
add.u64 %r283,%r283,1;
.loc 1 914 24
ld.s8 %r270,[%r283];
.loc 1 914 37
cvt.u16.u32 %r484,%r270;
set.u32.ne.u16 %r485,%r484,0;
neg.s32 %r486,%r485;
set.u32.ne.u16 %r489,%r484,37;
neg.s32 %r490,%r489;
cvt.u16.u32 %r492,%r486;
cvt.u16.u32 %r493,%r490;
and.b16 %r491,%r492,%r493;
.loc 1 914 23
cvt.u32.u16 %r494,%r491;
cvt.u16.u8 %r495,%r494;
setp.ne.u16 %r496,%r495,0;
@ %r496 bra $L11;
.loc 1 917 16
sub.u64 %r497,%r283,%r422;
.loc 1 917 10
cvt.u32.u64 %r271,%r497;
.loc 1 917 6
setp.eq.u32 %r498,%r271,0;
@ %r498 bra $L10;
.loc 1 918 4
st.u64 [%r261],%r422;
cvt.s64.s32 %r39,%r271;
st.u64 [%r261+8],%r39;
ld.u64 %r500,[%frame+184];
add.u64 %r499,%r500,%r39;
st.u64 [%frame+184],%r499;
ld.u32 %r501,[%frame+176];
add.u32 %r43,%r501,1;
st.u32 [%frame+176],%r43;
setp.gt.s32 %r502,%r43,7;
@ %r502 bra $L12;
add.u64 %r261,%r261,16;
bra $L13;
$L12:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r507,[%value_in];
}
setp.ne.u32 %r508,%r507,0;
@ %r508 bra $L14;
mov.u64 %r261,%frame;
$L13:
.loc 1 919 8
add.u32 %r419,%r419,%r271;
.loc 1 925 21
ld.s8 %r270,[%r275+1];
bra $L10;
$L248:
.loc 1 914 23
mov.u64 %r283,%r422;
$L10:
.loc 1 925 20
setp.eq.u32 %r509,%r270,0;
@ %r509 bra $L15;
.loc 1 929 6
add.u64 %r422,%r283,1;
.loc 1 935 8
mov.u32 %r510,0;
st.u8 [%frame+218],%r510;
.loc 1 947 14
ld.s8 %r410,[%r283+1];
mov.u32 %r276,0;
mov.u32 %r277,%r276;
.loc 1 934 8
mov.u32 %r259,-1;
.loc 1 933 9
mov.u32 %r254,%r276;
.loc 1 931 9
mov.u32 %r252,%r276;
.loc 1 1060 6
mov.u32 %r1322,%r276;
bra $L16;
$L249:
.loc 1 1007 10
mov.u64 %r423,%r174;
$L16:
.loc 1 947 18
add.u64 %r422,%r422,1;
.loc 1 947 12
mov.u32 %r248,%r410;
$L17:
.loc 1 948 11
setp.eq.u32 %r511,%r248,85;
@ %r511 bra $L18;
setp.gt.s32 %r512,%r248,85;
@ %r512 bra $L19;
setp.eq.u32 %r513,%r248,46;
@ %r513 bra $L20;
setp.gt.s32 %r514,%r248,46;
@ %r514 bra $L21;
setp.eq.u32 %r515,%r248,42;
@ %r515 bra $L22;
setp.gt.s32 %r516,%r248,42;
@ %r516 bra $L23;
setp.eq.u32 %r517,%r248,32;
@ %r517 bra $L24;
setp.eq.u32 %r518,%r248,35;
@ %r518 bra $L25;
bra $L370;
$L23:
setp.eq.u32 %r519,%r248,43;
@ %r519 bra $L27;
setp.eq.u32 %r520,%r248,45;
@ %r520 bra $L28;
bra $L29;
$L21:
setp.eq.u32 %r521,%r248,68;
@ %r521 bra $L30;
setp.gt.s32 %r522,%r248,68;
@ %r522 bra $L31;
setp.eq.u32 %r523,%r248,48;
@ %r523 bra $L32;
add.u32 %r524,%r248,-49;
setp.gt.u32 %r525,%r524,8;
@ %r525 bra $L29;
mov.u64 %r284,%r422;
.loc 1 1077 6
mov.u32 %r254,0;
add.u32 %r1297,%r248,-48;
bra $L33;
$L31:
.loc 1 948 11
setp.eq.u32 %r526,%r248,76;
@ %r526 bra $L34;
setp.gt.s32 %r527,%r248,76;
@ %r527 bra $L35;
and.b32 %r528,%r248,-3;
setp.eq.u32 %r529,%r528,69;
@ ! %r529 bra $L29;
bra $L36;
$L35:
setp.eq.u32 %r530,%r248,79;
@ %r530 bra $L37;
bra $L29;
$L19:
setp.eq.u32 %r531,%r248,110;
@ %r531 bra $L38;
setp.gt.s32 %r532,%r248,110;
@ %r532 bra $L39;
setp.gt.s32 %r533,%r248,103;
@ %r533 bra $L40;
setp.gt.s32 %r534,%r248,100;
@ %r534 bra $L36;
setp.eq.u32 %r535,%r248,99;
@ %r535 bra $L41;
setp.eq.u32 %r536,%r248,100;
@ %r536 bra $L42;
setp.eq.u32 %r537,%r248,88;
@ %r537 bra $L43;
bra $L29;
$L40:
setp.eq.u32 %r538,%r248,105;
@ %r538 bra $L42;
setp.eq.u32 %r539,%r248,108;
@ %r539 bra $L44;
setp.eq.u32 %r540,%r248,104;
@ %r540 bra $L45;
bra $L29;
$L39:
setp.eq.u32 %r541,%r248,115;
@ %r541 bra $L46;
setp.gt.s32 %r542,%r248,115;
@ %r542 bra $L47;
setp.eq.u32 %r543,%r248,112;
@ %r543 bra $L48;
setp.eq.u32 %r544,%r248,113;
@ %r544 bra $L49;
setp.eq.u32 %r545,%r248,111;
@ %r545 bra $L50;
bra $L29;
$L47:
setp.eq.u32 %r546,%r248,117;
@ %r546 bra $L51;
setp.eq.u32 %r547,%r248,120;
@ %r547 bra $L52;
bra $L29;
$L42:
setp.eq.u32 %r548,%r276,0;
@ %r548 bra $L54;
cvt.u32.u32 %r549,%r277;
st.u8 [%frame+218],%r549;
bra $L54;
$L52:
setp.eq.u32 %r550,%r276,0;
@ %r550 bra $L55;
cvt.u32.u32 %r551,%r277;
st.u8 [%frame+218],%r551;
$L55:
.loc 1 1538 10
cvta.const.u64 %r260,$LC4;
bra $L56;
$L28:
.loc 1 1022 14
ld.s8 %r410,[%r422];
bra $L57;
$L24:
ld.s8 %r410,[%r422];
.loc 1 964 7
setp.ne.u32 %r552,%r277,0;
selp.u32 %r276,%r276,1,%r552;
selp.u32 %r277,%r277,32,%r552;
bra $L16;
$L25:
.loc 1 968 10
or.b32 %r252,%r252,1;
.loc 1 947 14
ld.s8 %r410,[%r422];
.loc 1 969 4
bra $L16;
$L22:
.loc 1 1007 10
add.u64 %r174,%r423,4;
ld.u32 %r254,[%r423];
.loc 1 1022 14
ld.s8 %r410,[%r422];
.loc 1 1011 7
setp.ge.s32 %r553,%r254,0;
@ %r553 bra $L249;
.loc 1 1013 10
neg.s32 %r254,%r254;
.loc 1 1007 10
mov.u64 %r423,%r174;
$L57:
.loc 1 1016 10
or.b32 %r252,%r252,4;
.loc 1 1017 4
bra $L16;
$L27:
.loc 1 947 14
ld.s8 %r410,[%r422];
.loc 1 1020 4
mov.u32 %r276,1;
.loc 1 1019 9
mov.u32 %r277,%r248;
.loc 1 1020 4
bra $L16;
$L20:
.loc 1 1022 18
add.u64 %r299,%r422,1;
.loc 1 1022 12
ld.s8 %r248,[%r422];
.loc 1 1022 7
setp.eq.u32 %r554,%r248,42;
@ %r554 bra $L59;
.loc 1 1061 11
add.u32 %r1297,%r248,-48;
.loc 1 1061 10
setp.le.u32 %r555,%r1297,9;
@ %r555 bra $L60;
.loc 1 1022 18
mov.u64 %r422,%r299;
.loc 1 1060 6
mov.u32 %r259,%r1322;
bra $L17;
$L59:
.loc 1 1052 10
ld.u32 %r301,[%r423];
max.s32 %r259,%r301,-1;
.loc 1 947 14
ld.s8 %r410,[%r422+1];
.loc 1 1052 10
add.u64 %r423,%r423,4;
.loc 1 1022 18
mov.u64 %r422,%r299;
.loc 1 1058 5
bra $L16;
$L60:
mov.u64 %r290,%r299;
.loc 1 1060 6
mov.u32 %r259,%r1322;
$L62:
.loc 1 1062 12
shl.b32 %r557,%r259,2;
add.u32 %r558,%r557,%r259;
add.u32 %r559,%r558,%r558;
.loc 1 1062 7
add.u32 %r259,%r559,%r1297;
mov.u64 %r411,%r290;
add.u64 %r290,%r290,1;
mov.u64 %r422,%r290;
.loc 1 1063 8
ld.s8 %r248,[%r411];
.loc 1 1061 11
add.u32 %r1297,%r248,-48;
.loc 1 1061 10
setp.le.u32 %r560,%r1297,9;
@ %r560 bra $L62;
bra $L17;
$L32:
.loc 1 1073 10
or.b32 %r252,%r252,128;
.loc 1 947 14
ld.s8 %r410,[%r422];
.loc 1 1074 4
bra $L16;
$L33:
.loc 1 1079 12
shl.b32 %r562,%r254,2;
add.u32 %r563,%r562,%r254;
add.u32 %r564,%r563,%r563;
.loc 1 1079 7
add.u32 %r254,%r1297,%r564;
mov.u64 %r45,%r284;
add.u64 %r284,%r284,1;
mov.u64 %r422,%r284;
.loc 1 1080 8
ld.s8 %r248,[%r45];
.loc 1 1081 13
add.u32 %r1297,%r248,-48;
.loc 1 1081 4
setp.le.u32 %r567,%r1297,9;
@ %r567 bra $L33;
bra $L17;
$L34:
.loc 1 1097 10
or.b32 %r252,%r252,8;
.loc 1 947 14
ld.s8 %r410,[%r422];
.loc 1 1098 4
bra $L16;
$L45:
.loc 1 1107 11
or.b32 %r252,%r252,64;
.loc 1 947 14
ld.s8 %r410,[%r422];
.loc 1 1108 4
bra $L16;
$L44:
.loc 1 1111 8
ld.s8 %r410,[%r422];
.loc 1 1111 7
cvt.u16.u32 %r568,%r410;
setp.ne.u16 %r569,%r568,108;
@ %r569 bra $L63;
.loc 1 1113 11
or.b32 %r252,%r252,32;
.loc 1 947 14
ld.s8 %r410,[%r422+1];
.loc 1 1112 8
add.u64 %r422,%r422,1;
bra $L16;
$L63:
.loc 1 1116 11
or.b32 %r252,%r252,16;
bra $L16;
$L49:
.loc 1 1119 10
or.b32 %r252,%r252,32;
.loc 1 947 14
ld.s8 %r410,[%r422];
.loc 1 1120 4
bra $L16;
$L41:
.loc 1 1178 9
ld.u32 %r570,[%r423];
st.u8 [%frame+128],%r570;
.loc 1 1181 9
mov.u32 %r571,0;
st.u8 [%frame+218],%r571;
.loc 1 1178 11
add.u64 %r423,%r423,4;
.loc 1 1182 4
mov.u32 %r347,1;
.loc 1 1179 10
mov.u32 %r227,%r347;
.loc 1 1162 7
add.u64 %r251,%frame,128;
.loc 1 1182 4
bra $L64;
$L30:
setp.eq.u32 %r572,%r276,0;
@ %r572 bra $L65;
cvt.u32.u32 %r573,%r277;
st.u8 [%frame+218],%r573;
$L65:
.loc 1 1184 10
or.b32 %r252,%r252,16;
$L54:
.loc 1 1188 13
and.b32 %r574,%r252,32;
setp.eq.u32 %r575,%r574,0;
@ %r575 bra $L66;
add.u64 %r348,%r423,7;
and.b64 %r312,%r348,-8;
add.u64 %r423,%r312,8;
ld.u64 %r60,[%r312];
mov.u64 %r257,%r60;
bra $L67;
$L66:
and.b32 %r576,%r252,16;
setp.eq.u32 %r577,%r576,0;
@ %r577 bra $L68;
add.u64 %r296,%r423,7;
and.b64 %r350,%r296,-8;
add.u64 %r423,%r350,8;
ld.u64 %r60,[%r350];
mov.u64 %r257,%r60;
bra $L67;
$L68:
.loc 1 1007 10
ld.u32 %r385,[%r423];
add.u64 %r423,%r423,4;
.loc 1 1188 13
and.b32 %r578,%r252,64;
setp.eq.u32 %r579,%r578,0;
@ %r579 bra $L69;
cvt.u16.u32 %r580,%r385;
cvt.s64.s16 %r257,%r580;
.loc 1 1190 8
mov.u64 %r60,%r257;
bra $L67;
$L69:
.loc 1 1188 13
cvt.s64.s32 %r257,%r385;
.loc 1 1190 8
mov.u64 %r60,%r257;
$L67:
.loc 1 1190 7
setp.ge.s64 %r583,%r60,0;
@ %r583 bra $L70;
.loc 1 1196 12
neg.s64 %r257,%r257;
.loc 1 1197 10
mov.u32 %r584,45;
st.u8 [%frame+218],%r584;
mov.u32 %r386,45;
.loc 1 1199 9
mov.u32 %r258,1;
bra $L71;
$L36:
setp.eq.u32 %r585,%r276,0;
@ %r585 bra $L72;
cvt.u32.u32 %r586,%r277;
st.u8 [%frame+218],%r586;
$L72:
.loc 1 1188 13
add.u64 %r587,%r423,7;
and.b64 %r376,%r587,-8;
add.u64 %r423,%r376,8;
.loc 1 1214 25
ld.f64 %r28,[%r376];
.loc 1 1225 8
abs.f64 %r590,%r28;
setp.leu.f64 %r591,%r590,0d7fefffffffffffff;
@ %r591 bra $L75;
.loc 1 1226 8
setp.lt.f64 %r592,%r28,0d0000000000000000;
@ %r592 bra $L76;
.loc 1 1674 7
ld.s8 %r386,[%frame+218];
bra $L77;
$L75:
.loc 1 1236 7
setp.nan.f64 %r593,%r28,%r28;
@ ! %r593 bra $L371;
bra $L78;
$L76:
.loc 1 1227 11
mov.u32 %r594,45;
st.u8 [%frame+218],%r594;
mov.u32 %r386,45;
$L77:
.loc 1 1228 8
setp.le.s32 %r595,%r248,71;
@ %r595 bra $L250;
.loc 1 1231 9
cvta.const.u64 %r251,$LC1;
bra $L80;
$L250:
.loc 1 1229 9
cvta.const.u64 %r251,$LC0;
$L80:
.loc 1 1233 11
and.b32 %r253,%r252,-129;
.loc 1 1234 5
mov.u32 %r347,3;
.loc 1 1232 10
mov.u32 %r227,%r347;
.loc 1 932 9
mov.u32 %r259,0;
.loc 1 937 8
mov.u32 %r256,%r259;
.loc 1 1234 5
bra $L81;
$L78:
.loc 1 1237 9
mov.b64 %r596,%r28;
shr.u64 %r597,%r596,63;
cvt.u32.u64 %r599,%r597;
.loc 1 1237 8
setp.ne.u32 %r600,%r599,0;
@ %r600 bra $L82;
.loc 1 1674 7
ld.s8 %r386,[%frame+218];
bra $L83;
$L82:
.loc 1 1238 11
mov.u32 %r601,45;
st.u8 [%frame+218],%r601;
mov.u32 %r386,45;
$L83:
.loc 1 1239 8
setp.le.s32 %r602,%r248,71;
@ %r602 bra $L251;
.loc 1 1242 9
cvta.const.u64 %r251,$LC3;
bra $L84;
$L251:
.loc 1 1240 9
cvta.const.u64 %r251,$LC2;
$L84:
.loc 1 1244 11
and.b32 %r253,%r252,-129;
.loc 1 1245 5
mov.u32 %r347,3;
.loc 1 1243 10
mov.u32 %r227,%r347;
.loc 1 932 9
mov.u32 %r259,0;
.loc 1 937 8
mov.u32 %r256,%r259;
.loc 1 1245 5
bra $L81;
$L371:
.loc 1 1304 32
and.b32 %r377,%r248,-33;
.loc 1 1302 7
setp.eq.u32 %r603,%r259,-1;
@ %r603 bra $L252;
.loc 1 1304 40
set.u32.eq.u32 %r605,%r259,0;
neg.s32 %r606,%r605;
.loc 1 1304 32
set.u32.eq.u32 %r608,%r377,71;
neg.s32 %r609,%r608;
.loc 1 1304 40
cvt.u16.u32 %r611,%r606;
cvt.u16.u32 %r612,%r609;
and.b16 %r610,%r611,%r612;
cvt.u32.u16 %r613,%r610;
cvt.u16.u8 %r614,%r613;
setp.ne.u16 %r615,%r614,0;
@ %r615 bra $L86;
bra $L85;
$L252:
.loc 1 1303 10
mov.u32 %r259,6;
$L85:
.loc 1 1308 10
or.b32 %r253,%r252,256;
.loc 1 1807 6
mov.b64 %r616,%r28;
shr.u64 %r617,%r616,32;
.loc 1 1807 5
cvt.u32.u64 %r618,%r617;
setp.ge.s32 %r619,%r618,0;
@ %r619 bra $L253;
bra $L246;
$L267:
.loc 1 1305 10
mov.u32 %r259,1;
$L246:
.loc 1 1808 9
neg.f64 %r229,%r28;
.loc 1 1809 9
mov.u32 %r162,45;
bra $L87;
$L253:
mov.f64 %r229,%r28;
.loc 1 1811 9
mov.u32 %r162,0;
$L87:
.loc 1 1860 5
setp.eq.u32 %r620,%r377,70;
@ %r620 bra $L88;
.loc 1 1867 6
setp.ne.u32 %r621,%r377,69;
@ %r621 bra $L89;
.loc 1 1868 11
add.u32 %r323,%r259,1;
.loc 1 1873 11
mov.u32 %r624,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r229;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r624;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r323;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1334;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1333;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1332;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r632,[%value_in];
}
mov.u64 %r251,%r632;
setp.eq.u32 %r1292,1,1;
bra $L90;
$L381:
.loc 1 1880 10
ld.u32 %r379,[%frame+212];
bra $L91;
$L240:
.loc 1 1879 23
mov.u32 %r633,1;
sub.u32 %r379,%r633,%r259;
.loc 1 1879 12
st.u32 [%frame+212],%r379;
$L91:
.loc 1 1880 10
cvt.s64.s32 %r634,%r379;
.loc 1 1880 7
add.u64 %r635,%r634,%r184;
add.u64 %r326,%r1245,%r635;
setp.eq.u32 %r1292,1,1;
$L238:
.loc 1 1882 6
setp.eq.f64 %r636,%r229,0d0000000000000000;
@ %r636 bra $L254;
.loc 1 1884 14
ld.u64 %r294,[%frame+192];
.loc 1 1884 9
setp.ge.u64 %r637,%r294,%r326;
@ %r637 bra $L92;
.loc 1 1885 11
mov.u32 %r639,48;
$L93:
.loc 1 1885 8
add.u64 %r638,%r294,1;
st.u64 [%frame+192],%r638;
.loc 1 1885 11
st.u8 [%r294],%r639;
.loc 1 1884 14
ld.u64 %r294,[%frame+192];
.loc 1 1884 9
setp.gt.u64 %r640,%r326,%r294;
@ %r640 bra $L93;
bra $L92;
$L382:
.loc 1 1887 16
ld.u64 %r641,[%frame+192];
sub.u64 %r328,%r641,%r251;
.loc 1 1887 10
cvt.u32.u64 %r70,%r328;
.loc 1 1314 14
ld.u32 %r256,[%frame+212];
bra $L94;
$L254:
mov.u64 %r294,%r326;
$L92:
.loc 1 1887 16
sub.u64 %r328,%r294,%r251;
.loc 1 1887 10
cvt.u32.u64 %r70,%r328;
.loc 1 1314 14
ld.u32 %r256,[%frame+212];
.loc 1 1313 7
@ %r1292 bra $L95;
$L94:
.loc 1 1314 8
set.u32.lt.s32 %r644,%r256,-3;
neg.s32 %r645,%r644;
.loc 1 1314 20
set.u32.lt.s32 %r647,%r259,%r256;
neg.s32 %r648,%r647;
cvt.u16.u32 %r650,%r645;
cvt.u16.u32 %r651,%r648;
or.b16 %r649,%r650,%r651;
cvt.u32.u16 %r652,%r649;
cvt.u16.u8 %r653,%r652;
setp.eq.u16 %r654,%r653,0;
@ %r654 bra $L96;
.loc 1 1315 9
add.u32 %r248,%r248,-2;
bra $L97;
$L95:
.loc 1 1323 7
setp.eq.u32 %r655,%r248,102;
@ %r655 bra $L98;
$L97:
.loc 1 1324 5
add.u32 %r69,%r256,-1;
st.u32 [%frame+212],%r69;
.loc 1 1903 7
st.u8 [%frame+200],%r248;
.loc 1 1904 5
setp.ge.s32 %r656,%r69,0;
@ %r656 bra $L255;
.loc 1 1905 7
mov.u32 %r657,1;
sub.u32 %r69,%r657,%r256;
.loc 1 1906 8
mov.u32 %r280,45;
bra $L99;
$L255:
.loc 1 1909 8
mov.u32 %r280,43;
$L99:
cvt.u32.u32 %r658,%r280;
st.u8 [%frame+201],%r658;
.loc 1 1911 5
setp.le.s32 %r659,%r69,9;
@ %r659 bra $L100;
.loc 1 1910 4
mov.u64 %r333,%r1328;
$L101:
mov.u64 %r358,%r333;
.loc 1 1913 9
add.u64 %r333,%r358,-1;
.loc 1 1913 11
rem.s32 %r661,%r69,10;
cvt.u16.u32 %r664,%r661;
add.u16 %r663,%r664,48;
.loc 1 1913 9
cvt.u32.u16 %r665,%r663;
st.u8 [%r333],%r665;
mov.u32 %r311,%r69;
.loc 1 1914 17
div.s32 %r69,%r69,10;
.loc 1 1914 3
setp.gt.s32 %r668,%r311,99;
@ %r668 bra $L101;
.loc 1 1915 8
add.u64 %r203,%r358,-2;
.loc 1 1915 10
cvt.u16.u32 %r671,%r69;
add.u16 %r670,%r671,48;
cvt.u32.u16 %r672,%r670;
cvt.s32.s8 %r383,%r672;
.loc 1 1915 8
st.u8 [%r333+-1],%r672;
.loc 1 1916 3
setp.ge.u64 %r676,%r203,%r1328;
@ %r676 bra $L256;
mov.u64 %r300,%r1329;
$L104:
.loc 1 1916 43
add.u64 %r203,%r203,1;
.loc 1 1916 39
cvt.u32.u32 %r678,%r383;
st.u8 [%r300],%r678;
.loc 1 1916 3
add.u64 %r300,%r300,1;
setp.ne.u64 %r681,%r203,%r1328;
@ %r681 bra $L103;
.loc 1 1916 36
sub.u64 %r687,%r1330,%r358;
add.u64 %r688,%r1329,%r687;
.loc 1 1923 12
sub.u64 %r690,%r688,%r1324;
cvt.u32.u64 %r255,%r690;
bra $L102;
$L103:
.loc 1 1916 41
ld.s8 %r383,[%r203];
bra $L104;
$L100:
.loc 1 1920 9
mov.u32 %r691,48;
st.u8 [%frame+202],%r691;
.loc 1 1921 10
cvt.u16.u32 %r694,%r69;
add.u16 %r693,%r694,48;
.loc 1 1921 8
cvt.u32.u16 %r695,%r693;
st.u8 [%frame+203],%r695;
mov.u32 %r255,4;
bra $L102;
$L256:
.loc 1 1916 3
mov.u32 %r255,2;
$L102:
.loc 1 1326 10
add.u32 %r227,%r255,%r70;
.loc 1 1327 8
setp.gt.s32 %r696,%r70,1;
@ %r696 bra $L105;
and.b32 %r256,%r252,1;
.loc 1 1327 18
setp.ne.u32 %r697,%r256,0;
@ %r697 bra $L105;
.loc 1 1673 10
max.s32 %r347,%r227,0;
bra $L106;
$L105:
.loc 1 1328 11
add.u32 %r227,%r227,%r1327;
.loc 1 1673 10
max.s32 %r347,%r227,0;
.loc 1 937 8
mov.u32 %r256,0;
bra $L106;
$L98:
and.b32 %r699,%r252,1;
or.b32 %r382,%r699,%r259;
.loc 1 1334 9
setp.le.s32 %r700,%r256,0;
@ %r700 bra $L107;
.loc 1 1336 16
setp.eq.u32 %r701,%r382,0;
@ %r701 bra $L257;
.loc 1 1337 13
add.u32 %r702,%r256,%r1327;
add.u32 %r227,%r702,%r259;
.loc 1 1673 10
max.s32 %r347,%r227,0;
bra $L106;
$L107:
.loc 1 1339 20
setp.eq.u32 %r704,%r382,0;
@ %r704 bra $L258;
.loc 1 1340 21
add.u32 %r227,%r1331,%r259;
.loc 1 1673 10
max.s32 %r347,%r227,0;
.loc 1 1339 12
bra $L106;
$L96:
.loc 1 1342 15
setp.gt.s32 %r707,%r70,%r256;
@ %r707 bra $L109;
.loc 1 1344 9
and.b32 %r708,%r252,1;
setp.ne.u32 %r709,%r708,0;
@ %r709 bra $L110;
.loc 1 1673 10
max.s32 %r347,%r256,0;
mov.u32 %r227,%r256;
mov.u32 %r248,103;
bra $L106;
$L110:
.loc 1 1345 12
add.u32 %r227,%r256,%r1327;
.loc 1 1673 10
max.s32 %r347,%r227,0;
mov.u32 %r248,103;
bra $L106;
$L109:
.loc 1 1347 18
cvt.u32.u64 %r712,%r328;
add.u32 %r227,%r1327,%r712;
.loc 1 1348 9
setp.le.s32 %r713,%r256,0;
@ %r713 bra $L111;
.loc 1 1673 10
max.s32 %r347,%r227,0;
mov.u32 %r248,103;
bra $L106;
$L111:
.loc 1 1349 17
sub.u32 %r714,%r227,%r256;
.loc 1 1349 12
add.u32 %r227,%r714,1;
.loc 1 1673 10
max.s32 %r347,%r227,0;
mov.u32 %r248,103;
bra $L106;
$L257:
mov.u32 %r347,%r256;
.loc 1 1314 14
mov.u32 %r227,%r256;
bra $L106;
$L258:
mov.u32 %r347,1;
.loc 1 1339 12
mov.u32 %r227,%r347;
$L106:
.loc 1 1372 7
setp.eq.u32 %r716,%r162,0;
@ %r716 bra $L112;
.loc 1 1373 10
mov.u32 %r717,45;
st.u8 [%frame+218],%r717;
.loc 1 932 9
mov.u32 %r259,0;
bra $L113;
$L38:
setp.eq.u32 %r718,%r276,0;
@ %r718 bra $L114;
cvt.u32.u32 %r719,%r277;
st.u8 [%frame+218],%r719;
$L114:
.loc 1 1188 13
add.u64 %r720,%r423,7;
and.b64 %r369,%r720,-8;
ld.u64 %r370,[%r369];
add.u64 %r423,%r369,8;
.loc 1 1387 14
and.b32 %r721,%r252,32;
.loc 1 1387 7
setp.eq.u32 %r722,%r721,0;
@ %r722 bra $L115;
.loc 1 1388 34
cvt.s64.s32 %r723,%r419;
st.u64 [%r370],%r723;
bra $L9;
$L115:
.loc 1 1391 14
and.b32 %r724,%r252,16;
.loc 1 1391 7
setp.eq.u32 %r725,%r724,0;
@ %r725 bra $L117;
.loc 1 1392 34
cvt.s64.s32 %r726,%r419;
st.u64 [%r370],%r726;
bra $L9;
$L117:
.loc 1 1393 19
and.b32 %r727,%r252,64;
.loc 1 1393 12
setp.eq.u32 %r728,%r727,0;
@ %r728 bra $L118;
.loc 1 1394 35
st.u16 [%r370],%r419;
bra $L9;
$L118:
.loc 1 1400 33
st.u32 [%r370],%r419;
bra $L9;
$L37:
.loc 1 1403 10
or.b32 %r252,%r252,16;
$L50:
.loc 1 1406 13
and.b32 %r729,%r252,32;
setp.eq.u32 %r730,%r729,0;
@ %r730 bra $L119;
add.u64 %r344,%r423,7;
and.b64 %r356,%r344,-8;
add.u64 %r423,%r356,8;
ld.u64 %r257,[%r356];
.loc 1 1407 9
mov.u32 %r258,0;
bra $L120;
$L119:
.loc 1 1406 13
and.b32 %r731,%r252,16;
setp.eq.u32 %r732,%r731,0;
@ %r732 bra $L121;
add.u64 %r352,%r423,7;
and.b64 %r351,%r352,-8;
add.u64 %r423,%r351,8;
ld.u64 %r257,[%r351];
.loc 1 1407 9
mov.u32 %r258,%r729;
bra $L120;
$L121:
.loc 1 1007 10
ld.u32 %r374,[%r423];
add.u64 %r423,%r423,4;
.loc 1 1406 13
and.b32 %r733,%r252,64;
setp.eq.u32 %r734,%r733,0;
@ %r734 bra $L122;
cvt.u16.u32 %r735,%r374;
cvt.u64.u16 %r257,%r735;
.loc 1 1407 9
mov.u32 %r258,%r731;
bra $L120;
$L122:
.loc 1 1406 13
cvt.u64.u32 %r257,%r374;
.loc 1 1407 9
mov.u32 %r258,%r733;
bra $L120;
$L48:
.loc 1 1421 25
add.u64 %r366,%r423,7;
and.b64 %r361,%r366,-8;
add.u64 %r423,%r361,8;
.loc 1 1421 11
ld.u64 %r257,[%r361];
.loc 1 1424 10
or.b32 %r252,%r252,2;
.loc 1 1425 10
mov.u32 %r736,48;
st.u8 [%frame+216],%r736;
.loc 1 1426 10
mov.u32 %r737,120;
st.u8 [%frame+217],%r737;
.loc 1 1423 10
cvta.const.u64 %r260,$LC4;
.loc 1 1422 9
mov.u32 %r258,2;
.loc 1 1426 15
mov.u32 %r248,120;
.loc 1 1427 4
bra $L120;
$L46:
.loc 1 1432 7
add.u64 %r364,%r423,7;
and.b64 %r365,%r364,-8;
add.u64 %r423,%r365,8;
ld.u64 %r251,[%r365];
.loc 1 1436 9
mov.u32 %r738,0;
st.u8 [%frame+218],%r738;
.loc 1 1442 7
setp.ne.u64 %r739,%r251,0;
@ %r739 bra $L123;
.loc 1 1444 39
min.u32 %r227,%r259,6;
mov.u32 %r347,%r227;
.loc 1 1443 8
cvta.const.u64 %r251,$LC6;
bra $L64;
$L123:
.loc 1 1511 7
setp.eq.u32 %r740,%r259,-1;
@ %r740 bra $L124;
.loc 1 1517 15
cvt.s64.s32 %r744,%r259;
mov.u32 %r742,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r251;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r742;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r744;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r745,[%value_in];
}
.loc 1 1519 8
setp.ne.u64 %r746,%r745,0;
@ %r746 bra $L125;
.loc 1 1674 7
ld.s8 %r386,[%frame+218];
mov.u32 %r347,%r259;
mov.u32 %r227,%r259;
mov.u32 %r253,%r252;
.loc 1 932 9
cvt.u32.u64 %r259,%r745;
.loc 1 937 8
mov.u32 %r256,%r259;
bra $L81;
$L125:
.loc 1 1520 15
sub.u64 %r747,%r745,%r251;
.loc 1 1520 11
cvt.u32.u64 %r227,%r747;
.loc 1 1674 7
ld.s8 %r386,[%frame+218];
.loc 1 1673 10
max.s32 %r347,%r227,0;
mov.u32 %r253,%r252;
.loc 1 932 9
mov.u32 %r259,%r742;
.loc 1 937 8
mov.u32 %r256,%r259;
bra $L81;
$L124:
.loc 1 1524 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r251;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r749,[%value_in];
}
.loc 1 1524 10
cvt.u32.u64 %r227,%r749;
.loc 1 1674 7
ld.s8 %r386,[%frame+218];
.loc 1 1673 10
max.s32 %r347,%r227,0;
mov.u32 %r253,%r252;
.loc 1 932 9
mov.u32 %r259,0;
.loc 1 937 8
mov.u32 %r256,%r259;
bra $L81;
$L18:
.loc 1 1528 10
or.b32 %r252,%r252,16;
$L51:
.loc 1 1531 13
and.b32 %r750,%r252,32;
setp.eq.u32 %r751,%r750,0;
@ %r751 bra $L126;
add.u64 %r71,%r423,7;
and.b64 %r345,%r71,-8;
add.u64 %r423,%r345,8;
ld.u64 %r257,[%r345];
.loc 1 1532 9
mov.u32 %r258,1;
bra $L120;
$L126:
.loc 1 1531 13
and.b32 %r752,%r252,16;
setp.eq.u32 %r753,%r752,0;
@ %r753 bra $L127;
add.u64 %r354,%r423,7;
and.b64 %r355,%r354,-8;
add.u64 %r423,%r355,8;
ld.u64 %r257,[%r355];
.loc 1 1532 9
mov.u32 %r258,1;
bra $L120;
$L127:
.loc 1 1007 10
ld.u32 %r373,[%r423];
add.u64 %r423,%r423,4;
.loc 1 1531 13
and.b32 %r754,%r252,64;
setp.eq.u32 %r755,%r754,0;
@ %r755 bra $L128;
cvt.u16.u32 %r756,%r373;
cvt.u64.u16 %r257,%r756;
.loc 1 1532 9
mov.u32 %r258,1;
bra $L120;
$L128:
.loc 1 1531 13
cvt.u64.u32 %r257,%r373;
.loc 1 1532 9
mov.u32 %r258,1;
bra $L120;
$L43:
setp.eq.u32 %r757,%r276,0;
@ %r757 bra $L129;
cvt.u32.u32 %r758,%r277;
st.u8 [%frame+218],%r758;
$L129:
.loc 1 1535 10
cvta.const.u64 %r260,$LC5;
$L56:
.loc 1 1539 17
and.b32 %r759,%r252,32;
setp.eq.u32 %r760,%r759,0;
@ %r760 bra $L130;
add.u64 %r359,%r423,7;
and.b64 %r357,%r359,-8;
add.u64 %r423,%r357,8;
ld.u64 %r257,[%r357];
bra $L131;
$L130:
and.b32 %r761,%r252,16;
setp.eq.u32 %r762,%r761,0;
@ %r762 bra $L132;
add.u64 %r363,%r423,7;
and.b64 %r286,%r363,-8;
add.u64 %r423,%r286,8;
ld.u64 %r257,[%r286];
bra $L131;
$L132:
.loc 1 1007 10
ld.u32 %r372,[%r423];
add.u64 %r423,%r423,4;
.loc 1 1539 17
and.b32 %r763,%r252,64;
setp.eq.u32 %r764,%r763,0;
@ %r764 bra $L133;
cvt.u16.u32 %r765,%r372;
cvt.u64.u16 %r257,%r765;
bra $L131;
$L133:
cvt.u64.u32 %r257,%r372;
$L131:
.loc 1 1542 14
and.b32 %r766,%r252,1;
.loc 1 1542 7
setp.eq.u32 %r767,%r766,0;
@ %r767 bra $L259;
.loc 1 1542 20
setp.eq.u64 %r768,%r257,0;
@ %r768 bra $L260;
.loc 1 1543 11
mov.u32 %r769,48;
st.u8 [%frame+216],%r769;
.loc 1 1544 11
st.u8 [%frame+217],%r248;
.loc 1 1545 11
or.b32 %r252,%r252,2;
.loc 1 1540 9
mov.u32 %r258,2;
bra $L120;
$L259:
mov.u32 %r258,2;
bra $L120;
$L260:
mov.u32 %r258,2;
$L120:
.loc 1 1552 16
mov.u32 %r770,0;
st.u8 [%frame+218],%r770;
mov.u32 %r386,0;
$L71:
.loc 1 1558 14
setp.eq.u32 %r771,%r259,-1;
@ %r771 bra $L134;
.loc 1 1559 11
and.b32 %r253,%r252,-129;
.loc 1 1567 15
set.u32.ne.u64 %r773,%r257,0;
neg.s32 %r774,%r773;
.loc 1 1567 28
set.u32.ne.u32 %r776,%r259,0;
neg.s32 %r777,%r776;
.loc 1 1567 20
cvt.u16.u32 %r779,%r774;
cvt.u16.u32 %r780,%r777;
or.b16 %r778,%r779,%r780;
.loc 1 1567 7
cvt.u32.u16 %r781,%r778;
cvt.u16.u8 %r782,%r781;
setp.eq.u16 %r783,%r782,0;
@ %r783 bra $L135;
.loc 1 1559 11
mov.u32 %r252,%r253;
$L134:
setp.eq.u32 %r784,%r258,1;
@ %r784 bra $L136;
setp.eq.u32 %r785,%r258,2;
@ %r785 bra $L261;
mov.u64 %r251,%r1323;
$L138:
mov.u64 %r279,%r251;
.loc 1 1576 13
add.u64 %r251,%r251,-1;
.loc 1 1576 15
cvt.u16.u64 %r788,%r257;
and.b16 %r787,%r788,7;
add.u16 %r790,%r787,48;
cvt.u32.u16 %r792,%r790;
cvt.s32.s8 %r122,%r792;
.loc 1 1576 13
st.u8 [%r251],%r792;
.loc 1 1577 14
shr.u64 %r257,%r257,3;
.loc 1 1578 6
setp.ne.u64 %r794,%r257,0;
@ %r794 bra $L138;
.loc 1 1580 22
cvt.u16.u32 %r796,%r122;
set.u32.ne.u16 %r797,%r796,48;
neg.s32 %r798,%r797;
.loc 1 1580 9
cvt.u16.u32 %r801,%r252;
and.b16 %r800,%r801,1;
.loc 1 1580 22
cvt.u16.u32 %r804,%r798;
and.b16 %r803,%r804,%r800;
cvt.u32.u16 %r806,%r803;
cvt.u16.u8 %r807,%r806;
setp.ne.u16 %r808,%r807,0;
@ %r808 bra $L139;
.loc 1 1644 21
sub.u64 %r811,%r1323,%r251;
.loc 1 1644 9
cvt.u32.u64 %r227,%r811;
mov.u32 %r253,%r252;
bra $L140;
$L139:
.loc 1 1581 13
add.u64 %r297,%r279,-2;
mov.u32 %r812,48;
st.u8 [%r251+-1],%r812;
.loc 1 1644 21
sub.u64 %r815,%r1323,%r297;
.loc 1 1644 9
cvt.u32.u64 %r227,%r815;
mov.u32 %r253,%r252;
.loc 1 1581 13
mov.u64 %r251,%r297;
bra $L140;
$L268:
.loc 1 1559 11
mov.u32 %r252,%r253;
$L136:
.loc 1 1586 9
setp.gt.u64 %r816,%r257,9;
@ %r816 bra $L262;
.loc 1 1587 15
cvt.u16.u64 %r819,%r257;
add.u16 %r818,%r819,48;
.loc 1 1587 13
cvt.u32.u16 %r820,%r818;
st.u8 [%frame+167],%r820;
.loc 1 1588 7
mov.u32 %r253,%r252;
mov.u32 %r227,1;
.loc 1 1587 13
add.u64 %r251,%frame,167;
.loc 1 1588 7
bra $L140;
$L262:
.loc 1 1566 7
mov.u64 %r251,%r1323;
$L141:
.loc 1 1594 14
add.u64 %r251,%r251,-1;
.loc 1 1594 16
rem.u64 %r822,%r257,10;
cvt.u16.u64 %r825,%r822;
add.u16 %r824,%r825,48;
.loc 1 1594 14
cvt.u32.u16 %r826,%r824;
st.u8 [%r251],%r826;
mov.u64 %r247,%r257;
.loc 1 1615 15
div.u64 %r257,%r257,10;
.loc 1 1616 6
setp.gt.u64 %r829,%r247,9;
@ %r829 bra $L141;
.loc 1 1644 21
sub.u64 %r832,%r1323,%r251;
.loc 1 1644 9
cvt.u32.u64 %r227,%r832;
mov.u32 %r253,%r252;
bra $L140;
$L261:
mov.u64 %r251,%r1323;
$L137:
.loc 1 1621 13
add.u64 %r251,%r251,-1;
.loc 1 1621 28
and.b64 %r833,%r257,15;
.loc 1 1621 20
add.u64 %r834,%r260,%r833;
.loc 1 1621 13
ld.u8 %r835,[%r834];
st.u8 [%r251],%r835;
.loc 1 1622 14
shr.u64 %r257,%r257,4;
.loc 1 1623 6
setp.ne.u64 %r836,%r257,0;
@ %r836 bra $L137;
.loc 1 1644 21
sub.u64 %r839,%r1323,%r251;
.loc 1 1644 9
cvt.u32.u64 %r227,%r839;
mov.u32 %r253,%r252;
bra $L140;
$L135:
.loc 1 1641 32
setp.ne.u32 %r840,%r258,0;
@ %r840 bra $L263;
.loc 1 1641 55
and.b32 %r227,%r252,1;
.loc 1 1641 45
setp.eq.u32 %r841,%r227,0;
@ %r841 bra $L264;
.loc 1 1642 32
mov.u32 %r842,48;
st.u8 [%frame+167],%r842;
mov.u32 %r259,%r258;
add.u64 %r251,%frame,167;
bra $L140;
$L263:
mov.u32 %r259,0;
mov.u32 %r227,%r259;
.loc 1 1566 7
add.u64 %r251,%frame,168;
bra $L140;
$L264:
mov.u32 %r259,%r258;
add.u64 %r251,%frame,168;
$L140:
.loc 1 1673 10
max.s32 %r347,%r259,%r227;
.loc 1 937 8
mov.u32 %r256,0;
bra $L81;
$L370:
setp.eq.u32 %r843,%r276,0;
@ %r843 bra $L142;
$L242:
cvt.u32.u32 %r844,%r277;
st.u8 [%frame+218],%r844;
$L142:
.loc 1 1648 7
setp.eq.u32 %r845,%r248,0;
@ %r845 bra $L15;
$L243:
.loc 1 1652 8
st.u8 [%frame+128],%r248;
.loc 1 1654 9
mov.u32 %r846,0;
st.u8 [%frame+218],%r846;
.loc 1 1655 4
mov.u32 %r347,1;
.loc 1 1653 9
mov.u32 %r227,%r347;
.loc 1 1651 7
add.u64 %r251,%frame,128;
.loc 1 1655 4
bra $L64;
$L112:
.loc 1 1674 7
ld.s8 %r386,[%frame+218];
.loc 1 932 9
mov.u32 %r259,%r162;
$L81:
.loc 1 1674 6
setp.eq.u32 %r847,%r386,0;
@ %r847 bra $L143;
$L113:
.loc 1 1675 10
add.u32 %r347,%r347,1;
$L143:
.loc 1 1676 13
and.b32 %r135,%r253,2;
.loc 1 1676 6
setp.eq.u32 %r1295,%r135,0;
@ %r1295 bra $L144;
.loc 1 1677 10
add.u32 %r347,%r347,2;
$L144:
.loc 1 1680 14
and.b32 %r136,%r253,132;
.loc 1 1685 4
ld.u64 %r392,[%frame+184];
.loc 1 1680 6
setp.ne.u32 %r849,%r136,0;
@ %r849 bra $L145;
.loc 1 1681 4
sub.u32 %r144,%r254,%r347;
setp.le.s32 %r850,%r144,0;
@ %r850 bra $L145;
ld.u32 %r391,[%frame+176];
setp.le.s32 %r851,%r144,16;
@ ! %r851 bra $L372;
cvta.const.u64 %r1294,blanks$1;
bra $L146;
$L372:
cvta.const.u64 %r1294,blanks$1;
$L149:
st.u64 [%r261],%r1294;
mov.u64 %r853,16;
st.u64 [%r261+8],%r853;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r391,%r391,1;
st.u32 [%frame+176],%r391;
setp.gt.s32 %r854,%r391,7;
@ %r854 bra $L147;
add.u64 %r261,%r261,16;
bra $L148;
$L147:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r859,[%value_in];
}
setp.ne.u32 %r860,%r859,0;
@ %r860 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r391,[%frame+176];
mov.u64 %r261,%frame;
$L148:
add.u32 %r144,%r144,-16;
setp.gt.s32 %r861,%r144,16;
@ %r861 bra $L149;
$L146:
st.u64 [%r261],%r1294;
cvt.s64.s32 %r138,%r144;
st.u64 [%r261+8],%r138;
add.u64 %r392,%r392,%r138;
st.u64 [%frame+184],%r392;
add.u32 %r139,%r391,1;
st.u32 [%frame+176],%r139;
setp.gt.s32 %r863,%r139,7;
@ %r863 bra $L150;
add.u64 %r261,%r261,16;
bra $L145;
$L150:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r868,[%value_in];
}
setp.ne.u32 %r869,%r868,0;
@ %r869 bra $L14;
.loc 1 1685 4
ld.u64 %r392,[%frame+184];
.loc 1 1681 4
mov.u64 %r261,%frame;
$L145:
.loc 1 1684 6
ld.s8 %r871,[%frame+218];
cvt.u16.u32 %r870,%r871;
setp.eq.u16 %r872,%r870,0;
@ %r872 bra $L151;
.loc 1 1685 4
st.u64 [%r261],%r1326;
mov.u64 %r874,1;
st.u64 [%r261+8],%r874;
add.u64 %r392,%r392,1;
st.u64 [%frame+184],%r392;
ld.u32 %r875,[%frame+176];
add.u32 %r143,%r875,1;
st.u32 [%frame+176],%r143;
setp.gt.s32 %r876,%r143,7;
@ %r876 bra $L152;
add.u64 %r261,%r261,16;
bra $L151;
$L152:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r881,[%value_in];
}
setp.ne.u32 %r882,%r881,0;
@ %r882 bra $L14;
.loc 1 1687 4
ld.u64 %r392,[%frame+184];
.loc 1 1685 4
mov.u64 %r261,%frame;
$L151:
.loc 1 1686 6
@ %r1295 bra $L153;
.loc 1 1687 4
st.u64 [%r261],%r1325;
mov.u64 %r885,2;
st.u64 [%r261+8],%r885;
add.u64 %r392,%r392,2;
st.u64 [%frame+184],%r392;
ld.u32 %r886,[%frame+176];
add.u32 %r147,%r886,1;
st.u32 [%frame+176],%r147;
setp.gt.s32 %r887,%r147,7;
@ %r887 bra $L154;
add.u64 %r261,%r261,16;
bra $L153;
$L154:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r892,[%value_in];
}
setp.ne.u32 %r893,%r892,0;
@ %r893 bra $L14;
.loc 1 1699 4
ld.u64 %r392,[%frame+184];
.loc 1 1687 4
mov.u64 %r261,%frame;
$L153:
.loc 1 1690 6
setp.ne.u32 %r894,%r136,128;
@ %r894 bra $L155;
.loc 1 1691 4
sub.u32 %r308,%r254,%r347;
setp.le.s32 %r895,%r308,0;
@ %r895 bra $L155;
ld.u32 %r393,[%frame+176];
setp.le.s32 %r896,%r308,16;
@ ! %r896 bra $L373;
cvta.const.u64 %r1293,zeroes$0;
bra $L156;
$L373:
cvta.const.u64 %r1293,zeroes$0;
$L159:
st.u64 [%r261],%r1293;
mov.u64 %r898,16;
st.u64 [%r261+8],%r898;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r393,%r393,1;
st.u32 [%frame+176],%r393;
setp.gt.s32 %r899,%r393,7;
@ %r899 bra $L157;
add.u64 %r261,%r261,16;
bra $L158;
$L157:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r904,[%value_in];
}
setp.ne.u32 %r905,%r904,0;
@ %r905 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r393,[%frame+176];
mov.u64 %r261,%frame;
$L158:
add.u32 %r308,%r308,-16;
setp.gt.s32 %r906,%r308,16;
@ %r906 bra $L159;
$L156:
st.u64 [%r261],%r1293;
cvt.s64.s32 %r151,%r308;
st.u64 [%r261+8],%r151;
add.u64 %r392,%r392,%r151;
st.u64 [%frame+184],%r392;
add.u32 %r153,%r393,1;
st.u32 [%frame+176],%r153;
setp.gt.s32 %r908,%r153,7;
@ %r908 bra $L160;
add.u64 %r261,%r261,16;
bra $L155;
$L160:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r913,[%value_in];
}
setp.ne.u32 %r914,%r913,0;
@ %r914 bra $L14;
.loc 1 1699 4
ld.u64 %r392,[%frame+184];
.loc 1 1691 4
mov.u64 %r261,%frame;
$L155:
.loc 1 1694 3
sub.u32 %r288,%r259,%r227;
setp.le.s32 %r915,%r288,0;
@ %r915 bra $L161;
ld.u32 %r394,[%frame+176];
setp.le.s32 %r916,%r288,16;
@ ! %r916 bra $L374;
cvta.const.u64 %r1293,zeroes$0;
bra $L162;
$L374:
cvta.const.u64 %r1293,zeroes$0;
$L165:
st.u64 [%r261],%r1293;
mov.u64 %r918,16;
st.u64 [%r261+8],%r918;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r394,%r394,1;
st.u32 [%frame+176],%r394;
setp.gt.s32 %r919,%r394,7;
@ %r919 bra $L163;
add.u64 %r261,%r261,16;
bra $L164;
$L163:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r924,[%value_in];
}
setp.ne.u32 %r925,%r924,0;
@ %r925 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r394,[%frame+176];
mov.u64 %r261,%frame;
$L164:
add.u32 %r288,%r288,-16;
setp.gt.s32 %r926,%r288,16;
@ %r926 bra $L165;
$L162:
st.u64 [%r261],%r1293;
cvt.s64.s32 %r157,%r288;
st.u64 [%r261+8],%r157;
add.u64 %r392,%r392,%r157;
st.u64 [%frame+184],%r392;
add.u32 %r158,%r394,1;
st.u32 [%frame+176],%r158;
setp.gt.s32 %r928,%r158,7;
@ %r928 bra $L166;
add.u64 %r261,%r261,16;
bra $L161;
$L166:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r933,[%value_in];
}
setp.ne.u32 %r934,%r933,0;
@ %r934 bra $L14;
.loc 1 1699 4
ld.u64 %r392,[%frame+184];
.loc 1 1694 3
mov.u64 %r261,%frame;
$L161:
.loc 1 1698 14
and.b32 %r935,%r253,256;
.loc 1 1698 6
setp.ne.u32 %r936,%r935,0;
@ %r936 bra $L167;
.loc 1 1699 4
st.u64 [%r261],%r251;
cvt.s64.s32 %r161,%r227;
st.u64 [%r261+8],%r161;
add.u64 %r392,%r392,%r161;
st.u64 [%frame+184],%r392;
ld.u32 %r937,[%frame+176];
add.u32 %r164,%r937,1;
st.u32 [%frame+176],%r164;
setp.gt.s32 %r938,%r164,7;
@ %r938 bra $L168;
add.u64 %r261,%r261,16;
bra $L169;
$L168:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r943,[%value_in];
}
setp.ne.u32 %r944,%r943,0;
@ %r944 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1699 4
mov.u64 %r261,%frame;
bra $L169;
$L167:
.loc 1 1701 7
setp.le.s32 %r945,%r248,101;
@ %r945 bra $L170;
.loc 1 1702 8
setp.neu.f64 %r946,%r28,0d0000000000000000;
@ %r946 bra $L171;
.loc 1 1704 6
cvta.const.u64 %r947,$LC7;
st.u64 [%r261],%r947;
mov.u64 %r948,1;
st.u64 [%r261+8],%r948;
add.u64 %r392,%r392,1;
st.u64 [%frame+184],%r392;
ld.u32 %r949,[%frame+176];
add.u32 %r167,%r949,1;
st.u32 [%frame+176],%r167;
setp.gt.s32 %r950,%r167,7;
@ %r950 bra $L172;
add.u64 %r261,%r261,16;
bra $L173;
$L172:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r955,[%value_in];
}
setp.ne.u32 %r956,%r955,0;
@ %r956 bra $L14;
.loc 1 1706 7
ld.u64 %r392,[%frame+184];
.loc 1 1704 6
mov.u64 %r261,%frame;
$L173:
.loc 1 1705 9
ld.u32 %r957,[%frame+212];
setp.lt.s32 %r958,%r957,%r70;
@ %r958 bra $L174;
.loc 1 1705 31
and.b32 %r959,%r253,1;
.loc 1 1705 22
setp.eq.u32 %r960,%r959,0;
@ %r960 bra $L169;
$L174:
.loc 1 1706 7
st.u64 [%r261],%r266;
st.u64 [%r261+8],%r436;
add.u64 %r392,%r392,%r436;
st.u64 [%frame+184],%r392;
ld.u32 %r961,[%frame+176];
add.u32 %r172,%r961,1;
st.u32 [%frame+176],%r172;
setp.gt.s32 %r962,%r172,7;
@ %r962 bra $L175;
add.u64 %r261,%r261,16;
bra $L176;
$L175:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r967,[%value_in];
}
setp.ne.u32 %r968,%r967,0;
@ %r968 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1706 7
mov.u64 %r261,%frame;
$L176:
.loc 1 1707 7
add.u32 %r123,%r70,-1;
setp.le.s32 %r969,%r123,0;
@ %r969 bra $L169;
ld.u32 %r408,[%frame+176];
setp.le.s32 %r970,%r123,16;
@ ! %r970 bra $L375;
cvta.const.u64 %r1293,zeroes$0;
bra $L177;
$L375:
cvta.const.u64 %r1293,zeroes$0;
$L180:
st.u64 [%r261],%r1293;
mov.u64 %r972,16;
st.u64 [%r261+8],%r972;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r408,%r408,1;
st.u32 [%frame+176],%r408;
setp.gt.s32 %r973,%r408,7;
@ %r973 bra $L178;
add.u64 %r261,%r261,16;
bra $L179;
$L178:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r978,[%value_in];
}
setp.ne.u32 %r979,%r978,0;
@ %r979 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r408,[%frame+176];
mov.u64 %r261,%frame;
$L179:
add.u32 %r123,%r123,-16;
setp.gt.s32 %r980,%r123,16;
@ %r980 bra $L180;
$L177:
st.u64 [%r261],%r1293;
cvt.s64.s32 %r176,%r123;
st.u64 [%r261+8],%r176;
add.u64 %r392,%r392,%r176;
st.u64 [%frame+184],%r392;
add.u32 %r177,%r408,1;
st.u32 [%frame+176],%r177;
setp.gt.s32 %r982,%r177,7;
@ %r982 bra $L181;
add.u64 %r261,%r261,16;
bra $L169;
$L181:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r987,[%value_in];
}
setp.ne.u32 %r988,%r987,0;
@ %r988 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1707 7
mov.u64 %r261,%frame;
bra $L169;
$L171:
.loc 1 1709 21
ld.u32 %r179,[%frame+212];
.loc 1 1709 15
setp.gt.s32 %r989,%r179,0;
@ %r989 bra $L182;
.loc 1 1710 6
cvta.const.u64 %r990,$LC7;
st.u64 [%r261],%r990;
mov.u64 %r991,1;
st.u64 [%r261+8],%r991;
add.u64 %r392,%r392,1;
st.u64 [%frame+184],%r392;
ld.u32 %r992,[%frame+176];
add.u32 %r181,%r992,1;
st.u32 [%frame+176],%r181;
setp.gt.s32 %r993,%r181,7;
@ %r993 bra $L183;
add.u64 %r261,%r261,16;
bra $L184;
$L183:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r998,[%value_in];
}
setp.ne.u32 %r999,%r998,0;
@ %r999 bra $L14;
.loc 1 1711 10
ld.u32 %r179,[%frame+212];
.loc 1 1712 7
ld.u64 %r392,[%frame+184];
.loc 1 1710 6
mov.u64 %r261,%frame;
$L184:
.loc 1 1711 15
or.b32 %r1000,%r70,%r179;
setp.ne.u32 %r1001,%r1000,0;
@ %r1001 bra $L185;
.loc 1 1711 32
and.b32 %r1002,%r253,1;
.loc 1 1711 23
setp.ne.u32 %r1003,%r1002,0;
@ %r1003 bra $L186;
bra $L169;
$L185:
.loc 1 1712 7
st.u64 [%r261],%r266;
st.u64 [%r261+8],%r436;
add.u64 %r406,%r436,%r392;
st.u64 [%frame+184],%r406;
ld.u32 %r1004,[%frame+176];
add.u32 %r407,%r1004,1;
st.u32 [%frame+176],%r407;
setp.gt.s32 %r1005,%r407,7;
@ %r1005 bra $L187;
add.u64 %r262,%r261,16;
bra $L188;
$L187:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1010,[%value_in];
}
setp.ne.u32 %r1011,%r1010,0;
@ %r1011 bra $L14;
.loc 1 1713 7
ld.u32 %r179,[%frame+212];
.loc 1 1714 7
ld.u64 %r406,[%frame+184];
ld.u32 %r407,[%frame+176];
.loc 1 1712 7
mov.u64 %r262,%frame;
$L188:
.loc 1 1713 7
setp.ge.s32 %r1012,%r179,0;
@ %r1012 bra $L189;
neg.s32 %r281,%r179;
setp.ge.s32 %r1013,%r179,-16;
@ ! %r1013 bra $L376;
cvta.const.u64 %r1293,zeroes$0;
bra $L190;
$L376:
cvta.const.u64 %r1293,zeroes$0;
$L193:
st.u64 [%r262],%r1293;
mov.u64 %r1015,16;
st.u64 [%r262+8],%r1015;
add.u64 %r406,%r406,16;
st.u64 [%frame+184],%r406;
add.u32 %r407,%r407,1;
st.u32 [%frame+176],%r407;
setp.gt.s32 %r1016,%r407,7;
@ %r1016 bra $L191;
add.u64 %r262,%r262,16;
bra $L192;
$L191:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1021,[%value_in];
}
setp.ne.u32 %r1022,%r1021,0;
@ %r1022 bra $L14;
ld.u64 %r406,[%frame+184];
ld.u32 %r407,[%frame+176];
mov.u64 %r262,%frame;
$L192:
add.u32 %r281,%r281,-16;
setp.gt.s32 %r1023,%r281,16;
@ %r1023 bra $L193;
$L190:
st.u64 [%r262],%r1293;
cvt.s64.s32 %r189,%r281;
st.u64 [%r262+8],%r189;
add.u64 %r406,%r406,%r189;
st.u64 [%frame+184],%r406;
add.u32 %r407,%r407,1;
st.u32 [%frame+176],%r407;
setp.gt.s32 %r1025,%r407,7;
@ %r1025 bra $L194;
add.u64 %r262,%r262,16;
bra $L189;
$L194:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1030,[%value_in];
}
setp.ne.u32 %r1031,%r1030,0;
@ %r1031 bra $L14;
.loc 1 1714 7
ld.u64 %r406,[%frame+184];
ld.u32 %r407,[%frame+176];
.loc 1 1713 7
mov.u64 %r262,%frame;
$L189:
.loc 1 1714 7
st.u64 [%r262],%r251;
cvt.s64.s32 %r191,%r70;
st.u64 [%r262+8],%r191;
add.u64 %r392,%r191,%r406;
st.u64 [%frame+184],%r392;
add.u32 %r192,%r407,1;
st.u32 [%frame+176],%r192;
setp.gt.s32 %r1032,%r192,7;
@ %r1032 bra $L195;
add.u64 %r261,%r262,16;
bra $L169;
$L195:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1037,[%value_in];
}
setp.ne.u32 %r1038,%r1037,0;
@ %r1038 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1714 7
mov.u64 %r261,%frame;
bra $L169;
$L182:
min.s32 %r27,%r256,%r70;
.loc 1 1718 6
setp.le.s32 %r1039,%r27,0;
@ %r1039 bra $L196;
st.u64 [%r261],%r251;
cvt.s64.s32 %r194,%r27;
st.u64 [%r261+8],%r194;
add.u64 %r392,%r392,%r194;
st.u64 [%frame+184],%r392;
ld.u32 %r1040,[%frame+176];
add.u32 %r197,%r1040,1;
st.u32 [%frame+176],%r197;
setp.gt.s32 %r1041,%r197,7;
@ %r1041 bra $L197;
add.u64 %r261,%r261,16;
bra $L196;
$L197:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1046,[%value_in];
}
setp.ne.u32 %r1047,%r1046,0;
@ %r1047 bra $L14;
.loc 1 1740 10
ld.u64 %r392,[%frame+184];
.loc 1 1718 6
mov.u64 %r261,%frame;
$L196:
max.s32 %r199,%r27,0;
sub.u32 %r313,%r256,%r199;
setp.le.s32 %r1048,%r313,0;
@ %r1048 bra $L198;
ld.u32 %r403,[%frame+176];
setp.le.s32 %r1049,%r313,16;
@ ! %r1049 bra $L377;
cvta.const.u64 %r1293,zeroes$0;
bra $L199;
$L377:
cvta.const.u64 %r1293,zeroes$0;
$L202:
st.u64 [%r261],%r1293;
mov.u64 %r1051,16;
st.u64 [%r261+8],%r1051;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r403,%r403,1;
st.u32 [%frame+176],%r403;
setp.gt.s32 %r1052,%r403,7;
@ %r1052 bra $L200;
add.u64 %r261,%r261,16;
bra $L201;
$L200:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1057,[%value_in];
}
setp.ne.u32 %r1058,%r1057,0;
@ %r1058 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r403,[%frame+176];
mov.u64 %r261,%frame;
$L201:
add.u32 %r313,%r313,-16;
setp.gt.s32 %r1059,%r313,16;
@ %r1059 bra $L202;
$L199:
st.u64 [%r261],%r1293;
cvt.s64.s32 %r201,%r313;
st.u64 [%r261+8],%r201;
add.u64 %r392,%r392,%r201;
st.u64 [%frame+184],%r392;
add.u32 %r202,%r403,1;
st.u32 [%frame+176],%r202;
setp.gt.s32 %r1061,%r202,7;
@ %r1061 bra $L203;
add.u64 %r261,%r261,16;
bra $L198;
$L203:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1066,[%value_in];
}
setp.ne.u32 %r1067,%r1066,0;
@ %r1067 bra $L14;
.loc 1 1740 10
ld.u64 %r392,[%frame+184];
.loc 1 1718 6
mov.u64 %r261,%frame;
$L198:
.loc 1 1739 15
ld.u32 %r206,[%frame+212];
.loc 1 1739 9
setp.lt.s32 %r1068,%r206,%r70;
@ %r1068 bra $L204;
.loc 1 1739 31
and.b32 %r1069,%r253,1;
.loc 1 1739 22
setp.eq.u32 %r1070,%r1069,0;
@ %r1070 bra $L205;
$L204:
.loc 1 1740 10
st.u64 [%r261],%r266;
st.u64 [%r261+8],%r436;
add.u64 %r392,%r392,%r436;
st.u64 [%frame+184],%r392;
ld.u32 %r1071,[%frame+176];
add.u32 %r209,%r1071,1;
st.u32 [%frame+176],%r209;
setp.gt.s32 %r1072,%r209,7;
@ %r1072 bra $L206;
add.u64 %r261,%r261,16;
bra $L207;
$L206:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1077,[%value_in];
}
setp.ne.u32 %r1078,%r1077,0;
@ %r1078 bra $L14;
.loc 1 1741 6
ld.u32 %r206,[%frame+212];
ld.u64 %r392,[%frame+184];
.loc 1 1740 10
mov.u64 %r261,%frame;
$L207:
.loc 1 1741 6
sub.u32 %r315,%r70,%r256;
sub.u32 %r212,%r70,%r206;
min.s32 %r25,%r212,%r315;
setp.le.s32 %r1079,%r25,0;
@ %r1079 bra $L208;
.loc 1 1720 9
cvt.s64.s32 %r1080,%r256;
add.u64 %r1081,%r251,%r1080;
.loc 1 1741 6
st.u64 [%r261],%r1081;
cvt.s64.s32 %r213,%r25;
st.u64 [%r261+8],%r213;
add.u64 %r392,%r392,%r213;
st.u64 [%frame+184],%r392;
ld.u32 %r1082,[%frame+176];
add.u32 %r215,%r1082,1;
st.u32 [%frame+176],%r215;
setp.gt.s32 %r1083,%r215,7;
@ %r1083 bra $L209;
add.u64 %r261,%r261,16;
bra $L208;
$L209:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1088,[%value_in];
}
setp.ne.u32 %r1089,%r1088,0;
@ %r1089 bra $L14;
ld.u32 %r1090,[%frame+212];
sub.u32 %r212,%r70,%r1090;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1741 6
mov.u64 %r261,%frame;
$L208:
max.s32 %r217,%r25,0;
sub.u32 %r316,%r212,%r217;
setp.le.s32 %r1091,%r316,0;
@ %r1091 bra $L169;
ld.u32 %r405,[%frame+176];
setp.le.s32 %r1092,%r316,16;
@ ! %r1092 bra $L378;
cvta.const.u64 %r1293,zeroes$0;
bra $L210;
$L378:
cvta.const.u64 %r1293,zeroes$0;
$L213:
st.u64 [%r261],%r1293;
mov.u64 %r1094,16;
st.u64 [%r261+8],%r1094;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r405,%r405,1;
st.u32 [%frame+176],%r405;
setp.gt.s32 %r1095,%r405,7;
@ %r1095 bra $L211;
add.u64 %r261,%r261,16;
bra $L212;
$L211:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1100,[%value_in];
}
setp.ne.u32 %r1101,%r1100,0;
@ %r1101 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r405,[%frame+176];
mov.u64 %r261,%frame;
$L212:
add.u32 %r316,%r316,-16;
setp.gt.s32 %r1102,%r316,16;
@ %r1102 bra $L213;
$L210:
st.u64 [%r261],%r1293;
cvt.s64.s32 %r220,%r316;
st.u64 [%r261+8],%r220;
add.u64 %r392,%r392,%r220;
st.u64 [%frame+184],%r392;
add.u32 %r221,%r405,1;
st.u32 [%frame+176],%r221;
setp.gt.s32 %r1104,%r221,7;
@ %r1104 bra $L214;
add.u64 %r261,%r261,16;
bra $L169;
$L214:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1109,[%value_in];
}
setp.ne.u32 %r1110,%r1109,0;
@ %r1110 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1741 6
mov.u64 %r261,%frame;
bra $L169;
$L170:
.loc 1 1704 6
add.u64 %r225,%r392,1;
.loc 1 1699 4
ld.u32 %r413,[%frame+176];
add.u32 %r395,%r413,1;
add.u64 %r263,%r261,16;
.loc 1 1745 8
setp.gt.s32 %r1111,%r70,1;
@ %r1111 bra $L215;
.loc 1 1745 27
and.b32 %r1112,%r253,1;
.loc 1 1745 18
setp.eq.u32 %r1113,%r1112,0;
@ %r1113 bra $L216;
$L215:
.loc 1 1746 6
st.u64 [%r261],%r251;
mov.u64 %r1114,1;
st.u64 [%r261+8],%r1114;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r395;
setp.le.s32 %r1115,%r395,7;
@ %r1115 bra $L217;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1120,[%value_in];
}
setp.ne.u32 %r1121,%r1120,0;
@ %r1121 bra $L14;
.loc 1 1748 6
ld.u64 %r225,[%frame+184];
ld.u32 %r395,[%frame+176];
.loc 1 1746 6
mov.u64 %r263,%frame;
$L217:
.loc 1 1748 6
st.u64 [%r263],%r266;
st.u64 [%r263+8],%r436;
add.u64 %r225,%r225,%r436;
st.u64 [%frame+184],%r225;
add.u32 %r397,%r395,1;
st.u32 [%frame+176],%r397;
setp.gt.s32 %r1122,%r397,7;
@ %r1122 bra $L218;
add.u64 %r263,%r263,16;
bra $L219;
$L218:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1127,[%value_in];
}
setp.ne.u32 %r1128,%r1127,0;
@ %r1128 bra $L14;
.loc 1 1750 7
ld.u64 %r225,[%frame+184];
ld.u32 %r397,[%frame+176];
.loc 1 1748 6
mov.u64 %r263,%frame;
$L219:
.loc 1 1750 7
add.u32 %r396,%r397,1;
mov.u32 %r1291,%r396;
.loc 1 1707 7
add.u32 %r310,%r70,-1;
.loc 1 1750 7
add.u64 %r261,%r263,16;
.loc 1 1749 9
setp.eq.f64 %r1129,%r28,0d0000000000000000;
@ %r1129 bra $L220;
.loc 1 1747 8
add.u64 %r1130,%r251,1;
.loc 1 1750 7
st.u64 [%r263],%r1130;
cvt.s64.s32 %r228,%r310;
st.u64 [%r263+8],%r228;
add.u64 %r225,%r225,%r228;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r396;
setp.gt.s32 %r1131,%r396,7;
@ %r1131 bra $L221;
.loc 1 1756 5
add.u32 %r396,%r397,2;
add.u64 %r402,%r263,32;
.loc 1 1750 7
mov.u64 %r263,%r261;
.loc 1 1756 5
mov.u64 %r261,%r402;
bra $L222;
$L221:
.loc 1 1750 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1136,[%value_in];
}
setp.ne.u32 %r1137,%r1136,0;
@ %r1137 bra $L14;
.loc 1 1756 5
ld.u64 %r225,[%frame+184];
ld.u32 %r1138,[%frame+176];
add.u32 %r396,%r1138,1;
add.u64 %r261,%frame,16;
.loc 1 1750 7
mov.u64 %r263,%frame;
bra $L222;
$L220:
.loc 1 1753 7
setp.le.s32 %r1139,%r310,0;
@ %r1139 bra $L222;
setp.le.s32 %r1140,%r310,16;
@ %r1140 bra $L265;
cvta.const.u64 %r1293,zeroes$0;
$L226:
st.u64 [%r263],%r1293;
mov.u64 %r1142,16;
st.u64 [%r263+8],%r1142;
add.u64 %r225,%r225,16;
st.u64 [%frame+184],%r225;
mov.u32 %r397,%r1291;
st.u32 [%frame+176],%r397;
setp.gt.s32 %r1143,%r397,7;
@ %r1143 bra $L224;
add.u64 %r263,%r263,16;
bra $L225;
$L224:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1148,[%value_in];
}
setp.ne.u32 %r1149,%r1148,0;
@ %r1149 bra $L14;
ld.u64 %r225,[%frame+184];
ld.u32 %r397,[%frame+176];
mov.u64 %r263,%frame;
$L225:
add.u32 %r310,%r310,-16;
setp.gt.s32 %r1150,%r310,16;
@ ! %r1150 bra $L379;
add.u32 %r1291,%r397,1;
bra $L226;
$L379:
add.u32 %r396,%r397,1;
add.u64 %r398,%r263,16;
bra $L223;
$L265:
mov.u64 %r398,%r261;
cvta.const.u64 %r1293,zeroes$0;
$L223:
st.u64 [%r263],%r1293;
cvt.s64.s32 %r232,%r310;
st.u64 [%r263+8],%r232;
add.u64 %r225,%r225,%r232;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r396;
setp.gt.s32 %r1152,%r396,7;
@ %r1152 bra $L227;
.loc 1 1756 5
add.u32 %r396,%r396,1;
add.u64 %r261,%r398,16;
.loc 1 1753 7
mov.u64 %r263,%r398;
bra $L222;
$L227:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1157,[%value_in];
}
setp.ne.u32 %r1158,%r1157,0;
@ %r1158 bra $L14;
.loc 1 1756 5
ld.u64 %r225,[%frame+184];
ld.u32 %r1159,[%frame+176];
add.u32 %r396,%r1159,1;
add.u64 %r261,%frame,16;
.loc 1 1753 7
mov.u64 %r263,%frame;
bra $L222;
$L216:
.loc 1 1755 6
st.u64 [%r261],%r251;
mov.u64 %r1160,1;
st.u64 [%r261+8],%r1160;
st.u64 [%frame+184],%r225;
st.u32 [%frame+176],%r395;
setp.gt.s32 %r1161,%r395,7;
@ %r1161 bra $L228;
.loc 1 1756 5
add.u32 %r396,%r413,2;
add.u64 %r261,%r261,32;
bra $L222;
$L228:
.loc 1 1755 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1166,[%value_in];
}
setp.ne.u32 %r1167,%r1166,0;
@ %r1167 bra $L14;
.loc 1 1756 5
ld.u64 %r225,[%frame+184];
ld.u32 %r1168,[%frame+176];
add.u32 %r396,%r1168,1;
add.u64 %r261,%frame,16;
.loc 1 1755 6
mov.u64 %r263,%frame;
$L222:
.loc 1 1756 5
st.u64 [%r263],%r1324;
cvt.s64.s32 %r235,%r255;
st.u64 [%r263+8],%r235;
add.u64 %r392,%r235,%r225;
st.u64 [%frame+184],%r392;
st.u32 [%frame+176],%r396;
setp.le.s32 %r1170,%r396,7;
@ %r1170 bra $L169;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1175,[%value_in];
}
setp.ne.u32 %r1176,%r1175,0;
@ %r1176 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
.loc 1 1756 5
mov.u64 %r261,%frame;
$L169:
.loc 1 1763 13
and.b32 %r1177,%r253,4;
.loc 1 1763 6
setp.eq.u32 %r1178,%r1177,0;
@ %r1178 bra $L229;
.loc 1 1764 4
sub.u32 %r195,%r254,%r347;
setp.le.s32 %r1179,%r195,0;
@ %r1179 bra $L229;
ld.u32 %r409,[%frame+176];
setp.le.s32 %r1180,%r195,16;
@ ! %r1180 bra $L380;
cvta.const.u64 %r1294,blanks$1;
bra $L230;
$L380:
cvta.const.u64 %r1294,blanks$1;
$L233:
st.u64 [%r261],%r1294;
mov.u64 %r1182,16;
st.u64 [%r261+8],%r1182;
add.u64 %r392,%r392,16;
st.u64 [%frame+184],%r392;
add.u32 %r409,%r409,1;
st.u32 [%frame+176],%r409;
setp.gt.s32 %r1183,%r409,7;
@ %r1183 bra $L231;
add.u64 %r261,%r261,16;
bra $L232;
$L231:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1188,[%value_in];
}
setp.ne.u32 %r1189,%r1188,0;
@ %r1189 bra $L14;
ld.u64 %r392,[%frame+184];
ld.u32 %r409,[%frame+176];
mov.u64 %r261,%frame;
$L232:
add.u32 %r195,%r195,-16;
setp.gt.s32 %r1190,%r195,16;
@ %r1190 bra $L233;
$L230:
st.u64 [%r261],%r1294;
cvt.s64.s32 %r239,%r195;
st.u64 [%r261+8],%r239;
add.u64 %r392,%r392,%r239;
st.u64 [%frame+184],%r392;
add.u32 %r240,%r409,1;
st.u32 [%frame+176],%r240;
setp.le.s32 %r1192,%r240,7;
@ %r1192 bra $L229;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1197,[%value_in];
}
setp.ne.u32 %r1198,%r1197,0;
@ %r1198 bra $L14;
.loc 1 1769 3
ld.u64 %r392,[%frame+184];
$L229:
.loc 1 1767 33
max.s32 %r1199,%r254,%r347;
.loc 1 1767 7
add.u32 %r419,%r419,%r1199;
.loc 1 1769 3
setp.ne.u64 %r1200,%r392,0;
@ %r1200 bra $L234;
$L235:
mov.u32 %r1201,0;
st.u32 [%frame+176],%r1201;
mov.u64 %r261,%frame;
bra $L9;
$L234:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1323;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1206,[%value_in];
}
setp.ne.u32 %r1207,%r1206,0;
@ ! %r1207 bra $L235;
bra $L14;
$L15:
.loc 1 1777 2
ld.u64 %r1208,[%frame+184];
setp.eq.u64 %r1209,%r1208,0;
@ %r1209 bra $L14;
add.u64 %r1213,%frame,168;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r421;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1213;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1214,[%value_in];
}
$L14:
.loc 1 1784 31
ld.u16 %r1216,[%r421+16];
and.b16 %r1215,%r1216,64;
setp.ne.u16 %r1217,%r1215,0;
@ ! %r1217 bra $L1;
bra $L236;
$L186:
.loc 1 1712 7
st.u64 [%r261],%r266;
st.u64 [%r261+8],%r436;
add.u64 %r406,%r436,%r392;
st.u64 [%frame+184],%r406;
ld.u32 %r1219,[%frame+176];
add.u32 %r407,%r1219,1;
st.u32 [%frame+176],%r407;
setp.gt.s32 %r1220,%r407,7;
@ %r1220 bra $L187;
add.u64 %r262,%r261,16;
bra $L189;
$L64:
.loc 1 932 9
mov.u32 %r253,%r252;
mov.u32 %r259,0;
mov.u32 %r256,%r259;
bra $L143;
$L70:
.loc 1 964 8
ld.s8 %r386,[%frame+218];
.loc 1 1558 14
setp.ne.u32 %r1221,%r259,-1;
@ %r1221 bra $L237;
bra $L136;
$L266:
.loc 1 1875 5
mov.u32 %r323,%r259;
$L90:
.loc 1 1876 15
cvt.s64.s32 %r1222,%r323;
.loc 1 1876 6
add.u64 %r326,%r251,%r1222;
bra $L238;
$L89:
.loc 1 1873 11
mov.u32 %r1225,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r229;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1225;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r259;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1334;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1333;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1332;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r1233,[%value_in];
}
mov.u64 %r251,%r1233;
.loc 1 1875 5
setp.ne.u32 %r1292,%r377,71;
@ %r1292 bra $L266;
mov.u32 %r418,%r259;
bra $L239;
$L88:
.loc 1 1873 11
mov.u32 %r1237,3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r229;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1237;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r259;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1334;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1333;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1332;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r1245,[%value_in];
}
mov.u64 %r251,%r1245;
.loc 1 1876 15
cvt.s64.s32 %r184,%r259;
.loc 1 1878 7
ld.s8 %r1248,[%r1245];
cvt.u16.u32 %r1247,%r1248;
set.u32.eq.u16 %r1249,%r1247,48;
neg.s32 %r1250,%r1249;
.loc 1 1878 23
set.u32.neu.f64 %r1252,%r229,0d0000000000000000;
neg.s32 %r1253,%r1252;
cvt.u16.u32 %r1255,%r1250;
cvt.u16.u32 %r1256,%r1253;
and.b16 %r1254,%r1255,%r1256;
cvt.u32.u16 %r1257,%r1254;
cvt.u16.u8 %r1258,%r1257;
setp.ne.u16 %r1259,%r1258,0;
@ ! %r1259 bra $L381;
bra $L240;
$L205:
.loc 1 1741 6
sub.u32 %r273,%r70,%r256;
sub.u32 %r212,%r70,%r206;
min.s32 %r25,%r273,%r212;
bra $L208;
$L29:
setp.ne.u32 %r1260,%r276,0;
@ ! %r1260 bra $L243;
bra $L242;
$L244:
.loc 1 1876 15
cvt.s64.s32 %r1261,%r418;
.loc 1 1876 6
add.u64 %r326,%r251,%r1261;
setp.ne.u32 %r1292,%r377,71;
bra $L238;
$L239:
.loc 1 1875 31
and.b32 %r1262,%r252,1;
setp.ne.u32 %r1263,%r1262,0;
@ %r1263 bra $L244;
bra $L382;
$L383:
.loc 1 1873 11
mov.u32 %r1267,1;
mov.u32 %r1266,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r420;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r28;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1266;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r1267;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1334;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1333;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r1332;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r1274,[%value_in];
}
mov.u64 %r251,%r1274;
mov.f64 %r229,%r28;
.loc 1 1811 9
mov.u32 %r162,0;
.loc 1 1305 10
mov.u32 %r259,%r1267;
mov.u32 %r418,%r259;
bra $L239;
$L86:
.loc 1 1308 10
or.b32 %r253,%r252,256;
.loc 1 1807 6
mov.b64 %r1275,%r28;
shr.u64 %r1276,%r1275,32;
.loc 1 1807 5
cvt.u32.u64 %r1277,%r1276;
setp.lt.s32 %r1278,%r1277,0;
@ ! %r1278 bra $L383;
bra $L267;
$L237:
.loc 1 1559 11
and.b32 %r253,%r252,-129;
.loc 1 1567 28
set.u32.ne.u32 %r1280,%r259,0;
neg.s32 %r1281,%r1280;
.loc 1 1567 15
set.u32.ne.u64 %r1283,%r257,0;
neg.s32 %r1284,%r1283;
.loc 1 1567 20
cvt.u16.u32 %r1286,%r1281;
cvt.u16.u32 %r1287,%r1284;
or.b16 %r1285,%r1286,%r1287;
.loc 1 1567 7
cvt.u32.u16 %r1288,%r1285;
cvt.u16.u8 %r1289,%r1288;
setp.ne.u16 %r1290,%r1289,0;
@ %r1290 bra $L268;
mov.u32 %r259,0;
mov.u32 %r227,%r259;
.loc 1 1566 7
add.u64 %r251,%frame,168;
bra $L140;
$L1:
.loc 1 1786 1
mov.u32 %value,%r419;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfprintf
.visible .func (.param .u32 %value_out) vfprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 647 12
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 649 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: __sbprintf
.func (.param .u32 %value_out) __sbprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[1200];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u32 %r40;
.reg .u16 %r41;
.reg .u64 %r42;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u64 %r51;
.reg .u32 %r52;
.reg .pred %r53;
.reg .u32 %r57;
.reg .pred %r58;
.reg .u16 %r59;
.reg .u16 %r60;
.reg .pred %r61;
.reg .u16 %r62;
.reg .u16 %r63;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
mov.u64 %r36,%ar2;
mov.u64 %r37,%ar3;
.loc 1 461 14
ld.u16 %r39,[%r35+16];
and.b16 %r38,%r39,-3;
st.u16 [%frame+1040],%r38;
.loc 1 462 15
ld.u32 %r40,[%r35+172];
st.u32 [%frame+1196],%r40;
.loc 1 463 13
ld.u16 %r41,[%r35+18];
st.u16 [%frame+1042],%r41;
.loc 1 464 15
ld.u64 %r42,[%r35+48];
st.u64 [%frame+1072],%r42;
.loc 1 465 14
ld.u64 %r43,[%r35+64];
st.u64 [%frame+1088],%r43;
.loc 1 468 27
st.u64 [%frame+1024],%frame;
.loc 1 468 17
st.u64 [%frame+1048],%frame;
.loc 1 469 27
mov.u32 %r44,1024;
st.u32 [%frame+1036],%r44;
.loc 1 469 17
st.u32 [%frame+1056],%r44;
.loc 1 470 16
mov.u32 %r46,0;
st.u32 [%frame+1064],%r46;
.loc 1 476 8
add.u64 %r51,%frame,1024;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r36;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r37;
call (%value_in),_vfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r52,[%value_in];
}
mov.u32 %r33,%r52;
.loc 1 477 5
setp.lt.s32 %r53,%r33,0;
@ %r53 bra $L386;
.loc 1 477 18
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r57,[%value_in];
}
.loc 1 477 15
setp.eq.u32 %r58,%r57,0;
.loc 1 478 7
selp.u32 %r33,%r33,-1,%r58;
$L386:
.loc 1 479 5
ld.u16 %r60,[%frame+1040];
and.b16 %r59,%r60,64;
setp.eq.u16 %r61,%r59,0;
@ %r61 bra $L385;
.loc 1 480 14
ld.u16 %r63,[%r35+16];
or.b16 %r62,%r63,64;
st.u16 [%r35+16],%r62;
$L385:
.loc 1 486 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-vfscanf.o/1612277263  0     0     100666  61775     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: __svfscanf_r
.visible .func (.param .u32 %value_out) __svfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfscanf.c"
// BEGIN GLOBAL FUNCTION DECL: vfscanf
.visible .func (.param .u32 %value_out) vfscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __svfscanf
.visible .func (.param .u32 %value_out) __svfscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _vfscanf_r
.visible .func (.param .u32 %value_out) _vfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _ctype_
.extern .const .align 1 .u8 _ctype_[];
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __srefill_r
.extern .func (.param .u32 %value_out) __srefill_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _strtol_r
.extern .func (.param .u64 %value_out) _strtol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoul_r
.extern .func (.param .u64 %value_out) _strtoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __sccl
.extern .func (.param .u64 %value_out) __sccl (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fread_r
.extern .func (.param .u64 %value_out) _fread_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _ungetc_r
.extern .func (.param .u32 %value_out) _ungetc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtoull_r
.extern .func (.param .u64 %value_out) _strtoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _strtoll_r
.extern .func (.param .u64 %value_out) _strtoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: sprintf
.extern .func (.param .u32 %value_out) sprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _strtod_r
.extern .func (.param .f64 %value_out) _strtod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: nanf
.extern .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[1] =
{0 };
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[5] =
{101,37,108,100,0 };
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN GLOBAL FUNCTION DEF: __svfscanf_r
.visible .func (.param .u32 %value_out) __svfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[608];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r22;
.reg .u64 %r25;
.reg .u32 %r27;
.reg .u64 %r33;
.reg .u32 %r40;
.reg .u64 %r44;
.reg .u32 %r67;
.reg .u64 %r68;
.reg .u64 %r77;
.reg .u32 %r94;
.reg .u64 %r97;
.reg .u64 %r109;
.reg .u32 %r116;
.reg .u64 %r119;
.reg .u32 %r127;
.reg .u64 %r133;
.reg .u64 %r143;
.reg .u32 %r144;
.reg .u32 %r153;
.reg .u64 %r167;
.reg .u64 %r177;
.reg .u32 %r178;
.reg .u32 %r201;
.reg .u32 %r207;
.reg .u32 %r208;
.reg .u32 %r236;
.reg .u64 %r237;
.reg .u64 %r238;
.reg .u64 %r239;
.reg .u64 %r240;
.reg .u64 %r241;
.reg .u64 %r242;
.reg .u64 %r243;
.reg .u32 %r244;
.reg .u64 %r245;
.reg .u32 %r246;
.reg .u32 %r247;
.reg .u32 %r248;
.reg .u64 %r249;
.reg .u32 %r250;
.reg .u32 %r251;
.reg .u64 %r252;
.reg .u64 %r253;
.reg .u64 %r254;
.reg .u64 %r255;
.reg .u32 %r256;
.reg .u32 %r257;
.reg .u32 %r258;
.reg .u64 %r267;
.reg .u64 %r273;
.reg .u64 %r278;
.reg .u64 %r281;
.reg .u32 %r282;
.reg .u32 %r287;
.reg .u64 %r289;
.reg .u64 %r298;
.reg .u64 %r299;
.reg .u32 %r301;
.reg .u64 %r302;
.reg .u64 %r304;
.reg .u32 %r306;
.reg .u32 %r307;
.reg .u64 %r308;
.reg .u32 %r313;
.reg .u64 %r315;
.reg .u64 %r316;
.reg .u64 %r318;
.reg .u64 %r319;
.reg .u64 %r320;
.reg .u64 %r321;
.reg .u64 %r325;
.reg .u64 %r330;
.reg .u64 %r338;
.reg .u32 %r342;
.reg .u32 %r348;
.reg .u32 %r354;
.reg .u64 %r357;
.reg .u64 %r360;
.reg .u64 %r361;
.reg .u64 %r362;
.reg .u64 %r363;
.reg .u32 %r365;
.reg .u64 %r373;
.reg .u64 %r374;
.reg .u32 %r377;
.reg .u64 %r378;
.reg .u64 %r379;
.reg .u64 %r380;
.reg .u64 %r381;
.reg .u16 %r382;
.reg .u16 %r383;
.reg .pred %r384;
.reg .u16 %r385;
.reg .u32 %r387;
.reg .pred %r388;
.reg .pred %r389;
.reg .u64 %r390;
.reg .u32 %r391;
.reg .u64 %r393;
.reg .u16 %r395;
.reg .u16 %r396;
.reg .u32 %r397;
.reg .pred %r398;
.reg .pred %r399;
.reg .u64 %r400;
.reg .u64 %r402;
.reg .u16 %r404;
.reg .u16 %r405;
.reg .u32 %r406;
.reg .u16 %r407;
.reg .u32 %r408;
.reg .pred %r409;
.reg .u32 %r412;
.reg .pred %r413;
.reg .u32 %r414;
.reg .u64 %r415;
.reg .pred %r416;
.reg .u16 %r417;
.reg .pred %r418;
.reg .pred %r420;
.reg .pred %r422;
.reg .pred %r424;
.reg .pred %r426;
.reg .pred %r428;
.reg .pred %r430;
.reg .pred %r432;
.reg .pred %r434;
.reg .pred %r436;
.reg .pred %r438;
.reg .pred %r440;
.reg .pred %r442;
.reg .pred %r444;
.reg .pred %r446;
.reg .pred %r448;
.reg .pred %r450;
.reg .pred %r452;
.reg .pred %r454;
.reg .pred %r456;
.reg .pred %r458;
.reg .pred %r460;
.reg .pred %r462;
.reg .pred %r464;
.reg .pred %r466;
.reg .pred %r468;
.reg .pred %r470;
.reg .pred %r472;
.reg .pred %r474;
.reg .u32 %r475;
.reg .pred %r476;
.reg .u16 %r477;
.reg .u16 %r478;
.reg .pred %r479;
.reg .u32 %r482;
.reg .pred %r483;
.reg .u32 %r484;
.reg .u32 %r485;
.reg .u64 %r486;
.reg .u32 %r488;
.reg .u32 %r489;
.reg .u32 %r491;
.reg .u32 %r492;
.reg .u16 %r493;
.reg .u16 %r494;
.reg .u16 %r495;
.reg .u32 %r496;
.reg .u16 %r497;
.reg .pred %r498;
.reg .u32 %r499;
.reg .pred %r500;
.reg .u16 %r501;
.reg .pred %r502;
.reg .u32 %r503;
.reg .pred %r504;
.reg .u32 %r505;
.reg .pred %r506;
.reg .u32 %r507;
.reg .pred %r508;
.reg .u64 %r510;
.reg .u64 %r511;
.reg .u64 %r512;
.reg .u64 %r513;
.reg .u32 %r514;
.reg .u64 %r518;
.reg .u32 %r519;
.reg .pred %r520;
.reg .u64 %r521;
.reg .u32 %r522;
.reg .pred %r523;
.reg .u32 %r524;
.reg .pred %r525;
.reg .u64 %r526;
.reg .u32 %r527;
.reg .pred %r528;
.reg .u64 %r529;
.reg .u32 %r530;
.reg .pred %r531;
.reg .u32 %r532;
.reg .pred %r533;
.reg .u32 %r536;
.reg .pred %r537;
.reg .u64 %r538;
.reg .u64 %r540;
.reg .u16 %r542;
.reg .u16 %r543;
.reg .u32 %r544;
.reg .u16 %r545;
.reg .u32 %r546;
.reg .pred %r547;
.reg .u32 %r548;
.reg .pred %r549;
.reg .u32 %r552;
.reg .pred %r553;
.reg .u64 %r554;
.reg .u64 %r556;
.reg .u16 %r558;
.reg .u16 %r559;
.reg .u32 %r560;
.reg .u16 %r561;
.reg .u32 %r562;
.reg .pred %r563;
.reg .pred %r564;
.reg .pred %r565;
.reg .pred %r566;
.reg .pred %r567;
.reg .u32 %r568;
.reg .pred %r569;
.reg .u32 %r570;
.reg .pred %r571;
.reg .u64 %r572;
.reg .u32 %r575;
.reg .pred %r576;
.reg .pred %r577;
.reg .u32 %r578;
.reg .u64 %r580;
.reg .u32 %r581;
.reg .u64 %r583;
.reg .u64 %r584;
.reg .u64 %r587;
.reg .pred %r588;
.reg .u32 %r589;
.reg .pred %r590;
.reg .u64 %r592;
.reg .u64 %r594;
.reg .u32 %r595;
.reg .pred %r596;
.reg .pred %r597;
.reg .u32 %r598;
.reg .u64 %r599;
.reg .pred %r600;
.reg .u32 %r601;
.reg .u64 %r602;
.reg .pred %r603;
.reg .pred %r604;
.reg .u64 %r606;
.reg .u64 %r608;
.reg .u16 %r609;
.reg .u32 %r610;
.reg .pred %r611;
.reg .u32 %r614;
.reg .pred %r615;
.reg .pred %r616;
.reg .u32 %r617;
.reg .u32 %r618;
.reg .u64 %r619;
.reg .u32 %r620;
.reg .pred %r621;
.reg .u32 %r622;
.reg .u32 %r623;
.reg .u64 %r624;
.reg .u32 %r625;
.reg .u64 %r626;
.reg .pred %r627;
.reg .u32 %r628;
.reg .pred %r629;
.reg .u32 %r632;
.reg .pred %r633;
.reg .pred %r634;
.reg .u64 %r636;
.reg .u64 %r638;
.reg .u16 %r639;
.reg .u32 %r640;
.reg .pred %r641;
.reg .u64 %r642;
.reg .pred %r643;
.reg .u32 %r644;
.reg .pred %r645;
.reg .u64 %r646;
.reg .u64 %r648;
.reg .u16 %r650;
.reg .u16 %r651;
.reg .u32 %r652;
.reg .u32 %r653;
.reg .pred %r654;
.reg .pred %r655;
.reg .u32 %r656;
.reg .u64 %r657;
.reg .pred %r658;
.reg .u32 %r659;
.reg .u64 %r660;
.reg .pred %r661;
.reg .pred %r662;
.reg .u32 %r665;
.reg .pred %r666;
.reg .u64 %r667;
.reg .u64 %r669;
.reg .u16 %r671;
.reg .u16 %r672;
.reg .u32 %r673;
.reg .u16 %r674;
.reg .u32 %r675;
.reg .pred %r676;
.reg .pred %r677;
.reg .u32 %r678;
.reg .u32 %r679;
.reg .u64 %r680;
.reg .u32 %r681;
.reg .pred %r682;
.reg .u32 %r683;
.reg .u32 %r684;
.reg .u64 %r685;
.reg .u32 %r686;
.reg .u64 %r687;
.reg .pred %r688;
.reg .u64 %r689;
.reg .u32 %r690;
.reg .pred %r691;
.reg .u32 %r694;
.reg .pred %r695;
.reg .u64 %r696;
.reg .u64 %r697;
.reg .u64 %r699;
.reg .u16 %r701;
.reg .u16 %r702;
.reg .u32 %r703;
.reg .u16 %r704;
.reg .u32 %r705;
.reg .pred %r706;
.reg .u64 %r707;
.reg .u32 %r708;
.reg .u64 %r709;
.reg .pred %r710;
.reg .u32 %r711;
.reg .u16 %r712;
.reg .pred %r713;
.reg .pred %r715;
.reg .pred %r717;
.reg .pred %r719;
.reg .u16 %r720;
.reg .u16 %r723;
.reg .u32 %r725;
.reg .u16 %r726;
.reg .pred %r727;
.reg .u64 %r728;
.reg .u64 %r729;
.reg .u64 %r730;
.reg .u64 %r731;
.reg .pred %r733;
.reg .pred %r735;
.reg .pred %r737;
.reg .pred %r739;
.reg .pred %r741;
.reg .pred %r743;
.reg .u32 %r744;
.reg .pred %r745;
.reg .pred %r746;
.reg .u32 %r747;
.reg .pred %r748;
.reg .pred %r749;
.reg .u64 %r750;
.reg .u64 %r751;
.reg .u64 %r752;
.reg .u64 %r753;
.reg .pred %r754;
.reg .pred %r755;
.reg .u32 %r756;
.reg .pred %r757;
.reg .u32 %r758;
.reg .pred %r759;
.reg .u32 %r760;
.reg .u32 %r761;
.reg .pred %r762;
.reg .u64 %r763;
.reg .u32 %r766;
.reg .pred %r767;
.reg .pred %r768;
.reg .u32 %r769;
.reg .pred %r770;
.reg .pred %r771;
.reg .u32 %r775;
.reg .u32 %r776;
.reg .pred %r777;
.reg .u32 %r778;
.reg .pred %r779;
.reg .u32 %r780;
.reg .u64 %r783;
.reg .u64 %r785;
.reg .u64 %r786;
.reg .u32 %r787;
.reg .pred %r788;
.reg .u32 %r789;
.reg .pred %r790;
.reg .u64 %r791;
.reg .u32 %r792;
.reg .pred %r793;
.reg .u64 %r794;
.reg .u32 %r795;
.reg .pred %r796;
.reg .u64 %r797;
.reg .pred %r798;
.reg .u64 %r803;
.reg .u64 %r808;
.reg .u64 %r809;
.reg .u64 %r810;
.reg .u64 %r811;
.reg .u32 %r812;
.reg .u32 %r813;
.reg .u64 %r815;
.reg .u64 %r816;
.reg .pred %r817;
.reg .u32 %r818;
.reg .u16 %r819;
.reg .pred %r820;
.reg .pred %r822;
.reg .pred %r824;
.reg .pred %r826;
.reg .pred %r828;
.reg .u16 %r829;
.reg .u16 %r832;
.reg .u32 %r834;
.reg .u16 %r835;
.reg .pred %r836;
.reg .pred %r838;
.reg .pred %r840;
.reg .pred %r842;
.reg .pred %r844;
.reg .pred %r846;
.reg .pred %r848;
.reg .pred %r850;
.reg .pred %r852;
.reg .pred %r854;
.reg .pred %r856;
.reg .pred %r858;
.reg .pred %r860;
.reg .pred %r862;
.reg .pred %r864;
.reg .pred %r866;
.reg .pred %r868;
.reg .pred %r870;
.reg .u32 %r871;
.reg .pred %r872;
.reg .pred %r873;
.reg .u32 %r874;
.reg .pred %r875;
.reg .u32 %r876;
.reg .pred %r877;
.reg .u16 %r879;
.reg .u32 %r880;
.reg .u32 %r881;
.reg .u32 %r883;
.reg .u32 %r884;
.reg .u16 %r885;
.reg .u16 %r886;
.reg .u16 %r887;
.reg .u32 %r888;
.reg .u16 %r889;
.reg .pred %r890;
.reg .u32 %r891;
.reg .pred %r892;
.reg .pred %r894;
.reg .u16 %r896;
.reg .u32 %r897;
.reg .u32 %r898;
.reg .u32 %r901;
.reg .u32 %r902;
.reg .u16 %r903;
.reg .u16 %r904;
.reg .u16 %r905;
.reg .u32 %r906;
.reg .u16 %r907;
.reg .pred %r908;
.reg .u16 %r910;
.reg .u32 %r912;
.reg .u16 %r914;
.reg .pred %r915;
.reg .u16 %r917;
.reg .u32 %r918;
.reg .u32 %r919;
.reg .u32 %r921;
.reg .u32 %r922;
.reg .u16 %r923;
.reg .u16 %r924;
.reg .u16 %r925;
.reg .u32 %r926;
.reg .u16 %r927;
.reg .pred %r928;
.reg .u32 %r929;
.reg .pred %r930;
.reg .u32 %r931;
.reg .u16 %r932;
.reg .u16 %r933;
.reg .u16 %r935;
.reg .u32 %r937;
.reg .u16 %r938;
.reg .pred %r939;
.reg .u16 %r940;
.reg .u32 %r942;
.reg .u16 %r943;
.reg .pred %r944;
.reg .u16 %r945;
.reg .pred %r946;
.reg .u16 %r947;
.reg .pred %r948;
.reg .u32 %r949;
.reg .pred %r950;
.reg .u32 %r951;
.reg .pred %r952;
.reg .pred %r953;
.reg .u32 %r954;
.reg .pred %r955;
.reg .u16 %r956;
.reg .u16 %r957;
.reg .pred %r958;
.reg .u32 %r959;
.reg .pred %r960;
.reg .u32 %r961;
.reg .u32 %r962;
.reg .pred %r963;
.reg .u64 %r964;
.reg .u32 %r967;
.reg .pred %r968;
.reg .pred %r969;
.reg .pred %r970;
.reg .u32 %r971;
.reg .pred %r972;
.reg .pred %r973;
.reg .u32 %r977;
.reg .u32 %r978;
.reg .pred %r979;
.reg .u32 %r980;
.reg .pred %r981;
.reg .u16 %r982;
.reg .pred %r983;
.reg .u32 %r984;
.reg .pred %r986;
.reg .pred %r987;
.reg .u32 %r991;
.reg .u32 %r992;
.reg .u32 %r993;
.reg .u32 %r994;
.reg .u32 %r995;
.reg .u16 %r997;
.reg .u16 %r998;
.reg .u16 %r999;
.reg .u16 %r1002;
.reg .u16 %r1004;
.reg .u16 %r1005;
.reg .u32 %r1006;
.reg .u32 %r1007;
.reg .pred %r1008;
.reg .u32 %r1012;
.reg .u32 %r1013;
.reg .pred %r1014;
.reg .u32 %r1015;
.reg .pred %r1016;
.reg .u32 %r1017;
.reg .pred %r1018;
.reg .pred %r1019;
.reg .u32 %r1023;
.reg .u32 %r1024;
.reg .pred %r1025;
.reg .u16 %r1026;
.reg .u16 %r1027;
.reg .u16 %r1028;
.reg .u32 %r1029;
.reg .u32 %r1030;
.reg .pred %r1031;
.reg .u32 %r1035;
.reg .u32 %r1039;
.reg .u32 %r1040;
.reg .pred %r1041;
.reg .u32 %r1042;
.reg .u32 %r1043;
.reg .pred %r1044;
.reg .pred %r1045;
.reg .pred %r1046;
.reg .u64 %r1049;
.reg .u32 %r1050;
.reg .u64 %r1051;
.reg .u64 %r1052;
.reg .pred %r1054;
.reg .u64 %r1056;
.reg .u32 %r1057;
.reg .u64 %r1061;
.reg .f64 %r1062;
.reg .u64 %r1063;
.reg .u32 %r1064;
.reg .pred %r1065;
.reg .u64 %r1066;
.reg .u32 %r1067;
.reg .pred %r1068;
.reg .pred %r1069;
.reg .u64 %r1070;
.reg .f32 %r1071;
.reg .f32 %r1072;
.reg .pred %r1073;
.reg .u16 %r1074;
.reg .u16 %r1075;
.reg .pred %r1076;
.reg .u32 %r1078;
.reg .pred %r1079;
.reg .u64 %r1081;
.reg .u64 %r1082;
.reg .u64 %r1083;
.reg .u16 %r1084;
mov.u64 %r378,%ar0;
mov.u64 %r379,%ar1;
mov.u64 %r380,%ar2;
mov.u64 %r381,%ar3;
.loc 1 591 3
ld.u16 %r383,[%r379+16];
and.b16 %r382,%r383,8192;
setp.ne.u16 %r384,%r382,0;
@ %r384 bra $L2;
.loc 1 589 3
ld.u32 %r22,[%r379+172];
.loc 1 591 3
or.b16 %r385,%r383,8192;
st.u16 [%r379+16],%r385;
and.b32 %r387,%r22,-8193;
st.u32 [%r379+172],%r387;
$L2:
.loc 1 602 12
ld.u8 %r27,[%r380];
.loc 1 611 11
add.u64 %r267,%r380,1;
.loc 1 613 10
setp.eq.u32 %r388,%r27,0;
@ %r388 bra $L162;
mov.u64 %r68,0;
cvt.u32.u64 %r248,%r68;
cvt.u32.u64 %r208,%r68;
cvt.u32.u64 %r377,%r68;
cvta.const.u64 %r1081,_ctype_+1;
.loc 1 1859 8
add.u64 %r1082,%frame,329;
.loc 1 1146 21
add.u64 %r1083,%frame,350;
bra $L4;
$L7:
.loc 1 602 12
ld.u8 %r27,[%r267];
.loc 1 611 11
add.u64 %r267,%r267,1;
.loc 1 613 10
setp.eq.u32 %r389,%r27,0;
@ %r389 bra $L1;
$L4:
.loc 1 615 26
cvt.u32.u32 %r391,%r27;
cvt.u64.u8 %r390,%r391;
add.u64 %r393,%r1081,%r390;
ld.u8 %r1084,[%r393];
mov.u16 %r396,%r1084;
and.b16 %r395,%r396,8;
cvt.u32.u16 %r397,%r395;
cvt.s32.s8 %r258,%r397;
.loc 1 615 23
setp.eq.u32 %r398,%r258,0;
@ %r398 bra $L5;
.loc 1 619 12
ld.u32 %r40,[%r379+8];
$L10:
.loc 1 619 11
setp.le.s32 %r399,%r40,0;
@ %r399 bra $L6;
$L9:
.loc 1 619 28
ld.u64 %r33,[%r379];
ld.u8 %r400,[%r33];
add.u64 %r402,%r1081,%r400;
.loc 1 619 24
ld.u8 %r1084,[%r402];
mov.u16 %r405,%r1084;
and.b16 %r404,%r405,8;
cvt.u32.u16 %r406,%r404;
cvt.s32.s8 %r408,%r406;
cvt.u16.u32 %r407,%r408;
setp.eq.u16 %r409,%r407,0;
@ ! %r409 bra $L341;
bra $L7;
$L6:
.loc 1 619 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r412,[%value_in];
}
setp.ne.u32 %r413,%r412,0;
@ ! %r413 bra $L9;
bra $L7;
$L341:
.loc 1 621 13
add.u32 %r208,%r208,1;
.loc 1 621 23
ld.u32 %r414,[%r379+8];
add.u32 %r40,%r414,-1;
st.u32 [%r379+8],%r40;
.loc 1 621 33
add.u64 %r415,%r33,1;
st.u64 [%r379],%r415;
.loc 1 619 11
bra $L10;
$L5:
.loc 1 625 10
setp.ne.u32 %r416,%r27,37;
@ %r416 bra $L11;
.loc 1 640 11
ld.u8 %r127,[%r267];
mov.u64 %r25,%r267;
.loc 1 628 13
mov.u32 %r244,%r258;
.loc 1 627 13
mov.u64 %r237,0;
bra $L12;
$L343:
.loc 1 640 11
ld.u8 %r127,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r267;
.loc 1 663 10
mov.u32 %r244,16;
.loc 1 640 11
mov.u64 %r237,0;
$L12:
.loc 1 640 15
add.u64 %r267,%r25,1;
.loc 1 642 7
cvt.u16.u32 %r417,%r127;
setp.eq.u16 %r418,%r417,100;
@ %r418 bra $L163;
setp.gt.u16 %r420,%r417,100;
@ %r420 bra $L14;
setp.eq.u16 %r422,%r417,71;
@ %r422 bra $L164;
setp.gt.u16 %r424,%r417,71;
@ %r424 bra $L15;
setp.gt.u16 %r426,%r417,57;
@ %r426 bra $L16;
setp.gt.u16 %r428,%r417,47;
@ %r428 bra $L17;
setp.eq.u16 %r430,%r417,37;
@ %r430 bra $L11;
setp.eq.u16 %r432,%r417,42;
@ %r432 bra $L18;
bra $L1;
$L16:
setp.eq.u16 %r434,%r417,68;
@ %r434 bra $L19;
setp.eq.u16 %r436,%r417,69;
@ %r436 bra $L165;
bra $L1;
$L15:
setp.eq.u16 %r438,%r417,88;
@ %r438 bra $L20;
setp.gt.u16 %r440,%r417,88;
@ %r440 bra $L21;
setp.eq.u16 %r442,%r417,76;
@ %r442 bra $L22;
setp.eq.u16 %r444,%r417,79;
@ %r444 bra $L23;
bra $L1;
$L21:
setp.eq.u16 %r446,%r417,91;
@ %r446 bra $L24;
setp.eq.u16 %r448,%r417,99;
@ %r448 bra $L25;
bra $L1;
$L14:
setp.eq.u16 %r450,%r417,111;
@ %r450 bra $L166;
setp.gt.u16 %r452,%r417,111;
@ %r452 bra $L26;
setp.eq.u16 %r454,%r417,105;
@ %r454 bra $L167;
setp.gt.u16 %r456,%r417,105;
@ %r456 bra $L27;
setp.le.u16 %r458,%r417,103;
@ %r458 bra $L168;
setp.eq.u16 %r460,%r417,104;
@ %r460 bra $L28;
bra $L1;
$L27:
setp.eq.u16 %r462,%r417,108;
@ %r462 bra $L29;
setp.eq.u16 %r464,%r417,110;
@ %r464 bra $L30;
bra $L1;
$L26:
setp.eq.u16 %r466,%r417,115;
@ %r466 bra $L169;
setp.gt.u16 %r468,%r417,115;
@ %r468 bra $L31;
setp.eq.u16 %r470,%r417,112;
@ %r470 bra $L32;
bra $L1;
$L31:
setp.eq.u16 %r472,%r417,117;
@ %r472 bra $L170;
setp.eq.u16 %r474,%r417,120;
@ %r474 bra $L20;
bra $L1;
$L11:
.loc 1 649 11
ld.u32 %r475,[%r379+8];
setp.le.s32 %r476,%r475,0;
@ %r476 bra $L33;
$L36:
.loc 1 651 15
ld.u64 %r44,[%r379];
.loc 1 651 11
ld.u8 %r477,[%r44];
ld.u8 %r478,[%r267+-1];
setp.ne.u16 %r479,%r477,%r478;
@ %r479 bra $L1;
bra $L342;
$L33:
.loc 1 649 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r482,[%value_in];
}
setp.ne.u32 %r483,%r482,0;
@ ! %r483 bra $L36;
bra $L35;
$L342:
.loc 1 653 14
ld.u32 %r485,[%r379+8];
add.u32 %r484,%r485,-1;
st.u32 [%r379+8],%r484;
.loc 1 653 24
add.u64 %r486,%r44,1;
st.u64 [%r379],%r486;
.loc 1 654 13
add.u32 %r208,%r208,1;
bra $L7;
$L18:
.loc 1 660 7
set.u32.ne.u32 %r488,%r244,0;
neg.s32 %r489,%r488;
.loc 1 661 8
set.u32.ne.u64 %r491,%r237,0;
neg.s32 %r492,%r491;
cvt.u16.u32 %r494,%r489;
cvt.u16.u32 %r495,%r492;
or.b16 %r493,%r494,%r495;
cvt.u32.u16 %r496,%r493;
cvt.u16.u8 %r497,%r496;
setp.ne.u16 %r498,%r497,0;
@ ! %r498 bra $L343;
bra $L1;
$L29:
.loc 1 666 14
and.b32 %r499,%r244,15;
.loc 1 666 7
setp.ne.u32 %r500,%r499,0;
@ %r500 bra $L1;
.loc 1 669 8
ld.u8 %r127,[%r25+1];
.loc 1 669 7
cvt.u16.u32 %r501,%r127;
setp.ne.u16 %r502,%r501,108;
@ %r502 bra $L38;
.loc 1 672 14
or.b32 %r244,%r244,2;
.loc 1 640 11
ld.u8 %r127,[%r25+2];
.loc 1 671 8
add.u64 %r25,%r25,2;
bra $L12;
$L38:
.loc 1 676 12
or.b32 %r244,%r244,1;
.loc 1 640 15
mov.u64 %r25,%r267;
bra $L12;
$L22:
.loc 1 679 14
and.b32 %r503,%r244,15;
.loc 1 679 7
setp.ne.u32 %r504,%r503,0;
@ %r504 bra $L1;
.loc 1 681 10
or.b32 %r244,%r244,2;
.loc 1 640 11
ld.u8 %r127,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r267;
.loc 1 682 4
bra $L12;
$L28:
.loc 1 684 14
and.b32 %r505,%r244,15;
.loc 1 684 7
setp.ne.u32 %r506,%r505,0;
@ %r506 bra $L1;
.loc 1 694 12
or.b32 %r244,%r244,4;
.loc 1 640 11
ld.u8 %r127,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r267;
.loc 1 695 4
bra $L12;
$L17:
.loc 1 760 14
and.b32 %r507,%r244,143;
.loc 1 760 7
setp.ne.u32 %r508,%r507,0;
@ %r508 bra $L1;
.loc 1 762 18
shl.b64 %r510,%r237,2;
add.u64 %r511,%r510,%r237;
add.u64 %r512,%r511,%r511;
.loc 1 762 23
cvt.u32.u32 %r514,%r127;
cvt.u64.u8 %r513,%r514;
add.u64 %r321,%r512,%r513;
.loc 1 762 10
add.u64 %r237,%r321,-48;
.loc 1 640 11
ld.u8 %r127,[%r25+1];
.loc 1 640 15
mov.u64 %r25,%r267;
.loc 1 763 4
bra $L12;
$L19:
.loc 1 789 10
or.b32 %r244,%r244,1;
.loc 1 793 9
mov.u64 %r68,_strtol_r;
.loc 1 794 9
mov.u32 %r248,10;
.loc 1 792 6
mov.u32 %r307,3;
bra $L13;
$L23:
.loc 1 804 10
or.b32 %r244,%r244,1;
.loc 1 808 9
mov.u64 %r68,_strtoul_r;
.loc 1 809 9
mov.u32 %r248,8;
.loc 1 807 6
mov.u32 %r307,3;
bra $L13;
$L20:
.loc 1 820 10
or.b32 %r244,%r244,512;
.loc 1 822 9
mov.u64 %r68,_strtoul_r;
.loc 1 823 9
mov.u32 %r248,16;
.loc 1 821 6
mov.u32 %r307,3;
.loc 1 824 4
bra $L13;
$L24:
.loc 1 852 21
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1083;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r267;
call (%value_in),__sccl,(%out_arg1,%out_arg2);
ld.param.u64 %r518,[%value_in];
}
mov.u64 %r267,%r518;
.loc 1 853 10
or.b32 %r244,%r244,64;
.loc 1 854 6
mov.u32 %r307,1;
.loc 1 855 4
bra $L13;
$L25:
.loc 1 864 10
or.b32 %r244,%r244,64;
.loc 1 865 6
mov.u32 %r307,0;
.loc 1 866 4
bra $L13;
$L32:
.loc 1 869 10
or.b32 %r244,%r244,544;
.loc 1 871 9
mov.u64 %r68,_strtoul_r;
.loc 1 872 9
mov.u32 %r248,16;
.loc 1 870 6
mov.u32 %r307,3;
.loc 1 873 4
bra $L13;
$L30:
.loc 1 876 14
and.b32 %r519,%r244,16;
.loc 1 876 7
setp.ne.u32 %r520,%r519,0;
@ %r520 bra $L7;
.loc 1 888 11
add.u64 %r521,%r381,7;
and.b64 %r320,%r521,-8;
ld.u64 %r319,[%r320];
add.u64 %r381,%r320,8;
.loc 1 886 14
and.b32 %r522,%r244,4;
.loc 1 886 7
setp.eq.u32 %r523,%r522,0;
@ %r523 bra $L40;
.loc 1 889 12
st.u16 [%r319],%r208;
bra $L7;
$L40:
.loc 1 891 19
and.b32 %r524,%r244,1;
.loc 1 891 12
setp.eq.u32 %r525,%r524,0;
@ %r525 bra $L41;
.loc 1 894 12
cvt.s64.s32 %r526,%r208;
st.u64 [%r319],%r526;
bra $L7;
$L41:
.loc 1 897 19
and.b32 %r527,%r244,2;
.loc 1 897 12
setp.eq.u32 %r528,%r527,0;
@ %r528 bra $L42;
.loc 1 900 13
cvt.s64.s32 %r529,%r208;
st.u64 [%r319],%r529;
bra $L7;
$L42:
.loc 1 906 12
st.u32 [%r319],%r208;
bra $L7;
$L163:
.loc 1 642 7
mov.u64 %r68,_strtol_r;
mov.u32 %r248,10;
mov.u32 %r307,3;
bra $L13;
$L164:
.loc 1 837 6
mov.u32 %r307,4;
bra $L13;
$L165:
mov.u32 %r307,4;
bra $L13;
$L166:
.loc 1 808 9
mov.u64 %r68,_strtoul_r;
.loc 1 809 9
mov.u32 %r248,8;
.loc 1 807 6
mov.u32 %r307,3;
bra $L13;
$L167:
.loc 1 799 9
mov.u64 %r68,_strtol_r;
.loc 1 800 9
mov.u32 %r248,0;
.loc 1 798 6
mov.u32 %r307,3;
bra $L13;
$L168:
.loc 1 837 6
mov.u32 %r307,4;
bra $L13;
$L169:
.loc 1 848 6
mov.u32 %r307,2;
bra $L13;
$L170:
.loc 1 814 9
mov.u64 %r68,_strtoul_r;
.loc 1 815 9
mov.u32 %r248,10;
.loc 1 813 6
mov.u32 %r307,3;
$L13:
.loc 1 917 10
ld.u32 %r530,[%r379+8];
setp.le.s32 %r531,%r530,0;
@ %r531 bra $L43;
$L46:
.loc 1 924 18
and.b32 %r532,%r244,64;
.loc 1 924 10
setp.eq.u32 %r533,%r532,0;
@ ! %r533 bra $L45;
bra $L44;
$L43:
.loc 1 917 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r536,[%value_in];
}
setp.ne.u32 %r537,%r536,0;
@ ! %r537 bra $L46;
bra $L35;
$L44:
.loc 1 926 11
ld.u64 %r318,[%r379];
ld.u8 %r538,[%r318];
add.u64 %r540,%r1081,%r538;
.loc 1 926 10
ld.u8 %r1084,[%r540];
mov.u16 %r543,%r1084;
and.b16 %r542,%r543,8;
cvt.u32.u16 %r544,%r542;
cvt.s32.s8 %r546,%r544;
cvt.u16.u32 %r545,%r546;
setp.eq.u16 %r547,%r545,0;
@ %r547 bra $L45;
$L49:
.loc 1 928 13
add.u32 %r208,%r208,1;
.loc 1 929 12
ld.u32 %r548,[%r379+8];
add.u32 %r67,%r548,-1;
.loc 1 929 11
st.u32 [%r379+8],%r67;
setp.le.s32 %r549,%r67,0;
@ %r549 bra $L47;
.loc 1 930 9
add.u64 %r318,%r318,1;
st.u64 [%r379],%r318;
bra $L48;
$L47:
.loc 1 932 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r552,[%value_in];
}
.loc 1 932 11
setp.ne.u32 %r553,%r552,0;
@ %r553 bra $L35;
.loc 1 926 11
ld.u64 %r318,[%r379];
$L48:
ld.u8 %r554,[%r318];
add.u64 %r556,%r1081,%r554;
.loc 1 926 10
ld.u8 %r1084,[%r556];
mov.u16 %r559,%r1084;
and.b16 %r558,%r559,8;
cvt.u32.u16 %r560,%r558;
cvt.s32.s8 %r562,%r560;
cvt.u16.u32 %r561,%r562;
setp.ne.u16 %r563,%r561,0;
@ %r563 bra $L49;
$L45:
.loc 1 945 7
setp.eq.u32 %r564,%r307,3;
@ %r564 bra $L50;
setp.eq.u32 %r565,%r307,4;
@ %r565 bra $L51;
setp.eq.u32 %r566,%r307,1;
@ %r566 bra $L52;
setp.eq.u32 %r567,%r307,2;
@ %r567 bra $L53;
max.u64 %r238,%r237,1;
.loc 1 1017 14
and.b32 %r568,%r244,16;
.loc 1 1017 7
setp.eq.u32 %r569,%r568,0;
@ %r569 bra $L54;
.loc 1 1019 15
mov.u64 %r249,0;
$L56:
.loc 1 1022 12
ld.u32 %r313,[%r379+8];
.loc 1 1026 16
ld.u64 %r325,[%r379];
.loc 1 1022 8
cvt.u32.u64 %r570,%r238;
setp.ge.s32 %r571,%r313,%r570;
@ %r571 bra $L55;
.loc 1 1024 13
cvt.s64.s32 %r77,%r313;
add.u64 %r249,%r249,%r77;
.loc 1 1025 15
sub.u64 %r238,%r238,%r77;
.loc 1 1026 16
add.u64 %r572,%r325,%r77;
st.u64 [%r379],%r572;
.loc 1 1027 13
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r575,[%value_in];
}
.loc 1 1027 12
setp.eq.u32 %r576,%r575,0;
@ %r576 bra $L56;
.loc 1 1029 9
setp.eq.u64 %r577,%r249,0;
@ ! %r577 bra $L57;
bra $L35;
$L55:
.loc 1 1036 13
add.u64 %r249,%r249,%r238;
.loc 1 1037 16
sub.u32 %r578,%r313,%r570;
st.u32 [%r379+8],%r578;
.loc 1 1038 16
add.u64 %r580,%r325,%r238;
st.u64 [%r379],%r580;
$L57:
.loc 1 1042 14
cvt.u32.u64 %r581,%r249;
add.u32 %r208,%r208,%r581;
bra $L7;
$L54:
.loc 1 1053 5
add.u64 %r362,%r381,7;
and.b64 %r363,%r362,-8;
add.u64 %r381,%r363,8;
.loc 1 1054 12
mov.u64 %r584,1;
ld.u64 %r583,[%r363];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r583;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r584;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r238;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r379;
call (%value_in),_fread_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r587,[%value_in];
}
.loc 1 1055 11
setp.eq.u64 %r588,%r587,0;
@ %r588 bra $L35;
.loc 1 1060 14
cvt.u32.u64 %r589,%r587;
add.u32 %r208,%r208,%r589;
.loc 1 1061 17
add.u32 %r377,%r377,1;
bra $L7;
$L52:
.loc 1 1067 7
setp.ne.u64 %r590,%r237,0;
.loc 1 1068 12
selp.u64 %r237,%r237,-1,%r590;
.loc 1 1146 25
ld.u64 %r357,[%r379];
.loc 1 1146 21
ld.u8 %r592,[%r357];
add.u64 %r594,%r1083,%r592;
ld.s8 %r354,[%r594];
.loc 1 1143 14
and.b32 %r595,%r244,16;
.loc 1 1143 7
setp.eq.u32 %r596,%r595,0;
@ %r596 bra $L59;
.loc 1 1146 14
setp.eq.u32 %r597,%r354,0;
@ %r597 bra $L1;
.loc 1 1148 16
ld.u32 %r598,[%r379+8];
add.u32 %r94,%r598,-1;
st.u32 [%r379+8],%r94;
.loc 1 1148 26
add.u64 %r599,%r357,1;
st.u64 [%r379],%r599;
.loc 1 1149 8
add.u64 %r308,%r237,-1;
setp.eq.u64 %r600,%r237,1;
@ ! %r600 bra $L61;
bra $L60;
$L63:
.loc 1 1148 6
add.u32 %r307,%r307,1;
.loc 1 1148 16
ld.u32 %r601,[%r379+8];
add.u32 %r94,%r601,-1;
st.u32 [%r379+8],%r94;
.loc 1 1148 26
add.u64 %r602,%r97,1;
st.u64 [%r379],%r602;
.loc 1 1149 8
add.u64 %r308,%r308,-1;
setp.eq.u64 %r603,%r308,0;
@ %r603 bra $L60;
$L61:
.loc 1 1151 8
setp.le.s32 %r604,%r94,0;
@ %r604 bra $L62;
$L64:
.loc 1 1146 25
ld.u64 %r97,[%r379];
.loc 1 1146 21
ld.u8 %r606,[%r97];
add.u64 %r608,%r1083,%r606;
.loc 1 1146 14
ld.s8 %r610,[%r608];
cvt.u16.u32 %r609,%r610;
setp.ne.u16 %r611,%r609,0;
@ %r611 bra $L63;
bra $L60;
$L62:
.loc 1 1151 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r614,[%value_in];
}
setp.eq.u32 %r615,%r614,0;
@ %r615 bra $L64;
$L60:
.loc 1 1160 14
add.u32 %r208,%r208,%r307;
bra $L7;
$L59:
.loc 1 1172 10
add.u64 %r374,%r381,7;
and.b64 %r373,%r374,-8;
add.u64 %r381,%r373,8;
ld.u64 %r304,[%r373];
.loc 1 1173 14
setp.eq.u32 %r616,%r354,0;
@ %r616 bra $L1;
.loc 1 1175 11
ld.u32 %r618,[%r379+8];
add.u32 %r617,%r618,-1;
st.u32 [%r379+8],%r617;
.loc 1 1176 19
add.u64 %r619,%r357,1;
st.u64 [%r379],%r619;
.loc 1 1176 7
add.u64 %r239,%r304,1;
.loc 1 1176 10
ld.u8 %r620,[%r357];
st.u8 [%r304],%r620;
.loc 1 1180 8
setp.eq.u64 %r621,%r237,1;
@ %r621 bra $L65;
mov.u64 %r338,%r239;
bra $L66;
$L68:
.loc 1 1175 11
ld.u32 %r623,[%r379+8];
add.u32 %r622,%r623,-1;
st.u32 [%r379+8],%r622;
.loc 1 1176 19
add.u64 %r624,%r109,1;
st.u64 [%r379],%r624;
add.u64 %r338,%r338,1;
.loc 1 1176 10
ld.u8 %r625,[%r109];
st.u8 [%r239],%r625;
.loc 1 1180 8
add.u64 %r626,%r304,%r237;
setp.eq.u64 %r627,%r626,%r338;
@ %r627 bra $L171;
$L66:
mov.u64 %r239,%r338;
.loc 1 1182 8
ld.u32 %r628,[%r379+8];
setp.gt.s32 %r629,%r628,0;
@ %r629 bra $L67;
.loc 1 1182 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r632,[%value_in];
}
setp.eq.u32 %r633,%r632,0;
@ %r633 bra $L67;
.loc 1 1184 12
setp.eq.u64 %r634,%r304,%r239;
@ ! %r634 bra $L65;
bra $L35;
$L67:
.loc 1 1173 25
ld.u64 %r109,[%r379];
.loc 1 1173 21
ld.u8 %r636,[%r109];
add.u64 %r638,%r1083,%r636;
.loc 1 1173 14
ld.s8 %r640,[%r638];
cvt.u16.u32 %r639,%r640;
setp.ne.u16 %r641,%r639,0;
@ %r641 bra $L68;
bra $L65;
$L171:
.loc 1 1176 7
mov.u64 %r239,%r338;
$L65:
.loc 1 1189 14
sub.u64 %r642,%r239,%r304;
.loc 1 1189 10
cvt.u32.u64 %r306,%r642;
.loc 1 1190 11
setp.eq.u32 %r643,%r306,0;
@ %r643 bra $L1;
.loc 1 1192 11
mov.u32 %r644,0;
st.u8 [%r239],%r644;
.loc 1 1196 17
add.u32 %r377,%r377,1;
.loc 1 1197 14
add.u32 %r208,%r208,%r306;
bra $L7;
$L53:
.loc 1 1203 7
setp.ne.u64 %r645,%r237,0;
.loc 1 1204 12
selp.u64 %r237,%r237,-1,%r645;
.loc 1 1146 25
ld.u64 %r316,[%r379];
.loc 1 1283 16
ld.u8 %r646,[%r316];
add.u64 %r648,%r1081,%r646;
ld.u8 %r1084,[%r648];
mov.u16 %r651,%r1084;
and.b16 %r650,%r651,8;
cvt.u32.u16 %r652,%r650;
cvt.s32.s8 %r365,%r652;
.loc 1 1280 14
and.b32 %r653,%r244,16;
.loc 1 1280 7
setp.eq.u32 %r654,%r653,0;
@ %r654 bra $L70;
.loc 1 1283 14
setp.ne.u32 %r655,%r365,0;
@ %r655 bra $L7;
.loc 1 1285 16
ld.u32 %r656,[%r379+8];
add.u32 %r116,%r656,-1;
st.u32 [%r379+8],%r116;
.loc 1 1285 26
add.u64 %r657,%r316,1;
st.u64 [%r379],%r657;
.loc 1 1286 8
add.u64 %r302,%r237,-1;
setp.ne.u64 %r658,%r237,1;
@ %r658 bra $L172;
.loc 1 1291 14
add.u32 %r208,%r208,1;
bra $L7;
$L74:
.loc 1 1285 6
add.u32 %r301,%r301,1;
.loc 1 1285 16
ld.u32 %r659,[%r379+8];
add.u32 %r116,%r659,-1;
st.u32 [%r379+8],%r116;
.loc 1 1285 26
add.u64 %r660,%r119,1;
st.u64 [%r379],%r660;
.loc 1 1286 8
add.u64 %r302,%r302,-1;
setp.ne.u64 %r661,%r302,0;
@ %r661 bra $L72;
.loc 1 1291 14
add.u32 %r208,%r208,%r301;
bra $L7;
$L172:
.loc 1 1285 6
mov.u32 %r301,1;
$L72:
.loc 1 1288 8
setp.gt.s32 %r662,%r116,0;
@ %r662 bra $L73;
.loc 1 1288 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r665,[%value_in];
}
setp.eq.u32 %r666,%r665,0;
@ %r666 bra $L73;
.loc 1 1291 14
add.u32 %r208,%r208,%r301;
bra $L7;
$L73:
.loc 1 1283 16
ld.u64 %r119,[%r379];
ld.u8 %r667,[%r119];
add.u64 %r669,%r1081,%r667;
.loc 1 1283 14
ld.u8 %r1084,[%r669];
mov.u16 %r672,%r1084;
and.b16 %r671,%r672,8;
cvt.u32.u16 %r673,%r671;
cvt.s32.s8 %r675,%r673;
cvt.u16.u32 %r674,%r675;
setp.eq.u16 %r676,%r674,0;
@ %r676 bra $L74;
.loc 1 1291 14
add.u32 %r208,%r208,%r301;
bra $L7;
$L70:
.loc 1 1303 6
add.u64 %r245,%r381,7;
and.b64 %r241,%r245,-8;
add.u64 %r381,%r241,8;
ld.u64 %r299,[%r241];
.loc 1 1305 14
setp.ne.u32 %r677,%r365,0;
@ %r677 bra $L173;
.loc 1 1307 11
ld.u32 %r679,[%r379+8];
add.u32 %r678,%r679,-1;
st.u32 [%r379+8],%r678;
.loc 1 1308 19
add.u64 %r680,%r316,1;
st.u64 [%r379],%r680;
.loc 1 1308 7
add.u64 %r240,%r299,1;
.loc 1 1308 10
ld.u8 %r681,[%r316];
st.u8 [%r299],%r681;
.loc 1 1312 8
setp.eq.u64 %r682,%r237,1;
@ ! %r682 bra $L344;
bra $L174;
$L79:
.loc 1 1307 11
ld.u32 %r684,[%r379+8];
add.u32 %r683,%r684,-1;
st.u32 [%r379+8],%r683;
.loc 1 1308 19
add.u64 %r685,%r133,1;
st.u64 [%r379],%r685;
add.u64 %r330,%r330,1;
.loc 1 1308 10
ld.u8 %r686,[%r133];
st.u8 [%r240],%r686;
.loc 1 1312 8
add.u64 %r687,%r299,%r237;
setp.ne.u64 %r688,%r687,%r330;
@ %r688 bra $L77;
.loc 1 1321 19
sub.u64 %r689,%r330,%r299;
.loc 1 1321 14
cvt.u32.u64 %r348,%r689;
mov.u64 %r240,%r330;
bra $L75;
$L344:
mov.u64 %r330,%r240;
$L77:
mov.u64 %r240,%r330;
.loc 1 1314 8
ld.u32 %r690,[%r379+8];
setp.gt.s32 %r691,%r690,0;
@ %r691 bra $L78;
.loc 1 1314 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r694,[%value_in];
}
setp.eq.u32 %r695,%r694,0;
@ %r695 bra $L78;
.loc 1 1321 19
sub.u64 %r696,%r240,%r299;
.loc 1 1321 14
cvt.u32.u64 %r348,%r696;
bra $L75;
$L78:
.loc 1 1305 16
ld.u64 %r133,[%r379];
ld.u8 %r697,[%r133];
add.u64 %r699,%r1081,%r697;
.loc 1 1305 14
ld.u8 %r1084,[%r699];
mov.u16 %r702,%r1084;
and.b16 %r701,%r702,8;
cvt.u32.u16 %r703,%r701;
cvt.s32.s8 %r705,%r703;
cvt.u16.u32 %r704,%r705;
setp.eq.u16 %r706,%r704,0;
@ %r706 bra $L79;
.loc 1 1321 19
sub.u64 %r707,%r330,%r299;
.loc 1 1321 14
cvt.u32.u64 %r348,%r707;
bra $L75;
$L173:
.loc 1 1303 6
mov.u64 %r240,%r299;
.loc 1 1305 14
mov.u32 %r348,%r653;
bra $L75;
$L174:
.loc 1 1312 8
cvt.u32.u64 %r348,%r237;
$L75:
.loc 1 1317 11
mov.u32 %r708,0;
st.u8 [%r240],%r708;
.loc 1 1321 14
add.u32 %r208,%r208,%r348;
.loc 1 1322 17
add.u32 %r377,%r377,1;
bra $L7;
$L50:
.loc 1 1335 14
add.u64 %r709,%r237,-1;
.loc 1 1335 7
setp.le.u64 %r710,%r709,348;
@ %r710 bra $L175;
.loc 1 1338 19
cvt.u32.u64 %r711,%r237;
add.u32 %r250,%r711,-349;
.loc 1 1339 14
mov.u64 %r237,349;
bra $L80;
$L175:
.loc 1 1329 13
mov.u32 %r250,0;
$L80:
.loc 1 1341 10
or.b32 %r246,%r244,3456;
.loc 1 1330 8
mov.u32 %r251,0;
.loc 1 1342 11
mov.u64 %r242,%frame;
$L98:
.loc 1 1344 15
ld.u64 %r143,[%r379];
.loc 1 1344 12
ld.u8 %r144,[%r143];
cvt.u16.u32 %r712,%r144;
setp.gt.u16 %r713,%r712,57;
@ %r713 bra $L81;
setp.gt.u16 %r715,%r712,55;
@ %r715 bra $L82;
setp.eq.u16 %r717,%r712,48;
@ %r717 bra $L83;
setp.gt.u16 %r719,%r712,48;
@ %r719 bra $L84;
add.u16 %r720,%r712,-43;
and.b16 %r723,%r720,-3;
cvt.u32.u16 %r725,%r723;
cvt.u16.u8 %r726,%r725;
setp.eq.u16 %r727,%r726,0;
@ ! %r727 bra $L86;
bra $L85;
$L84:
.loc 1 1390 19
cvta.const.u64 %r728,basefix$0;
cvt.s64.s32 %r729,%r248;
add.u64 %r730,%r729,%r729;
add.u64 %r731,%r728,%r730;
ld.s16 %r248,[%r731];
.loc 1 1391 11
and.b32 %r246,%r246,-2945;
.loc 1 1392 5
bra $L87;
$L81:
setp.gt.u16 %r733,%r712,102;
@ %r733 bra $L88;
setp.gt.u16 %r735,%r712,96;
@ %r735 bra $L89;
setp.gt.u16 %r737,%r712,70;
@ %r737 bra $L90;
setp.gt.u16 %r739,%r712,64;
@ ! %r739 bra $L86;
bra $L89;
$L90:
setp.eq.u16 %r741,%r712,88;
@ %r741 bra $L91;
bra $L86;
$L88:
setp.eq.u16 %r743,%r712,120;
@ %r743 bra $L91;
bra $L86;
$L83:
.loc 1 1361 18
and.b32 %r744,%r246,2048;
.loc 1 1361 8
setp.eq.u32 %r745,%r744,0;
@ %r745 bra $L87;
.loc 1 1363 8
setp.ne.u32 %r746,%r248,0;
@ %r746 bra $L92;
.loc 1 1366 15
or.b32 %r246,%r246,512;
.loc 1 1365 14
mov.u32 %r248,8;
$L92:
.loc 1 1368 15
and.b32 %r747,%r246,1024;
.loc 1 1368 8
setp.eq.u32 %r748,%r747,0;
@ %r748 bra $L93;
.loc 1 1370 15
and.b32 %r246,%r246,-1409;
.loc 1 1371 9
bra $L87;
$L93:
.loc 1 1373 11
and.b32 %r246,%r246,-897;
.loc 1 1374 8
setp.eq.u32 %r749,%r250,0;
@ %r749 bra $L94;
.loc 1 1376 19
add.u32 %r250,%r250,-1;
.loc 1 1377 14
add.u64 %r237,%r237,1;
$L94:
.loc 1 1379 5
add.u32 %r251,%r251,1;
.loc 1 1380 5
bra $L95;
$L82:
.loc 1 1397 19
cvta.const.u64 %r750,basefix$0;
cvt.s64.s32 %r751,%r248;
add.u64 %r752,%r751,%r751;
add.u64 %r753,%r750,%r752;
ld.s16 %r248,[%r753];
.loc 1 1398 8
setp.le.s32 %r754,%r248,8;
@ %r754 bra $L86;
.loc 1 1400 11
and.b32 %r246,%r246,-2945;
.loc 1 1401 5
bra $L87;
$L89:
.loc 1 1417 8
setp.le.s32 %r755,%r248,10;
@ %r755 bra $L86;
.loc 1 1419 11
and.b32 %r246,%r246,-2945;
.loc 1 1420 5
bra $L87;
$L85:
.loc 1 1425 15
and.b32 %r756,%r246,128;
.loc 1 1425 8
setp.eq.u32 %r757,%r756,0;
@ %r757 bra $L86;
.loc 1 1427 15
and.b32 %r246,%r246,-129;
.loc 1 1428 9
bra $L87;
$L91:
.loc 1 1435 16
and.b32 %r758,%r246,1536;
.loc 1 1435 8
setp.ne.u32 %r759,%r758,512;
@ %r759 bra $L86;
.loc 1 1438 15
and.b32 %r287,%r246,-513;
.loc 1 1442 15
or.b32 %r246,%r287,1280;
.loc 1 1437 14
mov.u32 %r248,16;
$L87:
.loc 1 1457 13
cvt.u32.u32 %r760,%r144;
st.u8 [%r242],%r760;
.loc 1 1457 10
add.u64 %r242,%r242,1;
$L95:
.loc 1 1459 12
ld.u32 %r761,[%r379+8];
add.u32 %r153,%r761,-1;
.loc 1 1459 11
st.u32 [%r379+8],%r153;
setp.le.s32 %r762,%r153,0;
@ %r762 bra $L96;
.loc 1 1460 9
add.u64 %r763,%r143,1;
st.u64 [%r379],%r763;
bra $L97;
$L96:
.loc 1 1462 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r766,[%value_in];
}
.loc 1 1462 11
setp.ne.u32 %r767,%r766,0;
@ %r767 bra $L86;
$L97:
.loc 1 1342 30
add.u64 %r237,%r237,-1;
.loc 1 1342 4
setp.ne.u64 %r768,%r237,0;
@ %r768 bra $L98;
$L86:
.loc 1 1473 14
and.b32 %r769,%r246,256;
.loc 1 1473 7
setp.eq.u32 %r770,%r769,0;
@ %r770 bra $L99;
.loc 1 1475 11
setp.ge.u64 %r771,%frame,%r242;
@ %r771 bra $L100;
.loc 1 1476 3
add.u64 %r289,%r242,-1;
ld.s8 %r775,[%r242+-1];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r775;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r776,[%value_in];
}
mov.u64 %r242,%r289;
$L100:
.loc 1 1477 11
setp.eq.u64 %r777,%frame,%r242;
@ %r777 bra $L1;
$L99:
.loc 1 1480 15
and.b32 %r778,%r246,16;
.loc 1 1480 7
setp.ne.u32 %r779,%r778,0;
@ %r779 bra $L101;
.loc 1 1484 11
cvt.u32.u32 %r780,%r778;
st.u8 [%r242],%r780;
.loc 1 1485 15
mov.u64 %r783,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r783;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r248;
call (%value_in),%r68,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r785,[%value_in];
}
.loc 1 888 11
add.u64 %r786,%r381,7;
and.b64 %r360,%r786,-8;
add.u64 %r381,%r360,8;
.loc 1 1486 18
and.b32 %r787,%r246,32;
.loc 1 1486 11
setp.eq.u32 %r788,%r787,0;
@ %r788 bra $L102;
.loc 1 1488 12
ld.u64 %r298,[%r360];
.loc 1 1498 11
st.u64 [%r298],%r785;
bra $L103;
$L102:
.loc 1 1507 23
and.b32 %r789,%r246,4;
.loc 1 1507 16
setp.eq.u32 %r790,%r789,0;
@ %r790 bra $L104;
.loc 1 1510 9
ld.u64 %r791,[%r360];
st.u16 [%r791],%r785;
bra $L103;
$L104:
.loc 1 1512 23
and.b32 %r792,%r246,1;
.loc 1 1512 16
setp.eq.u32 %r793,%r792,0;
@ %r793 bra $L105;
.loc 1 1515 9
ld.u64 %r794,[%r360];
st.u64 [%r794],%r785;
bra $L103;
$L105:
.loc 1 1518 23
and.b32 %r795,%r246,2;
.loc 1 1518 16
setp.eq.u32 %r796,%r795,0;
@ %r796 bra $L106;
.loc 1 1521 8
mov.u64 %r797,_strtoul_r;
setp.ne.u64 %r798,%r68,%r797;
@ %r798 bra $L107;
.loc 1 1522 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r783;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r248;
call (%value_in),_strtoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r803,[%value_in];
}
.loc 1 1526 10
mov.u64 %r167,%r803;
bra $L108;
$L107:
.loc 1 1524 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r783;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r248;
call (%value_in),_strtoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r808,[%value_in];
}
mov.u64 %r167,%r808;
$L108:
.loc 1 1526 10
ld.u64 %r809,[%r360];
st.u64 [%r809],%r167;
bra $L103;
$L106:
.loc 1 1532 9
ld.u64 %r810,[%r360];
st.u32 [%r810],%r785;
$L103:
.loc 1 1534 17
add.u32 %r377,%r377,1;
$L101:
.loc 1 1536 15
sub.u64 %r811,%r242,%frame;
.loc 1 1536 10
add.u32 %r812,%r251,%r208;
cvt.u32.u64 %r813,%r811;
add.u32 %r208,%r812,%r813;
.loc 1 1537 4
bra $L7;
$L51:
.loc 1 1553 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r815,[%value_in];
}
.loc 1 1553 16
ld.u64 %r273,[%r815];
.loc 1 1561 14
add.u64 %r816,%r237,-1;
.loc 1 1561 7
setp.le.u64 %r817,%r816,348;
@ %r817 bra $L176;
.loc 1 1564 19
cvt.u32.u64 %r818,%r237;
add.u32 %r256,%r818,-349;
.loc 1 1565 14
mov.u64 %r237,349;
bra $L109;
$L176:
.loc 1 1550 13
mov.u32 %r256,0;
$L109:
.loc 1 1567 10
or.b32 %r247,%r244,1920;
.loc 1 1551 9
mov.u32 %r257,%r258;
.loc 1 1549 10
mov.u64 %r255,0;
.loc 1 1569 15
mov.u64 %r254,%r255;
.loc 1 1568 11
mov.u64 %r253,%r255;
.loc 1 1547 9
mov.u64 %r252,%r255;
.loc 1 1570 11
mov.u64 %r243,%frame;
$L140:
.loc 1 1572 15
ld.u64 %r177,[%r379];
.loc 1 1572 12
ld.u8 %r178,[%r177];
cvt.u16.u32 %r819,%r178;
setp.eq.u16 %r820,%r819,78;
@ %r820 bra $L110;
setp.gt.u16 %r822,%r819,78;
@ %r822 bra $L111;
setp.gt.u16 %r824,%r819,57;
@ %r824 bra $L112;
setp.gt.u16 %r826,%r819,48;
@ %r826 bra $L113;
setp.eq.u16 %r828,%r819,48;
@ %r828 bra $L114;
add.u16 %r829,%r819,-43;
and.b16 %r832,%r829,-3;
cvt.u32.u16 %r834,%r832;
cvt.u16.u8 %r835,%r834;
setp.eq.u16 %r836,%r835,0;
@ ! %r836 bra $L116;
bra $L115;
$L112:
setp.eq.u16 %r838,%r819,70;
@ %r838 bra $L117;
setp.gt.u16 %r840,%r819,70;
@ %r840 bra $L118;
setp.eq.u16 %r842,%r819,65;
@ %r842 bra $L119;
setp.eq.u16 %r844,%r819,69;
@ %r844 bra $L120;
bra $L116;
$L118:
setp.eq.u16 %r846,%r819,73;
@ %r846 bra $L121;
bra $L116;
$L111:
setp.eq.u16 %r848,%r819,102;
@ %r848 bra $L117;
setp.gt.u16 %r850,%r819,102;
@ %r850 bra $L122;
setp.eq.u16 %r852,%r819,97;
@ %r852 bra $L119;
setp.gt.u16 %r854,%r819,97;
@ %r854 bra $L123;
setp.eq.u16 %r856,%r819,84;
@ %r856 bra $L124;
setp.eq.u16 %r858,%r819,89;
@ %r858 bra $L125;
bra $L116;
$L123:
setp.eq.u16 %r860,%r819,101;
@ %r860 bra $L120;
bra $L116;
$L122:
setp.eq.u16 %r862,%r819,116;
@ %r862 bra $L124;
setp.gt.u16 %r864,%r819,116;
@ %r864 bra $L126;
setp.eq.u16 %r866,%r819,105;
@ %r866 bra $L121;
setp.eq.u16 %r868,%r819,110;
@ %r868 bra $L110;
bra $L116;
$L126:
setp.eq.u16 %r870,%r819,121;
@ %r870 bra $L125;
bra $L116;
$L114:
.loc 1 1580 15
and.b32 %r871,%r247,256;
.loc 1 1580 8
setp.eq.u32 %r872,%r871,0;
@ %r872 bra $L113;
.loc 1 1582 15
and.b32 %r247,%r247,-129;
.loc 1 1583 15
add.u64 %r253,%r253,1;
.loc 1 1584 12
setp.ne.u32 %r873,%r256,0;
@ %r873 bra $L127;
.loc 1 1755 13
add.u64 %r237,%r237,-1;
bra $L128;
$L127:
.loc 1 1586 16
add.u32 %r256,%r256,-1;
bra $L128;
$L113:
.loc 1 1601 18
add.u32 %r874,%r257,%r258;
.loc 1 1601 8
setp.ne.u32 %r875,%r874,0;
@ %r875 bra $L129;
.loc 1 1603 15
and.b32 %r247,%r247,-385;
.loc 1 1604 9
bra $L130;
$L115:
.loc 1 1610 15
and.b32 %r876,%r247,128;
.loc 1 1610 8
setp.eq.u32 %r877,%r876,0;
@ %r877 bra $L129;
.loc 1 1612 15
and.b32 %r247,%r247,-129;
.loc 1 1613 9
bra $L130;
$L110:
.loc 1 1618 18
cvt.u16.u32 %r879,%r257;
set.u32.eq.u16 %r880,%r879,0;
neg.s32 %r881,%r880;
.loc 1 1618 33
set.u32.eq.u64 %r883,%r253,0;
neg.s32 %r884,%r883;
.loc 1 1618 23
cvt.u16.u32 %r886,%r881;
cvt.u16.u32 %r887,%r884;
and.b16 %r885,%r886,%r887;
.loc 1 1618 8
cvt.u32.u16 %r888,%r885;
cvt.u16.u8 %r889,%r888;
setp.eq.u16 %r890,%r889,0;
@ %r890 bra $L131;
.loc 1 1619 19
and.b32 %r891,%r247,1792;
.loc 1 1619 9
setp.ne.u32 %r892,%r891,1792;
@ %r892 bra $L132;
.loc 1 1622 15
and.b32 %r247,%r247,-1921;
.loc 1 1623 18
mov.u32 %r257,1;
.loc 1 1624 9
mov.u64 %r253,0;
bra $L130;
$L131:
.loc 1 1626 8
setp.eq.u16 %r894,%r879,2;
@ %r894 bra $L177;
$L132:
.loc 1 1631 18
cvt.u16.u32 %r896,%r258;
set.u32.eq.u16 %r897,%r896,1;
neg.s32 %r898,%r897;
.loc 1 1631 35
set.u32.eq.u16 %r901,%r896,4;
neg.s32 %r902,%r901;
.loc 1 1631 23
cvt.u16.u32 %r904,%r898;
cvt.u16.u32 %r905,%r902;
or.b16 %r903,%r904,%r905;
.loc 1 1631 8
cvt.u32.u16 %r906,%r903;
cvt.u16.u8 %r907,%r906;
setp.eq.u16 %r908,%r907,0;
@ %r908 bra $L129;
.loc 1 1633 17
add.u16 %r910,%r896,1;
cvt.u32.u16 %r912,%r910;
cvt.s32.s8 %r258,%r912;
.loc 1 1634 9
bra $L130;
$L119:
.loc 1 1639 8
cvt.u16.u32 %r914,%r257;
setp.eq.u16 %r915,%r914,1;
@ %r915 bra $L178;
bra $L129;
$L121:
.loc 1 1647 18
cvt.u16.u32 %r917,%r258;
set.u32.eq.u16 %r918,%r917,0;
neg.s32 %r919,%r918;
.loc 1 1647 33
set.u32.eq.u64 %r921,%r253,0;
neg.s32 %r922,%r921;
.loc 1 1647 23
cvt.u16.u32 %r924,%r919;
cvt.u16.u32 %r925,%r922;
and.b16 %r923,%r924,%r925;
.loc 1 1647 8
cvt.u32.u16 %r926,%r923;
cvt.u16.u8 %r927,%r926;
setp.eq.u16 %r928,%r927,0;
@ %r928 bra $L133;
.loc 1 1648 19
and.b32 %r929,%r247,1792;
.loc 1 1648 9
setp.ne.u32 %r930,%r929,1792;
@ %r930 bra $L134;
.loc 1 1651 15
and.b32 %r247,%r247,-1921;
.loc 1 1652 18
mov.u32 %r258,1;
.loc 1 1653 9
mov.u64 %r253,0;
bra $L130;
$L133:
.loc 1 1655 18
cvt.u32.u32 %r931,%r258;
cvt.u16.u8 %r933,%r931;
add.u16 %r932,%r933,-3;
and.b16 %r935,%r932,-3;
.loc 1 1655 8
cvt.u32.u16 %r937,%r935;
cvt.u16.u8 %r938,%r937;
setp.ne.u16 %r939,%r938,0;
@ %r939 bra $L129;
.loc 1 1657 17
add.u16 %r940,%r933,1;
cvt.u32.u16 %r942,%r940;
cvt.s32.s8 %r258,%r942;
.loc 1 1658 9
bra $L130;
$L117:
.loc 1 1663 8
cvt.u16.u32 %r943,%r258;
setp.eq.u16 %r944,%r943,2;
@ %r944 bra $L179;
bra $L129;
$L124:
.loc 1 1671 8
cvt.u16.u32 %r945,%r258;
setp.eq.u16 %r946,%r945,6;
@ %r946 bra $L180;
bra $L129;
$L125:
.loc 1 1679 8
cvt.u16.u32 %r947,%r258;
setp.eq.u16 %r948,%r947,7;
@ %r948 bra $L181;
bra $L129;
$L120:
.loc 1 1688 16
and.b32 %r949,%r247,1280;
.loc 1 1688 8
setp.eq.u32 %r950,%r949,1024;
@ %r950 bra $L135;
.loc 1 1689 20
and.b32 %r951,%r247,1024;
.loc 1 1689 9
setp.eq.u32 %r952,%r951,0;
@ %r952 bra $L129;
.loc 1 1689 29
setp.eq.u64 %r953,%r253,0;
@ %r953 bra $L136;
$L135:
.loc 1 1691 22
and.b32 %r954,%r247,512;
.loc 1 1691 12
setp.ne.u32 %r955,%r954,0;
@ %r955 bra $L137;
.loc 1 1693 17
sub.u64 %r254,%r253,%r252;
mov.u64 %r255,%r243;
$L137:
.loc 1 1698 11
and.b32 %r201,%r247,-1921;
.loc 1 1696 15
or.b32 %r247,%r201,384;
.loc 1 1699 16
mov.u64 %r253,0;
.loc 1 1700 9
bra $L130;
$L116:
.loc 1 1705 8
ld.u8 %r956,[%r273];
cvt.u16.u32 %r957,%r178;
setp.ne.u16 %r958,%r956,%r957;
@ %r958 bra $L129;
.loc 1 1706 19
and.b32 %r959,%r247,512;
.loc 1 1706 9
setp.eq.u32 %r960,%r959,0;
@ %r960 bra $L129;
.loc 1 1708 15
and.b32 %r247,%r247,-641;
.loc 1 1710 9
mov.u64 %r252,%r253;
bra $L130;
$L177:
.loc 1 1628 18
mov.u32 %r257,3;
bra $L130;
$L178:
.loc 1 1641 18
mov.u32 %r257,2;
bra $L130;
$L179:
.loc 1 1665 18
mov.u32 %r258,3;
bra $L130;
$L180:
.loc 1 1673 18
mov.u32 %r258,7;
bra $L130;
$L181:
.loc 1 1681 18
mov.u32 %r258,8;
$L130:
.loc 1 1753 13
cvt.u32.u32 %r961,%r178;
st.u8 [%r243],%r961;
.loc 1 1755 13
add.u64 %r237,%r237,-1;
.loc 1 1753 10
add.u64 %r243,%r243,1;
$L128:
.loc 1 1756 8
add.u32 %r208,%r208,1;
.loc 1 1757 12
ld.u32 %r962,[%r379+8];
add.u32 %r207,%r962,-1;
.loc 1 1757 11
st.u32 [%r379+8],%r207;
setp.le.s32 %r963,%r207,0;
@ %r963 bra $L138;
.loc 1 1758 9
add.u64 %r964,%r177,1;
st.u64 [%r379],%r964;
bra $L139;
$L138:
.loc 1 1760 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r379;
call (%value_in),__srefill_r,(%out_arg1,%out_arg2);
ld.param.u32 %r967,[%value_in];
}
.loc 1 1760 11
setp.ne.u32 %r968,%r967,0;
@ %r968 bra $L129;
$L139:
.loc 1 1570 4
setp.ne.u64 %r969,%r237,0;
@ %r969 bra $L140;
$L129:
.loc 1 1763 7
setp.eq.u64 %r970,%r253,0;
@ %r970 bra $L136;
.loc 1 1764 12
and.b32 %r247,%r247,-257;
$L136:
.loc 1 1773 17
add.u32 %r971,%r257,-1;
.loc 1 1773 7
setp.gt.u32 %r972,%r971,1;
@ %r972 bra $L141;
$L161:
.loc 1 1778 14
setp.ge.u64 %r973,%frame,%r243;
@ %r973 bra $L1;
$L142:
.loc 1 1780 5
add.u64 %r243,%r243,-1;
ld.s8 %r977,[%r243];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r977;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r978,[%value_in];
}
.loc 1 1778 14
setp.ne.u64 %r979,%frame,%r243;
@ %r979 bra $L142;
bra $L1;
$L141:
.loc 1 1788 17
add.u32 %r980,%r258,-1;
.loc 1 1788 7
setp.gt.u32 %r981,%r980,6;
@ %r981 bra $L143;
.loc 1 1790 11
cvt.u16.u32 %r982,%r258;
setp.le.s16 %r983,%r982,2;
@ %r983 bra $L144;
.loc 1 1791 18
cvt.u32.u32 %r984,%r258;
cvt.u32.u8 %r282,%r984;
.loc 1 1791 9
setp.ne.u16 %r986,%r982,3;
@ %r986 bra $L182;
bra $L143;
$L144:
.loc 1 1798 11
setp.lt.u64 %r987,%frame,%r243;
@ %r987 bra $L146;
bra $L1;
$L182:
.loc 1 1791 9
mov.u64 %r278,%r243;
cvt.u32.u64 %r995,%r278;
cvt.u16.u32 %r999,%r282;
cvt.u16.u64 %r1004,%r278;
$L145:
.loc 1 1793 7
add.u64 %r278,%r278,-1;
ld.s8 %r991,[%r278];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r991;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r992,[%value_in];
}
cvt.u32.u64 %r994,%r278;
add.u32 %r993,%r208,%r994;
sub.u32 %r342,%r993,%r995;
.loc 1 1791 9
cvt.u16.u64 %r998,%r278;
add.u16 %r997,%r998,%r999;
sub.u16 %r1002,%r997,%r1004;
cvt.u32.u16 %r1007,%r1002;
cvt.s32.s8 %r1006,%r1007;
cvt.u16.u32 %r1005,%r1006;
setp.gt.s16 %r1008,%r1005,3;
@ %r1008 bra $L145;
.loc 1 1794 7
mov.u32 %r208,%r342;
mov.u64 %r243,%r278;
bra $L143;
$L146:
.loc 1 1800 9
add.u64 %r243,%r243,-1;
ld.s8 %r1012,[%r243];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1012;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1013,[%value_in];
}
.loc 1 1798 11
setp.ne.u64 %r1014,%frame,%r243;
@ %r1014 bra $L146;
bra $L1;
$L143:
.loc 1 1811 14
and.b32 %r1015,%r247,256;
.loc 1 1811 7
setp.eq.u32 %r1016,%r1015,0;
@ %r1016 bra $L147;
.loc 1 1813 18
and.b32 %r1017,%r247,1024;
.loc 1 1813 11
setp.eq.u32 %r1018,%r1017,0;
@ %r1018 bra $L148;
.loc 1 1816 11
setp.ge.u64 %r1019,%frame,%r243;
@ %r1019 bra $L1;
$L149:
.loc 1 1818 9
add.u64 %r243,%r243,-1;
ld.s8 %r1023,[%r243];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r1023;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1024,[%value_in];
}
.loc 1 1816 11
setp.ne.u64 %r1025,%frame,%r243;
@ %r1025 bra $L149;
bra $L1;
$L148:
.loc 1 1824 12
ld.s8 %r236,[%r243+-1];
.loc 1 1826 26
cvt.u16.u32 %r1027,%r236;
and.b16 %r1026,%r1027,-33;
.loc 1 1826 11
cvt.u32.u16 %r1030,%r1026;
cvt.s32.s8 %r1029,%r1030;
cvt.u16.u32 %r1028,%r1029;
setp.ne.u16 %r1031,%r1028,69;
@ %r1031 bra $L150;
.loc 1 1824 10
add.u64 %r243,%r243,-1;
.loc 1 1825 8
add.u32 %r208,%r208,-1;
bra $L151;
$L150:
.loc 1 1828 5
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r236;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1035,[%value_in];
}
.loc 1 1829 7
ld.s8 %r236,[%r243+-2];
.loc 1 1830 5
add.u32 %r208,%r208,-2;
.loc 1 1829 7
add.u64 %r243,%r243,-2;
$L151:
.loc 1 1832 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r236;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r379;
call (%value_in),_ungetc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1039,[%value_in];
}
$L147:
.loc 1 1834 15
and.b32 %r1040,%r247,16;
.loc 1 1834 7
setp.ne.u32 %r1041,%r1040,0;
@ %r1041 bra $L7;
.loc 1 1845 11
cvt.u32.u32 %r1042,%r1040;
st.u8 [%r243],%r1042;
.loc 1 1846 19
and.b32 %r1043,%r247,1536;
.loc 1 1846 11
setp.ne.u32 %r1044,%r1043,1024;
@ %r1044 bra $L152;
.loc 1 1849 13
sub.u64 %r281,%r252,%r253;
.loc 1 1854 11
setp.ne.u64 %r1045,%r253,%r252;
@ %r1045 bra $L153;
bra $L154;
$L152:
.loc 1 1852 16
setp.eq.u64 %r1046,%r254,0;
@ %r1046 bra $L154;
.loc 1 1853 55
add.u64 %r1051,%r255,1;
.loc 1 1853 27
mov.u32 %r1050,10;
mov.u64 %r1049,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1051;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1049;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r1050;
call (%value_in),_strtol_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r1052,[%value_in];
}
.loc 1 1853 25
sub.u64 %r281,%r1052,%r254;
mov.u64 %r243,%r255;
$L153:
.loc 1 1859 8
setp.lt.u64 %r1054,%r243,%r1082;
@ %r1054 bra $L155;
.loc 1 1860 17
add.u64 %r243,%frame,328;
$L155:
.loc 1 1861 18
st.u64 [%stack],%r281;
cvta.const.u64 %r1056,$LC0;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r243;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1056;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%stack;
call (%value_in),sprintf,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1057,[%value_in];
}
$L154:
.loc 1 1873 16
mov.u64 %r1061,0;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r378;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1061;
call (%value_in),_strtod_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.f64 %r1062,[%value_in];
}
.loc 1 888 11
add.u64 %r1063,%r381,7;
and.b64 %r361,%r1063,-8;
add.u64 %r381,%r361,8;
.loc 1 1875 18
and.b32 %r1064,%r247,1;
.loc 1 1875 11
setp.eq.u32 %r1065,%r1064,0;
@ %r1065 bra $L156;
.loc 1 1878 9
ld.u64 %r1066,[%r361];
st.f64 [%r1066],%r1062;
bra $L157;
$L156:
.loc 1 1877 8
ld.u64 %r315,[%r361];
.loc 1 1880 23
and.b32 %r1067,%r247,2;
.loc 1 1880 16
setp.eq.u32 %r1068,%r1067,0;
@ %r1068 bra $L158;
.loc 1 1883 10
st.f64 [%r315],%r1062;
bra $L157;
$L158:
.loc 1 1888 8
setp.num.f64 %r1069,%r1062,%r1062;
@ %r1069 bra $L159;
.loc 1 1889 14
cvta.const.u64 %r1070,$LC1;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1070;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r1071,[%value_in];
}
.loc 1 1889 12
st.f32 [%r315],%r1071;
bra $L157;
$L159:
.loc 1 1891 12
cvt.rn.f32.f64 %r1072,%r1062;
st.f32 [%r315],%r1072;
$L157:
.loc 1 1893 17
add.u32 %r377,%r377,1;
bra $L7;
$L35:
.loc 1 1905 63
setp.eq.u32 %r1073,%r377,0;
@ %r1073 bra $L183;
.loc 1 1905 25
ld.u16 %r1075,[%r379+16];
and.b16 %r1074,%r1075,64;
setp.ne.u16 %r1076,%r1074,0;
.loc 1 1905 63
selp.u32 %r377,-1,%r377,%r1076;
bra $L1;
$L162:
.loc 1 613 10
mov.u32 %r377,%r27;
bra $L1;
$L183:
.loc 1 1905 63
mov.u32 %r377,-1;
bra $L1;
$L3:
$L160:
$L134:
.loc 1 1773 17
add.u32 %r1078,%r257,-1;
.loc 1 1773 7
setp.le.u32 %r1079,%r1078,1;
@ %r1079 bra $L161;
mov.u64 %r253,0;
bra $L143;
$L1:
.loc 1 1914 1
mov.u32 %value,%r377;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfscanf
.visible .func (.param .u32 %value_out) vfscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 231 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 233 3
setp.eq.u64 %r28,%r23,0;
@ %r28 bra $L346;
ld.u32 %r29,[%r23+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L346;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L346:
.loc 1 234 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 235 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __svfscanf
.visible .func (.param .u32 %value_out) __svfscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 242 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 243 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vfscanf_r
.visible .func (.param .u32 %value_out) _vfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 253 3
setp.eq.u64 %r28,%r24,0;
@ %r28 bra $L352;
ld.u32 %r29,[%r24+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L352;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call __sinit,(%out_arg1);
}
$L352:
.loc 1 254 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 255 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}

/1861           1612277263  0     0     100666  98933     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: wcvt
.func (.param .u64 %value_out) wcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u32 %in_ar6, .param .u64 %in_ar7, .param .u64 %in_ar8, .param .u32 %in_ar9);
.file 1 "../../../../../newlib/libc/stdio/vfwprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _vfwprintf_r
.visible .func (.param .u32 %value_out) _vfwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: vfwprintf
.visible .func (.param .u32 %value_out) vfwprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _dtoa_r
.extern .func (.param .u64 %value_out) _dtoa_r (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.extern .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __sprint_r
.extern .func (.param .u32 %value_out) __sprint_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: btowc
.extern .func (.param .u32 %value_out) btowc (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: memchr
.extern .func (.param .u64 %value_out) memchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcslen
.extern .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN VAR DEF: zeroes$0
.const .align 4 .u32 zeroes$0[16] =
{48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 };
// BEGIN VAR DEF: blanks$1
.const .align 4 .u32 blanks$1[16] =
{32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32 };
// BEGIN VAR DEF: $LC0
.const .align 4 .u32 $LC0[4] =
{73,78,70,0 };
// BEGIN VAR DEF: $LC1
.const .align 4 .u32 $LC1[4] =
{105,110,102,0 };
// BEGIN VAR DEF: $LC2
.const .align 4 .u32 $LC2[4] =
{78,65,78,0 };
// BEGIN VAR DEF: $LC3
.const .align 4 .u32 $LC3[4] =
{110,97,110,0 };
// BEGIN VAR DEF: $LC4
.const .align 4 .u32 $LC4[17] =
{48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0 };
// BEGIN VAR DEF: $LC5
.const .align 4 .u32 $LC5[17] =
{48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0 };
// BEGIN VAR DEF: $LC6
.const .align 4 .u32 $LC6[7] =
{40,110,117,108,108,41,0 };
// BEGIN VAR DEF: $LC7
.const .align 4 .u32 $LC7[2] =
{48,0 };
// BEGIN FUNCTION DEF: wcvt
.func (.param .u64 %value_out) wcvt (.param .u64 %in_ar0, .param .f64 %in_ar1, .param .u32 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u32 %in_ar6, .param .u64 %in_ar7, .param .u64 %in_ar8, .param .u32 %in_ar9)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .f64 %ar1;
ld.param.f64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %ar5;
ld.param.u64 %ar5,[%in_ar5];
.reg .u32 %ar6;
ld.param.u32 %ar6,[%in_ar6];
.reg .u64 %ar7;
ld.param.u64 %ar7,[%in_ar7];
.reg .u64 %ar8;
ld.param.u64 %ar8,[%in_ar8];
.reg .u32 %ar9;
ld.param.u32 %ar9,[%in_ar9];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r25;
.reg .u64 %r29;
.reg .u32 %r31;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u32 %r40;
.reg .u64 %r47;
.reg .u64 %r50;
.reg .u32 %r54;
.reg .u64 %r56;
.reg .f64 %r57;
.reg .u32 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u32 %r65;
.reg .u64 %r66;
.reg .u64 %r67;
.reg .u32 %r68;
.reg .pred %r69;
.reg .pred %r70;
.reg .pred %r71;
.reg .u32 %r74;
.reg .u64 %r79;
.reg .u64 %r80;
.reg .u32 %r81;
.reg .u64 %r82;
.reg .u64 %r83;
.reg .pred %r84;
.reg .pred %r85;
.reg .u64 %r86;
.reg .u32 %r87;
.reg .pred %r88;
.reg .u64 %r89;
.reg .u32 %r91;
.reg .u32 %r92;
.reg .u32 %r94;
.reg .u32 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u16 %r98;
.reg .u32 %r99;
.reg .u16 %r100;
.reg .pred %r101;
.reg .u32 %r103;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .pred %r106;
.reg .u64 %r107;
.reg .u32 %r110;
.reg .u64 %r115;
.reg .u64 %r116;
.reg .pred %r117;
.reg .u32 %r120;
.reg .u64 %r125;
.reg .u64 %r126;
.reg .u16 %r128;
.reg .u32 %r129;
.reg .u32 %r130;
.reg .u32 %r131;
.reg .u32 %r133;
.reg .u32 %r134;
.reg .u16 %r135;
.reg .u16 %r136;
.reg .u16 %r137;
.reg .u32 %r138;
.reg .u16 %r139;
.reg .pred %r140;
.reg .u64 %r141;
.reg .u32 %r142;
.reg .pred %r143;
mov.u64 %r56,%ar0;
mov.f64 %r57,%ar1;
mov.u32 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r61,%ar5;
mov.u32 %r62,%ar6;
mov.u64 %r63,%ar7;
mov.u64 %r64,%ar8;
mov.u32 %r65,%ar9;
.loc 1 1562 6
mov.b64 %r66,%r57;
shr.u64 %r67,%r66,32;
.loc 1 1562 5
cvt.u32.u64 %r68,%r67;
setp.ge.s32 %r69,%r68,0;
@ %r69 bra $L18;
.loc 1 1563 9
neg.f64 %r57,%r57;
.loc 1 1564 9
mov.u32 %r39,45;
bra $L2;
$L18:
.loc 1 1566 9
mov.u32 %r39,0;
$L2:
st.u32 [%r60],%r39;
.loc 1 1616 23
and.b32 %r25,%r62,-33;
.loc 1 1616 5
setp.eq.u32 %r70,%r25,70;
@ %r70 bra $L3;
.loc 1 1623 6
setp.ne.u32 %r71,%r25,69;
@ %r71 bra $L4;
.loc 1 1624 11
add.u32 %r58,%r58,1;
.loc 1 1635 13
add.u64 %r79,%frame,8;
mov.u32 %r74,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r57;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r74;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r61;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r79;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r80,[%value_in];
}
mov.u64 %r50,%r80;
bra $L5;
$L23:
.loc 1 1642 10
ld.u32 %r54,[%r61];
bra $L6;
$L15:
.loc 1 1641 23
mov.u32 %r81,1;
sub.u32 %r54,%r81,%r58;
.loc 1 1641 12
st.u32 [%r61],%r54;
$L6:
.loc 1 1642 10
cvt.s64.s32 %r82,%r54;
.loc 1 1642 7
add.u64 %r83,%r82,%r47;
add.u64 %r35,%r126,%r83;
$L13:
.loc 1 1644 6
setp.neu.f64 %r84,%r57,0d0000000000000000;
@ %r84 bra $L7;
.loc 1 1645 8
st.u64 [%frame],%r35;
mov.u64 %r29,%r35;
bra $L8;
$L7:
.loc 1 1646 14
ld.u64 %r29,[%frame];
.loc 1 1646 9
setp.le.u64 %r85,%r35,%r29;
@ %r85 bra $L8;
.loc 1 1647 11
mov.u32 %r87,48;
$L9:
.loc 1 1647 8
add.u64 %r86,%r29,1;
st.u64 [%frame],%r86;
.loc 1 1647 11
st.u8 [%r29],%r87;
.loc 1 1646 14
ld.u64 %r29,[%frame];
.loc 1 1646 9
setp.lt.u64 %r88,%r29,%r35;
@ %r88 bra $L9;
$L8:
.loc 1 1650 18
sub.u64 %r89,%r29,%r50;
.loc 1 1650 12
cvt.u32.u64 %r31,%r89;
st.u32 [%r63],%r31;
.loc 1 1655 28
set.u32.gt.s32 %r91,%r65,0;
neg.s32 %r92,%r91;
.loc 1 1655 4
set.u32.gt.s32 %r94,%r31,0;
neg.s32 %r95,%r94;
.loc 1 1655 28
cvt.u16.u32 %r97,%r92;
cvt.u16.u32 %r98,%r95;
and.b16 %r96,%r97,%r98;
cvt.u32.u16 %r99,%r96;
cvt.u16.u8 %r100,%r99;
setp.ne.u16 %r101,%r100,0;
@ ! %r101 bra $L21;
mov.u64 %r36,%r50;
mov.u64 %r37,%r64;
.loc 1 1655 11
mov.u32 %r40,0;
$L11:
.loc 1 1656 15
ld.s8 %r103,[%r36];
st.u32 [%r37],%r103;
.loc 1 1655 40
add.u32 %r40,%r40,1;
.loc 1 1655 28
add.u64 %r36,%r36,1;
add.u64 %r37,%r37,4;
ld.u32 %r105,[%r63];
min.s32 %r104,%r65,%r105;
setp.gt.s32 %r106,%r104,%r40;
@ %r106 bra $L11;
bra $L21;
$L5:
.loc 1 1638 15
cvt.s64.s32 %r107,%r58;
.loc 1 1638 6
add.u64 %r35,%r50,%r107;
bra $L13;
$L4:
.loc 1 1635 13
add.u64 %r115,%frame,8;
mov.u32 %r110,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r57;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r110;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r61;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r115;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r116,[%value_in];
}
mov.u64 %r50,%r116;
.loc 1 1637 7
setp.ne.u32 %r117,%r25,71;
@ ! %r117 bra $L22;
bra $L5;
$L3:
.loc 1 1635 13
add.u64 %r125,%frame,8;
mov.u32 %r120,3;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r56;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r57;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r120;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r58;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r61;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r125;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%frame;
call (%value_in),_dtoa_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r126,[%value_in];
}
mov.u64 %r50,%r126;
.loc 1 1638 15
cvt.s64.s32 %r47,%r58;
.loc 1 1640 7
ld.s8 %r129,[%r126];
cvt.u16.u32 %r128,%r129;
set.u32.eq.u16 %r130,%r128,48;
neg.s32 %r131,%r130;
.loc 1 1640 24
set.u32.neu.f64 %r133,%r57,0d0000000000000000;
neg.s32 %r134,%r133;
cvt.u16.u32 %r136,%r131;
cvt.u16.u32 %r137,%r134;
and.b16 %r135,%r136,%r137;
cvt.u32.u16 %r138,%r135;
cvt.u16.u8 %r139,%r138;
setp.ne.u16 %r140,%r139,0;
@ ! %r140 bra $L23;
bra $L15;
$L17:
.loc 1 1638 15
cvt.s64.s32 %r141,%r58;
.loc 1 1638 6
add.u64 %r35,%r50,%r141;
bra $L13;
$L22:
.loc 1 1637 44
and.b32 %r142,%r59,1;
.loc 1 1637 35
setp.ne.u32 %r143,%r142,0;
@ %r143 bra $L17;
.loc 1 1650 18
ld.u64 %r29,[%frame];
bra $L8;
$L21:
.loc 1 1660 1
mov.u64 %value,%r64;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vfwprintf_r
.visible .func (.param .u32 %value_out) _vfwprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[1312];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u64 %r41;
.reg .u32 %r43;
.reg .u32 %r46;
.reg .u64 %r66;
.reg .u32 %r74;
.reg .u32 %r82;
.reg .u64 %r110;
.reg .u32 %r132;
.reg .u32 %r145;
.reg .u32 %r146;
.reg .u64 %r149;
.reg .u32 %r151;
.reg .u32 %r152;
.reg .u32 %r156;
.reg .u32 %r159;
.reg .u32 %r160;
.reg .u64 %r164;
.reg .u32 %r165;
.reg .u64 %r169;
.reg .u32 %r170;
.reg .u64 %r174;
.reg .u32 %r176;
.reg .u32 %r180;
.reg .u32 %r183;
.reg .u32 %r186;
.reg .u64 %r190;
.reg .u32 %r191;
.reg .u32 %r193;
.reg .u32 %r195;
.reg .u64 %r200;
.reg .u64 %r203;
.reg .u64 %r206;
.reg .u32 %r207;
.reg .u64 %r214;
.reg .u32 %r216;
.reg .u32 %r218;
.reg .u64 %r221;
.reg .u32 %r222;
.reg .u32 %r223;
.reg .u64 %r226;
.reg .u32 %r227;
.reg .u32 %r228;
.reg .u32 %r231;
.reg .u32 %r237;
.reg .u64 %r238;
.reg .u64 %r241;
.reg .u32 %r244;
.reg .u32 %r246;
.reg .u64 %r249;
.reg .u32 %r250;
.reg .u64 %r251;
.reg .u64 %r258;
.reg .u32 %r259;
.reg .u64 %r263;
.reg .u64 %r268;
.reg .u64 %r273;
.reg .u32 %r274;
.reg .u64 %r281;
.reg .u32 %r282;
.reg .u32 %r283;
.reg .u64 %r287;
.reg .u32 %r288;
.reg .u32 %r289;
.reg .u32 %r290;
.reg .u32 %r291;
.reg .u32 %r292;
.reg .u64 %r294;
.reg .u32 %r295;
.reg .u32 %r296;
.reg .u64 %r297;
.reg .u64 %r298;
.reg .u64 %r299;
.reg .u64 %r300;
.reg .u64 %r301;
.reg .u64 %r302;
.reg .u32 %r303;
.reg .u64 %r311;
.reg .u64 %r312;
.reg .u32 %r315;
.reg .u32 %r316;
.reg .u32 %r320;
.reg .u64 %r325;
.reg .u32 %r326;
.reg .u32 %r327;
.reg .u64 %r329;
.reg .u32 %r331;
.reg .u32 %r334;
.reg .u64 %r335;
.reg .u64 %r336;
.reg .f64 %r338;
.reg .u64 %r339;
.reg .u64 %r340;
.reg .u64 %r342;
.reg .u32 %r343;
.reg .u64 %r344;
.reg .u32 %r345;
.reg .u32 %r348;
.reg .u64 %r349;
.reg .u64 %r350;
.reg .u32 %r353;
.reg .u64 %r354;
.reg .u64 %r355;
.reg .u32 %r356;
.reg .u32 %r358;
.reg .u64 %r363;
.reg .u64 %r368;
.reg .u64 %r379;
.reg .u64 %r384;
.reg .u64 %r385;
.reg .u64 %r388;
.reg .u64 %r389;
.reg .u64 %r390;
.reg .u64 %r391;
.reg .u64 %r393;
.reg .u64 %r394;
.reg .u64 %r395;
.reg .u64 %r396;
.reg .u64 %r398;
.reg .u64 %r400;
.reg .u64 %r401;
.reg .u64 %r402;
.reg .u64 %r403;
.reg .u32 %r404;
.reg .u32 %r406;
.reg .u64 %r408;
.reg .u32 %r409;
.reg .u64 %r411;
.reg .u64 %r413;
.reg .u64 %r414;
.reg .u32 %r415;
.reg .u32 %r416;
.reg .u64 %r426;
.reg .u32 %r428;
.reg .u32 %r429;
.reg .u32 %r430;
.reg .u32 %r433;
.reg .u64 %r434;
.reg .u32 %r435;
.reg .u32 %r436;
.reg .u32 %r437;
.reg .u32 %r438;
.reg .u64 %r440;
.reg .u32 %r441;
.reg .u64 %r442;
.reg .u64 %r446;
.reg .u32 %r447;
.reg .u32 %r450;
.reg .u64 %r451;
.reg .u32 %r452;
.reg .u32 %r453;
.reg .u32 %r454;
.reg .u32 %r455;
.reg .u32 %r456;
.reg .u32 %r458;
.reg .u64 %r459;
.reg .u32 %r460;
.reg .u64 %r461;
.reg .u64 %r462;
.reg .u64 %r463;
.reg .u64 %r464;
.reg .u32 %r469;
.reg .u64 %r471;
.reg .u64 %r472;
.reg .u32 %r473;
.reg .pred %r474;
.reg .u32 %r475;
.reg .pred %r476;
.reg .u16 %r478;
.reg .u16 %r479;
.reg .pred %r480;
.reg .u16 %r481;
.reg .u32 %r484;
.reg .u16 %r485;
.reg .u16 %r486;
.reg .pred %r487;
.reg .u64 %r488;
.reg .pred %r489;
.reg .u32 %r492;
.reg .pred %r493;
.reg .u16 %r494;
.reg .u16 %r495;
.reg .pred %r496;
.reg .u16 %r497;
.reg .pred %r498;
.reg .u16 %r499;
.reg .u32 %r501;
.reg .u64 %r503;
.reg .u64 %r504;
.reg .u32 %r505;
.reg .u32 %r507;
.reg .u64 %r512;
.reg .u32 %r513;
.reg .pred %r514;
.reg .u32 %r518;
.reg .pred %r519;
.reg .u16 %r520;
.reg .u16 %r521;
.reg .pred %r522;
.reg .u16 %r523;
.reg .u16 %r524;
.reg .u64 %r526;
.reg .u32 %r527;
.reg .u32 %r529;
.reg .u32 %r530;
.reg .u32 %r532;
.reg .u32 %r533;
.reg .u16 %r534;
.reg .u16 %r535;
.reg .u16 %r536;
.reg .u32 %r537;
.reg .u16 %r538;
.reg .pred %r539;
.reg .u32 %r541;
.reg .u32 %r542;
.reg .u32 %r544;
.reg .u32 %r545;
.reg .u16 %r546;
.reg .u16 %r547;
.reg .u16 %r548;
.reg .u32 %r549;
.reg .u16 %r550;
.reg .pred %r551;
.reg .u64 %r552;
.reg .u64 %r554;
.reg .pred %r555;
.reg .u64 %r556;
.reg .u64 %r557;
.reg .u64 %r558;
.reg .u32 %r559;
.reg .pred %r560;
.reg .u32 %r565;
.reg .pred %r566;
.reg .pred %r567;
.reg .u32 %r568;
.reg .pred %r569;
.reg .pred %r570;
.reg .pred %r571;
.reg .pred %r572;
.reg .pred %r573;
.reg .pred %r574;
.reg .pred %r575;
.reg .pred %r576;
.reg .pred %r577;
.reg .pred %r578;
.reg .pred %r579;
.reg .pred %r580;
.reg .pred %r581;
.reg .pred %r582;
.reg .pred %r583;
.reg .pred %r584;
.reg .pred %r585;
.reg .pred %r586;
.reg .pred %r587;
.reg .pred %r588;
.reg .pred %r589;
.reg .pred %r590;
.reg .pred %r591;
.reg .pred %r593;
.reg .u32 %r594;
.reg .pred %r595;
.reg .pred %r596;
.reg .pred %r597;
.reg .pred %r598;
.reg .pred %r599;
.reg .pred %r600;
.reg .pred %r601;
.reg .pred %r602;
.reg .pred %r603;
.reg .pred %r604;
.reg .pred %r605;
.reg .pred %r606;
.reg .pred %r607;
.reg .u32 %r608;
.reg .pred %r609;
.reg .u32 %r611;
.reg .u32 %r612;
.reg .u32 %r613;
.reg .u32 %r614;
.reg .u32 %r615;
.reg .pred %r616;
.reg .u32 %r618;
.reg .u32 %r619;
.reg .u32 %r620;
.reg .u32 %r621;
.reg .u32 %r622;
.reg .pred %r623;
.reg .pred %r624;
.reg .pred %r625;
.reg .u32 %r626;
.reg .pred %r627;
.reg .u32 %r628;
.reg .u32 %r629;
.reg .pred %r630;
.reg .u16 %r631;
.reg .u16 %r632;
.reg .u32 %r633;
.reg .u32 %r634;
.reg .pred %r636;
.reg .u32 %r637;
.reg .pred %r638;
.reg .u32 %r639;
.reg .pred %r640;
.reg .u32 %r641;
.reg .pred %r642;
.reg .pred %r647;
.reg .u32 %r648;
.reg .pred %r649;
.reg .u64 %r650;
.reg .f64 %r653;
.reg .pred %r654;
.reg .pred %r655;
.reg .pred %r656;
.reg .u32 %r657;
.reg .pred %r658;
.reg .u64 %r659;
.reg .u64 %r660;
.reg .u32 %r662;
.reg .pred %r663;
.reg .u32 %r664;
.reg .pred %r665;
.reg .pred %r666;
.reg .u32 %r667;
.reg .u32 %r669;
.reg .u32 %r670;
.reg .u32 %r672;
.reg .u32 %r673;
.reg .u16 %r674;
.reg .u16 %r675;
.reg .u16 %r676;
.reg .u32 %r677;
.reg .u16 %r678;
.reg .pred %r679;
.reg .u32 %r689;
.reg .u64 %r693;
.reg .pred %r694;
.reg .pred %r695;
.reg .u64 %r698;
.reg .u64 %r699;
.reg .u64 %r700;
.reg .pred %r701;
.reg .u16 %r702;
.reg .u16 %r703;
.reg .u32 %r714;
.reg .u64 %r718;
.reg .u32 %r719;
.reg .pred %r720;
.reg .u32 %r722;
.reg .u32 %r723;
.reg .u32 %r725;
.reg .u32 %r726;
.reg .u16 %r727;
.reg .u16 %r728;
.reg .u16 %r729;
.reg .u32 %r730;
.reg .u16 %r731;
.reg .pred %r732;
.reg .pred %r733;
.reg .pred %r734;
.reg .u32 %r735;
.reg .pred %r736;
.reg .u32 %r738;
.reg .u32 %r739;
.reg .pred %r742;
.reg .pred %r745;
.reg .pred %r749;
.reg .u64 %r755;
.reg .u64 %r757;
.reg .u64 %r758;
.reg .u64 %r759;
.reg .u64 %r761;
.reg .u64 %r763;
.reg .u32 %r764;
.reg .u32 %r765;
.reg .pred %r766;
.reg .pred %r767;
.reg .u32 %r768;
.reg .pred %r769;
.reg .pred %r770;
.reg .u32 %r771;
.reg .pred %r772;
.reg .pred %r773;
.reg .u32 %r774;
.reg .pred %r775;
.reg .pred %r776;
.reg .u32 %r777;
.reg .pred %r778;
.reg .u32 %r779;
.reg .pred %r780;
.reg .u64 %r781;
.reg .u32 %r782;
.reg .pred %r783;
.reg .u64 %r784;
.reg .u64 %r785;
.reg .u32 %r786;
.reg .pred %r787;
.reg .u64 %r788;
.reg .u64 %r789;
.reg .u32 %r790;
.reg .pred %r791;
.reg .u64 %r792;
.reg .u64 %r793;
.reg .u32 %r794;
.reg .pred %r795;
.reg .u32 %r796;
.reg .pred %r797;
.reg .u32 %r798;
.reg .pred %r799;
.reg .u16 %r800;
.reg .u32 %r801;
.reg .u32 %r802;
.reg .u32 %r803;
.reg .pred %r804;
.reg .pred %r805;
.reg .pred %r806;
.reg .u64 %r810;
.reg .pred %r811;
.reg .u64 %r813;
.reg .pred %r814;
.reg .u64 %r817;
.reg .u64 %r818;
.reg .u64 %r819;
.reg .pred %r820;
.reg .u16 %r821;
.reg .u16 %r822;
.reg .u64 %r824;
.reg .u32 %r825;
.reg .pred %r826;
.reg .u32 %r827;
.reg .u64 %r829;
.reg .u32 %r830;
.reg .u64 %r831;
.reg .u64 %r833;
.reg .u32 %r834;
.reg .pred %r835;
.reg .u64 %r839;
.reg .u64 %r840;
.reg .pred %r841;
.reg .u64 %r842;
.reg .u64 %r844;
.reg .u32 %r845;
.reg .u64 %r847;
.reg .u32 %r848;
.reg .pred %r849;
.reg .u32 %r850;
.reg .pred %r851;
.reg .u32 %r852;
.reg .pred %r853;
.reg .u16 %r854;
.reg .pred %r855;
.reg .u32 %r856;
.reg .pred %r857;
.reg .u32 %r858;
.reg .pred %r859;
.reg .u32 %r860;
.reg .pred %r861;
.reg .u16 %r862;
.reg .u32 %r863;
.reg .pred %r864;
.reg .pred %r865;
.reg .u32 %r866;
.reg .u32 %r867;
.reg .pred %r868;
.reg .u32 %r870;
.reg .u32 %r871;
.reg .u32 %r873;
.reg .u32 %r874;
.reg .u16 %r875;
.reg .u16 %r876;
.reg .u16 %r877;
.reg .u32 %r878;
.reg .u16 %r879;
.reg .pred %r880;
.reg .pred %r881;
.reg .pred %r882;
.reg .u32 %r883;
.reg .u32 %r884;
.reg .pred %r885;
.reg .u32 %r887;
.reg .u32 %r888;
.reg .u16 %r890;
.reg .u16 %r891;
.reg .u16 %r893;
.reg .u16 %r894;
.reg .u32 %r896;
.reg .u16 %r897;
.reg .pred %r898;
.reg .u64 %r900;
.reg .u64 %r902;
.reg .u32 %r903;
.reg .u64 %r905;
.reg .u64 %r907;
.reg .pred %r908;
.reg .u32 %r909;
.reg .u32 %r910;
.reg .u64 %r912;
.reg .u32 %r913;
.reg .u32 %r914;
.reg .pred %r917;
.reg .u64 %r919;
.reg .u64 %r921;
.reg .u64 %r922;
.reg .u64 %r923;
.reg .u64 %r924;
.reg .u32 %r925;
.reg .pred %r926;
.reg .u64 %r928;
.reg .u64 %r930;
.reg .pred %r931;
.reg .pred %r932;
.reg .u32 %r933;
.reg .pred %r934;
.reg .pred %r935;
.reg .u32 %r936;
.reg .pred %r937;
.reg .pred %r939;
.reg .pred %r940;
.reg .pred %r941;
.reg .u64 %r943;
.reg .pred %r944;
.reg .u32 %r949;
.reg .pred %r950;
.reg .pred %r951;
.reg .u64 %r953;
.reg .pred %r954;
.reg .u32 %r959;
.reg .pred %r960;
.reg .u32 %r961;
.reg .pred %r962;
.reg .u64 %r964;
.reg .u32 %r965;
.reg .pred %r966;
.reg .u32 %r971;
.reg .pred %r972;
.reg .u64 %r975;
.reg .u32 %r976;
.reg .pred %r977;
.reg .u32 %r982;
.reg .pred %r983;
.reg .pred %r984;
.reg .pred %r985;
.reg .pred %r986;
.reg .u64 %r988;
.reg .pred %r989;
.reg .u32 %r994;
.reg .pred %r995;
.reg .pred %r996;
.reg .u64 %r998;
.reg .pred %r999;
.reg .u32 %r1004;
.reg .pred %r1005;
.reg .pred %r1006;
.reg .pred %r1007;
.reg .u64 %r1009;
.reg .pred %r1010;
.reg .u32 %r1015;
.reg .pred %r1016;
.reg .pred %r1017;
.reg .u64 %r1019;
.reg .pred %r1020;
.reg .u32 %r1025;
.reg .pred %r1026;
.reg .u32 %r1027;
.reg .pred %r1028;
.reg .u64 %r1029;
.reg .u32 %r1030;
.reg .pred %r1031;
.reg .u32 %r1036;
.reg .pred %r1037;
.reg .pred %r1038;
.reg .pred %r1039;
.reg .u64 %r1040;
.reg .u64 %r1041;
.reg .u32 %r1042;
.reg .pred %r1043;
.reg .u32 %r1048;
.reg .pred %r1049;
.reg .u32 %r1050;
.reg .pred %r1051;
.reg .u32 %r1052;
.reg .pred %r1053;
.reg .u64 %r1055;
.reg .u32 %r1056;
.reg .pred %r1057;
.reg .u32 %r1062;
.reg .pred %r1063;
.reg .pred %r1064;
.reg .pred %r1065;
.reg .u64 %r1067;
.reg .pred %r1068;
.reg .u32 %r1073;
.reg .pred %r1074;
.reg .pred %r1075;
.reg .u64 %r1077;
.reg .pred %r1078;
.reg .u32 %r1083;
.reg .pred %r1084;
.reg .pred %r1085;
.reg .u64 %r1086;
.reg .u64 %r1087;
.reg .u32 %r1088;
.reg .pred %r1089;
.reg .u32 %r1094;
.reg .pred %r1095;
.reg .pred %r1096;
.reg .u32 %r1097;
.reg .u32 %r1098;
.reg .pred %r1099;
.reg .u64 %r1101;
.reg .u32 %r1102;
.reg .pred %r1103;
.reg .u32 %r1108;
.reg .pred %r1109;
.reg .pred %r1110;
.reg .pred %r1111;
.reg .u64 %r1113;
.reg .pred %r1114;
.reg .u32 %r1119;
.reg .pred %r1120;
.reg .pred %r1121;
.reg .u64 %r1123;
.reg .pred %r1124;
.reg .u32 %r1129;
.reg .pred %r1130;
.reg .u64 %r1131;
.reg .pred %r1132;
.reg .u32 %r1137;
.reg .pred %r1138;
.reg .pred %r1143;
.reg .u64 %r1144;
.reg .u32 %r1145;
.reg .pred %r1146;
.reg .u32 %r1151;
.reg .pred %r1152;
.reg .pred %r1153;
.reg .pred %r1154;
.reg .u64 %r1156;
.reg .pred %r1157;
.reg .u32 %r1162;
.reg .pred %r1163;
.reg .pred %r1164;
.reg .u64 %r1166;
.reg .pred %r1167;
.reg .u32 %r1172;
.reg .pred %r1173;
.reg .u64 %r1174;
.reg .pred %r1175;
.reg .u32 %r1176;
.reg .pred %r1177;
.reg .u64 %r1179;
.reg .u32 %r1180;
.reg .pred %r1181;
.reg .u32 %r1186;
.reg .pred %r1187;
.reg .u64 %r1188;
.reg .u64 %r1189;
.reg .u64 %r1190;
.reg .u64 %r1192;
.reg .pred %r1193;
.reg .u64 %r1194;
.reg .u64 %r1195;
.reg .u32 %r1196;
.reg .pred %r1197;
.reg .u32 %r1202;
.reg .pred %r1203;
.reg .u32 %r1204;
.reg .u32 %r1205;
.reg .pred %r1206;
.reg .pred %r1207;
.reg .u64 %r1209;
.reg .pred %r1210;
.reg .u32 %r1215;
.reg .pred %r1216;
.reg .pred %r1217;
.reg .u64 %r1219;
.reg .pred %r1220;
.reg .u32 %r1225;
.reg .pred %r1226;
.reg .u32 %r1227;
.reg .pred %r1228;
.reg .u32 %r1229;
.reg .pred %r1230;
.reg .u64 %r1231;
.reg .pred %r1232;
.reg .u32 %r1237;
.reg .pred %r1238;
.reg .u64 %r1240;
.reg .pred %r1241;
.reg .u32 %r1246;
.reg .pred %r1247;
.reg .u32 %r1248;
.reg .pred %r1249;
.reg .u64 %r1250;
.reg .u64 %r1251;
.reg .pred %r1252;
.reg .u32 %r1257;
.reg .pred %r1258;
.reg .u32 %r1259;
.reg .pred %r1260;
.reg .pred %r1261;
.reg .u64 %r1263;
.reg .pred %r1264;
.reg .u32 %r1269;
.reg .pred %r1270;
.reg .pred %r1271;
.reg .u64 %r1273;
.reg .pred %r1274;
.reg .u32 %r1279;
.reg .pred %r1280;
.reg .u32 %r1281;
.reg .u64 %r1282;
.reg .pred %r1283;
.reg .u32 %r1288;
.reg .pred %r1289;
.reg .u32 %r1290;
.reg .u64 %r1292;
.reg .pred %r1293;
.reg .u32 %r1298;
.reg .pred %r1299;
.reg .u32 %r1300;
.reg .pred %r1301;
.reg .pred %r1302;
.reg .pred %r1303;
.reg .u64 %r1305;
.reg .pred %r1306;
.reg .u32 %r1311;
.reg .pred %r1312;
.reg .pred %r1313;
.reg .u64 %r1315;
.reg .pred %r1316;
.reg .u32 %r1321;
.reg .pred %r1322;
.reg .u32 %r1323;
.reg .pred %r1324;
.reg .u32 %r1325;
.reg .pred %r1326;
.reg .u32 %r1331;
.reg .pred %r1332;
.reg .u64 %r1335;
.reg .pred %r1336;
.reg .u64 %r1340;
.reg .u32 %r1341;
.reg .pred %r1343;
.reg .u16 %r1346;
.reg .u16 %r1347;
.reg .pred %r1348;
.reg .u64 %r1351;
.reg .u32 %r1352;
.reg .pred %r1353;
.reg .u32 %r1356;
.reg .u32 %r1363;
.reg .u64 %r1367;
.reg .pred %r1368;
.reg .pred %r1369;
.reg .pred %r1370;
.reg .pred %r1371;
.reg .u32 %r1373;
.reg .u32 %r1374;
.reg .u32 %r1376;
.reg .u32 %r1377;
.reg .u16 %r1378;
.reg .u16 %r1379;
.reg .u16 %r1380;
.reg .u32 %r1381;
.reg .u16 %r1382;
.reg .pred %r1383;
.reg .u64 %r1384;
.reg .u64 %r1385;
.reg .pred %r1387;
.reg .pred %r1388;
.reg .u32 %r1394;
.reg .u32 %r1395;
.reg .u64 %r1396;
.reg .u64 %r1420;
.reg .u64 %r1421;
.reg .u32 %r1422;
.reg .u64 %r1423;
.reg .u64 %r1424;
.reg .u64 %r1425;
.reg .u64 %r1426;
.reg .u64 %r1427;
.reg .u64 %r1428;
.reg .u64 %r1429;
.reg .u64 %r1430;
.reg .u64 %r1431;
.reg .u64 %r1432;
mov.u64 %r461,%ar0;
mov.u64 %r462,%ar1;
mov.u64 %r463,%ar2;
mov.u64 %r464,%ar3;
.loc 1 424 6
mov.u32 %r469,0;
st.u32 [%frame+1288],%r469;
.loc 1 476 29
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r471,[%value_in];
}
.loc 1 476 28
ld.u64 %r472,[%r471];
.loc 1 476 18
ld.s8 %r473,[%r472];
st.u32 [%frame+1300],%r473;
.loc 1 591 2
setp.eq.u64 %r474,%r461,0;
@ %r474 bra $L25;
ld.u32 %r475,[%r461+80];
setp.ne.u32 %r476,%r475,0;
@ %r476 bra $L25;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
call __sinit,(%out_arg1);
}
$L25:
.loc 1 594 2
ld.s16 %r29,[%r462+16];
cvt.u16.u32 %r479,%r29;
and.b16 %r478,%r479,8192;
setp.ne.u16 %r480,%r478,0;
@ %r480 bra $L26;
.loc 1 592 2
ld.u32 %r27,[%r462+172];
.loc 1 594 2
or.b16 %r481,%r479,8192;
cvt.s32.s16 %r29,%r481;
st.u16 [%r462+16],%r481;
or.b32 %r484,%r27,8192;
st.u32 [%r462+172],%r484;
$L26:
.loc 1 597 5
cvt.u16.u32 %r486,%r29;
and.b16 %r485,%r486,8;
setp.eq.u16 %r487,%r485,0;
@ %r487 bra $L27;
.loc 1 597 6
ld.u64 %r488,[%r462+24];
setp.ne.u64 %r489,%r488,0;
@ %r489 bra $L28;
$L27:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
call (%value_in),__swsetup_r,(%out_arg1,%out_arg2);
ld.param.u32 %r492,[%value_in];
}
setp.eq.u32 %r493,%r492,0;
@ %r493 bra $L29;
$L270:
.loc 1 599 10
mov.u32 %r460,-1;
bra $L24;
$L29:
.loc 1 604 9
ld.s16 %r29,[%r462+16];
$L28:
.loc 1 604 5
cvt.u16.u32 %r495,%r29;
and.b16 %r494,%r495,26;
setp.ne.u16 %r496,%r494,10;
@ %r496 bra $L31;
.loc 1 604 60
ld.u16 %r497,[%r462+18];
setp.lt.s16 %r498,%r497,0;
@ %r498 bra $L31;
.loc 1 187 14
and.b16 %r499,%r495,-3;
st.u16 [%frame+1040],%r499;
.loc 1 188 15
ld.u32 %r501,[%r462+172];
st.u32 [%frame+1196],%r501;
.loc 1 189 13
st.u16 [%frame+1042],%r497;
.loc 1 190 15
ld.u64 %r503,[%r462+48];
st.u64 [%frame+1072],%r503;
.loc 1 191 14
ld.u64 %r504,[%r462+64];
st.u64 [%frame+1088],%r504;
.loc 1 194 27
st.u64 [%frame+1024],%frame;
.loc 1 194 17
st.u64 [%frame+1048],%frame;
.loc 1 195 27
mov.u32 %r505,1024;
st.u32 [%frame+1036],%r505;
.loc 1 195 17
st.u32 [%frame+1056],%r505;
.loc 1 196 16
mov.u32 %r507,0;
st.u32 [%frame+1064],%r507;
.loc 1 202 8
add.u64 %r512,%frame,1024;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r512;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r463;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r464;
call (%value_in),_vfwprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r513,[%value_in];
}
mov.u32 %r460,%r513;
.loc 1 203 5
setp.lt.s32 %r514,%r460,0;
@ %r514 bra $L32;
.loc 1 203 18
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r512;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r518,[%value_in];
}
.loc 1 203 15
setp.eq.u32 %r519,%r518,0;
.loc 1 204 7
selp.u32 %r460,%r460,-1,%r519;
$L32:
.loc 1 205 5
ld.u16 %r521,[%frame+1040];
and.b16 %r520,%r521,64;
setp.eq.u16 %r522,%r520,0;
@ %r522 bra $L24;
.loc 1 206 14
ld.u16 %r524,[%r462+16];
or.b16 %r523,%r524,64;
st.u16 [%r462+16],%r523;
.loc 1 607 11
bra $L24;
$L31:
.loc 1 626 14
add.u64 %r1385,%frame,1024;
st.u64 [%frame+1256],%r1385;
.loc 1 627 16
mov.u64 %r526,0;
st.u64 [%frame+1272],%r526;
.loc 1 628 17
cvt.u32.u64 %r527,%r526;
st.u32 [%frame+1264],%r527;
.loc 1 416 42
mov.f64 %r338,0d0000000000000000;
.loc 1 626 21
mov.u64 %r298,%r1385;
.loc 1 435 11
mov.u64 %r297,%r526;
.loc 1 419 6
cvt.u32.u64 %r43,%r297;
.loc 1 630 6
cvt.u32.u64 %r460,%r297;
.loc 1 647 4
add.u64 %r1420,%frame,1256;
.loc 1 656 9
mov.u64 %r1421,%r297;
cvt.u32.u64 %r1422,%r297;
.loc 1 1508 5
add.u64 %r1423,%frame,1228;
.loc 1 1500 6
add.u64 %r1424,%frame,1300;
.loc 1 1438 4
add.u64 %r1425,%frame,1280;
.loc 1 1436 4
add.u64 %r1426,%frame,1304;
.loc 1 1319 7
add.u64 %r1427,%frame,160;
add.u64 %r1428,%frame,1236;
.loc 1 1687 36
add.u64 %r1429,%frame,1235;
.loc 1 1042 9
add.u64 %r1430,%frame,1288;
add.u64 %r1431,%frame,1292;
add.u64 %r1432,%frame,1296;
$L34:
.loc 1 644 24
ld.u32 %r315,[%r463];
.loc 1 644 38
set.u32.ne.u32 %r529,%r315,37;
neg.s32 %r530,%r529;
set.u32.ne.u32 %r532,%r315,0;
neg.s32 %r533,%r532;
cvt.u16.u32 %r535,%r530;
cvt.u16.u32 %r536,%r533;
and.b16 %r534,%r535,%r536;
.loc 1 644 23
cvt.u32.u16 %r537,%r534;
cvt.u16.u8 %r538,%r537;
setp.eq.u16 %r539,%r538,0;
@ %r539 bra $L278;
mov.u64 %r336,%r463;
$L36:
mov.u64 %r251,%r336;
.loc 1 645 21
add.u64 %r336,%r336,4;
.loc 1 644 24
ld.u32 %r315,[%r336];
.loc 1 644 38
set.u32.ne.u32 %r541,%r315,0;
neg.s32 %r542,%r541;
set.u32.ne.u32 %r544,%r315,37;
neg.s32 %r545,%r544;
cvt.u16.u32 %r547,%r542;
cvt.u16.u32 %r548,%r545;
and.b16 %r546,%r547,%r548;
.loc 1 644 23
cvt.u32.u16 %r549,%r546;
cvt.u16.u8 %r550,%r549;
setp.ne.u16 %r551,%r550,0;
@ %r551 bra $L36;
.loc 1 646 16
sub.u64 %r552,%r336,%r463;
shr.s64 %r554,%r552,2;
.loc 1 646 10
cvt.u32.u64 %r316,%r554;
.loc 1 646 6
setp.eq.u32 %r555,%r316,0;
@ %r555 bra $L35;
.loc 1 647 4
st.u64 [%r298],%r463;
cvt.s64.s32 %r556,%r316;
shl.b64 %r41,%r556,2;
st.u64 [%r298+8],%r41;
ld.u64 %r558,[%frame+1272];
add.u64 %r557,%r558,%r41;
st.u64 [%frame+1272],%r557;
ld.u32 %r559,[%frame+1264];
add.u32 %r46,%r559,1;
st.u32 [%frame+1264],%r46;
setp.gt.s32 %r560,%r46,7;
@ %r560 bra $L37;
add.u64 %r298,%r298,16;
bra $L38;
$L37:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r565,[%value_in];
}
setp.ne.u32 %r566,%r565,0;
@ %r566 bra $L39;
mov.u64 %r298,%r1385;
$L38:
.loc 1 648 8
add.u32 %r460,%r460,%r316;
.loc 1 650 21
ld.u32 %r315,[%r251+4];
bra $L35;
$L278:
.loc 1 644 23
mov.u64 %r336,%r463;
$L35:
.loc 1 650 20
setp.eq.u32 %r567,%r315,0;
@ %r567 bra $L40;
.loc 1 653 6
add.u64 %r463,%r336,4;
.loc 1 659 8
mov.u32 %r568,0;
st.u32 [%frame+1304],%r568;
.loc 1 671 14
ld.u32 %r456,[%r336+4];
mov.u32 %r326,%r568;
mov.u32 %r327,%r568;
.loc 1 658 8
mov.u32 %r291,-1;
.loc 1 657 9
mov.u32 %r290,%r568;
.loc 1 655 9
mov.u32 %r288,%r568;
bra $L41;
$L279:
.loc 1 747 10
mov.u64 %r464,%r355;
$L41:
.loc 1 671 18
add.u64 %r463,%r463,4;
.loc 1 671 12
mov.u32 %r283,%r456;
$L42:
.loc 1 672 11
setp.eq.u32 %r569,%r283,99;
@ %r569 bra $L43;
setp.gt.u32 %r570,%r283,99;
@ %r570 bra $L44;
setp.eq.u32 %r571,%r283,46;
@ %r571 bra $L45;
setp.gt.u32 %r572,%r283,46;
@ %r572 bra $L46;
setp.eq.u32 %r573,%r283,42;
@ %r573 bra $L47;
setp.gt.u32 %r574,%r283,42;
@ %r574 bra $L48;
setp.eq.u32 %r575,%r283,32;
@ %r575 bra $L49;
setp.eq.u32 %r576,%r283,35;
@ %r576 bra $L50;
bra $L410;
$L48:
setp.eq.u32 %r577,%r283,43;
@ %r577 bra $L52;
setp.eq.u32 %r578,%r283,45;
@ %r578 bra $L53;
bra $L54;
$L46:
setp.eq.u32 %r579,%r283,71;
@ %r579 bra $L55;
setp.gt.u32 %r580,%r283,71;
@ %r580 bra $L56;
setp.gt.u32 %r581,%r283,57;
@ %r581 bra $L57;
setp.gt.u32 %r582,%r283,48;
@ %r582 bra $L58;
setp.eq.u32 %r583,%r283,48;
@ %r583 bra $L59;
mov.u32 %r283,47;
bra $L54;
$L57:
setp.eq.u32 %r584,%r283,69;
@ %r584 bra $L55;
bra $L54;
$L56:
setp.eq.u32 %r585,%r283,76;
@ %r585 bra $L60;
setp.eq.u32 %r586,%r283,88;
@ %r586 bra $L61;
bra $L54;
$L44:
setp.eq.u32 %r587,%r283,111;
@ %r587 bra $L62;
setp.gt.u32 %r588,%r283,111;
@ %r588 bra $L63;
setp.eq.u32 %r589,%r283,105;
@ %r589 bra $L64;
setp.gt.u32 %r590,%r283,105;
@ %r590 bra $L65;
setp.eq.u32 %r591,%r283,104;
@ %r591 bra $L66;
@ %r589 bra $L54;
setp.eq.u32 %r593,%r283,100;
@ %r593 bra $L64;
add.u32 %r594,%r283,-101;
setp.gt.u32 %r595,%r594,2;
@ %r595 bra $L54;
bra $L55;
$L65:
setp.eq.u32 %r596,%r283,108;
@ %r596 bra $L67;
setp.eq.u32 %r597,%r283,110;
@ %r597 bra $L68;
bra $L54;
$L63:
setp.eq.u32 %r598,%r283,115;
@ %r598 bra $L69;
setp.gt.u32 %r599,%r283,115;
@ %r599 bra $L70;
setp.eq.u32 %r600,%r283,112;
@ %r600 bra $L71;
setp.eq.u32 %r601,%r283,113;
@ %r601 bra $L72;
bra $L54;
$L70:
setp.eq.u32 %r602,%r283,117;
@ %r602 bra $L73;
setp.ne.u32 %r603,%r283,120;
@ %r603 bra $L54;
setp.eq.u32 %r604,%r326,0;
@ %r604 bra $L74;
st.u32 [%frame+1304],%r327;
$L74:
.loc 1 1291 10
cvta.const.u64 %r297,$LC4;
bra $L75;
$L53:
.loc 1 762 14
ld.u32 %r456,[%r463];
bra $L76;
$L49:
ld.u32 %r456,[%r463];
.loc 1 704 7
setp.ne.u32 %r605,%r327,0;
selp.u32 %r326,%r326,1,%r605;
selp.u32 %r327,%r327,32,%r605;
bra $L41;
$L50:
.loc 1 708 10
or.b32 %r288,%r288,1;
.loc 1 671 14
ld.u32 %r456,[%r463];
.loc 1 709 4
bra $L41;
$L47:
.loc 1 747 10
add.u64 %r355,%r464,4;
ld.u32 %r290,[%r464];
.loc 1 762 14
ld.u32 %r456,[%r463];
.loc 1 751 7
setp.ge.s32 %r606,%r290,0;
@ %r606 bra $L279;
.loc 1 753 10
neg.s32 %r290,%r290;
.loc 1 747 10
mov.u64 %r464,%r355;
$L76:
.loc 1 756 10
or.b32 %r288,%r288,4;
.loc 1 757 4
bra $L41;
$L52:
.loc 1 671 14
ld.u32 %r456,[%r463];
.loc 1 760 4
mov.u32 %r326,1;
.loc 1 759 9
mov.u32 %r327,%r283;
.loc 1 760 4
bra $L41;
$L45:
.loc 1 762 18
add.u64 %r344,%r463,4;
.loc 1 762 12
ld.u32 %r283,[%r463];
.loc 1 762 7
setp.eq.u32 %r607,%r283,42;
@ %r607 bra $L78;
.loc 1 801 11
add.u32 %r608,%r283,-48;
.loc 1 801 10
setp.le.u32 %r609,%r608,9;
@ %r609 bra $L79;
.loc 1 762 18
mov.u64 %r463,%r344;
.loc 1 801 10
mov.u32 %r291,%r568;
bra $L42;
$L78:
.loc 1 792 10
ld.u32 %r345,[%r464];
max.s32 %r291,%r345,-1;
.loc 1 671 14
ld.u32 %r456,[%r463+4];
.loc 1 792 10
add.u64 %r464,%r464,4;
.loc 1 762 18
mov.u64 %r463,%r344;
.loc 1 798 5
bra $L41;
$L79:
mov.u64 %r342,%r344;
.loc 1 800 6
mov.u32 %r334,%r568;
$L81:
.loc 1 802 12
shl.b32 %r611,%r334,2;
add.u32 %r612,%r611,%r334;
add.u32 %r613,%r612,%r612;
.loc 1 802 16
add.u32 %r614,%r613,-48;
add.u32 %r334,%r614,%r283;
mov.u64 %r281,%r342;
add.u64 %r463,%r342,4;
mov.u64 %r342,%r463;
.loc 1 803 8
ld.u32 %r283,[%r281];
.loc 1 801 11
add.u32 %r615,%r283,-48;
.loc 1 801 10
setp.le.u32 %r616,%r615,9;
@ %r616 bra $L81;
.loc 1 805 9
max.s32 %r291,%r334,-1;
.loc 1 806 4
bra $L42;
$L59:
.loc 1 813 10
or.b32 %r288,%r288,128;
.loc 1 671 14
ld.u32 %r456,[%r463];
.loc 1 814 4
bra $L41;
$L58:
mov.u64 %r329,%r463;
.loc 1 817 6
mov.u32 %r290,0;
$L83:
.loc 1 819 12
shl.b32 %r618,%r290,2;
add.u32 %r619,%r618,%r290;
add.u32 %r620,%r619,%r619;
.loc 1 819 16
add.u32 %r621,%r620,-48;
add.u32 %r290,%r621,%r283;
mov.u64 %r368,%r329;
add.u64 %r329,%r329,4;
mov.u64 %r463,%r329;
.loc 1 820 8
ld.u32 %r283,[%r368];
.loc 1 821 13
add.u32 %r622,%r283,-48;
.loc 1 821 4
setp.le.u32 %r623,%r622,9;
@ %r623 bra $L83;
bra $L42;
$L60:
.loc 1 837 10
or.b32 %r288,%r288,8;
.loc 1 671 14
ld.u32 %r456,[%r463];
.loc 1 838 4
bra $L41;
$L66:
.loc 1 847 11
or.b32 %r288,%r288,64;
.loc 1 671 14
ld.u32 %r456,[%r463];
.loc 1 848 4
bra $L41;
$L67:
.loc 1 851 8
ld.u32 %r456,[%r463];
.loc 1 851 7
setp.ne.u32 %r624,%r456,108;
@ %r624 bra $L84;
.loc 1 853 11
or.b32 %r288,%r288,32;
.loc 1 671 14
ld.u32 %r456,[%r463+4];
.loc 1 852 8
add.u64 %r463,%r463,4;
bra $L41;
$L84:
.loc 1 856 11
or.b32 %r288,%r288,16;
bra $L41;
$L72:
.loc 1 859 10
or.b32 %r288,%r288,32;
.loc 1 671 14
ld.u32 %r456,[%r463];
.loc 1 860 4
bra $L41;
$L43:
setp.eq.u32 %r625,%r326,0;
@ %r625 bra $L85;
st.u32 [%frame+1304],%r327;
$L85:
.loc 1 747 10
add.u64 %r414,%r464,4;
.loc 1 903 30
and.b32 %r626,%r288,16;
.loc 1 903 19
setp.ne.u32 %r627,%r626,0;
@ %r627 bra $L86;
.loc 1 904 17
ld.u32 %r628,[%r464];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r628;
call (%value_in),btowc,(%out_arg1);
ld.param.u32 %r629,[%value_in];
}
.loc 1 905 8
setp.ne.u32 %r630,%r629,-1;
@ %r630 bra $L87;
.loc 1 906 20
ld.u16 %r632,[%r462+16];
or.b16 %r631,%r632,64;
st.u16 [%r462+16],%r631;
.loc 1 907 9
bra $L39;
$L87:
.loc 1 909 11
st.u32 [%frame],%r629;
.loc 1 903 42
bra $L88;
$L86:
.loc 1 913 11
ld.u32 %r633,[%r464];
st.u32 [%frame],%r633;
$L88:
.loc 1 915 10
mov.u32 %r634,0;
st.u32 [%frame+4],%r634;
.loc 1 917 9
st.u32 [%frame+1304],%r634;
.loc 1 918 4
mov.u64 %r464,%r414;
mov.u32 %r404,1;
.loc 1 916 9
mov.u32 %r296,%r404;
.loc 1 902 7
mov.u64 %r287,%frame;
.loc 1 918 4
bra $L89;
$L64:
setp.eq.u32 %r636,%r326,0;
@ %r636 bra $L90;
st.u32 [%frame+1304],%r327;
$L90:
.loc 1 921 13
and.b32 %r637,%r288,32;
setp.eq.u32 %r638,%r637,0;
@ %r638 bra $L91;
add.u64 %r200,%r464,7;
and.b64 %r311,%r200,-8;
add.u64 %r464,%r311,8;
ld.u64 %r66,[%r311];
mov.u64 %r294,%r66;
bra $L92;
$L91:
and.b32 %r639,%r288,16;
setp.eq.u32 %r640,%r639,0;
@ %r640 bra $L93;
add.u64 %r401,%r464,7;
and.b64 %r384,%r401,-8;
add.u64 %r464,%r384,8;
ld.u64 %r66,[%r384];
mov.u64 %r294,%r66;
bra $L92;
$L93:
.loc 1 747 10
add.u64 %r413,%r464,4;
.loc 1 921 13
and.b32 %r641,%r288,64;
setp.eq.u32 %r642,%r641,0;
@ %r642 bra $L94;
ld.s16 %r294,[%r464];
.loc 1 923 8
mov.u64 %r66,%r294;
.loc 1 921 13
mov.u64 %r464,%r413;
bra $L92;
$L94:
ld.s32 %r294,[%r464];
.loc 1 923 8
mov.u64 %r66,%r294;
.loc 1 921 13
mov.u64 %r464,%r413;
$L92:
.loc 1 923 7
setp.ge.s64 %r647,%r66,0;
@ %r647 bra $L95;
.loc 1 929 12
neg.s64 %r294,%r294;
.loc 1 930 10
mov.u32 %r648,45;
st.u32 [%frame+1304],%r648;
mov.u32 %r416,%r648;
.loc 1 932 9
mov.u32 %r295,1;
bra $L96;
$L55:
setp.eq.u32 %r649,%r326,0;
@ %r649 bra $L97;
st.u32 [%frame+1304],%r327;
$L97:
.loc 1 921 13
add.u64 %r650,%r464,7;
and.b64 %r426,%r650,-8;
add.u64 %r464,%r426,8;
.loc 1 947 25
ld.f64 %r338,[%r426];
.loc 1 958 8
abs.f64 %r653,%r338;
setp.leu.f64 %r654,%r653,0d7fefffffffffffff;
@ %r654 bra $L100;
.loc 1 959 8
setp.lt.f64 %r655,%r338,0d0000000000000000;
@ %r655 bra $L101;
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
bra $L102;
$L100:
.loc 1 969 7
setp.nan.f64 %r656,%r338,%r338;
@ ! %r656 bra $L411;
bra $L103;
$L101:
.loc 1 960 11
mov.u32 %r657,45;
st.u32 [%frame+1304],%r657;
mov.u32 %r416,%r657;
$L102:
.loc 1 961 8
setp.le.u32 %r658,%r283,71;
@ %r658 bra $L280;
.loc 1 964 9
cvta.const.u64 %r287,$LC1;
bra $L105;
$L280:
.loc 1 962 9
cvta.const.u64 %r287,$LC0;
$L105:
.loc 1 966 11
and.b32 %r289,%r288,-129;
.loc 1 967 5
mov.u32 %r404,3;
mov.u64 %r301,%r1421;
.loc 1 965 10
mov.u32 %r296,%r404;
.loc 1 656 9
mov.u32 %r291,%r1422;
.loc 1 661 8
mov.u32 %r292,%r1422;
.loc 1 967 5
bra $L106;
$L103:
.loc 1 970 9
mov.b64 %r659,%r338;
shr.u64 %r660,%r659,63;
cvt.u32.u64 %r662,%r660;
.loc 1 970 8
setp.ne.u32 %r663,%r662,0;
@ %r663 bra $L107;
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
bra $L108;
$L107:
.loc 1 971 11
mov.u32 %r664,45;
st.u32 [%frame+1304],%r664;
mov.u32 %r416,%r664;
$L108:
.loc 1 972 8
setp.le.u32 %r665,%r283,71;
@ %r665 bra $L281;
.loc 1 975 9
cvta.const.u64 %r287,$LC3;
bra $L109;
$L281:
.loc 1 973 9
cvta.const.u64 %r287,$LC2;
$L109:
.loc 1 977 11
and.b32 %r289,%r288,-129;
.loc 1 978 5
mov.u32 %r404,3;
mov.u64 %r301,%r1421;
.loc 1 976 10
mov.u32 %r296,%r404;
.loc 1 656 9
mov.u32 %r291,%r1422;
.loc 1 661 8
mov.u32 %r292,%r1422;
.loc 1 978 5
bra $L106;
$L411:
.loc 1 1040 10
or.b32 %r289,%r288,256;
.loc 1 1034 7
setp.eq.u32 %r666,%r291,-1;
@ %r666 bra $L282;
.loc 1 1036 33
and.b32 %r667,%r283,-33;
set.u32.eq.u32 %r669,%r667,71;
neg.s32 %r670,%r669;
.loc 1 1036 42
set.u32.eq.u32 %r672,%r291,0;
neg.s32 %r673,%r672;
cvt.u16.u32 %r675,%r670;
cvt.u16.u32 %r676,%r673;
and.b16 %r674,%r675,%r676;
cvt.u32.u16 %r677,%r674;
cvt.u16.u8 %r678,%r677;
setp.ne.u16 %r679,%r678,0;
@ %r679 bra $L111;
bra $L110;
$L282:
.loc 1 1035 10
mov.u32 %r291,6;
$L110:
.loc 1 1042 9
mov.u32 %r689,40;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r338;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r291;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r289;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1432;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1431;
.param .u32 %out_arg7;
st.param.u32 [%out_arg7],%r283;
.param .u64 %out_arg8;
st.param.u64 [%out_arg8],%r1430;
.param .u64 %out_arg9;
st.param.u64 [%out_arg9],%frame;
.param .u32 %out_arg10;
st.param.u32 [%out_arg10],%r689;
call (%value_in),wcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7,%out_arg8,%out_arg9,%out_arg10);
ld.param.u64 %r693,[%value_in];
}
mov.u64 %r287,%r693;
.loc 1 1049 7
setp.ne.u64 %r694,%frame,%r287;
@ %r694 bra $L283;
.loc 1 1049 26
ld.u32 %r1395,[%frame+1288];
.loc 1 1049 18
setp.le.s32 %r695,%r1395,40;
@ %r695 bra $L284;
bra $L276;
$L299:
.loc 1 1037 10
mov.u32 %r291,%r1356;
$L276:
.loc 1 1051 20
cvt.s64.s32 %r698,%r1395;
shl.b64 %r699,%r698,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r699;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r700,[%value_in];
}
mov.u64 %r301,%r700;
.loc 1 1050 8
setp.ne.u64 %r701,%r700,0;
@ %r701 bra $L113;
.loc 1 1054 20
ld.u16 %r703,[%r462+16];
or.b16 %r702,%r703,64;
st.u16 [%r462+16],%r702;
bra $L39;
$L113:
.loc 1 1057 10
ld.u32 %r714,[%frame+1288];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r338;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r291;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r289;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1432;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1431;
.param .u32 %out_arg7;
st.param.u32 [%out_arg7],%r283;
.param .u64 %out_arg8;
st.param.u64 [%out_arg8],%r1430;
.param .u64 %out_arg9;
st.param.u64 [%out_arg9],%r301;
.param .u32 %out_arg10;
st.param.u32 [%out_arg10],%r714;
call (%value_in),wcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7,%out_arg8,%out_arg9,%out_arg10);
ld.param.u64 %r718,[%value_in];
}
mov.u64 %r287,%r718;
bra $L112;
$L283:
mov.u64 %r301,%r1421;
bra $L112;
$L284:
mov.u64 %r301,%r1421;
$L112:
.loc 1 1082 15
ld.u32 %r292,[%frame+1292];
.loc 1 1061 25
and.b32 %r719,%r283,-33;
.loc 1 1061 7
setp.ne.u32 %r720,%r719,71;
@ %r720 bra $L114;
ld.u32 %r1395,[%frame+1288];
$L272:
.loc 1 1090 21
mov.u32 %r429,%r1395;
.loc 1 1062 8
set.u32.lt.s32 %r722,%r292,-3;
neg.s32 %r723,%r722;
.loc 1 1062 20
set.u32.lt.s32 %r725,%r291,%r292;
neg.s32 %r726,%r725;
cvt.u16.u32 %r728,%r723;
cvt.u16.u32 %r729,%r726;
or.b16 %r727,%r728,%r729;
cvt.u32.u16 %r730,%r727;
cvt.u16.u8 %r731,%r730;
setp.eq.u16 %r732,%r731,0;
@ %r732 bra $L115;
.loc 1 1063 9
add.u32 %r283,%r283,-2;
bra $L116;
$L114:
.loc 1 1071 7
setp.eq.u32 %r733,%r283,102;
@ %r733 bra $L117;
.loc 1 1074 20
ld.u32 %r429,[%frame+1288];
$L116:
.loc 1 1072 5
add.u32 %r82,%r292,-1;
st.u32 [%frame+1292],%r82;
.loc 1 1674 7
st.u32 [%frame+1228],%r283;
.loc 1 1675 5
setp.ge.s32 %r734,%r82,0;
@ %r734 bra $L285;
.loc 1 1676 7
mov.u32 %r735,1;
sub.u32 %r82,%r735,%r292;
.loc 1 1677 8
mov.u32 %r331,45;
bra $L118;
$L285:
.loc 1 1680 8
mov.u32 %r331,43;
$L118:
st.u32 [%frame+1232],%r331;
.loc 1 1682 5
setp.le.s32 %r736,%r82,9;
@ %r736 bra $L119;
.loc 1 1681 4
mov.u64 %r379,%r1423;
$L120:
mov.u64 %r110,%r379;
.loc 1 1684 9
add.u64 %r379,%r110,-4;
.loc 1 1684 11
rem.s32 %r738,%r82,10;
add.u32 %r739,%r738,48;
.loc 1 1684 9
st.u32 [%r379],%r739;
mov.u32 %r356,%r82;
.loc 1 1685 17
div.s32 %r82,%r82,10;
.loc 1 1685 3
setp.gt.s32 %r742,%r356,99;
@ %r742 bra $L120;
.loc 1 1686 8
add.u64 %r325,%r110,-8;
.loc 1 1686 10
add.u32 %r430,%r82,48;
.loc 1 1686 8
st.u32 [%r379+-4],%r430;
.loc 1 1687 3
setp.ge.u64 %r745,%r325,%r1423;
@ %r745 bra $L286;
mov.u64 %r354,%r1428;
$L123:
.loc 1 1687 43
add.u64 %r325,%r325,4;
.loc 1 1687 39
st.u32 [%r354],%r430;
.loc 1 1687 3
add.u64 %r354,%r354,4;
setp.lt.u64 %r749,%r325,%r1423;
@ %r749 bra $L122;
.loc 1 1687 36
sub.u64 %r755,%r1429,%r110;
and.b64 %r757,%r755,-4;
add.u64 %r758,%r757,4;
add.u64 %r759,%r1428,%r758;
.loc 1 1694 12
sub.u64 %r761,%r759,%r1423;
shr.s64 %r763,%r761,2;
cvt.u32.u64 %r43,%r763;
bra $L121;
$L122:
.loc 1 1687 41
ld.u32 %r430,[%r325];
bra $L123;
$L119:
.loc 1 1691 9
mov.u32 %r764,48;
st.u32 [%frame+1236],%r764;
.loc 1 1692 10
add.u32 %r765,%r82,48;
.loc 1 1692 8
st.u32 [%frame+1240],%r765;
mov.u32 %r43,4;
bra $L121;
$L286:
.loc 1 1687 3
mov.u32 %r43,2;
$L121:
.loc 1 1074 10
add.u32 %r296,%r429,%r43;
.loc 1 1075 8
setp.gt.s32 %r766,%r429,1;
@ %r766 bra $L124;
and.b32 %r292,%r288,1;
.loc 1 1075 18
setp.ne.u32 %r767,%r292,0;
@ %r767 bra $L124;
.loc 1 1424 10
max.s32 %r404,%r296,0;
bra $L125;
$L124:
.loc 1 1076 6
add.u32 %r296,%r296,1;
.loc 1 1424 10
max.s32 %r404,%r296,0;
.loc 1 661 8
mov.u32 %r292,0;
bra $L125;
$L117:
and.b32 %r768,%r288,1;
or.b32 %r428,%r768,%r291;
.loc 1 1082 9
setp.le.s32 %r769,%r292,0;
@ %r769 bra $L126;
.loc 1 1084 16
setp.eq.u32 %r770,%r428,0;
@ %r770 bra $L287;
.loc 1 1085 21
add.u32 %r771,%r291,1;
.loc 1 1085 13
add.u32 %r296,%r771,%r292;
mov.u32 %r404,%r296;
bra $L125;
$L126:
.loc 1 1087 20
setp.eq.u32 %r772,%r428,0;
@ %r772 bra $L288;
.loc 1 1089 10
add.u32 %r296,%r291,2;
mov.u32 %r404,%r296;
bra $L125;
$L115:
.loc 1 1090 15
setp.gt.s32 %r773,%r1395,%r292;
@ %r773 bra $L128;
.loc 1 1092 9
and.b32 %r774,%r288,1;
setp.ne.u32 %r775,%r774,0;
@ %r775 bra $L129;
.loc 1 1424 10
max.s32 %r404,%r292,0;
mov.u32 %r296,%r292;
mov.u32 %r283,103;
bra $L125;
$L129:
.loc 1 1093 7
add.u32 %r296,%r292,1;
.loc 1 1424 10
max.s32 %r404,%r296,0;
mov.u32 %r283,103;
bra $L125;
$L128:
.loc 1 1096 9
setp.gt.s32 %r776,%r292,0;
@ %r776 bra $L289;
mov.u32 %r777,2;
sub.u32 %r303,%r777,%r292;
bra $L130;
$L289:
mov.u32 %r303,1;
$L130:
.loc 1 1095 11
add.u32 %r296,%r303,%r1395;
.loc 1 1424 10
max.s32 %r404,%r296,0;
mov.u32 %r283,103;
bra $L125;
$L287:
mov.u32 %r404,%r292;
mov.u32 %r296,%r292;
bra $L125;
$L288:
mov.u32 %r404,1;
.loc 1 1089 10
mov.u32 %r296,%r404;
$L125:
.loc 1 1117 8
ld.u32 %r291,[%frame+1296];
.loc 1 1117 7
setp.eq.u32 %r778,%r291,0;
@ %r778 bra $L131;
.loc 1 1118 10
mov.u32 %r779,45;
st.u32 [%frame+1304],%r779;
.loc 1 656 9
mov.u32 %r291,0;
bra $L132;
$L68:
setp.eq.u32 %r780,%r326,0;
@ %r780 bra $L133;
st.u32 [%frame+1304],%r327;
$L133:
.loc 1 921 13
add.u64 %r781,%r464,7;
and.b64 %r411,%r781,-8;
add.u64 %r464,%r411,8;
.loc 1 1132 14
and.b32 %r782,%r288,32;
.loc 1 1132 7
setp.eq.u32 %r783,%r782,0;
@ %r783 bra $L134;
.loc 1 1133 34
ld.u64 %r784,[%r411];
cvt.s64.s32 %r785,%r460;
st.u64 [%r784],%r785;
bra $L34;
$L134:
.loc 1 1136 14
and.b32 %r786,%r288,16;
.loc 1 1136 7
setp.eq.u32 %r787,%r786,0;
@ %r787 bra $L136;
.loc 1 1137 34
ld.u64 %r788,[%r411];
cvt.s64.s32 %r789,%r460;
st.u64 [%r788],%r789;
bra $L34;
$L136:
.loc 1 1138 19
and.b32 %r790,%r288,64;
.loc 1 1138 12
setp.eq.u32 %r791,%r790,0;
@ %r791 bra $L137;
.loc 1 1139 35
ld.u64 %r792,[%r411];
st.u16 [%r792],%r460;
bra $L34;
$L137:
.loc 1 1145 33
ld.u64 %r793,[%r411];
st.u32 [%r793],%r460;
bra $L34;
$L62:
.loc 1 1148 13
and.b32 %r794,%r288,32;
setp.eq.u32 %r795,%r794,0;
@ %r795 bra $L138;
add.u64 %r400,%r464,7;
and.b64 %r398,%r400,-8;
add.u64 %r464,%r398,8;
ld.u64 %r294,[%r398];
.loc 1 1149 9
mov.u32 %r295,0;
bra $L139;
$L138:
.loc 1 1148 13
and.b32 %r796,%r288,16;
setp.eq.u32 %r797,%r796,0;
@ %r797 bra $L140;
add.u64 %r339,%r464,7;
and.b64 %r391,%r339,-8;
add.u64 %r464,%r391,8;
ld.u64 %r294,[%r391];
.loc 1 1149 9
mov.u32 %r295,%r794;
bra $L139;
$L140:
.loc 1 747 10
ld.u32 %r409,[%r464];
add.u64 %r464,%r464,4;
.loc 1 1148 13
and.b32 %r798,%r288,64;
setp.eq.u32 %r799,%r798,0;
@ %r799 bra $L141;
cvt.u16.u32 %r800,%r409;
cvt.u64.u16 %r294,%r800;
.loc 1 1149 9
mov.u32 %r295,%r796;
bra $L139;
$L141:
.loc 1 1148 13
cvt.u64.u32 %r294,%r409;
.loc 1 1149 9
mov.u32 %r295,%r798;
bra $L139;
$L71:
.loc 1 1163 25
add.u64 %r393,%r464,7;
and.b64 %r390,%r393,-8;
add.u64 %r464,%r390,8;
.loc 1 1163 11
ld.u64 %r294,[%r390];
.loc 1 1166 10
or.b32 %r288,%r288,2;
.loc 1 1167 10
mov.u32 %r801,48;
st.u32 [%frame+1280],%r801;
.loc 1 1168 10
mov.u32 %r802,120;
st.u32 [%frame+1284],%r802;
.loc 1 1165 10
cvta.const.u64 %r297,$LC4;
.loc 1 1164 9
mov.u32 %r295,2;
.loc 1 1168 15
mov.u32 %r283,%r802;
.loc 1 1169 4
bra $L139;
$L69:
.loc 1 1174 7
add.u64 %r385,%r464,7;
and.b64 %r394,%r385,-8;
add.u64 %r464,%r394,8;
ld.u64 %r287,[%r394];
.loc 1 1178 9
mov.u32 %r803,0;
st.u32 [%frame+1304],%r803;
.loc 1 1184 7
setp.ne.u64 %r804,%r287,0;
@ %r804 bra $L142;
.loc 1 1186 39
min.u32 %r296,%r291,6;
mov.u32 %r404,%r296;
.loc 1 1185 8
cvta.const.u64 %r287,$LC6;
bra $L89;
$L142:
.loc 1 1242 30
and.b32 %r292,%r288,16;
.loc 1 1242 19
setp.ne.u32 %r805,%r292,0;
@ %r805 bra $L143;
.loc 1 1246 8
setp.eq.u32 %r806,%r291,-1;
@ %r806 bra $L144;
.loc 1 1247 16
cvt.s64.s32 %r302,%r291;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r287;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r292;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r302;
call (%value_in),memchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r810,[%value_in];
}
.loc 1 1248 27
setp.eq.u64 %r811,%r810,0;
@ %r811 bra $L145;
.loc 1 1248 21
sub.u64 %r302,%r810,%r287;
bra $L145;
$L144:
.loc 1 1250 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r287;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r813,[%value_in];
}
mov.u64 %r302,%r813;
$L145:
.loc 1 1251 8
setp.le.u64 %r814,%r302,39;
@ %r814 bra $L146;
.loc 1 1252 64
add.u64 %r817,%r302,1;
.loc 1 1252 39
shl.b64 %r818,%r817,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r818;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r819,[%value_in];
}
mov.u64 %r312,%r819;
.loc 1 1252 12
setp.ne.u64 %r820,%r819,0;
@ %r820 bra $L290;
.loc 1 1254 18
ld.u16 %r822,[%r462+16];
or.b16 %r821,%r822,64;
st.u16 [%r462+16],%r821;
bra $L39;
$L146:
.loc 1 1260 5
setp.eq.u64 %r1388,%r302,0;
@ %r1388 bra $L291;
mov.u64 %r301,%r1421;
.loc 1 1259 9
mov.u64 %r312,%frame;
bra $L147;
$L290:
mov.u64 %r301,%r312;
setp.eq.u64 %r1388,%r302,0;
$L147:
mov.u64 %r349,%r312;
mov.u64 %r350,0;
$L149:
.loc 1 1261 20
add.u64 %r824,%r287,%r350;
ld.s8 %r825,[%r824];
st.u32 [%r349],%r825;
.loc 1 1260 5
add.u64 %r350,%r350,1;
add.u64 %r349,%r349,4;
setp.gt.u64 %r826,%r302,%r350;
@ %r826 bra $L149;
.loc 1 1260 35
@ %r1388 bra $L150;
add.u64 %r829,%r302,-1;
cvt.u32.u64 %r830,%r829;
add.u32 %r827,%r830,1;
bra $L151;
$L150:
mov.u32 %r827,1;
$L151:
mov.u32 %r296,%r827;
.loc 1 1260 25
selp.u64 %r831,1,%r302,%r1388;
.loc 1 1262 7
shl.b64 %r833,%r831,2;
add.u64 %r408,%r312,%r833;
mov.u32 %r404,%r296;
mov.u64 %r287,%r312;
bra $L148;
$L291:
.loc 1 1260 5
mov.u32 %r404,%r292;
.loc 1 1260 15
mov.u32 %r296,%r292;
.loc 1 1260 5
mov.u64 %r408,%frame;
mov.u64 %r301,%r1421;
.loc 1 1259 9
mov.u64 %r287,%frame;
$L148:
.loc 1 1262 14
mov.u32 %r834,0;
st.u32 [%r408],%r834;
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
.loc 1 656 9
mov.u32 %r291,%r292;
.loc 1 1242 42
mov.u32 %r289,%r288;
bra $L106;
$L143:
.loc 1 1265 12
setp.eq.u32 %r835,%r291,-1;
@ %r835 bra $L154;
.loc 1 1271 18
cvt.s64.s32 %r839,%r291;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r287;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r803;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r839;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r840,[%value_in];
}
mov.u64 %r301,%r840;
.loc 1 1273 8
setp.ne.u64 %r841,%r301,0;
@ %r841 bra $L155;
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
mov.u32 %r404,%r291;
mov.u32 %r296,%r291;
mov.u32 %r289,%r288;
.loc 1 656 9
cvt.u32.u64 %r291,%r301;
.loc 1 661 8
cvt.u32.u64 %r292,%r301;
bra $L106;
$L155:
.loc 1 1274 15
sub.u64 %r842,%r301,%r287;
shr.s64 %r844,%r842,2;
cvt.u32.u64 %r845,%r844;
min.s32 %r296,%r291,%r845;
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
.loc 1 1424 10
max.s32 %r404,%r296,0;
mov.u32 %r289,%r288;
mov.u64 %r301,%r1421;
.loc 1 656 9
mov.u32 %r291,%r1422;
.loc 1 661 8
mov.u32 %r292,%r1422;
bra $L106;
$L154:
.loc 1 1280 12
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r287;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r847,[%value_in];
}
.loc 1 1280 10
cvt.u32.u64 %r296,%r847;
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
.loc 1 1424 10
max.s32 %r404,%r296,0;
mov.u32 %r289,%r288;
mov.u64 %r301,%r1421;
.loc 1 656 9
mov.u32 %r291,%r1422;
.loc 1 661 8
mov.u32 %r292,%r1422;
bra $L106;
$L73:
.loc 1 1284 13
and.b32 %r848,%r288,32;
setp.eq.u32 %r849,%r848,0;
@ %r849 bra $L156;
add.u64 %r403,%r464,7;
and.b64 %r395,%r403,-8;
add.u64 %r464,%r395,8;
ld.u64 %r294,[%r395];
.loc 1 1285 9
mov.u32 %r295,1;
bra $L139;
$L156:
.loc 1 1284 13
and.b32 %r850,%r288,16;
setp.eq.u32 %r851,%r850,0;
@ %r851 bra $L157;
add.u64 %r396,%r464,7;
and.b64 %r238,%r396,-8;
add.u64 %r464,%r238,8;
ld.u64 %r294,[%r238];
.loc 1 1285 9
mov.u32 %r295,1;
bra $L139;
$L157:
.loc 1 747 10
ld.u32 %r406,[%r464];
add.u64 %r464,%r464,4;
.loc 1 1284 13
and.b32 %r852,%r288,64;
setp.eq.u32 %r853,%r852,0;
@ %r853 bra $L158;
cvt.u16.u32 %r854,%r406;
cvt.u64.u16 %r294,%r854;
.loc 1 1285 9
mov.u32 %r295,1;
bra $L139;
$L158:
.loc 1 1284 13
cvt.u64.u32 %r294,%r406;
.loc 1 1285 9
mov.u32 %r295,1;
bra $L139;
$L61:
setp.eq.u32 %r855,%r326,0;
@ %r855 bra $L159;
st.u32 [%frame+1304],%r327;
$L159:
.loc 1 1288 10
cvta.const.u64 %r297,$LC5;
$L75:
.loc 1 1292 17
and.b32 %r856,%r288,32;
setp.eq.u32 %r857,%r856,0;
@ %r857 bra $L160;
add.u64 %r388,%r464,7;
and.b64 %r340,%r388,-8;
add.u64 %r464,%r340,8;
ld.u64 %r294,[%r340];
bra $L161;
$L160:
and.b32 %r858,%r288,16;
setp.eq.u32 %r859,%r858,0;
@ %r859 bra $L162;
add.u64 %r363,%r464,7;
and.b64 %r389,%r363,-8;
add.u64 %r464,%r389,8;
ld.u64 %r294,[%r389];
bra $L161;
$L162:
.loc 1 747 10
ld.u32 %r415,[%r464];
add.u64 %r464,%r464,4;
.loc 1 1292 17
and.b32 %r860,%r288,64;
setp.eq.u32 %r861,%r860,0;
@ %r861 bra $L163;
cvt.u16.u32 %r862,%r415;
cvt.u64.u16 %r294,%r862;
bra $L161;
$L163:
cvt.u64.u32 %r294,%r415;
$L161:
.loc 1 1295 14
and.b32 %r863,%r288,1;
.loc 1 1295 7
setp.eq.u32 %r864,%r863,0;
@ %r864 bra $L292;
.loc 1 1295 20
setp.eq.u64 %r865,%r294,0;
@ %r865 bra $L293;
.loc 1 1296 11
mov.u32 %r866,48;
st.u32 [%frame+1280],%r866;
.loc 1 1297 11
st.u32 [%frame+1284],%r283;
.loc 1 1298 11
or.b32 %r288,%r288,2;
.loc 1 1293 9
mov.u32 %r295,2;
bra $L139;
$L292:
mov.u32 %r295,2;
bra $L139;
$L293:
mov.u32 %r295,2;
$L139:
.loc 1 1305 16
mov.u32 %r867,0;
st.u32 [%frame+1304],%r867;
mov.u32 %r416,%r867;
$L96:
.loc 1 1311 14
setp.eq.u32 %r868,%r291,-1;
@ %r868 bra $L164;
.loc 1 1312 11
and.b32 %r289,%r288,-129;
.loc 1 1320 15
set.u32.ne.u64 %r870,%r294,0;
neg.s32 %r871,%r870;
.loc 1 1320 28
set.u32.ne.u32 %r873,%r291,0;
neg.s32 %r874,%r873;
.loc 1 1320 20
cvt.u16.u32 %r876,%r871;
cvt.u16.u32 %r877,%r874;
or.b16 %r875,%r876,%r877;
.loc 1 1320 7
cvt.u32.u16 %r878,%r875;
cvt.u16.u8 %r879,%r878;
setp.eq.u16 %r880,%r879,0;
@ %r880 bra $L165;
.loc 1 1312 11
mov.u32 %r288,%r289;
$L164:
setp.eq.u32 %r881,%r295,1;
@ %r881 bra $L166;
setp.eq.u32 %r882,%r295,2;
@ %r882 bra $L294;
mov.u64 %r287,%r1427;
$L168:
mov.u64 %r402,%r287;
.loc 1 1329 13
add.u64 %r287,%r287,-4;
.loc 1 1329 15
cvt.u32.u64 %r884,%r294;
and.b32 %r883,%r884,7;
add.u32 %r132,%r883,48;
.loc 1 1329 13
st.u32 [%r287],%r132;
.loc 1 1330 14
shr.u64 %r294,%r294,3;
.loc 1 1331 6
setp.ne.u64 %r885,%r294,0;
@ %r885 bra $L168;
.loc 1 1333 22
set.u32.ne.u32 %r887,%r132,48;
neg.s32 %r888,%r887;
.loc 1 1333 9
cvt.u16.u32 %r891,%r288;
and.b16 %r890,%r891,1;
.loc 1 1333 22
cvt.u16.u32 %r894,%r888;
and.b16 %r893,%r894,%r890;
cvt.u32.u16 %r896,%r893;
cvt.u16.u8 %r897,%r896;
setp.ne.u16 %r898,%r897,0;
@ %r898 bra $L169;
.loc 1 1395 21
sub.u64 %r900,%r1427,%r287;
shr.s64 %r902,%r900,2;
.loc 1 1395 9
cvt.u32.u64 %r296,%r902;
mov.u32 %r289,%r288;
bra $L170;
$L169:
.loc 1 1334 13
add.u64 %r335,%r402,-8;
mov.u32 %r903,48;
st.u32 [%r287+-4],%r903;
.loc 1 1395 21
sub.u64 %r905,%r1427,%r335;
shr.s64 %r907,%r905,2;
.loc 1 1395 9
cvt.u32.u64 %r296,%r907;
mov.u32 %r289,%r288;
.loc 1 1334 13
mov.u64 %r287,%r335;
bra $L170;
$L300:
.loc 1 1312 11
mov.u32 %r288,%r289;
$L166:
.loc 1 1339 9
setp.gt.u64 %r908,%r294,9;
@ %r908 bra $L295;
.loc 1 1340 15
cvt.u32.u64 %r910,%r294;
add.u32 %r909,%r910,48;
.loc 1 1340 13
st.u32 [%frame+156],%r909;
.loc 1 1341 7
mov.u32 %r289,%r288;
mov.u32 %r296,1;
.loc 1 1340 13
add.u64 %r287,%frame,156;
.loc 1 1341 7
bra $L170;
$L295:
.loc 1 1319 7
mov.u64 %r287,%r1427;
$L171:
.loc 1 1347 14
add.u64 %r287,%r287,-4;
.loc 1 1347 16
rem.u64 %r912,%r294,10;
cvt.u32.u64 %r914,%r912;
add.u32 %r913,%r914,48;
.loc 1 1347 14
st.u32 [%r287],%r913;
mov.u64 %r459,%r294;
.loc 1 1366 15
div.u64 %r294,%r294,10;
.loc 1 1367 6
setp.gt.u64 %r917,%r459,9;
@ %r917 bra $L171;
.loc 1 1395 21
sub.u64 %r919,%r1427,%r287;
shr.s64 %r921,%r919,2;
.loc 1 1395 9
cvt.u32.u64 %r296,%r921;
mov.u32 %r289,%r288;
bra $L170;
$L294:
mov.u64 %r287,%r1427;
$L167:
.loc 1 1372 13
add.u64 %r287,%r287,-4;
.loc 1 1372 28
and.b64 %r922,%r294,15;
.loc 1 1372 20
shl.b64 %r923,%r922,2;
add.u64 %r924,%r297,%r923;
.loc 1 1372 13
ld.u32 %r925,[%r924];
st.u32 [%r287],%r925;
.loc 1 1373 14
shr.u64 %r294,%r294,4;
.loc 1 1374 6
setp.ne.u64 %r926,%r294,0;
@ %r926 bra $L167;
.loc 1 1395 21
sub.u64 %r928,%r1427,%r287;
shr.s64 %r930,%r928,2;
.loc 1 1395 9
cvt.u32.u64 %r296,%r930;
mov.u32 %r289,%r288;
bra $L170;
$L165:
.loc 1 1392 32
setp.ne.u32 %r931,%r295,0;
@ %r931 bra $L296;
.loc 1 1392 55
and.b32 %r296,%r288,1;
.loc 1 1392 45
setp.eq.u32 %r932,%r296,0;
@ %r932 bra $L297;
.loc 1 1393 32
mov.u32 %r933,48;
st.u32 [%frame+156],%r933;
mov.u32 %r291,%r295;
add.u64 %r287,%frame,156;
bra $L170;
$L296:
mov.u32 %r291,0;
mov.u32 %r296,%r291;
.loc 1 1319 7
add.u64 %r287,%frame,160;
bra $L170;
$L297:
mov.u32 %r291,%r295;
add.u64 %r287,%frame,160;
$L170:
.loc 1 1424 10
max.s32 %r404,%r291,%r296;
mov.u64 %r301,%r1421;
.loc 1 661 8
mov.u32 %r292,%r1422;
bra $L106;
$L410:
setp.eq.u32 %r934,%r326,0;
@ %r934 bra $L172;
$L274:
st.u32 [%frame+1304],%r327;
$L172:
.loc 1 1399 7
setp.eq.u32 %r935,%r283,0;
@ %r935 bra $L40;
$L275:
.loc 1 1403 8
st.u32 [%frame],%r283;
.loc 1 1405 9
mov.u32 %r936,0;
st.u32 [%frame+1304],%r936;
.loc 1 1406 4
mov.u32 %r404,1;
.loc 1 1404 9
mov.u32 %r296,%r404;
.loc 1 1402 7
mov.u64 %r287,%frame;
.loc 1 1406 4
bra $L89;
$L131:
.loc 1 1425 7
ld.u32 %r416,[%frame+1304];
$L106:
.loc 1 1425 6
setp.eq.u32 %r937,%r416,0;
@ %r937 bra $L173;
$L132:
.loc 1 1426 10
add.u32 %r404,%r404,1;
$L173:
.loc 1 1427 13
and.b32 %r145,%r289,2;
.loc 1 1427 6
setp.eq.u32 %r1387,%r145,0;
@ %r1387 bra $L174;
.loc 1 1428 10
add.u32 %r404,%r404,2;
$L174:
.loc 1 1431 14
and.b32 %r146,%r289,132;
.loc 1 1436 4
ld.u64 %r434,[%frame+1272];
.loc 1 1431 6
setp.ne.u32 %r939,%r146,0;
@ %r939 bra $L175;
.loc 1 1432 4
sub.u32 %r348,%r290,%r404;
setp.le.s32 %r940,%r348,0;
@ %r940 bra $L175;
ld.u32 %r433,[%frame+1264];
setp.le.s32 %r941,%r348,16;
@ ! %r941 bra $L412;
cvta.const.u64 %r1396,blanks$1;
bra $L176;
$L412:
cvta.const.u64 %r1396,blanks$1;
$L180:
st.u64 [%r298],%r1396;
mov.u64 %r943,64;
st.u64 [%r298+8],%r943;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r433,%r433,1;
st.u32 [%frame+1264],%r433;
setp.gt.s32 %r944,%r433,7;
@ %r944 bra $L177;
add.u64 %r298,%r298,16;
bra $L178;
$L177:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r949,[%value_in];
}
setp.ne.u32 %r950,%r949,0;
@ %r950 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r433,[%frame+1264];
mov.u64 %r298,%r1385;
$L178:
add.u32 %r348,%r348,-16;
setp.gt.s32 %r951,%r348,16;
@ %r951 bra $L180;
$L176:
st.u64 [%r298],%r1396;
cvt.s64.s32 %r953,%r348;
shl.b64 %r149,%r953,2;
st.u64 [%r298+8],%r149;
add.u64 %r434,%r434,%r149;
st.u64 [%frame+1272],%r434;
add.u32 %r151,%r433,1;
st.u32 [%frame+1264],%r151;
setp.gt.s32 %r954,%r151,7;
@ %r954 bra $L181;
add.u64 %r298,%r298,16;
bra $L175;
$L181:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r959,[%value_in];
}
setp.ne.u32 %r960,%r959,0;
@ %r960 bra $L179;
.loc 1 1436 4
ld.u64 %r434,[%frame+1272];
.loc 1 1432 4
mov.u64 %r298,%r1385;
$L175:
.loc 1 1435 6
ld.u32 %r961,[%frame+1304];
setp.eq.u32 %r962,%r961,0;
@ %r962 bra $L182;
.loc 1 1436 4
st.u64 [%r298],%r1426;
mov.u64 %r964,4;
st.u64 [%r298+8],%r964;
add.u64 %r434,%r434,4;
st.u64 [%frame+1272],%r434;
ld.u32 %r965,[%frame+1264];
add.u32 %r156,%r965,1;
st.u32 [%frame+1264],%r156;
setp.gt.s32 %r966,%r156,7;
@ %r966 bra $L183;
add.u64 %r298,%r298,16;
bra $L182;
$L183:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r971,[%value_in];
}
setp.ne.u32 %r972,%r971,0;
@ %r972 bra $L179;
.loc 1 1438 4
ld.u64 %r434,[%frame+1272];
.loc 1 1436 4
mov.u64 %r298,%r1385;
$L182:
.loc 1 1437 6
@ %r1387 bra $L184;
.loc 1 1438 4
st.u64 [%r298],%r1425;
mov.u64 %r975,8;
st.u64 [%r298+8],%r975;
add.u64 %r434,%r434,8;
st.u64 [%frame+1272],%r434;
ld.u32 %r976,[%frame+1264];
add.u32 %r159,%r976,1;
st.u32 [%frame+1264],%r159;
setp.gt.s32 %r977,%r159,7;
@ %r977 bra $L185;
add.u64 %r298,%r298,16;
bra $L184;
$L185:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r982,[%value_in];
}
setp.ne.u32 %r983,%r982,0;
@ %r983 bra $L179;
.loc 1 1450 4
ld.u64 %r434,[%frame+1272];
.loc 1 1438 4
mov.u64 %r298,%r1385;
$L184:
.loc 1 1441 6
setp.ne.u32 %r984,%r146,128;
@ %r984 bra $L186;
.loc 1 1442 4
sub.u32 %r222,%r290,%r404;
setp.le.s32 %r985,%r222,0;
@ %r985 bra $L186;
ld.u32 %r435,[%frame+1264];
setp.le.s32 %r986,%r222,16;
@ ! %r986 bra $L413;
cvta.const.u64 %r1384,zeroes$0;
bra $L187;
$L413:
cvta.const.u64 %r1384,zeroes$0;
$L190:
st.u64 [%r298],%r1384;
mov.u64 %r988,64;
st.u64 [%r298+8],%r988;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r435,%r435,1;
st.u32 [%frame+1264],%r435;
setp.gt.s32 %r989,%r435,7;
@ %r989 bra $L188;
add.u64 %r298,%r298,16;
bra $L189;
$L188:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r994,[%value_in];
}
setp.ne.u32 %r995,%r994,0;
@ %r995 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r435,[%frame+1264];
mov.u64 %r298,%r1385;
$L189:
add.u32 %r222,%r222,-16;
setp.gt.s32 %r996,%r222,16;
@ %r996 bra $L190;
$L187:
st.u64 [%r298],%r1384;
cvt.s64.s32 %r998,%r222;
shl.b64 %r164,%r998,2;
st.u64 [%r298+8],%r164;
add.u64 %r434,%r434,%r164;
st.u64 [%frame+1272],%r434;
add.u32 %r165,%r435,1;
st.u32 [%frame+1264],%r165;
setp.gt.s32 %r999,%r165,7;
@ %r999 bra $L191;
add.u64 %r298,%r298,16;
bra $L186;
$L191:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1004,[%value_in];
}
setp.ne.u32 %r1005,%r1004,0;
@ %r1005 bra $L179;
.loc 1 1450 4
ld.u64 %r434,[%frame+1272];
.loc 1 1442 4
mov.u64 %r298,%r1385;
$L186:
.loc 1 1445 3
sub.u32 %r74,%r291,%r296;
setp.le.s32 %r1006,%r74,0;
@ %r1006 bra $L192;
ld.u32 %r436,[%frame+1264];
setp.le.s32 %r1007,%r74,16;
@ ! %r1007 bra $L414;
cvta.const.u64 %r1384,zeroes$0;
bra $L193;
$L414:
cvta.const.u64 %r1384,zeroes$0;
$L196:
st.u64 [%r298],%r1384;
mov.u64 %r1009,64;
st.u64 [%r298+8],%r1009;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r436,%r436,1;
st.u32 [%frame+1264],%r436;
setp.gt.s32 %r1010,%r436,7;
@ %r1010 bra $L194;
add.u64 %r298,%r298,16;
bra $L195;
$L194:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1015,[%value_in];
}
setp.ne.u32 %r1016,%r1015,0;
@ %r1016 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r436,[%frame+1264];
mov.u64 %r298,%r1385;
$L195:
add.u32 %r74,%r74,-16;
setp.gt.s32 %r1017,%r74,16;
@ %r1017 bra $L196;
$L193:
st.u64 [%r298],%r1384;
cvt.s64.s32 %r1019,%r74;
shl.b64 %r169,%r1019,2;
st.u64 [%r298+8],%r169;
add.u64 %r434,%r434,%r169;
st.u64 [%frame+1272],%r434;
add.u32 %r170,%r436,1;
st.u32 [%frame+1264],%r170;
setp.gt.s32 %r1020,%r170,7;
@ %r1020 bra $L197;
add.u64 %r298,%r298,16;
bra $L192;
$L197:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1025,[%value_in];
}
setp.ne.u32 %r1026,%r1025,0;
@ %r1026 bra $L179;
.loc 1 1450 4
ld.u64 %r434,[%frame+1272];
.loc 1 1445 3
mov.u64 %r298,%r1385;
$L192:
.loc 1 1449 14
and.b32 %r1027,%r289,256;
.loc 1 1449 6
setp.ne.u32 %r1028,%r1027,0;
@ %r1028 bra $L198;
.loc 1 1450 4
st.u64 [%r298],%r287;
cvt.s64.s32 %r1029,%r296;
shl.b64 %r174,%r1029,2;
st.u64 [%r298+8],%r174;
add.u64 %r434,%r434,%r174;
st.u64 [%frame+1272],%r434;
ld.u32 %r1030,[%frame+1264];
add.u32 %r176,%r1030,1;
st.u32 [%frame+1264],%r176;
setp.gt.s32 %r1031,%r176,7;
@ %r1031 bra $L199;
add.u64 %r298,%r298,16;
bra $L200;
$L199:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1036,[%value_in];
}
setp.ne.u32 %r1037,%r1036,0;
@ %r1037 bra $L179;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1450 4
mov.u64 %r298,%r1385;
bra $L200;
$L198:
.loc 1 1452 7
setp.le.u32 %r1038,%r283,101;
@ %r1038 bra $L201;
.loc 1 1453 8
setp.neu.f64 %r1039,%r338,0d0000000000000000;
@ %r1039 bra $L202;
.loc 1 1455 6
cvta.const.u64 %r1040,$LC7;
st.u64 [%r298],%r1040;
mov.u64 %r1041,4;
st.u64 [%r298+8],%r1041;
add.u64 %r434,%r434,4;
st.u64 [%frame+1272],%r434;
ld.u32 %r1042,[%frame+1264];
add.u32 %r180,%r1042,1;
st.u32 [%frame+1264],%r180;
setp.gt.s32 %r1043,%r180,7;
@ %r1043 bra $L203;
add.u64 %r298,%r298,16;
bra $L204;
$L203:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1048,[%value_in];
}
setp.ne.u32 %r1049,%r1048,0;
@ %r1049 bra $L179;
.loc 1 1457 7
ld.u64 %r434,[%frame+1272];
.loc 1 1455 6
mov.u64 %r298,%r1385;
$L204:
.loc 1 1456 15
ld.u32 %r183,[%frame+1288];
.loc 1 1456 9
ld.u32 %r1050,[%frame+1292];
setp.lt.s32 %r1051,%r1050,%r183;
@ %r1051 bra $L205;
.loc 1 1456 31
and.b32 %r1052,%r289,1;
.loc 1 1456 22
setp.eq.u32 %r1053,%r1052,0;
@ %r1053 bra $L200;
$L205:
.loc 1 1457 7
st.u64 [%r298],%r1424;
mov.u64 %r1055,4;
st.u64 [%r298+8],%r1055;
add.u64 %r434,%r434,4;
st.u64 [%frame+1272],%r434;
ld.u32 %r1056,[%frame+1264];
add.u32 %r186,%r1056,1;
st.u32 [%frame+1264],%r186;
setp.gt.s32 %r1057,%r186,7;
@ %r1057 bra $L206;
add.u64 %r298,%r298,16;
bra $L207;
$L206:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1062,[%value_in];
}
setp.ne.u32 %r1063,%r1062,0;
@ %r1063 bra $L179;
.loc 1 1458 7
ld.u32 %r183,[%frame+1288];
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1457 7
mov.u64 %r298,%r1385;
$L207:
.loc 1 1458 7
add.u32 %r343,%r183,-1;
setp.le.s32 %r1064,%r343,0;
@ %r1064 bra $L200;
ld.u32 %r454,[%frame+1264];
setp.le.s32 %r1065,%r343,16;
@ ! %r1065 bra $L415;
cvta.const.u64 %r1384,zeroes$0;
bra $L208;
$L415:
cvta.const.u64 %r1384,zeroes$0;
$L211:
st.u64 [%r298],%r1384;
mov.u64 %r1067,64;
st.u64 [%r298+8],%r1067;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r454,%r454,1;
st.u32 [%frame+1264],%r454;
setp.gt.s32 %r1068,%r454,7;
@ %r1068 bra $L209;
add.u64 %r298,%r298,16;
bra $L210;
$L209:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1073,[%value_in];
}
setp.ne.u32 %r1074,%r1073,0;
@ %r1074 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r454,[%frame+1264];
mov.u64 %r298,%r1385;
$L210:
add.u32 %r343,%r343,-16;
setp.gt.s32 %r1075,%r343,16;
@ %r1075 bra $L211;
$L208:
st.u64 [%r298],%r1384;
cvt.s64.s32 %r1077,%r343;
shl.b64 %r190,%r1077,2;
st.u64 [%r298+8],%r190;
add.u64 %r434,%r434,%r190;
st.u64 [%frame+1272],%r434;
add.u32 %r191,%r454,1;
st.u32 [%frame+1264],%r191;
setp.gt.s32 %r1078,%r191,7;
@ %r1078 bra $L212;
add.u64 %r298,%r298,16;
bra $L200;
$L212:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1083,[%value_in];
}
setp.ne.u32 %r1084,%r1083,0;
@ %r1084 bra $L179;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1458 7
mov.u64 %r298,%r1385;
bra $L200;
$L202:
.loc 1 1460 21
ld.u32 %r193,[%frame+1292];
.loc 1 1460 15
setp.gt.s32 %r1085,%r193,0;
@ %r1085 bra $L213;
.loc 1 1461 6
cvta.const.u64 %r1086,$LC7;
st.u64 [%r298],%r1086;
mov.u64 %r1087,4;
st.u64 [%r298+8],%r1087;
add.u64 %r434,%r434,4;
st.u64 [%frame+1272],%r434;
ld.u32 %r1088,[%frame+1264];
add.u32 %r195,%r1088,1;
st.u32 [%frame+1264],%r195;
setp.gt.s32 %r1089,%r195,7;
@ %r1089 bra $L214;
add.u64 %r298,%r298,16;
bra $L215;
$L214:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1094,[%value_in];
}
setp.ne.u32 %r1095,%r1094,0;
@ %r1095 bra $L179;
.loc 1 1462 10
ld.u32 %r193,[%frame+1292];
.loc 1 1463 7
ld.u64 %r434,[%frame+1272];
.loc 1 1461 6
mov.u64 %r298,%r1385;
$L215:
.loc 1 1462 9
setp.ne.u32 %r1096,%r193,0;
@ %r1096 bra $L216;
.loc 1 1462 15
ld.u32 %r453,[%frame+1288];
.loc 1 1462 32
and.b32 %r1097,%r289,1;
.loc 1 1462 23
or.b32 %r1098,%r1097,%r453;
setp.ne.u32 %r1099,%r1098,0;
@ %r1099 bra $L217;
bra $L200;
$L216:
.loc 1 1463 7
st.u64 [%r298],%r1424;
mov.u64 %r1101,4;
st.u64 [%r298+8],%r1101;
add.u64 %r451,%r434,4;
st.u64 [%frame+1272],%r451;
ld.u32 %r1102,[%frame+1264];
add.u32 %r452,%r1102,1;
st.u32 [%frame+1264],%r452;
setp.gt.s32 %r1103,%r452,7;
@ %r1103 bra $L218;
add.u64 %r299,%r298,16;
bra $L219;
$L218:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1108,[%value_in];
}
setp.ne.u32 %r1109,%r1108,0;
@ %r1109 bra $L179;
.loc 1 1464 7
ld.u32 %r193,[%frame+1292];
.loc 1 1465 7
ld.u64 %r451,[%frame+1272];
ld.u32 %r452,[%frame+1264];
.loc 1 1463 7
mov.u64 %r299,%r1385;
$L219:
.loc 1 1464 7
setp.lt.s32 %r1110,%r193,0;
@ %r1110 bra $L220;
.loc 1 1465 7
ld.u32 %r453,[%frame+1288];
bra $L221;
$L220:
.loc 1 1464 7
neg.s32 %r282,%r193;
setp.ge.s32 %r1111,%r193,-16;
@ ! %r1111 bra $L416;
cvta.const.u64 %r1384,zeroes$0;
bra $L222;
$L416:
cvta.const.u64 %r1384,zeroes$0;
$L225:
st.u64 [%r299],%r1384;
mov.u64 %r1113,64;
st.u64 [%r299+8],%r1113;
add.u64 %r451,%r451,64;
st.u64 [%frame+1272],%r451;
add.u32 %r452,%r452,1;
st.u32 [%frame+1264],%r452;
setp.gt.s32 %r1114,%r452,7;
@ %r1114 bra $L223;
add.u64 %r299,%r299,16;
bra $L224;
$L223:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1119,[%value_in];
}
setp.ne.u32 %r1120,%r1119,0;
@ %r1120 bra $L179;
ld.u64 %r451,[%frame+1272];
ld.u32 %r452,[%frame+1264];
mov.u64 %r299,%r1385;
$L224:
add.u32 %r282,%r282,-16;
setp.gt.s32 %r1121,%r282,16;
@ %r1121 bra $L225;
$L222:
st.u64 [%r299],%r1384;
cvt.s64.s32 %r1123,%r282;
shl.b64 %r203,%r1123,2;
st.u64 [%r299+8],%r203;
add.u64 %r451,%r451,%r203;
st.u64 [%frame+1272],%r451;
add.u32 %r452,%r452,1;
st.u32 [%frame+1264],%r452;
setp.gt.s32 %r1124,%r452,7;
@ %r1124 bra $L226;
add.u64 %r299,%r299,16;
.loc 1 1465 7
ld.u32 %r453,[%frame+1288];
bra $L221;
$L226:
.loc 1 1464 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1129,[%value_in];
}
setp.ne.u32 %r1130,%r1129,0;
@ %r1130 bra $L179;
.loc 1 1465 7
ld.u32 %r453,[%frame+1288];
ld.u64 %r451,[%frame+1272];
ld.u32 %r452,[%frame+1264];
.loc 1 1464 7
mov.u64 %r299,%r1385;
$L221:
.loc 1 1465 7
st.u64 [%r299],%r287;
cvt.s64.s32 %r1131,%r453;
shl.b64 %r206,%r1131,2;
st.u64 [%r299+8],%r206;
add.u64 %r434,%r206,%r451;
st.u64 [%frame+1272],%r434;
add.u32 %r207,%r452,1;
st.u32 [%frame+1264],%r207;
setp.gt.s32 %r1132,%r207,7;
@ %r1132 bra $L227;
add.u64 %r298,%r299,16;
bra $L200;
$L227:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1137,[%value_in];
}
setp.ne.u32 %r1138,%r1137,0;
@ %r1138 bra $L179;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1465 7
mov.u64 %r298,%r1385;
bra $L200;
$L213:
.loc 1 1469 6
ld.u32 %r353,[%frame+1288];
min.s32 %r30,%r353,%r292;
setp.le.s32 %r1143,%r30,0;
@ %r1143 bra $L228;
st.u64 [%r298],%r287;
cvt.s64.s32 %r1144,%r30;
shl.b64 %r214,%r1144,2;
st.u64 [%r298+8],%r214;
add.u64 %r434,%r434,%r214;
st.u64 [%frame+1272],%r434;
ld.u32 %r1145,[%frame+1264];
add.u32 %r216,%r1145,1;
st.u32 [%frame+1264],%r216;
setp.gt.s32 %r1146,%r216,7;
@ %r1146 bra $L229;
add.u64 %r298,%r298,16;
bra $L228;
$L229:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1151,[%value_in];
}
setp.ne.u32 %r1152,%r1151,0;
@ %r1152 bra $L179;
.loc 1 1491 10
ld.u64 %r434,[%frame+1272];
.loc 1 1469 6
mov.u64 %r298,%r1385;
$L228:
max.s32 %r218,%r30,0;
sub.u32 %r152,%r292,%r218;
setp.le.s32 %r1153,%r152,0;
@ %r1153 bra $L230;
ld.u32 %r447,[%frame+1264];
setp.le.s32 %r1154,%r152,16;
@ ! %r1154 bra $L417;
cvta.const.u64 %r1384,zeroes$0;
bra $L231;
$L417:
cvta.const.u64 %r1384,zeroes$0;
$L234:
st.u64 [%r298],%r1384;
mov.u64 %r1156,64;
st.u64 [%r298+8],%r1156;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r447,%r447,1;
st.u32 [%frame+1264],%r447;
setp.gt.s32 %r1157,%r447,7;
@ %r1157 bra $L232;
add.u64 %r298,%r298,16;
bra $L233;
$L232:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1162,[%value_in];
}
setp.ne.u32 %r1163,%r1162,0;
@ %r1163 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r447,[%frame+1264];
mov.u64 %r298,%r1385;
$L233:
add.u32 %r152,%r152,-16;
setp.gt.s32 %r1164,%r152,16;
@ %r1164 bra $L234;
$L231:
st.u64 [%r298],%r1384;
cvt.s64.s32 %r1166,%r152;
shl.b64 %r221,%r1166,2;
st.u64 [%r298+8],%r221;
add.u64 %r434,%r434,%r221;
st.u64 [%frame+1272],%r434;
add.u32 %r223,%r447,1;
st.u32 [%frame+1264],%r223;
setp.gt.s32 %r1167,%r223,7;
@ %r1167 bra $L235;
add.u64 %r298,%r298,16;
bra $L230;
$L235:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1172,[%value_in];
}
setp.ne.u32 %r1173,%r1172,0;
@ %r1173 bra $L179;
.loc 1 1491 10
ld.u64 %r434,[%frame+1272];
.loc 1 1469 6
mov.u64 %r298,%r1385;
$L230:
.loc 1 1471 9
cvt.s64.s32 %r1174,%r292;
shl.b64 %r226,%r1174,2;
.loc 1 1490 15
ld.u32 %r227,[%frame+1292];
ld.u32 %r228,[%frame+1288];
.loc 1 1490 9
setp.lt.s32 %r1175,%r227,%r228;
@ %r1175 bra $L236;
.loc 1 1490 31
and.b32 %r1176,%r289,1;
.loc 1 1490 22
setp.eq.u32 %r1177,%r1176,0;
@ %r1177 bra $L237;
$L236:
.loc 1 1491 10
st.u64 [%r298],%r1424;
mov.u64 %r1179,4;
st.u64 [%r298+8],%r1179;
add.u64 %r434,%r434,4;
st.u64 [%frame+1272],%r434;
ld.u32 %r1180,[%frame+1264];
add.u32 %r231,%r1180,1;
st.u32 [%frame+1264],%r231;
setp.gt.s32 %r1181,%r231,7;
@ %r1181 bra $L238;
add.u64 %r298,%r298,16;
bra $L237;
$L238:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1186,[%value_in];
}
setp.ne.u32 %r1187,%r1186,0;
@ %r1187 bra $L179;
.loc 1 1492 6
ld.u32 %r228,[%frame+1288];
ld.u32 %r227,[%frame+1292];
ld.u64 %r434,[%frame+1272];
.loc 1 1491 10
mov.u64 %r298,%r1385;
$L237:
.loc 1 1492 6
cvt.s64.s32 %r1188,%r228;
shl.b64 %r1189,%r1188,2;
sub.u64 %r1190,%r1189,%r226;
shr.s64 %r1192,%r1190,2;
cvt.u32.u64 %r358,%r1192;
sub.u32 %r237,%r228,%r227;
min.s32 %r28,%r237,%r358;
setp.le.s32 %r1193,%r28,0;
@ %r1193 bra $L239;
.loc 1 1471 9
add.u64 %r1194,%r287,%r226;
.loc 1 1492 6
st.u64 [%r298],%r1194;
cvt.s64.s32 %r1195,%r28;
shl.b64 %r241,%r1195,2;
st.u64 [%r298+8],%r241;
add.u64 %r434,%r434,%r241;
st.u64 [%frame+1272],%r434;
ld.u32 %r1196,[%frame+1264];
add.u32 %r244,%r1196,1;
st.u32 [%frame+1264],%r244;
setp.gt.s32 %r1197,%r244,7;
@ %r1197 bra $L240;
add.u64 %r298,%r298,16;
bra $L239;
$L240:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1202,[%value_in];
}
setp.ne.u32 %r1203,%r1202,0;
@ %r1203 bra $L179;
ld.u32 %r1204,[%frame+1288];
ld.u32 %r1205,[%frame+1292];
sub.u32 %r237,%r1204,%r1205;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1492 6
mov.u64 %r298,%r1385;
$L239:
max.s32 %r246,%r28,0;
sub.u32 %r320,%r237,%r246;
setp.le.s32 %r1206,%r320,0;
@ %r1206 bra $L200;
ld.u32 %r450,[%frame+1264];
setp.le.s32 %r1207,%r320,16;
@ ! %r1207 bra $L418;
cvta.const.u64 %r1384,zeroes$0;
bra $L241;
$L418:
cvta.const.u64 %r1384,zeroes$0;
$L244:
st.u64 [%r298],%r1384;
mov.u64 %r1209,64;
st.u64 [%r298+8],%r1209;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r450,%r450,1;
st.u32 [%frame+1264],%r450;
setp.gt.s32 %r1210,%r450,7;
@ %r1210 bra $L242;
add.u64 %r298,%r298,16;
bra $L243;
$L242:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1215,[%value_in];
}
setp.ne.u32 %r1216,%r1215,0;
@ %r1216 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r450,[%frame+1264];
mov.u64 %r298,%r1385;
$L243:
add.u32 %r320,%r320,-16;
setp.gt.s32 %r1217,%r320,16;
@ %r1217 bra $L244;
$L241:
st.u64 [%r298],%r1384;
cvt.s64.s32 %r1219,%r320;
shl.b64 %r249,%r1219,2;
st.u64 [%r298+8],%r249;
add.u64 %r434,%r434,%r249;
st.u64 [%frame+1272],%r434;
add.u32 %r250,%r450,1;
st.u32 [%frame+1264],%r250;
setp.gt.s32 %r1220,%r250,7;
@ %r1220 bra $L245;
add.u64 %r298,%r298,16;
bra $L200;
$L245:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1225,[%value_in];
}
setp.ne.u32 %r1226,%r1225,0;
@ %r1226 bra $L179;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1492 6
mov.u64 %r298,%r1385;
bra $L200;
$L201:
.loc 1 1455 6
add.u64 %r440,%r434,4;
.loc 1 1450 4
ld.u32 %r458,[%frame+1264];
add.u32 %r437,%r458,1;
add.u64 %r300,%r298,16;
.loc 1 1497 8
ld.u32 %r1227,[%frame+1288];
setp.gt.s32 %r1228,%r1227,1;
@ %r1228 bra $L246;
.loc 1 1497 27
and.b32 %r1229,%r289,1;
.loc 1 1497 18
setp.eq.u32 %r1230,%r1229,0;
@ %r1230 bra $L247;
$L246:
.loc 1 1498 6
st.u64 [%r298],%r287;
mov.u64 %r1231,4;
st.u64 [%r298+8],%r1231;
st.u64 [%frame+1272],%r440;
st.u32 [%frame+1264],%r437;
setp.le.s32 %r1232,%r437,7;
@ %r1232 bra $L248;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1237,[%value_in];
}
setp.ne.u32 %r1238,%r1237,0;
@ %r1238 bra $L179;
.loc 1 1500 6
ld.u64 %r440,[%frame+1272];
ld.u32 %r437,[%frame+1264];
.loc 1 1498 6
mov.u64 %r300,%r1385;
$L248:
.loc 1 1500 6
st.u64 [%r300],%r1424;
mov.u64 %r1240,4;
st.u64 [%r300+8],%r1240;
add.u64 %r440,%r440,4;
st.u64 [%frame+1272],%r440;
add.u32 %r441,%r437,1;
st.u32 [%frame+1264],%r441;
setp.gt.s32 %r1241,%r441,7;
@ %r1241 bra $L249;
add.u64 %r300,%r300,16;
bra $L250;
$L249:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1246,[%value_in];
}
setp.ne.u32 %r1247,%r1246,0;
@ %r1247 bra $L179;
.loc 1 1502 7
ld.u64 %r440,[%frame+1272];
ld.u32 %r441,[%frame+1264];
.loc 1 1500 6
mov.u64 %r300,%r1385;
$L250:
.loc 1 1502 7
add.u32 %r438,%r441,1;
mov.u32 %r1394,%r438;
ld.u32 %r1248,[%frame+1288];
add.u32 %r259,%r1248,-1;
add.u64 %r298,%r300,16;
.loc 1 1501 9
setp.eq.f64 %r1249,%r338,0d0000000000000000;
@ %r1249 bra $L251;
.loc 1 1499 8
add.u64 %r1250,%r287,4;
.loc 1 1502 7
st.u64 [%r300],%r1250;
cvt.s64.s32 %r1251,%r259;
shl.b64 %r258,%r1251,2;
st.u64 [%r300+8],%r258;
add.u64 %r440,%r440,%r258;
st.u64 [%frame+1272],%r440;
st.u32 [%frame+1264],%r438;
setp.gt.s32 %r1252,%r438,7;
@ %r1252 bra $L252;
.loc 1 1508 5
add.u32 %r438,%r441,2;
add.u64 %r446,%r300,32;
.loc 1 1502 7
mov.u64 %r300,%r298;
.loc 1 1508 5
mov.u64 %r298,%r446;
bra $L253;
$L252:
.loc 1 1502 7
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1257,[%value_in];
}
setp.ne.u32 %r1258,%r1257,0;
@ %r1258 bra $L179;
.loc 1 1508 5
ld.u64 %r440,[%frame+1272];
ld.u32 %r1259,[%frame+1264];
add.u32 %r438,%r1259,1;
add.u64 %r298,%frame,1040;
.loc 1 1502 7
mov.u64 %r300,%r1385;
bra $L253;
$L251:
.loc 1 1505 7
setp.le.s32 %r1260,%r259,0;
@ %r1260 bra $L253;
setp.le.s32 %r1261,%r259,16;
@ %r1261 bra $L298;
cvta.const.u64 %r1384,zeroes$0;
$L257:
st.u64 [%r300],%r1384;
mov.u64 %r1263,64;
st.u64 [%r300+8],%r1263;
add.u64 %r440,%r440,64;
st.u64 [%frame+1272],%r440;
mov.u32 %r441,%r1394;
st.u32 [%frame+1264],%r441;
setp.gt.s32 %r1264,%r441,7;
@ %r1264 bra $L255;
add.u64 %r300,%r300,16;
bra $L256;
$L255:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1269,[%value_in];
}
setp.ne.u32 %r1270,%r1269,0;
@ %r1270 bra $L179;
ld.u64 %r440,[%frame+1272];
ld.u32 %r441,[%frame+1264];
mov.u64 %r300,%r1385;
$L256:
add.u32 %r259,%r259,-16;
setp.gt.s32 %r1271,%r259,16;
@ ! %r1271 bra $L419;
add.u32 %r1394,%r441,1;
bra $L257;
$L419:
add.u32 %r438,%r441,1;
add.u64 %r442,%r300,16;
bra $L254;
$L298:
mov.u64 %r442,%r298;
cvta.const.u64 %r1384,zeroes$0;
$L254:
st.u64 [%r300],%r1384;
cvt.s64.s32 %r1273,%r259;
shl.b64 %r263,%r1273,2;
st.u64 [%r300+8],%r263;
add.u64 %r440,%r440,%r263;
st.u64 [%frame+1272],%r440;
st.u32 [%frame+1264],%r438;
setp.gt.s32 %r1274,%r438,7;
@ %r1274 bra $L258;
.loc 1 1508 5
add.u32 %r438,%r438,1;
add.u64 %r298,%r442,16;
.loc 1 1505 7
mov.u64 %r300,%r442;
bra $L253;
$L258:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1279,[%value_in];
}
setp.ne.u32 %r1280,%r1279,0;
@ %r1280 bra $L179;
.loc 1 1508 5
ld.u64 %r440,[%frame+1272];
ld.u32 %r1281,[%frame+1264];
add.u32 %r438,%r1281,1;
add.u64 %r298,%frame,1040;
.loc 1 1505 7
mov.u64 %r300,%r1385;
bra $L253;
$L247:
.loc 1 1507 6
st.u64 [%r298],%r287;
mov.u64 %r1282,4;
st.u64 [%r298+8],%r1282;
st.u64 [%frame+1272],%r440;
st.u32 [%frame+1264],%r437;
setp.gt.s32 %r1283,%r437,7;
@ %r1283 bra $L259;
.loc 1 1508 5
add.u32 %r438,%r458,2;
add.u64 %r298,%r298,32;
bra $L253;
$L259:
.loc 1 1507 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1288,[%value_in];
}
setp.ne.u32 %r1289,%r1288,0;
@ %r1289 bra $L179;
.loc 1 1508 5
ld.u64 %r440,[%frame+1272];
ld.u32 %r1290,[%frame+1264];
add.u32 %r438,%r1290,1;
add.u64 %r298,%frame,1040;
.loc 1 1507 6
mov.u64 %r300,%r1385;
$L253:
.loc 1 1508 5
st.u64 [%r300],%r1423;
cvt.s64.s32 %r1292,%r43;
shl.b64 %r268,%r1292,2;
st.u64 [%r300+8],%r268;
add.u64 %r434,%r268,%r440;
st.u64 [%frame+1272],%r434;
st.u32 [%frame+1264],%r438;
setp.le.s32 %r1293,%r438,7;
@ %r1293 bra $L200;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1298,[%value_in];
}
setp.ne.u32 %r1299,%r1298,0;
@ %r1299 bra $L179;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
.loc 1 1508 5
mov.u64 %r298,%r1385;
$L200:
.loc 1 1515 13
and.b32 %r1300,%r289,4;
.loc 1 1515 6
setp.eq.u32 %r1301,%r1300,0;
@ %r1301 bra $L260;
.loc 1 1516 4
sub.u32 %r160,%r290,%r404;
setp.le.s32 %r1302,%r160,0;
@ %r1302 bra $L260;
ld.u32 %r455,[%frame+1264];
setp.le.s32 %r1303,%r160,16;
@ ! %r1303 bra $L420;
cvta.const.u64 %r1396,blanks$1;
bra $L261;
$L420:
cvta.const.u64 %r1396,blanks$1;
$L264:
st.u64 [%r298],%r1396;
mov.u64 %r1305,64;
st.u64 [%r298+8],%r1305;
add.u64 %r434,%r434,64;
st.u64 [%frame+1272],%r434;
add.u32 %r455,%r455,1;
st.u32 [%frame+1264],%r455;
setp.gt.s32 %r1306,%r455,7;
@ %r1306 bra $L262;
add.u64 %r298,%r298,16;
bra $L263;
$L262:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1311,[%value_in];
}
setp.ne.u32 %r1312,%r1311,0;
@ %r1312 bra $L179;
ld.u64 %r434,[%frame+1272];
ld.u32 %r455,[%frame+1264];
mov.u64 %r298,%r1385;
$L263:
add.u32 %r160,%r160,-16;
setp.gt.s32 %r1313,%r160,16;
@ %r1313 bra $L264;
$L261:
st.u64 [%r298],%r1396;
cvt.s64.s32 %r1315,%r160;
shl.b64 %r273,%r1315,2;
st.u64 [%r298+8],%r273;
add.u64 %r434,%r434,%r273;
st.u64 [%frame+1272],%r434;
add.u32 %r274,%r455,1;
st.u32 [%frame+1264],%r274;
setp.le.s32 %r1316,%r274,7;
@ %r1316 bra $L260;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1321,[%value_in];
}
setp.ne.u32 %r1322,%r1321,0;
@ %r1322 bra $L179;
.loc 1 1521 3
ld.u64 %r434,[%frame+1272];
$L260:
.loc 1 1519 33
max.s32 %r1323,%r290,%r404;
.loc 1 1519 7
add.u32 %r460,%r460,%r1323;
.loc 1 1521 3
setp.ne.u64 %r1324,%r434,0;
@ %r1324 bra $L265;
$L267:
mov.u32 %r1325,0;
st.u32 [%frame+1264],%r1325;
.loc 1 1523 20
setp.ne.u64 %r1326,%r301,0;
@ %r1326 bra $L266;
.loc 1 1521 3
mov.u64 %r298,%r1385;
bra $L34;
$L265:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1420;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1331,[%value_in];
}
setp.ne.u32 %r1332,%r1331,0;
@ ! %r1332 bra $L267;
bra $L179;
$L266:
.loc 1 1524 4
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r301;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 1521 3
mov.u64 %r298,%r1385;
bra $L34;
$L40:
.loc 1 1529 2
ld.u64 %r1335,[%frame+1272];
setp.ne.u64 %r1336,%r1335,0;
@ ! %r1336 bra $L39;
add.u64 %r1340,%frame,1256;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r462;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1340;
call (%value_in),__sprint_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1341,[%value_in];
}
bra $L39;
$L179:
.loc 1 1531 5
setp.eq.u64 %r1343,%r301,0;
@ %r1343 bra $L39;
.loc 1 1532 3
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r301;
call _free_r,(%out_arg1,%out_arg2);
}
$L39:
.loc 1 1536 31
ld.u16 %r1347,[%r462+16];
and.b16 %r1346,%r1347,64;
setp.ne.u16 %r1348,%r1346,0;
@ ! %r1348 bra $L24;
bra $L270;
$L217:
.loc 1 1463 7
st.u64 [%r298],%r1424;
mov.u64 %r1351,4;
st.u64 [%r298+8],%r1351;
add.u64 %r451,%r434,4;
st.u64 [%frame+1272],%r451;
ld.u32 %r1352,[%frame+1264];
add.u32 %r452,%r1352,1;
st.u32 [%frame+1264],%r452;
setp.gt.s32 %r1353,%r452,7;
@ %r1353 bra $L218;
add.u64 %r299,%r298,16;
bra $L221;
$L89:
.loc 1 656 9
mov.u32 %r289,%r288;
mov.u64 %r301,%r1421;
mov.u32 %r291,%r1422;
mov.u32 %r292,%r1422;
bra $L173;
$L111:
.loc 1 1042 9
mov.u32 %r1363,40;
mov.u32 %r1356,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r461;
.param .f64 %out_arg2;
st.param.f64 [%out_arg2],%r338;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r1356;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r289;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r1432;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%r1431;
.param .u32 %out_arg7;
st.param.u32 [%out_arg7],%r283;
.param .u64 %out_arg8;
st.param.u64 [%out_arg8],%r1430;
.param .u64 %out_arg9;
st.param.u64 [%out_arg9],%frame;
.param .u32 %out_arg10;
st.param.u32 [%out_arg10],%r1363;
call (%value_in),wcvt,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7,%out_arg8,%out_arg9,%out_arg10);
ld.param.u64 %r1367,[%value_in];
}
mov.u64 %r287,%r1367;
.loc 1 1049 7
setp.eq.u64 %r1368,%frame,%r287;
@ %r1368 bra $L271;
.loc 1 1062 14
ld.u32 %r292,[%frame+1292];
mov.u64 %r301,%r1421;
.loc 1 1037 10
mov.u32 %r291,%r1356;
ld.u32 %r1395,[%frame+1288];
bra $L272;
$L95:
.loc 1 704 8
ld.u32 %r416,[%frame+1304];
.loc 1 1311 14
setp.ne.u32 %r1369,%r291,-1;
@ %r1369 bra $L273;
bra $L166;
$L54:
setp.ne.u32 %r1370,%r326,0;
@ ! %r1370 bra $L275;
bra $L274;
$L421:
.loc 1 1082 15
ld.u32 %r292,[%frame+1292];
mov.u64 %r301,%r1421;
.loc 1 1037 10
mov.u32 %r291,%r1356;
bra $L272;
$L271:
.loc 1 1049 26
ld.u32 %r1395,[%frame+1288];
.loc 1 1049 18
setp.gt.s32 %r1371,%r1395,40;
@ %r1371 bra $L299;
bra $L421;
$L273:
.loc 1 1312 11
and.b32 %r289,%r288,-129;
.loc 1 1320 28
set.u32.ne.u32 %r1373,%r291,0;
neg.s32 %r1374,%r1373;
.loc 1 1320 15
set.u32.ne.u64 %r1376,%r294,0;
neg.s32 %r1377,%r1376;
.loc 1 1320 20
cvt.u16.u32 %r1379,%r1374;
cvt.u16.u32 %r1380,%r1377;
or.b16 %r1378,%r1379,%r1380;
.loc 1 1320 7
cvt.u32.u16 %r1381,%r1378;
cvt.u16.u8 %r1382,%r1381;
setp.ne.u16 %r1383,%r1382,0;
@ %r1383 bra $L300;
mov.u32 %r291,0;
mov.u32 %r296,%r291;
.loc 1 1319 7
add.u64 %r287,%frame,160;
bra $L170;
$L24:
.loc 1 1538 1
mov.u32 %value,%r460;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfwprintf
.visible .func (.param .u32 %value_out) vfwprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 373 12
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfwprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 375 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

/1880           1612277263  0     0     100666  66895     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: __svfwscanf_r
.visible .func (.param .u32 %value_out) __svfwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vfwscanf.c"
// BEGIN GLOBAL FUNCTION DECL: vfwscanf
.visible .func (.param .u32 %value_out) vfwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: __svfwscanf
.visible .func (.param .u32 %value_out) __svfwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _vfwscanf_r
.visible .func (.param .u32 %value_out) _vfwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _localeconv_r
.extern .func (.param .u64 %value_out) _localeconv_r (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: iswspace
.extern .func (.param .u32 %value_out) iswspace (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _fgetwc_r
.extern .func (.param .u32 %value_out) _fgetwc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _wcstol_r
.extern .func (.param .u64 %value_out) _wcstol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _ungetwc_r
.extern .func (.param .u32 %value_out) _ungetwc_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstoul_r
.extern .func (.param .u64 %value_out) _wcstoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: memset
.extern .func (.param .u64 %value_out) memset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcrtomb_r
.extern .func (.param .u64 %value_out) _wcrtomb_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.extern .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcrtomb
.extern .func (.param .u64 %value_out) wcrtomb (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstoull_r
.extern .func (.param .u64 %value_out) _wcstoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstoll_r
.extern .func (.param .u64 %value_out) _wcstoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: swprintf
.extern .func (.param .u32 %value_out) swprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: _wcstod_r
.extern .func (.param .f64 %value_out) _wcstod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: nanf
.extern .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 4 .u32 $LC0[5] =
{101,37,108,100,0 };
// BEGIN VAR DEF: $LC1
.const .align 1 .u8 $LC1[1] =
{0 };
// BEGIN VAR DEF: basefix$0
.const .align 2 .u16 basefix$0[17] =
{10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
// BEGIN GLOBAL FUNCTION DEF: __svfwscanf_r
.visible .func (.param .u32 %value_out) __svfwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[1424];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u64 %r29;
.reg .u32 %r31;
.reg .u64 %r33;
.reg .u32 %r39;
.reg .u64 %r52;
.reg .u32 %r54;
.reg .u64 %r55;
.reg .u32 %r58;
.reg .u64 %r63;
.reg .u64 %r71;
.reg .u32 %r78;
.reg .u32 %r81;
.reg .u32 %r96;
.reg .u64 %r105;
.reg .u32 %r139;
.reg .u32 %r168;
.reg .u32 %r169;
.reg .u64 %r170;
.reg .u64 %r171;
.reg .u64 %r175;
.reg .u64 %r176;
.reg .u32 %r177;
.reg .u32 %r178;
.reg .u32 %r179;
.reg .u32 %r181;
.reg .u64 %r182;
.reg .u64 %r183;
.reg .u64 %r184;
.reg .u64 %r186;
.reg .u64 %r187;
.reg .u64 %r188;
.reg .u64 %r189;
.reg .u64 %r190;
.reg .u64 %r191;
.reg .u64 %r192;
.reg .u64 %r194;
.reg .u64 %r195;
.reg .u32 %r197;
.reg .u32 %r198;
.reg .u32 %r199;
.reg .u32 %r200;
.reg .u64 %r202;
.reg .u32 %r204;
.reg .u64 %r207;
.reg .u64 %r211;
.reg .u32 %r213;
.reg .u64 %r219;
.reg .u32 %r221;
.reg .u32 %r222;
.reg .u64 %r224;
.reg .u64 %r229;
.reg .u32 %r233;
.reg .u64 %r235;
.reg .u64 %r239;
.reg .u32 %r240;
.reg .u64 %r248;
.reg .u64 %r256;
.reg .u64 %r259;
.reg .u32 %r265;
.reg .u64 %r271;
.reg .u32 %r272;
.reg .u32 %r274;
.reg .u64 %r278;
.reg .u64 %r281;
.reg .u64 %r284;
.reg .u32 %r288;
.reg .u32 %r291;
.reg .u64 %r292;
.reg .u64 %r293;
.reg .u64 %r294;
.reg .u64 %r295;
.reg .u64 %r296;
.reg .u64 %r298;
.reg .u64 %r299;
.reg .u64 %r300;
.reg .u64 %r301;
.reg .u64 %r302;
.reg .u32 %r303;
.reg .u32 %r305;
.reg .u64 %r306;
.reg .u64 %r307;
.reg .u64 %r308;
.reg .u64 %r309;
.reg .u64 %r311;
.reg .u64 %r312;
.reg .u16 %r313;
.reg .u16 %r314;
.reg .pred %r315;
.reg .u16 %r316;
.reg .u32 %r318;
.reg .pred %r319;
.reg .pred %r320;
.reg .u32 %r322;
.reg .pred %r323;
.reg .u32 %r326;
.reg .pred %r327;
.reg .u32 %r329;
.reg .pred %r330;
.reg .pred %r331;
.reg .pred %r332;
.reg .pred %r333;
.reg .pred %r334;
.reg .pred %r335;
.reg .pred %r336;
.reg .pred %r337;
.reg .pred %r338;
.reg .pred %r339;
.reg .pred %r340;
.reg .u32 %r341;
.reg .pred %r342;
.reg .pred %r343;
.reg .pred %r344;
.reg .pred %r345;
.reg .pred %r346;
.reg .pred %r347;
.reg .pred %r348;
.reg .pred %r349;
.reg .pred %r350;
.reg .pred %r351;
.reg .pred %r352;
.reg .pred %r353;
.reg .pred %r354;
.reg .pred %r355;
.reg .pred %r356;
.reg .pred %r357;
.reg .u32 %r360;
.reg .pred %r361;
.reg .pred %r362;
.reg .u32 %r366;
.reg .u32 %r368;
.reg .u32 %r369;
.reg .u32 %r371;
.reg .u32 %r372;
.reg .u16 %r373;
.reg .u16 %r374;
.reg .u16 %r375;
.reg .u32 %r376;
.reg .u16 %r377;
.reg .pred %r378;
.reg .u32 %r379;
.reg .pred %r380;
.reg .pred %r381;
.reg .u32 %r382;
.reg .pred %r383;
.reg .u32 %r384;
.reg .pred %r385;
.reg .u64 %r387;
.reg .u64 %r388;
.reg .u64 %r389;
.reg .u64 %r390;
.reg .pred %r391;
.reg .pred %r392;
.reg .u32 %r394;
.reg .u32 %r395;
.reg .u32 %r397;
.reg .u32 %r398;
.reg .u16 %r399;
.reg .u16 %r400;
.reg .u16 %r401;
.reg .u32 %r402;
.reg .u16 %r403;
.reg .pred %r404;
.reg .u32 %r406;
.reg .u32 %r407;
.reg .u32 %r409;
.reg .u32 %r410;
.reg .u16 %r411;
.reg .u16 %r412;
.reg .u16 %r413;
.reg .u32 %r414;
.reg .u16 %r415;
.reg .pred %r416;
.reg .pred %r417;
.reg .pred %r418;
.reg .u32 %r419;
.reg .pred %r420;
.reg .u64 %r421;
.reg .u32 %r422;
.reg .pred %r423;
.reg .u32 %r424;
.reg .pred %r425;
.reg .u64 %r426;
.reg .u32 %r427;
.reg .pred %r428;
.reg .u64 %r429;
.reg .u32 %r432;
.reg .pred %r433;
.reg .u32 %r435;
.reg .pred %r436;
.reg .pred %r439;
.reg .u32 %r442;
.reg .pred %r443;
.reg .pred %r444;
.reg .u32 %r448;
.reg .u64 %r449;
.reg .u64 %r451;
.reg .u64 %r457;
.reg .pred %r458;
.reg .pred %r459;
.reg .u32 %r460;
.reg .pred %r461;
.reg .pred %r463;
.reg .u32 %r466;
.reg .pred %r467;
.reg .pred %r468;
.reg .u64 %r470;
.reg .u32 %r472;
.reg .pred %r473;
.reg .u32 %r476;
.reg .pred %r477;
.reg .pred %r478;
.reg .u64 %r483;
.reg .pred %r484;
.reg .u64 %r488;
.reg .pred %r489;
.reg .pred %r490;
.reg .pred %r491;
.reg .u32 %r494;
.reg .pred %r495;
.reg .pred %r496;
.reg .u64 %r501;
.reg .pred %r502;
.reg .u64 %r506;
.reg .pred %r507;
.reg .u64 %r508;
.reg .u64 %r510;
.reg .pred %r511;
.reg .u32 %r512;
.reg .u32 %r515;
.reg .u64 %r516;
.reg .u64 %r518;
.reg .u64 %r524;
.reg .pred %r525;
.reg .pred %r526;
.reg .u32 %r527;
.reg .pred %r528;
.reg .u32 %r532;
.reg .pred %r533;
.reg .pred %r534;
.reg .u64 %r539;
.reg .pred %r540;
.reg .u64 %r544;
.reg .pred %r545;
.reg .u32 %r547;
.reg .pred %r548;
.reg .u32 %r549;
.reg .pred %r550;
.reg .u32 %r551;
.reg .u32 %r552;
.reg .u32 %r553;
.reg .u32 %r556;
.reg .pred %r557;
.reg .pred %r558;
.reg .u32 %r560;
.reg .pred %r561;
.reg .u32 %r562;
.reg .pred %r563;
.reg .u32 %r564;
.reg .u32 %r565;
.reg .u32 %r566;
.reg .u32 %r569;
.reg .pred %r570;
.reg .pred %r571;
.reg .u32 %r573;
.reg .pred %r574;
.reg .u32 %r575;
.reg .u32 %r578;
.reg .u64 %r579;
.reg .u64 %r581;
.reg .u64 %r586;
.reg .pred %r587;
.reg .pred %r588;
.reg .u32 %r589;
.reg .pred %r590;
.reg .u32 %r594;
.reg .pred %r595;
.reg .pred %r596;
.reg .u32 %r598;
.reg .pred %r599;
.reg .u32 %r601;
.reg .u64 %r602;
.reg .pred %r603;
.reg .u64 %r604;
.reg .u32 %r607;
.reg .pred %r608;
.reg .pred %r609;
.reg .pred %r610;
.reg .pred %r611;
.reg .u32 %r612;
.reg .u32 %r613;
.reg .pred %r614;
.reg .u64 %r615;
.reg .u64 %r616;
.reg .u64 %r617;
.reg .u64 %r618;
.reg .pred %r619;
.reg .pred %r620;
.reg .pred %r621;
.reg .pred %r622;
.reg .pred %r623;
.reg .pred %r624;
.reg .pred %r625;
.reg .u32 %r626;
.reg .pred %r627;
.reg .u64 %r628;
.reg .u64 %r629;
.reg .u64 %r630;
.reg .u64 %r631;
.reg .pred %r632;
.reg .pred %r633;
.reg .u32 %r634;
.reg .pred %r635;
.reg .u32 %r636;
.reg .pred %r637;
.reg .u32 %r638;
.reg .pred %r639;
.reg .u64 %r640;
.reg .pred %r641;
.reg .pred %r642;
.reg .u32 %r646;
.reg .pred %r647;
.reg .u32 %r648;
.reg .pred %r649;
.reg .pred %r650;
.reg .u32 %r654;
.reg .u32 %r655;
.reg .u32 %r656;
.reg .pred %r657;
.reg .u32 %r661;
.reg .u32 %r662;
.reg .pred %r663;
.reg .u64 %r667;
.reg .u64 %r669;
.reg .u64 %r670;
.reg .u32 %r671;
.reg .pred %r672;
.reg .u32 %r673;
.reg .pred %r674;
.reg .u64 %r675;
.reg .u32 %r676;
.reg .pred %r677;
.reg .u64 %r678;
.reg .u32 %r679;
.reg .pred %r680;
.reg .u64 %r681;
.reg .pred %r682;
.reg .u64 %r687;
.reg .u64 %r692;
.reg .u64 %r693;
.reg .u64 %r694;
.reg .u64 %r695;
.reg .u64 %r697;
.reg .u32 %r698;
.reg .u64 %r699;
.reg .pred %r700;
.reg .u32 %r701;
.reg .u32 %r704;
.reg .pred %r705;
.reg .pred %r706;
.reg .pred %r707;
.reg .pred %r708;
.reg .pred %r709;
.reg .u32 %r710;
.reg .u32 %r711;
.reg .pred %r712;
.reg .pred %r713;
.reg .pred %r714;
.reg .pred %r715;
.reg .pred %r716;
.reg .pred %r717;
.reg .pred %r718;
.reg .pred %r719;
.reg .pred %r720;
.reg .pred %r721;
.reg .pred %r722;
.reg .pred %r723;
.reg .pred %r724;
.reg .pred %r725;
.reg .pred %r726;
.reg .pred %r727;
.reg .u32 %r728;
.reg .pred %r729;
.reg .pred %r730;
.reg .u32 %r731;
.reg .pred %r732;
.reg .u32 %r733;
.reg .pred %r734;
.reg .u16 %r736;
.reg .u32 %r737;
.reg .u32 %r738;
.reg .u32 %r740;
.reg .u32 %r741;
.reg .u16 %r742;
.reg .u16 %r743;
.reg .u16 %r744;
.reg .u32 %r745;
.reg .u16 %r746;
.reg .pred %r747;
.reg .u32 %r748;
.reg .pred %r749;
.reg .pred %r751;
.reg .u16 %r753;
.reg .u32 %r754;
.reg .u32 %r755;
.reg .u32 %r758;
.reg .u32 %r759;
.reg .u16 %r760;
.reg .u16 %r761;
.reg .u16 %r762;
.reg .u32 %r763;
.reg .u16 %r764;
.reg .pred %r765;
.reg .u16 %r767;
.reg .u32 %r769;
.reg .u16 %r771;
.reg .pred %r772;
.reg .u16 %r774;
.reg .u32 %r775;
.reg .u32 %r776;
.reg .u32 %r778;
.reg .u32 %r779;
.reg .u16 %r780;
.reg .u16 %r781;
.reg .u16 %r782;
.reg .u32 %r783;
.reg .u16 %r784;
.reg .pred %r785;
.reg .u32 %r786;
.reg .pred %r787;
.reg .u32 %r788;
.reg .u16 %r789;
.reg .u16 %r790;
.reg .u16 %r792;
.reg .u32 %r794;
.reg .u16 %r795;
.reg .pred %r796;
.reg .u16 %r797;
.reg .u32 %r799;
.reg .u16 %r800;
.reg .pred %r801;
.reg .u16 %r802;
.reg .pred %r803;
.reg .u16 %r804;
.reg .pred %r805;
.reg .u32 %r806;
.reg .pred %r807;
.reg .u32 %r808;
.reg .pred %r809;
.reg .u32 %r811;
.reg .pred %r812;
.reg .pred %r813;
.reg .u32 %r814;
.reg .pred %r815;
.reg .pred %r816;
.reg .u32 %r820;
.reg .pred %r821;
.reg .u32 %r823;
.reg .pred %r824;
.reg .pred %r825;
.reg .u32 %r827;
.reg .u32 %r829;
.reg .pred %r830;
.reg .u32 %r831;
.reg .pred %r832;
.reg .u16 %r833;
.reg .pred %r834;
.reg .u32 %r835;
.reg .pred %r837;
.reg .pred %r838;
.reg .u32 %r840;
.reg .u32 %r842;
.reg .u16 %r844;
.reg .u16 %r845;
.reg .u16 %r846;
.reg .u16 %r849;
.reg .u16 %r851;
.reg .u16 %r852;
.reg .u32 %r853;
.reg .u32 %r854;
.reg .pred %r855;
.reg .u32 %r857;
.reg .u32 %r859;
.reg .pred %r860;
.reg .u32 %r861;
.reg .pred %r862;
.reg .u32 %r863;
.reg .pred %r864;
.reg .pred %r865;
.reg .u32 %r867;
.reg .u32 %r869;
.reg .pred %r870;
.reg .u32 %r871;
.reg .pred %r872;
.reg .u32 %r876;
.reg .u32 %r880;
.reg .u32 %r881;
.reg .pred %r882;
.reg .u32 %r884;
.reg .pred %r885;
.reg .pred %r886;
.reg .pred %r887;
.reg .u64 %r890;
.reg .u32 %r891;
.reg .u64 %r892;
.reg .u64 %r893;
.reg .pred %r895;
.reg .u64 %r897;
.reg .u64 %r898;
.reg .u32 %r899;
.reg .u64 %r903;
.reg .f64 %r904;
.reg .u64 %r905;
.reg .u32 %r906;
.reg .pred %r907;
.reg .u64 %r908;
.reg .u32 %r909;
.reg .pred %r910;
.reg .pred %r911;
.reg .u64 %r912;
.reg .f32 %r913;
.reg .f32 %r914;
.reg .pred %r915;
.reg .u16 %r916;
.reg .u16 %r917;
.reg .pred %r918;
.reg .u32 %r923;
.reg .u32 %r927;
.reg .u32 %r931;
.reg .u32 %r935;
.reg .u32 %r939;
.reg .u32 %r943;
.reg .u32 %r947;
.reg .u32 %r951;
.reg .pred %r952;
.reg .pred %r953;
.reg .pred %r954;
.reg .pred %r956;
.reg .pred %r957;
.reg .pred %r958;
.reg .pred %r959;
.reg .pred %r960;
.reg .pred %r961;
.reg .u64 %r962;
.reg .u64 %r963;
.reg .u64 %r964;
mov.u64 %r306,%ar0;
mov.u64 %r307,%ar1;
mov.u64 %r308,%ar2;
mov.u64 %r309,%ar3;
.loc 1 547 23
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
call (%value_in),_localeconv_r,(%out_arg1);
ld.param.u64 %r311,[%value_in];
}
.loc 1 547 22
ld.u64 %r312,[%r311];
ld.s8 %r24,[%r312];
.loc 1 553 3
ld.u16 %r314,[%r307+16];
and.b16 %r313,%r314,8192;
setp.ne.u16 %r315,%r313,0;
@ %r315 bra $L2;
.loc 1 551 3
ld.u32 %r25,[%r307+172];
.loc 1 553 3
or.b16 %r316,%r314,8192;
st.u16 [%r307+16],%r316;
or.b32 %r318,%r25,8192;
st.u32 [%r307+172],%r318;
$L2:
.loc 1 560 15
add.u64 %r211,%r308,4;
.loc 1 560 9
ld.u32 %r168,[%r308];
.loc 1 561 10
setp.eq.u32 %r319,%r168,0;
@ %r319 bra $L182;
mov.u64 %r71,0;
cvt.u32.u64 %r303,%r71;
cvt.u32.u64 %r58,%r71;
cvt.u32.u64 %r305,%r71;
mov.u64 %r55,%r71;
.loc 1 1611 8
add.u64 %r962,%frame,1316;
.loc 1 1613 17
add.u64 %r963,%frame,1312;
.loc 1 1115 8
add.u64 %r964,%frame,1400;
bra $L4;
$L183:
mov.u64 %r182,%r211;
bra $L6;
$L191:
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L192:
mov.u64 %r182,%r211;
bra $L6;
$L194:
mov.u64 %r182,%r211;
bra $L6;
$L197:
mov.u32 %r58,%r199;
mov.u64 %r182,%r211;
bra $L6;
$L199:
mov.u64 %r182,%r211;
bra $L6;
$L209:
mov.u64 %r182,%r211;
$L6:
.loc 1 560 15
add.u64 %r211,%r182,4;
.loc 1 560 9
ld.u32 %r168,[%r182];
.loc 1 561 10
setp.eq.u32 %r320,%r168,0;
@ %r320 bra $L1;
$L4:
.loc 1 563 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r168;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r322,[%value_in];
}
mov.u32 %r31,%r322;
.loc 1 563 10
setp.eq.u32 %r323,%r31,0;
@ %r323 bra $L5;
$L7:
.loc 1 565 16
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r326,[%value_in];
}
.loc 1 565 10
setp.eq.u32 %r327,%r326,-1;
@ %r327 bra $L183;
.loc 1 565 49
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r326;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r329,[%value_in];
}
.loc 1 565 46
setp.ne.u32 %r330,%r329,0;
@ %r330 bra $L7;
bra $L401;
$L5:
.loc 1 571 10
setp.ne.u32 %r331,%r168,37;
@ %r331 bra $L9;
.loc 1 586 11
ld.u32 %r54,[%r211];
.loc 1 574 13
mov.u32 %r178,%r31;
.loc 1 586 11
mov.u64 %r29,%r211;
.loc 1 573 13
mov.u64 %r33,0;
bra $L10;
$L402:
.loc 1 586 11
ld.u32 %r54,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r211;
.loc 1 606 10
mov.u32 %r178,16;
.loc 1 586 11
mov.u64 %r33,0;
$L10:
.loc 1 586 15
add.u64 %r211,%r29,4;
.loc 1 588 7
setp.eq.u32 %r332,%r54,104;
@ %r332 bra $L11;
setp.gt.s32 %r333,%r54,104;
@ %r333 bra $L12;
setp.eq.u32 %r334,%r54,76;
@ %r334 bra $L13;
setp.gt.s32 %r335,%r54,76;
@ %r335 bra $L14;
setp.eq.u32 %r336,%r54,42;
@ %r336 bra $L15;
setp.gt.s32 %r337,%r54,42;
@ %r337 bra $L16;
setp.eq.u32 %r338,%r54,37;
@ %r338 bra $L9;
bra $L1;
$L16:
setp.gt.s32 %r339,%r54,57;
@ %r339 bra $L17;
setp.gt.s32 %r340,%r54,47;
@ %r340 bra $L18;
bra $L1;
$L17:
and.b32 %r341,%r54,-3;
setp.eq.u32 %r342,%r341,69;
@ ! %r342 bra $L1;
bra $L184;
$L14:
setp.eq.u32 %r343,%r54,99;
@ %r343 bra $L20;
setp.gt.s32 %r344,%r54,99;
@ %r344 bra $L21;
setp.eq.u32 %r345,%r54,88;
@ %r345 bra $L22;
setp.eq.u32 %r346,%r54,91;
@ %r346 bra $L23;
bra $L1;
$L21:
setp.ne.u32 %r347,%r54,100;
@ %r347 bra $L185;
.loc 1 725 9
mov.u64 %r71,_wcstol_r;
.loc 1 726 9
mov.u32 %r303,10;
.loc 1 724 6
mov.u32 %r204,3;
bra $L47;
$L12:
.loc 1 588 7
setp.eq.u32 %r348,%r54,111;
@ %r348 bra $L186;
setp.gt.s32 %r349,%r54,111;
@ %r349 bra $L25;
setp.eq.u32 %r350,%r54,108;
@ %r350 bra $L26;
setp.eq.u32 %r351,%r54,110;
@ %r351 bra $L27;
setp.eq.u32 %r352,%r54,105;
@ %r352 bra $L187;
bra $L1;
$L25:
setp.eq.u32 %r353,%r54,115;
@ %r353 bra $L188;
setp.gt.s32 %r354,%r54,115;
@ %r354 bra $L28;
setp.eq.u32 %r355,%r54,112;
@ %r355 bra $L29;
bra $L1;
$L28:
setp.eq.u32 %r356,%r54,117;
@ %r356 bra $L189;
setp.eq.u32 %r357,%r54,120;
@ %r357 bra $L22;
bra $L1;
$L9:
.loc 1 592 14
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r360,[%value_in];
}
.loc 1 592 7
setp.eq.u32 %r361,%r360,-1;
@ %r361 bra $L32;
.loc 1 594 7
setp.eq.u32 %r362,%r168,%r360;
@ %r362 bra $L31;
.loc 1 596 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r360;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r366,[%value_in];
}
.loc 1 597 8
bra $L32;
$L31:
.loc 1 599 9
add.u32 %r58,%r58,1;
.loc 1 600 4
mov.u64 %r182,%r211;
bra $L6;
$L15:
.loc 1 604 8
set.u32.ne.u64 %r368,%r33,0;
neg.s32 %r369,%r368;
.loc 1 603 7
set.u32.ne.u32 %r371,%r178,0;
neg.s32 %r372,%r371;
.loc 1 604 8
cvt.u16.u32 %r374,%r369;
cvt.u16.u32 %r375,%r372;
or.b16 %r373,%r374,%r375;
cvt.u32.u16 %r376,%r373;
cvt.u16.u8 %r377,%r376;
setp.ne.u16 %r378,%r377,0;
@ ! %r378 bra $L402;
bra $L1;
$L26:
.loc 1 609 14
and.b32 %r379,%r178,15;
.loc 1 609 7
setp.ne.u32 %r380,%r379,0;
@ %r380 bra $L1;
.loc 1 612 8
ld.u32 %r54,[%r29+4];
.loc 1 612 7
setp.ne.u32 %r381,%r54,108;
@ %r381 bra $L34;
.loc 1 615 14
or.b32 %r178,%r178,2;
.loc 1 586 11
ld.u32 %r54,[%r29+8];
.loc 1 614 8
add.u64 %r29,%r29,8;
bra $L10;
$L34:
.loc 1 619 12
or.b32 %r178,%r178,1;
.loc 1 586 15
mov.u64 %r29,%r211;
bra $L10;
$L13:
.loc 1 622 14
and.b32 %r382,%r178,15;
.loc 1 622 7
setp.ne.u32 %r383,%r382,0;
@ %r383 bra $L1;
.loc 1 624 10
or.b32 %r178,%r178,2;
.loc 1 586 11
ld.u32 %r54,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r211;
.loc 1 625 4
bra $L10;
$L11:
.loc 1 637 12
or.b32 %r178,%r178,4;
.loc 1 586 11
ld.u32 %r54,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r211;
.loc 1 638 4
bra $L10;
$L18:
.loc 1 703 14
and.b32 %r384,%r178,143;
.loc 1 703 7
setp.ne.u32 %r385,%r384,0;
@ %r385 bra $L1;
.loc 1 705 18
shl.b64 %r387,%r33,2;
add.u64 %r388,%r387,%r33;
add.u64 %r389,%r388,%r388;
add.u64 %r284,%r389,-48;
.loc 1 705 23
cvt.s64.s32 %r390,%r54;
.loc 1 705 10
add.u64 %r33,%r390,%r284;
.loc 1 586 11
ld.u32 %r54,[%r29+4];
.loc 1 586 15
mov.u64 %r29,%r211;
.loc 1 706 4
bra $L10;
$L22:
.loc 1 749 10
or.b32 %r178,%r178,512;
.loc 1 751 9
mov.u64 %r71,_wcstoul_r;
.loc 1 752 9
mov.u32 %r31,16;
.loc 1 753 4
bra $L24;
$L23:
.loc 1 781 8
ld.u32 %r39,[%r29+4];
.loc 1 781 7
setp.ne.u32 %r391,%r39,94;
@ %r391 bra $L36;
.loc 1 784 8
add.u64 %r211,%r29,8;
.loc 1 789 8
ld.u32 %r39,[%r29+8];
.loc 1 783 17
mov.u32 %r31,1;
$L36:
.loc 1 790 9
add.u64 %r182,%r211,4;
.loc 1 789 7
setp.ne.u32 %r392,%r39,93;
@ %r392 bra $L190;
.loc 1 791 11
ld.u32 %r39,[%r211+4];
.loc 1 790 9
mov.u64 %r224,%r182;
.loc 1 792 9
add.u64 %r182,%r211,8;
bra $L37;
$L190:
mov.u64 %r224,%r211;
$L37:
.loc 1 791 24
set.u32.ne.u32 %r394,%r39,93;
neg.s32 %r395,%r394;
set.u32.ne.u32 %r397,%r39,0;
neg.s32 %r398,%r397;
cvt.u16.u32 %r400,%r395;
cvt.u16.u32 %r401,%r398;
and.b16 %r399,%r400,%r401;
.loc 1 791 10
cvt.u32.u16 %r402,%r399;
cvt.u16.u8 %r403,%r402;
setp.eq.u16 %r404,%r403,0;
@ %r404 bra $L38;
$L39:
mov.u64 %r219,%r224;
.loc 1 792 9
add.u64 %r224,%r224,4;
.loc 1 791 11
ld.u32 %r221,[%r224];
.loc 1 791 24
set.u32.ne.u32 %r406,%r221,0;
neg.s32 %r407,%r406;
set.u32.ne.u32 %r409,%r221,93;
neg.s32 %r410,%r409;
cvt.u16.u32 %r412,%r407;
cvt.u16.u32 %r413,%r410;
and.b16 %r411,%r412,%r413;
.loc 1 791 10
cvt.u32.u16 %r414,%r411;
cvt.u16.u8 %r415,%r414;
setp.ne.u16 %r416,%r415,0;
@ %r416 bra $L39;
.loc 1 794 7
add.u64 %r182,%r219,8;
$L38:
.loc 1 965 7
setp.eq.u64 %r417,%r33,0;
.loc 1 966 12
selp.u64 %r33,-1,%r33,%r417;
.loc 1 991 27
sub.u64 %r470,%r224,%r211;
shr.s64 %r294,%r470,2;
.loc 1 968 27
and.b32 %r472,%r178,17;
.loc 1 968 7
setp.eq.u32 %r473,%r472,17;
@ ! %r473 bra $L403;
bra $L195;
$L20:
max.u64 %r170,%r33,1;
and.b32 %r265,%r178,1;
and.b32 %r288,%r178,16;
.loc 1 879 14
setp.ne.u32 %r418,%r265,0;
@ %r418 bra $L42;
bra $L404;
$L29:
.loc 1 811 10
or.b32 %r178,%r178,544;
.loc 1 813 9
mov.u64 %r71,_wcstoul_r;
.loc 1 814 9
mov.u32 %r31,16;
.loc 1 815 4
bra $L24;
$L27:
.loc 1 818 14
and.b32 %r419,%r178,16;
.loc 1 818 7
setp.ne.u32 %r420,%r419,0;
@ %r420 bra $L191;
.loc 1 830 11
add.u64 %r421,%r309,7;
and.b64 %r256,%r421,-8;
ld.u64 %r229,[%r256];
add.u64 %r309,%r256,8;
.loc 1 828 14
and.b32 %r422,%r178,4;
.loc 1 828 7
setp.eq.u32 %r423,%r422,0;
@ %r423 bra $L44;
.loc 1 831 12
st.u16 [%r229],%r58;
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L44:
.loc 1 833 19
and.b32 %r424,%r178,1;
.loc 1 833 12
setp.eq.u32 %r425,%r424,0;
@ %r425 bra $L45;
.loc 1 836 12
cvt.s64.s32 %r426,%r58;
st.u64 [%r229],%r426;
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L45:
.loc 1 839 19
and.b32 %r427,%r178,2;
.loc 1 839 12
setp.eq.u32 %r428,%r427,0;
@ %r428 bra $L46;
.loc 1 842 13
cvt.s64.s32 %r429,%r58;
st.u64 [%r229],%r429;
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L46:
.loc 1 848 12
st.u32 [%r229],%r58;
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L184:
.loc 1 766 6
mov.u32 %r204,4;
bra $L47;
$L185:
mov.u32 %r204,4;
bra $L47;
$L188:
.loc 1 588 7
mov.u32 %r204,2;
bra $L47;
$L48:
.loc 1 863 11
add.u32 %r58,%r58,1;
$L47:
.loc 1 862 17
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r432,[%value_in];
}
.loc 1 862 10
setp.eq.u32 %r433,%r432,-1;
@ %r433 bra $L32;
.loc 1 862 50
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r432;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r435,[%value_in];
}
.loc 1 862 47
setp.ne.u32 %r436,%r435,0;
@ %r436 bra $L48;
bra $L405;
$L42:
.loc 1 887 11
setp.ne.u32 %r956,%r288,0;
@ %r956 bra $L50;
.loc 1 894 5
add.u64 %r171,%r309,7;
and.b64 %r300,%r171,-8;
add.u64 %r309,%r300,8;
ld.u64 %r55,[%r300];
$L50:
.loc 1 904 11
mov.u64 %r207,0;
bra $L51;
$L54:
.loc 1 898 8
@ %r956 bra $L52;
.loc 1 904 14
st.u32 [%r55],%r442;
.loc 1 904 11
add.u64 %r55,%r55,4;
$L52:
add.u32 %r274,%r222,1;
.loc 1 896 14
add.u64 %r207,%r207,1;
setp.eq.u64 %r439,%r207,%r170;
@ %r439 bra $L53;
$L51:
cvt.u32.u64 %r222,%r207;
cvt.u32.u64 %r274,%r207;
.loc 1 896 37
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r442,[%value_in];
}
.loc 1 896 28
setp.ne.u32 %r443,%r442,-1;
@ %r443 bra $L54;
.loc 1 908 11
setp.eq.u32 %r444,%r274,0;
@ %r444 bra $L32;
$L53:
.loc 1 910 14
add.u32 %r58,%r58,%r274;
.loc 1 914 11
@ %r956 bra $L192;
.loc 1 915 12
add.u32 %r305,%r305,1;
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L404:
.loc 1 925 11
setp.ne.u32 %r956,%r288,0;
@ %r956 bra $L193;
.loc 1 932 7
add.u64 %r302,%r309,7;
and.b64 %r301,%r302,-8;
add.u64 %r309,%r301,8;
ld.u64 %r186,[%r301];
bra $L55;
$L193:
.loc 1 926 7
add.u64 %r186,%frame,1408;
$L55:
.loc 1 934 8
mov.u64 %r449,8;
mov.u32 %r448,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r964;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r448;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r449;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r451,[%value_in];
}
bra $L56;
$L61:
.loc 1 937 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r186;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r466;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r964;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r457,[%value_in];
}
.loc 1 938 8
setp.eq.u64 %r458,%r457,-1;
@ %r458 bra $L32;
.loc 1 941 8
setp.ne.u64 %r459,%r457,0;
@ %r459 bra $L57;
.loc 1 941 20
ld.u32 %r460,[%frame+1400];
setp.eq.u32 %r461,%r460,-4;
@ %r461 bra $L58;
$L57:
.loc 1 942 12
add.u64 %r170,%r170,-1;
$L58:
.loc 1 943 8
@ %r956 bra $L59;
.loc 1 948 13
add.u64 %r186,%r186,%r457;
$L59:
.loc 1 950 6
add.u32 %r265,%r265,1;
.loc 1 935 14
setp.eq.u64 %r463,%r170,0;
@ %r463 bra $L60;
$L56:
.loc 1 935 35
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r466,[%value_in];
}
.loc 1 935 26
setp.ne.u32 %r467,%r466,-1;
@ %r467 bra $L61;
.loc 1 952 11
setp.eq.u32 %r468,%r265,0;
@ %r468 bra $L32;
$L60:
.loc 1 954 14
add.u32 %r58,%r58,%r265;
.loc 1 958 11
@ %r956 bra $L194;
.loc 1 959 12
add.u32 %r305,%r305,1;
.loc 1 586 15
mov.u64 %r182,%r211;
bra $L6;
$L67:
add.u64 %r63,%r63,1;
bra $L62;
$L195:
mov.u64 %r63,0;
.loc 1 971 14
setp.eq.u32 %r959,%r31,0;
$L62:
cvt.u32.u64 %r177,%r63;
.loc 1 971 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r476,[%value_in];
}
.loc 1 971 14
setp.eq.u32 %r477,%r476,-1;
@ %r477 bra $L64;
.loc 1 972 8
setp.eq.u64 %r478,%r63,%r33;
@ %r478 bra $L65;
.loc 1 971 14
@ %r959 bra $L66;
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r211;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r476;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r294;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r483,[%value_in];
}
.loc 1 972 24
setp.eq.u64 %r484,%r483,0;
@ %r484 bra $L67;
bra $L65;
$L66:
.loc 1 972 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r211;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r476;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r294;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r488,[%value_in];
}
.loc 1 972 24
setp.ne.u64 %r489,%r488,0;
@ %r489 bra $L67;
bra $L65;
$L64:
.loc 1 976 11
setp.eq.u32 %r490,%r177,0;
@ ! %r490 bra $L68;
bra $L1;
$L403:
and.b32 %r177,%r178,1;
.loc 1 979 12
setp.eq.u32 %r491,%r177,0;
@ %r491 bra $L69;
.loc 1 989 10
add.u64 %r176,%r309,7;
and.b64 %r175,%r176,-8;
add.u64 %r309,%r175,8;
ld.u64 %r259,[%r175];
mov.u64 %r271,%r259;
.loc 1 990 14
setp.eq.u32 %r960,%r31,0;
bra $L70;
$L74:
.loc 1 993 10
st.u32 [%r271],%r494;
add.u64 %r33,%r33,-1;
add.u64 %r271,%r271,4;
$L70:
mov.u64 %r55,%r271;
.loc 1 990 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r494,[%value_in];
}
.loc 1 990 14
setp.eq.u32 %r495,%r494,-1;
@ %r495 bra $L71;
.loc 1 991 8
setp.eq.u64 %r496,%r33,0;
@ %r496 bra $L72;
.loc 1 990 14
@ %r960 bra $L73;
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r211;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r494;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r294;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r501,[%value_in];
}
.loc 1 991 24
setp.eq.u64 %r502,%r501,0;
@ %r502 bra $L74;
bra $L72;
$L73:
.loc 1 991 27
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r211;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r494;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r294;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r506,[%value_in];
}
.loc 1 991 24
setp.ne.u64 %r507,%r506,0;
@ %r507 bra $L74;
bra $L72;
$L71:
.loc 1 1000 14
sub.u64 %r508,%r271,%r259;
shr.s64 %r510,%r508,2;
.loc 1 1000 10
cvt.u32.u64 %r177,%r510;
.loc 1 1001 11
setp.eq.u32 %r511,%r177,0;
@ %r511 bra $L1;
.loc 1 1003 11
mov.u32 %r512,0;
st.u32 [%r271],%r512;
.loc 1 1007 17
add.u32 %r305,%r305,1;
bra $L68;
$L69:
and.b32 %r81,%r178,16;
.loc 1 1017 11
setp.ne.u32 %r958,%r81,0;
@ %r958 bra $L196;
.loc 1 1024 7
add.u64 %r293,%r309,7;
and.b64 %r292,%r293,-8;
add.u64 %r309,%r292,8;
ld.u64 %r187,[%r292];
bra $L75;
$L196:
.loc 1 1018 7
add.u64 %r187,%frame,1408;
$L75:
.loc 1 1026 8
mov.u64 %r516,8;
mov.u32 %r515,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r964;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r515;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r516;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r518,[%value_in];
}
.loc 1 1027 14
setp.eq.u32 %r961,%r31,0;
bra $L76;
$L83:
.loc 1 1030 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r187;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r532;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r964;
call (%value_in),_wcrtomb_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r524,[%value_in];
}
.loc 1 1031 8
setp.eq.u64 %r525,%r524,-1;
@ %r525 bra $L32;
.loc 1 1034 8
setp.ne.u64 %r526,%r524,0;
@ %r526 bra $L77;
.loc 1 1034 20
ld.u32 %r527,[%frame+1400];
setp.eq.u32 %r528,%r527,-4;
@ %r528 bra $L78;
$L77:
.loc 1 1035 12
add.u64 %r33,%r33,-1;
$L78:
.loc 1 1036 8
@ %r958 bra $L79;
.loc 1 1038 13
add.u64 %r187,%r187,%r524;
$L79:
.loc 1 1043 6
add.u32 %r177,%r177,1;
$L76:
.loc 1 1027 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r532,[%value_in];
}
.loc 1 1027 14
setp.eq.u32 %r533,%r532,-1;
@ %r533 bra $L80;
.loc 1 1028 8
setp.eq.u64 %r534,%r33,0;
@ %r534 bra $L81;
.loc 1 1027 14
@ %r961 bra $L82;
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r211;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r532;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r294;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r539,[%value_in];
}
.loc 1 1028 22
setp.eq.u64 %r540,%r539,0;
@ %r540 bra $L83;
bra $L81;
$L82:
.loc 1 1028 25
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r211;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r532;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r294;
call (%value_in),wmemchr,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r544,[%value_in];
}
.loc 1 1028 22
setp.ne.u64 %r545,%r544,0;
@ %r545 bra $L83;
bra $L81;
$L80:
.loc 1 1047 11
@ %r958 bra $L68;
.loc 1 1049 10
mov.u32 %r547,0;
st.u8 [%r187],%r547;
.loc 1 1053 14
add.u32 %r305,%r305,1;
$L68:
.loc 1 1056 10
add.u32 %r58,%r58,%r177;
.loc 1 1057 4
bra $L6;
$L179:
.loc 1 1061 7
setp.ne.u64 %r548,%r33,0;
.loc 1 1062 19
selp.u64 %r33,%r33,-1,%r548;
.loc 1 1063 27
and.b32 %r549,%r178,17;
.loc 1 1063 7
setp.ne.u32 %r550,%r549,17;
@ %r550 bra $L85;
mov.u64 %r281,%r33;
cvt.u32.u64 %r552,%r281;
add.u32 %r551,%r58,%r552;
$L87:
cvt.u32.u64 %r553,%r281;
sub.u32 %r199,%r551,%r553;
.loc 1 1065 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r556,[%value_in];
}
.loc 1 1065 14
setp.eq.u32 %r557,%r556,-1;
@ %r557 bra $L197;
.loc 1 1066 8
setp.eq.u64 %r558,%r281,0;
@ %r558 bra $L86;
.loc 1 1066 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r556;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r560,[%value_in];
}
.loc 1 1066 24
add.u64 %r281,%r281,-1;
setp.eq.u32 %r561,%r560,0;
@ %r561 bra $L87;
bra $L86;
$L85:
.loc 1 1071 19
and.b32 %r562,%r178,1;
.loc 1 1071 12
setp.eq.u32 %r563,%r562,0;
@ %r563 bra $L88;
.loc 1 1081 10
add.u64 %r296,%r309,7;
and.b64 %r295,%r296,-8;
add.u64 %r309,%r295,8;
ld.u64 %r183,[%r295];
.loc 1 1082 14
mov.u64 %r195,%r33;
cvt.u32.u64 %r565,%r195;
add.u32 %r564,%r58,%r565;
bra $L89;
$L92:
.loc 1 1085 10
st.u32 [%r183],%r569;
add.u64 %r183,%r183,4;
$L89:
cvt.u32.u64 %r566,%r195;
sub.u32 %r272,%r564,%r566;
mov.u64 %r55,%r183;
.loc 1 1082 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r569,[%value_in];
}
.loc 1 1082 14
setp.eq.u32 %r570,%r569,-1;
@ %r570 bra $L90;
.loc 1 1083 8
setp.eq.u64 %r571,%r195,0;
@ %r571 bra $L91;
.loc 1 1083 28
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r569;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r573,[%value_in];
}
.loc 1 1083 24
add.u64 %r195,%r195,-1;
setp.eq.u32 %r574,%r573,0;
@ %r574 bra $L92;
bra $L91;
$L90:
.loc 1 1093 11
mov.u32 %r575,0;
st.u32 [%r183],%r575;
.loc 1 1097 17
add.u32 %r305,%r305,1;
mov.u32 %r58,%r272;
mov.u64 %r182,%r211;
bra $L6;
$L88:
.loc 1 1107 18
and.b32 %r78,%r178,16;
.loc 1 1107 11
setp.ne.u32 %r957,%r78,0;
@ %r957 bra $L198;
.loc 1 1114 7
add.u64 %r299,%r309,7;
and.b64 %r298,%r299,-8;
add.u64 %r309,%r298,8;
ld.u64 %r188,[%r298];
bra $L93;
$L198:
.loc 1 1108 7
add.u64 %r188,%frame,1408;
$L93:
.loc 1 1115 8
mov.u64 %r579,8;
mov.u32 %r578,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r964;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r578;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r579;
call (%value_in),memset,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r581,[%value_in];
}
.loc 1 1116 14
bra $L94;
$L100:
.loc 1 1119 13
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r188;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r594;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r964;
call (%value_in),wcrtomb,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r586,[%value_in];
}
.loc 1 1120 8
setp.eq.u64 %r587,%r586,-1;
@ %r587 bra $L32;
.loc 1 1123 8
setp.ne.u64 %r588,%r586,0;
@ %r588 bra $L95;
.loc 1 1123 20
ld.u32 %r589,[%frame+1400];
setp.eq.u32 %r590,%r589,-4;
@ %r590 bra $L96;
$L95:
.loc 1 1124 12
add.u64 %r33,%r33,-1;
$L96:
.loc 1 1125 8
@ %r957 bra $L97;
.loc 1 1127 13
add.u64 %r188,%r188,%r586;
$L97:
.loc 1 1132 10
add.u32 %r58,%r58,1;
$L94:
.loc 1 1116 21
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r594,[%value_in];
}
.loc 1 1116 14
setp.eq.u32 %r595,%r594,-1;
@ %r595 bra $L98;
.loc 1 1117 8
setp.eq.u64 %r596,%r33,0;
@ %r596 bra $L99;
.loc 1 1117 26
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r594;
call (%value_in),iswspace,(%out_arg1);
ld.param.u32 %r598,[%value_in];
}
.loc 1 1117 22
setp.eq.u32 %r599,%r598,0;
@ %r599 bra $L100;
bra $L99;
$L98:
.loc 1 1136 11
@ %r957 bra $L199;
.loc 1 1138 10
mov.u32 %r601,0;
st.u8 [%r188],%r601;
.loc 1 1142 14
add.u32 %r305,%r305,1;
mov.u64 %r182,%r211;
bra $L6;
$L180:
.loc 1 1150 19
add.u64 %r602,%r33,-1;
.loc 1 1150 7
setp.le.u64 %r603,%r602,348;
.loc 1 1151 12
selp.u64 %r33,%r33,349,%r603;
.loc 1 1152 10
or.b32 %r179,%r178,1408;
mov.u64 %r52,%frame;
shl.b64 %r604,%r33,2;
add.u64 %r184,%r604,%frame;
$L118:
mov.u64 %r55,%r52;
.loc 1 1155 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r607,[%value_in];
}
setp.gt.u32 %r608,%r607,57;
@ %r608 bra $L102;
setp.gt.u32 %r609,%r607,55;
@ %r609 bra $L103;
setp.eq.u32 %r610,%r607,48;
@ %r610 bra $L104;
setp.gt.u32 %r611,%r607,48;
@ %r611 bra $L105;
add.u32 %r612,%r607,-43;
and.b32 %r613,%r612,-3;
setp.eq.u32 %r614,%r613,0;
@ ! %r614 bra $L107;
bra $L106;
$L105:
.loc 1 1191 19
cvta.const.u64 %r615,basefix$0;
cvt.s64.s32 %r616,%r303;
add.u64 %r617,%r616,%r616;
add.u64 %r618,%r615,%r617;
ld.s16 %r303,[%r618];
.loc 1 1192 11
and.b32 %r179,%r179,-897;
.loc 1 1193 5
bra $L108;
$L102:
setp.gt.u32 %r619,%r607,102;
@ %r619 bra $L109;
setp.gt.u32 %r620,%r607,96;
@ %r620 bra $L110;
setp.gt.u32 %r621,%r607,70;
@ %r621 bra $L111;
setp.gt.u32 %r622,%r607,64;
@ ! %r622 bra $L107;
bra $L110;
$L111:
setp.eq.u32 %r623,%r607,88;
@ %r623 bra $L112;
bra $L107;
$L109:
setp.eq.u32 %r624,%r607,120;
@ %r624 bra $L112;
bra $L406;
$L104:
.loc 1 1172 8
setp.ne.u32 %r625,%r303,0;
@ %r625 bra $L114;
.loc 1 1175 15
or.b32 %r179,%r179,512;
.loc 1 1174 14
mov.u32 %r303,8;
$L114:
.loc 1 1177 15
and.b32 %r626,%r179,1024;
.loc 1 1177 8
setp.eq.u32 %r627,%r626,0;
@ %r627 bra $L115;
.loc 1 1178 13
and.b32 %r179,%r179,-1409;
bra $L108;
$L115:
.loc 1 1180 13
and.b32 %r179,%r179,-897;
bra $L108;
$L103:
.loc 1 1198 19
cvta.const.u64 %r628,basefix$0;
cvt.s64.s32 %r629,%r303;
add.u64 %r630,%r629,%r629;
add.u64 %r631,%r628,%r630;
ld.s16 %r303,[%r631];
.loc 1 1199 8
setp.le.s32 %r632,%r303,8;
@ %r632 bra $L107;
.loc 1 1201 11
and.b32 %r179,%r179,-897;
.loc 1 1202 5
bra $L108;
$L110:
.loc 1 1218 8
setp.le.s32 %r633,%r303,10;
@ %r633 bra $L107;
.loc 1 1220 11
and.b32 %r179,%r179,-897;
.loc 1 1221 5
bra $L108;
$L106:
.loc 1 1226 15
and.b32 %r634,%r179,128;
.loc 1 1226 8
setp.eq.u32 %r635,%r634,0;
@ %r635 bra $L107;
.loc 1 1228 15
and.b32 %r240,%r179,-129;
.loc 1 1229 15
or.b32 %r179,%r240,65536;
.loc 1 1230 9
bra $L108;
$L112:
.loc 1 1237 16
and.b32 %r636,%r179,512;
.loc 1 1237 8
setp.eq.u32 %r637,%r636,0;
@ %r637 bra $L107;
.loc 1 1237 52
and.b32 %r638,%r179,65536;
.loc 1 1237 41
setp.ne.u32 %r639,%r638,0;
selp.u64 %r202,8,4,%r639;
add.u64 %r640,%frame,%r202;
.loc 1 1237 25
setp.ne.u64 %r641,%r52,%r640;
@ %r641 bra $L107;
.loc 1 1240 15
and.b32 %r179,%r179,-513;
.loc 1 1239 14
mov.u32 %r303,16;
.loc 1 1241 9
bra $L108;
$L406:
.loc 1 1250 11
setp.eq.u32 %r642,%r607,-1;
@ %r642 bra $L117;
$L107:
.loc 1 1251 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r607;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r646,[%value_in];
}
bra $L117;
$L108:
add.u64 %r52,%r52,4;
.loc 1 1257 13
st.u32 [%r55],%r607;
.loc 1 1153 4
setp.ne.u64 %r647,%r184,%r52;
@ %r647 bra $L118;
.loc 1 1257 10
mov.u64 %r55,%r184;
$L117:
.loc 1 1267 14
and.b32 %r648,%r179,256;
.loc 1 1267 7
setp.eq.u32 %r649,%r648,0;
@ %r649 bra $L119;
.loc 1 1269 11
setp.ge.u64 %r650,%frame,%r55;
@ %r650 bra $L1;
.loc 1 1270 3
ld.u32 %r654,[%r55+-4];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r654;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r655,[%value_in];
}
bra $L1;
$L119:
.loc 1 1273 9
ld.u32 %r96,[%r55+-4];
.loc 1 1274 23
and.b32 %r656,%r96,-33;
.loc 1 1274 7
setp.ne.u32 %r657,%r656,88;
@ %r657 bra $L120;
.loc 1 1276 8
add.u64 %r55,%r55,-4;
.loc 1 1277 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r96;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r661,[%value_in];
}
$L120:
.loc 1 1279 15
and.b32 %r662,%r179,16;
.loc 1 1279 7
setp.ne.u32 %r663,%r662,0;
@ %r663 bra $L121;
.loc 1 1283 11
st.u32 [%r55],%r662;
.loc 1 1284 15
mov.u64 %r667,0;
{
.param .u64 %value_in;
$LCT0:
.callprototype ( .param .u64 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u64 %in_ar2,.param .u32 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r667;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r303;
call (%value_in),%r71,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u64 %r669,[%value_in];
}
.loc 1 830 11
add.u64 %r670,%r309,7;
and.b64 %r191,%r670,-8;
add.u64 %r309,%r191,8;
.loc 1 1285 18
and.b32 %r671,%r179,32;
.loc 1 1285 11
setp.eq.u32 %r672,%r671,0;
@ %r672 bra $L122;
.loc 1 1287 12
ld.u64 %r248,[%r191];
.loc 1 1297 11
st.u64 [%r248],%r669;
bra $L123;
$L122:
.loc 1 1306 23
and.b32 %r673,%r179,4;
.loc 1 1306 16
setp.eq.u32 %r674,%r673,0;
@ %r674 bra $L124;
.loc 1 1309 9
ld.u64 %r675,[%r191];
st.u16 [%r675],%r669;
bra $L123;
$L124:
.loc 1 1311 23
and.b32 %r676,%r179,1;
.loc 1 1311 16
setp.eq.u32 %r677,%r676,0;
@ %r677 bra $L125;
.loc 1 1314 9
ld.u64 %r678,[%r191];
st.u64 [%r678],%r669;
bra $L123;
$L125:
.loc 1 1317 23
and.b32 %r679,%r179,2;
.loc 1 1317 16
setp.eq.u32 %r680,%r679,0;
@ %r680 bra $L126;
.loc 1 1320 8
mov.u64 %r681,_wcstoul_r;
setp.ne.u64 %r682,%r71,%r681;
@ %r682 bra $L127;
.loc 1 1321 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r667;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r303;
call (%value_in),_wcstoull_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r687,[%value_in];
}
.loc 1 1325 10
mov.u64 %r105,%r687;
bra $L128;
$L127:
.loc 1 1323 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r667;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r303;
call (%value_in),_wcstoll_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r692,[%value_in];
}
mov.u64 %r105,%r692;
$L128:
.loc 1 1325 10
ld.u64 %r693,[%r191];
st.u64 [%r693],%r105;
bra $L123;
$L126:
.loc 1 1331 9
ld.u64 %r694,[%r191];
st.u32 [%r694],%r669;
$L123:
.loc 1 1333 17
add.u32 %r305,%r305,1;
$L121:
.loc 1 1335 15
sub.u64 %r695,%r55,%frame;
shr.s64 %r697,%r695,2;
.loc 1 1335 10
cvt.u32.u64 %r698,%r697;
add.u32 %r58,%r58,%r698;
.loc 1 1336 4
mov.u64 %r182,%r211;
bra $L6;
$L413:
.loc 1 1356 14
add.u64 %r699,%r33,-1;
.loc 1 1356 7
setp.le.u64 %r700,%r699,348;
@ %r700 bra $L201;
.loc 1 1359 19
cvt.u32.u64 %r701,%r33;
add.u32 %r197,%r701,-349;
.loc 1 1360 14
mov.u64 %r33,349;
bra $L129;
$L201:
.loc 1 1349 13
mov.u32 %r197,%r435;
$L129:
.loc 1 1362 10
or.b32 %r181,%r178,1920;
add.u32 %r213,%r58,1;
.loc 1 1351 9
mov.u32 %r200,0;
.loc 1 1350 9
mov.u32 %r198,%r200;
.loc 1 1348 13
mov.u64 %r194,0;
.loc 1 1364 15
mov.u64 %r192,%r194;
.loc 1 1363 11
mov.u64 %r190,%r194;
.loc 1 1346 9
mov.u64 %r189,%r194;
.loc 1 1365 11
mov.u64 %r55,%frame;
$L157:
add.u32 %r58,%r213,-1;
.loc 1 1367 12
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r307;
call (%value_in),_fgetwc_r,(%out_arg1,%out_arg2);
ld.param.u32 %r704,[%value_in];
}
setp.eq.u32 %r705,%r704,84;
@ %r705 bra $L130;
setp.gt.u32 %r706,%r704,84;
@ %r706 bra $L131;
setp.gt.u32 %r707,%r704,57;
@ %r707 bra $L132;
setp.gt.u32 %r708,%r704,48;
@ %r708 bra $L133;
setp.eq.u32 %r709,%r704,48;
@ %r709 bra $L134;
add.u32 %r710,%r704,-43;
and.b32 %r711,%r710,-3;
setp.eq.u32 %r712,%r711,0;
@ ! %r712 bra $L136;
bra $L135;
$L132:
setp.eq.u32 %r713,%r704,70;
@ %r713 bra $L137;
setp.gt.u32 %r714,%r704,70;
@ %r714 bra $L138;
setp.eq.u32 %r715,%r704,65;
@ %r715 bra $L139;
setp.eq.u32 %r716,%r704,69;
@ %r716 bra $L140;
bra $L136;
$L138:
setp.eq.u32 %r717,%r704,78;
@ %r717 bra $L141;
bra $L136;
$L131:
setp.eq.u32 %r718,%r704,105;
@ %r718 bra $L142;
setp.gt.u32 %r719,%r704,105;
@ %r719 bra $L143;
setp.eq.u32 %r720,%r704,101;
@ %r720 bra $L140;
setp.gt.u32 %r721,%r704,101;
@ %r721 bra $L144;
setp.eq.u32 %r722,%r704,89;
@ %r722 bra $L145;
setp.eq.u32 %r723,%r704,97;
@ %r723 bra $L139;
bra $L136;
$L144:
setp.eq.u32 %r724,%r704,102;
@ %r724 bra $L137;
bra $L136;
$L143:
setp.eq.u32 %r725,%r704,116;
@ %r725 bra $L130;
setp.eq.u32 %r726,%r704,121;
@ %r726 bra $L145;
setp.eq.u32 %r727,%r704,110;
@ %r727 bra $L141;
bra $L136;
$L134:
.loc 1 1375 15
and.b32 %r728,%r181,256;
.loc 1 1375 8
setp.eq.u32 %r729,%r728,0;
@ %r729 bra $L133;
.loc 1 1377 15
and.b32 %r181,%r181,-129;
.loc 1 1378 15
add.u64 %r190,%r190,1;
.loc 1 1513 8
mov.u32 %r58,%r213;
.loc 1 1379 12
setp.eq.u32 %r730,%r197,0;
@ %r730 bra $L146;
.loc 1 1381 16
add.u32 %r197,%r197,-1;
bra $L147;
$L133:
.loc 1 1396 18
add.u32 %r731,%r198,%r200;
.loc 1 1396 8
setp.ne.u32 %r732,%r731,0;
@ ! %r732 bra $L407;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L407:
.loc 1 1398 15
and.b32 %r181,%r181,-385;
.loc 1 1399 9
bra $L149;
$L135:
.loc 1 1405 15
and.b32 %r733,%r181,128;
.loc 1 1405 8
setp.eq.u32 %r734,%r733,0;
@ ! %r734 bra $L408;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L408:
.loc 1 1407 15
and.b32 %r181,%r181,-129;
.loc 1 1408 9
bra $L149;
$L141:
.loc 1 1413 18
cvt.u16.u32 %r736,%r198;
set.u32.eq.u16 %r737,%r736,0;
neg.s32 %r738,%r737;
.loc 1 1413 33
set.u32.eq.u64 %r740,%r190,0;
neg.s32 %r741,%r740;
.loc 1 1413 23
cvt.u16.u32 %r743,%r738;
cvt.u16.u32 %r744,%r741;
and.b16 %r742,%r743,%r744;
.loc 1 1413 8
cvt.u32.u16 %r745,%r742;
cvt.u16.u8 %r746,%r745;
setp.eq.u16 %r747,%r746,0;
@ %r747 bra $L150;
.loc 1 1414 19
and.b32 %r748,%r181,1792;
.loc 1 1414 9
setp.ne.u32 %r749,%r748,1792;
@ %r749 bra $L151;
.loc 1 1417 15
and.b32 %r181,%r181,-1921;
.loc 1 1418 18
mov.u32 %r198,1;
.loc 1 1419 9
mov.u64 %r190,0;
bra $L149;
$L150:
.loc 1 1421 8
setp.eq.u16 %r751,%r736,2;
@ %r751 bra $L202;
$L151:
.loc 1 1426 18
cvt.u16.u32 %r753,%r200;
set.u32.eq.u16 %r754,%r753,1;
neg.s32 %r755,%r754;
.loc 1 1426 35
set.u32.eq.u16 %r758,%r753,4;
neg.s32 %r759,%r758;
.loc 1 1426 23
cvt.u16.u32 %r761,%r755;
cvt.u16.u32 %r762,%r759;
or.b16 %r760,%r761,%r762;
.loc 1 1426 8
cvt.u32.u16 %r763,%r760;
cvt.u16.u8 %r764,%r763;
setp.eq.u16 %r765,%r764,0;
@ ! %r765 bra $L409;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L409:
.loc 1 1428 17
add.u16 %r767,%r753,1;
cvt.u32.u16 %r769,%r767;
cvt.s32.s8 %r200,%r769;
.loc 1 1429 9
bra $L149;
$L139:
.loc 1 1434 8
cvt.u16.u32 %r771,%r198;
setp.eq.u16 %r772,%r771,1;
@ %r772 bra $L203;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L142:
.loc 1 1441 18
cvt.u16.u32 %r774,%r200;
set.u32.eq.u16 %r775,%r774,0;
neg.s32 %r776,%r775;
.loc 1 1441 33
set.u32.eq.u64 %r778,%r190,0;
neg.s32 %r779,%r778;
.loc 1 1441 23
cvt.u16.u32 %r781,%r776;
cvt.u16.u32 %r782,%r779;
and.b16 %r780,%r781,%r782;
.loc 1 1441 8
cvt.u32.u16 %r783,%r780;
cvt.u16.u8 %r784,%r783;
setp.eq.u16 %r785,%r784,0;
@ %r785 bra $L152;
.loc 1 1442 19
and.b32 %r786,%r181,1792;
.loc 1 1442 9
setp.ne.u32 %r787,%r786,1792;
@ %r787 bra $L204;
.loc 1 1445 15
and.b32 %r181,%r181,-1921;
.loc 1 1446 18
mov.u32 %r200,1;
.loc 1 1447 9
mov.u64 %r190,0;
bra $L149;
$L152:
.loc 1 1449 18
cvt.u32.u32 %r788,%r200;
cvt.u16.u8 %r790,%r788;
add.u16 %r789,%r790,-3;
and.b16 %r792,%r789,-3;
.loc 1 1449 8
cvt.u32.u16 %r794,%r792;
cvt.u16.u8 %r795,%r794;
setp.ne.u16 %r796,%r795,0;
@ ! %r796 bra $L410;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L410:
.loc 1 1451 17
add.u16 %r797,%r790,1;
cvt.u32.u16 %r799,%r797;
cvt.s32.s8 %r200,%r799;
.loc 1 1452 9
bra $L149;
$L137:
.loc 1 1457 8
cvt.u16.u32 %r800,%r200;
setp.eq.u16 %r801,%r800,2;
@ %r801 bra $L205;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L130:
.loc 1 1465 8
cvt.u16.u32 %r802,%r200;
setp.eq.u16 %r803,%r802,6;
@ %r803 bra $L206;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L145:
.loc 1 1473 8
cvt.u16.u32 %r804,%r200;
setp.eq.u16 %r805,%r804,7;
@ %r805 bra $L207;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L140:
.loc 1 1482 16
and.b32 %r806,%r181,1280;
.loc 1 1482 8
setp.eq.u32 %r807,%r806,1024;
@ %r807 bra $L153;
.loc 1 1483 20
and.b32 %r808,%r181,1024;
.loc 1 1483 9
setp.eq.u32 %r809,%r808,0;
@ ! %r809 bra $L411;
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L411:
.loc 1 1483 29
setp.eq.u64 %r954,%r190,0;
@ %r954 bra $L148;
$L153:
.loc 1 1485 22
and.b32 %r811,%r181,512;
.loc 1 1485 12
setp.ne.u32 %r812,%r811,0;
@ %r812 bra $L154;
.loc 1 1487 17
sub.u64 %r192,%r190,%r189;
mov.u64 %r194,%r55;
$L154:
.loc 1 1492 11
and.b32 %r139,%r181,-1921;
.loc 1 1490 15
or.b32 %r181,%r139,384;
.loc 1 1493 16
mov.u64 %r190,0;
.loc 1 1494 9
bra $L149;
$L136:
.loc 1 1498 8
setp.ne.u32 %r813,%r24,%r704;
@ %r813 bra $L155;
.loc 1 1498 40
and.b32 %r814,%r181,512;
.loc 1 1498 30
setp.eq.u32 %r815,%r814,0;
@ %r815 bra $L155;
.loc 1 1500 15
and.b32 %r181,%r181,-641;
.loc 1 1502 9
mov.u64 %r189,%r190;
bra $L149;
$L155:
.loc 1 1506 11
setp.eq.u32 %r816,%r704,-1;
@ ! %r816 bra $L412;
setp.eq.u64 %r954,%r190,0;
bra $L156;
$L412:
setp.eq.u64 %r954,%r190,0;
bra $L148;
$L204:
mov.u32 %r200,0;
mov.u64 %r190,0;
setp.eq.u32 %r954,1,1;
$L148:
.loc 1 1507 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r704;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r820,[%value_in];
}
bra $L156;
$L202:
.loc 1 1423 18
mov.u32 %r198,3;
bra $L149;
$L203:
.loc 1 1436 18
mov.u32 %r198,2;
bra $L149;
$L205:
.loc 1 1459 18
mov.u32 %r200,3;
bra $L149;
$L206:
.loc 1 1467 18
mov.u32 %r200,7;
bra $L149;
$L207:
.loc 1 1475 18
mov.u32 %r200,8;
$L149:
.loc 1 1510 13
st.u32 [%r55],%r704;
.loc 1 1513 8
mov.u32 %r58,%r213;
.loc 1 1510 10
add.u64 %r55,%r55,4;
$L146:
.loc 1 1512 13
add.u64 %r33,%r33,-1;
.loc 1 1365 4
setp.eq.u64 %r821,%r33,0;
@ ! %r821 bra $L147;
setp.eq.u64 %r954,%r190,0;
bra $L156;
$L147:
add.u32 %r213,%r213,1;
bra $L157;
$L156:
.loc 1 1515 7
@ %r954 bra $L158;
.loc 1 1516 12
and.b32 %r181,%r181,-257;
$L158:
.loc 1 1525 17
add.u32 %r823,%r198,-1;
.loc 1 1525 7
setp.gt.u32 %r824,%r823,1;
@ %r824 bra $L159;
.loc 1 1530 14
setp.ge.u64 %r825,%frame,%r55;
@ %r825 bra $L1;
$L160:
.loc 1 1532 5
add.u64 %r55,%r55,-4;
ld.u32 %r827,[%r55];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r827;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r829,[%value_in];
}
.loc 1 1530 14
setp.lt.u64 %r830,%frame,%r55;
@ %r830 bra $L160;
bra $L1;
$L159:
.loc 1 1540 17
add.u32 %r831,%r200,-1;
.loc 1 1540 7
setp.gt.u32 %r832,%r831,6;
@ %r832 bra $L161;
.loc 1 1542 11
cvt.u16.u32 %r833,%r200;
setp.le.s16 %r834,%r833,2;
@ %r834 bra $L162;
.loc 1 1543 18
cvt.u32.u32 %r835,%r200;
cvt.u32.u8 %r291,%r835;
.loc 1 1543 9
setp.ne.u16 %r837,%r833,3;
@ %r837 bra $L208;
bra $L161;
$L162:
.loc 1 1550 11
setp.lt.u64 %r838,%frame,%r55;
@ %r838 bra $L164;
bra $L1;
$L208:
.loc 1 1543 9
mov.u32 %r233,%r58;
cvt.u16.u32 %r846,%r291;
cvt.u16.u32 %r851,%r233;
$L163:
.loc 1 1545 7
add.u64 %r55,%r55,-4;
ld.u32 %r840,[%r55];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r840;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r842,[%value_in];
}
.loc 1 1546 7
add.u32 %r233,%r233,-1;
.loc 1 1543 9
cvt.u16.u32 %r845,%r233;
add.u16 %r844,%r845,%r846;
sub.u16 %r849,%r844,%r851;
cvt.u32.u16 %r854,%r849;
cvt.s32.s8 %r853,%r854;
cvt.u16.u32 %r852,%r853;
setp.gt.s16 %r855,%r852,3;
@ %r855 bra $L163;
.loc 1 1546 7
mov.u32 %r58,%r233;
bra $L161;
$L164:
.loc 1 1552 9
add.u64 %r55,%r55,-4;
ld.u32 %r857,[%r55];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r857;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r859,[%value_in];
}
.loc 1 1550 11
setp.lt.u64 %r860,%frame,%r55;
@ %r860 bra $L164;
bra $L1;
$L161:
.loc 1 1563 14
and.b32 %r861,%r181,256;
.loc 1 1563 7
setp.eq.u32 %r862,%r861,0;
@ %r862 bra $L165;
.loc 1 1565 18
and.b32 %r863,%r181,1024;
.loc 1 1565 11
setp.eq.u32 %r864,%r863,0;
@ %r864 bra $L166;
.loc 1 1568 11
setp.ge.u64 %r865,%frame,%r55;
@ %r865 bra $L1;
$L167:
.loc 1 1570 9
add.u64 %r55,%r55,-4;
ld.u32 %r867,[%r55];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r867;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r869,[%value_in];
}
.loc 1 1568 11
setp.lt.u64 %r870,%frame,%r55;
@ %r870 bra $L167;
bra $L1;
$L166:
.loc 1 1576 12
ld.u32 %r169,[%r55+-4];
.loc 1 1578 27
and.b32 %r871,%r169,-33;
.loc 1 1578 11
setp.ne.u32 %r872,%r871,69;
@ %r872 bra $L168;
.loc 1 1576 10
add.u64 %r55,%r55,-4;
.loc 1 1577 8
add.u32 %r58,%r58,-1;
bra $L169;
$L168:
.loc 1 1580 5
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r169;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r876,[%value_in];
}
.loc 1 1581 7
ld.u32 %r169,[%r55+-8];
.loc 1 1582 5
add.u32 %r58,%r58,-2;
.loc 1 1581 7
add.u64 %r55,%r55,-8;
$L169:
.loc 1 1584 8
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r169;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r880,[%value_in];
}
$L165:
.loc 1 1586 15
and.b32 %r881,%r181,16;
.loc 1 1586 7
setp.ne.u32 %r882,%r881,0;
@ %r882 bra $L209;
.loc 1 1597 11
st.u32 [%r55],%r881;
.loc 1 1598 19
and.b32 %r884,%r181,1536;
.loc 1 1598 11
setp.ne.u32 %r885,%r884,1024;
@ %r885 bra $L170;
.loc 1 1601 13
sub.u64 %r235,%r189,%r190;
.loc 1 1606 11
setp.ne.u64 %r886,%r189,%r190;
@ %r886 bra $L210;
bra $L172;
$L170:
.loc 1 1604 16
setp.eq.u64 %r887,%r192,0;
@ %r887 bra $L172;
.loc 1 1605 55
add.u64 %r892,%r194,4;
.loc 1 1605 27
mov.u32 %r891,10;
mov.u64 %r890,0;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r892;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r890;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r891;
call (%value_in),_wcstol_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r893,[%value_in];
}
.loc 1 1605 25
sub.u64 %r235,%r893,%r192;
bra $L171;
$L210:
mov.u64 %r194,%r55;
$L171:
.loc 1 1611 8
setp.lt.u64 %r895,%r194,%r962;
.loc 1 1613 17
selp.u64 %r194,%r194,%r963,%r895;
.loc 1 1615 18
st.u64 [%stack],%r235;
cvta.const.u64 %r898,$LC0;
mov.u64 %r897,21;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r194;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r897;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r898;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r899,[%value_in];
}
$L172:
.loc 1 1624 16
mov.u64 %r903,0;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r903;
call (%value_in),_wcstod_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.f64 %r904,[%value_in];
}
.loc 1 830 11
add.u64 %r905,%r309,7;
and.b64 %r239,%r905,-8;
add.u64 %r309,%r239,8;
.loc 1 1626 18
and.b32 %r906,%r181,1;
.loc 1 1626 11
setp.eq.u32 %r907,%r906,0;
@ %r907 bra $L174;
.loc 1 1629 9
ld.u64 %r908,[%r239];
st.f64 [%r908],%r904;
bra $L175;
$L174:
.loc 1 1628 8
ld.u64 %r278,[%r239];
.loc 1 1631 23
and.b32 %r909,%r181,2;
.loc 1 1631 16
setp.eq.u32 %r910,%r909,0;
@ %r910 bra $L176;
.loc 1 1634 10
st.f64 [%r278],%r904;
bra $L175;
$L176:
.loc 1 1639 8
setp.num.f64 %r911,%r904,%r904;
@ %r911 bra $L177;
.loc 1 1640 14
cvta.const.u64 %r912,$LC1;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r912;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r913,[%value_in];
}
.loc 1 1640 12
st.f32 [%r278],%r913;
bra $L175;
$L177:
.loc 1 1642 12
cvt.rn.f32.f64 %r914,%r904;
st.f32 [%r278],%r914;
$L175:
.loc 1 1644 17
add.u32 %r305,%r305,1;
mov.u64 %r182,%r211;
bra $L6;
$L32:
.loc 1 1656 63
setp.eq.u32 %r915,%r305,0;
@ %r915 bra $L211;
.loc 1 1656 25
ld.u16 %r917,[%r307+16];
and.b16 %r916,%r917,64;
setp.ne.u16 %r918,%r916,0;
.loc 1 1656 63
selp.u32 %r305,-1,%r305,%r918;
bra $L1;
$L182:
.loc 1 561 10
mov.u32 %r305,%r168;
bra $L1;
$L211:
.loc 1 1656 63
mov.u32 %r305,-1;
bra $L1;
$L3:
$L178:
$L401:
.loc 1 568 6
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r326;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r923,[%value_in];
}
mov.u64 %r182,%r211;
bra $L6;
$L65:
.loc 1 975 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r476;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r927,[%value_in];
}
bra $L64;
$L72:
.loc 1 999 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r494;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r931,[%value_in];
}
bra $L71;
$L81:
.loc 1 1046 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r532;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r935,[%value_in];
}
bra $L80;
$L86:
.loc 1 1069 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r556;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r939,[%value_in];
}
mov.u32 %r58,%r199;
mov.u64 %r182,%r211;
bra $L6;
$L91:
.loc 1 1092 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r569;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r943,[%value_in];
}
bra $L90;
$L99:
.loc 1 1135 3
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r594;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r947,[%value_in];
}
bra $L98;
$L405:
.loc 1 866 4
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r306;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r432;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r307;
call (%value_in),_ungetwc_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r951,[%value_in];
}
.loc 1 872 7
setp.eq.u32 %r952,%r204,2;
@ %r952 bra $L179;
setp.eq.u32 %r953,%r204,3;
@ ! %r953 bra $L413;
bra $L180;
$L186:
.loc 1 588 7
mov.u64 %r71,_wcstoul_r;
mov.u32 %r31,8;
bra $L24;
$L187:
.loc 1 731 9
mov.u64 %r71,_wcstol_r;
bra $L24;
$L189:
.loc 1 743 9
mov.u64 %r71,_wcstoul_r;
.loc 1 744 9
mov.u32 %r31,10;
$L24:
.loc 1 724 6
mov.u32 %r303,%r31;
mov.u32 %r204,3;
bra $L47;
$L1:
.loc 1 1665 1
mov.u32 %value,%r305;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: vfwscanf
.visible .func (.param .u32 %value_out) vfwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 233 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 235 3
setp.eq.u64 %r28,%r23,0;
@ %r28 bra $L415;
ld.u32 %r29,[%r23+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L415;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
call __sinit,(%out_arg1);
}
$L415:
.loc 1 236 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfwscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 237 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __svfwscanf
.visible .func (.param .u32 %value_out) __svfwscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 244 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfwscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 245 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vfwscanf_r
.visible .func (.param .u32 %value_out) _vfwscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 255 3
setp.eq.u64 %r28,%r24,0;
@ %r28 bra $L421;
ld.u32 %r29,[%r24+80];
setp.ne.u32 %r30,%r29,0;
@ %r30 bra $L421;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
call __sinit,(%out_arg1);
}
$L421:
.loc 1 256 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),__svfwscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r36,[%value_in];
}
.loc 1 257 1
mov.u32 %value,%r36;
st.param.u32 [%value_out],%value;
ret;
}

/1898           1612277263  0     0     100666  2555      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: viprintf
.visible .func (.param .u32 %value_out) viprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/viprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _viprintf_r
.visible .func (.param .u32 %value_out) _viprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfiprintf_r
.extern .func (.param .u32 %value_out) _vfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: viprintf
.visible .func (.param .u32 %value_out) viprintf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 107 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 110 10
ld.u64 %r31,[%r23+16];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 111 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _viprintf_r
.visible .func (.param .u32 %value_out) _viprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 121 10
ld.u64 %r31,[%r24+16];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 122 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-viscanf.o/1612277263  0     0     100666  2545      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: viscanf
.visible .func (.param .u32 %value_out) viscanf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/viscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _viscanf_r
.visible .func (.param .u32 %value_out) _viscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __svfiscanf_r
.extern .func (.param .u32 %value_out) __svfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: viscanf
.visible .func (.param .u32 %value_out) viscanf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 91 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 94 10
ld.u64 %r31,[%r23+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 95 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _viscanf_r
.visible .func (.param .u32 %value_out) _viscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 105 10
ld.u64 %r31,[%r24+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 106 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-vprintf.o/1612277263  0     0     100666  2537      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vprintf
.visible .func (.param .u32 %value_out) vprintf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/vprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _vprintf_r
.visible .func (.param .u32 %value_out) _vprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _vfprintf_r
.extern .func (.param .u32 %value_out) _vfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vprintf
.visible .func (.param .u32 %value_out) vprintf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 31 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 34 10
ld.u64 %r31,[%r23+16];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 35 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vprintf_r
.visible .func (.param .u32 %value_out) _vprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 50 10
ld.u64 %r31,[%r24+16];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_vfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 51 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-vscanf.o/ 1612277263  0     0     100666  2530      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vscanf
.visible .func (.param .u32 %value_out) vscanf (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/vscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _vscanf_r
.visible .func (.param .u32 %value_out) _vscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __svfscanf_r
.extern .func (.param .u32 %value_out) __svfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vscanf
.visible .func (.param .u32 %value_out) vscanf (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
.loc 1 32 18
ld.global.u64 %r23,[_impure_ptr];
.loc 1 35 10
ld.u64 %r31,[%r23+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 36 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vscanf_r
.visible .func (.param .u32 %value_out) _vscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .u32 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 51 10
ld.u64 %r31,[%r24+8];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r31;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__svfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r32,[%value_in];
}
.loc 1 52 1
mov.u32 %value,%r32;
st.param.u32 [%value_out],%value;
ret;
}
/1916           1612277263  0     0     100666  3715      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vsiprintf
.visible .func (.param .u32 %value_out) vsiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vsiprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _vsiprintf_r
.visible .func (.param .u32 %value_out) _vsiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfiprintf_r
.extern .func (.param .u32 %value_out) _svfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vsiprintf
.visible .func (.param .u32 %value_out) vsiprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r35;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 38 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 53 22
st.u64 [%frame],%r25;
.loc 1 53 15
st.u64 [%frame+24],%r25;
.loc 1 54 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 54 22
st.u32 [%frame+12],%r28;
.loc 1 52 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 56 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r35,[%value_in];
}
.loc 1 57 5
ld.u64 %r23,[%frame];
.loc 1 57 9
mov.u32 %r36,0;
st.u8 [%r23],%r36;
.loc 1 39 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vsiprintf_r
.visible .func (.param .u32 %value_out) _vsiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r35;
.reg .u32 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 53 22
st.u64 [%frame],%r25;
.loc 1 53 15
st.u64 [%frame+24],%r25;
.loc 1 54 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 54 22
st.u32 [%frame+12],%r28;
.loc 1 52 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 56 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r35,[%value_in];
}
.loc 1 57 5
ld.u64 %r22,[%frame];
.loc 1 57 9
mov.u32 %r36,0;
st.u8 [%r22],%r36;
.loc 1 59 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}

/1935           1612277263  0     0     100666  4669      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vsiscanf
.visible .func (.param .u32 %value_out) vsiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vsiscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _vsiscanf_r
.visible .func (.param .u32 %value_out) _vsiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __seofread
.extern .func (.param .u32 %value_out) __seofread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ssvfiscanf_r
.extern .func (.param .u32 %value_out) __ssvfiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vsiscanf
.visible .func (.param .u32 %value_out) vsiscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u32 %r40;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 38 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 51 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 52 22
st.u64 [%frame],%r26;
.loc 1 52 15
st.u64 [%frame+24],%r26;
.loc 1 53 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 53 22
cvt.u32.u64 %r24,%r31;
st.u32 [%frame+8],%r24;
.loc 1 53 15
st.u32 [%frame+32],%r24;
.loc 1 54 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 55 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 56 15
st.u64 [%frame+120],%r33;
.loc 1 57 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 58 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r28;
call (%value_in),__ssvfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r40,[%value_in];
}
.loc 1 39 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vsiscanf_r
.visible .func (.param .u32 %value_out) _vsiscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u32 %r40;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
mov.u64 %r28,%ar3;
.loc 1 51 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 52 22
st.u64 [%frame],%r26;
.loc 1 52 15
st.u64 [%frame+24],%r26;
.loc 1 53 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 53 22
cvt.u32.u64 %r23,%r31;
st.u32 [%frame+8],%r23;
.loc 1 53 15
st.u32 [%frame+32],%r23;
.loc 1 54 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 55 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 56 15
st.u64 [%frame+120],%r33;
.loc 1 57 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 58 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r28;
call (%value_in),__ssvfiscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r40,[%value_in];
}
.loc 1 59 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}

/1953           1612277263  0     0     100666  6774      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vsniprintf
.visible .func (.param .u32 %value_out) vsniprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vsniprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _vsniprintf_r
.visible .func (.param .u32 %value_out) _vsniprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfiprintf_r
.extern .func (.param .u32 %value_out) _svfiprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vsniprintf
.visible .func (.param .u32 %value_out) vsniprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .u16 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u16 %r48;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u32 %r56;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u64 %r30,%ar2;
mov.u64 %r31,%ar3;
.loc 1 40 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 55 6
setp.le.u64 %r32,%r29,2147483647;
@ %r32 bra $L2;
.loc 1 57 19
mov.u32 %r33,139;
st.u32 [%r22],%r33;
.loc 1 58 14
mov.u32 %r27,-1;
bra $L1;
$L2:
.loc 1 60 12
mov.u16 %r34,520;
st.u16 [%frame+16],%r34;
.loc 1 61 22
st.u64 [%frame],%r28;
.loc 1 61 15
st.u64 [%frame+24],%r28;
.loc 1 62 22
setp.eq.u64 %r35,%r29,0;
@ %r35 bra $L4;
.loc 1 62 41
cvt.u32.u64 %r36,%r29;
add.u32 %r25,%r36,-1;
.loc 1 62 22
st.u32 [%frame+12],%r25;
.loc 1 62 15
st.u32 [%frame+32],%r25;
.loc 1 63 11
mov.u16 %r37,-1;
st.u16 [%frame+18],%r37;
.loc 1 64 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r42,[%value_in];
}
mov.u32 %r27,%r42;
.loc 1 65 6
setp.lt.s32 %r43,%r27,-1;
@ %r43 bra $L5;
$L7:
.loc 1 68 7
ld.u64 %r26,[%frame];
.loc 1 68 11
mov.u32 %r44,0;
st.u8 [%r26],%r44;
.loc 1 40 10
bra $L1;
$L4:
.loc 1 62 22
cvt.u32.u64 %r46,%r29;
st.u32 [%frame+12],%r46;
.loc 1 62 15
st.u32 [%frame+32],%r46;
.loc 1 63 11
mov.u16 %r48,-1;
st.u16 [%frame+18],%r48;
.loc 1 64 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r53,[%value_in];
}
mov.u32 %r27,%r53;
.loc 1 65 6
setp.lt.s32 %r54,%r27,-1;
@ ! %r54 bra $L1;
bra $L6;
$L5:
.loc 1 66 17
mov.u32 %r55,139;
st.u32 [%r22],%r55;
bra $L7;
$L6:
mov.u32 %r56,139;
st.u32 [%r22],%r56;
$L1:
.loc 1 41 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vsniprintf_r
.visible .func (.param .u32 %value_out) _vsniprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .u16 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u16 %r48;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u32 %r56;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u64 %r30,%ar3;
mov.u64 %r31,%ar4;
.loc 1 55 6
setp.le.u64 %r32,%r29,2147483647;
@ %r32 bra $L9;
.loc 1 57 19
mov.u32 %r33,139;
st.u32 [%r27],%r33;
.loc 1 58 14
mov.u32 %r26,-1;
bra $L8;
$L9:
.loc 1 60 12
mov.u16 %r34,520;
st.u16 [%frame+16],%r34;
.loc 1 61 22
st.u64 [%frame],%r28;
.loc 1 61 15
st.u64 [%frame+24],%r28;
.loc 1 62 22
setp.eq.u64 %r35,%r29,0;
@ %r35 bra $L11;
.loc 1 62 41
cvt.u32.u64 %r36,%r29;
add.u32 %r25,%r36,-1;
.loc 1 62 22
st.u32 [%frame+12],%r25;
.loc 1 62 15
st.u32 [%frame+32],%r25;
.loc 1 63 11
mov.u16 %r37,-1;
st.u16 [%frame+18],%r37;
.loc 1 64 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r42,[%value_in];
}
mov.u32 %r26,%r42;
.loc 1 65 6
setp.lt.s32 %r43,%r26,-1;
@ %r43 bra $L12;
$L14:
.loc 1 68 7
ld.u64 %r24,[%frame];
.loc 1 68 11
mov.u32 %r44,0;
st.u8 [%r24],%r44;
bra $L8;
$L11:
.loc 1 62 22
cvt.u32.u64 %r46,%r29;
st.u32 [%frame+12],%r46;
.loc 1 62 15
st.u32 [%frame+32],%r46;
.loc 1 63 11
mov.u16 %r48,-1;
st.u16 [%frame+18],%r48;
.loc 1 64 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfiprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r53,[%value_in];
}
mov.u32 %r26,%r53;
.loc 1 65 6
setp.lt.s32 %r54,%r26,-1;
@ ! %r54 bra $L8;
bra $L13;
$L12:
.loc 1 66 17
mov.u32 %r55,139;
st.u32 [%r27],%r55;
bra $L14;
$L13:
mov.u32 %r56,139;
st.u32 [%r27],%r56;
$L8:
.loc 1 70 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}
/1973           1612277263  0     0     100666  6759      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vsnprintf
.visible .func (.param .u32 %value_out) vsnprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdio/vsnprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _vsnprintf_r
.visible .func (.param .u32 %value_out) _vsnprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfprintf_r
.extern .func (.param .u32 %value_out) _svfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vsnprintf
.visible .func (.param .u32 %value_out) vsnprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .u16 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u16 %r48;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u32 %r56;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u64 %r30,%ar2;
mov.u64 %r31,%ar3;
.loc 1 40 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 61 6
setp.le.u64 %r32,%r29,2147483647;
@ %r32 bra $L2;
.loc 1 63 19
mov.u32 %r33,139;
st.u32 [%r22],%r33;
.loc 1 64 14
mov.u32 %r27,-1;
bra $L1;
$L2:
.loc 1 66 12
mov.u16 %r34,520;
st.u16 [%frame+16],%r34;
.loc 1 67 22
st.u64 [%frame],%r28;
.loc 1 67 15
st.u64 [%frame+24],%r28;
.loc 1 68 22
setp.eq.u64 %r35,%r29,0;
@ %r35 bra $L4;
.loc 1 68 41
cvt.u32.u64 %r36,%r29;
add.u32 %r25,%r36,-1;
.loc 1 68 22
st.u32 [%frame+12],%r25;
.loc 1 68 15
st.u32 [%frame+32],%r25;
.loc 1 69 11
mov.u16 %r37,-1;
st.u16 [%frame+18],%r37;
.loc 1 70 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r42,[%value_in];
}
mov.u32 %r27,%r42;
.loc 1 71 6
setp.lt.s32 %r43,%r27,-1;
@ %r43 bra $L5;
$L7:
.loc 1 74 7
ld.u64 %r26,[%frame];
.loc 1 74 11
mov.u32 %r44,0;
st.u8 [%r26],%r44;
.loc 1 40 10
bra $L1;
$L4:
.loc 1 68 22
cvt.u32.u64 %r46,%r29;
st.u32 [%frame+12],%r46;
.loc 1 68 15
st.u32 [%frame+32],%r46;
.loc 1 69 11
mov.u16 %r48,-1;
st.u16 [%frame+18],%r48;
.loc 1 70 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r53,[%value_in];
}
mov.u32 %r27,%r53;
.loc 1 71 6
setp.lt.s32 %r54,%r27,-1;
@ ! %r54 bra $L1;
bra $L6;
$L5:
.loc 1 72 17
mov.u32 %r55,139;
st.u32 [%r22],%r55;
bra $L7;
$L6:
mov.u32 %r56,139;
st.u32 [%r22],%r56;
$L1:
.loc 1 41 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vsnprintf_r
.visible .func (.param .u32 %value_out) _vsnprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
.reg .u32 %r33;
.reg .u16 %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u32 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u32 %r46;
.reg .u16 %r48;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u32 %r55;
.reg .u32 %r56;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u64 %r30,%ar3;
mov.u64 %r31,%ar4;
.loc 1 61 6
setp.le.u64 %r32,%r29,2147483647;
@ %r32 bra $L9;
.loc 1 63 19
mov.u32 %r33,139;
st.u32 [%r27],%r33;
.loc 1 64 14
mov.u32 %r26,-1;
bra $L8;
$L9:
.loc 1 66 12
mov.u16 %r34,520;
st.u16 [%frame+16],%r34;
.loc 1 67 22
st.u64 [%frame],%r28;
.loc 1 67 15
st.u64 [%frame+24],%r28;
.loc 1 68 22
setp.eq.u64 %r35,%r29,0;
@ %r35 bra $L11;
.loc 1 68 41
cvt.u32.u64 %r36,%r29;
add.u32 %r25,%r36,-1;
.loc 1 68 22
st.u32 [%frame+12],%r25;
.loc 1 68 15
st.u32 [%frame+32],%r25;
.loc 1 69 11
mov.u16 %r37,-1;
st.u16 [%frame+18],%r37;
.loc 1 70 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r42,[%value_in];
}
mov.u32 %r26,%r42;
.loc 1 71 6
setp.lt.s32 %r43,%r26,-1;
@ %r43 bra $L12;
$L14:
.loc 1 74 7
ld.u64 %r24,[%frame];
.loc 1 74 11
mov.u32 %r44,0;
st.u8 [%r24],%r44;
bra $L8;
$L11:
.loc 1 68 22
cvt.u32.u64 %r46,%r29;
st.u32 [%frame+12],%r46;
.loc 1 68 15
st.u32 [%frame+32],%r46;
.loc 1 69 11
mov.u16 %r48,-1;
st.u16 [%frame+18],%r48;
.loc 1 70 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r31;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r53,[%value_in];
}
mov.u32 %r26,%r53;
.loc 1 71 6
setp.lt.s32 %r54,%r26,-1;
@ ! %r54 bra $L8;
bra $L13;
$L12:
.loc 1 72 17
mov.u32 %r55,139;
st.u32 [%r27],%r55;
bra $L14;
$L13:
mov.u32 %r56,139;
st.u32 [%r27],%r56;
$L8:
.loc 1 76 1
mov.u32 %value,%r26;
st.param.u32 [%value_out],%value;
ret;
}

/1992           1612277263  0     0     100666  3702      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vsprintf
.visible .func (.param .u32 %value_out) vsprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vsprintf.c"
// BEGIN GLOBAL FUNCTION DECL: _vsprintf_r
.visible .func (.param .u32 %value_out) _vsprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _svfprintf_r
.extern .func (.param .u32 %value_out) _svfprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vsprintf
.visible .func (.param .u32 %value_out) vsprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r35;
.reg .u32 %r36;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 38 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 59 22
st.u64 [%frame],%r25;
.loc 1 59 15
st.u64 [%frame+24],%r25;
.loc 1 60 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 60 22
st.u32 [%frame+12],%r28;
.loc 1 58 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 62 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r35,[%value_in];
}
.loc 1 63 5
ld.u64 %r23,[%frame];
.loc 1 63 9
mov.u32 %r36,0;
st.u8 [%r23],%r36;
.loc 1 39 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vsprintf_r
.visible .func (.param .u32 %value_out) _vsprintf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u32 %r28;
.reg .u32 %r30;
.reg .u32 %r35;
.reg .u32 %r36;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 59 22
st.u64 [%frame],%r25;
.loc 1 59 15
st.u64 [%frame+24],%r25;
.loc 1 60 15
mov.u32 %r28,2147483647;
st.u32 [%frame+32],%r28;
.loc 1 60 22
st.u32 [%frame+12],%r28;
.loc 1 58 12
mov.u32 %r30,-65016;
st.u32 [%frame+16],%r30;
.loc 1 62 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),_svfprintf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r35,[%value_in];
}
.loc 1 63 5
ld.u64 %r22,[%frame];
.loc 1 63 9
mov.u32 %r36,0;
st.u8 [%r22],%r36;
.loc 1 65 1
mov.u32 %value,%r35;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-vsscanf.o/1612277263  0     0     100666  4656      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: vsscanf
.visible .func (.param .u32 %value_out) vsscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/vsscanf.c"
// BEGIN GLOBAL FUNCTION DECL: _vsscanf_r
.visible .func (.param .u32 %value_out) _vsscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __seofread
.extern .func (.param .u32 %value_out) __seofread (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ssvfscanf_r
.extern .func (.param .u32 %value_out) __ssvfscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DEF: vsscanf
.visible .func (.param .u32 %value_out) vsscanf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u32 %r40;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 38 10
ld.global.u64 %r22,[_impure_ptr];
.loc 1 57 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 58 22
st.u64 [%frame],%r26;
.loc 1 58 15
st.u64 [%frame+24],%r26;
.loc 1 59 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 59 22
cvt.u32.u64 %r24,%r31;
st.u32 [%frame+8],%r24;
.loc 1 59 15
st.u32 [%frame+32],%r24;
.loc 1 60 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 61 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 62 15
st.u64 [%frame+120],%r33;
.loc 1 63 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 64 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r28;
call (%value_in),__ssvfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r40,[%value_in];
}
.loc 1 39 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _vsscanf_r
.visible .func (.param .u32 %value_out) _vsscanf_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[176];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u16 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u16 %r35;
.reg .u32 %r40;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u64 %r27,%ar2;
mov.u64 %r28,%ar3;
.loc 1 57 12
mov.u16 %r29,516;
st.u16 [%frame+16],%r29;
.loc 1 58 22
st.u64 [%frame],%r26;
.loc 1 58 15
st.u64 [%frame+24],%r26;
.loc 1 59 24
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r26;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r31,[%value_in];
}
.loc 1 59 22
cvt.u32.u64 %r23,%r31;
st.u32 [%frame+8],%r23;
.loc 1 59 15
st.u32 [%frame+32],%r23;
.loc 1 60 11
mov.u64 %r32,__seofread;
st.u64 [%frame+56],%r32;
.loc 1 61 15
mov.u64 %r33,0;
st.u64 [%frame+88],%r33;
.loc 1 62 15
st.u64 [%frame+120],%r33;
.loc 1 63 11
mov.u16 %r35,-1;
st.u16 [%frame+18],%r35;
.loc 1 64 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r25;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r28;
call (%value_in),__ssvfscanf_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r40,[%value_in];
}
.loc 1 65 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-wbuf.o/   1612277263  0     0     100666  5570      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __swbuf_r
.visible .func (.param .u32 %value_out) __swbuf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdio/wbuf.c"
// BEGIN GLOBAL FUNCTION DECL: __swbuf
.visible .func (.param .u32 %value_out) __swbuf (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.extern .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _fflush_r
.extern .func (.param .u32 %value_out) _fflush_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __swbuf_r
.visible .func (.param .u32 %value_out) __swbuf_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r31;
.reg .u32 %r42;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u64 %r49;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .pred %r52;
.reg .u32 %r53;
.reg .pred %r54;
.reg .u32 %r56;
.reg .u16 %r57;
.reg .u16 %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .u32 %r63;
.reg .pred %r64;
.reg .u32 %r65;
.reg .u16 %r66;
.reg .u16 %r67;
.reg .pred %r68;
.reg .u16 %r69;
.reg .u32 %r71;
.reg .u32 %r72;
.reg .u64 %r73;
.reg .u32 %r74;
.reg .pred %r75;
.reg .u32 %r78;
.reg .pred %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u64 %r82;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u32 %r87;
.reg .u32 %r88;
.reg .u16 %r89;
.reg .u16 %r91;
.reg .u16 %r94;
.reg .u16 %r95;
.reg .u32 %r97;
.reg .u16 %r98;
.reg .pred %r99;
.reg .u32 %r102;
.reg .pred %r103;
mov.u64 %r49,%ar0;
mov.u32 %r50,%ar1;
mov.u64 %r51,%ar2;
.loc 1 44 3
setp.eq.u64 %r52,%r49,0;
@ %r52 bra $L2;
ld.u32 %r53,[%r49+80];
setp.ne.u32 %r54,%r53,0;
@ %r54 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 54 10
ld.u32 %r56,[%r51+40];
st.u32 [%r51+12],%r56;
.loc 1 55 7
ld.s16 %r24,[%r51+16];
.loc 1 55 6
cvt.u16.u32 %r58,%r24;
and.b16 %r57,%r58,8;
setp.eq.u16 %r59,%r57,0;
@ %r59 bra $L3;
.loc 1 55 7
ld.u64 %r25,[%r51+24];
setp.ne.u64 %r60,%r25,0;
@ %r60 bra $L4;
$L3:
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
call (%value_in),__swsetup_r,(%out_arg1,%out_arg2);
ld.param.u32 %r63,[%value_in];
}
setp.eq.u32 %r64,%r63,0;
@ %r64 bra $L5;
$L10:
.loc 1 56 12
mov.u32 %r48,-1;
bra $L1;
$L5:
.loc 1 59 3
ld.s16 %r24,[%r51+16];
.loc 1 71 23
ld.u64 %r25,[%r51+24];
$L4:
.loc 1 57 7
cvt.u32.u32 %r65,%r50;
and.b32 %r48,%r50,255;
.loc 1 59 3
cvt.u16.u32 %r67,%r24;
and.b16 %r66,%r67,8192;
setp.ne.u16 %r68,%r66,0;
@ %r68 bra $L7;
or.b16 %r69,%r67,8192;
st.u16 [%r51+16],%r69;
ld.u32 %r72,[%r51+172];
and.b32 %r71,%r72,-8193;
st.u32 [%r51+172],%r71;
$L7:
.loc 1 71 9
ld.u64 %r31,[%r51];
.loc 1 71 14
sub.u64 %r73,%r31,%r25;
.loc 1 71 5
cvt.u32.u64 %r42,%r73;
.loc 1 72 6
ld.u32 %r74,[%r51+32];
setp.le.s32 %r75,%r74,%r42;
@ %r75 bra $L8;
.loc 1 80 6
add.u32 %r47,%r42,1;
bra $L9;
$L8:
.loc 1 74 11
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r78,[%value_in];
}
.loc 1 74 10
setp.ne.u32 %r79,%r78,0;
@ %r79 bra $L10;
.loc 1 79 6
ld.u64 %r31,[%r51];
mov.u32 %r47,1;
$L9:
.loc 1 78 9
ld.u32 %r81,[%r51+12];
add.u32 %r80,%r81,-1;
st.u32 [%r51+12],%r80;
.loc 1 79 10
add.u64 %r82,%r31,1;
st.u64 [%r51],%r82;
.loc 1 79 13
st.u8 [%r31],%r65;
.loc 1 80 6
ld.u32 %r84,[%r51+32];
setp.eq.u32 %r85,%r84,%r47;
@ %r85 bra $L11;
.loc 1 80 52
set.u32.eq.u32 %r87,%r48,10;
neg.s32 %r88,%r87;
.loc 1 80 28
ld.u16 %r89,[%r51+16];
and.b16 %r91,%r89,1;
.loc 1 80 52
cvt.u16.u32 %r95,%r88;
and.b16 %r94,%r95,%r91;
cvt.u32.u16 %r97,%r94;
cvt.u16.u8 %r98,%r97;
setp.eq.u16 %r99,%r98,0;
@ %r99 bra $L1;
$L11:
.loc 1 81 9
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r49;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r51;
call (%value_in),_fflush_r,(%out_arg1,%out_arg2);
ld.param.u32 %r102,[%value_in];
}
.loc 1 81 8
setp.ne.u32 %r103,%r102,0;
@ %r103 bra $L10;
$L1:
.loc 1 84 1
mov.u32 %value,%r48;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __swbuf
.visible .func (.param .u32 %value_out) __swbuf (.param .u32 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u32 %r30;
mov.u32 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 93 10
ld.global.u64 %r29,[_impure_ptr];
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r29;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),__swbuf_r,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r30,[%value_in];
}
.loc 1 94 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-wcscat.o/ 1612277263  0     0     100666  1512      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcscat
.visible .func (.param .u64 %value_out) wcscat (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcscat.c"
// BEGIN GLOBAL FUNCTION DEF: wcscat
.visible .func (.param .u64 %value_out) wcscat (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .pred %r37;
.reg .u32 %r38;
mov.u64 %r30,%ar0;
mov.u64 %r31,%ar1;
.loc 1 72 9
ld.u32 %r32,[%r30];
setp.eq.u32 %r33,%r32,0;
@ %r33 bra $L6;
mov.u64 %r26,%r30;
$L3:
.loc 1 73 6
add.u64 %r26,%r26,4;
.loc 1 72 9
ld.u32 %r34,[%r26];
setp.ne.u32 %r35,%r34,0;
@ %r35 bra $L3;
bra $L2;
$L6:
mov.u64 %r26,%r30;
$L2:
.loc 1 76 10
ld.u32 %r23,[%r31];
.loc 1 76 9
setp.eq.u32 %r36,%r23,0;
@ %r36 bra $L4;
mov.u64 %r24,%r26;
$L5:
.loc 1 77 14
add.u64 %r31,%r31,4;
mov.u64 %r25,%r24;
add.u64 %r24,%r24,4;
mov.u64 %r26,%r24;
.loc 1 77 10
st.u32 [%r25],%r23;
.loc 1 76 10
ld.u32 %r23,[%r31];
.loc 1 76 9
setp.ne.u32 %r37,%r23,0;
@ %r37 bra $L5;
$L4:
.loc 1 78 6
mov.u32 %r38,0;
st.u32 [%r26],%r38;
.loc 1 80 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcschr.o/ 1612277263  0     0     100666  949       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcschr
.visible .func (.param .u64 %value_out) wcschr (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcschr.c"
// BEGIN GLOBAL FUNCTION DEF: wcschr
.visible .func (.param .u64 %value_out) wcschr (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .pred %r26;
.reg .pred %r27;
mov.u64 %r24,%ar0;
mov.u32 %r25,%ar1;
$L3:
.loc 1 69 11
ld.u32 %r22,[%r24];
.loc 1 69 10
setp.eq.u32 %r26,%r22,%r25;
@ %r26 bra $L2;
.loc 1 74 16
add.u64 %r24,%r24,4;
.loc 1 74 5
setp.ne.u32 %r27,%r22,0;
@ %r27 bra $L3;
.loc 1 75 10
mov.u64 %r24,0;
$L2:
.loc 1 76 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcscmp.o/ 1612277263  0     0     100666  1059      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcscmp
.visible .func (.param .u32 %value_out) wcscmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcscmp.c"
// BEGIN GLOBAL FUNCTION DEF: wcscmp
.visible .func (.param .u32 %value_out) wcscmp (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .pred %r28;
.reg .pred %r29;
mov.u64 %r26,%ar0;
mov.u64 %r23,%ar1;
.loc 1 74 9
bra $L2;
$L4:
.loc 1 75 12
add.u64 %r26,%r26,4;
.loc 1 75 8
add.u64 %r23,%r23,4;
setp.eq.u32 %r28,%r25,0;
@ %r28 bra $L1;
$L2:
.loc 1 74 10
ld.u32 %r25,[%r26];
.loc 1 74 17
ld.u32 %r22,[%r23];
.loc 1 74 9
setp.eq.u32 %r29,%r25,%r22;
@ %r29 bra $L4;
.loc 1 77 15
sub.u32 %r25,%r25,%r22;
$L1:
.loc 1 78 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-wcscoll.o/1612277263  0     0     100666  1054      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcscoll
.visible .func (.param .u32 %value_out) wcscoll (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcscoll.c"
// BEGIN GLOBAL FUNCTION DECL: wcscmp
.extern .func (.param .u32 %value_out) wcscmp (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: wcscoll
.visible .func (.param .u32 %value_out) wcscoll (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u32 %r27;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 40 10
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call (%value_in),wcscmp,(%out_arg1,%out_arg2);
ld.param.u32 %r27,[%value_in];
}
.loc 1 41 1
mov.u32 %value,%r27;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-wcscpy.o/ 1612277263  0     0     100666  1289      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcscpy
.visible .func (.param .u64 %value_out) wcscpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcscpy.c"
// BEGIN GLOBAL FUNCTION DEF: wcscpy
.visible .func (.param .u64 %value_out) wcscpy (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
.reg .u32 %r33;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 66 7
mov.u32 %r30,0;
st.u32 [%r28],%r30;
.loc 1 69 10
ld.u32 %r23,[%r29];
.loc 1 69 9
setp.eq.u32 %r31,%r23,0;
@ %r31 bra $L4;
mov.u64 %r22,%r28;
$L3:
.loc 1 70 14
add.u64 %r29,%r29,4;
mov.u64 %r24,%r22;
add.u64 %r22,%r22,4;
mov.u64 %r25,%r22;
.loc 1 70 10
st.u32 [%r24],%r23;
.loc 1 69 10
ld.u32 %r23,[%r29];
.loc 1 69 9
setp.ne.u32 %r32,%r23,0;
@ %r32 bra $L3;
bra $L2;
$L4:
mov.u64 %r25,%r28;
$L2:
.loc 1 71 6
mov.u32 %r33,0;
st.u32 [%r25],%r33;
.loc 1 74 1
mov.u64 %value,%r28;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcscspn.o/1612277263  0     0     100666  1706      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcscspn
.visible .func (.param .u64 %value_out) wcscspn (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcscspn.c"
// BEGIN GLOBAL FUNCTION DEF: wcscspn
.visible .func (.param .u64 %value_out) wcscspn (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .u64 %r36;
.reg .pred %r38;
.reg .pred %r39;
.reg .u64 %r40;
.reg .pred %r44;
mov.u64 %r32,%ar0;
mov.u64 %r33,%ar1;
.loc 1 66 10
ld.u32 %r23,[%r32];
.loc 1 66 9
setp.eq.u32 %r34,%r23,0;
@ %r34 bra $L7;
.loc 1 69 14
ld.u32 %r26,[%r33];
mov.u64 %r24,%r32;
setp.ne.u32 %r44,%r26,0;
bra $L3;
$L8:
.loc 1 69 13
mov.u64 %r25,%r33;
mov.u32 %r22,%r26;
$L5:
.loc 1 71 7
setp.ne.u32 %r35,%r23,%r22;
@ %r35 bra $L4;
.loc 1 79 13
sub.u64 %r36,%r24,%r32;
shr.s64 %r31,%r36,2;
bra $L1;
$L4:
.loc 1 73 5
add.u64 %r25,%r25,4;
.loc 1 69 14
ld.u32 %r22,[%r25];
.loc 1 69 13
setp.ne.u32 %r38,%r22,0;
@ %r38 bra $L5;
$L6:
.loc 1 75 8
add.u64 %r24,%r24,4;
.loc 1 66 10
ld.u32 %r23,[%r24];
.loc 1 66 9
setp.ne.u32 %r39,%r23,0;
@ %r39 bra $L3;
.loc 1 79 13
sub.u64 %r40,%r24,%r32;
shr.s64 %r31,%r40,2;
bra $L1;
$L3:
.loc 1 69 13
@ %r44 bra $L8;
bra $L6;
$L7:
.loc 1 66 9
mov.u64 %r31,0;
$L2:
$L1:
.loc 1 80 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
/2010           1612277263  0     0     100666  76052     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: iso_year_adjust$isra$0
.func (.param .u32 %value_out) iso_year_adjust$isra$0 (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2);
.file 1 "../../../../../newlib/libc/time/../time/strftime.c"
// BEGIN FUNCTION DECL: __strftime$isra$0
.func (.param .u64 %value_out) __strftime$isra$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: __ctloc
.visible .func (.param .u64 %value_out) __ctloc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcsftime
.visible .func (.param .u64 %value_out) wcsftime (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcsftime_l
.visible .func (.param .u64 %value_out) wcsftime_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL VAR DECL: _C_time_locale
.extern .const .align 8 .u64 _C_time_locale[63];
// BEGIN GLOBAL VAR DECL: _tzname
.extern .global .align 8 .u64 _tzname[2];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: wcstoul
.extern .func (.param .u64 %value_out) wcstoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: mbstowcs
.extern .func (.param .u64 %value_out) mbstowcs (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: abs
.extern .func (.param .u32 %value_out) abs (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: swprintf
.extern .func (.param .u32 %value_out) swprintf (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcscpy
.extern .func (.param .u64 %value_out) wcscpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: towlower
.extern .func (.param .u32 %value_out) towlower (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: __tz_lock
.extern .func __tz_lock;
// BEGIN GLOBAL FUNCTION DECL: _tzset_unlocked
.extern .func _tzset_unlocked;
// BEGIN GLOBAL FUNCTION DECL: __gettzinfo
.extern .func (.param .u64 %value_out) __gettzinfo;
// BEGIN GLOBAL FUNCTION DECL: __tz_unlock
.extern .func __tz_unlock;
// BEGIN GLOBAL FUNCTION DECL: labs
.extern .func (.param .u64 %value_out) labs (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC9
.const .align 4 .u32 $LC9[8] =
{89,45,37,109,45,37,100,0 };
// BEGIN VAR DEF: $LC5
.const .align 4 .u32 $LC5[5] =
{37,46,50,100,0 };
// BEGIN VAR DEF: $LC10
.const .align 4 .u32 $LC10[4] =
{46,42,117,0 };
// BEGIN VAR DEF: $LC11
.const .align 4 .u32 $LC11[5] =
{37,46,51,100,0 };
// BEGIN VAR DEF: $LC12
.const .align 4 .u32 $LC12[10] =
{37,46,50,100,58,37,46,50,100,0 };
// BEGIN VAR DEF: $LC13
.const .align 4 .u32 $LC13[5] =
{37,108,108,100,0 };
// BEGIN VAR DEF: $LC14
.const .align 4 .u32 $LC14[15] =
{37,46,50,100,58,37,46,50,100,58,37,46,50,100,0 };
// BEGIN VAR DEF: $LC15
.const .align 4 .u32 $LC15[12] =
{37,43,48,51,108,100,37,46,50,108,100,0 };
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[1] =
{0 };
// BEGIN VAR DEF: $LC1
.const .align 4 .u32 $LC1[8] =
{37,115,37,48,46,42,100,0 };
// BEGIN VAR DEF: $LC2
.const .align 4 .u32 $LC2[7] =
{37,115,37,46,42,100,0 };
// BEGIN VAR DEF: $LC3
.const .align 1 .u8 $LC3[2] =
{43,0 };
// BEGIN VAR DEF: $LC4
.const .align 1 .u8 $LC4[2] =
{45,0 };
// BEGIN VAR DEF: $LC6
.const .align 4 .u32 $LC6[4] =
{37,50,100,0 };
// BEGIN VAR DEF: $LC7
.const .align 4 .u32 $LC7[15] =
{37,46,50,100,47,37,46,50,100,47,37,46,50,100,0 };
// BEGIN VAR DEF: $LC8
.const .align 4 .u32 $LC8[4] =
{37,108,117,0 };
// BEGIN FUNCTION DEF: iso_year_adjust$isra$0
.func (.param .u32 %value_out) iso_year_adjust$isra$0 (.param .u32 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r31;
.reg .u32 %r34;
.reg .u32 %r42;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .u32 %r52;
.reg .pred %r58;
.reg .u32 %r60;
.reg .u32 %r67;
.reg .u32 %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u64 %r74;
.reg .u64 %r75;
.reg .u64 %r76;
.reg .u32 %r78;
.reg .u64 %r80;
.reg .u64 %r81;
.reg .u64 %r82;
.reg .pred %r86;
mov.u32 %r45,%ar0;
mov.u32 %r46,%ar1;
mov.u32 %r47,%ar2;
.loc 1 350 14
setp.lt.s32 %r48,%r45,0;
selp.u32 %r23,1900,-100,%r48;
add.u32 %r24,%r23,%r45;
and.b32 %r49,%r45,3;
setp.ne.u32 %r50,%r49,0;
@ %r50 bra $L3;
rem.s32 %r52,%r24,100;
setp.ne.u32 %r58,%r52,0;
@ %r58 bra $L10;
$L3:
rem.s32 %r60,%r24,400;
set.u32.eq.u32 %r67,%r60,0;
neg.s32 %r31,%r67;
bra $L4;
$L10:
mov.u32 %r31,1;
$L4:
.loc 1 356 11
shl.b32 %r69,%r47,4;
add.u32 %r70,%r46,%r46;
add.u32 %r71,%r69,%r70;
add.u32 %r34,%r71,%r31;
.loc 1 356 3
setp.gt.s32 %r72,%r34,33;
@ %r72 bra $L5;
setp.ge.s32 %r73,%r34,0;
@ %r73 bra $L6;
.loc 1 385 10
mov.u32 %r44,0;
bra $L1;
$L8:
mov.u64 %r75,1;
shl.b64 %r74,%r75,%r42;
and.b64 %r76,%r74,11822082166292481;
set.u32.ne.u64 %r78,%r76,0;
neg.s32 %r44,%r78;
bra $L1;
$L6:
mov.u64 %r81,1;
shl.b64 %r80,%r81,%r34;
and.b64 %r82,%r80,13690420227;
set.u32.ne.u64 %r44,%r82,0;
bra $L1;
$L5:
.loc 1 356 3
add.u32 %r42,%r34,-5794;
setp.le.u32 %r86,%r42,53;
@ %r86 bra $L8;
.loc 1 385 10
mov.u32 %r44,0;
$L1:
.loc 1 387 1
mov.u32 %value,%r44;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN FUNCTION DEF: __strftime$isra$0
.func (.param .u64 %value_out) __strftime$isra$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 8 .b8 %stack_ar[32];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.local .align 16 .b8 %frame_ar[1152];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u32 %r26;
.reg .u64 %r33;
.reg .u64 %r36;
.reg .u64 %r40;
.reg .u32 %r43;
.reg .u64 %r47;
.reg .u32 %r50;
.reg .u64 %r53;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u32 %r61;
.reg .u64 %r62;
.reg .u64 %r63;
.reg .u64 %r64;
.reg .u64 %r65;
.reg .u32 %r71;
.reg .u32 %r73;
.reg .u32 %r76;
.reg .u32 %r79;
.reg .u64 %r86;
.reg .u64 %r87;
.reg .u32 %r90;
.reg .u64 %r94;
.reg .u32 %r97;
.reg .u32 %r98;
.reg .u64 %r109;
.reg .u64 %r110;
.reg .u64 %r111;
.reg .u64 %r115;
.reg .u32 %r120;
.reg .u32 %r122;
.reg .u32 %r123;
.reg .u32 %r137;
.reg .u32 %r138;
.reg .u32 %r139;
.reg .u32 %r140;
.reg .u32 %r142;
.reg .u32 %r145;
.reg .u32 %r152;
.reg .u64 %r158;
.reg .u64 %r168;
.reg .u32 %r172;
.reg .u64 %r176;
.reg .u64 %r206;
.reg .u32 %r210;
.reg .u32 %r219;
.reg .u64 %r225;
.reg .u32 %r226;
.reg .u32 %r282;
.reg .u32 %r295;
.reg .u32 %r298;
.reg .u32 %r299;
.reg .u32 %r300;
.reg .u32 %r301;
.reg .u32 %r306;
.reg .u32 %r319;
.reg .u32 %r320;
.reg .u32 %r330;
.reg .u32 %r331;
.reg .u32 %r339;
.reg .u32 %r341;
.reg .u64 %r345;
.reg .u64 %r357;
.reg .u64 %r371;
.reg .u32 %r375;
.reg .u64 %r376;
.reg .u32 %r387;
.reg .u32 %r393;
.reg .u32 %r394;
.reg .u32 %r395;
.reg .u32 %r403;
.reg .u64 %r404;
.reg .u64 %r407;
.reg .u64 %r412;
.reg .u64 %r413;
.reg .u64 %r415;
.reg .u64 %r416;
.reg .u64 %r421;
.reg .u64 %r422;
.reg .u64 %r427;
.reg .u64 %r428;
.reg .u64 %r432;
.reg .u64 %r434;
.reg .u64 %r439;
.reg .u64 %r440;
.reg .u64 %r441;
.reg .u64 %r442;
.reg .u64 %r443;
.reg .u64 %r446;
.reg .u64 %r451;
.reg .u64 %r454;
.reg .u64 %r465;
.reg .u64 %r466;
.reg .u64 %r467;
.reg .u64 %r468;
.reg .u64 %r469;
.reg .pred %r478;
.reg .u64 %r479;
.reg .u64 %r480;
.reg .u32 %r482;
.reg .u32 %r483;
.reg .u32 %r485;
.reg .u32 %r486;
.reg .u16 %r487;
.reg .u16 %r488;
.reg .u16 %r489;
.reg .u32 %r490;
.reg .u16 %r491;
.reg .pred %r492;
.reg .pred %r493;
.reg .u32 %r495;
.reg .u32 %r496;
.reg .u32 %r498;
.reg .u32 %r499;
.reg .u16 %r500;
.reg .u16 %r501;
.reg .u16 %r502;
.reg .u32 %r503;
.reg .u16 %r504;
.reg .pred %r505;
.reg .u32 %r506;
.reg .pred %r507;
.reg .u32 %r510;
.reg .u64 %r512;
.reg .pred %r513;
.reg .pred %r514;
.reg .pred %r515;
.reg .pred %r516;
.reg .pred %r517;
.reg .pred %r518;
.reg .pred %r519;
.reg .pred %r520;
.reg .pred %r521;
.reg .pred %r522;
.reg .pred %r523;
.reg .pred %r524;
.reg .pred %r525;
.reg .pred %r526;
.reg .pred %r527;
.reg .pred %r528;
.reg .pred %r529;
.reg .pred %r531;
.reg .pred %r532;
.reg .pred %r533;
.reg .pred %r534;
.reg .pred %r535;
.reg .pred %r536;
.reg .pred %r537;
.reg .pred %r538;
.reg .pred %r539;
.reg .pred %r540;
.reg .pred %r541;
.reg .pred %r542;
.reg .pred %r543;
.reg .pred %r544;
.reg .pred %r545;
.reg .pred %r546;
.reg .pred %r547;
.reg .pred %r548;
.reg .pred %r549;
.reg .u32 %r550;
.reg .pred %r551;
.reg .pred %r552;
.reg .pred %r553;
.reg .pred %r554;
.reg .pred %r555;
.reg .pred %r556;
.reg .pred %r557;
.reg .pred %r558;
.reg .pred %r559;
.reg .pred %r560;
.reg .pred %r561;
.reg .pred %r562;
.reg .pred %r563;
.reg .pred %r564;
.reg .pred %r565;
.reg .pred %r566;
.reg .pred %r567;
.reg .pred %r568;
.reg .pred %r569;
.reg .u64 %r570;
.reg .u64 %r571;
.reg .u64 %r572;
.reg .u64 %r573;
.reg .u64 %r574;
.reg .u32 %r575;
.reg .u64 %r578;
.reg .u64 %r579;
.reg .u64 %r580;
.reg .pred %r581;
.reg .pred %r582;
.reg .u64 %r583;
.reg .pred %r584;
.reg .u32 %r585;
.reg .pred %r586;
.reg .u64 %r587;
.reg .u64 %r588;
.reg .u64 %r589;
.reg .u64 %r590;
.reg .u64 %r591;
.reg .u32 %r593;
.reg .u64 %r596;
.reg .u64 %r597;
.reg .u64 %r598;
.reg .pred %r599;
.reg .pred %r600;
.reg .u64 %r601;
.reg .pred %r602;
.reg .u32 %r603;
.reg .pred %r604;
.reg .u64 %r605;
.reg .u64 %r606;
.reg .u64 %r607;
.reg .u64 %r608;
.reg .u32 %r609;
.reg .u64 %r612;
.reg .u64 %r613;
.reg .u64 %r614;
.reg .pred %r615;
.reg .pred %r616;
.reg .u64 %r617;
.reg .pred %r618;
.reg .u32 %r619;
.reg .pred %r620;
.reg .u64 %r621;
.reg .u64 %r622;
.reg .u64 %r623;
.reg .u64 %r624;
.reg .u64 %r625;
.reg .u32 %r626;
.reg .u64 %r629;
.reg .u64 %r630;
.reg .u64 %r631;
.reg .pred %r632;
.reg .pred %r633;
.reg .u64 %r634;
.reg .pred %r635;
.reg .u32 %r636;
.reg .pred %r637;
.reg .u64 %r638;
.reg .u32 %r639;
.reg .u64 %r642;
.reg .u64 %r643;
.reg .u64 %r644;
.reg .u32 %r645;
.reg .u64 %r648;
.reg .u64 %r649;
.reg .u64 %r650;
.reg .u32 %r651;
.reg .u64 %r654;
.reg .u64 %r655;
.reg .u64 %r656;
.reg .u32 %r657;
.reg .u64 %r660;
.reg .u64 %r661;
.reg .u32 %r662;
.reg .pred %r663;
.reg .u64 %r668;
.reg .u64 %r669;
.reg .u64 %r670;
.reg .u64 %r671;
.reg .pred %r672;
.reg .u64 %r673;
.reg .u64 %r674;
.reg .u64 %r675;
.reg .u32 %r676;
.reg .pred %r678;
.reg .u32 %r680;
.reg .pred %r681;
.reg .u32 %r683;
.reg .u32 %r684;
.reg .pred %r685;
.reg .u32 %r687;
.reg .u32 %r688;
.reg .u32 %r690;
.reg .u32 %r691;
.reg .u16 %r692;
.reg .u16 %r693;
.reg .u16 %r694;
.reg .u32 %r695;
.reg .u16 %r696;
.reg .pred %r697;
.reg .pred %r698;
.reg .u64 %r702;
.reg .u64 %r703;
.reg .u64 %r704;
.reg .u32 %r705;
.reg .pred %r707;
.reg .u64 %r708;
.reg .pred %r709;
.reg .pred %r710;
.reg .u64 %r714;
.reg .u64 %r715;
.reg .u64 %r716;
.reg .u32 %r717;
.reg .pred %r719;
.reg .u64 %r720;
.reg .pred %r721;
.reg .pred %r722;
.reg .u32 %r724;
.reg .u32 %r725;
.reg .u64 %r728;
.reg .u64 %r729;
.reg .u64 %r730;
.reg .u64 %r731;
.reg .u32 %r732;
.reg .u32 %r733;
.reg .u32 %r734;
.reg .u32 %r735;
.reg .pred %r737;
.reg .u64 %r738;
.reg .pred %r739;
.reg .u32 %r740;
.reg .pred %r741;
.reg .pred %r742;
.reg .u32 %r743;
.reg .u64 %r745;
.reg .u64 %r746;
.reg .u32 %r749;
.reg .pred %r751;
.reg .u64 %r754;
.reg .u64 %r755;
.reg .u64 %r757;
.reg .u64 %r758;
.reg .u64 %r764;
.reg .u64 %r765;
.reg .u64 %r766;
.reg .u64 %r767;
.reg .pred %r768;
.reg .u64 %r769;
.reg .u32 %r773;
.reg .u32 %r774;
.reg .u32 %r775;
.reg .pred %r776;
.reg .u32 %r778;
.reg .u32 %r779;
.reg .pred %r780;
.reg .u32 %r781;
.reg .pred %r782;
.reg .pred %r783;
.reg .u32 %r784;
.reg .pred %r785;
.reg .u64 %r788;
.reg .u64 %r789;
.reg .u64 %r790;
.reg .u64 %r791;
.reg .u32 %r792;
.reg .u32 %r794;
.reg .u32 %r795;
.reg .u32 %r799;
.reg .u32 %r800;
.reg .pred %r802;
.reg .u64 %r803;
.reg .pred %r804;
.reg .u32 %r805;
.reg .u32 %r806;
.reg .u32 %r807;
.reg .u32 %r811;
.reg .u32 %r812;
.reg .u32 %r813;
.reg .pred %r814;
.reg .u32 %r816;
.reg .u32 %r818;
.reg .u32 %r819;
.reg .pred %r820;
.reg .u32 %r822;
.reg .u32 %r823;
.reg .pred %r824;
.reg .u32 %r825;
.reg .pred %r826;
.reg .u32 %r828;
.reg .u32 %r829;
.reg .u16 %r830;
.reg .u16 %r831;
.reg .u16 %r832;
.reg .u32 %r833;
.reg .u16 %r834;
.reg .pred %r835;
.reg .pred %r836;
.reg .pred %r837;
.reg .pred %r839;
.reg .u32 %r840;
.reg .pred %r841;
.reg .u32 %r843;
.reg .u32 %r844;
.reg .u32 %r846;
.reg .u32 %r847;
.reg .u16 %r848;
.reg .u16 %r849;
.reg .u16 %r850;
.reg .u32 %r851;
.reg .u16 %r852;
.reg .pred %r853;
.reg .u32 %r854;
.reg .pred %r855;
.reg .u32 %r856;
.reg .pred %r857;
.reg .u32 %r858;
.reg .u64 %r860;
.reg .u64 %r861;
.reg .u64 %r866;
.reg .u64 %r867;
.reg .u64 %r868;
.reg .u32 %r869;
.reg .pred %r871;
.reg .u64 %r872;
.reg .pred %r873;
.reg .u64 %r877;
.reg .u64 %r878;
.reg .u64 %r879;
.reg .u32 %r880;
.reg .pred %r882;
.reg .u64 %r883;
.reg .pred %r884;
.reg .u64 %r889;
.reg .u64 %r890;
.reg .u64 %r891;
.reg .u32 %r892;
.reg .pred %r894;
.reg .u64 %r895;
.reg .pred %r896;
.reg .u64 %r899;
.reg .u64 %r900;
.reg .u64 %r901;
.reg .u64 %r902;
.reg .u32 %r903;
.reg .u32 %r904;
.reg .u32 %r905;
.reg .pred %r907;
.reg .u64 %r908;
.reg .pred %r909;
.reg .u64 %r912;
.reg .u64 %r913;
.reg .u64 %r914;
.reg .u64 %r915;
.reg .u32 %r916;
.reg .u32 %r917;
.reg .u32 %r918;
.reg .pred %r920;
.reg .u64 %r921;
.reg .pred %r922;
.reg .u64 %r925;
.reg .u64 %r926;
.reg .u64 %r927;
.reg .u64 %r928;
.reg .u32 %r929;
.reg .u32 %r930;
.reg .pred %r932;
.reg .u64 %r933;
.reg .pred %r934;
.reg .pred %r936;
.reg .u64 %r937;
.reg .u64 %r938;
.reg .u32 %r939;
.reg .u64 %r940;
.reg .u32 %r942;
.reg .u32 %r943;
.reg .u32 %r944;
.reg .u64 %r945;
.reg .u64 %r946;
.reg .u64 %r947;
.reg .u64 %r948;
.reg .u32 %r950;
.reg .u64 %r953;
.reg .u64 %r954;
.reg .u64 %r955;
.reg .pred %r956;
.reg .pred %r957;
.reg .u64 %r959;
.reg .u64 %r960;
.reg .pred %r961;
.reg .u64 %r962;
.reg .u64 %r963;
.reg .u32 %r964;
.reg .pred %r965;
.reg .u32 %r967;
.reg .u64 %r968;
.reg .u64 %r969;
.reg .pred %r970;
.reg .u64 %r973;
.reg .u64 %r974;
.reg .u64 %r975;
.reg .u64 %r976;
.reg .u32 %r977;
.reg .u32 %r978;
.reg .u32 %r979;
.reg .pred %r981;
.reg .u64 %r982;
.reg .pred %r983;
.reg .u32 %r984;
.reg .pred %r985;
.reg .pred %r986;
.reg .u64 %r987;
.reg .u32 %r989;
.reg .u32 %r990;
.reg .u32 %r991;
.reg .u64 %r992;
.reg .u64 %r994;
.reg .u64 %r995;
.reg .u64 %r996;
.reg .u64 %r997;
.reg .u64 %r999;
.reg .u64 %r1002;
.reg .u64 %r1003;
.reg .u64 %r1004;
.reg .u64 %r1005;
.reg .u64 %r1006;
.reg .u64 %r1007;
.reg .u64 %r1011;
.reg .u64 %r1012;
.reg .u64 %r1013;
.reg .u64 %r1014;
.reg .u32 %r1015;
.reg .u32 %r1017;
.reg .u64 %r1018;
.reg .u64 %r1019;
.reg .u32 %r1020;
.reg .u32 %r1022;
.reg .u64 %r1023;
.reg .u64 %r1024;
.reg .u32 %r1025;
.reg .u32 %r1026;
.reg .u64 %r1027;
.reg .u64 %r1028;
.reg .u64 %r1029;
.reg .u64 %r1030;
.reg .u64 %r1032;
.reg .u64 %r1033;
.reg .u64 %r1034;
.reg .u64 %r1035;
.reg .u64 %r1036;
.reg .u64 %r1038;
.reg .u64 %r1039;
.reg .u64 %r1040;
.reg .u64 %r1041;
.reg .u64 %r1042;
.reg .u64 %r1044;
.reg .u64 %r1045;
.reg .u64 %r1046;
.reg .u64 %r1047;
.reg .u64 %r1048;
.reg .u64 %r1049;
.reg .u32 %r1050;
.reg .pred %r1052;
.reg .u64 %r1053;
.reg .pred %r1054;
.reg .u64 %r1057;
.reg .u64 %r1058;
.reg .u64 %r1059;
.reg .u64 %r1060;
.reg .u32 %r1061;
.reg .u32 %r1062;
.reg .pred %r1064;
.reg .u64 %r1065;
.reg .pred %r1066;
.reg .pred %r1068;
.reg .u64 %r1069;
.reg .u64 %r1070;
.reg .u32 %r1071;
.reg .u64 %r1074;
.reg .u64 %r1075;
.reg .u64 %r1076;
.reg .u64 %r1077;
.reg .u32 %r1078;
.reg .u32 %r1079;
.reg .u32 %r1080;
.reg .u32 %r1081;
.reg .pred %r1083;
.reg .u64 %r1084;
.reg .pred %r1085;
.reg .pred %r1087;
.reg .u64 %r1088;
.reg .pred %r1089;
.reg .u32 %r1090;
.reg .u32 %r1091;
.reg .u64 %r1094;
.reg .u64 %r1095;
.reg .u64 %r1096;
.reg .u64 %r1097;
.reg .u32 %r1098;
.reg .u32 %r1099;
.reg .u32 %r1100;
.reg .u32 %r1101;
.reg .u32 %r1103;
.reg .u32 %r1104;
.reg .pred %r1106;
.reg .u64 %r1107;
.reg .pred %r1108;
.reg .u32 %r1112;
.reg .pred %r1113;
.reg .pred %r1114;
.reg .pred %r1115;
.reg .u32 %r1116;
.reg .u32 %r1117;
.reg .pred %r1118;
.reg .u32 %r1119;
.reg .pred %r1120;
.reg .u32 %r1122;
.reg .pred %r1128;
.reg .u32 %r1130;
.reg .u32 %r1137;
.reg .u32 %r1139;
.reg .pred %r1140;
.reg .u64 %r1143;
.reg .u64 %r1144;
.reg .u64 %r1145;
.reg .u64 %r1146;
.reg .u32 %r1147;
.reg .pred %r1149;
.reg .u64 %r1150;
.reg .pred %r1151;
.reg .pred %r1153;
.reg .u64 %r1154;
.reg .u64 %r1155;
.reg .u32 %r1156;
.reg .u32 %r1157;
.reg .pred %r1158;
.reg .u64 %r1161;
.reg .u64 %r1162;
.reg .u64 %r1163;
.reg .u64 %r1164;
.reg .u32 %r1165;
.reg .u32 %r1166;
.reg .u32 %r1167;
.reg .u32 %r1169;
.reg .u32 %r1170;
.reg .pred %r1172;
.reg .u64 %r1173;
.reg .pred %r1174;
.reg .pred %r1175;
.reg .u32 %r1177;
.reg .u32 %r1178;
.reg .u64 %r1181;
.reg .u64 %r1182;
.reg .u64 %r1183;
.reg .u64 %r1184;
.reg .u32 %r1185;
.reg .pred %r1187;
.reg .u64 %r1188;
.reg .pred %r1189;
.reg .pred %r1190;
.reg .u32 %r1191;
.reg .u32 %r1192;
.reg .pred %r1193;
.reg .u32 %r1195;
.reg .u32 %r1196;
.reg .u32 %r1198;
.reg .u32 %r1199;
.reg .u16 %r1200;
.reg .u16 %r1201;
.reg .u16 %r1202;
.reg .u32 %r1203;
.reg .u16 %r1204;
.reg .pred %r1205;
.reg .u32 %r1206;
.reg .pred %r1207;
.reg .u32 %r1208;
.reg .pred %r1209;
.reg .u32 %r1210;
.reg .u64 %r1212;
.reg .u64 %r1213;
.reg .u64 %r1218;
.reg .u64 %r1219;
.reg .u64 %r1220;
.reg .u32 %r1221;
.reg .pred %r1223;
.reg .u64 %r1224;
.reg .pred %r1225;
.reg .u32 %r1226;
.reg .pred %r1227;
.reg .pred %r1228;
.reg .u64 %r1229;
.reg .u32 %r1231;
.reg .u32 %r1232;
.reg .u32 %r1233;
.reg .u64 %r1234;
.reg .u64 %r1236;
.reg .u64 %r1237;
.reg .u64 %r1238;
.reg .u64 %r1239;
.reg .u64 %r1241;
.reg .u64 %r1244;
.reg .u64 %r1245;
.reg .u64 %r1248;
.reg .u64 %r1249;
.reg .u64 %r1250;
.reg .u64 %r1251;
.reg .u64 %r1253;
.reg .u64 %r1255;
.reg .u32 %r1256;
.reg .pred %r1258;
.reg .u64 %r1259;
.reg .pred %r1260;
.reg .u32 %r1261;
.reg .pred %r1262;
.reg .pred %r1263;
.reg .u64 %r1264;
.reg .u32 %r1266;
.reg .u32 %r1267;
.reg .u32 %r1268;
.reg .u64 %r1269;
.reg .u64 %r1270;
.reg .u64 %r1271;
.reg .u64 %r1273;
.reg .pred %r1274;
.reg .pred %r1275;
.reg .u64 %r1276;
.reg .u64 %r1277;
.reg .pred %r1278;
.reg .pred %r1279;
.reg .u64 %r1280;
.reg .pred %r1282;
.reg .u64 %r1283;
.reg .u64 %r1284;
.reg .u32 %r1285;
.reg .u32 %r1286;
.reg .pred %r1287;
.reg .pred %r1288;
.reg .u64 %r1289;
.reg .u64 %r1290;
.reg .u32 %r1291;
.reg .u32 %r1293;
.reg .pred %r1294;
.reg .u32 %r1295;
.reg .u32 %r1297;
.reg .u32 %r1298;
.reg .u32 %r1300;
.reg .u32 %r1301;
.reg .u16 %r1302;
.reg .u16 %r1303;
.reg .u16 %r1304;
.reg .u32 %r1305;
.reg .u16 %r1306;
.reg .pred %r1307;
.reg .u32 %r1309;
.reg .u32 %r1310;
.reg .u32 %r1312;
.reg .u32 %r1313;
.reg .u16 %r1314;
.reg .u16 %r1315;
.reg .u16 %r1316;
.reg .u32 %r1317;
.reg .u16 %r1318;
.reg .pred %r1319;
.reg .u32 %r1321;
.reg .u32 %r1322;
.reg .u32 %r1324;
.reg .u32 %r1325;
.reg .u16 %r1326;
.reg .u16 %r1327;
.reg .u16 %r1328;
.reg .u32 %r1329;
.reg .u16 %r1330;
.reg .pred %r1331;
.reg .pred %r1333;
.reg .u32 %r1334;
.reg .pred %r1338;
.reg .u64 %r1341;
.reg .u64 %r1342;
.reg .u64 %r1343;
.reg .u64 %r1344;
mov.u64 %r466,%ar0;
mov.u64 %r467,%ar1;
mov.u64 %r468,%ar2;
mov.u64 %r469,%ar3;
.loc 1 688 7
mov.u32 %r219,0;
.loc 1 678 10
mov.u64 %r465,0;
.loc 1 1397 25
add.u64 %r1341,%r467,-1;
.loc 1 1323 3
add.u64 %r1342,%frame,1028;
add.u64 %r1343,%frame,1024;
.loc 1 932 9
add.u64 %r1344,%frame,1032;
bra $L12;
$L15:
.loc 1 695 7
setp.gt.u64 %r478,%r1341,%r465;
@ %r478 bra $L13;
$L75:
.loc 1 698 13
mov.u64 %r465,0;
bra $L11;
$L13:
.loc 1 696 26
add.u64 %r468,%r468,4;
.loc 1 696 17
shl.b64 %r479,%r465,2;
add.u64 %r480,%r466,%r479;
st.u32 [%r480],%r26;
.loc 1 696 13
add.u64 %r465,%r465,1;
$L12:
.loc 1 693 14
ld.u32 %r26,[%r468];
.loc 1 693 22
set.u32.ne.u32 %r482,%r26,0;
neg.s32 %r483,%r482;
set.u32.ne.u32 %r485,%r26,37;
neg.s32 %r486,%r485;
cvt.u16.u32 %r488,%r483;
cvt.u16.u32 %r489,%r486;
and.b16 %r487,%r488,%r489;
.loc 1 693 13
cvt.u32.u16 %r490,%r487;
cvt.u16.u8 %r491,%r490;
setp.ne.u16 %r492,%r491,0;
@ %r492 bra $L15;
.loc 1 700 10
setp.eq.u32 %r493,%r26,0;
@ %r493 bra $L16;
.loc 1 708 11
ld.u32 %r403,[%r468+4];
.loc 1 708 30
set.u32.eq.u32 %r495,%r403,48;
neg.s32 %r496,%r495;
set.u32.eq.u32 %r498,%r403,43;
neg.s32 %r499,%r498;
cvt.u16.u32 %r501,%r496;
cvt.u16.u32 %r502,%r499;
or.b16 %r500,%r501,%r502;
.loc 1 708 10
cvt.u32.u16 %r503,%r500;
cvt.u16.u8 %r504,%r503;
setp.ne.u16 %r505,%r504,0;
@ %r505 bra $L17;
.loc 1 702 13
add.u64 %r33,%r468,4;
.loc 1 703 11
mov.u32 %r79,0;
bra $L18;
$L17:
.loc 1 709 15
add.u64 %r33,%r468,8;
.loc 1 708 11
mov.u32 %r79,%r403;
.loc 1 712 11
ld.u32 %r403,[%r468+8];
$L18:
.loc 1 712 30
add.u32 %r506,%r403,-49;
.loc 1 712 10
setp.gt.u32 %r507,%r506,8;
@ %r507 bra $L158;
.loc 1 715 12
mov.u32 %r510,10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1343;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r510;
call (%value_in),wcstoul,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r512,[%value_in];
}
mov.u64 %r36,%r512;
.loc 1 716 11
ld.u64 %r33,[%frame+1024];
.loc 1 720 11
ld.u32 %r403,[%r33];
bra $L19;
$L158:
.loc 1 704 13
mov.u64 %r36,0;
$L19:
.loc 1 720 10
setp.ne.u32 %r513,%r403,69;
@ %r513 bra $L20;
.loc 1 747 15
ld.u32 %r403,[%r33+4];
.loc 1 722 17
add.u64 %r33,%r33,4;
bra $L21;
$L20:
.loc 1 733 15
setp.ne.u32 %r514,%r403,79;
@ %r514 bra $L21;
.loc 1 747 15
ld.u32 %r403,[%r33+4];
.loc 1 735 17
add.u64 %r33,%r33,4;
$L21:
.loc 1 747 7
setp.eq.u32 %r515,%r403,90;
@ %r515 bra $L22;
setp.gt.s32 %r516,%r403,90;
@ %r516 bra $L23;
setp.eq.u32 %r517,%r403,77;
@ %r517 bra $L24;
setp.gt.s32 %r518,%r403,77;
@ %r518 bra $L25;
setp.eq.u32 %r519,%r403,68;
@ %r519 bra $L26;
setp.gt.s32 %r520,%r403,68;
@ %r520 bra $L27;
setp.eq.u32 %r521,%r403,66;
@ %r521 bra $L28;
setp.gt.s32 %r522,%r403,66;
@ %r522 bra $L29;
setp.eq.u32 %r523,%r403,37;
@ %r523 bra $L30;
setp.eq.u32 %r524,%r403,65;
@ %r524 bra $L31;
mov.u64 %r465,0;
bra $L11;
$L29:
setp.eq.u32 %r525,%r403,67;
@ %r525 bra $L32;
mov.u64 %r465,0;
bra $L11;
$L27:
setp.eq.u32 %r526,%r403,71;
@ %r526 bra $L33;
setp.gt.s32 %r527,%r403,71;
@ %r527 bra $L34;
setp.eq.u32 %r528,%r403,70;
@ %r528 bra $L35;
mov.u64 %r465,0;
bra $L11;
$L34:
setp.eq.u32 %r529,%r403,72;
@ %r529 bra $L36;
setp.eq.u32 %r1338,%r403,73;
@ %r1338 bra $L37;
mov.u64 %r465,0;
bra $L11;
$L25:
setp.eq.u32 %r531,%r403,85;
@ %r531 bra $L38;
setp.gt.s32 %r532,%r403,85;
@ %r532 bra $L39;
setp.eq.u32 %r533,%r403,83;
@ %r533 bra $L40;
setp.gt.s32 %r534,%r403,83;
@ %r534 bra $L41;
setp.eq.u32 %r535,%r403,80;
@ %r535 bra $L42;
setp.eq.u32 %r536,%r403,82;
@ %r536 bra $L43;
mov.u64 %r465,0;
bra $L11;
$L41:
setp.eq.u32 %r537,%r403,84;
@ %r537 bra $L44;
mov.u64 %r465,0;
bra $L11;
$L39:
setp.eq.u32 %r538,%r403,88;
@ %r538 bra $L45;
setp.eq.u32 %r539,%r403,89;
@ %r539 bra $L46;
setp.eq.u32 %r540,%r403,86;
@ %r540 bra $L47;
setp.eq.u32 %r541,%r403,87;
@ %r541 bra $L48;
mov.u64 %r465,0;
bra $L11;
$L23:
setp.eq.u32 %r542,%r403,110;
@ %r542 bra $L49;
setp.gt.s32 %r543,%r403,110;
@ %r543 bra $L50;
setp.eq.u32 %r544,%r403,103;
@ %r544 bra $L51;
setp.gt.s32 %r545,%r403,103;
@ %r545 bra $L52;
setp.eq.u32 %r546,%r403,99;
@ %r546 bra $L53;
setp.gt.s32 %r547,%r403,99;
@ %r547 bra $L54;
setp.eq.u32 %r548,%r403,97;
@ %r548 bra $L55;
setp.eq.u32 %r549,%r403,98;
@ %r549 bra $L56;
mov.u64 %r465,0;
bra $L11;
$L54:
add.u32 %r550,%r403,-100;
setp.gt.u32 %r551,%r550,1;
@ ! %r551 bra $L208;
bra $L159;
$L52:
setp.eq.u32 %r552,%r403,107;
@ %r552 bra $L58;
setp.gt.s32 %r553,%r403,107;
@ %r553 bra $L59;
setp.eq.u32 %r554,%r403,104;
@ %r554 bra $L56;
setp.eq.u32 %r555,%r403,106;
@ %r555 bra $L60;
mov.u64 %r465,0;
bra $L11;
$L59:
setp.eq.u32 %r556,%r403,108;
@ %r556 bra $L61;
setp.eq.u32 %r557,%r403,109;
@ %r557 bra $L62;
mov.u64 %r465,0;
bra $L11;
$L50:
setp.eq.u32 %r558,%r403,117;
@ %r558 bra $L63;
setp.gt.s32 %r559,%r403,117;
@ %r559 bra $L64;
setp.eq.u32 %r560,%r403,115;
@ %r560 bra $L65;
setp.gt.s32 %r561,%r403,115;
@ %r561 bra $L66;
setp.eq.u32 %r562,%r403,112;
@ %r562 bra $L42;
setp.eq.u32 %r563,%r403,114;
@ %r563 bra $L67;
mov.u64 %r465,0;
bra $L11;
$L66:
setp.eq.u32 %r564,%r403,116;
@ %r564 bra $L68;
mov.u64 %r465,0;
bra $L11;
$L64:
setp.eq.u32 %r565,%r403,121;
@ %r565 bra $L69;
setp.gt.s32 %r566,%r403,121;
@ %r566 bra $L70;
setp.eq.u32 %r567,%r403,119;
@ %r567 bra $L71;
setp.eq.u32 %r568,%r403,120;
@ %r568 bra $L72;
mov.u64 %r465,0;
bra $L11;
$L70:
setp.eq.u32 %r569,%r403,122;
@ %r569 bra $L73;
mov.u64 %r465,0;
bra $L11;
$L55:
.loc 1 750 4
cvta.const.u64 %r570,_C_time_locale;
ld.s32 %r571,[%r469+24];
add.u64 %r572,%r571,24;
shl.b64 %r573,%r572,3;
add.u64 %r574,%r570,%r573;
ld.u64 %r40,[%r574];
.loc 1 324 28
mov.u32 %r575,0;
st.u32 [%frame+1020],%r575;
.loc 1 325 18
mov.u64 %r578,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r40;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r578;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r579,[%value_in];
}
.loc 1 751 4
add.u64 %r580,%r579,-1;
setp.gt.u64 %r581,%r580,-3;
@ %r581 bra $L74;
.loc 1 753 11
setp.ge.u64 %r582,%r465,%r1341;
@ %r582 bra $L75;
mov.u64 %r422,%frame;
shl.b64 %r583,%r465,2;
add.u64 %r421,%r466,%r583;
add.u64 %r416,%r465,%r579;
bra $L76;
$L77:
add.u64 %r422,%r422,4;
add.u64 %r421,%r421,4;
setp.ge.u64 %r584,%r465,%r1341;
@ %r584 bra $L75;
$L76:
.loc 1 754 10
add.u64 %r465,%r465,1;
.loc 1 754 14
ld.u32 %r585,[%r422];
st.u32 [%r421],%r585;
.loc 1 751 4
setp.ne.u64 %r586,%r465,%r416;
@ %r586 bra $L77;
bra $L74;
$L31:
.loc 1 760 4
cvta.const.u64 %r587,_C_time_locale;
ld.s32 %r588,[%r469+24];
add.u64 %r589,%r588,30;
shl.b64 %r590,%r589,3;
add.u64 %r591,%r587,%r590;
ld.u64 %r47,[%r591+8];
.loc 1 324 28
mov.u32 %r593,0;
st.u32 [%frame+1020],%r593;
.loc 1 325 18
mov.u64 %r596,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r47;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r596;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r597,[%value_in];
}
.loc 1 761 4
add.u64 %r598,%r597,-1;
setp.gt.u64 %r599,%r598,-3;
@ %r599 bra $L74;
.loc 1 763 11
setp.ge.u64 %r600,%r465,%r1341;
@ %r600 bra $L75;
mov.u64 %r454,%frame;
shl.b64 %r601,%r465,2;
add.u64 %r451,%r466,%r601;
add.u64 %r443,%r465,%r597;
bra $L78;
$L79:
add.u64 %r454,%r454,4;
add.u64 %r451,%r451,4;
setp.ge.u64 %r602,%r465,%r1341;
@ %r602 bra $L75;
$L78:
.loc 1 764 10
add.u64 %r465,%r465,1;
.loc 1 764 14
ld.u32 %r603,[%r454];
st.u32 [%r451],%r603;
.loc 1 761 4
setp.ne.u64 %r604,%r465,%r443;
@ %r604 bra $L79;
bra $L74;
$L56:
.loc 1 771 4
cvta.const.u64 %r605,_C_time_locale;
ld.s32 %r606,[%r469+16];
shl.b64 %r607,%r606,3;
add.u64 %r608,%r605,%r607;
ld.u64 %r53,[%r608];
.loc 1 324 28
mov.u32 %r609,0;
st.u32 [%frame+1020],%r609;
.loc 1 325 18
mov.u64 %r612,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r53;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r612;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r613,[%value_in];
}
.loc 1 772 4
add.u64 %r614,%r613,-1;
setp.gt.u64 %r615,%r614,-3;
@ %r615 bra $L74;
.loc 1 774 11
setp.ge.u64 %r616,%r465,%r1341;
@ %r616 bra $L75;
mov.u64 %r415,%frame;
shl.b64 %r617,%r465,2;
add.u64 %r413,%r466,%r617;
add.u64 %r407,%r465,%r613;
bra $L80;
$L81:
add.u64 %r415,%r415,4;
add.u64 %r413,%r413,4;
setp.ge.u64 %r618,%r465,%r1341;
@ %r618 bra $L75;
$L80:
.loc 1 775 10
add.u64 %r465,%r465,1;
.loc 1 775 14
ld.u32 %r619,[%r415];
st.u32 [%r413],%r619;
.loc 1 772 4
setp.ne.u64 %r620,%r465,%r407;
@ %r620 bra $L81;
bra $L74;
$L28:
.loc 1 781 4
cvta.const.u64 %r621,_C_time_locale;
ld.s32 %r622,[%r469+16];
add.u64 %r623,%r622,12;
shl.b64 %r624,%r623,3;
add.u64 %r625,%r621,%r624;
ld.u64 %r58,[%r625];
.loc 1 324 28
mov.u32 %r626,0;
st.u32 [%frame+1020],%r626;
.loc 1 325 18
mov.u64 %r629,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r58;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r629;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r630,[%value_in];
}
.loc 1 782 4
add.u64 %r631,%r630,-1;
setp.gt.u64 %r632,%r631,-3;
@ %r632 bra $L74;
.loc 1 784 11
setp.ge.u64 %r633,%r465,%r1341;
@ %r633 bra $L75;
mov.u64 %r440,%frame;
shl.b64 %r634,%r465,2;
add.u64 %r439,%r466,%r634;
add.u64 %r434,%r465,%r630;
bra $L82;
$L83:
add.u64 %r440,%r440,4;
add.u64 %r439,%r439,4;
setp.ge.u64 %r635,%r465,%r1341;
@ %r635 bra $L75;
$L82:
.loc 1 785 10
add.u64 %r465,%r465,1;
.loc 1 785 14
ld.u32 %r636,[%r440];
st.u32 [%r439],%r636;
.loc 1 782 4
setp.ne.u64 %r637,%r465,%r434;
@ %r637 bra $L83;
bra $L74;
$L53:
.loc 1 796 6
cvta.const.u64 %r638,_C_time_locale;
ld.u64 %r62,[%r638+320];
.loc 1 324 28
mov.u32 %r639,0;
st.u32 [%frame+1020],%r639;
.loc 1 325 18
mov.u64 %r642,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r62;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r642;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r643,[%value_in];
}
.loc 1 797 4
bra $L84;
$L67:
.loc 1 799 4
cvta.const.u64 %r644,_C_time_locale;
ld.u64 %r63,[%r644+456];
.loc 1 324 28
mov.u32 %r645,0;
st.u32 [%frame+1020],%r645;
.loc 1 325 18
mov.u64 %r648,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r63;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r648;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r649,[%value_in];
}
.loc 1 800 4
bra $L84;
$L72:
.loc 1 807 6
cvta.const.u64 %r650,_C_time_locale;
ld.u64 %r64,[%r650+312];
.loc 1 324 28
mov.u32 %r651,0;
st.u32 [%frame+1020],%r651;
.loc 1 325 18
mov.u64 %r654,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r64;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r654;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r655,[%value_in];
}
.loc 1 808 4
bra $L84;
$L45:
.loc 1 815 6
cvta.const.u64 %r656,_C_time_locale;
ld.u64 %r65,[%r656+304];
.loc 1 324 28
mov.u32 %r657,0;
st.u32 [%frame+1020],%r657;
.loc 1 325 18
mov.u64 %r660,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r65;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r660;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r661,[%value_in];
}
$L84:
.loc 1 817 7
ld.u32 %r662,[%frame];
setp.eq.u32 %r663,%r662,0;
@ %r663 bra $L74;
.loc 1 820 14
sub.u64 %r668,%r467,%r465;
shl.b64 %r669,%r465,2;
add.u64 %r670,%r466,%r669;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r670;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r668;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%frame;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r469;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r671,[%value_in];
}
.loc 1 820 12
cvt.u32.u64 %r71,%r671;
.loc 1 822 11
setp.le.s32 %r672,%r71,0;
@ %r672 bra $L75;
.loc 1 823 9
cvt.s64.s32 %r673,%r71;
add.u64 %r465,%r465,%r673;
bra $L74;
$L32:
.loc 1 859 18
ld.u32 %r73,[%r469+20];
.loc 1 871 9
max.u64 %r674,%r36,2;
.loc 1 859 28
set.u32.lt.s32 %r676,%r73,-1900;
cvt.s64.s32 %r675,%r676;
.loc 1 871 9
add.u64 %r404,%r674,%r675;
.loc 1 862 5
setp.lt.s32 %r678,%r73,0;
@ %r678 bra $L85;
.loc 1 861 22
div.s32 %r680,%r73,100;
.loc 1 862 5
add.u32 %r76,%r680,19;
.loc 1 863 6
setp.ne.u32 %r681,%r79,0;
@ %r681 bra $L86;
.loc 1 857 9
cvta.const.u64 %r86,$LC2;
.loc 1 858 9
cvta.const.u64 %r87,$LC0;
bra $L87;
$L85:
.loc 1 862 7
add.u32 %r683,%r73,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r683;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r684,[%value_in];
}
.loc 1 862 5
div.s32 %r76,%r684,100;
.loc 1 863 6
setp.eq.u32 %r685,%r79,0;
@ %r685 bra $L160;
.loc 1 866 19
set.u32.gt.s32 %r687,%r684,9999;
neg.s32 %r688,%r687;
.loc 1 866 33
set.u32.eq.u32 %r690,%r79,43;
neg.s32 %r691,%r690;
.loc 1 866 26
cvt.u16.u32 %r693,%r688;
cvt.u16.u32 %r694,%r691;
and.b16 %r692,%r693,%r694;
.loc 1 866 10
cvt.u32.u16 %r695,%r692;
cvt.u16.u8 %r696,%r695;
setp.ne.u16 %r697,%r696,0;
@ %r697 bra $L161;
$L153:
.loc 1 858 9
cvta.const.u64 %r87,$LC0;
.loc 1 865 11
cvta.const.u64 %r86,$LC1;
bra $L88;
$L160:
.loc 1 858 9
cvta.const.u64 %r87,$LC0;
.loc 1 857 9
cvta.const.u64 %r86,$LC2;
bra $L88;
$L161:
.loc 1 867 13
cvta.const.u64 %r87,$LC3;
.loc 1 865 11
cvta.const.u64 %r86,$LC1;
$L88:
.loc 1 871 9
setp.ge.s32 %r698,%r73,-1900;
@ %r698 bra $L87;
cvta.const.u64 %r87,$LC4;
bra $L87;
$L176:
.loc 1 865 11
cvta.const.u64 %r86,$LC1;
.loc 1 867 13
cvta.const.u64 %r87,$LC3;
$L87:
.loc 1 871 9
sub.u64 %r702,%r467,%r465;
.loc 1 871 21
shl.b64 %r703,%r465,2;
.loc 1 871 9
add.u64 %r704,%r466,%r703;
st.u32 [%stack+16],%r76;
st.u64 [%stack+8],%r404;
st.u64 [%stack],%r87;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r704;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r702;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r86;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r705,[%value_in];
}
.loc 1 874 13
setp.lt.s32 %r707,%r705,0;
@ %r707 bra $L75;
cvt.s64.s32 %r708,%r705;
add.u64 %r465,%r465,%r708;
setp.le.u64 %r709,%r467,%r465;
@ ! %r709 bra $L74;
bra $L75;
$L208:
.loc 1 901 10
ld.u32 %r90,[%r469+12];
setp.eq.u32 %r710,%r403,100;
@ %r710 bra $L162;
cvta.const.u64 %r94,$LC6;
bra $L89;
$L162:
cvta.const.u64 %r94,$LC5;
$L89:
sub.u64 %r714,%r467,%r465;
.loc 1 901 22
shl.b64 %r715,%r465,2;
.loc 1 901 10
add.u64 %r716,%r466,%r715;
st.u32 [%stack],%r90;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r716;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r714;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r94;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r717,[%value_in];
}
.loc 1 904 4
setp.lt.s32 %r719,%r717,0;
@ %r719 bra $L75;
cvt.s64.s32 %r720,%r717;
add.u64 %r465,%r465,%r720;
setp.le.u64 %r721,%r467,%r465;
@ ! %r721 bra $L74;
bra $L75;
$L26:
.loc 1 911 11
ld.u32 %r97,[%r469+20];
.loc 1 908 10
setp.lt.s32 %r722,%r97,0;
@ %r722 bra $L90;
rem.s32 %r98,%r97,100;
bra $L91;
$L90:
.loc 1 912 8
add.u32 %r724,%r97,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r724;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r725,[%value_in];
}
.loc 1 908 10
rem.s32 %r98,%r725,100;
$L91:
sub.u64 %r729,%r467,%r465;
.loc 1 908 22
shl.b64 %r730,%r465,2;
.loc 1 908 10
add.u64 %r731,%r466,%r730;
st.u32 [%stack+8],%r98;
ld.u32 %r732,[%r469+12];
st.u32 [%stack+4],%r732;
ld.u32 %r734,[%r469+16];
add.u32 %r733,%r734,1;
st.u32 [%stack],%r733;
cvta.const.u64 %r728,$LC7;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r731;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r729;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r728;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r735,[%value_in];
}
.loc 1 913 11
setp.lt.s32 %r737,%r735,0;
@ %r737 bra $L75;
cvt.s64.s32 %r738,%r735;
add.u64 %r465,%r465,%r738;
setp.le.u64 %r739,%r467,%r465;
@ ! %r739 bra $L74;
bra $L75;
$L35:
.loc 1 920 13
mov.u32 %r740,37;
st.u32 [%frame+1024],%r740;
.loc 1 921 9
setp.eq.u32 %r741,%r79,0;
@ %r741 bra $L92;
.loc 1 922 15
st.u32 [%frame+1028],%r79;
max.u64 %r109,%r36,6;
.loc 1 929 12
add.u64 %r111,%r109,-6;
.loc 1 930 9
setp.ne.u64 %r742,%r109,6;
@ %r742 bra $L93;
$L95:
.loc 1 929 12
mov.u64 %r115,%r1344;
bra $L94;
$L92:
.loc 1 924 15
mov.u32 %r743,43;
st.u32 [%frame+1028],%r743;
.loc 1 929 12
mov.u64 %r111,4;
$L93:
.loc 1 932 9
st.u64 [%stack],%r111;
cvta.const.u64 %r746,$LC8;
mov.u64 %r745,30;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1344;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r745;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r746;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r749,[%value_in];
}
.loc 1 933 6
setp.le.s32 %r751,%r749,0;
@ %r751 bra $L95;
.loc 1 934 9
cvt.s64.s32 %r754,%r749;
shl.b64 %r755,%r754,2;
add.u64 %r115,%r1344,%r755;
$L94:
.loc 1 936 6
cvta.const.u64 %r757,$LC9;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r115;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r757;
call (%value_in),wcscpy,(%out_arg1,%out_arg2);
ld.param.u64 %r758,[%value_in];
}
.loc 1 937 12
sub.u64 %r764,%r467,%r465;
shl.b64 %r765,%r465,2;
add.u64 %r766,%r466,%r765;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r766;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r764;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1343;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r469;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r767,[%value_in];
}
.loc 1 937 10
cvt.u32.u64 %r120,%r767;
.loc 1 939 9
setp.le.s32 %r768,%r120,0;
@ %r768 bra $L96;
.loc 1 940 14
cvt.s64.s32 %r769,%r120;
add.u64 %r465,%r465,%r769;
bra $L74;
$L96:
.loc 1 942 15
mov.u64 %r465,0;
bra $L11;
$L51:
ld.u32 %r387,[%r469+20];
.loc 1 949 19
ld.u32 %r773,[%r469+28];
ld.u32 %r774,[%r469+24];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r387;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r774;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r773;
call (%value_in),iso_year_adjust$isra$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r775,[%value_in];
}
mov.u32 %r122,%r775;
.loc 1 951 3
setp.lt.s32 %r776,%r387,0;
@ %r776 bra $L97;
rem.s32 %r123,%r387,100;
bra $L98;
$L97:
.loc 1 951 5
add.u32 %r778,%r387,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r778;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r779,[%value_in];
}
.loc 1 951 3
rem.s32 %r123,%r779,100;
$L98:
.loc 1 952 9
setp.ge.s32 %r780,%r775,0;
@ %r780 bra $L99;
.loc 1 952 21
ld.u32 %r781,[%r469+20];
setp.lt.s32 %r782,%r781,-1899;
.loc 1 953 10
selp.u32 %r122,1,%r775,%r782;
bra $L100;
$L99:
.loc 1 954 14
setp.eq.u32 %r783,%r775,0;
@ %r783 bra $L100;
.loc 1 954 26
ld.u32 %r784,[%r469+20];
setp.ge.s32 %r785,%r784,-1900;
.loc 1 955 10
selp.u32 %r122,%r775,-1,%r785;
$L100:
.loc 1 956 12
sub.u64 %r789,%r467,%r465;
.loc 1 956 24
shl.b64 %r790,%r465,2;
.loc 1 956 12
add.u64 %r791,%r466,%r790;
.loc 1 957 15
add.u32 %r792,%r122,%r123;
.loc 1 957 25
rem.s32 %r794,%r792,100;
.loc 1 957 31
add.u32 %r795,%r794,100;
.loc 1 956 12
rem.s32 %r799,%r795,100;
st.u32 [%stack],%r799;
cvta.const.u64 %r788,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r791;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r789;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r788;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r800,[%value_in];
}
.loc 1 958 13
setp.lt.s32 %r802,%r800,0;
@ %r802 bra $L75;
cvt.s64.s32 %r803,%r800;
add.u64 %r465,%r465,%r803;
setp.le.u64 %r804,%r467,%r465;
@ ! %r804 bra $L74;
bra $L75;
$L33:
.loc 1 966 22
ld.u32 %r137,[%r469+20];
.loc 1 966 32
set.u32.lt.s32 %r806,%r137,-1900;
neg.s32 %r807,%r806;
cvt.u32.u32 %r805,%r807;
cvt.u32.u8 %r138,%r805;
.loc 1 966 10
mov.u32 %r139,%r138;
.loc 1 967 19
ld.u32 %r811,[%r469+28];
ld.u32 %r812,[%r469+24];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r137;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r812;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r811;
call (%value_in),iso_year_adjust$isra$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r813,[%value_in];
}
mov.u32 %r140,%r813;
.loc 1 970 8
setp.lt.s32 %r814,%r137,0;
@ %r814 bra $L101;
.loc 1 969 25
div.s32 %r816,%r137,100;
.loc 1 970 8
add.u32 %r142,%r816,19;
bra $L102;
$L101:
.loc 1 970 10
add.u32 %r818,%r137,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r818;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r819,[%value_in];
}
.loc 1 970 8
div.s32 %r142,%r819,100;
.loc 1 971 22
ld.u32 %r137,[%r469+20];
.loc 1 972 8
setp.lt.s32 %r820,%r137,0;
@ %r820 bra $L103;
$L102:
rem.s32 %r145,%r137,100;
bra $L104;
$L103:
.loc 1 972 10
add.u32 %r822,%r137,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r822;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r823,[%value_in];
}
.loc 1 972 8
rem.s32 %r145,%r823,100;
$L104:
.loc 1 973 9
setp.ge.s32 %r824,%r813,0;
@ %r824 bra $L105;
.loc 1 973 21
ld.u32 %r825,[%r469+20];
setp.lt.s32 %r826,%r825,-1899;
@ %r826 bra $L164;
bra $L209;
$L105:
.loc 1 975 22
set.u32.gt.s32 %r828,%r813,0;
neg.s32 %r829,%r828;
.loc 1 975 26
cvt.u16.u32 %r831,%r829;
cvt.u16.u32 %r832,%r138;
and.b16 %r830,%r831,%r832;
.loc 1 975 14
cvt.u32.u16 %r833,%r830;
cvt.u16.u8 %r834,%r833;
setp.ne.u16 %r835,%r834,0;
@ %r835 bra $L108;
bra $L106;
$L164:
.loc 1 974 22
mov.u32 %r140,1;
.loc 1 974 13
mov.u32 %r139,%r140;
$L106:
.loc 1 977 11
add.u32 %r152,%r140,%r145;
.loc 1 978 9
setp.ne.u32 %r836,%r152,-1;
@ %r836 bra $L109;
$L152:
.loc 1 981 3
add.u32 %r142,%r142,-1;
.loc 1 980 8
mov.u32 %r152,99;
bra $L110;
$L109:
.loc 1 983 14
setp.ne.u32 %r837,%r152,100;
@ %r837 bra $L110;
.loc 1 986 3
add.u32 %r142,%r142,1;
.loc 1 985 8
mov.u32 %r152,0;
$L110:
.loc 1 990 38
mad.lo.u32 %r61,%r142,100,%r152;
.loc 1 991 9
setp.eq.u32 %r839,%r139,0;
@ %r839 bra $L111;
$L156:
.loc 1 992 15
mov.u32 %r840,45;
st.u32 [%frame+1024],%r840;
.loc 1 998 9
setp.eq.u64 %r841,%r36,0;
@ %r841 bra $L165;
$L113:
.loc 1 999 8
add.u64 %r36,%r36,-1;
mov.u64 %r441,%r1342;
bra $L112;
$L111:
.loc 1 993 19
set.u32.eq.u32 %r843,%r79,43;
neg.s32 %r844,%r843;
.loc 1 993 40
set.u32.gt.u32 %r846,%r61,9999;
neg.s32 %r847,%r846;
.loc 1 993 30
cvt.u16.u32 %r849,%r844;
cvt.u16.u32 %r850,%r847;
and.b16 %r848,%r849,%r850;
.loc 1 993 14
cvt.u32.u16 %r851,%r848;
cvt.u16.u8 %r852,%r851;
setp.eq.u16 %r853,%r852,0;
@ %r853 bra $L166;
.loc 1 995 10
mov.u32 %r854,43;
st.u32 [%frame+1024],%r854;
.loc 1 998 9
setp.ne.u64 %r855,%r36,0;
@ %r855 bra $L113;
bra $L210;
$L165:
mov.u64 %r441,%r1342;
bra $L112;
$L166:
.loc 1 988 24
mov.u64 %r441,%r1343;
$L112:
.loc 1 1000 13
mov.u32 %r856,37;
st.u32 [%r441],%r856;
.loc 1 1001 9
setp.ne.u32 %r857,%r79,0;
@ %r857 bra $L115;
.loc 1 1000 10
add.u64 %r158,%r441,4;
bra $L116;
$L115:
.loc 1 1002 12
add.u64 %r158,%r441,8;
.loc 1 1002 15
mov.u32 %r858,48;
st.u32 [%r441+4],%r858;
$L116:
.loc 1 1003 6
cvta.const.u64 %r860,$LC10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r158;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r860;
call (%value_in),wcscpy,(%out_arg1,%out_arg2);
ld.param.u64 %r861,[%value_in];
}
.loc 1 1004 12
sub.u64 %r866,%r467,%r465;
.loc 1 1004 24
shl.b64 %r867,%r465,2;
.loc 1 1004 12
add.u64 %r868,%r466,%r867;
st.u32 [%stack+8],%r61;
st.u64 [%stack],%r36;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r868;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r866;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1343;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r869,[%value_in];
}
.loc 1 1005 16
setp.lt.s32 %r871,%r869,0;
@ %r871 bra $L117;
.loc 1 1005 36
cvt.s64.s32 %r872,%r869;
add.u64 %r465,%r465,%r872;
.loc 1 1005 26
setp.gt.u64 %r873,%r467,%r465;
@ %r873 bra $L74;
$L117:
.loc 1 1006 22
mov.u64 %r465,0;
bra $L11;
$L155:
.loc 1 1022 10
sub.u64 %r877,%r467,%r465;
.loc 1 1022 22
shl.b64 %r878,%r465,2;
.loc 1 1022 10
add.u64 %r879,%r466,%r878;
st.u32 [%stack],%r50;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r879;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r877;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r168;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r880,[%value_in];
}
.loc 1 1025 11
setp.lt.s32 %r882,%r880,0;
@ %r882 bra $L75;
cvt.s64.s32 %r883,%r880;
add.u64 %r465,%r465,%r883;
setp.le.u64 %r884,%r467,%r465;
@ ! %r884 bra $L74;
bra $L75;
$L154:
.loc 1 1035 11
rem.s32 %r172,%r43,12;
.loc 1 1041 14
@ %r1338 bra $L167;
cvta.const.u64 %r176,$LC6;
bra $L119;
$L167:
cvta.const.u64 %r176,$LC5;
$L119:
sub.u64 %r889,%r467,%r465;
.loc 1 1041 26
shl.b64 %r890,%r465,2;
.loc 1 1041 14
add.u64 %r891,%r466,%r890;
st.u32 [%stack],%r172;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r891;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r889;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r176;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r892,[%value_in];
}
.loc 1 1043 6
setp.lt.s32 %r894,%r892,0;
@ %r894 bra $L75;
cvt.s64.s32 %r895,%r892;
add.u64 %r465,%r465,%r895;
setp.le.u64 %r896,%r467,%r465;
@ ! %r896 bra $L74;
bra $L75;
$L60:
.loc 1 1047 10
sub.u64 %r900,%r467,%r465;
.loc 1 1047 22
shl.b64 %r901,%r465,2;
.loc 1 1047 10
add.u64 %r902,%r466,%r901;
ld.u32 %r904,[%r469+28];
add.u32 %r903,%r904,1;
st.u32 [%stack],%r903;
cvta.const.u64 %r899,$LC11;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r902;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r900;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r899;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r905,[%value_in];
}
.loc 1 1049 11
setp.lt.s32 %r907,%r905,0;
@ %r907 bra $L75;
cvt.s64.s32 %r908,%r905;
add.u64 %r465,%r465,%r908;
setp.le.u64 %r909,%r467,%r465;
@ ! %r909 bra $L74;
bra $L75;
$L62:
.loc 1 1057 12
sub.u64 %r913,%r467,%r465;
.loc 1 1057 24
shl.b64 %r914,%r465,2;
.loc 1 1057 12
add.u64 %r915,%r466,%r914;
ld.u32 %r917,[%r469+16];
add.u32 %r916,%r917,1;
st.u32 [%stack],%r916;
cvta.const.u64 %r912,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r915;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r913;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r912;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r918,[%value_in];
}
.loc 1 1059 11
setp.lt.s32 %r920,%r918,0;
@ %r920 bra $L75;
cvt.s64.s32 %r921,%r918;
add.u64 %r465,%r465,%r921;
setp.le.u64 %r922,%r467,%r465;
@ ! %r922 bra $L74;
bra $L75;
$L24:
.loc 1 1067 12
sub.u64 %r926,%r467,%r465;
.loc 1 1067 24
shl.b64 %r927,%r465,2;
.loc 1 1067 12
add.u64 %r928,%r466,%r927;
ld.u32 %r929,[%r469+4];
st.u32 [%stack],%r929;
cvta.const.u64 %r925,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r928;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r926;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r925;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r930,[%value_in];
}
.loc 1 1069 11
setp.lt.s32 %r932,%r930,0;
@ %r932 bra $L75;
cvt.s64.s32 %r933,%r930;
add.u64 %r465,%r465,%r933;
setp.le.u64 %r934,%r467,%r465;
@ ! %r934 bra $L74;
bra $L75;
$L49:
.loc 1 1072 7
setp.ge.u64 %r936,%r465,%r1341;
@ %r936 bra $L75;
.loc 1 1073 17
shl.b64 %r937,%r465,2;
add.u64 %r938,%r466,%r937;
mov.u32 %r939,10;
st.u32 [%r938],%r939;
.loc 1 1073 13
add.u64 %r465,%r465,1;
.loc 1 1076 4
bra $L74;
$L42:
.loc 1 1079 4
cvta.const.u64 %r940,_C_time_locale;
ld.u32 %r942,[%r469+8];
set.u32.gt.s32 %r943,%r942,11;
neg.s32 %r944,%r943;
cvt.s64.s32 %r945,%r944;
add.u64 %r946,%r945,40;
shl.b64 %r947,%r946,3;
add.u64 %r948,%r940,%r947;
ld.u64 %r206,[%r948+8];
.loc 1 324 28
mov.u32 %r950,0;
st.u32 [%frame+1020],%r950;
.loc 1 325 18
mov.u64 %r953,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%frame;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r206;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r953;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r954,[%value_in];
}
.loc 1 1080 4
add.u64 %r955,%r954,-1;
setp.gt.u64 %r956,%r955,-3;
@ %r956 bra $L74;
.loc 1 1082 11
setp.ge.u64 %r957,%r465,%r1341;
@ %r957 bra $L75;
add.u64 %r428,%r465,%r954;
neg.s64 %r959,%r465;
shl.b64 %r960,%r959,2;
bra $L120;
$L122:
setp.ge.u64 %r961,%r465,%r1341;
@ %r961 bra $L75;
$L120:
shl.b64 %r432,%r465,2;
.loc 1 1083 38
add.u64 %r962,%r432,%r960;
add.u64 %r963,%frame,%r962;
ld.u32 %r210,[%r963];
.loc 1 1084 8
ld.u32 %r964,[%r33];
setp.ne.u32 %r965,%r964,80;
@ %r965 bra $L121;
.loc 1 1083 38
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r210;
call (%value_in),towlower,(%out_arg1);
ld.param.u32 %r967,[%value_in];
}
.loc 1 1084 8
mov.u32 %r210,%r967;
$L121:
.loc 1 1083 10
add.u64 %r465,%r465,1;
.loc 1 1083 14
add.u64 %r968,%r432,4;
add.u64 %r969,%r466,%r968;
st.u32 [%r969+-4],%r210;
.loc 1 1080 4
setp.ne.u64 %r970,%r465,%r428;
@ %r970 bra $L122;
bra $L74;
$L43:
.loc 1 1090 17
sub.u64 %r974,%r467,%r465;
.loc 1 1090 29
shl.b64 %r975,%r465,2;
.loc 1 1090 17
add.u64 %r976,%r466,%r975;
ld.u32 %r977,[%r469+4];
st.u32 [%stack+4],%r977;
ld.u32 %r978,[%r469+8];
st.u32 [%stack],%r978;
cvta.const.u64 %r973,$LC12;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r976;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r974;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r973;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r979,[%value_in];
}
.loc 1 1092 11
setp.lt.s32 %r981,%r979,0;
@ %r981 bra $L75;
cvt.s64.s32 %r982,%r979;
add.u64 %r465,%r465,%r982;
setp.le.u64 %r983,%r467,%r465;
@ ! %r983 bra $L74;
bra $L75;
$L65:
.loc 1 1124 9
ld.u32 %r984,[%r469+32];
setp.lt.s32 %r985,%r984,0;
@ %r985 bra $L168;
.loc 1 1126 3
{
call __tz_lock;
}
.loc 1 1127 6
setp.ne.u32 %r986,%r219,0;
@ %r986 bra $L124;
.loc 1 1129 7
{
call _tzset_unlocked;
}
$L124:
.loc 1 1144 23
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r987,[%value_in];
}
.loc 1 1148 42
ld.u32 %r989,[%r469+32];
set.u32.gt.s32 %r990,%r989,0;
neg.s32 %r991,%r990;
.loc 1 1148 46
cvt.s64.s32 %r992,%r991;
shl.b64 %r994,%r992,2;
add.u64 %r995,%r994,%r992;
shl.b64 %r996,%r995,3;
add.u64 %r997,%r987,%r996;
.loc 1 1148 10
ld.u64 %r999,[%r997+40];
neg.s64 %r225,%r999;
.loc 1 1150 3
{
call __tz_unlock;
}
mov.u32 %r219,1;
bra $L123;
$L168:
.loc 1 1121 11
mov.u64 %r225,0;
$L123:
.loc 1 1153 28
ld.u32 %r226,[%r469+20];
.loc 1 1152 12
sub.u64 %r1003,%r467,%r465;
.loc 1 1152 24
shl.b64 %r1004,%r465,2;
.loc 1 1152 12
add.u64 %r1005,%r466,%r1004;
.loc 1 1153 12
cvt.s64.s32 %r1006,%r226;
.loc 1 1153 38
add.u64 %r1007,%r1006,-69;
.loc 1 1153 43
shr.s64 %r1011,%r1007,63;
and.b64 %r1012,%r1011,3;
add.u64 %r1013,%r1012,%r1007;
shr.s64 %r1014,%r1013,2;
.loc 1 1154 23
add.u32 %r1015,%r226,-1;
.loc 1 1154 27
div.s32 %r1017,%r1015,100;
cvt.s64.s32 %r1018,%r1017;
.loc 1 1154 5
sub.u64 %r1019,%r1014,%r1018;
.loc 1 1155 23
add.u32 %r1020,%r226,299;
.loc 1 1155 29
div.s32 %r1022,%r1020,400;
cvt.s64.s32 %r1023,%r1022;
.loc 1 1155 5
add.u64 %r1024,%r1019,%r1023;
.loc 1 1156 23
add.u32 %r1025,%r226,-70;
.loc 1 1156 28
mul.lo.u32 %r1026,%r1025,365;
cvt.s64.s32 %r1027,%r1026;
.loc 1 1156 5
add.u64 %r1028,%r1024,%r1027;
.loc 1 1156 40
ld.s32 %r1029,[%r469+28];
.loc 1 1156 33
add.u64 %r1030,%r1028,%r1029;
.loc 1 1156 50
add.u64 %r1032,%r1030,%r1030;
add.u64 %r1033,%r1032,%r1030;
shl.b64 %r1034,%r1033,3;
.loc 1 1157 17
ld.s32 %r1035,[%r469+8];
.loc 1 1157 10
add.u64 %r1036,%r1034,%r1035;
.loc 1 1157 27
shl.b64 %r1038,%r1036,4;
sub.u64 %r1039,%r1038,%r1036;
shl.b64 %r1040,%r1039,2;
.loc 1 1157 38
ld.s32 %r1041,[%r469+4];
.loc 1 1157 31
add.u64 %r1042,%r1040,%r1041;
.loc 1 1157 47
shl.b64 %r1044,%r1042,4;
sub.u64 %r1045,%r1044,%r1042;
shl.b64 %r1046,%r1045,2;
.loc 1 1158 15
ld.s32 %r1047,[%r469];
.loc 1 1158 8
add.u64 %r1048,%r1046,%r1047;
.loc 1 1152 12
sub.u64 %r1049,%r1048,%r225;
st.u64 [%stack],%r1049;
cvta.const.u64 %r1002,$LC13;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1005;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1003;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1002;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1050,[%value_in];
}
.loc 1 1159 6
setp.lt.s32 %r1052,%r1050,0;
@ %r1052 bra $L75;
cvt.s64.s32 %r1053,%r1050;
add.u64 %r465,%r465,%r1053;
setp.le.u64 %r1054,%r467,%r465;
@ ! %r1054 bra $L74;
bra $L75;
$L40:
.loc 1 1168 12
sub.u64 %r1058,%r467,%r465;
.loc 1 1168 24
shl.b64 %r1059,%r465,2;
.loc 1 1168 12
add.u64 %r1060,%r466,%r1059;
ld.u32 %r1061,[%r469];
st.u32 [%stack],%r1061;
cvta.const.u64 %r1057,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1060;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1058;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1057;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1062,[%value_in];
}
.loc 1 1170 11
setp.lt.s32 %r1064,%r1062,0;
@ %r1064 bra $L75;
cvt.s64.s32 %r1065,%r1062;
add.u64 %r465,%r465,%r1065;
setp.le.u64 %r1066,%r467,%r465;
@ ! %r1066 bra $L74;
bra $L75;
$L68:
.loc 1 1173 7
setp.ge.u64 %r1068,%r465,%r1341;
@ %r1068 bra $L75;
.loc 1 1174 17
shl.b64 %r1069,%r465,2;
add.u64 %r1070,%r466,%r1069;
mov.u32 %r1071,9;
st.u32 [%r1070],%r1071;
.loc 1 1174 13
add.u64 %r465,%r465,1;
.loc 1 1177 4
bra $L74;
$L44:
.loc 1 1179 17
sub.u64 %r1075,%r467,%r465;
.loc 1 1179 29
shl.b64 %r1076,%r465,2;
.loc 1 1179 17
add.u64 %r1077,%r466,%r1076;
ld.u32 %r1078,[%r469];
st.u32 [%stack+8],%r1078;
ld.u32 %r1079,[%r469+4];
st.u32 [%stack+4],%r1079;
ld.u32 %r1080,[%r469+8];
st.u32 [%stack],%r1080;
cvta.const.u64 %r1074,$LC14;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1077;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1075;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1074;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1081,[%value_in];
}
.loc 1 1181 11
setp.lt.s32 %r1083,%r1081,0;
@ %r1083 bra $L75;
cvt.s64.s32 %r1084,%r1081;
add.u64 %r465,%r465,%r1084;
setp.le.u64 %r1085,%r467,%r465;
@ ! %r1085 bra $L74;
bra $L75;
$L63:
.loc 1 1196 14
setp.ge.u64 %r1087,%r465,%r1341;
@ %r1087 bra $L75;
.loc 1 1198 24
ld.u32 %r282,[%r469+24];
.loc 1 696 13
add.u64 %r446,%r465,1;
.loc 1 696 7
shl.b64 %r1088,%r465,2;
add.u64 %r412,%r466,%r1088;
.loc 1 1198 18
setp.ne.u32 %r1089,%r282,0;
@ %r1089 bra $L125;
.loc 1 1199 28
mov.u32 %r1090,55;
st.u32 [%r412],%r1090;
.loc 1 1199 24
mov.u64 %r465,%r446;
bra $L74;
$L125:
.loc 1 1201 38
add.u32 %r1091,%r282,48;
.loc 1 1201 28
st.u32 [%r412],%r1091;
.loc 1 1201 24
mov.u64 %r465,%r446;
bra $L74;
$L38:
.loc 1 1214 12
sub.u64 %r1095,%r467,%r465;
.loc 1 1214 24
shl.b64 %r1096,%r465,2;
.loc 1 1214 12
add.u64 %r1097,%r466,%r1096;
.loc 1 1215 21
ld.u32 %r1099,[%r469+28];
add.u32 %r1098,%r1099,7;
.loc 1 1215 25
ld.u32 %r1101,[%r469+24];
sub.u32 %r1100,%r1098,%r1101;
.loc 1 1214 12
div.s32 %r1103,%r1100,7;
st.u32 [%stack],%r1103;
cvta.const.u64 %r1094,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1097;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1095;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1094;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1104,[%value_in];
}
.loc 1 1217 11
setp.lt.s32 %r1106,%r1104,0;
@ %r1106 bra $L75;
cvt.s64.s32 %r1107,%r1104;
add.u64 %r465,%r465,%r1107;
setp.le.u64 %r1108,%r467,%r465;
@ ! %r1108 bra $L74;
bra $L75;
$L47:
ld.u32 %r393,[%r469+20];
ld.u32 %r394,[%r469+24];
ld.u32 %r395,[%r469+28];
.loc 1 1221 19
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r393;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r394;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r395;
call (%value_in),iso_year_adjust$isra$0,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r1112,[%value_in];
}
.loc 1 1222 55
setp.eq.u32 %r1113,%r394,0;
@ %r1113 bra $L169;
add.u32 %r295,%r394,-1;
bra $L126;
$L169:
mov.u32 %r295,6;
$L126:
.loc 1 1224 9
setp.gt.s32 %r1114,%r1112,0;
@ %r1114 bra $L170;
.loc 1 1226 14
setp.ne.u32 %r1115,%r1112,0;
@ %r1115 bra $L128;
.loc 1 1223 33
add.u32 %r1116,%r395,10;
.loc 1 1223 38
sub.u32 %r1117,%r1116,%r295;
.loc 1 1223 10
div.s32 %r298,%r1117,7;
bra $L127;
$L128:
.loc 1 1230 27
sub.u32 %r299,%r295,%r395;
.loc 1 1231 10
setp.lt.s32 %r1118,%r393,0;
selp.u32 %r300,1899,-101,%r1118;
add.u32 %r301,%r300,%r393;
and.b32 %r1119,%r301,3;
setp.ne.u32 %r1120,%r1119,0;
@ %r1120 bra $L130;
rem.s32 %r1122,%r301,100;
setp.ne.u32 %r1128,%r1122,0;
@ %r1128 bra $L172;
$L130:
rem.s32 %r1130,%r301,400;
set.u32.eq.u32 %r1137,%r1130,0;
neg.s32 %r306,%r1137;
bra $L131;
$L172:
mov.u32 %r306,1;
$L131:
.loc 1 1231 8
sub.u32 %r1139,%r299,%r306;
.loc 1 1230 13
setp.le.s32 %r1140,%r1139,4;
selp.u32 %r298,53,52,%r1140;
bra $L127;
$L170:
.loc 1 1225 8
mov.u32 %r298,1;
$L127:
.loc 1 1240 14
sub.u64 %r1144,%r467,%r465;
.loc 1 1240 26
shl.b64 %r1145,%r465,2;
.loc 1 1240 14
add.u64 %r1146,%r466,%r1145;
st.u32 [%stack],%r298;
cvta.const.u64 %r1143,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1146;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1144;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1143;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1147,[%value_in];
}
.loc 1 1241 13
setp.lt.s32 %r1149,%r1147,0;
@ %r1149 bra $L75;
cvt.s64.s32 %r1150,%r1147;
add.u64 %r465,%r465,%r1150;
setp.le.u64 %r1151,%r467,%r465;
@ ! %r1151 bra $L74;
bra $L75;
$L71:
.loc 1 1255 7
setp.ge.u64 %r1153,%r465,%r1341;
@ %r1153 bra $L75;
.loc 1 1256 24
shl.b64 %r1154,%r465,2;
add.u64 %r1155,%r466,%r1154;
.loc 1 1256 34
ld.u32 %r1157,[%r469+24];
add.u32 %r1156,%r1157,48;
.loc 1 1256 24
st.u32 [%r1155],%r1156;
.loc 1 1256 20
add.u64 %r465,%r465,1;
.loc 1 1259 4
bra $L74;
$L48:
.loc 1 1262 23
ld.u32 %r319,[%r469+24];
.loc 1 1262 55
setp.eq.u32 %r1158,%r319,0;
@ %r1158 bra $L174;
add.u32 %r320,%r319,-1;
bra $L132;
$L174:
mov.u32 %r320,6;
$L132:
.loc 1 1269 14
sub.u64 %r1162,%r467,%r465;
.loc 1 1269 26
shl.b64 %r1163,%r465,2;
.loc 1 1269 14
add.u64 %r1164,%r466,%r1163;
.loc 1 1263 29
ld.u32 %r1166,[%r469+28];
add.u32 %r1165,%r1166,7;
.loc 1 1263 33
sub.u32 %r1167,%r1165,%r320;
.loc 1 1263 11
div.s32 %r1169,%r1167,7;
.loc 1 1269 14
st.u32 [%stack],%r1169;
cvta.const.u64 %r1161,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1164;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1162;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1161;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1170,[%value_in];
}
.loc 1 1270 13
setp.lt.s32 %r1172,%r1170,0;
@ %r1172 bra $L75;
cvt.s64.s32 %r1173,%r1170;
add.u64 %r465,%r465,%r1173;
setp.le.u64 %r1174,%r467,%r465;
@ ! %r1174 bra $L74;
bra $L75;
$L69:
.loc 1 1284 21
ld.u32 %r330,[%r469+20];
.loc 1 1285 9
setp.lt.s32 %r1175,%r330,0;
@ %r1175 bra $L133;
rem.s32 %r331,%r330,100;
bra $L134;
$L133:
.loc 1 1285 11
add.u32 %r1177,%r330,1900;
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r1177;
call (%value_in),abs,(%out_arg1);
ld.param.u32 %r1178,[%value_in];
}
.loc 1 1285 9
rem.s32 %r331,%r1178,100;
$L134:
.loc 1 1291 13
sub.u64 %r1182,%r467,%r465;
.loc 1 1291 25
shl.b64 %r1183,%r465,2;
.loc 1 1291 13
add.u64 %r1184,%r466,%r1183;
st.u32 [%stack],%r331;
cvta.const.u64 %r1181,$LC5;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1184;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1182;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1181;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1185,[%value_in];
}
.loc 1 1294 15
setp.lt.s32 %r1187,%r1185,0;
@ %r1187 bra $L75;
cvt.s64.s32 %r1188,%r1185;
add.u64 %r465,%r465,%r1188;
setp.le.u64 %r1189,%r467,%r465;
@ ! %r1189 bra $L74;
bra $L75;
$L46:
.loc 1 1308 24
ld.u32 %r339,[%r469+20];
.loc 1 1312 11
setp.ge.s32 %r1190,%r339,-1900;
@ %r1190 bra $L135;
.loc 1 1314 12
mov.u32 %r1191,45;
st.u32 [%frame+1024],%r1191;
.loc 1 1315 10
mov.u32 %r1192,-1900;
sub.u32 %r341,%r1192,%r339;
.loc 1 1322 11
setp.ne.u64 %r1193,%r36,0;
@ %r1193 bra $L136;
.loc 1 1314 9
mov.u64 %r442,%r1342;
bra $L137;
$L135:
.loc 1 1310 26
add.u32 %r341,%r339,1900;
.loc 1 1317 21
set.u32.eq.u32 %r1195,%r79,43;
neg.s32 %r1196,%r1195;
.loc 1 1317 40
set.u32.gt.u32 %r1198,%r341,9999;
neg.s32 %r1199,%r1198;
.loc 1 1317 32
cvt.u16.u32 %r1201,%r1196;
cvt.u16.u32 %r1202,%r1199;
and.b16 %r1200,%r1201,%r1202;
.loc 1 1317 16
cvt.u32.u16 %r1203,%r1200;
cvt.u16.u8 %r1204,%r1203;
setp.eq.u16 %r1205,%r1204,0;
@ %r1205 bra $L175;
.loc 1 1319 12
mov.u32 %r1206,43;
st.u32 [%frame+1024],%r1206;
.loc 1 1322 11
setp.eq.u64 %r1207,%r36,0;
@ %r1207 bra $L138;
$L136:
.loc 1 1323 3
add.u64 %r36,%r36,-1;
mov.u64 %r442,%r1342;
bra $L137;
$L175:
.loc 1 1307 26
mov.u64 %r442,%r1343;
$L137:
.loc 1 1324 15
mov.u32 %r1208,37;
st.u32 [%r442],%r1208;
.loc 1 1325 11
setp.ne.u32 %r1209,%r79,0;
@ %r1209 bra $L139;
.loc 1 1324 12
add.u64 %r345,%r442,4;
bra $L140;
$L139:
.loc 1 1326 7
add.u64 %r345,%r442,8;
.loc 1 1326 10
mov.u32 %r1210,48;
st.u32 [%r442+4],%r1210;
$L140:
.loc 1 1327 8
cvta.const.u64 %r1212,$LC10;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r345;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1212;
call (%value_in),wcscpy,(%out_arg1,%out_arg2);
ld.param.u64 %r1213,[%value_in];
}
.loc 1 1328 14
sub.u64 %r1218,%r467,%r465;
.loc 1 1328 26
shl.b64 %r1219,%r465,2;
.loc 1 1328 14
add.u64 %r1220,%r466,%r1219;
st.u32 [%stack+8],%r341;
st.u64 [%stack],%r36;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1220;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1218;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1343;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1221,[%value_in];
}
.loc 1 1330 8
setp.lt.s32 %r1223,%r1221,0;
@ %r1223 bra $L141;
cvt.s64.s32 %r1224,%r1221;
add.u64 %r465,%r465,%r1224;
setp.gt.u64 %r1225,%r467,%r465;
@ %r1225 bra $L74;
$L141:
mov.u64 %r465,0;
bra $L11;
$L73:
.loc 1 1334 14
ld.u32 %r1226,[%r469+32];
setp.lt.s32 %r1227,%r1226,0;
@ %r1227 bra $L143;
.loc 1 1338 8
{
call __tz_lock;
}
.loc 1 1339 11
setp.ne.u32 %r1228,%r219,0;
@ %r1228 bra $L144;
.loc 1 1341 5
{
call _tzset_unlocked;
}
$L144:
.loc 1 1356 28
{
.param .u64 %value_in;
call (%value_in),__gettzinfo;
ld.param.u64 %r1229,[%value_in];
}
.loc 1 1360 47
ld.u32 %r1231,[%r469+32];
set.u32.gt.s32 %r1232,%r1231,0;
neg.s32 %r1233,%r1232;
.loc 1 1360 51
cvt.s64.s32 %r1234,%r1233;
shl.b64 %r1236,%r1234,2;
add.u64 %r1237,%r1236,%r1234;
shl.b64 %r1238,%r1237,3;
add.u64 %r1239,%r1229,%r1238;
.loc 1 1360 15
ld.u64 %r1241,[%r1239+40];
neg.s64 %r357,%r1241;
.loc 1 1362 8
{
call __tz_unlock;
}
.loc 1 1365 10
div.s64 %r1244,%r357,60;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1244;
call (%value_in),labs,(%out_arg1);
ld.param.u64 %r1245,[%value_in];
}
.loc 1 1363 14
sub.u64 %r1249,%r467,%r465;
.loc 1 1363 26
shl.b64 %r1250,%r465,2;
.loc 1 1363 14
add.u64 %r1251,%r466,%r1250;
rem.s64 %r1253,%r1245,60;
st.u64 [%stack+8],%r1253;
div.s64 %r1255,%r357,3600;
st.u64 [%stack],%r1255;
cvta.const.u64 %r1248,$LC15;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r1251;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r1249;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r1248;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%stack;
call (%value_in),swprintf,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u32 %r1256,[%value_in];
}
.loc 1 1366 15
setp.lt.s32 %r1258,%r1256,0;
@ %r1258 bra $L75;
cvt.s64.s32 %r1259,%r1256;
add.u64 %r465,%r465,%r1259;
setp.le.u64 %r1260,%r467,%r465;
@ %r1260 bra $L75;
mov.u32 %r219,1;
bra $L74;
$L22:
.loc 1 1370 7
ld.u32 %r1261,[%r469+32];
setp.lt.s32 %r1262,%r1261,0;
@ %r1262 bra $L143;
.loc 1 1375 8
{
call __tz_lock;
}
.loc 1 1376 11
setp.ne.u32 %r1263,%r219,0;
@ %r1263 bra $L145;
.loc 1 1378 5
{
call _tzset_unlocked;
}
$L145:
.loc 1 1389 9
cvta.global.u64 %r1264,_tzname;
.loc 1 1389 35
ld.u32 %r1266,[%r469+32];
set.u32.gt.s32 %r1267,%r1266,0;
neg.s32 %r1268,%r1267;
.loc 1 1389 9
cvt.s64.s32 %r1269,%r1268;
shl.b64 %r1270,%r1269,3;
add.u64 %r1271,%r1264,%r1270;
ld.u64 %r371,[%r1271];
.loc 1 1394 15
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r371;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r1273,[%value_in];
}
.loc 1 1395 8
setp.ne.u64 %r1274,%r1273,0;
@ %r1274 bra $L146;
mov.u64 %r110,%r465;
bra $L147;
$L149:
.loc 1 1397 8
add.u64 %r427,%r427,4;
setp.ge.u64 %r1275,%r376,%r1341;
@ %r1275 bra $L148;
$L150:
.loc 1 1398 25
sub.u64 %r1276,%r376,%r465;
add.u64 %r1277,%r371,%r1276;
ld.s8 %r375,[%r1277];
.loc 1 1398 14
add.u64 %r376,%r376,1;
.loc 1 1398 25
st.u32 [%r427],%r375;
.loc 1 1395 8
setp.ne.u64 %r1278,%r376,%r110;
@ %r1278 bra $L149;
bra $L147;
$L148:
.loc 1 1401 9
{
call __tz_unlock;
}
.loc 1 1402 16
mov.u64 %r465,0;
bra $L11;
$L146:
.loc 1 1397 8
setp.ge.u64 %r1279,%r465,%r1341;
@ %r1279 bra $L148;
shl.b64 %r1280,%r465,2;
add.u64 %r427,%r466,%r1280;
add.u64 %r110,%r465,%r1273;
mov.u64 %r376,%r465;
bra $L150;
$L147:
.loc 1 1405 8
{
call __tz_unlock;
}
mov.u64 %r465,%r110;
mov.u32 %r219,1;
bra $L74;
$L30:
.loc 1 1409 7
setp.ge.u64 %r1282,%r465,%r1341;
@ %r1282 bra $L75;
.loc 1 1410 17
shl.b64 %r1283,%r465,2;
add.u64 %r1284,%r466,%r1283;
mov.u32 %r1285,37;
st.u32 [%r1284],%r1285;
.loc 1 1410 13
add.u64 %r465,%r465,1;
$L74:
.loc 1 1417 10
ld.u32 %r1286,[%r33];
setp.eq.u32 %r1287,%r1286,0;
@ %r1287 bra $L16;
$L143:
.loc 1 1418 8
add.u64 %r468,%r33,4;
.loc 1 693 13
bra $L12;
$L16:
.loc 1 1422 6
setp.eq.u64 %r1288,%r467,0;
@ %r1288 bra $L11;
.loc 1 1423 14
shl.b64 %r1289,%r465,2;
add.u64 %r1290,%r466,%r1289;
mov.u32 %r1291,0;
st.u32 [%r1290],%r1291;
bra $L11;
$L159:
.loc 1 747 7
mov.u64 %r465,0;
bra $L11;
$L210:
.loc 1 1000 13
mov.u32 %r1293,37;
st.u32 [%frame+1028],%r1293;
mov.u64 %r441,%r1342;
bra $L115;
$L209:
.loc 1 977 11
add.u32 %r152,%r813,%r145;
.loc 1 978 9
setp.eq.u32 %r1294,%r152,-1;
@ ! %r1294 bra $L110;
bra $L152;
$L138:
.loc 1 1324 15
mov.u32 %r1295,37;
st.u32 [%frame+1028],%r1295;
.loc 1 1319 9
mov.u64 %r442,%r1342;
bra $L139;
$L86:
.loc 1 866 33
set.u32.eq.u32 %r1297,%r79,43;
neg.s32 %r1298,%r1297;
.loc 1 866 19
set.u32.gt.s32 %r1300,%r76,99;
neg.s32 %r1301,%r1300;
.loc 1 866 26
cvt.u16.u32 %r1303,%r1298;
cvt.u16.u32 %r1304,%r1301;
and.b16 %r1302,%r1303,%r1304;
.loc 1 866 10
cvt.u32.u16 %r1305,%r1302;
cvt.u16.u8 %r1306,%r1305;
setp.ne.u16 %r1307,%r1306,0;
@ ! %r1307 bra $L153;
bra $L176;
$L61:
.loc 1 1034 18
ld.u32 %r43,[%r469+8];
.loc 1 1034 33
set.u32.ne.u32 %r1309,%r43,12;
neg.s32 %r1310,%r1309;
set.u32.ne.u32 %r1312,%r43,0;
neg.s32 %r1313,%r1312;
cvt.u16.u32 %r1315,%r1310;
cvt.u16.u32 %r1316,%r1313;
and.b16 %r1314,%r1315,%r1316;
.loc 1 1035 11
cvt.u32.u16 %r1317,%r1314;
cvt.u16.u8 %r1318,%r1317;
setp.ne.u16 %r1319,%r1318,0;
@ ! %r1319 bra $L211;
setp.eq.u32 %r1338,1,0;
bra $L154;
$L211:
mov.u32 %r172,12;
.loc 1 1041 14
cvta.const.u64 %r176,$LC6;
bra $L119;
$L37:
.loc 1 1034 18
ld.u32 %r43,[%r469+8];
.loc 1 1034 33
set.u32.ne.u32 %r1321,%r43,0;
neg.s32 %r1322,%r1321;
set.u32.ne.u32 %r1324,%r43,12;
neg.s32 %r1325,%r1324;
cvt.u16.u32 %r1327,%r1322;
cvt.u16.u32 %r1328,%r1325;
and.b16 %r1326,%r1327,%r1328;
.loc 1 1035 11
cvt.u32.u16 %r1329,%r1326;
cvt.u16.u8 %r1330,%r1329;
setp.ne.u16 %r1331,%r1330,0;
@ %r1331 bra $L154;
mov.u32 %r172,12;
.loc 1 1041 14
cvta.const.u64 %r176,$LC5;
bra $L119;
$L36:
.loc 1 1022 10
ld.u32 %r50,[%r469+8];
cvta.const.u64 %r168,$LC5;
bra $L155;
$L58:
ld.u32 %r50,[%r469+8];
cvta.const.u64 %r168,$LC6;
bra $L155;
$L157:
.loc 1 990 38
mad.lo.u32 %r61,%r142,100,%r59;
bra $L156;
$L108:
.loc 1 977 11
add.u32 %r59,%r145,-1;
.loc 1 978 9
setp.ne.u32 %r1333,%r145,0;
@ %r1333 bra $L157;
.loc 1 981 3
add.u32 %r1334,%r142,-1;
.loc 1 990 38
mad.lo.u32 %r61,%r1334,100,99;
bra $L156;
$L11:
.loc 1 1426 1
mov.u64 %value,%r465;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ctloc
.visible .func (.param .u64 %value_out) __ctloc (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .pred %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 324 28
mov.u32 %r27,0;
st.u32 [%r24+1020],%r27;
.loc 1 325 18
mov.u64 %r30,255;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
call (%value_in),mbstowcs,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r31,[%value_in];
}
.loc 1 326 10
setp.ne.u64 %r32,%r31,-1;
.loc 1 327 11
selp.u64 %r22,%r31,0,%r32;
st.u64 [%r26],%r22;
.loc 1 329 5
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcsftime
.visible .func (.param .u64 %value_out) wcsftime (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 1445 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r31,[%value_in];
}
.loc 1 1448 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcsftime_l
.visible .func (.param .u64 %value_out) wcsftime_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u64 %r26,%ar3;
.loc 1 1465 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),__strftime$isra$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r32,[%value_in];
}
.loc 1 1467 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcslcat.o/1612277263  0     0     100666  2891      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcslcat
.visible .func (.param .u64 %value_out) wcslcat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcslcat.c"
// BEGIN GLOBAL FUNCTION DECL: wcslen
.extern .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: wcslcat
.visible .func (.param .u64 %value_out) wcslcat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r28;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u64 %r46;
.reg .pred %r48;
.reg .u64 %r49;
.reg .pred %r51;
.reg .pred %r52;
.reg .u64 %r54;
.reg .pred %r55;
.reg .pred %r56;
.reg .u64 %r57;
.reg .u64 %r59;
.reg .u32 %r60;
mov.u64 %r38,%ar0;
mov.u64 %r39,%ar1;
mov.u64 %r40,%ar2;
.loc 1 81 9
ld.u32 %r41,[%r38];
setp.eq.u32 %r42,%r41,0;
@ %r42 bra $L10;
.loc 1 81 25
add.u64 %r26,%r40,-1;
.loc 1 81 21
setp.eq.u64 %r43,%r40,0;
@ %r43 bra $L11;
mov.u64 %r25,%r38;
$L5:
.loc 1 82 6
add.u64 %r25,%r25,4;
.loc 1 81 9
ld.u32 %r44,[%r25];
setp.ne.u32 %r45,%r44,0;
@ %r45 bra $L4;
.loc 1 83 12
sub.u64 %r46,%r25,%r38;
shr.s64 %r37,%r46,2;
.loc 1 84 5
sub.u64 %r40,%r40,%r37;
bra $L2;
$L4:
.loc 1 81 25
add.u64 %r26,%r26,-1;
.loc 1 81 21
setp.ne.u64 %r48,%r26,-1;
@ %r48 bra $L5;
.loc 1 83 12
sub.u64 %r49,%r25,%r38;
shr.s64 %r37,%r49,2;
.loc 1 84 5
sub.u64 %r40,%r40,%r37;
bra $L2;
$L10:
.loc 1 81 9
mov.u64 %r25,%r38;
mov.u64 %r37,0;
$L2:
.loc 1 86 6
setp.eq.u64 %r51,%r40,0;
@ %r51 bra $L3;
.loc 1 88 10
ld.u32 %r24,[%r39];
.loc 1 88 9
setp.ne.u32 %r52,%r24,0;
@ %r52 bra $L12;
bra $L7;
$L11:
.loc 1 83 8
mov.u64 %r37,%r40;
$L3:
.loc 1 87 20
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r39;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r54,[%value_in];
}
.loc 1 87 18
add.u64 %r37,%r37,%r54;
bra $L1;
$L12:
.loc 1 88 9
mov.u64 %r28,%r39;
$L6:
.loc 1 90 10
setp.eq.u64 %r55,%r40,1;
@ %r55 bra $L9;
.loc 1 92 9
st.u32 [%r25],%r24;
.loc 1 93 5
add.u64 %r40,%r40,-1;
.loc 1 92 6
add.u64 %r25,%r25,4;
$L9:
.loc 1 95 8
add.u64 %r28,%r28,4;
.loc 1 88 10
ld.u32 %r24,[%r28];
.loc 1 88 9
setp.ne.u32 %r56,%r24,0;
@ %r56 bra $L6;
.loc 1 99 21
sub.u64 %r57,%r28,%r39;
shr.s64 %r59,%r57,2;
.loc 1 99 16
add.u64 %r37,%r37,%r59;
$L7:
.loc 1 97 6
mov.u32 %r60,0;
st.u32 [%r25],%r60;
$L1:
.loc 1 100 1
mov.u64 %value,%r37;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcslcpy.o/1612277263  0     0     100666  2053      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcslcpy
.visible .func (.param .u64 %value_out) wcslcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcslcpy.c"
// BEGIN GLOBAL FUNCTION DEF: wcslcpy
.visible .func (.param .u64 %value_out) wcslcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .pred %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u64 %r49;
.reg .u32 %r50;
mov.u64 %r37,%ar0;
mov.u64 %r38,%ar1;
mov.u64 %r39,%ar2;
.loc 1 74 6
setp.eq.u64 %r40,%r39,0;
@ %r40 bra $L7;
.loc 1 74 14
add.u64 %r28,%r39,-1;
setp.eq.u64 %r41,%r39,1;
@ %r41 bra $L8;
mov.u64 %r29,%r37;
mov.u64 %r32,%r38;
$L5:
mov.u64 %r34,%r32;
add.u64 %r32,%r32,4;
mov.u64 %r27,%r32;
mov.u64 %r33,%r29;
add.u64 %r29,%r29,4;
mov.u64 %r37,%r29;
.loc 1 78 16
ld.u32 %r22,[%r34];
.loc 1 78 14
st.u32 [%r33],%r22;
.loc 1 78 7
setp.eq.u32 %r42,%r22,0;
@ %r42 bra $L4;
.loc 1 81 7
add.u64 %r28,%r28,-1;
setp.ne.u64 %r43,%r28,0;
@ %r43 bra $L5;
bra $L3;
$L7:
.loc 1 70 18
mov.u64 %r27,%r38;
$L2:
mov.u64 %r35,%r27;
$L6:
add.u64 %r35,%r35,4;
mov.u64 %r27,%r35;
.loc 1 89 13
ld.u32 %r44,[%r35+-4];
setp.ne.u32 %r45,%r44,0;
@ %r45 bra $L6;
$L4:
.loc 1 93 13
sub.u64 %r47,%r27,%r38;
shr.s64 %r49,%r47,2;
.loc 1 93 19
add.u64 %r46,%r49,-1;
bra $L14;
$L8:
.loc 1 70 18
mov.u64 %r27,%r38;
$L3:
.loc 1 88 5
mov.u32 %r50,0;
st.u32 [%r37],%r50;
bra $L2;
$L14:
.loc 1 94 1
mov.u64 %value,%r46;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcslen.o/ 1612277263  0     0     100666  989       `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcslen
.visible .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
.file 1 "../../../../../newlib/libc/string/wcslen.c"
// BEGIN GLOBAL FUNCTION DEF: wcslen
.visible .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %r23;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .u32 %r31;
.reg .pred %r32;
.reg .u64 %r33;
mov.u64 %r28,%ar0;
.loc 1 63 9
ld.u32 %r29,[%r28];
setp.eq.u32 %r30,%r29,0;
@ %r30 bra $L4;
mov.u64 %r23,%r28;
$L3:
.loc 1 64 6
add.u64 %r23,%r23,4;
.loc 1 63 9
ld.u32 %r31,[%r23];
setp.ne.u32 %r32,%r31,0;
@ %r32 bra $L3;
.loc 1 66 12
sub.u64 %r33,%r23,%r28;
shr.s64 %r27,%r33,2;
bra $L1;
$L4:
.loc 1 63 9
mov.u64 %r27,0;
$L1:
.loc 1 67 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcsncat.o/1612277263  0     0     100666  2477      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsncat
.visible .func (.param .u64 %value_out) wcsncat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcsncat.c"
// BEGIN GLOBAL FUNCTION DEF: wcsncat
.visible .func (.param .u64 %value_out) wcsncat (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r27;
.reg .u64 %r30;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u32 %r39;
.reg .pred %r40;
.reg .u32 %r41;
.reg .pred %r42;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u16 %r49;
.reg .u16 %r50;
.reg .u16 %r51;
.reg .u32 %r52;
.reg .u16 %r53;
.reg .pred %r54;
.reg .u32 %r56;
.reg .u32 %r57;
.reg .u32 %r59;
.reg .u32 %r60;
.reg .u16 %r61;
.reg .u16 %r62;
.reg .u16 %r63;
.reg .u32 %r64;
.reg .u16 %r65;
.reg .pred %r66;
.reg .u32 %r67;
mov.u64 %r36,%ar0;
mov.u64 %r37,%ar1;
mov.u64 %r38,%ar2;
.loc 1 74 9
ld.u32 %r39,[%r36];
setp.eq.u32 %r40,%r39,0;
@ %r40 bra $L6;
mov.u64 %r27,%r36;
$L3:
.loc 1 75 6
add.u64 %r27,%r27,4;
.loc 1 74 9
ld.u32 %r41,[%r27];
setp.ne.u32 %r42,%r41,0;
@ %r42 bra $L3;
bra $L2;
$L6:
mov.u64 %r27,%r36;
$L2:
.loc 1 78 10
ld.u32 %r23,[%r37];
.loc 1 78 13
set.u32.ne.u64 %r44,%r38,0;
neg.s32 %r45,%r44;
.loc 1 78 9
set.u32.ne.u32 %r47,%r23,0;
neg.s32 %r48,%r47;
.loc 1 78 13
cvt.u16.u32 %r50,%r45;
cvt.u16.u32 %r51,%r48;
and.b16 %r49,%r50,%r51;
cvt.u32.u16 %r52,%r49;
cvt.u16.u8 %r53,%r52;
setp.eq.u16 %r54,%r53,0;
@ %r54 bra $L4;
mov.u64 %r25,%r27;
$L5:
.loc 1 80 16
add.u64 %r37,%r37,4;
mov.u64 %r30,%r25;
add.u64 %r25,%r25,4;
mov.u64 %r27,%r25;
.loc 1 80 12
st.u32 [%r30],%r23;
.loc 1 81 8
add.u64 %r38,%r38,-1;
.loc 1 78 10
ld.u32 %r23,[%r37];
.loc 1 78 13
set.u32.ne.u64 %r56,%r38,0;
neg.s32 %r57,%r56;
.loc 1 78 9
set.u32.ne.u32 %r59,%r23,0;
neg.s32 %r60,%r59;
.loc 1 78 13
cvt.u16.u32 %r62,%r57;
cvt.u16.u32 %r63,%r60;
and.b16 %r61,%r62,%r63;
cvt.u32.u16 %r64,%r61;
cvt.u16.u8 %r65,%r64;
setp.ne.u16 %r66,%r65,0;
@ %r66 bra $L5;
$L4:
.loc 1 83 6
mov.u32 %r67,0;
st.u32 [%r27],%r67;
.loc 1 85 1
mov.u64 %value,%r36;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcsncmp.o/1612277263  0     0     100666  1465      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsncmp
.visible .func (.param .u32 %value_out) wcsncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcsncmp.c"
// BEGIN GLOBAL FUNCTION DEF: wcsncmp
.visible .func (.param .u32 %value_out) wcsncmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 71 6
setp.eq.u64 %r29,%r28,0;
@ %r29 bra $L5;
mov.u64 %r23,%r27;
$L4:
.loc 1 75 11
ld.u32 %r25,[%r26];
.loc 1 75 18
ld.u32 %r22,[%r23];
.loc 1 75 10
setp.eq.u32 %r30,%r25,%r22;
@ %r30 bra $L3;
.loc 1 77 16
sub.u32 %r25,%r25,%r22;
bra $L1;
$L3:
.loc 1 79 14
add.u64 %r26,%r26,4;
.loc 1 79 10
setp.eq.u32 %r31,%r25,0;
@ %r31 bra $L1;
.loc 1 82 3
add.u64 %r28,%r28,-1;
add.u64 %r23,%r23,4;
setp.ne.u64 %r32,%r28,0;
@ %r32 bra $L4;
.loc 1 72 12
cvt.u32.u64 %r25,%r28;
bra $L1;
$L5:
cvt.u32.u64 %r25,%r28;
$L1:
.loc 1 84 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-wcsncpy.o/1612277263  0     0     100666  1606      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsncpy
.visible .func (.param .u64 %value_out) wcsncpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcsncpy.c"
// BEGIN GLOBAL FUNCTION DEF: wcsncpy
.visible .func (.param .u64 %value_out) wcsncpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r32;
.reg .u64 %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .pred %r37;
.reg .pred %r39;
mov.u64 %r32,%ar0;
mov.u64 %r34,%ar2;
mov.u64 %r27,%ar1;
mov.u64 %r26,%r32;
.loc 1 44 8
bra $L2;
$L5:
.loc 1 46 7
add.u64 %r24,%r34,-1;
add.u64 %r23,%r26,4;
.loc 1 47 22
ld.u32 %r22,[%r27];
.loc 1 47 20
st.u32 [%r26],%r22;
.loc 1 47 9
add.u64 %r27,%r27,4;
setp.ne.u32 %r35,%r22,0;
@ %r35 bra $L6;
.loc 1 49 10
add.u64 %r25,%r34,-2;
.loc 1 49 8
setp.ne.u64 %r36,%r24,0;
@ %r36 bra $L3;
bra $L4;
$L6:
mov.u64 %r26,%r23;
.loc 1 46 7
mov.u64 %r34,%r24;
$L2:
.loc 1 44 8
setp.ne.u64 %r37,%r34,0;
@ %r37 bra $L5;
bra $L4;
$L3:
.loc 1 49 28
st.u32 [%r23],%r22;
.loc 1 49 10
add.u64 %r25,%r25,-1;
.loc 1 49 8
add.u64 %r23,%r23,4;
setp.ne.u64 %r39,%r25,-1;
@ %r39 bra $L3;
$L4:
.loc 1 52 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcsnlen.o/1612277263  0     0     100666  1506      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsnlen
.visible .func (.param .u64 %value_out) wcsnlen (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcsnlen.c"
// BEGIN GLOBAL FUNCTION DEF: wcsnlen
.visible .func (.param .u64 %value_out) wcsnlen (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .pred %r34;
.reg .pred %r35;
.reg .u32 %r36;
.reg .pred %r37;
.reg .u64 %r38;
.reg .pred %r40;
.reg .u64 %r41;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
.loc 1 61 9
ld.u32 %r33,[%r31];
setp.eq.u32 %r34,%r33,0;
@ %r34 bra $L5;
.loc 1 61 22
add.u64 %r23,%r32,-1;
.loc 1 61 13
setp.eq.u64 %r35,%r32,0;
@ %r35 bra $L6;
mov.u64 %r24,%r31;
$L4:
.loc 1 62 6
add.u64 %r24,%r24,4;
.loc 1 61 9
ld.u32 %r36,[%r24];
setp.ne.u32 %r37,%r36,0;
@ %r37 bra $L3;
.loc 1 64 21
sub.u64 %r38,%r24,%r31;
shr.s64 %r30,%r38,2;
bra $L1;
$L3:
.loc 1 61 22
add.u64 %r23,%r23,-1;
.loc 1 61 13
setp.ne.u64 %r40,%r23,-1;
@ %r40 bra $L4;
.loc 1 64 21
sub.u64 %r41,%r24,%r31;
shr.s64 %r30,%r41,2;
bra $L1;
$L5:
.loc 1 61 9
mov.u64 %r30,0;
bra $L1;
$L6:
.loc 1 61 13
mov.u64 %r30,%r32;
$L1:
.loc 1 65 1
mov.u64 %value,%r30;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcspbrk.o/1612277263  0     0     100666  1535      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcspbrk
.visible .func (.param .u64 %value_out) wcspbrk (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcspbrk.c"
// BEGIN GLOBAL FUNCTION DEF: wcspbrk
.visible .func (.param .u64 %value_out) wcspbrk (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .pred %r32;
.reg .pred %r35;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
.loc 1 67 10
ld.u32 %r23,[%r27];
.loc 1 67 9
setp.eq.u32 %r29,%r23,0;
@ %r29 bra $L6;
.loc 1 70 14
ld.u32 %r25,[%r28];
mov.u64 %r26,%r27;
setp.ne.u32 %r35,%r25,0;
bra $L3;
$L8:
.loc 1 70 13
mov.u64 %r24,%r28;
mov.u32 %r22,%r25;
$L4:
.loc 1 72 7
setp.eq.u32 %r30,%r22,%r23;
@ %r30 bra $L1;
.loc 1 77 5
add.u64 %r24,%r24,4;
.loc 1 70 14
ld.u32 %r22,[%r24];
.loc 1 70 13
setp.ne.u32 %r31,%r22,0;
@ %r31 bra $L4;
$L5:
.loc 1 79 8
add.u64 %r26,%r26,4;
.loc 1 67 10
ld.u32 %r23,[%r26];
.loc 1 67 9
setp.eq.u32 %r32,%r23,0;
@ %r32 bra $L7;
$L3:
.loc 1 70 13
@ %r35 bra $L8;
bra $L5;
$L6:
.loc 1 81 10
mov.u64 %r26,0;
bra $L1;
$L7:
mov.u64 %r26,0;
$L1:
.loc 1 82 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcsrchr.o/1612277263  0     0     100666  1334      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsrchr
.visible .func (.param .u64 %value_out) wcsrchr (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcsrchr.c"
// BEGIN GLOBAL FUNCTION DEF: wcsrchr
.visible .func (.param .u64 %value_out) wcsrchr (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r23;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .u32 %r28;
.reg .pred %r29;
.reg .u32 %r30;
.reg .pred %r31;
.reg .pred %r32;
.reg .pred %r33;
mov.u64 %r26,%ar0;
mov.u32 %r27,%ar1;
.loc 1 69 9
ld.u32 %r28,[%r26];
setp.eq.u32 %r29,%r28,0;
@ %r29 bra $L6;
mov.u64 %r25,%r26;
$L3:
.loc 1 70 6
add.u64 %r25,%r25,4;
.loc 1 69 9
ld.u32 %r30,[%r25];
setp.ne.u32 %r31,%r30,0;
@ %r31 bra $L3;
bra $L2;
$L6:
mov.u64 %r25,%r26;
$L2:
mov.u32 %r23,0;
$L5:
.loc 1 73 10
setp.eq.u32 %r32,%r27,%r23;
@ %r32 bra $L1;
.loc 1 78 8
add.u64 %r25,%r25,-4;
.loc 1 71 9
setp.gt.u64 %r33,%r26,%r25;
@ %r33 bra $L7;
.loc 1 73 11
ld.u32 %r23,[%r25];
bra $L5;
$L7:
.loc 1 80 10
mov.u64 %r25,0;
$L1:
.loc 1 81 1
mov.u64 %value,%r25;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcsspn.o/ 1612277263  0     0     100666  1750      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsspn
.visible .func (.param .u64 %value_out) wcsspn (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcsspn.c"
// BEGIN GLOBAL FUNCTION DEF: wcsspn
.visible .func (.param .u64 %value_out) wcsspn (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .pred %r36;
.reg .pred %r37;
.reg .pred %r38;
.reg .u64 %r39;
.reg .u64 %r42;
.reg .pred %r45;
.reg .u64 %r46;
.reg .pred %r48;
mov.u64 %r34,%ar0;
mov.u64 %r35,%ar1;
.loc 1 66 10
ld.u32 %r24,[%r34];
.loc 1 66 9
setp.ne.u32 %r36,%r24,0;
@ %r36 bra $L2;
mov.u64 %r33,0;
bra $L1;
$L7:
.loc 1 69 13
mov.u64 %r25,%r35;
mov.u32 %r22,%r23;
$L5:
.loc 1 71 7
setp.eq.u32 %r37,%r22,%r24;
@ %r37 bra $L4;
.loc 1 73 5
add.u64 %r25,%r25,4;
.loc 1 69 14
ld.u32 %r22,[%r25];
.loc 1 69 13
setp.ne.u32 %r38,%r22,0;
@ %r38 bra $L5;
.loc 1 81 13
sub.u64 %r39,%r26,%r34;
shr.s64 %r33,%r39,2;
bra $L1;
$L2:
.loc 1 69 14
ld.u32 %r23,[%r35];
mov.u64 %r26,%r34;
setp.ne.u32 %r48,%r23,0;
$L6:
.loc 1 69 13
@ %r48 bra $L7;
.loc 1 81 13
sub.u64 %r42,%r26,%r34;
shr.s64 %r33,%r42,2;
$L3:
bra $L1;
$L4:
.loc 1 77 8
add.u64 %r26,%r26,4;
.loc 1 66 10
ld.u32 %r24,[%r26];
.loc 1 66 9
setp.ne.u32 %r45,%r24,0;
@ %r45 bra $L6;
.loc 1 81 13
sub.u64 %r46,%r26,%r34;
shr.s64 %r33,%r46,2;
$L1:
.loc 1 82 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcsstr.o/ 1612277263  0     0     100666  2331      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsstr
.visible .func (.param .u64 %value_out) wcsstr (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcsstr.c"
// BEGIN GLOBAL FUNCTION DECL: wcslen
.extern .func (.param .u64 %value_out) wcslen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: wcsstr
.visible .func (.param .u64 %value_out) wcsstr (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %r26;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .u32 %r35;
.reg .pred %r36;
.reg .u64 %r38;
.reg .u64 %r40;
.reg .pred %r41;
.reg .u32 %r42;
.reg .pred %r43;
.reg .pred %r44;
.reg .u32 %r45;
.reg .pred %r46;
.reg .u32 %r49;
.reg .pred %r50;
.reg .pred %r51;
mov.u64 %r33,%ar0;
mov.u64 %r34,%ar1;
.loc 1 71 6
ld.u32 %r35,[%r34];
setp.eq.u32 %r36,%r35,0;
@ %r36 bra $L11;
.loc 1 76 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r38,[%value_in];
}
.loc 1 76 22
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
call (%value_in),wcslen,(%out_arg1);
ld.param.u64 %r40,[%value_in];
}
.loc 1 76 6
setp.lt.u64 %r41,%r38,%r40;
@ ! %r41 bra $L16;
bra $L7;
$L9:
.loc 1 85 13
mov.u64 %r29,%r33;
mov.u64 %r28,%r34;
mov.u32 %r26,%r30;
$L5:
.loc 1 87 7
ld.u32 %r42,[%r29];
setp.ne.u32 %r43,%r42,%r26;
@ %r43 bra $L4;
.loc 1 89 5
add.u64 %r28,%r28,4;
.loc 1 90 5
add.u64 %r29,%r29,4;
.loc 1 85 14
ld.u32 %r26,[%r28];
.loc 1 85 13
setp.ne.u32 %r44,%r26,0;
@ %r44 bra $L5;
bra $L11;
$L16:
.loc 1 81 9
ld.u32 %r45,[%r33];
setp.eq.u32 %r46,%r45,0;
@ %r46 bra $L8;
.loc 1 85 14
ld.u32 %r30,[%r34];
setp.ne.u32 %r51,%r30,0;
$L6:
.loc 1 85 13
@ %r51 bra $L9;
bra $L11;
$L7:
.loc 1 77 12
mov.u64 %r33,0;
bra $L11;
$L8:
mov.u64 %r33,0;
bra $L11;
$L4:
.loc 1 97 8
add.u64 %r33,%r33,4;
.loc 1 81 9
ld.u32 %r49,[%r33];
setp.ne.u32 %r50,%r49,0;
@ %r50 bra $L6;
.loc 1 77 12
mov.u64 %r33,0;
$L11:
.loc 1 100 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcstod.o/ 1612277263  0     0     100666  15801     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _wcstod_l
.visible .func (.param .f64 %value_out) _wcstod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/wcstod.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstod_r
.visible .func (.param .f64 %value_out) _wcstod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: _wcstof_r
.visible .func (.param .f32 %value_out) _wcstof_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcstod_l
.visible .func (.param .f64 %value_out) wcstod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcstod
.visible .func (.param .f64 %value_out) wcstod (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: wcstof_l
.visible .func (.param .f32 %value_out) wcstof_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: wcstof
.visible .func (.param .f32 %value_out) wcstof (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL VAR DECL: _C_numeric_locale
.extern .const .align 8 .u64 _C_numeric_locale[3];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _wcsnrtombs_l
.extern .func (.param .u64 %value_out) _wcsnrtombs_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4, .param .u64 %in_ar5, .param .u64 %in_ar6);
// BEGIN GLOBAL FUNCTION DECL: _malloc_r
.extern .func (.param .u64 %value_out) _malloc_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _strtod_l
.extern .func (.param .f64 %value_out) _strtod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: strstr
.extern .func (.param .u64 %value_out) strstr (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: nanf
.extern .func (.param .f32 %value_out) nanf (.param .u64 %in_ar0);
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[1] =
{0 };
// BEGIN VAR DEF: initial$0
.const .align 4 .u64 initial$0[1];
// BEGIN GLOBAL FUNCTION DEF: _wcstod_l
.visible .func (.param .f64 %value_out) _wcstod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.local .align 16 .b8 %frame_ar[32];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r25;
.reg .u64 %r33;
.reg .u64 %r36;
.reg .f64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u32 %r42;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u64 %r46;
.reg .u32 %r47;
.reg .u32 %r49;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .pred %r59;
.reg .pred %r60;
.reg .u64 %r63;
.reg .pred %r64;
.reg .u64 %r77;
.reg .u64 %r82;
.reg .f64 %r83;
.reg .pred %r84;
.reg .u64 %r87;
.reg .pred %r88;
.reg .u64 %r91;
.reg .pred %r92;
.reg .pred %r93;
.reg .u64 %r94;
.reg .u64 %r96;
.reg .u64 %r97;
.reg .u64 %r98;
mov.u64 %r38,%ar0;
mov.u64 %r39,%ar1;
mov.u64 %r40,%ar2;
mov.u64 %r41,%ar3;
.loc 1 155 15
bra $L2;
$L3:
.loc 1 156 21
add.u64 %r39,%r39,4;
$L2:
.loc 1 155 16
ld.u32 %r42,[%r39];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r42;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r41;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r44,[%value_in];
}
.loc 1 155 15
setp.ne.u32 %r45,%r44,0;
@ %r45 bra $L3;
.loc 1 168 13
st.u64 [%frame+8],%r39;
.loc 1 169 13
cvta.const.u64 %r46,initial$0;
ld.u32 %r47,[%r46];
st.u32 [%frame],%r47;
ld.u32 %r49,[%r46+4];
st.u32 [%frame+4],%r49;
.loc 1 170 20
add.u64 %r57,%frame,8;
mov.u64 %r54,0;
mov.u64 %r53,-1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r54;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r57;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r53;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r54;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%frame;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r41;
call (%value_in),_wcsnrtombs_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r58,[%value_in];
}
.loc 1 170 12
setp.ne.u64 %r59,%r58,-1;
@ %r59 bra $L4;
.loc 1 172 20
setp.ne.u64 %r60,%r40,0;
@ %r60 bra $L5;
$L7:
.loc 1 174 24
mov.f64 %r37,0d0000000000000000;
bra $L1;
$L5:
.loc 1 173 33
st.u64 [%r40],%r39;
.loc 1 174 24
mov.f64 %r37,0d0000000000000000;
bra $L1;
$L4:
.loc 1 176 20
add.u64 %r25,%r58,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
call (%value_in),_malloc_r,(%out_arg1,%out_arg2);
ld.param.u64 %r63,[%value_in];
}
.loc 1 176 12
setp.eq.u64 %r64,%r63,0;
@ %r64 bra $L7;
.loc 1 178 13
st.u32 [%frame],%r47;
st.u32 [%frame+4],%r49;
.loc 1 179 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r63;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r57;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r53;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r25;
.param .u64 %out_arg6;
st.param.u64 [%out_arg6],%frame;
.param .u64 %out_arg7;
st.param.u64 [%out_arg7],%r41;
call (%value_in),_wcsnrtombs_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5,%out_arg6,%out_arg7);
ld.param.u64 %r77,[%value_in];
}
.loc 1 182 15
add.u64 %r82,%frame,16;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r63;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r82;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r41;
call (%value_in),_strtod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r83,[%value_in];
}
mov.f64 %r37,%r83;
.loc 1 190 12
setp.eq.u64 %r84,%r40,0;
@ %r84 bra $L8;
.loc 1 191 15
ld.const.u64 %r33,[_C_numeric_locale];
.loc 1 202 9
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r87,[%value_in];
}
.loc 1 203 6
setp.gt.u64 %r88,%r87,1;
@ %r88 bra $L9;
.loc 1 208 50
ld.u64 %r36,[%frame+16];
bra $L10;
$L9:
.loc 1 204 14
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r63;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r33;
call (%value_in),strstr,(%out_arg1,%out_arg2);
ld.param.u64 %r91,[%value_in];
}
.loc 1 205 7
setp.ne.u64 %r92,%r91,0;
@ %r92 bra $L11;
.loc 1 208 50
ld.u64 %r36,[%frame+16];
bra $L10;
$L11:
.loc 1 205 15
ld.u64 %r36,[%frame+16];
.loc 1 205 10
setp.le.u64 %r93,%r36,%r91;
@ %r93 bra $L10;
.loc 1 206 9
sub.u64 %r94,%r36,%r87;
add.u64 %r36,%r94,1;
st.u64 [%frame+16],%r36;
$L10:
.loc 1 208 50
sub.u64 %r96,%r36,%r63;
.loc 1 208 43
shl.b64 %r97,%r96,2;
add.u64 %r98,%r39,%r97;
.loc 1 208 25
st.u64 [%r40],%r98;
$L8:
.loc 1 211 9
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r63;
call _free_r,(%out_arg1,%out_arg2);
}
$L1:
.loc 1 214 1
mov.f64 %value,%r37;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstod_r
.visible .func (.param .f64 %value_out) _wcstod_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .f64 %r30;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 221 10
cvta.global.u64 %r29,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_wcstod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r30,[%value_in];
}
.loc 1 222 1
mov.f64 %value,%r30;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstof_r
.visible .func (.param .f32 %value_out) _wcstof_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .f32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r30;
.reg .f64 %r31;
.reg .pred %r32;
.reg .u64 %r33;
.reg .f32 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 229 19
cvta.global.u64 %r30,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r30;
call (%value_in),_wcstod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r31,[%value_in];
}
.loc 1 230 6
setp.num.f64 %r32,%r31,%r31;
@ %r32 bra $L20;
.loc 1 231 12
cvta.const.u64 %r33,$LC0;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r34,[%value_in];
}
mov.f32 %r23,%r34;
bra $L19;
$L20:
.loc 1 232 10
cvt.rn.f32.f64 %r23,%r31;
$L19:
.loc 1 233 1
mov.f32 %value,%r23;
st.param.f32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstod_l
.visible .func (.param .f64 %value_out) wcstod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r31;
.reg .f64 %r32;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 241 10
ld.global.u64 %r31,[_impure_ptr];
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r31;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r26;
call (%value_in),_wcstod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r32,[%value_in];
}
.loc 1 242 1
mov.f64 %value,%r32;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstod
.visible .func (.param .f64 %value_out) wcstod (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .f64 %r31;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
.loc 1 247 10
ld.global.u64 %r30,[_impure_ptr];
cvta.global.u64 %r29,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r29;
call (%value_in),_wcstod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r31,[%value_in];
}
.loc 1 248 1
mov.f64 %value,%r31;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstof_l
.visible .func (.param .f32 %value_out) wcstof_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .f32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r30;
.reg .u64 %r35;
.reg .f64 %r36;
.reg .pred %r37;
.reg .u64 %r38;
.reg .f32 %r39;
.reg .f32 %r40;
.reg .pred %r41;
.reg .f64 %r42;
.reg .pred %r43;
.reg .u64 %r44;
.reg .u32 %r45;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u64 %r30,%ar2;
.loc 1 254 16
ld.global.u64 %r35,[_impure_ptr];
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r35;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r30;
call (%value_in),_wcstod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r36,[%value_in];
}
.loc 1 255 6
setp.num.f64 %r37,%r36,%r36;
@ %r37 bra $L25;
.loc 1 256 12
cvta.const.u64 %r38,$LC0;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r39,[%value_in];
}
mov.f32 %r27,%r39;
bra $L24;
$L25:
.loc 1 257 9
cvt.rn.f32.f64 %r27,%r36;
.loc 1 259 7
abs.f32 %r40,%r27;
.loc 1 259 6
setp.leu.f32 %r41,%r40,0f7f7fffff;
@ %r41 bra $L24;
.loc 1 259 26
abs.f64 %r42,%r36;
.loc 1 259 22
setp.leu.f64 %r43,%r42,0d7fefffffffffffff;
@ ! %r43 bra $L24;
.loc 1 260 20
ld.global.u64 %r44,[_impure_ptr];
mov.u32 %r45,34;
st.u32 [%r44],%r45;
$L24:
.loc 1 263 1
mov.f32 %value,%r27;
st.param.f32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstof
.visible .func (.param .f32 %value_out) wcstof (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .f32 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u64 %r33;
.reg .u64 %r34;
.reg .f64 %r35;
.reg .pred %r36;
.reg .u64 %r37;
.reg .f32 %r38;
.reg .f32 %r39;
.reg .pred %r40;
.reg .f64 %r41;
.reg .pred %r42;
.reg .u64 %r43;
.reg .u32 %r44;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
.loc 1 269 16
ld.global.u64 %r34,[_impure_ptr];
cvta.global.u64 %r33,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r34;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r33;
call (%value_in),_wcstod_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.f64 %r35,[%value_in];
}
.loc 1 270 6
setp.num.f64 %r36,%r35,%r35;
@ %r36 bra $L30;
.loc 1 271 12
cvta.const.u64 %r37,$LC0;
{
.param .f32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r37;
call (%value_in),nanf,(%out_arg1);
ld.param.f32 %r38,[%value_in];
}
mov.f32 %r27,%r38;
bra $L29;
$L30:
.loc 1 272 9
cvt.rn.f32.f64 %r27,%r35;
.loc 1 274 7
abs.f32 %r39,%r27;
.loc 1 274 6
setp.leu.f32 %r40,%r39,0f7f7fffff;
@ %r40 bra $L29;
.loc 1 274 26
abs.f64 %r41,%r35;
.loc 1 274 22
setp.leu.f64 %r42,%r41,0d7fefffffffffffff;
@ ! %r42 bra $L29;
.loc 1 275 20
ld.global.u64 %r43,[_impure_ptr];
mov.u32 %r44,34;
st.u32 [%r43],%r44;
$L29:
.loc 1 279 1
mov.f32 %value,%r27;
st.param.f32 [%value_out],%value;
ret;
}

/2028           1612277263  0     0     100666  10795     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _wcstoimax_l
.func (.param .u64 %value_out) _wcstoimax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstoimax.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstoimax_r
.visible .func (.param .u64 %value_out) _wcstoimax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoimax_l
.visible .func (.param .u64 %value_out) wcstoimax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoimax
.visible .func (.param .u64 %value_out) wcstoimax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DEF: _wcstoimax_l
.func (.param .u64 %value_out) _wcstoimax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r22;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .u64 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r48;
.reg .u32 %r52;
.reg .u64 %r53;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u64 %r59;
.reg .u64 %r60;
.reg .u64 %r61;
.reg .u32 %r62;
.reg .u64 %r63;
.reg .u32 %r66;
.reg .pred %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .u32 %r70;
.reg .pred %r71;
.reg .pred %r72;
.reg .u32 %r73;
.reg .u32 %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .u32 %r77;
.reg .pred %r78;
.reg .u32 %r79;
.reg .pred %r80;
.reg .u64 %r81;
.reg .u64 %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u32 %r86;
.reg .pred %r87;
.reg .u32 %r88;
.reg .pred %r89;
.reg .pred %r90;
.reg .u32 %r92;
.reg .u32 %r94;
.reg .u32 %r95;
.reg .u16 %r97;
.reg .u16 %r98;
.reg .u16 %r99;
.reg .u32 %r100;
.reg .u16 %r101;
.reg .pred %r102;
.reg .u32 %r104;
.reg .u32 %r105;
.reg .u32 %r107;
.reg .u32 %r108;
.reg .u16 %r109;
.reg .u16 %r110;
.reg .u16 %r111;
.reg .u32 %r112;
.reg .u16 %r113;
.reg .pred %r114;
.reg .u64 %r115;
.reg .pred %r116;
.reg .u32 %r117;
.reg .pred %r118;
.reg .u32 %r119;
.reg .pred %r120;
.reg .pred %r121;
.reg .pred %r123;
.reg .pred %r124;
.reg .u32 %r125;
.reg .u32 %r126;
mov.u64 %r59,%ar0;
mov.u64 %r60,%ar1;
mov.u64 %r61,%ar2;
mov.u32 %r62,%ar3;
mov.u64 %r63,%ar4;
mov.u64 %r25,%r60;
$L2:
mov.u64 %r42,%r25;
add.u64 %r24,%r25,4;
mov.u64 %r25,%r24;
.loc 1 74 5
ld.u32 %r45,[%r42];
.loc 1 75 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r63;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r66,[%value_in];
}
mov.u32 %r48,%r66;
.loc 1 75 2
setp.ne.u32 %r67,%r48,0;
@ %r67 bra $L2;
.loc 1 76 5
setp.ne.u32 %r68,%r45,45;
@ %r68 bra $L3;
.loc 1 78 5
ld.u32 %r45,[%r24];
.loc 1 78 9
add.u64 %r24,%r42,8;
.loc 1 77 7
mov.u32 %r47,1;
bra $L4;
$L3:
.loc 1 81 6
setp.ne.u32 %r69,%r45,43;
@ %r69 bra $L23;
.loc 1 82 6
ld.u32 %r45,[%r25];
.loc 1 80 7
mov.u32 %r47,%r48;
.loc 1 82 10
add.u64 %r24,%r42,8;
bra $L4;
$L23:
.loc 1 80 7
mov.u32 %r47,%r48;
$L4:
.loc 1 84 12
and.b32 %r70,%r62,-17;
.loc 1 84 5
setp.ne.u32 %r71,%r70,0;
@ %r71 bra $L5;
.loc 1 84 32
setp.ne.u32 %r72,%r45,48;
@ %r72 bra $L6;
.loc 1 85 31
ld.u32 %r74,[%r24];
and.b32 %r73,%r74,-33;
.loc 1 85 16
setp.ne.u32 %r75,%r73,88;
@ %r75 bra $L7;
.loc 1 86 5
ld.u32 %r45,[%r24+4];
.loc 1 87 5
add.u64 %r24,%r24,8;
mov.u64 %r57,16;
.loc 1 88 8
cvt.u32.u64 %r62,%r57;
bra $L8;
$L7:
.loc 1 90 5
setp.eq.u32 %r76,%r62,0;
@ %r76 bra $L24;
$L5:
.loc 1 93 15
add.u32 %r77,%r62,-2;
.loc 1 93 5
setp.gt.u32 %r78,%r77,34;
@ %r78 bra $L9;
.loc 1 97 18
cvt.s64.s32 %r57,%r62;
bra $L8;
$L9:
.loc 1 128 16
mov.u32 %r79,22;
st.u32 [%r59],%r79;
.loc 1 131 5
setp.ne.u64 %r80,%r61,0;
@ %r80 bra $L25;
mov.u64 %r58,%r61;
bra $L1;
$L24:
.loc 1 90 5
mov.u64 %r57,8;
.loc 1 91 24
cvt.u32.u64 %r62,%r57;
bra $L8;
$L29:
.loc 1 90 5
mov.u64 %r57,10;
.loc 1 91 24
cvt.u32.u64 %r62,%r57;
$L8:
.loc 1 96 40
cvt.s64.s32 %r81,%r47;
add.u64 %r22,%r81,9223372036854775807;
.loc 1 97 18
rem.u64 %r83,%r22,%r57;
.loc 1 97 9
cvt.u32.u64 %r52,%r83;
.loc 1 98 9
div.u64 %r53,%r22,%r57;
mov.u64 %r41,%r24;
.loc 1 92 6
mov.u64 %r44,0;
.loc 1 116 8
mov.u32 %r125,-1;
.loc 1 118 8
mov.u32 %r126,1;
$L17:
.loc 1 105 17
add.u32 %r84,%r45,-48;
.loc 1 105 6
setp.gt.u32 %r85,%r84,9;
@ %r85 bra $L12;
.loc 1 106 6
mov.u32 %r46,%r84;
bra $L13;
$L12:
.loc 1 107 22
add.u32 %r86,%r45,-65;
.loc 1 107 11
setp.gt.u32 %r87,%r86,25;
@ %r87 bra $L14;
.loc 1 108 6
add.u32 %r46,%r45,-55;
bra $L13;
$L14:
.loc 1 109 21
add.u32 %r88,%r45,-97;
.loc 1 109 11
setp.gt.u32 %r89,%r88,25;
@ %r89 bra $L15;
.loc 1 110 6
add.u32 %r46,%r45,-87;
$L13:
.loc 1 113 6
setp.ge.s32 %r90,%r46,%r62;
@ %r90 bra $L15;
.loc 1 115 11
shr.u32 %r92,%r48,31;
.loc 1 115 22
set.u32.gt.u64 %r94,%r44,%r53;
neg.s32 %r95,%r94;
.loc 1 115 15
cvt.u16.u32 %r98,%r92;
cvt.u16.u32 %r99,%r95;
or.b16 %r97,%r98,%r99;
.loc 1 115 6
cvt.u32.u16 %r100,%r97;
cvt.u16.u8 %r101,%r100;
setp.ne.u16 %r102,%r101,0;
@ %r102 bra $L26;
.loc 1 115 39
set.u32.eq.u64 %r104,%r44,%r53;
neg.s32 %r105,%r104;
.loc 1 115 54
set.u32.gt.s32 %r107,%r46,%r52;
neg.s32 %r108,%r107;
.loc 1 115 49
cvt.u16.u32 %r110,%r105;
cvt.u16.u32 %r111,%r108;
and.b16 %r109,%r110,%r111;
.loc 1 115 31
cvt.u32.u16 %r112,%r109;
cvt.u16.u8 %r113,%r112;
setp.ne.u16 %r114,%r113,0;
@ %r114 bra $L27;
.loc 1 120 8
cvt.s64.s32 %r115,%r46;
mad.lo.u64 %r44,%r44,%r57,%r115;
.loc 1 118 8
mov.u32 %r48,%r126;
bra $L16;
$L26:
.loc 1 116 8
mov.u32 %r48,%r125;
bra $L16;
$L27:
mov.u32 %r48,%r125;
$L16:
.loc 1 99 14
ld.u32 %r45,[%r41];
add.u64 %r41,%r41,4;
.loc 1 105 6
bra $L17;
$L15:
.loc 1 123 5
setp.ne.u32 %r116,%r48,-1;
@ %r116 bra $L18;
.loc 1 125 16
mov.u32 %r117,34;
st.u32 [%r59],%r117;
bra $L19;
$L18:
.loc 1 126 12
setp.ne.u32 %r118,%r48,0;
@ %r118 bra $L20;
$L21:
.loc 1 128 16
mov.u32 %r119,22;
st.u32 [%r59],%r119;
.loc 1 133 9
mov.u64 %r58,%r44;
.loc 1 131 5
setp.ne.u64 %r120,%r61,0;
@ ! %r120 bra $L1;
bra $L10;
$L20:
.loc 1 129 12
setp.eq.u32 %r121,%r47,0;
@ %r121 bra $L28;
.loc 1 130 7
neg.s64 %r22,%r44;
bra $L19;
$L22:
.loc 1 132 13
add.u64 %r60,%r41,-4;
bra $L10;
$L25:
.loc 1 131 5
mov.u64 %r58,0;
$L10:
.loc 1 132 11
st.u64 [%r61],%r60;
.loc 1 133 9
bra $L1;
$L28:
mov.u64 %r22,%r44;
$L19:
mov.u64 %r58,%r22;
.loc 1 131 5
setp.ne.u64 %r123,%r61,0;
@ %r123 bra $L22;
bra $L1;
$L6:
.loc 1 90 5
setp.eq.u32 %r124,%r62,0;
@ %r124 bra $L29;
bra $L5;
$L1:
.loc 1 134 1
mov.u64 %value,%r58;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstoimax_r
.visible .func (.param .u64 %value_out) _wcstoimax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 140 9
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoimax_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 141 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoimax_l
.visible .func (.param .u64 %value_out) wcstoimax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 149 9
ld.global.u64 %r33,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
call (%value_in),_wcstoimax_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 150 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoimax
.visible .func (.param .u64 %value_out) wcstoimax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 155 9
ld.global.u64 %r32,[_impure_ptr];
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoimax_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r33,[%value_in];
}
.loc 1 156 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcstok.o/ 1612277263  0     0     100666  2387      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcstok
.visible .func (.param .u64 %value_out) wcstok (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcstok.c"
// BEGIN GLOBAL FUNCTION DEF: wcstok
.visible .func (.param .u64 %value_out) wcstok (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u32 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u64 %r34;
.reg .u64 %r35;
.reg .u64 %r36;
.reg .u64 %r37;
.reg .u64 %r38;
.reg .pred %r39;
.reg .pred %r40;
.reg .pred %r41;
.reg .pred %r42;
.reg .pred %r43;
.reg .u64 %r44;
.reg .pred %r45;
.reg .pred %r46;
.reg .u32 %r47;
.reg .pred %r48;
mov.u64 %r36,%ar0;
mov.u64 %r37,%ar1;
mov.u64 %r38,%ar2;
.loc 1 102 5
setp.ne.u64 %r39,%r36,0;
@ %r39 bra $L2;
.loc 1 102 22
ld.u64 %r36,[%r38];
.loc 1 102 16
setp.eq.u64 %r40,%r36,0;
@ %r40 bra $L11;
$L2:
mov.u64 %r34,%r36;
$L5:
mov.u64 %r35,%r34;
add.u64 %r34,%r34,4;
.loc 1 109 4
ld.u32 %r23,[%r35];
.loc 1 110 2
mov.u64 %r31,%r37;
bra $L4;
$L6:
.loc 1 111 6
add.u64 %r31,%r31,4;
setp.eq.u32 %r41,%r23,%r24;
@ %r41 bra $L5;
$L4:
.loc 1 110 26
ld.u32 %r24,[%r31];
.loc 1 110 2
setp.ne.u32 %r42,%r24,0;
@ %r42 bra $L6;
.loc 1 114 5
setp.ne.u32 %r43,%r23,0;
@ %r43 bra $L7;
.loc 1 115 10
mov.u64 %r44,0;
st.u64 [%r38],%r44;
.loc 1 116 10
mov.u64 %r35,%r44;
bra $L1;
$L7:
add.u64 %r29,%r34,4;
mov.u64 %r22,%r29;
.loc 1 125 5
ld.u32 %r25,[%r34];
mov.u64 %r27,%r37;
$L10:
.loc 1 128 12
ld.u32 %r26,[%r27];
.loc 1 128 7
setp.ne.u32 %r45,%r25,%r26;
@ %r45 bra $L8;
.loc 1 129 8
setp.eq.u32 %r46,%r25,0;
@ %r46 bra $L12;
.loc 1 132 12
mov.u32 %r47,0;
st.u32 [%r29+-4],%r47;
bra $L9;
$L12:
.loc 1 130 8
mov.u64 %r22,0;
$L9:
.loc 1 133 12
st.u64 [%r38],%r22;
.loc 1 134 12
bra $L1;
$L8:
.loc 1 136 3
add.u64 %r27,%r27,4;
setp.ne.u32 %r48,%r26,0;
@ %r48 bra $L10;
mov.u64 %r34,%r29;
bra $L7;
$L11:
.loc 1 103 10
mov.u64 %r35,%r36;
$L1:
.loc 1 139 1
mov.u64 %value,%r35;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcstol.o/ 1612277263  0     0     100666  10276     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _wcstol_l
.func (.param .u64 %value_out) _wcstol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstol.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstol_r
.visible .func (.param .u64 %value_out) _wcstol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstol_l
.visible .func (.param .u64 %value_out) wcstol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstol
.visible .func (.param .u64 %value_out) wcstol (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DEF: _wcstol_l
.func (.param .u64 %value_out) _wcstol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r23;
.reg .u64 %r30;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u64 %r75;
.reg .u32 %r76;
.reg .pred %r77;
.reg .u32 %r78;
.reg .pred %r79;
.reg .u32 %r80;
.reg .pred %r81;
.reg .pred %r82;
.reg .u32 %r84;
.reg .u32 %r86;
.reg .u32 %r87;
.reg .u16 %r89;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u32 %r92;
.reg .u16 %r93;
.reg .pred %r94;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .u16 %r101;
.reg .u16 %r102;
.reg .u16 %r103;
.reg .u32 %r104;
.reg .u16 %r105;
.reg .pred %r106;
.reg .u64 %r107;
.reg .pred %r108;
.reg .u32 %r109;
.reg .pred %r110;
.reg .pred %r111;
.reg .pred %r112;
.reg .pred %r113;
.reg .pred %r115;
.reg .u32 %r116;
.reg .u32 %r117;
mov.u64 %r56,%ar0;
mov.u64 %r57,%ar1;
mov.u64 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r39,%r57;
$L2:
mov.u64 %r40,%r39;
add.u64 %r41,%r39,4;
mov.u64 %r39,%r41;
.loc 1 146 5
ld.u32 %r44,[%r40];
.loc 1 147 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r44;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r60;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r63,[%value_in];
}
mov.u32 %r47,%r63;
.loc 1 147 2
setp.ne.u32 %r64,%r47,0;
@ %r64 bra $L2;
.loc 1 148 5
setp.ne.u32 %r65,%r44,45;
@ %r65 bra $L3;
.loc 1 150 5
ld.u32 %r44,[%r41];
.loc 1 150 9
add.u64 %r41,%r40,8;
mov.u64 %r30,-9223372036854775808;
.loc 1 149 7
mov.u32 %r46,1;
bra $L4;
$L3:
.loc 1 151 12
setp.ne.u32 %r66,%r44,43;
@ %r66 bra $L20;
.loc 1 152 5
ld.u32 %r44,[%r39];
.loc 1 138 15
mov.u32 %r46,%r47;
.loc 1 152 9
add.u64 %r41,%r40,8;
.loc 1 152 5
mov.u64 %r30,9223372036854775807;
bra $L4;
$L20:
.loc 1 138 15
mov.u32 %r46,%r47;
mov.u64 %r30,9223372036854775807;
$L4:
.loc 1 153 12
and.b32 %r67,%r59,-17;
.loc 1 153 5
setp.ne.u32 %r68,%r67,0;
@ %r68 bra $L5;
.loc 1 153 32
setp.ne.u32 %r69,%r44,48;
@ %r69 bra $L6;
.loc 1 154 31
ld.u32 %r71,[%r41];
and.b32 %r70,%r71,-33;
.loc 1 154 16
setp.ne.u32 %r72,%r70,88;
@ %r72 bra $L7;
.loc 1 155 5
ld.u32 %r44,[%r41+4];
.loc 1 156 5
add.u64 %r41,%r41,8;
mov.u64 %r54,16;
.loc 1 157 8
cvt.u32.u64 %r59,%r54;
bra $L8;
$L7:
.loc 1 159 5
setp.eq.u32 %r73,%r59,0;
@ %r73 bra $L21;
.loc 1 180 20
cvt.s64.s32 %r54,%r59;
bra $L8;
$L5:
cvt.s64.s32 %r54,%r59;
bra $L8;
$L21:
.loc 1 159 5
mov.u64 %r54,8;
.loc 1 160 24
cvt.u32.u64 %r59,%r54;
bra $L8;
$L24:
.loc 1 159 5
mov.u64 %r54,10;
.loc 1 160 24
cvt.u32.u64 %r59,%r54;
$L8:
.loc 1 180 18
rem.u64 %r75,%r30,%r54;
.loc 1 180 9
cvt.u32.u64 %r50,%r75;
.loc 1 181 9
div.u64 %r51,%r30,%r54;
mov.u64 %r23,%r41;
.loc 1 182 11
mov.u64 %r43,0;
.loc 1 194 8
mov.u32 %r116,-1;
.loc 1 196 8
mov.u32 %r117,1;
$L14:
.loc 1 183 17
add.u32 %r76,%r44,-48;
.loc 1 183 6
setp.gt.u32 %r77,%r76,9;
@ %r77 bra $L9;
.loc 1 184 6
mov.u32 %r45,%r76;
bra $L10;
$L9:
.loc 1 185 22
add.u32 %r78,%r44,-65;
.loc 1 185 11
setp.gt.u32 %r79,%r78,25;
@ %r79 bra $L11;
.loc 1 186 6
add.u32 %r45,%r44,-55;
bra $L10;
$L11:
.loc 1 187 22
add.u32 %r80,%r44,-97;
.loc 1 187 11
setp.gt.u32 %r81,%r80,25;
@ %r81 bra $L12;
.loc 1 188 6
add.u32 %r45,%r44,-87;
$L10:
.loc 1 191 6
setp.le.s32 %r82,%r59,%r45;
@ %r82 bra $L12;
.loc 1 193 24
shr.u32 %r84,%r47,31;
.loc 1 193 35
set.u32.gt.u64 %r86,%r43,%r51;
neg.s32 %r87,%r86;
.loc 1 193 28
cvt.u16.u32 %r90,%r84;
cvt.u16.u32 %r91,%r87;
or.b16 %r89,%r90,%r91;
.loc 1 193 19
cvt.u32.u16 %r92,%r89;
cvt.u16.u8 %r93,%r92;
setp.ne.u16 %r94,%r93,0;
@ %r94 bra $L22;
.loc 1 193 52
set.u32.eq.u64 %r96,%r43,%r51;
neg.s32 %r97,%r96;
.loc 1 193 67
set.u32.gt.s32 %r99,%r45,%r50;
neg.s32 %r100,%r99;
.loc 1 193 62
cvt.u16.u32 %r102,%r97;
cvt.u16.u32 %r103,%r100;
and.b16 %r101,%r102,%r103;
.loc 1 193 44
cvt.u32.u16 %r104,%r101;
cvt.u16.u8 %r105,%r104;
setp.ne.u16 %r106,%r105,0;
@ %r106 bra $L23;
.loc 1 198 8
cvt.s64.s32 %r107,%r45;
mad.lo.u64 %r43,%r43,%r54,%r107;
.loc 1 196 8
mov.u32 %r47,%r117;
bra $L13;
$L22:
.loc 1 194 8
mov.u32 %r47,%r116;
bra $L13;
$L23:
mov.u32 %r47,%r116;
$L13:
.loc 1 182 28
ld.u32 %r44,[%r23];
add.u64 %r23,%r23,4;
.loc 1 183 6
bra $L14;
$L12:
.loc 1 201 5
setp.ne.u32 %r108,%r47,-1;
@ %r108 bra $L15;
.loc 1 203 16
mov.u32 %r109,34;
st.u32 [%r56],%r109;
.loc 1 206 5
setp.ne.u64 %r110,%r58,0;
@ %r110 bra $L16;
.loc 1 202 7
mov.u64 %r43,%r30;
bra $L28;
$L15:
.loc 1 204 12
setp.eq.u32 %r111,%r46,0;
@ %r111 bra $L18;
.loc 1 205 7
neg.s64 %r43,%r43;
$L18:
.loc 1 206 5
setp.eq.u64 %r112,%r58,0;
@ %r112 bra $L28;
.loc 1 207 11
setp.eq.u32 %r113,%r47,0;
@ %r113 bra $L19;
mov.u64 %r30,%r43;
$L16:
add.u64 %r57,%r23,-4;
mov.u64 %r43,%r30;
$L19:
st.u64 [%r58],%r57;
.loc 1 208 9
bra $L28;
$L6:
.loc 1 159 5
setp.eq.u32 %r115,%r59,0;
@ %r115 bra $L24;
bra $L5;
$L28:
.loc 1 209 1
mov.u64 %value,%r43;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstol_r
.visible .func (.param .u64 %value_out) _wcstol_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 217 9
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 218 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstol_l
.visible .func (.param .u64 %value_out) wcstol_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 226 9
ld.global.u64 %r33,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
call (%value_in),_wcstol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 227 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstol
.visible .func (.param .u64 %value_out) wcstol (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 234 9
ld.global.u64 %r32,[_impure_ptr];
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstol_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r33,[%value_in];
}
.loc 1 235 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wcstold.o/1612277263  0     0     100666  2289      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcstold_l
.visible .func (.param .f64 %value_out) wcstold_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/wcstold.c"
// BEGIN GLOBAL FUNCTION DECL: wcstold
.visible .func (.param .f64 %value_out) wcstold (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: wcstod_l
.extern .func (.param .f64 %value_out) wcstod_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: wcstold_l
.visible .func (.param .f64 %value_out) wcstold_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .f64 %r29;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 46 10
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),wcstod_l,(%out_arg1,%out_arg2,%out_arg3);
ld.param.f64 %r29,[%value_in];
}
.loc 1 113 1
mov.f64 %value,%r29;
st.param.f64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstold
.visible .func (.param .f64 %value_out) wcstold (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .f64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r27;
.reg .f64 %r28;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
.loc 1 120 10
cvta.global.u64 %r27,__global_locale;
{
.param .f64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r27;
call (%value_in),wcstod_l,(%out_arg1,%out_arg2,%out_arg3);
ld.param.f64 %r28,[%value_in];
}
.loc 1 124 1
mov.f64 %value,%r28;
st.param.f64 [%value_out],%value;
ret;
}

lib_a-wcstoll.o/1612277263  0     0     100666  10328     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _wcstoll_l
.visible .func (.param .u64 %value_out) _wcstoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstoll.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstoll_r
.visible .func (.param .u64 %value_out) _wcstoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoll_l
.visible .func (.param .u64 %value_out) wcstoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoll
.visible .func (.param .u64 %value_out) wcstoll (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _wcstoll_l
.visible .func (.param .u64 %value_out) _wcstoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r23;
.reg .u64 %r30;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u64 %r41;
.reg .u64 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .u32 %r50;
.reg .u64 %r51;
.reg .u64 %r54;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u64 %r75;
.reg .u32 %r76;
.reg .pred %r77;
.reg .u32 %r78;
.reg .pred %r79;
.reg .u32 %r80;
.reg .pred %r81;
.reg .pred %r82;
.reg .u32 %r84;
.reg .u32 %r86;
.reg .u32 %r87;
.reg .u16 %r89;
.reg .u16 %r90;
.reg .u16 %r91;
.reg .u32 %r92;
.reg .u16 %r93;
.reg .pred %r94;
.reg .u32 %r96;
.reg .u32 %r97;
.reg .u32 %r99;
.reg .u32 %r100;
.reg .u16 %r101;
.reg .u16 %r102;
.reg .u16 %r103;
.reg .u32 %r104;
.reg .u16 %r105;
.reg .pred %r106;
.reg .u64 %r107;
.reg .pred %r108;
.reg .u32 %r109;
.reg .pred %r110;
.reg .pred %r111;
.reg .pred %r112;
.reg .pred %r113;
.reg .pred %r115;
.reg .u32 %r116;
.reg .u32 %r117;
mov.u64 %r56,%ar0;
mov.u64 %r57,%ar1;
mov.u64 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r39,%r57;
$L2:
mov.u64 %r40,%r39;
add.u64 %r41,%r39,4;
mov.u64 %r39,%r41;
.loc 1 146 5
ld.u32 %r44,[%r40];
.loc 1 147 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r44;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r60;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r63,[%value_in];
}
mov.u32 %r47,%r63;
.loc 1 147 2
setp.ne.u32 %r64,%r47,0;
@ %r64 bra $L2;
.loc 1 148 5
setp.ne.u32 %r65,%r44,45;
@ %r65 bra $L3;
.loc 1 150 5
ld.u32 %r44,[%r41];
.loc 1 150 9
add.u64 %r41,%r40,8;
mov.u64 %r30,-9223372036854775808;
.loc 1 149 7
mov.u32 %r46,1;
bra $L4;
$L3:
.loc 1 151 12
setp.ne.u32 %r66,%r44,43;
@ %r66 bra $L20;
.loc 1 152 5
ld.u32 %r44,[%r39];
.loc 1 138 15
mov.u32 %r46,%r47;
.loc 1 152 9
add.u64 %r41,%r40,8;
.loc 1 152 5
mov.u64 %r30,9223372036854775807;
bra $L4;
$L20:
.loc 1 138 15
mov.u32 %r46,%r47;
mov.u64 %r30,9223372036854775807;
$L4:
.loc 1 153 12
and.b32 %r67,%r59,-17;
.loc 1 153 5
setp.ne.u32 %r68,%r67,0;
@ %r68 bra $L5;
.loc 1 153 32
setp.ne.u32 %r69,%r44,48;
@ %r69 bra $L6;
.loc 1 154 31
ld.u32 %r71,[%r41];
and.b32 %r70,%r71,-33;
.loc 1 154 16
setp.ne.u32 %r72,%r70,88;
@ %r72 bra $L7;
.loc 1 155 5
ld.u32 %r44,[%r41+4];
.loc 1 156 5
add.u64 %r41,%r41,8;
mov.u64 %r54,16;
.loc 1 157 8
cvt.u32.u64 %r59,%r54;
bra $L8;
$L7:
.loc 1 159 5
setp.eq.u32 %r73,%r59,0;
@ %r73 bra $L21;
.loc 1 180 20
cvt.s64.s32 %r54,%r59;
bra $L8;
$L5:
cvt.s64.s32 %r54,%r59;
bra $L8;
$L21:
.loc 1 159 5
mov.u64 %r54,8;
.loc 1 160 24
cvt.u32.u64 %r59,%r54;
bra $L8;
$L24:
.loc 1 159 5
mov.u64 %r54,10;
.loc 1 160 24
cvt.u32.u64 %r59,%r54;
$L8:
.loc 1 180 18
rem.u64 %r75,%r30,%r54;
.loc 1 180 9
cvt.u32.u64 %r50,%r75;
.loc 1 181 9
div.u64 %r51,%r30,%r54;
mov.u64 %r23,%r41;
.loc 1 182 11
mov.u64 %r43,0;
.loc 1 194 8
mov.u32 %r116,-1;
.loc 1 196 8
mov.u32 %r117,1;
$L14:
.loc 1 183 17
add.u32 %r76,%r44,-48;
.loc 1 183 6
setp.gt.u32 %r77,%r76,9;
@ %r77 bra $L9;
.loc 1 184 6
mov.u32 %r45,%r76;
bra $L10;
$L9:
.loc 1 185 22
add.u32 %r78,%r44,-65;
.loc 1 185 11
setp.gt.u32 %r79,%r78,25;
@ %r79 bra $L11;
.loc 1 186 6
add.u32 %r45,%r44,-55;
bra $L10;
$L11:
.loc 1 187 22
add.u32 %r80,%r44,-97;
.loc 1 187 11
setp.gt.u32 %r81,%r80,25;
@ %r81 bra $L12;
.loc 1 188 6
add.u32 %r45,%r44,-87;
$L10:
.loc 1 191 6
setp.le.s32 %r82,%r59,%r45;
@ %r82 bra $L12;
.loc 1 193 24
shr.u32 %r84,%r47,31;
.loc 1 193 35
set.u32.gt.u64 %r86,%r43,%r51;
neg.s32 %r87,%r86;
.loc 1 193 28
cvt.u16.u32 %r90,%r84;
cvt.u16.u32 %r91,%r87;
or.b16 %r89,%r90,%r91;
.loc 1 193 19
cvt.u32.u16 %r92,%r89;
cvt.u16.u8 %r93,%r92;
setp.ne.u16 %r94,%r93,0;
@ %r94 bra $L22;
.loc 1 193 52
set.u32.eq.u64 %r96,%r43,%r51;
neg.s32 %r97,%r96;
.loc 1 193 67
set.u32.gt.s32 %r99,%r45,%r50;
neg.s32 %r100,%r99;
.loc 1 193 62
cvt.u16.u32 %r102,%r97;
cvt.u16.u32 %r103,%r100;
and.b16 %r101,%r102,%r103;
.loc 1 193 44
cvt.u32.u16 %r104,%r101;
cvt.u16.u8 %r105,%r104;
setp.ne.u16 %r106,%r105,0;
@ %r106 bra $L23;
.loc 1 198 8
cvt.s64.s32 %r107,%r45;
mad.lo.u64 %r43,%r43,%r54,%r107;
.loc 1 196 8
mov.u32 %r47,%r117;
bra $L13;
$L22:
.loc 1 194 8
mov.u32 %r47,%r116;
bra $L13;
$L23:
mov.u32 %r47,%r116;
$L13:
.loc 1 182 28
ld.u32 %r44,[%r23];
add.u64 %r23,%r23,4;
.loc 1 183 6
bra $L14;
$L12:
.loc 1 201 5
setp.ne.u32 %r108,%r47,-1;
@ %r108 bra $L15;
.loc 1 203 16
mov.u32 %r109,34;
st.u32 [%r56],%r109;
.loc 1 206 5
setp.ne.u64 %r110,%r58,0;
@ %r110 bra $L16;
.loc 1 202 7
mov.u64 %r43,%r30;
bra $L28;
$L15:
.loc 1 204 12
setp.eq.u32 %r111,%r46,0;
@ %r111 bra $L18;
.loc 1 205 7
neg.s64 %r43,%r43;
$L18:
.loc 1 206 5
setp.eq.u64 %r112,%r58,0;
@ %r112 bra $L28;
.loc 1 207 11
setp.eq.u32 %r113,%r47,0;
@ %r113 bra $L19;
mov.u64 %r30,%r43;
$L16:
add.u64 %r57,%r23,-4;
mov.u64 %r43,%r30;
$L19:
st.u64 [%r58],%r57;
.loc 1 208 9
bra $L28;
$L6:
.loc 1 159 5
setp.eq.u32 %r115,%r59,0;
@ %r115 bra $L24;
bra $L5;
$L28:
.loc 1 209 1
mov.u64 %value,%r43;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstoll_r
.visible .func (.param .u64 %value_out) _wcstoll_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 217 9
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoll_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 218 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoll_l
.visible .func (.param .u64 %value_out) wcstoll_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 226 9
ld.global.u64 %r33,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
call (%value_in),_wcstoll_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 227 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoll
.visible .func (.param .u64 %value_out) wcstoll (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 234 9
ld.global.u64 %r32,[_impure_ptr];
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoll_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r33,[%value_in];
}
.loc 1 235 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
/2047           1612277263  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

/2066           1612277263  0     0     100666  1500      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcstombs
.visible .func (.param .u64 %value_out) wcstombs (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/stdlib/wcstombs.c"
// BEGIN GLOBAL FUNCTION DEF: wcstombs
.visible .func (.param .u64 %value_out) wcstombs (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r23;
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r29;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .pred %r34;
.reg .u32 %r36;
.reg .pred %r38;
.reg .pred %r39;
mov.u64 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
.loc 1 63 6
setp.eq.u64 %r34,%r33,0;
@ %r34 bra $L2;
mov.u64 %r25,%r31;
mov.u64 %r26,%r32;
add.u64 %r29,%r25,%r33;
.loc 1 61 7
mov.u32 %r24,0;
$L4:
.loc 1 65 19
ld.u8 %r36,[%r26];
cvt.s32.s8 %r23,%r36;
.loc 1 65 17
st.u8 [%r25],%r36;
.loc 1 65 10
setp.ne.u32 %r38,%r23,0;
@ %r38 bra $L3;
.loc 1 71 10
cvt.s64.s32 %r33,%r24;
bra $L2;
$L3:
.loc 1 67 12
add.u32 %r24,%r24,1;
.loc 1 68 5
add.u64 %r25,%r25,1;
add.u64 %r26,%r26,4;
setp.ne.u64 %r39,%r25,%r29;
@ %r39 bra $L4;
.loc 1 71 10
cvt.s64.s32 %r33,%r24;
$L2:
.loc 1 73 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}
/2084           1612277263  0     0     100666  4849      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _wcstombs_r
.visible .func (.param .u64 %value_out) _wcstombs_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstombs_r.c"
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DEF: _wcstombs_r
.visible .func (.param .u64 %value_out) _wcstombs_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r23;
.reg .u32 %r25;
.reg .u64 %r28;
.reg .u64 %r37;
.reg .u32 %r39;
.reg .u64 %r40;
.reg .u64 %r43;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r53;
.reg .u64 %r54;
.reg .pred %r55;
.reg .pred %r56;
.reg .pred %r57;
.reg .u32 %r63;
.reg .u64 %r64;
.reg .pred %r65;
.reg .u64 %r66;
.reg .pred %r67;
.reg .u32 %r70;
.reg .u32 %r73;
.reg .u64 %r74;
.reg .pred %r75;
.reg .pred %r76;
.reg .pred %r77;
.reg .u64 %r78;
.reg .u32 %r79;
.reg .u64 %r80;
.reg .u32 %r81;
.reg .pred %r82;
.reg .u64 %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u64 %r86;
.reg .u64 %r87;
.reg .u32 %r88;
.reg .u64 %r90;
.reg .pred %r91;
.reg .u64 %r93;
mov.u64 %r50,%ar0;
mov.u64 %r51,%ar1;
mov.u64 %r52,%ar2;
mov.u64 %r53,%ar3;
mov.u64 %r54,%ar4;
.loc 1 17 6
setp.eq.u64 %r55,%r51,0;
@ %r55 bra $L2;
.loc 1 31 13
setp.ne.u64 %r56,%r53,0;
@ %r56 bra $L12;
.loc 1 45 14
mov.u64 %r49,%r53;
bra $L1;
$L2:
.loc 1 20 14
ld.u32 %r25,[%r52];
.loc 1 20 13
setp.eq.u32 %r57,%r25,0;
@ %r57 bra $L13;
.loc 1 19 14
mov.u64 %r49,%r51;
cvta.global.u64 %r93,__global_locale;
$L6:
.loc 1 22 36
add.u64 %r52,%r52,4;
.loc 1 22 12
ld.u64 %r64,[%r93+224];
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u32 %in_ar2,.param .u64 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r50;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r25;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r54;
call (%value_in),%r64,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u32 %r63,[%value_in];
}
.loc 1 23 7
setp.ne.u32 %r65,%r63,-1;
@ %r65 bra $L5;
$L7:
.loc 1 24 13
mov.u64 %r49,-1;
bra $L1;
$L5:
.loc 1 25 14
cvt.s64.s32 %r66,%r63;
add.u64 %r49,%r49,%r66;
.loc 1 20 14
ld.u32 %r25,[%r52];
.loc 1 20 13
setp.ne.u32 %r67,%r25,0;
@ %r67 bra $L6;
bra $L1;
$L12:
.loc 1 31 13
mov.u64 %r43,%r51;
mov.u64 %r40,%r53;
cvta.global.u64 %r93,__global_locale;
$L3:
.loc 1 33 19
ld.u64 %r74,[%r93+224];
ld.u32 %r70,[%r52];
{
.param .u32 %value_in;
$LCT1:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u32 %in_ar2,.param .u64 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r50;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%frame;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r70;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r54;
call (%value_in),%r74,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT1;
ld.param.u32 %r73,[%value_in];
}
mov.u32 %r39,%r73;
.loc 1 34 14
setp.eq.u32 %r75,%r39,-1;
@ %r75 bra $L7;
.loc 1 36 28
cvt.s64.s32 %r28,%r39;
.loc 1 36 44
setp.lt.u64 %r76,%r28,%r40;
@ %r76 bra $L8;
cvt.u32.u64 %r39,%r40;
$L8:
.loc 1 37 11
setp.le.s32 %r77,%r39,0;
@ %r77 bra $L9;
mov.u64 %r23,%r43;
mov.u64 %r37,%frame;
add.u64 %r78,%r43,1;
add.u32 %r79,%r39,-1;
cvt.u64.u32 %r80,%r79;
add.u64 %r48,%r78,%r80;
$L10:
.loc 1 38 20
ld.u8 %r81,[%r37];
st.u8 [%r23],%r81;
.loc 1 37 11
add.u64 %r23,%r23,1;
add.u64 %r37,%r37,1;
setp.ne.u64 %r82,%r23,%r48;
@ %r82 bra $L10;
.loc 1 38 17
cvt.u64.u32 %r83,%r39;
add.u64 %r43,%r43,%r83;
$L9:
.loc 1 40 14
ld.u32 %r84,[%r52];
setp.ne.u32 %r85,%r84,0;
@ %r85 bra $L11;
.loc 1 41 24
sub.u64 %r86,%r43,%r51;
.loc 1 41 33
set.u32.le.u64 %r88,%r28,%r40;
cvt.s64.s32 %r87,%r88;
.loc 1 41 28
add.u64 %r49,%r86,%r87;
bra $L1;
$L11:
.loc 1 42 11
add.u64 %r52,%r52,4;
.loc 1 43 13
cvt.s64.s32 %r90,%r39;
sub.u64 %r40,%r40,%r90;
.loc 1 31 13
setp.ne.u64 %r91,%r40,0;
@ %r91 bra $L3;
mov.u64 %r49,%r53;
bra $L1;
$L13:
.loc 1 45 14
mov.u64 %r49,%r51;
$L1:
.loc 1 47 1
mov.u64 %value,%r49;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wcstoul.o/1612277263  0     0     100666  10813     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _wcstoul_l
.visible .func (.param .u64 %value_out) _wcstoul_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstoul.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstoul_r
.visible .func (.param .u64 %value_out) _wcstoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoul_l
.visible .func (.param .u64 %value_out) wcstoul_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoul
.visible .func (.param .u64 %value_out) wcstoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: _wcstoul_l
.visible .func (.param .u64 %value_out) _wcstoul_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r24;
.reg .u64 %r29;
.reg .u64 %r39;
.reg .u64 %r40;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u32 %r45;
.reg .u32 %r46;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .u64 %r69;
.reg .u64 %r72;
.reg .pred %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .pred %r76;
.reg .pred %r77;
.reg .u64 %r78;
.reg .u64 %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u32 %r86;
.reg .pred %r87;
.reg .pred %r88;
.reg .u32 %r90;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u16 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u32 %r98;
.reg .u16 %r99;
.reg .pred %r100;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .u32 %r105;
.reg .u32 %r106;
.reg .u16 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .u32 %r110;
.reg .u16 %r111;
.reg .pred %r112;
.reg .u64 %r113;
.reg .pred %r114;
.reg .u32 %r115;
.reg .pred %r116;
.reg .pred %r117;
.reg .pred %r118;
.reg .pred %r119;
.reg .pred %r121;
.reg .u64 %r122;
.reg .u64 %r125;
.reg .u32 %r126;
.reg .u32 %r127;
mov.u64 %r56,%ar0;
mov.u64 %r57,%ar1;
mov.u64 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r52,%r57;
$L2:
mov.u64 %r39,%r52;
add.u64 %r40,%r52,4;
mov.u64 %r52,%r40;
.loc 1 144 5
ld.u32 %r42,[%r39];
.loc 1 145 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r42;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r60;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r63,[%value_in];
}
mov.u32 %r45,%r63;
.loc 1 145 2
setp.ne.u32 %r64,%r45,0;
@ %r64 bra $L2;
.loc 1 146 5
setp.ne.u32 %r65,%r42,45;
@ %r65 bra $L3;
.loc 1 148 5
ld.u32 %r42,[%r40];
.loc 1 148 9
add.u64 %r40,%r39,8;
.loc 1 147 7
mov.u32 %r44,1;
bra $L4;
$L3:
.loc 1 149 12
setp.ne.u32 %r66,%r42,43;
@ %r66 bra $L20;
.loc 1 150 5
ld.u32 %r42,[%r52];
.loc 1 138 15
mov.u32 %r44,%r45;
.loc 1 150 9
add.u64 %r40,%r39,8;
bra $L4;
$L20:
.loc 1 138 15
mov.u32 %r44,%r45;
$L4:
.loc 1 151 12
and.b32 %r67,%r59,-17;
.loc 1 151 5
setp.eq.u32 %r68,%r67,0;
@ %r68 bra $L5;
.loc 1 159 38
cvt.s64.s32 %r29,%r59;
.loc 1 159 9
mov.u64 %r69,-1;
div.u64 %r24,%r69,%r29;
.loc 1 160 36
rem.u64 %r72,%r69,%r29;
.loc 1 160 9
cvt.u32.u64 %r46,%r72;
bra $L6;
$L5:
.loc 1 151 32
setp.ne.u32 %r73,%r42,48;
@ %r73 bra $L7;
.loc 1 152 31
ld.u32 %r75,[%r40];
and.b32 %r74,%r75,-33;
.loc 1 152 16
setp.ne.u32 %r76,%r74,88;
@ %r76 bra $L8;
.loc 1 153 5
ld.u32 %r42,[%r40+4];
.loc 1 154 5
add.u64 %r40,%r40,8;
mov.u32 %r46,15;
mov.u64 %r24,1152921504606846975;
mov.u64 %r29,16;
.loc 1 155 8
cvt.u32.u64 %r59,%r29;
bra $L6;
$L8:
.loc 1 157 5
setp.eq.u32 %r77,%r59,0;
@ %r77 bra $L21;
.loc 1 159 38
cvt.s64.s32 %r29,%r59;
.loc 1 159 9
mov.u64 %r78,-1;
div.u64 %r24,%r78,%r29;
.loc 1 160 36
rem.u64 %r81,%r78,%r29;
.loc 1 160 9
cvt.u32.u64 %r46,%r81;
bra $L6;
$L21:
.loc 1 157 5
mov.u32 %r46,7;
mov.u64 %r24,2305843009213693951;
mov.u64 %r29,8;
.loc 1 158 24
cvt.u32.u64 %r59,%r29;
bra $L6;
$L25:
.loc 1 157 5
mov.u32 %r46,5;
mov.u64 %r24,1844674407370955161;
mov.u64 %r29,10;
.loc 1 158 24
cvt.u32.u64 %r59,%r29;
$L6:
mov.u64 %r51,%r40;
.loc 1 161 11
mov.u64 %r55,0;
.loc 1 173 8
mov.u32 %r126,-1;
.loc 1 175 8
mov.u32 %r127,1;
$L14:
.loc 1 162 17
add.u32 %r82,%r42,-48;
.loc 1 162 6
setp.gt.u32 %r83,%r82,9;
@ %r83 bra $L9;
.loc 1 163 6
mov.u32 %r43,%r82;
bra $L10;
$L9:
.loc 1 164 22
add.u32 %r84,%r42,-65;
.loc 1 164 11
setp.gt.u32 %r85,%r84,25;
@ %r85 bra $L11;
.loc 1 165 6
add.u32 %r43,%r42,-55;
bra $L10;
$L11:
.loc 1 166 22
add.u32 %r86,%r42,-97;
.loc 1 166 11
setp.gt.u32 %r87,%r86,25;
@ %r87 bra $L12;
.loc 1 167 6
add.u32 %r43,%r42,-87;
$L10:
.loc 1 170 6
setp.le.s32 %r88,%r59,%r43;
@ %r88 bra $L12;
.loc 1 172 24
shr.u32 %r90,%r45,31;
.loc 1 172 35
set.u32.lt.u64 %r92,%r24,%r55;
neg.s32 %r93,%r92;
.loc 1 172 28
cvt.u16.u32 %r96,%r90;
cvt.u16.u32 %r97,%r93;
or.b16 %r95,%r96,%r97;
.loc 1 172 19
cvt.u32.u16 %r98,%r95;
cvt.u16.u8 %r99,%r98;
setp.ne.u16 %r100,%r99,0;
@ %r100 bra $L22;
.loc 1 172 52
set.u32.eq.u64 %r102,%r24,%r55;
neg.s32 %r103,%r102;
.loc 1 172 67
set.u32.gt.s32 %r105,%r43,%r46;
neg.s32 %r106,%r105;
.loc 1 172 62
cvt.u16.u32 %r108,%r103;
cvt.u16.u32 %r109,%r106;
and.b16 %r107,%r108,%r109;
.loc 1 172 44
cvt.u32.u16 %r110,%r107;
cvt.u16.u8 %r111,%r110;
setp.ne.u16 %r112,%r111,0;
@ %r112 bra $L23;
.loc 1 177 8
cvt.s64.s32 %r113,%r43;
mad.lo.u64 %r55,%r29,%r55,%r113;
.loc 1 175 8
mov.u32 %r45,%r127;
bra $L13;
$L22:
.loc 1 173 8
mov.u32 %r45,%r126;
bra $L13;
$L23:
mov.u32 %r45,%r126;
$L13:
.loc 1 161 28
ld.u32 %r42,[%r51];
add.u64 %r51,%r51,4;
.loc 1 162 6
bra $L14;
$L12:
.loc 1 180 5
setp.ne.u32 %r114,%r45,-1;
@ %r114 bra $L15;
.loc 1 182 16
mov.u32 %r115,34;
st.u32 [%r56],%r115;
.loc 1 185 5
setp.ne.u64 %r116,%r58,0;
@ %r116 bra $L24;
.loc 1 181 7
mov.u64 %r55,-1;
bra $L1;
$L15:
.loc 1 183 12
setp.eq.u32 %r117,%r44,0;
@ %r117 bra $L18;
.loc 1 184 7
neg.s64 %r55,%r55;
$L18:
.loc 1 185 5
setp.eq.u64 %r118,%r58,0;
@ %r118 bra $L1;
.loc 1 186 11
setp.eq.u32 %r119,%r45,0;
@ %r119 bra $L19;
bra $L16;
$L24:
.loc 1 181 7
mov.u64 %r55,-1;
$L16:
.loc 1 186 11
add.u64 %r57,%r51,-4;
$L19:
st.u64 [%r58],%r57;
.loc 1 187 9
bra $L1;
$L7:
.loc 1 157 5
setp.eq.u32 %r121,%r59,0;
@ %r121 bra $L25;
.loc 1 159 38
cvt.s64.s32 %r29,%r59;
.loc 1 159 9
mov.u64 %r122,-1;
div.u64 %r24,%r122,%r29;
.loc 1 160 36
rem.u64 %r125,%r122,%r29;
.loc 1 160 9
cvt.u32.u64 %r46,%r125;
bra $L6;
$L1:
.loc 1 188 1
mov.u64 %value,%r55;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstoul_r
.visible .func (.param .u64 %value_out) _wcstoul_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 196 9
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoul_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 197 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoul_l
.visible .func (.param .u64 %value_out) wcstoul_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 205 9
ld.global.u64 %r33,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
call (%value_in),_wcstoul_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 206 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoul
.visible .func (.param .u64 %value_out) wcstoul (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 213 9
ld.global.u64 %r32,[_impure_ptr];
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoul_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r33,[%value_in];
}
.loc 1 214 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

/2104           1612277263  0     0     100666  14752     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _wcstoull_l$part$0
.func (.param .u64 %value_out) _wcstoull_l$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstoull.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstoull_l
.visible .func (.param .u64 %value_out) _wcstoull_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
// BEGIN GLOBAL FUNCTION DECL: _wcstoull_r
.visible .func (.param .u64 %value_out) _wcstoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoull_l
.visible .func (.param .u64 %value_out) wcstoull_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoull
.visible .func (.param .u64 %value_out) wcstoull (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DEF: _wcstoull_l$part$0
.func (.param .u64 %value_out) _wcstoull_l$part$0 (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r22;
.reg .u32 %r24;
.reg .u64 %r28;
.reg .u32 %r32;
.reg .u32 %r35;
.reg .u64 %r45;
.reg .u32 %r46;
.reg .u32 %r48;
.reg .u64 %r50;
.reg .u64 %r51;
.reg .u64 %r52;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .u64 %r69;
.reg .u64 %r72;
.reg .pred %r73;
.reg .u32 %r74;
.reg .u32 %r75;
.reg .pred %r76;
.reg .pred %r77;
.reg .u64 %r78;
.reg .u64 %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u32 %r86;
.reg .pred %r87;
.reg .pred %r88;
.reg .u32 %r90;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u16 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u32 %r98;
.reg .u16 %r99;
.reg .pred %r100;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .u32 %r105;
.reg .u32 %r106;
.reg .u16 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .u32 %r110;
.reg .u16 %r111;
.reg .pred %r112;
.reg .u64 %r113;
.reg .pred %r114;
.reg .u32 %r115;
.reg .pred %r116;
.reg .pred %r117;
.reg .pred %r118;
.reg .pred %r119;
.reg .pred %r121;
.reg .u64 %r122;
.reg .u64 %r125;
.reg .u32 %r126;
.reg .u32 %r127;
mov.u64 %r56,%ar0;
mov.u64 %r57,%ar1;
mov.u64 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r51,%r57;
$L2:
mov.u64 %r22,%r51;
add.u64 %r28,%r51,4;
mov.u64 %r51,%r28;
.loc 1 160 5
ld.u32 %r24,[%r22];
.loc 1 161 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r60;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r63,[%value_in];
}
mov.u32 %r35,%r63;
.loc 1 161 2
setp.ne.u32 %r64,%r35,0;
@ %r64 bra $L2;
.loc 1 162 5
setp.ne.u32 %r65,%r24,45;
@ %r65 bra $L3;
.loc 1 164 5
ld.u32 %r24,[%r28];
.loc 1 164 9
add.u64 %r28,%r22,8;
.loc 1 163 7
mov.u32 %r46,1;
bra $L4;
$L3:
.loc 1 165 12
setp.ne.u32 %r66,%r24,43;
@ %r66 bra $L20;
.loc 1 166 5
ld.u32 %r24,[%r51];
.loc 1 150 15
mov.u32 %r46,%r35;
.loc 1 166 9
add.u64 %r28,%r22,8;
bra $L4;
$L20:
.loc 1 150 15
mov.u32 %r46,%r35;
$L4:
.loc 1 167 12
and.b32 %r67,%r59,-17;
.loc 1 167 5
setp.eq.u32 %r68,%r67,0;
@ %r68 bra $L5;
.loc 1 175 44
cvt.s64.s32 %r45,%r59;
.loc 1 175 9
mov.u64 %r69,-1;
div.u64 %r52,%r69,%r45;
.loc 1 176 42
rem.u64 %r72,%r69,%r45;
.loc 1 176 9
cvt.u32.u64 %r48,%r72;
bra $L6;
$L5:
.loc 1 167 32
setp.ne.u32 %r73,%r24,48;
@ %r73 bra $L7;
.loc 1 168 31
ld.u32 %r75,[%r28];
and.b32 %r74,%r75,-33;
.loc 1 168 16
setp.ne.u32 %r76,%r74,88;
@ %r76 bra $L8;
.loc 1 169 5
ld.u32 %r24,[%r28+4];
.loc 1 170 5
add.u64 %r28,%r28,8;
mov.u32 %r48,15;
mov.u64 %r52,1152921504606846975;
mov.u64 %r45,16;
.loc 1 171 8
cvt.u32.u64 %r59,%r45;
bra $L6;
$L8:
.loc 1 173 5
setp.eq.u32 %r77,%r59,0;
@ %r77 bra $L21;
.loc 1 175 44
cvt.s64.s32 %r45,%r59;
.loc 1 175 9
mov.u64 %r78,-1;
div.u64 %r52,%r78,%r45;
.loc 1 176 42
rem.u64 %r81,%r78,%r45;
.loc 1 176 9
cvt.u32.u64 %r48,%r81;
bra $L6;
$L21:
.loc 1 173 5
mov.u32 %r48,7;
mov.u64 %r52,2305843009213693951;
mov.u64 %r45,8;
.loc 1 174 24
cvt.u32.u64 %r59,%r45;
bra $L6;
$L25:
.loc 1 173 5
mov.u32 %r48,5;
mov.u64 %r52,1844674407370955161;
mov.u64 %r45,10;
.loc 1 174 24
cvt.u32.u64 %r59,%r45;
$L6:
mov.u64 %r50,%r28;
.loc 1 177 11
mov.u64 %r55,0;
.loc 1 189 8
mov.u32 %r126,-1;
.loc 1 191 8
mov.u32 %r127,1;
$L14:
.loc 1 178 17
add.u32 %r82,%r24,-48;
.loc 1 178 6
setp.gt.u32 %r83,%r82,9;
@ %r83 bra $L9;
.loc 1 179 6
mov.u32 %r32,%r82;
bra $L10;
$L9:
.loc 1 180 22
add.u32 %r84,%r24,-65;
.loc 1 180 11
setp.gt.u32 %r85,%r84,25;
@ %r85 bra $L11;
.loc 1 181 6
add.u32 %r32,%r24,-55;
bra $L10;
$L11:
.loc 1 182 22
add.u32 %r86,%r24,-97;
.loc 1 182 11
setp.gt.u32 %r87,%r86,25;
@ %r87 bra $L12;
.loc 1 183 6
add.u32 %r32,%r24,-87;
$L10:
.loc 1 186 6
setp.le.s32 %r88,%r59,%r32;
@ %r88 bra $L12;
.loc 1 188 24
shr.u32 %r90,%r35,31;
.loc 1 188 35
set.u32.gt.u64 %r92,%r55,%r52;
neg.s32 %r93,%r92;
.loc 1 188 28
cvt.u16.u32 %r96,%r90;
cvt.u16.u32 %r97,%r93;
or.b16 %r95,%r96,%r97;
.loc 1 188 19
cvt.u32.u16 %r98,%r95;
cvt.u16.u8 %r99,%r98;
setp.ne.u16 %r100,%r99,0;
@ %r100 bra $L22;
.loc 1 188 52
set.u32.eq.u64 %r102,%r55,%r52;
neg.s32 %r103,%r102;
.loc 1 188 67
set.u32.gt.s32 %r105,%r32,%r48;
neg.s32 %r106,%r105;
.loc 1 188 62
cvt.u16.u32 %r108,%r103;
cvt.u16.u32 %r109,%r106;
and.b16 %r107,%r108,%r109;
.loc 1 188 44
cvt.u32.u16 %r110,%r107;
cvt.u16.u8 %r111,%r110;
setp.ne.u16 %r112,%r111,0;
@ %r112 bra $L23;
.loc 1 193 8
cvt.s64.s32 %r113,%r32;
mad.lo.u64 %r55,%r55,%r45,%r113;
.loc 1 191 8
mov.u32 %r35,%r127;
bra $L13;
$L22:
.loc 1 189 8
mov.u32 %r35,%r126;
bra $L13;
$L23:
mov.u32 %r35,%r126;
$L13:
.loc 1 177 28
ld.u32 %r24,[%r50];
add.u64 %r50,%r50,4;
.loc 1 178 6
bra $L14;
$L12:
.loc 1 196 5
setp.ne.u32 %r114,%r35,-1;
@ %r114 bra $L15;
.loc 1 198 16
mov.u32 %r115,34;
st.u32 [%r56],%r115;
.loc 1 201 5
setp.ne.u64 %r116,%r58,0;
@ %r116 bra $L24;
.loc 1 197 7
mov.u64 %r55,-1;
bra $L1;
$L15:
.loc 1 199 12
setp.eq.u32 %r117,%r46,0;
@ %r117 bra $L18;
.loc 1 200 7
neg.s64 %r55,%r55;
$L18:
.loc 1 201 5
setp.eq.u64 %r118,%r58,0;
@ %r118 bra $L1;
.loc 1 202 11
setp.eq.u32 %r119,%r35,0;
@ %r119 bra $L19;
bra $L16;
$L24:
.loc 1 197 7
mov.u64 %r55,-1;
$L16:
.loc 1 202 11
add.u64 %r57,%r50,-4;
$L19:
st.u64 [%r58],%r57;
bra $L1;
$L7:
.loc 1 173 5
setp.eq.u32 %r121,%r59,0;
@ %r121 bra $L25;
.loc 1 175 44
cvt.s64.s32 %r45,%r59;
.loc 1 175 9
mov.u64 %r122,-1;
div.u64 %r52,%r122,%r45;
.loc 1 176 42
rem.u64 %r125,%r122,%r45;
.loc 1 176 9
cvt.u32.u64 %r48,%r125;
bra $L6;
$L1:
.loc 1 204 1
mov.u64 %value,%r55;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstoull_l
.visible .func (.param .u64 %value_out) _wcstoull_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u64 %r50;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u32 %r30,%ar3;
mov.u64 %r31,%ar4;
.loc 1 152 24
set.u32.eq.u32 %r33,%r30,1;
neg.s32 %r34,%r33;
.loc 1 152 30
set.u32.gt.u32 %r36,%r30,36;
neg.s32 %r37,%r36;
cvt.u16.u32 %r39,%r34;
cvt.u16.u32 %r40,%r37;
or.b16 %r38,%r39,%r40;
cvt.u32.u16 %r41,%r38;
cvt.u16.u8 %r42,%r41;
setp.eq.u16 %r43,%r42,0;
@ %r43 bra $L37;
.loc 1 153 16
mov.u32 %r44,22;
st.u32 [%r27],%r44;
.loc 1 154 9
mov.u64 %r26,0;
bra $L36;
$L37:
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r30;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoull_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r50,[%value_in];
}
mov.u64 %r26,%r50;
$L36:
.loc 1 204 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstoull_r
.visible .func (.param .u64 %value_out) _wcstoull_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u32 %r40;
.reg .u16 %r41;
.reg .pred %r42;
.reg .u32 %r43;
.reg .u64 %r48;
.reg .u64 %r49;
mov.u64 %r27,%ar0;
mov.u64 %r28,%ar1;
mov.u64 %r29,%ar2;
mov.u32 %r30,%ar3;
.loc 1 152 30
set.u32.gt.u32 %r32,%r30,36;
neg.s32 %r33,%r32;
.loc 1 152 24
set.u32.eq.u32 %r35,%r30,1;
neg.s32 %r36,%r35;
.loc 1 152 30
cvt.u16.u32 %r38,%r33;
cvt.u16.u32 %r39,%r36;
or.b16 %r37,%r38,%r39;
cvt.u32.u16 %r40,%r37;
cvt.u16.u8 %r41,%r40;
setp.eq.u16 %r42,%r41,0;
@ %r42 bra $L40;
.loc 1 153 16
mov.u32 %r43,22;
st.u32 [%r27],%r43;
.loc 1 154 9
mov.u64 %r26,0;
bra $L39;
$L40:
cvta.global.u64 %r48,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r27;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r30;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r48;
call (%value_in),_wcstoull_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r49,[%value_in];
}
mov.u64 %r26,%r49;
$L39:
.loc 1 213 1
mov.u64 %value,%r26;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoull_l
.visible .func (.param .u64 %value_out) wcstoull_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u64 %r31;
.reg .u32 %r33;
.reg .u32 %r34;
.reg .u32 %r36;
.reg .u32 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u16 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .u64 %r50;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u32 %r30,%ar2;
mov.u64 %r31,%ar3;
.loc 1 221 9
ld.global.u64 %r22,[_impure_ptr];
.loc 1 152 30
set.u32.gt.u32 %r33,%r30,36;
neg.s32 %r34,%r33;
.loc 1 152 24
set.u32.eq.u32 %r36,%r30,1;
neg.s32 %r37,%r36;
.loc 1 152 30
cvt.u16.u32 %r39,%r34;
cvt.u16.u32 %r40,%r37;
or.b16 %r38,%r39,%r40;
cvt.u32.u16 %r41,%r38;
cvt.u16.u8 %r42,%r41;
setp.eq.u16 %r43,%r42,0;
@ %r43 bra $L43;
.loc 1 153 16
mov.u32 %r44,22;
st.u32 [%r22],%r44;
.loc 1 154 9
mov.u64 %r27,0;
bra $L42;
$L43:
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r30;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoull_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r50,[%value_in];
}
mov.u64 %r27,%r50;
$L42:
.loc 1 222 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoull
.visible .func (.param .u64 %value_out) wcstoull (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u32 %r32;
.reg .u32 %r33;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u16 %r37;
.reg .u16 %r38;
.reg .u16 %r39;
.reg .u32 %r40;
.reg .u16 %r41;
.reg .pred %r42;
.reg .u32 %r43;
.reg .u64 %r48;
.reg .u64 %r49;
mov.u64 %r28,%ar0;
mov.u64 %r29,%ar1;
mov.u32 %r30,%ar2;
.loc 1 229 9
ld.global.u64 %r22,[_impure_ptr];
.loc 1 152 30
set.u32.gt.u32 %r32,%r30,36;
neg.s32 %r33,%r32;
.loc 1 152 24
set.u32.eq.u32 %r35,%r30,1;
neg.s32 %r36,%r35;
.loc 1 152 30
cvt.u16.u32 %r38,%r33;
cvt.u16.u32 %r39,%r36;
or.b16 %r37,%r38,%r39;
cvt.u32.u16 %r40,%r37;
cvt.u16.u8 %r41,%r40;
setp.eq.u16 %r42,%r41,0;
@ %r42 bra $L46;
.loc 1 153 16
mov.u32 %r43,22;
st.u32 [%r22],%r43;
.loc 1 154 9
mov.u64 %r27,0;
bra $L45;
$L46:
cvta.global.u64 %r48,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r22;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r28;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r29;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r30;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r48;
call (%value_in),_wcstoull_l$part$0,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r49,[%value_in];
}
mov.u64 %r27,%r49;
$L45:
.loc 1 230 1
mov.u64 %value,%r27;
st.param.u64 [%value_out],%value;
ret;
}
/2122           1612277263  0     0     100666  83        `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE

/2142           1612277263  0     0     100666  10815     `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN FUNCTION DECL: _wcstoumax_l
.func (.param .u64 %value_out) _wcstoumax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4);
.file 1 "../../../../../newlib/libc/stdlib/wcstoumax.c"
// BEGIN GLOBAL FUNCTION DECL: _wcstoumax_r
.visible .func (.param .u64 %value_out) _wcstoumax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoumax_l
.visible .func (.param .u64 %value_out) wcstoumax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: wcstoumax
.visible .func (.param .u64 %value_out) wcstoumax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2);
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DECL: iswspace_l
.extern .func (.param .u32 %value_out) iswspace_l (.param .u32 %in_ar0, .param .u64 %in_ar1);
// BEGIN FUNCTION DEF: _wcstoumax_l
.func (.param .u64 %value_out) _wcstoumax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3, .param .u64 %in_ar4)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %ar4;
ld.param.u64 %ar4,[%in_ar4];
.reg .u64 %r37;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u32 %r41;
.reg .u32 %r42;
.reg .u32 %r43;
.reg .u32 %r44;
.reg .u64 %r48;
.reg .u64 %r49;
.reg .u32 %r50;
.reg .u64 %r54;
.reg .u64 %r55;
.reg .u64 %r56;
.reg .u64 %r57;
.reg .u64 %r58;
.reg .u32 %r59;
.reg .u64 %r60;
.reg .u32 %r63;
.reg .pred %r64;
.reg .pred %r65;
.reg .pred %r66;
.reg .u32 %r67;
.reg .pred %r68;
.reg .pred %r69;
.reg .u32 %r70;
.reg .u32 %r71;
.reg .pred %r72;
.reg .pred %r73;
.reg .u32 %r74;
.reg .pred %r75;
.reg .u64 %r76;
.reg .u64 %r79;
.reg .u32 %r80;
.reg .pred %r81;
.reg .u32 %r82;
.reg .pred %r83;
.reg .u32 %r84;
.reg .pred %r85;
.reg .u32 %r86;
.reg .pred %r87;
.reg .pred %r88;
.reg .u32 %r90;
.reg .u32 %r92;
.reg .u32 %r93;
.reg .u16 %r95;
.reg .u16 %r96;
.reg .u16 %r97;
.reg .u32 %r98;
.reg .u16 %r99;
.reg .pred %r100;
.reg .u32 %r102;
.reg .u32 %r103;
.reg .u32 %r105;
.reg .u32 %r106;
.reg .u16 %r107;
.reg .u16 %r108;
.reg .u16 %r109;
.reg .u32 %r110;
.reg .u16 %r111;
.reg .pred %r112;
.reg .u64 %r113;
.reg .pred %r114;
.reg .u32 %r115;
.reg .pred %r116;
.reg .u32 %r117;
.reg .pred %r118;
.reg .pred %r119;
.reg .pred %r121;
.reg .pred %r122;
.reg .u32 %r123;
.reg .u32 %r124;
mov.u64 %r56,%ar0;
mov.u64 %r57,%ar1;
mov.u64 %r58,%ar2;
mov.u32 %r59,%ar3;
mov.u64 %r60,%ar4;
mov.u64 %r48,%r57;
$L2:
mov.u64 %r37,%r48;
add.u64 %r38,%r48,4;
mov.u64 %r48,%r38;
.loc 1 74 5
ld.u32 %r41,[%r37];
.loc 1 75 11
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r60;
call (%value_in),iswspace_l,(%out_arg1,%out_arg2);
ld.param.u32 %r63,[%value_in];
}
mov.u32 %r44,%r63;
.loc 1 75 2
setp.ne.u32 %r64,%r44,0;
@ %r64 bra $L2;
.loc 1 76 5
setp.ne.u32 %r65,%r41,45;
@ %r65 bra $L3;
.loc 1 78 5
ld.u32 %r41,[%r38];
.loc 1 78 9
add.u64 %r38,%r37,8;
.loc 1 77 7
mov.u32 %r43,1;
bra $L4;
$L3:
.loc 1 81 6
setp.ne.u32 %r66,%r41,43;
@ %r66 bra $L23;
.loc 1 82 6
ld.u32 %r41,[%r48];
.loc 1 80 7
mov.u32 %r43,%r44;
.loc 1 82 10
add.u64 %r38,%r37,8;
bra $L4;
$L23:
.loc 1 80 7
mov.u32 %r43,%r44;
$L4:
.loc 1 84 12
and.b32 %r67,%r59,-17;
.loc 1 84 5
setp.ne.u32 %r68,%r67,0;
@ %r68 bra $L5;
.loc 1 84 32
setp.ne.u32 %r69,%r41,48;
@ %r69 bra $L6;
.loc 1 85 31
ld.u32 %r71,[%r38];
and.b32 %r70,%r71,-33;
.loc 1 85 16
setp.ne.u32 %r72,%r70,88;
@ %r72 bra $L7;
.loc 1 86 5
ld.u32 %r41,[%r38+4];
.loc 1 87 5
add.u64 %r38,%r38,8;
mov.u32 %r50,15;
mov.u64 %r49,1152921504606846975;
mov.u64 %r39,16;
.loc 1 88 8
cvt.u32.u64 %r59,%r39;
bra $L8;
$L7:
.loc 1 90 5
setp.eq.u32 %r73,%r59,0;
@ %r73 bra $L24;
$L5:
.loc 1 93 15
add.u32 %r74,%r59,-2;
.loc 1 93 5
setp.gt.u32 %r75,%r74,34;
@ %r75 bra $L9;
.loc 1 96 23
cvt.s64.s32 %r39,%r59;
.loc 1 96 9
mov.u64 %r76,-1;
div.u64 %r49,%r76,%r39;
.loc 1 97 23
rem.u64 %r79,%r76,%r39;
.loc 1 97 9
cvt.u32.u64 %r50,%r79;
bra $L8;
$L9:
.loc 1 127 16
mov.u32 %r80,22;
st.u32 [%r56],%r80;
.loc 1 130 5
setp.ne.u64 %r81,%r58,0;
@ %r81 bra $L25;
.loc 1 92 6
mov.u64 %r55,%r58;
bra $L1;
$L24:
.loc 1 90 5
mov.u32 %r50,7;
mov.u64 %r49,2305843009213693951;
mov.u64 %r39,8;
.loc 1 91 24
cvt.u32.u64 %r59,%r39;
bra $L8;
$L28:
.loc 1 90 5
mov.u32 %r50,5;
mov.u64 %r49,1844674407370955161;
mov.u64 %r39,10;
.loc 1 91 24
cvt.u32.u64 %r59,%r39;
$L8:
mov.u64 %r54,%r38;
.loc 1 92 6
mov.u64 %r55,0;
.loc 1 115 8
mov.u32 %r123,-1;
.loc 1 117 8
mov.u32 %r124,1;
$L17:
.loc 1 104 17
add.u32 %r82,%r41,-48;
.loc 1 104 6
setp.gt.u32 %r83,%r82,9;
@ %r83 bra $L12;
.loc 1 105 6
mov.u32 %r42,%r82;
bra $L13;
$L12:
.loc 1 106 22
add.u32 %r84,%r41,-65;
.loc 1 106 11
setp.gt.u32 %r85,%r84,25;
@ %r85 bra $L14;
.loc 1 107 6
add.u32 %r42,%r41,-55;
bra $L13;
$L14:
.loc 1 108 22
add.u32 %r86,%r41,-97;
.loc 1 108 11
setp.gt.u32 %r87,%r86,25;
@ %r87 bra $L15;
.loc 1 109 6
add.u32 %r42,%r41,-87;
$L13:
.loc 1 112 6
setp.ge.s32 %r88,%r42,%r59;
@ %r88 bra $L15;
.loc 1 114 11
shr.u32 %r90,%r44,31;
.loc 1 114 22
set.u32.gt.u64 %r92,%r55,%r49;
neg.s32 %r93,%r92;
.loc 1 114 15
cvt.u16.u32 %r96,%r90;
cvt.u16.u32 %r97,%r93;
or.b16 %r95,%r96,%r97;
.loc 1 114 6
cvt.u32.u16 %r98,%r95;
cvt.u16.u8 %r99,%r98;
setp.ne.u16 %r100,%r99,0;
@ %r100 bra $L26;
.loc 1 114 39
set.u32.eq.u64 %r102,%r55,%r49;
neg.s32 %r103,%r102;
.loc 1 114 54
set.u32.gt.s32 %r105,%r42,%r50;
neg.s32 %r106,%r105;
.loc 1 114 49
cvt.u16.u32 %r108,%r103;
cvt.u16.u32 %r109,%r106;
and.b16 %r107,%r108,%r109;
.loc 1 114 31
cvt.u32.u16 %r110,%r107;
cvt.u16.u8 %r111,%r110;
setp.ne.u16 %r112,%r111,0;
@ %r112 bra $L27;
.loc 1 119 8
cvt.s64.s32 %r113,%r42;
mad.lo.u64 %r55,%r55,%r39,%r113;
.loc 1 117 8
mov.u32 %r44,%r124;
bra $L16;
$L26:
.loc 1 115 8
mov.u32 %r44,%r123;
bra $L16;
$L27:
mov.u32 %r44,%r123;
$L16:
.loc 1 98 14
ld.u32 %r41,[%r54];
add.u64 %r54,%r54,4;
.loc 1 104 6
bra $L17;
$L15:
.loc 1 122 5
setp.ne.u32 %r114,%r44,-1;
@ %r114 bra $L18;
.loc 1 124 16
mov.u32 %r115,34;
st.u32 [%r56],%r115;
.loc 1 123 7
mov.u64 %r55,-1;
bra $L19;
$L18:
.loc 1 125 12
setp.ne.u32 %r116,%r44,0;
@ %r116 bra $L20;
$L21:
.loc 1 127 16
mov.u32 %r117,22;
st.u32 [%r56],%r117;
.loc 1 130 5
setp.ne.u64 %r118,%r58,0;
@ ! %r118 bra $L1;
bra $L10;
$L20:
.loc 1 128 12
setp.eq.u32 %r119,%r43,0;
@ %r119 bra $L19;
.loc 1 129 7
neg.s64 %r55,%r55;
bra $L19;
$L22:
.loc 1 131 13
add.u64 %r57,%r54,-4;
bra $L10;
$L25:
.loc 1 92 6
mov.u64 %r55,0;
$L10:
.loc 1 131 11
st.u64 [%r58],%r57;
.loc 1 132 9
bra $L1;
$L19:
.loc 1 130 5
setp.ne.u64 %r121,%r58,0;
@ %r121 bra $L22;
bra $L1;
$L6:
.loc 1 90 5
setp.eq.u32 %r122,%r59,0;
@ %r122 bra $L28;
bra $L5;
$L1:
.loc 1 133 1
mov.u64 %value,%r55;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: _wcstoumax_r
.visible .func (.param .u64 %value_out) _wcstoumax_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2, .param .u32 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %ar3;
ld.param.u32 %ar3,[%in_ar3];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
mov.u32 %r26,%ar3;
.loc 1 139 9
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoumax_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r32,[%value_in];
}
.loc 1 140 1
mov.u64 %value,%r32;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoumax_l
.visible .func (.param .u64 %value_out) wcstoumax_l (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 148 9
ld.global.u64 %r33,[_impure_ptr];
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r33;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r27;
call (%value_in),_wcstoumax_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r34,[%value_in];
}
.loc 1 149 1
mov.u64 %value,%r34;
st.param.u64 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcstoumax
.visible .func (.param .u64 %value_out) wcstoumax (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
.loc 1 154 9
ld.global.u64 %r32,[_impure_ptr];
cvta.global.u64 %r31,__global_locale;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r32;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
.param .u32 %out_arg4;
st.param.u32 [%out_arg4],%r26;
.param .u64 %out_arg5;
st.param.u64 [%out_arg5],%r31;
call (%value_in),_wcstoumax_l,(%out_arg1,%out_arg2,%out_arg3,%out_arg4,%out_arg5);
ld.param.u64 %r33,[%value_in];
}
.loc 1 155 1
mov.u64 %value,%r33;
st.param.u64 [%value_out],%value;
ret;
}

/2161           1612277263  0     0     100666  2040      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcswidth
.visible .func (.param .u32 %value_out) wcswidth (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/string/wcswidth.c"
// BEGIN GLOBAL FUNCTION DECL: __wcwidth
.extern .func (.param .u32 %value_out) __wcwidth (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: wcswidth
.visible .func (.param .u32 %value_out) wcswidth (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r29;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r35;
.reg .u32 %r36;
.reg .u32 %r38;
.reg .u32 %r39;
.reg .u16 %r40;
.reg .u16 %r41;
.reg .u16 %r42;
.reg .u32 %r43;
.reg .u16 %r44;
.reg .pred %r45;
.reg .u32 %r46;
.reg .u32 %r47;
.reg .pred %r48;
.reg .u32 %r49;
.reg .pred %r50;
.reg .pred %r51;
mov.u64 %r32,%ar0;
mov.u64 %r33,%ar1;
.loc 1 42 7
set.u32.eq.u64 %r35,%r32,0;
neg.s32 %r36,%r35;
.loc 1 42 18
set.u32.eq.u64 %r38,%r33,0;
neg.s32 %r39,%r38;
.loc 1 42 13
cvt.u16.u32 %r41,%r36;
cvt.u16.u32 %r42,%r39;
or.b16 %r40,%r41,%r42;
.loc 1 42 6
cvt.u32.u16 %r43,%r40;
cvt.u16.u8 %r44,%r43;
setp.ne.u16 %r45,%r44,0;
@ %r45 bra $L4;
mov.u64 %r29,%r32;
.loc 1 41 10
mov.u32 %r31,0;
$L3:
.loc 1 61 14
ld.u32 %r46,[%r29];
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r46;
call (%value_in),__wcwidth,(%out_arg1);
ld.param.u32 %r47,[%value_in];
}
.loc 1 61 8
setp.lt.s32 %r48,%r47,0;
@ %r48 bra $L5;
.loc 1 63 9
add.u32 %r31,%r31,%r47;
.loc 1 64 3
ld.u32 %r49,[%r29];
setp.eq.u32 %r50,%r49,0;
@ %r50 bra $L1;
.loc 1 64 20
add.u64 %r33,%r33,-1;
add.u64 %r29,%r29,4;
setp.ne.u64 %r51,%r33,0;
@ %r51 bra $L3;
bra $L1;
$L4:
.loc 1 43 12
mov.u32 %r31,0;
bra $L1;
$L5:
.loc 1 62 14
mov.u32 %r31,-1;
$L1:
.loc 1 66 1
mov.u32 %value,%r31;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-wcsxfrm.o/1612277263  0     0     100666  1270      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wcsxfrm
.visible .func (.param .u64 %value_out) wcsxfrm (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wcsxfrm.c"
// BEGIN GLOBAL FUNCTION DECL: wcslcpy
.extern .func (.param .u64 %value_out) wcslcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: wcsxfrm
.visible .func (.param .u64 %value_out) wcsxfrm (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r29;
mov.u64 %r23,%ar0;
mov.u64 %r24,%ar1;
mov.u64 %r25,%ar2;
.loc 1 44 10
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r23;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r25;
call (%value_in),wcslcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r29,[%value_in];
}
.loc 1 45 1
mov.u64 %value,%r29;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wctomb.o/ 1612277263  0     0     100666  1285      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wctomb
.visible .func (.param .u32 %value_out) wctomb (.param .u64 %in_ar0, .param .u32 %in_ar1);
.file 1 "../../../../../newlib/libc/stdlib/wctomb.c"
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DEF: wctomb
.visible .func (.param .u32 %value_out) wctomb (.param .u64 %in_ar0, .param .u32 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .pred %r28;
.reg .pred %r29;
.reg .u64 %r30;
.reg .u32 %r31;
mov.u64 %r26,%ar0;
mov.u32 %r27,%ar1;
.loc 1 59 12
setp.eq.u64 %r28,%r26,0;
@ %r28 bra $L4;
.loc 1 63 5
setp.le.u32 %r29,%r27,255;
@ %r29 bra $L3;
.loc 1 64 3
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r30,[%value_in];
}
.loc 1 64 9
mov.u32 %r31,138;
st.u32 [%r30],%r31;
.loc 1 65 10
mov.u32 %r25,-1;
bra $L1;
$L3:
.loc 1 68 14
st.u8 [%r26],%r27;
.loc 1 69 16
mov.u32 %r25,1;
bra $L1;
$L4:
.loc 1 60 24
cvt.u32.u64 %r25,%r26;
$L1:
.loc 1 71 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}

/2179           1612277263  0     0     100666  2836      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _wctomb_r
.visible .func (.param .u32 %value_out) _wctomb_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/stdlib/wctomb_r.c"
// BEGIN GLOBAL FUNCTION DECL: __ascii_wctomb
.visible .func (.param .u32 %value_out) __ascii_wctomb (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL VAR DECL: __global_locale
.extern .global .align 8 .u64 __global_locale[53];
// BEGIN GLOBAL FUNCTION DEF: _wctomb_r
.visible .func (.param .u32 %value_out) _wctomb_r (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r32;
.reg .u32 %r33;
.reg .u64 %r34;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u32 %r26,%ar2;
mov.u64 %r27,%ar3;
.loc 1 15 10
cvta.global.u64 %r32,__global_locale;
ld.u64 %r34,[%r32+224];
{
.param .u32 %value_in;
$LCT0:
.callprototype ( .param .u32 %value_out) _ ( .param .u64 %in_ar0,.param .u64 %in_ar1,.param .u32 %in_ar2,.param .u64 %in_ar3);
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r26;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%r27;
call (%value_in),%r34,(%out_arg1,%out_arg2,%out_arg3,%out_arg4),$LCT0;
ld.param.u32 %r33,[%value_in];
}
.loc 1 16 1
mov.u32 %value,%r33;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: __ascii_wctomb
.visible .func (.param .u32 %value_out) __ascii_wctomb (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u32 %ar2;
ld.param.u32 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u32 %r27;
.reg .pred %r29;
.reg .pred %r30;
.reg .u32 %r31;
mov.u64 %r25,%ar0;
mov.u64 %r26,%ar1;
mov.u32 %r27,%ar2;
.loc 1 29 6
setp.eq.u64 %r29,%r26,0;
@ %r29 bra $L5;
.loc 1 35 6
setp.le.u32 %r30,%r27,255;
@ %r30 bra $L4;
.loc 1 38 17
mov.u32 %r31,138;
st.u32 [%r25],%r31;
.loc 1 39 14
mov.u32 %r24,-1;
bra $L2;
$L4:
.loc 1 42 8
st.u8 [%r26],%r27;
.loc 1 43 10
mov.u32 %r24,1;
bra $L2;
$L5:
.loc 1 30 12
cvt.u32.u64 %r24,%r26;
$L2:
.loc 1 44 1
mov.u32 %value,%r24;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-wcwidth.o/1612277263  0     0     100666  3182      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __wcwidth
.visible .func (.param .u32 %value_out) __wcwidth (.param .u32 %in_ar0);
.file 1 "../../../../../newlib/libc/string/wcwidth.c"
// BEGIN GLOBAL FUNCTION DECL: wcwidth
.visible .func (.param .u32 %value_out) wcwidth (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: iswprint
.extern .func (.param .u32 %value_out) iswprint (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: iswcntrl
.extern .func (.param .u32 %value_out) iswcntrl (.param .u32 %in_ar0);
// BEGIN GLOBAL FUNCTION DEF: __wcwidth
.visible .func (.param .u32 %value_out) __wcwidth (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u16 %r46;
.reg .u32 %r48;
.reg .u32 %r49;
mov.u32 %r30,%ar0;
.loc 1 224 7
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r30;
call (%value_in),iswprint,(%out_arg1);
ld.param.u32 %r32,[%value_in];
}
.loc 1 224 6
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L3;
.loc 1 226 7
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r30;
call (%value_in),iswcntrl,(%out_arg1);
ld.param.u32 %r35,[%value_in];
}
.loc 1 226 22
set.u32.eq.u32 %r37,%r30,0;
neg.s32 %r38,%r37;
.loc 1 226 6
set.u32.ne.u32 %r40,%r35,0;
neg.s32 %r41,%r40;
.loc 1 226 22
cvt.u16.u32 %r43,%r38;
cvt.u16.u32 %r44,%r41;
or.b16 %r42,%r43,%r44;
xor.b16 %r46,%r42,1;
cvt.u32.u16 %r49,%r46;
cvt.u32.u8 %r48,%r49;
neg.s32 %r29,%r48;
bra $L1;
$L3:
.loc 1 225 12
mov.u32 %r29,1;
$L1:
.loc 1 230 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
// BEGIN GLOBAL FUNCTION DEF: wcwidth
.visible .func (.param .u32 %value_out) wcwidth (.param .u32 %in_ar0)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u32 %r29;
.reg .u32 %r30;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r35;
.reg .u32 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .u16 %r42;
.reg .u16 %r43;
.reg .u16 %r44;
.reg .u16 %r46;
.reg .u32 %r48;
.reg .u32 %r49;
mov.u32 %r30,%ar0;
.loc 1 224 7
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r30;
call (%value_in),iswprint,(%out_arg1);
ld.param.u32 %r32,[%value_in];
}
.loc 1 224 6
setp.ne.u32 %r33,%r32,0;
@ %r33 bra $L6;
.loc 1 226 7
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r30;
call (%value_in),iswcntrl,(%out_arg1);
ld.param.u32 %r35,[%value_in];
}
.loc 1 226 22
set.u32.eq.u32 %r37,%r30,0;
neg.s32 %r38,%r37;
.loc 1 226 6
set.u32.ne.u32 %r40,%r35,0;
neg.s32 %r41,%r40;
.loc 1 226 22
cvt.u16.u32 %r43,%r38;
cvt.u16.u32 %r44,%r41;
or.b16 %r42,%r43,%r44;
xor.b16 %r46,%r42,1;
cvt.u32.u16 %r49,%r46;
cvt.u32.u8 %r48,%r49;
neg.s32 %r29,%r48;
bra $L4;
$L6:
.loc 1 225 12
mov.u32 %r29,1;
$L4:
.loc 1 241 1
mov.u32 %value,%r29;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-wmemchr.o/1612277263  0     0     100666  1315      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wmemchr
.visible .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wmemchr.c"
// BEGIN GLOBAL FUNCTION DEF: wmemchr
.visible .func (.param .u64 %value_out) wmemchr (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .u32 %r29;
.reg .pred %r30;
.reg .pred %r31;
mov.u64 %r25,%ar0;
mov.u32 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 72 3
setp.eq.u64 %r28,%r27,0;
@ %r28 bra $L4;
.loc 1 72 10
mov.u64 %r23,0;
$L3:
.loc 1 74 10
ld.u32 %r29,[%r25];
setp.eq.u32 %r30,%r29,%r26;
@ %r30 bra $L5;
.loc 1 79 8
add.u64 %r25,%r25,4;
.loc 1 72 23
add.u64 %r23,%r23,1;
.loc 1 72 3
setp.ne.u64 %r31,%r27,%r23;
@ %r31 bra $L3;
.loc 1 81 10
mov.u64 %r24,0;
bra $L1;
$L4:
mov.u64 %r24,%r27;
bra $L1;
$L5:
mov.u64 %r24,%r25;
$L1:
.loc 1 82 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}

lib_a-wmemcmp.o/1612277263  0     0     100666  1487      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wmemcmp
.visible .func (.param .u32 %value_out) wmemcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wmemcmp.c"
// BEGIN GLOBAL FUNCTION DEF: wmemcmp
.visible .func (.param .u32 %value_out) wmemcmp (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u32 %r22;
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u32 %r25;
.reg .u64 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .pred %r29;
.reg .pred %r30;
.reg .pred %r31;
.reg .pred %r32;
mov.u64 %r26,%ar0;
mov.u64 %r27,%ar1;
mov.u64 %r28,%ar2;
.loc 1 71 3
setp.eq.u64 %r29,%r28,0;
@ %r29 bra $L5;
.loc 1 71 10
mov.u64 %r24,0;
$L4:
.loc 1 73 11
ld.u32 %r22,[%r26];
.loc 1 73 18
ld.u32 %r23,[%r27];
.loc 1 73 10
setp.eq.u32 %r30,%r22,%r23;
@ %r30 bra $L3;
.loc 1 76 25
setp.gt.s32 %r31,%r22,%r23;
selp.u32 %r25,1,-1,%r31;
bra $L1;
$L3:
.loc 1 78 9
add.u64 %r26,%r26,4;
.loc 1 79 9
add.u64 %r27,%r27,4;
.loc 1 71 23
add.u64 %r24,%r24,1;
.loc 1 71 3
setp.ne.u64 %r32,%r28,%r24;
@ %r32 bra $L4;
.loc 1 81 10
mov.u32 %r25,0;
bra $L1;
$L5:
cvt.u32.u64 %r25,%r28;
$L1:
.loc 1 82 1
mov.u32 %value,%r25;
st.param.u32 [%value_out],%value;
ret;
}

lib_a-wmemcpy.o/1612277263  0     0     100666  1306      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wmemcpy
.visible .func (.param .u64 %value_out) wmemcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wmemcpy.c"
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: wmemcpy
.visible .func (.param .u64 %value_out) wmemcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r30;
.reg .u64 %r31;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 69 22
shl.b64 %r30,%r26,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r31,[%value_in];
}
.loc 1 70 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
/2197           1612277263  0     0     100666  1314      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wmemmove
.visible .func (.param .u64 %value_out) wmemmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wmemmove.c"
// BEGIN GLOBAL FUNCTION DECL: memmove
.extern .func (.param .u64 %value_out) memmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: wmemmove
.visible .func (.param .u64 %value_out) wmemmove (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u64 %r26;
.reg .u64 %r30;
.reg .u64 %r31;
mov.u64 %r24,%ar0;
mov.u64 %r25,%ar1;
mov.u64 %r26,%ar2;
.loc 1 74 22
shl.b64 %r30,%r26,2;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r24;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r25;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r30;
call (%value_in),memmove,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r31,[%value_in];
}
.loc 1 75 1
mov.u64 %value,%r31;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wmemset.o/1612277263  0     0     100666  1162      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: wmemset
.visible .func (.param .u64 %value_out) wmemset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/wmemset.c"
// BEGIN GLOBAL FUNCTION DEF: wmemset
.visible .func (.param .u64 %value_out) wmemset (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %r22;
.reg .u64 %r23;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .pred %r28;
.reg .pred %r29;
mov.u64 %r25,%ar0;
mov.u32 %r26,%ar1;
mov.u64 %r27,%ar2;
.loc 1 70 2
setp.eq.u64 %r28,%r27,0;
@ %r28 bra $L2;
.loc 1 69 4
mov.u64 %r22,%r25;
.loc 1 70 9
mov.u64 %r23,0;
$L3:
.loc 1 71 6
st.u32 [%r22],%r26;
.loc 1 72 4
add.u64 %r22,%r22,4;
.loc 1 70 22
add.u64 %r23,%r23,1;
.loc 1 70 2
setp.ne.u64 %r29,%r27,%r23;
@ %r29 bra $L3;
$L2:
.loc 1 75 1
mov.u64 %value,%r25;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-write.o/  1612277263  0     0     100666  2236      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// BEGIN GLOBAL FUNCTION DECL: write
.visible .func (.param .u32 %value_out) write (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../../newlib/libc/machine/nvptx/write.c"
// BEGIN GLOBAL FUNCTION DECL: __errno
.extern .func (.param .u64 %value_out) __errno;
// BEGIN GLOBAL FUNCTION DECL: printf
.extern .func (.param .u32 %value_out) printf (.param .u64 %in_ar0, .param .u64 %in_ar1);
// END PREAMBLE
// BEGIN VAR DEF: $LC0
.const .align 1 .u8 $LC0[3] =
{37,99,0 };
// BEGIN GLOBAL FUNCTION DEF: write
.visible .func (.param .u32 %value_out) write (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 8 .b8 %stack_ar[16];
.reg .u64 %stack;
cvta.local.u64 %stack,%stack_ar;
.reg .u64 %r28;
.reg .u64 %r29;
.reg .u32 %r30;
.reg .u32 %r31;
.reg .u64 %r32;
.reg .u64 %r33;
.reg .u32 %r34;
.reg .pred %r35;
.reg .pred %r36;
.reg .u64 %r37;
.reg .u32 %r38;
.reg .u32 %r40;
.reg .u32 %r41;
.reg .pred %r43;
.reg .u64 %r45;
mov.u32 %r31,%ar0;
mov.u64 %r32,%ar1;
mov.u64 %r33,%ar2;
.loc 1 25 15
add.u32 %r34,%r31,-1;
.loc 1 25 6
setp.gt.u32 %r35,%r34,1;
@ %r35 bra $L2;
.loc 1 30 3
setp.ne.u64 %r36,%r33,0;
@ %r36 bra $L3;
bra $L4;
$L2:
.loc 1 27 7
{
.param .u64 %value_in;
call (%value_in),__errno;
ld.param.u64 %r37,[%value_in];
}
.loc 1 27 13
mov.u32 %r38,9;
st.u32 [%r37],%r38;
.loc 1 28 14
mov.u32 %r30,-1;
bra $L1;
$L3:
mov.u64 %r28,%r32;
add.u64 %r29,%r28,%r33;
cvta.const.u64 %r45,$LC0;
$L6:
.loc 1 31 5
ld.s8 %r40,[%r28];
st.u32 [%stack],%r40;
{
.param .u32 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r45;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%stack;
call (%value_in),printf,(%out_arg1,%out_arg2);
ld.param.u32 %r41,[%value_in];
}
.loc 1 30 3
add.u64 %r28,%r28,1;
setp.ne.u64 %r43,%r28,%r29;
@ %r43 bra $L6;
$L4:
.loc 1 32 10
cvt.u32.u64 %r30,%r33;
$L1:
.loc 1 33 1
mov.u32 %value,%r30;
st.param.u32 [%value_out],%value;
ret;
}
lib_a-writer.o/ 1612277263  0     0     100666  1848      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: _write_r
.visible .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3);
.file 1 "../../../../../newlib/libc/reent/writer.c"
// BEGIN GLOBAL VAR DECL: errno
.extern .global .align 4 .u32 errno[1];
// BEGIN GLOBAL FUNCTION DECL: write
.extern .func (.param .u32 %value_out) write (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DEF: _write_r
.visible .func (.param .u64 %value_out) _write_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u64 %in_ar2, .param .u64 %in_ar3)
{
.reg .u64 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u32 %ar1;
ld.param.u32 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.reg .u64 %ar3;
ld.param.u64 %ar3,[%in_ar3];
.reg .u32 %r23;
.reg .u64 %r24;
.reg .u64 %r25;
.reg .u32 %r26;
.reg .u64 %r27;
.reg .u64 %r28;
.reg .u32 %r29;
.reg .u32 %r33;
.reg .pred %r34;
.reg .pred %r35;
mov.u64 %r25,%ar0;
mov.u32 %r26,%ar1;
mov.u64 %r27,%ar2;
mov.u64 %r28,%ar3;
.loc 1 48 9
mov.u32 %r29,0;
st.global.u32 [errno],%r29;
.loc 1 49 24
{
.param .u32 %value_in;
.param .u32 %out_arg1;
st.param.u32 [%out_arg1],%r26;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r27;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r28;
call (%value_in),write,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u32 %r33,[%value_in];
}
.loc 1 49 12
cvt.s64.s32 %r24,%r33;
.loc 1 49 6
setp.ne.u32 %r34,%r33,-1;
@ %r34 bra $L1;
.loc 1 49 62
ld.global.u32 %r23,[errno];
.loc 1 49 53
setp.eq.u32 %r35,%r23,0;
@ %r35 bra $L1;
.loc 1 50 17
st.u32 [%r25],%r23;
$L1:
.loc 1 52 1
mov.u64 %value,%r24;
st.param.u64 [%value_out],%value;
ret;
}
lib_a-wsetup.o/ 1612277263  0     0     100666  4638      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __swsetup_r
.visible .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
.file 1 "../../../../../newlib/libc/stdio/wsetup.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: __sinit
.extern .func __sinit (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: _free_r
.extern .func _free_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DECL: __smakebuf_r
.extern .func __smakebuf_r (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __swsetup_r
.visible .func (.param .u32 %value_out) __swsetup_r (.param .u64 %in_ar0, .param .u64 %in_ar1)
{
.reg .u32 %value;
.reg .u64 %ar0;
ld.param.u64 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %r24;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u32 %r38;
.reg .u64 %r39;
.reg .u32 %r40;
.reg .u64 %r41;
.reg .u64 %r42;
.reg .pred %r43;
.reg .u32 %r44;
.reg .pred %r45;
.reg .u16 %r47;
.reg .u16 %r48;
.reg .pred %r49;
.reg .u16 %r50;
.reg .pred %r52;
.reg .u32 %r53;
.reg .u16 %r54;
.reg .u16 %r56;
.reg .pred %r58;
.reg .pred %r59;
.reg .u64 %r60;
.reg .pred %r61;
.reg .u64 %r64;
.reg .u16 %r65;
.reg .u16 %r66;
.reg .u32 %r67;
.reg .u16 %r68;
.reg .u16 %r69;
.reg .u16 %r72;
.reg .u16 %r73;
.reg .pred %r74;
.reg .u16 %r77;
.reg .u16 %r78;
.reg .pred %r79;
.reg .u32 %r80;
.reg .u32 %r81;
.reg .u32 %r82;
.reg .u16 %r83;
.reg .pred %r85;
.reg .u16 %r87;
.reg .u16 %r88;
.reg .pred %r89;
.reg .u16 %r90;
.reg .pred %r93;
mov.u64 %r41,%ar0;
mov.u64 %r42,%ar1;
.loc 1 38 3
ld.global.u64 %r30,[_impure_ptr];
setp.eq.u64 %r43,%r30,0;
@ %r43 bra $L2;
ld.u32 %r44,[%r30+80];
setp.ne.u32 %r45,%r44,0;
@ %r45 bra $L2;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
call __sinit,(%out_arg1);
}
$L2:
.loc 1 44 10
ld.s16 %r38,[%r42+16];
.loc 1 44 6
cvt.u16.u32 %r48,%r38;
and.b16 %r47,%r48,8;
setp.eq.u16 %r49,%r47,0;
@ %r49 bra $L3;
.loc 1 69 14
ld.u64 %r39,[%r42+24];
bra $L4;
$L3:
.loc 1 46 10
and.b16 %r50,%r48,16;
setp.ne.u16 %r52,%r50,0;
@ %r52 bra $L5;
.loc 1 48 16
mov.u32 %r53,9;
st.u32 [%r41],%r53;
.loc 1 49 15
or.b16 %r54,%r48,64;
st.u16 [%r42+16],%r54;
.loc 1 50 11
mov.u32 %r40,-1;
bra $L1;
$L5:
.loc 1 52 10
and.b16 %r56,%r48,4;
setp.ne.u16 %r58,%r56,0;
@ %r58 bra $L7;
.loc 1 69 14
ld.u64 %r39,[%r42+24];
bra $L8;
$L7:
.loc 1 55 8
ld.u64 %r24,[%r42+88];
.loc 1 55 7
setp.eq.u64 %r59,%r24,0;
@ %r59 bra $L9;
.loc 1 56 6
add.u64 %r60,%r42,116;
setp.eq.u64 %r61,%r24,%r60;
@ %r61 bra $L10;
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r24;
call _free_r,(%out_arg1,%out_arg2);
}
.loc 1 57 15
ld.s16 %r38,[%r42+16];
$L10:
.loc 1 56 6
mov.u64 %r64,0;
st.u64 [%r42+88],%r64;
$L9:
.loc 1 57 15
cvt.u16.u32 %r66,%r38;
and.b16 %r65,%r66,-37;
cvt.s32.s16 %r38,%r65;
.loc 1 58 11
mov.u32 %r67,0;
st.u32 [%r42+8],%r67;
.loc 1 59 20
ld.u64 %r39,[%r42+24];
.loc 1 59 11
st.u64 [%r42],%r39;
$L8:
.loc 1 61 18
cvt.u16.u32 %r69,%r38;
or.b16 %r68,%r69,8;
cvt.s32.s16 %r38,%r68;
st.u16 [%r42+16],%r68;
$L4:
.loc 1 69 6
setp.ne.u64 %r93,%r39,0;
@ %r93 bra $L11;
.loc 1 70 9
cvt.u16.u32 %r73,%r38;
and.b16 %r72,%r73,640;
setp.eq.u16 %r74,%r72,512;
@ %r74 bra $L11;
.loc 1 71 5
{
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r41;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r42;
call __smakebuf_r,(%out_arg1,%out_arg2);
}
.loc 1 73 9
ld.s16 %r38,[%r42+16];
.loc 1 86 15
ld.u64 %r39,[%r42+24];
setp.ne.u64 %r93,%r39,0;
$L11:
.loc 1 73 6
cvt.u16.u32 %r78,%r38;
and.b16 %r77,%r78,1;
setp.eq.u16 %r79,%r77,0;
@ %r79 bra $L12;
.loc 1 80 14
mov.u32 %r80,0;
st.u32 [%r42+12],%r80;
.loc 1 81 22
ld.u32 %r82,[%r42+32];
neg.s32 %r81,%r82;
.loc 1 81 20
st.u32 [%r42+40],%r81;
bra $L13;
$L12:
.loc 1 84 38
and.b16 %r83,%r78,2;
setp.ne.u16 %r85,%r83,0;
@ %r85 bra $L15;
ld.u32 %r29,[%r42+32];
bra $L14;
$L15:
mov.u32 %r29,0;
$L14:
.loc 1 84 12
st.u32 [%r42+12],%r29;
$L13:
.loc 1 86 6
@ %r93 bra $L16;
.loc 1 86 22
cvt.u16.u32 %r88,%r38;
and.b16 %r87,%r88,128;
setp.eq.u16 %r89,%r87,0;
@ %r89 bra $L17;
.loc 1 89 18
or.b16 %r90,%r88,64;
st.u16 [%r42+16],%r90;
.loc 1 90 14
mov.u32 %r40,-1;
bra $L1;
$L16:
.loc 1 92 10
mov.u32 %r40,0;
bra $L1;
$L17:
mov.u32 %r40,0;
$L1:
.loc 1 93 1
mov.u32 %value,%r40;
st.param.u32 [%value_out],%value;
ret;
}
/2215           1612277263  0     0     100666  3610      `
// BEGIN PREAMBLE
.version 3.1
.target sm_30
.address_size 64
// END PREAMBLE
// BEGIN GLOBAL FUNCTION DECL: __xpg_strerror_r
.visible .func (.param .u32 %value_out) __xpg_strerror_r (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
.file 1 "../../../../../newlib/libc/string/xpg_strerror_r.c"
// BEGIN GLOBAL VAR DECL: _impure_ptr
.extern .global .align 8 .u64 _impure_ptr[1];
// BEGIN GLOBAL FUNCTION DECL: _strerror_r
.extern .func (.param .u64 %value_out) _strerror_r (.param .u64 %in_ar0, .param .u32 %in_ar1, .param .u32 %in_ar2, .param .u64 %in_ar3);
// BEGIN GLOBAL FUNCTION DECL: strlen
.extern .func (.param .u64 %value_out) strlen (.param .u64 %in_ar0);
// BEGIN GLOBAL FUNCTION DECL: memcpy
.extern .func (.param .u64 %value_out) memcpy (.param .u64 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2);
// BEGIN GLOBAL FUNCTION DECL: strcpy
.extern .func (.param .u64 %value_out) strcpy (.param .u64 %in_ar0, .param .u64 %in_ar1);
// BEGIN GLOBAL FUNCTION DEF: __xpg_strerror_r
.visible .func (.param .u32 %value_out) __xpg_strerror_r (.param .u32 %in_ar0, .param .u64 %in_ar1, .param .u64 %in_ar2)
{
.reg .u32 %value;
.reg .u32 %ar0;
ld.param.u32 %ar0,[%in_ar0];
.reg .u64 %ar1;
ld.param.u64 %ar1,[%in_ar1];
.reg .u64 %ar2;
ld.param.u64 %ar2,[%in_ar2];
.local .align 16 .b8 %frame_ar[16];
.reg .u64 %frame;
cvta.local.u64 %frame,%frame_ar;
.reg .u64 %r24;
.reg .u32 %r28;
.reg .u32 %r29;
.reg .u64 %r30;
.reg .u64 %r31;
.reg .u32 %r32;
.reg .pred %r33;
.reg .u32 %r36;
.reg .u64 %r38;
.reg .u64 %r39;
.reg .u64 %r41;
.reg .pred %r42;
.reg .u64 %r46;
.reg .u64 %r47;
.reg .u32 %r48;
.reg .u64 %r51;
.reg .pred %r52;
.reg .u16 %r53;
.reg .u32 %r54;
.reg .pred %r55;
mov.u32 %r29,%ar0;
mov.u64 %r30,%ar1;
mov.u64 %r31,%ar2;
.loc 1 12 7
mov.u32 %r32,0;
st.u32 [%frame],%r32;
.loc 1 14 6
setp.eq.u64 %r33,%r31,0;
@ %r33 bra $L4;
.loc 1 16 11
ld.global.u64 %r38,[_impure_ptr];
mov.u32 %r36,1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r38;
.param .u32 %out_arg2;
st.param.u32 [%out_arg2],%r29;
.param .u32 %out_arg3;
st.param.u32 [%out_arg3],%r36;
.param .u64 %out_arg4;
st.param.u64 [%out_arg4],%frame;
call (%value_in),_strerror_r,(%out_arg1,%out_arg2,%out_arg3,%out_arg4);
ld.param.u64 %r39,[%value_in];
}
.loc 1 17 7
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r39;
call (%value_in),strlen,(%out_arg1);
ld.param.u64 %r41,[%value_in];
}
.loc 1 17 6
setp.lt.u64 %r42,%r41,%r31;
@ %r42 bra $L3;
.loc 1 19 7
add.u64 %r24,%r31,-1;
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
.param .u64 %out_arg3;
st.param.u64 [%out_arg3],%r24;
call (%value_in),memcpy,(%out_arg1,%out_arg2,%out_arg3);
ld.param.u64 %r46,[%value_in];
}
.loc 1 20 21
add.u64 %r47,%r30,%r24;
cvt.u32.u32 %r48,%r32;
st.u8 [%r47],%r48;
.loc 1 21 14
mov.u32 %r28,34;
bra $L1;
$L3:
.loc 1 23 3
{
.param .u64 %value_in;
.param .u64 %out_arg1;
st.param.u64 [%out_arg1],%r30;
.param .u64 %out_arg2;
st.param.u64 [%out_arg2],%r39;
call (%value_in),strcpy,(%out_arg1,%out_arg2);
ld.param.u64 %r51,[%value_in];
}
.loc 1 24 11
ld.u32 %r28,[%frame];
.loc 1 24 38
setp.ne.u32 %r52,%r28,0;
@ %r52 bra $L1;
.loc 1 24 18
ld.s8 %r54,[%r39];
cvt.u16.u32 %r53,%r54;
setp.ne.u16 %r55,%r53,0;
.loc 1 24 38
selp.u32 %r28,%r28,22,%r55;
bra $L1;
$L4:
.loc 1 15 12
mov.u32 %r28,34;
$L1:
.loc 1 25 1
mov.u32 %value,%r28;
st.param.u32 [%value_out],%value;
ret;
}
